
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 2e 02 c0       	mov    eax,0xc0022e04
c0000025:	3d 04 2e 02 c0       	cmp    eax,0xc0022e04
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 2e 02 c0       	push   0xc0022e04
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 2e 02 c0       	mov    eax,0xc0022e04
c0000051:	2d 04 2e 02 c0       	sub    eax,0xc0022e04
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 2e 02 c0       	push   0xc0022e04
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c f6 01 c0       	mov    ebx,0xc001f64c
c0000097:	81 eb 48 f6 01 c0    	sub    ebx,0xc001f648
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 f6 01 c0       	mov    esi,0xc001f648
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 2e 02 c0       	push   0xc0022e04
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 04 2e 02 c0       	push   0xc0022e04
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 03 49 01 00       	call   c0014bb0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e1 48 01 00       	call   c0014bb0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ee 4d 01 00       	call   c00150dc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 54 01 00       	call   c00157a4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 25 08 01 00       	jmp    c0010ba4 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe09a0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe09a0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe09a0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 f6 01 c0 04 	test   BYTE PTR [ecx-0x3ffe09a0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe09a0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe089c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 3e 6f 01 00       	jmp    c0018ce0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 68 6f 01 00       	jmp    c0018d20 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 89 6f 01 00       	jmp    c0018d60 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 f8 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0740]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 f8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0740]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c f7 01 c0       	mov    edx,0xc001f77c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 f7 01 c0       	mov    eax,0xc001f782
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 f8 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe07c0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b f7 01 c0       	mov    eax,0xc001f78b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 f8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0740]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 f8 01 c0       	mov    eax,0xc001f810
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 f8 01 c0       	mov    ebx,0xc001f800
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 f7 01 c0       	mov    eax,0xc001f7e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 f7 01 c0       	mov    eax,0xc001f7f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 f7 01 c0       	mov    edx,0xc001f792
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e f7 01 c0       	mov    edx,0xc001f79e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 f7 01 c0       	mov    edx,0xc001f7b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fbe0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbe0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 f9 01 c0       	mov    eax,0xc001f9e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0720]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 fc 01 c0       	push   0xc001fce0
c000611b:	e8 5c 35 01 00       	call   c001967c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee fc 01 c0       	push   0xc001fcee
c0006153:	e8 24 35 01 00       	call   c001967c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 8d 34 01 00       	call   c0019620 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd fc 01 c0       	push   0xc001fcfd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 fd 01 c0       	push   0xc001fd00
c0006812:	e8 65 2e 01 00       	call   c001967c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 79 2e 01 00       	call   c0019698 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd05
c000682c:	e8 4b 2e 01 00       	call   c001967c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 5b 2e 01 00       	call   c0019698 <iso_kprintfd>
c000683d:	c7 04 24 0b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd0b
c0006844:	e8 33 2e 01 00       	call   c001967c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 43 2e 01 00       	call   c0019698 <iso_kprintfd>
c0006855:	c7 04 24 11 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd11
c000685c:	e8 1b 2e 01 00       	call   c001967c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 2b 2e 01 00       	call   c0019698 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd fc 01 c0       	push   0xc001fcfd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a fd 01 c0       	push   0xc001fd1a
c0006a31:	e8 46 2c 01 00       	call   c001967c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 fd 01 c0       	push   0xc001fd25
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c fd 01 c0       	push   0xc001fd2c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 fd 01 c0       	push   0xc001fd33
c0006b48:	e8 2f 2b 01 00       	call   c001967c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e fd 01 c0       	push   0xc001fd3e
c0006b63:	e8 14 2b 01 00       	call   c001967c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 e4 54 00 00       	call   c000c160 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 4f fd 01 c0       	push   0xc001fd4f
c0006cad:	e8 33 98 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 68 fd 01 c0       	push   0xc001fd68
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 2e e2 00 00       	call   c0014f08 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 3d e4 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 14 5c 01 c0       	push   0xc0015c14
c0006cfe:	52                   	push   edx
c0006cff:	e8 28 e4 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 5a a0 00 00       	call   c0010d72 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 64 fe 01 c0       	push   0xc001fe64
c0006d20:	e8 c0 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d25:	e8 0d f3 00 00       	call   c0016037 <Vm::initialise8086()>
c0006d2a:	e8 81 42 00 00       	call   c000afb0 <Fs::initVFS()>
c0006d2f:	c7 04 24 75 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd75
c0006d36:	e8 aa 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 64 fe 01 c0       	push   0xc001fe64
c0006d5a:	e8 86 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d5f:	e8 b8 9c 00 00       	call   c0010a1c <KeLoadSystemEnv()>
c0006d64:	e8 15 9f 00 00       	call   c0010c7e <KeSetupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 8f fd 01 c0       	push   0xc001fd8f
c0006d73:	68 98 fd 01 c0       	push   0xc001fd98
c0006d78:	e8 d3 c4 00 00       	call   c0013250 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 3b 4d 00 00       	call   c000bac0 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 88 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe88
c0006d8c:	e8 54 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 bb 53 00 00       	call   c000c15e <Device::loadDriversForAll()>
c0006da3:	c7 04 24 a0 fd 01 c0 	mov    DWORD PTR [esp],0xc001fda0
c0006daa:	e8 36 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 b1 fd 01 c0       	push   0xc001fdb1
c0006dbe:	e8 5b db 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 83 dd 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 b7 e7 00 00       	call   c0015590 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 cd fd 01 c0       	push   0xc001fdcd
c0006ded:	50                   	push   eax
c0006dee:	e8 e7 53 00 00       	call   c000c1da <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba d4 fe 01 c0       	mov    edx,0xc001fed4
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 59 77 01 00       	call   c001e646 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 a9 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 82 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 60 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 3e 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 4b 89 00 00       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 26 89 00 00       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 b8 75 01 00       	call   c001e600 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 06 72 01 00       	call   c001e270 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 3c 89 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 d6 fd 01 c0       	push   0xc001fdd6
c00070da:	e8 da 9a 00 00       	call   c0010bb9 <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 dc fd 01 c0       	push   0xc001fddc
c0007116:	e8 9e 9a 00 00       	call   c0010bb9 <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 89 82 00 00       	jmp    c000f3ec <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 e2 fd 01 c0       	push   0xc001fde2
c00071bb:	0f 94 05 60 26 02 c0 	sete   BYTE PTR ds:0xc0022660
c00071c2:	e8 1e 93 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 83 7d 00 00       	call   c000ef60 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 56 4e 00 00       	call   c000c042 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 fa fd 01 c0 	mov    DWORD PTR [esp],0xc001fdfa
c0007205:	e8 db 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 6c 88 00 00       	call   c000fa8c <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 13 4e 00 00       	call   c000c042 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 a8 fe 01 c0       	push   0xc001fea8
c000724c:	e8 94 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0007251:	e8 1e 00 01 00       	call   c0017274 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 14 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe14
c000725d:	e8 83 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 ea df 00 00       	call   c0015258 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 2f fe 01 c0       	push   0xc001fe2f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 74 36 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 40 fe 01 c0       	push   0xc001fe40
c00072e5:	e8 cf 98 00 00       	call   c0010bb9 <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 4d fe 01 c0       	push   0xc001fe4d
c00072fa:	e8 ba 98 00 00       	call   c0010bb9 <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 57 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe57
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 a0 98 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 35 fa 00 00       	call   c0016f40 <HalSystemIdle()>
c000750b:	e8 f2 76 01 00       	call   c001ec02 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 00 e3 01 c0       	push   0xc001e300
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 10 e3 01 c0       	push   0xc001e310
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 1a e3 01 c0       	push   0xc001e31a
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 24 e3 01 c0       	push   0xc001e324
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 2e e3 01 c0       	push   0xc001e32e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 38 e3 01 c0       	push   0xc001e338
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 42 e3 01 c0       	push   0xc001e342
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 4c e3 01 c0       	push   0xc001e34c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 56 e3 01 c0       	push   0xc001e356
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 5e e3 01 c0       	push   0xc001e35e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 68 e3 01 c0       	push   0xc001e368
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 70 e3 01 c0       	push   0xc001e370
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 78 e3 01 c0       	push   0xc001e378
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 80 e3 01 c0       	push   0xc001e380
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 9a e3 01 c0       	push   0xc001e39a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 a2 e3 01 c0       	push   0xc001e3a2
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 ac e3 01 c0       	push   0xc001e3ac
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 b6 e3 01 c0       	push   0xc001e3b6
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 c0 e3 01 c0       	push   0xc001e3c0
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 5a e4 01 c0       	push   0xc001e45a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 61 e4 01 c0       	push   0xc001e461
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 4c e4 01 c0       	push   0xc001e44c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 53 e4 01 c0       	push   0xc001e453
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 ca e3 01 c0       	push   0xc001e3ca
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 d4 e3 01 c0       	push   0xc001e3d4
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 de e3 01 c0       	push   0xc001e3de
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 e8 e3 01 c0       	push   0xc001e3e8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 f2 e3 01 c0       	push   0xc001e3f2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 fc e3 01 c0       	push   0xc001e3fc
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 06 e4 01 c0       	push   0xc001e406
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 10 e4 01 c0       	push   0xc001e410
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 1a e4 01 c0       	push   0xc001e41a
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 24 e4 01 c0       	push   0xc001e424
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 2e e4 01 c0       	push   0xc001e42e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 38 e4 01 c0       	push   0xc001e438
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 42 e4 01 c0       	push   0xc001e442
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 9c e5 01 c0       	push   0xc001e59c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 a6 e5 01 c0       	push   0xc001e5a6
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 b0 e5 01 c0       	push   0xc001e5b0
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 ba e5 01 c0       	push   0xc001e5ba
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 c4 e5 01 c0       	push   0xc001e5c4
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 ce e5 01 c0       	push   0xc001e5ce
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 d8 e5 01 c0       	push   0xc001e5d8
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 e2 e5 01 c0       	push   0xc001e5e2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 0f 25 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 11 16 00 00       	call   c0008f38 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 56 e3 01 c0       	push   0xc001e356
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 46 16 00 00       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 48 26 02 c0    	mov    edx,DWORD PTR ds:0xc0022648
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d 48 26 02 c0    	mov    edi,DWORD PTR ds:0xc0022648
c00079b8:	e8 f5 03 00 00       	call   c0007db2 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 4a 23 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 48 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022648,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 48 26 02 c0       	mov    eax,ds:0xc0022648
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 f8 fe 01 c0       	push   0xc001fef8
c0007a00:	e8 34 2f 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 28 ff 01 c0       	push   0xc001ff28
c0007a1f:	e8 95 91 00 00       	call   c0010bb9 <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 2d ff 01 c0       	push   0xc001ff2d
c0007a35:	e8 7f 91 00 00       	call   c0010bb9 <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 9d 23 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 cb 1f 00 00       	call   c0009a5c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 34 ff 01 c0       	push   0xc001ff34
c0007b57:	e8 dd 2d 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 08 89 00 00       	call   c0010469 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a8 03 00 00       	call   c0007f20 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 62 1c 00 00       	call   c00097df <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 54 1f 00 00       	call   c0009adc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 07 70 01 00       	call   c001eb9a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	53                   	push   ebx
c0007baa:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb0:	6a 00                	push   0x0
c0007bb2:	6a 00                	push   0x0
c0007bb4:	56                   	push   esi
c0007bb5:	e8 ec f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bba:	83 c4 14             	add    esp,0x14
c0007bbd:	53                   	push   ebx
c0007bbe:	e8 e3 1f 00 00       	call   c0009ba6 <VAS::~VAS()>
c0007bc3:	83 c4 30             	add    esp,0x30
c0007bc6:	5b                   	pop    ebx
c0007bc7:	5e                   	pop    esi
c0007bc8:	5f                   	pop    edi
c0007bc9:	c3                   	ret    

c0007bca <Phys::allocateDMA(unsigned long)>:
c0007bca:	55                   	push   ebp
c0007bcb:	31 ed                	xor    ebp,ebp
c0007bcd:	57                   	push   edi
c0007bce:	56                   	push   esi
c0007bcf:	53                   	push   ebx
c0007bd0:	31 db                	xor    ebx,ebx
c0007bd2:	83 ec 1c             	sub    esp,0x1c
c0007bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bd9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be7:	31 c0                	xor    eax,eax
c0007be9:	c1 ef 0c             	shr    edi,0xc
c0007bec:	eb 1b                	jmp    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bee:	85 c0                	test   eax,eax
c0007bf0:	75 06                	jne    c0007bf8 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf6:	89 dd                	mov    ebp,ebx
c0007bf8:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfb:	39 f7                	cmp    edi,esi
c0007bfd:	74 37                	je     c0007c36 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bff:	89 f0                	mov    eax,esi
c0007c01:	83 c3 01             	add    ebx,0x1
c0007c04:	83 fb 0f             	cmp    ebx,0xf
c0007c07:	7f 13                	jg     c0007c1c <Phys::allocateDMA(unsigned long)+0x52>
c0007c09:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c10:	74 dc                	je     c0007bee <Phys::allocateDMA(unsigned long)+0x24>
c0007c12:	31 c0                	xor    eax,eax
c0007c14:	83 c3 01             	add    ebx,0x1
c0007c17:	83 fb 0f             	cmp    ebx,0xf
c0007c1a:	7e ed                	jle    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	68 4c ff 01 c0       	push   0xc001ff4c
c0007c24:	e8 90 8f 00 00       	call   c0010bb9 <KePanic(char const*)>
c0007c29:	83 c4 10             	add    esp,0x10
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c4 1c             	add    esp,0x1c
c0007c31:	5b                   	pop    ebx
c0007c32:	5e                   	pop    esi
c0007c33:	5f                   	pop    edi
c0007c34:	5d                   	pop    ebp
c0007c35:	c3                   	ret    
c0007c36:	89 e9                	mov    ecx,ebp
c0007c38:	c1 f9 04             	sar    ecx,0x4
c0007c3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c3f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c43:	89 ca                	mov    edx,ecx
c0007c45:	83 ea 01             	sub    edx,0x1
c0007c48:	79 03                	jns    c0007c4d <Phys::allocateDMA(unsigned long)+0x83>
c0007c4a:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4d:	c1 fa 04             	sar    edx,0x4
c0007c50:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c54:	74 08                	je     c0007c5e <Phys::allocateDMA(unsigned long)+0x94>
c0007c56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5a:	31 c0                	xor    eax,eax
c0007c5c:	eb b6                	jmp    c0007c14 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5e:	85 f6                	test   esi,esi
c0007c60:	74 17                	je     c0007c79 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c62:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c68:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c6f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c72:	83 c2 01             	add    edx,0x1
c0007c75:	39 d0                	cmp    eax,edx
c0007c77:	75 f6                	jne    c0007c6f <Phys::allocateDMA(unsigned long)+0xa5>
c0007c79:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c82:	01 f8                	add    eax,edi
c0007c84:	85 d2                	test   edx,edx
c0007c86:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8b:	74 17                	je     c0007ca4 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	68 4c ff 01 c0       	push   0xc001ff4c
c0007c95:	e8 1f 8f 00 00       	call   c0010bb9 <KePanic(char const*)>
c0007c9a:	83 c4 10             	add    esp,0x10
c0007c9d:	89 f0                	mov    eax,esi
c0007c9f:	e9 5d ff ff ff       	jmp    c0007c01 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca4:	c1 e5 0c             	shl    ebp,0xc
c0007ca7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cad:	e9 7c ff ff ff       	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x64>

c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbc:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc1:	c1 ea 0c             	shr    edx,0xc
c0007cc4:	29 d0                	sub    eax,edx
c0007cc6:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ccf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd4:	c1 e8 0c             	shr    eax,0xc
c0007cd7:	85 d2                	test   edx,edx
c0007cd9:	74 11                	je     c0007cec <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdb:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce0:	01 c2                	add    edx,eax
c0007ce2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce5:	83 c0 01             	add    eax,0x1
c0007ce8:	39 d0                	cmp    eax,edx
c0007cea:	75 f6                	jne    c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cec:	c3                   	ret    

c0007ced <Phys::setPageState(unsigned long, bool)>:
c0007ced:	57                   	push   edi
c0007cee:	56                   	push   esi
c0007cef:	8b 35 4c 26 02 c0    	mov    esi,DWORD PTR ds:0xc002264c
c0007cf5:	53                   	push   ebx
c0007cf6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d03:	0f b6 c0             	movzx  eax,al
c0007d06:	89 ca                	mov    edx,ecx
c0007d08:	83 e1 07             	and    ecx,0x7
c0007d0b:	c1 ea 03             	shr    edx,0x3
c0007d0e:	d3 c3                	rol    ebx,cl
c0007d10:	01 d6                	add    esi,edx
c0007d12:	d3 e0                	shl    eax,cl
c0007d14:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d17:	21 fb                	and    ebx,edi
c0007d19:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1b:	8b 1d 4c 26 02 c0    	mov    ebx,DWORD PTR ds:0xc002264c
c0007d21:	01 da                	add    edx,ebx
c0007d23:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d25:	09 c8                	or     eax,ecx
c0007d27:	88 02                	mov    BYTE PTR [edx],al
c0007d29:	5b                   	pop    ebx
c0007d2a:	5e                   	pop    esi
c0007d2b:	5f                   	pop    edi
c0007d2c:	c3                   	ret    

c0007d2d <Phys::getPageState(unsigned long)>:
c0007d2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d31:	8b 15 4c 26 02 c0    	mov    edx,DWORD PTR ds:0xc002264c
c0007d37:	89 c8                	mov    eax,ecx
c0007d39:	83 e1 07             	and    ecx,0x7
c0007d3c:	c1 e8 03             	shr    eax,0x3
c0007d3f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d43:	d3 f8                	sar    eax,cl
c0007d45:	83 e0 01             	and    eax,0x1
c0007d48:	c3                   	ret    

c0007d49 <Phys::freePage(unsigned long)>:
c0007d49:	53                   	push   ebx
c0007d4a:	83 ec 08             	sub    esp,0x8
c0007d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d51:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d57:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5d:	76 41                	jbe    c0007da0 <Phys::freePage(unsigned long)+0x57>
c0007d5f:	c1 e8 0c             	shr    eax,0xc
c0007d62:	50                   	push   eax
c0007d63:	89 c3                	mov    ebx,eax
c0007d65:	e8 c3 ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007d6a:	5a                   	pop    edx
c0007d6b:	84 c0                	test   al,al
c0007d6d:	74 20                	je     c0007d8f <Phys::freePage(unsigned long)+0x46>
c0007d6f:	83 ec 08             	sub    esp,0x8
c0007d72:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d77:	6a 00                	push   0x0
c0007d79:	83 e8 01             	sub    eax,0x1
c0007d7c:	53                   	push   ebx
c0007d7d:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d82:	e8 66 ff ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	83 c4 08             	add    esp,0x8
c0007d8d:	5b                   	pop    ebx
c0007d8e:	c3                   	ret    
c0007d8f:	c7 44 24 10 f1 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fff1
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	e9 19 8e 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c0007da0:	68 00 10 00 00       	push   0x1000
c0007da5:	50                   	push   eax
c0007da6:	e8 07 ff ff ff       	call   c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dab:	59                   	pop    ecx
c0007dac:	5b                   	pop    ebx
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    

c0007db2 <Phys::allocatePage()>:
c0007db2:	56                   	push   esi
c0007db3:	53                   	push   ebx
c0007db4:	83 ec 14             	sub    esp,0x14
c0007db7:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbd:	89 f3                	mov    ebx,esi
c0007dbf:	eb 0a                	jmp    c0007dcb <Phys::allocatePage()+0x19>
c0007dc1:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc7:	39 de                	cmp    esi,ebx
c0007dc9:	74 26                	je     c0007df1 <Phys::allocatePage()+0x3f>
c0007dcb:	53                   	push   ebx
c0007dcc:	e8 5c ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007dd1:	5a                   	pop    edx
c0007dd2:	84 c0                	test   al,al
c0007dd4:	74 67                	je     c0007e3d <Phys::allocatePage()+0x8b>
c0007dd6:	83 c3 01             	add    ebx,0x1
c0007dd9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ddf:	75 e0                	jne    c0007dc1 <Phys::allocatePage()+0xf>
c0007de1:	31 db                	xor    ebx,ebx
c0007de3:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007ded:	39 de                	cmp    esi,ebx
c0007def:	75 da                	jne    c0007dcb <Phys::allocatePage()+0x19>
c0007df1:	83 ec 0c             	sub    esp,0xc
c0007df4:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007df9:	83 f0 01             	xor    eax,0x1
c0007dfc:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e09:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e0f:	50                   	push   eax
c0007e10:	e8 a9 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e15:	83 c4 10             	add    esp,0x10
c0007e18:	85 c0                	test   eax,eax
c0007e1a:	75 48                	jne    c0007e64 <Phys::allocatePage()+0xb2>
c0007e1c:	83 ec 0c             	sub    esp,0xc
c0007e1f:	68 74 ff 01 c0       	push   0xc001ff74
c0007e24:	e8 90 8d 00 00       	call   c0010bb9 <KePanic(char const*)>
c0007e29:	83 c4 10             	add    esp,0x10
c0007e2c:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e32:	53                   	push   ebx
c0007e33:	e8 f5 fe ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007e38:	5a                   	pop    edx
c0007e39:	84 c0                	test   al,al
c0007e3b:	75 99                	jne    c0007dd6 <Phys::allocatePage()+0x24>
c0007e3d:	6a 01                	push   0x1
c0007e3f:	53                   	push   ebx
c0007e40:	e8 a8 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e45:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4b:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e50:	83 c2 01             	add    edx,0x1
c0007e53:	59                   	pop    ecx
c0007e54:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5a:	c1 e0 0c             	shl    eax,0xc
c0007e5d:	5b                   	pop    ebx
c0007e5e:	83 c4 14             	add    esp,0x14
c0007e61:	5b                   	pop    ebx
c0007e62:	5e                   	pop    esi
c0007e63:	c3                   	ret    
c0007e64:	83 ec 08             	sub    esp,0x8
c0007e67:	89 c2                	mov    edx,eax
c0007e69:	6a 01                	push   0x1
c0007e6b:	c1 ea 0c             	shr    edx,0xc
c0007e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e72:	52                   	push   edx
c0007e73:	e8 75 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e78:	83 c4 10             	add    esp,0x10
c0007e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e7f:	eb dd                	jmp    c0007e5e <Phys::allocatePage()+0xac>

c0007e81 <Phys::allocateContiguousPages(int)>:
c0007e81:	57                   	push   edi
c0007e82:	56                   	push   esi
c0007e83:	53                   	push   ebx
c0007e84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e88:	fa                   	cli    
c0007e89:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8e:	31 db                	xor    ebx,ebx
c0007e90:	83 c0 01             	add    eax,0x1
c0007e93:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e98:	85 db                	test   ebx,ebx
c0007e9a:	75 11                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007e9c:	e8 11 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007ea1:	83 fe 01             	cmp    esi,0x1
c0007ea4:	89 c7                	mov    edi,eax
c0007ea6:	74 21                	je     c0007ec9 <Phys::allocateContiguousPages(int)+0x48>
c0007ea8:	bb 01 00 00 00       	mov    ebx,0x1
c0007ead:	e8 00 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007eb2:	89 da                	mov    edx,ebx
c0007eb4:	c1 e2 0c             	shl    edx,0xc
c0007eb7:	01 fa                	add    edx,edi
c0007eb9:	39 c2                	cmp    edx,eax
c0007ebb:	74 22                	je     c0007edf <Phys::allocateContiguousPages(int)+0x5e>
c0007ebd:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec2:	89 c7                	mov    edi,eax
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	75 e4                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007ec9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ece:	83 e8 01             	sub    eax,0x1
c0007ed1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed6:	75 01                	jne    c0007ed9 <Phys::allocateContiguousPages(int)+0x58>
c0007ed8:	fb                   	sti    
c0007ed9:	89 f8                	mov    eax,edi
c0007edb:	5b                   	pop    ebx
c0007edc:	5e                   	pop    esi
c0007edd:	5f                   	pop    edi
c0007ede:	c3                   	ret    
c0007edf:	83 c3 01             	add    ebx,0x1
c0007ee2:	39 f3                	cmp    ebx,esi
c0007ee4:	75 b2                	jne    c0007e98 <Phys::allocateContiguousPages(int)+0x17>
c0007ee6:	eb e1                	jmp    c0007ec9 <Phys::allocateContiguousPages(int)+0x48>

c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee8:	56                   	push   esi
c0007ee9:	53                   	push   ebx
c0007eea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eee:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef4:	73 06                	jae    c0007efc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef6:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f00:	c1 eb 0c             	shr    ebx,0xc
c0007f03:	c1 e8 0c             	shr    eax,0xc
c0007f06:	39 d8                	cmp    eax,ebx
c0007f08:	73 13                	jae    c0007f1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0a:	6a 00                	push   0x0
c0007f0c:	8d 70 01             	lea    esi,[eax+0x1]
c0007f0f:	50                   	push   eax
c0007f10:	e8 d8 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f15:	5a                   	pop    edx
c0007f16:	89 f0                	mov    eax,esi
c0007f18:	59                   	pop    ecx
c0007f19:	39 f3                	cmp    ebx,esi
c0007f1b:	75 ed                	jne    c0007f0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1d:	5b                   	pop    ebx
c0007f1e:	5e                   	pop    esi
c0007f1f:	c3                   	ret    

c0007f20 <Phys::physicalMemorySetup(unsigned int)>:
c0007f20:	55                   	push   ebp
c0007f21:	57                   	push   edi
c0007f22:	56                   	push   esi
c0007f23:	53                   	push   ebx
c0007f24:	83 ec 40             	sub    esp,0x40
c0007f27:	6a 10                	push   0x10
c0007f29:	6a 00                	push   0x0
c0007f2b:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f30:	e8 bb 85 ff ff       	call   c00004f0 <memset>
c0007f35:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3e:	05 00 10 00 00       	add    eax,0x1000
c0007f43:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f47:	5b                   	pop    ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	5e                   	pop    esi
c0007f4b:	50                   	push   eax
c0007f4c:	68 07 00 02 c0       	push   0xc0020007
c0007f51:	e8 e3 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007f56:	83 c4 10             	add    esp,0x10
c0007f59:	83 ec 08             	sub    esp,0x8
c0007f5c:	6a 01                	push   0x1
c0007f5e:	53                   	push   ebx
c0007f5f:	83 c3 01             	add    ebx,0x1
c0007f62:	e8 86 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f70:	75 e7                	jne    c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f72:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f79:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f80:	c1 e0 08             	shl    eax,0x8
c0007f83:	09 c2                	or     edx,eax
c0007f85:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f89:	0f 84 98 01 00 00    	je     c0008127 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f9b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fac:	eb 1c                	jmp    c0007fca <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fb2:	83 c3 18             	add    ebx,0x18
c0007fb5:	83 c6 01             	add    esi,0x1
c0007fb8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fc0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fc4:	0f 84 6d 01 00 00    	je     c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fca:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fcd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fdb:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fdd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fe0:	01 f0                	add    eax,esi
c0007fe2:	55                   	push   ebp
c0007fe3:	11 fa                	adc    edx,edi
c0007fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ff1:	51                   	push   ecx
c0007ff2:	56                   	push   esi
c0007ff3:	68 a4 ff 01 c0       	push   0xc001ffa4
c0007ff8:	e8 3c 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008001:	83 c4 10             	add    esp,0x10
c0008004:	09 f8                	or     eax,edi
c0008006:	0f 85 2b 01 00 00    	jne    c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000800c:	83 fd 01             	cmp    ebp,0x1
c000800f:	75 9d                	jne    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008011:	ba 00 00 08 00       	mov    edx,0x80000
c0008016:	89 c1                	mov    ecx,eax
c0008018:	39 f2                	cmp    edx,esi
c000801a:	19 f9                	sbb    ecx,edi
c000801c:	0f 82 ab 00 00 00    	jb     c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008022:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008026:	89 c1                	mov    ecx,eax
c0008028:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000802c:	0f 83 9b 00 00 00    	jae    c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008032:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008037:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000803b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000803f:	39 fa                	cmp    edx,edi
c0008041:	19 e8                	sbb    eax,ebp
c0008043:	0f 82 b0 01 00 00    	jb     c00081f9 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008049:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000804d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008051:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008057:	ba ff 1f 00 00       	mov    edx,0x1fff
c000805c:	83 d5 ff             	adc    ebp,0xffffffff
c000805f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008063:	31 c0                	xor    eax,eax
c0008065:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008069:	39 fa                	cmp    edx,edi
c000806b:	89 c1                	mov    ecx,eax
c000806d:	19 e9                	sbb    ecx,ebp
c000806f:	0f 83 39 ff ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008075:	be 00 00 08 00       	mov    esi,0x80000
c000807a:	83 ec 04             	sub    esp,0x4
c000807d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008081:	57                   	push   edi
c0008082:	56                   	push   esi
c0008083:	68 c8 ff 01 c0       	push   0xc001ffc8
c0008088:	e8 ac 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000808d:	5d                   	pop    ebp
c000808e:	58                   	pop    eax
c000808f:	57                   	push   edi
c0008090:	56                   	push   esi
c0008091:	e8 52 fe ff ff       	call   c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008096:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000809e:	83 c4 0c             	add    esp,0xc
c00080a1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080a5:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080ab:	01 d0                	add    eax,edx
c00080ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080b4:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b9:	52                   	push   edx
c00080ba:	50                   	push   eax
c00080bb:	68 2d 00 02 c0       	push   0xc002002d
c00080c0:	e8 74 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00080c5:	83 c4 10             	add    esp,0x10
c00080c8:	e9 e1 fe ff ff       	jmp    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080cd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d9:	39 ea                	cmp    edx,ebp
c00080db:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080df:	0f 82 c9 fe ff ff    	jb     c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080ea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080ee:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080f2:	0f 83 b6 fe ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f8:	39 ee                	cmp    esi,ebp
c00080fa:	89 f8                	mov    eax,edi
c00080fc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008100:	0f 83 74 ff ff ff    	jae    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000810a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000810e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008112:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008116:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000811a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000811e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008122:	e9 53 ff ff ff       	jmp    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008127:	83 ec 0c             	sub    esp,0xc
c000812a:	68 1f 00 02 c0       	push   0xc002001f
c000812f:	e8 85 8a 00 00       	call   c0010bb9 <KePanic(char const*)>
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 ec 08             	sub    esp,0x8
c000813a:	bb 60 00 00 00       	mov    ebx,0x60
c000813f:	6a 00                	push   0x0
c0008141:	6a 06                	push   0x6
c0008143:	e8 a5 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008148:	58                   	pop    eax
c0008149:	5a                   	pop    edx
c000814a:	6a 00                	push   0x0
c000814c:	6a 07                	push   0x7
c000814e:	e8 9a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008153:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008159:	83 c4 10             	add    esp,0x10
c000815c:	83 c1 02             	add    ecx,0x2
c000815f:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008165:	83 ec 08             	sub    esp,0x8
c0008168:	6a 00                	push   0x0
c000816a:	53                   	push   ebx
c000816b:	83 c3 01             	add    ebx,0x1
c000816e:	e8 7a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000817c:	75 e7                	jne    c0008165 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000817e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008183:	bb 40 01 00 00       	mov    ebx,0x140
c0008188:	83 c0 20             	add    eax,0x20
c000818b:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008190:	eb 26                	jmp    c00081b8 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0008192:	83 ec 08             	sub    esp,0x8
c0008195:	6a 00                	push   0x0
c0008197:	53                   	push   ebx
c0008198:	83 c3 01             	add    ebx,0x1
c000819b:	e8 4d fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081a0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	83 c0 01             	add    eax,0x1
c00081ab:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081b1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b6:	74 07                	je     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081b8:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081bd:	7e d3                	jle    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081bf:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081c4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c9:	7f 26                	jg     c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081cb:	83 ec 08             	sub    esp,0x8
c00081ce:	6a 00                	push   0x0
c00081d0:	53                   	push   ebx
c00081d1:	83 c3 01             	add    ebx,0x1
c00081d4:	e8 14 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081d9:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081de:	83 c4 10             	add    esp,0x10
c00081e1:	83 c0 01             	add    eax,0x1
c00081e4:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081ea:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ef:	75 d3                	jne    c00081c4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081f1:	83 c4 3c             	add    esp,0x3c
c00081f4:	5b                   	pop    ebx
c00081f5:	5e                   	pop    esi
c00081f6:	5f                   	pop    edi
c00081f7:	5d                   	pop    ebp
c00081f8:	c3                   	ret    
c00081f9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008201:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008209:	e9 3b fe ff ff       	jmp    c0008049 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000820e <Pipe::isAtty()>:
c000820e:	31 c0                	xor    eax,eax
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <Pipe::~Pipe()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	ba 8c 00 02 c0       	mov    edx,0xc002008c
c000821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821e:	89 10                	mov    DWORD PTR [eax],edx
c0008220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	50                   	push   eax
c0008228:	e8 6b 11 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	90                   	nop
c0008231:	83 c4 0c             	add    esp,0xc
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <Pipe::~Pipe()>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 cd ff ff ff       	call   c0008212 <Pipe::~Pipe()>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	6a 20                	push   0x20
c000824d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008251:	e8 b6 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <Pipe::write(unsigned long long, void*, int*)>:
c000825e:	55                   	push   ebp
c000825f:	57                   	push   edi
c0008260:	56                   	push   esi
c0008261:	53                   	push   ebx
c0008262:	83 ec 1c             	sub    esp,0x1c
c0008265:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000826d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008270:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008274:	89 04 24             	mov    DWORD PTR [esp],eax
c0008277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000827b:	89 d8                	mov    eax,ebx
c000827d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008280:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008284:	89 d6                	mov    esi,edx
c0008286:	89 d7                	mov    edi,edx
c0008288:	c1 ff 1f             	sar    edi,0x1f
c000828b:	03 34 24             	add    esi,DWORD PTR [esp]
c000828e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008292:	c1 f8 1f             	sar    eax,0x1f
c0008295:	39 f3                	cmp    ebx,esi
c0008297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000829b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000829f:	19 f8                	sbb    eax,edi
c00082a1:	b8 01 00 00 00       	mov    eax,0x1
c00082a6:	72 6e                	jb     c0008316 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082ab:	01 d0                	add    eax,edx
c00082ad:	99                   	cdq    
c00082ae:	f7 fb                	idiv   ebx
c00082b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b4:	29 d3                	sub    ebx,edx
c00082b6:	89 d7                	mov    edi,edx
c00082b8:	89 de                	mov    esi,ebx
c00082ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082bd:	c1 fb 1f             	sar    ebx,0x1f
c00082c0:	39 f2                	cmp    edx,esi
c00082c2:	19 d8                	sbb    eax,ebx
c00082c4:	b8 00 00 00 00       	mov    eax,0x0
c00082c9:	72 04                	jb     c00082cf <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082cb:	89 d0                	mov    eax,edx
c00082cd:	29 f0                	sub    eax,esi
c00082cf:	89 d3                	mov    ebx,edx
c00082d1:	29 c3                	sub    ebx,eax
c00082d3:	74 0b                	je     c00082e0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082d5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082dc:	89 d9                	mov    ecx,ebx
c00082de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e0:	85 c0                	test   eax,eax
c00082e2:	74 0d                	je     c00082f1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082e4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082eb:	89 de                	mov    esi,ebx
c00082ed:	89 c1                	mov    ecx,eax
c00082ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082f4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f9:	75 10                	jne    c000830b <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082fb:	83 ec 0c             	sub    esp,0xc
c00082fe:	68 49 00 02 c0       	push   0xc0020049
c0008303:	e8 b1 88 00 00       	call   c0010bb9 <KePanic(char const*)>
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000830f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008312:	89 08                	mov    DWORD PTR [eax],ecx
c0008314:	31 c0                	xor    eax,eax
c0008316:	83 c4 1c             	add    esp,0x1c
c0008319:	5b                   	pop    ebx
c000831a:	5e                   	pop    esi
c000831b:	5f                   	pop    edi
c000831c:	5d                   	pop    ebp
c000831d:	c3                   	ret    

c000831e <Pipe::read(unsigned long long, void*, int*)>:
c000831e:	55                   	push   ebp
c000831f:	57                   	push   edi
c0008320:	56                   	push   esi
c0008321:	53                   	push   ebx
c0008322:	83 ec 1c             	sub    esp,0x1c
c0008325:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008329:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000832d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008331:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008334:	89 c8                	mov    eax,ecx
c0008336:	99                   	cdq    
c0008337:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000833b:	74 24                	je     c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	39 f9                	cmp    ecx,edi
c000833f:	89 d1                	mov    ecx,edx
c0008341:	19 f1                	sbb    ecx,esi
c0008343:	73 1c                	jae    c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008345:	fa                   	cli    
c0008346:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000834c:	e8 2b d0 00 00       	call   c001537c <schedule()>
c0008351:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008356:	48                   	dec    eax
c0008357:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000835c:	75 d3                	jne    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000835e:	fb                   	sti    
c000835f:	eb d0                	jmp    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008361:	39 f8                	cmp    eax,edi
c0008363:	89 d1                	mov    ecx,edx
c0008365:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008368:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000836c:	19 f1                	sbb    ecx,esi
c000836e:	73 07                	jae    c0008377 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008370:	89 04 24             	mov    DWORD PTR [esp],eax
c0008373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008377:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000837a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000837d:	29 f7                	sub    edi,esi
c000837f:	89 f8                	mov    eax,edi
c0008381:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008385:	99                   	cdq    
c0008386:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838d:	19 d0                	sbb    eax,edx
c000838f:	73 07                	jae    c0008398 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008391:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008398:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000839b:	89 ea                	mov    edx,ebp
c000839d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083a6:	74 0d                	je     c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ab:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b5:	85 d2                	test   edx,edx
c00083b7:	74 11                	je     c00083ca <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083bd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083c0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083c4:	89 d1                	mov    ecx,edx
c00083c6:	89 c7                	mov    edi,eax
c00083c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083cd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083d0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083d3:	99                   	cdq    
c00083d4:	89 f7                	mov    edi,esi
c00083d6:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083dd:	c1 ff 1f             	sar    edi,0x1f
c00083e0:	57                   	push   edi
c00083e1:	56                   	push   esi
c00083e2:	52                   	push   edx
c00083e3:	50                   	push   eax
c00083e4:	e8 97 66 01 00       	call   c001ea80 <__umoddi3>
c00083e9:	83 c4 10             	add    esp,0x10
c00083ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083ef:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083f4:	75 10                	jne    c0008406 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	68 66 00 02 c0       	push   0xc0020066
c00083fe:	e8 b6 87 00 00       	call   c0010bb9 <KePanic(char const*)>
c0008403:	83 c4 10             	add    esp,0x10
c0008406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000840a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000840d:	89 10                	mov    DWORD PTR [eax],edx
c000840f:	83 c4 1c             	add    esp,0x1c
c0008412:	31 c0                	xor    eax,eax
c0008414:	5b                   	pop    ebx
c0008415:	5e                   	pop    esi
c0008416:	5f                   	pop    edi
c0008417:	5d                   	pop    ebp
c0008418:	c3                   	ret    
c0008419:	90                   	nop

c000841a <Pipe::Pipe(int)>:
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008421:	83 ec 08             	sub    esp,0x8
c0008424:	6a 00                	push   0x0
c0008426:	50                   	push   eax
c0008427:	e8 86 0d 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c000842c:	83 c4 10             	add    esp,0x10
c000842f:	ba 8c 00 02 c0       	mov    edx,0xc002008c
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000843e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008442:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008449:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845f:	83 ec 0c             	sub    esp,0xc
c0008462:	50                   	push   eax
c0008463:	e8 46 f6 ff ff       	call   c0007aae <malloc>
c0008468:	83 c4 10             	add    esp,0x10
c000846b:	89 c2                	mov    edx,eax
c000846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008471:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000847c:	90                   	nop
c000847d:	83 c4 0c             	add    esp,0xc
c0008480:	c3                   	ret    
c0008481:	90                   	nop

c0008482 <VgaText::isAtty()>:
c0008482:	b0 01                	mov    al,0x1
c0008484:	c3                   	ret    
c0008485:	90                   	nop

c0008486 <VgaText::~VgaText()>:
c0008486:	83 ec 0c             	sub    esp,0xc
c0008489:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	89 10                	mov    DWORD PTR [eax],edx
c0008494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	50                   	push   eax
c000849c:	e8 f7 0e 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c00084a1:	83 c4 10             	add    esp,0x10
c00084a4:	90                   	nop
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 cd ff ff ff       	call   c0008486 <VgaText::~VgaText()>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	83 ec 08             	sub    esp,0x8
c00084bf:	68 84 01 00 00       	push   0x184
c00084c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c8:	e8 3f 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084cd:	83 c4 10             	add    esp,0x10
c00084d0:	83 c4 0c             	add    esp,0xc
c00084d3:	c3                   	ret    

c00084d4 <VgaText::read(unsigned long long, void*, int*)>:
c00084d4:	83 ec 10             	sub    esp,0x10
c00084d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e3:	e8 34 4a 00 00       	call   c000cf1c <readKeyboard(VgaText*, char*, unsigned long)>
c00084e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084ec:	89 02                	mov    DWORD PTR [edx],eax
c00084ee:	31 c0                	xor    eax,eax
c00084f0:	83 c4 1c             	add    esp,0x1c
c00084f3:	c3                   	ret    

c00084f4 <setTerminalScrollLock(bool)>:
c00084f4:	c3                   	ret    

c00084f5 <doTerminalCycle()>:
c00084f5:	c3                   	ret    

c00084f6 <addToTerminalCycle(VgaText*)>:
c00084f6:	c3                   	ret    

c00084f7 <scrollTerminalScrollLock(int)>:
c00084f7:	c3                   	ret    

c00084f8 <VgaText::updateTitle()>:
c00084f8:	c3                   	ret    
c00084f9:	90                   	nop

c00084fa <VgaText::load()>:
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <VgaText::updateCursor()>:
c00084fc:	83 ec 14             	sub    esp,0x14
c00084ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008503:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008506:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008509:	e8 26 fc 00 00       	call   c0018134 <HalConsoleCursorUpdate(int, int)>
c000850e:	83 c4 1c             	add    esp,0x1c
c0008511:	c3                   	ret    

c0008512 <VgaText::doANSI_SGR(int)>:
c0008512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000851a:	85 d2                	test   edx,edx
c000851c:	75 0b                	jne    c0008529 <VgaText::doANSI_SGR(int)+0x17>
c000851e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008521:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008524:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008527:	eb 59                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008529:	83 fa 07             	cmp    edx,0x7
c000852c:	75 0b                	jne    c0008539 <VgaText::doANSI_SGR(int)+0x27>
c000852e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008531:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008534:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008537:	eb 49                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008539:	83 fa 1b             	cmp    edx,0x1b
c000853c:	74 e0                	je     c000851e <VgaText::doANSI_SGR(int)+0xc>
c000853e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008541:	83 f9 07             	cmp    ecx,0x7
c0008544:	77 09                	ja     c000854f <VgaText::doANSI_SGR(int)+0x3d>
c0008546:	8b 14 8d 80 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd980]
c000854d:	eb 20                	jmp    c000856f <VgaText::doANSI_SGR(int)+0x5d>
c000854f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008552:	83 f9 07             	cmp    ecx,0x7
c0008555:	77 09                	ja     c0008560 <VgaText::doANSI_SGR(int)+0x4e>
c0008557:	8b 14 8d 80 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd980]
c000855e:	eb 22                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008560:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008563:	83 f9 07             	cmp    ecx,0x7
c0008566:	77 0b                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x61>
c0008568:	8b 14 95 38 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddac8]
c000856f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008572:	c3                   	ret    
c0008573:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 0a                	ja     c0008585 <VgaText::doANSI_SGR(int)+0x73>
c000857b:	8b 14 95 10 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddaf0]
c0008582:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008585:	c3                   	ret    

c0008586 <VgaText::setDefaultBgColour(VgaColour)>:
c0008586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000858a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000858e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008591:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008594:	c3                   	ret    
c0008595:	90                   	nop

c0008596 <VgaText::setDefaultFgColour(VgaColour)>:
c0008596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	90                   	nop

c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085a6:	53                   	push   ebx
c00085a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085b3:	51                   	push   ecx
c00085b4:	e8 cd ff ff ff       	call   c0008586 <VgaText::setDefaultBgColour(VgaColour)>
c00085b9:	58                   	pop    eax
c00085ba:	5a                   	pop    edx
c00085bb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085c3:	5b                   	pop    ebx
c00085c4:	eb d0                	jmp    c0008596 <VgaText::setDefaultFgColour(VgaColour)>

c00085c6 <VgaText::setTitleTextColour(VgaColour)>:
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ce:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085d1:	c3                   	ret    

c00085d2 <VgaText::setTitleColour(VgaColour)>:
c00085d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085dd:	c3                   	ret    

c00085de <VgaText::setTitle(char*)>:
c00085de:	c3                   	ret    
c00085df:	90                   	nop

c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e9:	83 e0 0f             	and    eax,0xf
c00085ec:	c1 e2 04             	shl    edx,0x4
c00085ef:	09 d0                	or     eax,edx
c00085f1:	c3                   	ret    

c00085f2 <VgaText::scrollScreen()>:
c00085f2:	55                   	push   ebp
c00085f3:	57                   	push   edi
c00085f4:	56                   	push   esi
c00085f5:	be 01 00 00 00       	mov    esi,0x1
c00085fa:	53                   	push   ebx
c00085fb:	83 ec 0c             	sub    esp,0xc
c00085fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008602:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008605:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000860b:	31 ff                	xor    edi,edi
c000860d:	01 e9                	add    ecx,ebp
c000860f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008611:	83 fe 18             	cmp    esi,0x18
c0008614:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000861a:	75 20                	jne    c000863c <VgaText::scrollScreen()+0x4a>
c000861c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008622:	74 15                	je     c0008639 <VgaText::scrollScreen()+0x47>
c0008624:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008628:	50                   	push   eax
c0008629:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000862d:	50                   	push   eax
c000862e:	e8 ad ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008633:	5a                   	pop    edx
c0008634:	5a                   	pop    edx
c0008635:	88 01                	mov    BYTE PTR [ecx],al
c0008637:	eb 03                	jmp    c000863c <VgaText::scrollScreen()+0x4a>
c0008639:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000863c:	47                   	inc    edi
c000863d:	41                   	inc    ecx
c000863e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008644:	75 c9                	jne    c000860f <VgaText::scrollScreen()+0x1d>
c0008646:	46                   	inc    esi
c0008647:	83 fe 19             	cmp    esi,0x19
c000864a:	75 b9                	jne    c0008605 <VgaText::scrollScreen()+0x13>
c000864c:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008652:	75 1f                	jne    c0008673 <VgaText::scrollScreen()+0x81>
c0008654:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008658:	74 05                	je     c000865f <VgaText::scrollScreen()+0x6d>
c000865a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000865d:	eb 14                	jmp    c0008673 <VgaText::scrollScreen()+0x81>
c000865f:	50                   	push   eax
c0008660:	50                   	push   eax
c0008661:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008665:	50                   	push   eax
c0008666:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866a:	50                   	push   eax
c000866b:	e8 58 f9 00 00       	call   c0017fc8 <HalConsoleScroll(int, int)>
c0008670:	83 c4 10             	add    esp,0x10
c0008673:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008677:	83 c4 0c             	add    esp,0xc
c000867a:	5b                   	pop    ebx
c000867b:	5e                   	pop    esi
c000867c:	5f                   	pop    edi
c000867d:	5d                   	pop    ebp
c000867e:	e9 79 fe ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008683:	90                   	nop

c0008684 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008689:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000868e:	c1 e0 08             	shl    eax,0x8
c0008691:	09 d0                	or     eax,edx
c0008693:	c3                   	ret    

c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086b3:	0f b6 c3             	movzx  eax,bl
c00086b6:	50                   	push   eax
c00086b7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086bc:	50                   	push   eax
c00086bd:	e8 1e ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c00086c2:	5a                   	pop    edx
c00086c3:	0f b6 c0             	movzx  eax,al
c00086c6:	59                   	pop    ecx
c00086c7:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086d0:	50                   	push   eax
c00086d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086d5:	e8 aa ff ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c00086da:	5a                   	pop    edx
c00086db:	6b d7 50             	imul   edx,edi,0x50
c00086de:	59                   	pop    ecx
c00086df:	01 f2                	add    edx,esi
c00086e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086e4:	0f b7 d2             	movzx  edx,dx
c00086e7:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086eb:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086f1:	75 28                	jne    c000871b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086f7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086fb:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000870b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000870f:	83 c4 1c             	add    esp,0x1c
c0008712:	5b                   	pop    ebx
c0008713:	5e                   	pop    esi
c0008714:	5f                   	pop    edi
c0008715:	5d                   	pop    ebp
c0008716:	e9 b5 f9 00 00       	jmp    c00180d0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000871b:	83 c4 1c             	add    esp,0x1c
c000871e:	5b                   	pop    ebx
c000871f:	5e                   	pop    esi
c0008720:	5f                   	pop    edi
c0008721:	5d                   	pop    ebp
c0008722:	c3                   	ret    
c0008723:	90                   	nop

c0008724 <VgaText::getCursorX()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000872b:	c3                   	ret    

c000872c <VgaText::getCursorY()>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008733:	c3                   	ret    

c0008734 <VgaText::setCursor(int, int)>:
c0008734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000873c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000873f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008743:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008746:	e9 b1 fd ff ff       	jmp    c00084fc <VgaText::updateCursor()>

c000874b <setActiveTerminal(VgaText*)>:
c000874b:	53                   	push   ebx
c000874c:	83 ec 08             	sub    esp,0x8
c000874f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008753:	85 db                	test   ebx,ebx
c0008755:	75 11                	jne    c0008768 <setActiveTerminal(VgaText*)+0x1d>
c0008757:	c7 44 24 10 a0 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200a0
c000875f:	83 c4 08             	add    esp,0x8
c0008762:	5b                   	pop    ebx
c0008763:	e9 51 84 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c0008768:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000876d:	85 c0                	test   eax,eax
c000876f:	74 0c                	je     c000877d <setActiveTerminal(VgaText*)+0x32>
c0008771:	83 ec 0c             	sub    esp,0xc
c0008774:	50                   	push   eax
c0008775:	e8 82 fd ff ff       	call   c00084fc <VgaText::updateCursor()>
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008783:	50                   	push   eax
c0008784:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008787:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000878a:	53                   	push   ebx
c000878b:	e8 a4 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008790:	83 c4 18             	add    esp,0x18
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <VgaText::clearScreen()>:
c0008796:	57                   	push   edi
c0008797:	56                   	push   esi
c0008798:	31 f6                	xor    esi,esi
c000879a:	53                   	push   ebx
c000879b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879f:	52                   	push   edx
c00087a0:	6a 00                	push   0x0
c00087a2:	6a 00                	push   0x0
c00087a4:	53                   	push   ebx
c00087a5:	e8 8a ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087aa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087b1:	83 c4 10             	add    esp,0x10
c00087b4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087b7:	7e 20                	jle    c00087d9 <VgaText::clearScreen()+0x43>
c00087b9:	31 ff                	xor    edi,edi
c00087bb:	50                   	push   eax
c00087bc:	50                   	push   eax
c00087bd:	56                   	push   esi
c00087be:	57                   	push   edi
c00087bf:	47                   	inc    edi
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087c6:	6a 20                	push   0x20
c00087c8:	53                   	push   ebx
c00087c9:	e8 c6 fe ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087ce:	83 c4 20             	add    esp,0x20
c00087d1:	83 ff 50             	cmp    edi,0x50
c00087d4:	75 e5                	jne    c00087bb <VgaText::clearScreen()+0x25>
c00087d6:	46                   	inc    esi
c00087d7:	eb db                	jmp    c00087b4 <VgaText::clearScreen()+0x1e>
c00087d9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087e0:	5b                   	pop    ebx
c00087e1:	5e                   	pop    esi
c00087e2:	5f                   	pop    edi
c00087e3:	c3                   	ret    

c00087e4 <VgaText::setCursorX(int)>:
c00087e4:	83 ec 10             	sub    esp,0x10
c00087e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087eb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f2:	50                   	push   eax
c00087f3:	e8 3c ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087f8:	83 c4 1c             	add    esp,0x1c
c00087fb:	c3                   	ret    

c00087fc <VgaText::setCursorY(int)>:
c00087fc:	83 ec 10             	sub    esp,0x10
c00087ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008807:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000880a:	50                   	push   eax
c000880b:	e8 24 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008810:	83 c4 1c             	add    esp,0x1c
c0008813:	c3                   	ret    

c0008814 <VgaText::incrementCursor(bool)>:
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	51                   	push   ecx
c0008817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000881b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000881f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008822:	40                   	inc    eax
c0008823:	83 f8 50             	cmp    eax,0x50
c0008826:	74 05                	je     c000882d <VgaText::incrementCursor(bool)+0x19>
c0008828:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000882b:	eb 24                	jmp    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c000882d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008830:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008837:	8d 50 01             	lea    edx,[eax+0x1]
c000883a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000883d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008840:	75 0f                	jne    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c0008842:	83 ec 0c             	sub    esp,0xc
c0008845:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008848:	53                   	push   ebx
c0008849:	e8 a4 fd ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	89 f0                	mov    eax,esi
c0008853:	84 c0                	test   al,al
c0008855:	74 0c                	je     c0008863 <VgaText::incrementCursor(bool)+0x4f>
c0008857:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000885b:	5a                   	pop    edx
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	e9 99 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008863:	58                   	pop    eax
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <VgaText::decrementCursor(bool)>:
c0008868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000886c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008870:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008873:	85 c0                	test   eax,eax
c0008875:	74 04                	je     c000887b <VgaText::decrementCursor(bool)+0x13>
c0008877:	48                   	dec    eax
c0008878:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000887b:	84 c9                	test   cl,cl
c000887d:	74 09                	je     c0008888 <VgaText::decrementCursor(bool)+0x20>
c000887f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008883:	e9 74 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008888:	c3                   	ret    
c0008889:	90                   	nop

c000888a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000888a:	53                   	push   ebx
c000888b:	83 ec 08             	sub    esp,0x8
c000888e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000889b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000889f:	83 f8 07             	cmp    eax,0x7
c00088a2:	75 21                	jne    c00088c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ac:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088b4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088bc:	83 c4 08             	add    esp,0x8
c00088bf:	5b                   	pop    ebx
c00088c0:	e9 a2 31 00 00       	jmp    c000ba67 <Krnl::beep(int, int, bool)>
c00088c5:	83 f8 0d             	cmp    eax,0xd
c00088c8:	75 09                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d1:	eb 2d                	jmp    c0008900 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088d3:	83 f8 0a             	cmp    eax,0xa
c00088d6:	75 31                	jne    c0008909 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e2:	8d 50 01             	lea    edx,[eax+0x1]
c00088e5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088eb:	75 0f                	jne    c00088fc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088ed:	83 ec 0c             	sub    esp,0xc
c00088f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088f3:	53                   	push   ebx
c00088f4:	e8 f9 fc ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008900:	83 c4 08             	add    esp,0x8
c0008903:	5b                   	pop    ebx
c0008904:	e9 f3 fb ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008909:	83 f8 08             	cmp    eax,0x8
c000890c:	75 25                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000890e:	50                   	push   eax
c000890f:	50                   	push   eax
c0008910:	6a 01                	push   0x1
c0008912:	53                   	push   ebx
c0008913:	e8 50 ff ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008918:	5a                   	pop    edx
c0008919:	59                   	pop    ecx
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008923:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008926:	6a 20                	push   0x20
c0008928:	53                   	push   ebx
c0008929:	e8 66 fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000892e:	83 c4 28             	add    esp,0x28
c0008931:	5b                   	pop    ebx
c0008932:	c3                   	ret    
c0008933:	83 ec 08             	sub    esp,0x8
c0008936:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008939:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000893c:	51                   	push   ecx
c000893d:	52                   	push   edx
c000893e:	50                   	push   eax
c000893f:	53                   	push   ebx
c0008940:	e8 4f fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008945:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008949:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008951:	83 c4 28             	add    esp,0x28
c0008954:	5b                   	pop    ebx
c0008955:	e9 ba fe ff ff       	jmp    c0008814 <VgaText::incrementCursor(bool)>

c000895a <VgaText::putchar(char)>:
c000895a:	57                   	push   edi
c000895b:	56                   	push   esi
c000895c:	53                   	push   ebx
c000895d:	83 ec 10             	sub    esp,0x10
c0008960:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008968:	89 f8                	mov    eax,edi
c000896a:	0f be c0             	movsx  eax,al
c000896d:	83 f8 5b             	cmp    eax,0x5b
c0008970:	75 18                	jne    c000898a <VgaText::putchar(char)+0x30>
c0008972:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008976:	74 20                	je     c0008998 <VgaText::putchar(char)+0x3e>
c0008978:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000897e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008985:	e9 c1 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c000898a:	83 f8 1b             	cmp    eax,0x1b
c000898d:	75 09                	jne    c0008998 <VgaText::putchar(char)+0x3e>
c000898f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008993:	e9 b3 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008998:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000899b:	84 c9                	test   cl,cl
c000899d:	0f 84 98 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xe1>
c00089a3:	8d 77 c0             	lea    esi,[edi-0x40]
c00089a6:	89 f2                	mov    edx,esi
c00089a8:	80 fa 3e             	cmp    dl,0x3e
c00089ab:	77 78                	ja     c0008a25 <VgaText::putchar(char)+0xcb>
c00089ad:	83 f8 6d             	cmp    eax,0x6d
c00089b0:	75 47                	jne    c00089f9 <VgaText::putchar(char)+0x9f>
c00089b2:	31 f6                	xor    esi,esi
c00089b4:	31 d2                	xor    edx,edx
c00089b6:	31 c0                	xor    eax,eax
c00089b8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089bb:	7e 2d                	jle    c00089ea <VgaText::putchar(char)+0x90>
c00089bd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089c2:	83 fa 3b             	cmp    edx,0x3b
c00089c5:	75 17                	jne    c00089de <VgaText::putchar(char)+0x84>
c00089c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089cb:	50                   	push   eax
c00089cc:	53                   	push   ebx
c00089cd:	e8 40 fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089d2:	59                   	pop    ecx
c00089d3:	31 d2                	xor    edx,edx
c00089d5:	5f                   	pop    edi
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089dc:	eb 09                	jmp    c00089e7 <VgaText::putchar(char)+0x8d>
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e5:	88 ca                	mov    dl,cl
c00089e7:	46                   	inc    esi
c00089e8:	eb ce                	jmp    c00089b8 <VgaText::putchar(char)+0x5e>
c00089ea:	84 d2                	test   dl,dl
c00089ec:	74 2f                	je     c0008a1d <VgaText::putchar(char)+0xc3>
c00089ee:	50                   	push   eax
c00089ef:	53                   	push   ebx
c00089f0:	e8 1d fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089f5:	58                   	pop    eax
c00089f6:	5a                   	pop    edx
c00089f7:	eb 24                	jmp    c0008a1d <VgaText::putchar(char)+0xc3>
c00089f9:	83 f8 4a             	cmp    eax,0x4a
c00089fc:	75 1f                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c00089fe:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a02:	75 19                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c0008a04:	83 ec 0c             	sub    esp,0xc
c0008a07:	53                   	push   ebx
c0008a08:	e8 89 fd ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008a0d:	83 c4 0c             	add    esp,0xc
c0008a10:	6a 00                	push   0x0
c0008a12:	6a 00                	push   0x0
c0008a14:	53                   	push   ebx
c0008a15:	e8 1a fd ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008a1a:	83 c4 10             	add    esp,0x10
c0008a1d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a23:	eb 26                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a25:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a28:	83 f8 0e             	cmp    eax,0xe
c0008a2b:	7f 1e                	jg     c0008a4b <VgaText::putchar(char)+0xf1>
c0008a2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a30:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a33:	89 f9                	mov    ecx,edi
c0008a35:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 42 fe ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	5b                   	pop    ebx
c0008a4f:	5e                   	pop    esi
c0008a50:	5f                   	pop    edi
c0008a51:	c3                   	ret    

c0008a52 <VgaText::putx(unsigned int)>:
c0008a52:	57                   	push   edi
c0008a53:	b9 11 00 00 00       	mov    ecx,0x11
c0008a58:	56                   	push   esi
c0008a59:	be ae 00 02 c0       	mov    esi,0xc00200ae
c0008a5e:	53                   	push   ebx
c0008a5f:	83 ec 20             	sub    esp,0x20
c0008a62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a66:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a6a:	fc                   	cld    
c0008a6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6d:	be 08 00 00 00       	mov    esi,0x8
c0008a72:	50                   	push   eax
c0008a73:	50                   	push   eax
c0008a74:	89 d8                	mov    eax,ebx
c0008a76:	c1 e3 04             	shl    ebx,0x4
c0008a79:	c1 e8 1c             	shr    eax,0x1c
c0008a7c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a81:	50                   	push   eax
c0008a82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a86:	e8 cf fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	4e                   	dec    esi
c0008a8f:	75 e1                	jne    c0008a72 <VgaText::putx(unsigned int)+0x20>
c0008a91:	83 c4 20             	add    esp,0x20
c0008a94:	5b                   	pop    ebx
c0008a95:	5e                   	pop    esi
c0008a96:	5f                   	pop    edi
c0008a97:	c3                   	ret    

c0008a98 <VgaText::puts(char const*)>:
c0008a98:	53                   	push   ebx
c0008a99:	83 ec 08             	sub    esp,0x8
c0008a9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa3:	85 c0                	test   eax,eax
c0008aa5:	74 12                	je     c0008ab9 <VgaText::puts(char const*)+0x21>
c0008aa7:	43                   	inc    ebx
c0008aa8:	51                   	push   ecx
c0008aa9:	51                   	push   ecx
c0008aaa:	50                   	push   eax
c0008aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aaf:	e8 a6 fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	eb e7                	jmp    c0008aa0 <VgaText::puts(char const*)+0x8>
c0008ab9:	83 c4 08             	add    esp,0x8
c0008abc:	5b                   	pop    ebx
c0008abd:	c3                   	ret    

c0008abe <VgaText::write(unsigned long long, void*, int*)>:
c0008abe:	55                   	push   ebp
c0008abf:	57                   	push   edi
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008adb:	39 eb                	cmp    ebx,ebp
c0008add:	74 13                	je     c0008af2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008adf:	43                   	inc    ebx
c0008ae0:	50                   	push   eax
c0008ae1:	50                   	push   eax
c0008ae2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae6:	50                   	push   eax
c0008ae7:	56                   	push   esi
c0008ae8:	e8 6d fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	eb e9                	jmp    c0008adb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afd:	89 38                	mov    DWORD PTR [eax],edi
c0008aff:	83 c4 0c             	add    esp,0xc
c0008b02:	31 c0                	xor    eax,eax
c0008b04:	5b                   	pop    ebx
c0008b05:	5e                   	pop    esi
c0008b06:	5f                   	pop    edi
c0008b07:	5d                   	pop    ebp
c0008b08:	c3                   	ret    
c0008b09:	90                   	nop

c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b0a:	55                   	push   ebp
c0008b0b:	57                   	push   edi
c0008b0c:	56                   	push   esi
c0008b0d:	53                   	push   ebx
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b21:	50                   	push   eax
c0008b22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b27:	50                   	push   eax
c0008b28:	e8 b3 fa ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2d:	5a                   	pop    edx
c0008b2e:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b32:	59                   	pop    ecx
c0008b33:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b36:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b3a:	0f b7 f6             	movzx  esi,si
c0008b3d:	0f b6 e8             	movzx  ebp,al
c0008b40:	01 f6                	add    esi,esi
c0008b42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b45:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	0f 84 ef 00 00 00    	je     c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b50:	83 f8 0d             	cmp    eax,0xd
c0008b53:	75 0c                	jne    c0008b61 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b5c:	e9 d8 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b61:	83 f8 0a             	cmp    eax,0xa
c0008b64:	75 44                	jne    c0008baa <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b69:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b70:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b73:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b76:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b79:	75 0f                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b81:	53                   	push   ebx
c0008b82:	e8 6b fa ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c0008b87:	83 c4 10             	add    esp,0x10
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 69 f9 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008b93:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b9d:	0f b7 f6             	movzx  esi,si
c0008ba0:	01 f6                	add    esi,esi
c0008ba2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ba5:	e9 8f 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008baa:	83 f8 08             	cmp    eax,0x8
c0008bad:	75 34                	jne    c0008be3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008baf:	51                   	push   ecx
c0008bb0:	51                   	push   ecx
c0008bb1:	6a 01                	push   0x1
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 af fc ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008bb9:	5e                   	pop    esi
c0008bba:	58                   	pop    eax
c0008bbb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bbe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc7:	6a 20                	push   0x20
c0008bc9:	53                   	push   ebx
c0008bca:	e8 c5 fa ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcf:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd3:	83 c4 20             	add    esp,0x20
c0008bd6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd9:	0f b7 f6             	movzx  esi,si
c0008bdc:	01 f6                	add    esi,esi
c0008bde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be1:	eb 56                	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be3:	52                   	push   edx
c0008be4:	52                   	push   edx
c0008be5:	55                   	push   ebp
c0008be6:	50                   	push   eax
c0008be7:	e8 98 fa ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	66 89 06             	mov    WORD PTR [esi],ax
c0008bf2:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf8:	75 1d                	jne    c0008c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bfa:	83 ec 0c             	sub    esp,0xc
c0008bfd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c00:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c0e:	50                   	push   eax
c0008c0f:	e8 bc f4 00 00       	call   c00180d0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c14:	83 c4 20             	add    esp,0x20
c0008c17:	83 c6 02             	add    esi,0x2
c0008c1a:	50                   	push   eax
c0008c1b:	50                   	push   eax
c0008c1c:	6a 00                	push   0x0
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 f0 fb ff ff       	call   c0008814 <VgaText::incrementCursor(bool)>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c2b:	75 0c                	jne    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c31:	0f b7 f6             	movzx  esi,si
c0008c34:	01 f6                	add    esi,esi
c0008c36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c39:	47                   	inc    edi
c0008c3a:	e9 06 ff ff ff       	jmp    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3f:	83 ec 0c             	sub    esp,0xc
c0008c42:	53                   	push   ebx
c0008c43:	e8 b4 f8 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008c48:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c4f:	83 c4 1c             	add    esp,0x1c
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	5d                   	pop    ebp
c0008c56:	c3                   	ret    
c0008c57:	90                   	nop

c0008c58 <VgaText::VgaText(char const*)>:
c0008c58:	56                   	push   esi
c0008c59:	53                   	push   ebx
c0008c5a:	83 ec 04             	sub    esp,0x4
c0008c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c61:	83 ec 08             	sub    esp,0x8
c0008c64:	6a 00                	push   0x0
c0008c66:	50                   	push   eax
c0008c67:	e8 46 05 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c0008c6c:	83 c4 10             	add    esp,0x10
c0008c6f:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	89 10                	mov    DWORD PTR [eax],edx
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd7:	83 ec 0c             	sub    esp,0xc
c0008cda:	6a 01                	push   0x1
c0008cdc:	e8 20 09 00 00       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	89 c2                	mov    edx,eax
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ced:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfa:	89 c6                	mov    esi,eax
c0008cfc:	e8 b1 f0 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0008d01:	68 05 0c 00 00       	push   0xc05
c0008d06:	56                   	push   esi
c0008d07:	50                   	push   eax
c0008d08:	53                   	push   ebx
c0008d09:	e8 06 10 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d18:	83 ec 04             	sub    esp,0x4
c0008d1b:	68 a0 0f 00 00       	push   0xfa0
c0008d20:	6a 00                	push   0x0
c0008d22:	50                   	push   eax
c0008d23:	e8 c8 77 ff ff       	call   c00004f0 <memset>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	83 ec 04             	sub    esp,0x4
c0008d2e:	6a 00                	push   0x0
c0008d30:	6a 07                	push   0x7
c0008d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d36:	e8 6b f8 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d3b:	83 c4 10             	add    esp,0x10
c0008d3e:	83 ec 04             	sub    esp,0x4
c0008d41:	6a 00                	push   0x0
c0008d43:	6a 00                	push   0x0
c0008d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d49:	e8 e6 f9 ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	83 ec 0c             	sub    esp,0xc
c0008d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d58:	e8 39 fa ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008d5d:	83 c4 10             	add    esp,0x10
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 82 00 00 00       	add    eax,0x82
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 6f 77 ff ff       	call   c00004f0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d88:	05 02 01 00 00       	add    eax,0x102
c0008d8d:	83 ec 04             	sub    esp,0x4
c0008d90:	68 80 00 00 00       	push   0x80
c0008d95:	6a 00                	push   0x0
c0008d97:	50                   	push   eax
c0008d98:	e8 53 77 ff ff       	call   c00004f0 <memset>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	90                   	nop
c0008da1:	83 c4 04             	add    esp,0x4
c0008da4:	5b                   	pop    ebx
c0008da5:	5e                   	pop    esi
c0008da6:	c3                   	ret    
c0008da7:	90                   	nop

c0008da8 <VgaText::receiveKey(unsigned char)>:
c0008da8:	55                   	push   ebp
c0008da9:	57                   	push   edi
c0008daa:	56                   	push   esi
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 2c             	sub    esp,0x2c
c0008daf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008db3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db7:	89 ef                	mov    edi,ebp
c0008db9:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dbf:	0f 84 66 01 00 00    	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008dc5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dcb:	83 ff 08             	cmp    edi,0x8
c0008dce:	75 73                	jne    c0008e43 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dd0:	83 ec 0c             	sub    esp,0xc
c0008dd3:	56                   	push   esi
c0008dd4:	e8 97 77 ff ff       	call   c0000570 <strlen>
c0008dd9:	83 c4 10             	add    esp,0x10
c0008ddc:	85 c0                	test   eax,eax
c0008dde:	0f 84 02 01 00 00    	je     c0008ee6 <VgaText::receiveKey(unsigned char)+0x13e>
c0008de4:	50                   	push   eax
c0008de5:	50                   	push   eax
c0008de6:	6a 08                	push   0x8
c0008de8:	53                   	push   ebx
c0008de9:	e8 6c fb ff ff       	call   c000895a <VgaText::putchar(char)>
c0008dee:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df1:	e8 7a 77 ff ff       	call   c0000570 <strlen>
c0008df6:	83 c4 10             	add    esp,0x10
c0008df9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e01:	83 fa 0d             	cmp    edx,0xd
c0008e04:	89 d0                	mov    eax,edx
c0008e06:	0f 95 c1             	setne  cl
c0008e09:	83 fa 1f             	cmp    edx,0x1f
c0008e0c:	0f 9e c2             	setle  dl
c0008e0f:	0f b6 d2             	movzx  edx,dl
c0008e12:	85 ca                	test   edx,ecx
c0008e14:	74 17                	je     c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e16:	83 e8 08             	sub    eax,0x8
c0008e19:	3c 02                	cmp    al,0x2
c0008e1b:	76 10                	jbe    c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e1d:	55                   	push   ebp
c0008e1e:	55                   	push   ebp
c0008e1f:	68 bf 00 02 c0       	push   0xc00200bf
c0008e24:	53                   	push   ebx
c0008e25:	e8 6e fc ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0008e2a:	83 c4 10             	add    esp,0x10
c0008e2d:	83 ec 0c             	sub    esp,0xc
c0008e30:	56                   	push   esi
c0008e31:	e8 3a 77 ff ff       	call   c0000570 <strlen>
c0008e36:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3e:	e9 a0 00 00 00       	jmp    c0008ee3 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e43:	83 ec 0c             	sub    esp,0xc
c0008e46:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e4c:	50                   	push   eax
c0008e4d:	e8 1e 77 ff ff       	call   c0000570 <strlen>
c0008e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e59:	e8 12 77 ff ff       	call   c0000570 <strlen>
c0008e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e69:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6e:	0f 87 b7 00 00 00    	ja     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008e74:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e77:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e7a:	3c 1e                	cmp    al,0x1e
c0008e7c:	0f 96 c0             	setbe  al
c0008e7f:	80 fa 01             	cmp    dl,0x1
c0008e82:	0f 97 c2             	seta   dl
c0008e85:	0f b6 d2             	movzx  edx,dl
c0008e88:	85 c2                	test   edx,eax
c0008e8a:	74 2e                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e8c:	83 ff 0d             	cmp    edi,0xd
c0008e8f:	74 29                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e91:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e94:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e97:	68 c5 00 02 c0       	push   0xc00200c5
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 68 fc ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea5:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eab:	0f b6 c0             	movzx  eax,al
c0008eae:	50                   	push   eax
c0008eaf:	53                   	push   ebx
c0008eb0:	e8 d5 f9 ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb5:	83 c4 20             	add    esp,0x20
c0008eb8:	eb 11                	jmp    c0008ecb <VgaText::receiveKey(unsigned char)+0x123>
c0008eba:	89 e8                	mov    eax,ebp
c0008ebc:	51                   	push   ecx
c0008ebd:	0f be c0             	movsx  eax,al
c0008ec0:	51                   	push   ecx
c0008ec1:	50                   	push   eax
c0008ec2:	53                   	push   ebx
c0008ec3:	e8 92 fa ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed0:	89 e8                	mov    eax,ebp
c0008ed2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed6:	52                   	push   edx
c0008ed7:	52                   	push   edx
c0008ed8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 5d 79 ff ff       	call   c0000840 <strcat>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008eec:	b0 01                	mov    al,0x1
c0008eee:	83 ff 1c             	cmp    edi,0x1c
c0008ef1:	77 0e                	ja     c0008f01 <VgaText::receiveKey(unsigned char)+0x159>
c0008ef3:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef8:	89 f9                	mov    ecx,edi
c0008efa:	d3 e8                	shr    eax,cl
c0008efc:	f7 d0                	not    eax
c0008efe:	83 e0 01             	and    eax,0x1
c0008f01:	84 c0                	test   al,al
c0008f03:	74 04                	je     c0008f09 <VgaText::receiveKey(unsigned char)+0x161>
c0008f05:	84 d2                	test   dl,dl
c0008f07:	74 22                	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008f09:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f0f:	50                   	push   eax
c0008f10:	50                   	push   eax
c0008f11:	56                   	push   esi
c0008f12:	53                   	push   ebx
c0008f13:	e8 28 79 ff ff       	call   c0000840 <strcat>
c0008f18:	83 c4 0c             	add    esp,0xc
c0008f1b:	68 80 00 00 00       	push   0x80
c0008f20:	6a 00                	push   0x0
c0008f22:	56                   	push   esi
c0008f23:	e8 c8 75 ff ff       	call   c00004f0 <memset>
c0008f28:	83 c4 10             	add    esp,0x10
c0008f2b:	83 c4 2c             	add    esp,0x2c
c0008f2e:	5b                   	pop    ebx
c0008f2f:	5e                   	pop    esi
c0008f30:	5f                   	pop    edi
c0008f31:	5d                   	pop    ebp
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <VgaText::doUpdate()>:
c0008f34:	c3                   	ret    
c0008f35:	66 90                	xchg   ax,ax
c0008f37:	90                   	nop

c0008f38 <TSS::TSS()>:
c0008f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f43:	90                   	nop
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop
c0008f46:	66 90                	xchg   ax,ax

c0008f48 <TSS::setESP(unsigned long)>:
c0008f48:	55                   	push   ebp
c0008f49:	89 e5                	mov    ebp,esp
c0008f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f57:	90                   	nop
c0008f58:	5d                   	pop    ebp
c0008f59:	c3                   	ret    
c0008f5a:	66 90                	xchg   ax,ax

c0008f5c <TSS::flush()>:
c0008f5c:	55                   	push   ebp
c0008f5d:	89 e5                	mov    ebp,esp
c0008f5f:	83 ec 10             	sub    esp,0x10
c0008f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f67:	83 c8 03             	or     eax,0x3
c0008f6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f72:	66 89 d0             	mov    ax,dx
c0008f75:	0f 00 d8             	ltr    ax
c0008f78:	90                   	nop
c0008f79:	c9                   	leave  
c0008f7a:	c3                   	ret    
c0008f7b:	90                   	nop

c0008f7c <TSS::setup(unsigned long, unsigned long)>:
c0008f7c:	55                   	push   ebp
c0008f7d:	89 e5                	mov    ebp,esp
c0008f7f:	83 ec 18             	sub    esp,0x18
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	6a 68                	push   0x68
c0008f87:	e8 22 eb ff ff       	call   c0007aae <malloc>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	89 c2                	mov    edx,eax
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9d:	83 ec 04             	sub    esp,0x4
c0008fa0:	6a 68                	push   0x68
c0008fa2:	6a 00                	push   0x0
c0008fa4:	50                   	push   eax
c0008fa5:	e8 46 75 ff ff       	call   c00004f0 <memset>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009022:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000902e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000903e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009044:	0f 20 da             	mov    edx,cr3
c0009047:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000904d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	50                   	push   eax
c000905a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905d:	50                   	push   eax
c000905e:	e8 b7 e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	83 ec 08             	sub    esp,0x8
c0009069:	6a 68                	push   0x68
c000906b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000906e:	50                   	push   eax
c000906f:	e8 c2 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907e:	83 e0 0f             	and    eax,0xf
c0009081:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009084:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009087:	83 c8 40             	or     eax,0x40
c000908a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000908d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009092:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009098:	05 78 01 00 00       	add    eax,0x178
c000909d:	83 ec 04             	sub    esp,0x4
c00090a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090a6:	50                   	push   eax
c00090a7:	e8 be e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	89 c2                	mov    edx,eax
c00090b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c1:	05 78 01 00 00       	add    eax,0x178
c00090c6:	83 ec 0c             	sub    esp,0xc
c00090c9:	50                   	push   eax
c00090ca:	e8 c5 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090cf:	83 c4 10             	add    esp,0x10
c00090d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090d7:	c9                   	leave  
c00090d8:	c3                   	ret    
c00090d9:	90                   	nop

c00090da <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ea:	75 08                	jne    c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f2:	eb 38                	jmp    c000912c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090f9:	75 17                	jne    c0009112 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009103:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009109:	8b 10                	mov    edx,DWORD PTR [eax]
c000910b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000910f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009112:	89 c1                	mov    ecx,eax
c0009114:	83 e1 fd             	and    ecx,0xfffffffd
c0009117:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000911d:	74 cd                	je     c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009124:	83 e0 ef             	and    eax,0xffffffef
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	76 c0                	jbe    c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912c:	31 c0                	xor    eax,eax
c000912e:	c3                   	ret    
c000912f:	90                   	nop

c0009130 <ReservedFilename::isAtty()>:
c0009130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009137:	31 c0                	xor    eax,eax
c0009139:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000913f:	74 09                	je     c000914a <ReservedFilename::isAtty()+0x1a>
c0009141:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009147:	0f 94 c0             	sete   al
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009160:	75 08                	jne    c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009162:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009168:	eb 3d                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000916f:	75 17                	jne    c0009188 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000917f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009185:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009188:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000918d:	75 04                	jne    c0009193 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000918f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009191:	eb 14                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009193:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009198:	74 c8                	je     c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000919f:	83 e0 ef             	and    eax,0xffffffef
c00091a2:	83 f8 08             	cmp    eax,0x8
c00091a5:	76 bb                	jbe    c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a7:	31 c0                	xor    eax,eax
c00091a9:	c3                   	ret    

c00091aa <UnixFile::getFileDescriptor()>:
c00091aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b1:	c3                   	ret    

c00091b2 <UnixFile::UnixFile(int)>:
c00091b2:	53                   	push   ebx
c00091b3:	83 ec 28             	sub    esp,0x28
c00091b6:	ba 9c 01 02 c0       	mov    edx,0xc002019c
c00091bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091bf:	89 10                	mov    DWORD PTR [eax],edx
c00091c1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091c9:	0f 8f 90 01 00 00    	jg     c000935f <UnixFile::UnixFile(int)+0x1ad>
c00091cf:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c00091d4:	8d 50 01             	lea    edx,[eax+0x1]
c00091d7:	89 15 c0 26 02 c0    	mov    DWORD PTR ds:0xc00226c0,edx
c00091dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091eb:	68 98 4f 02 c0       	push   0xc0024f98
c00091f0:	e8 73 5a 01 00       	call   c001ec68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091fd:	83 f0 01             	xor    eax,0x1
c0009200:	0f b6 c0             	movzx  eax,al
c0009203:	85 c0                	test   eax,eax
c0009205:	0f 84 55 01 00 00    	je     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c000920b:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009212:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921a:	83 ec 0c             	sub    esp,0xc
c000921d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009221:	e8 88 e8 ff ff       	call   c0007aae <malloc>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	89 c3                	mov    ebx,eax
c000922b:	83 ec 08             	sub    esp,0x8
c000922e:	68 03 ff ff 0f       	push   0xfffff03
c0009233:	53                   	push   ebx
c0009234:	e8 2d 01 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009242:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924a:	83 ec 0c             	sub    esp,0xc
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	e8 58 e8 ff ff       	call   c0007aae <malloc>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	89 c3                	mov    ebx,eax
c000925b:	83 ec 08             	sub    esp,0x8
c000925e:	68 01 ff ff 0f       	push   0xfffff01
c0009263:	53                   	push   ebx
c0009264:	e8 fd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009272:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927a:	83 ec 0c             	sub    esp,0xc
c000927d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009281:	e8 28 e8 ff ff       	call   c0007aae <malloc>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 c3                	mov    ebx,eax
c000928b:	83 ec 08             	sub    esp,0x8
c000928e:	68 00 ff ff 0f       	push   0xfffff00
c0009293:	53                   	push   ebx
c0009294:	e8 cd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092aa:	83 ec 0c             	sub    esp,0xc
c00092ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b1:	e8 f8 e7 ff ff       	call   c0007aae <malloc>
c00092b6:	83 c4 10             	add    esp,0x10
c00092b9:	89 c3                	mov    ebx,eax
c00092bb:	83 ec 08             	sub    esp,0x8
c00092be:	68 02 ff ff 0f       	push   0xfffff02
c00092c3:	53                   	push   ebx
c00092c4:	e8 9d 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092da:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092df:	7f 7f                	jg     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c00092e1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092e9:	83 ec 0c             	sub    esp,0xc
c00092ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f0:	e8 b9 e7 ff ff       	call   c0007aae <malloc>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	89 c3                	mov    ebx,eax
c00092fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fe:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009303:	83 ec 08             	sub    esp,0x8
c0009306:	50                   	push   eax
c0009307:	53                   	push   ebx
c0009308:	e8 59 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c000930d:	83 c4 10             	add    esp,0x10
c0009310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009314:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009323:	83 ec 0c             	sub    esp,0xc
c0009326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932a:	e8 7f e7 ff ff       	call   c0007aae <malloc>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	89 c3                	mov    ebx,eax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	05 20 ff ff 0f       	add    eax,0xfffff20
c000933d:	83 ec 08             	sub    esp,0x8
c0009340:	50                   	push   eax
c0009341:	53                   	push   ebx
c0009342:	e8 1f 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009347:	83 c4 10             	add    esp,0x10
c000934a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000934e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009355:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935a:	e9 7b ff ff ff       	jmp    c00092da <UnixFile::UnixFile(int)+0x128>
c000935f:	90                   	nop
c0009360:	83 c4 28             	add    esp,0x28
c0009363:	5b                   	pop    ebx
c0009364:	c3                   	ret    
c0009365:	90                   	nop

c0009366 <ReservedFilename::ReservedFilename(int)>:
c0009366:	83 ec 0c             	sub    esp,0xc
c0009369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936d:	83 ec 08             	sub    esp,0x8
c0009370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009374:	50                   	push   eax
c0009375:	e8 38 fe ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	ba b8 01 02 c0       	mov    edx,0xc00201b8
c0009382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009386:	89 10                	mov    DWORD PTR [eax],edx
c0009388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009390:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009393:	90                   	nop
c0009394:	83 c4 0c             	add    esp,0xc
c0009397:	c3                   	ret    

c0009398 <UnixFile::~UnixFile()>:
c0009398:	83 ec 1c             	sub    esp,0x1c
c000939b:	ba 9c 01 02 c0       	mov    edx,0xc002019c
c00093a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a4:	89 10                	mov    DWORD PTR [eax],edx
c00093a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ad:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b2:	7f 76                	jg     c000942a <UnixFile::~UnixFile()+0x92>
c00093b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	68 98 4f 02 c0       	push   0xc0024f98
c00093c4:	e8 73 59 01 00       	call   c001ed3c <LinkedList<UnixFile>::getFirstElement()>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	68 98 4f 02 c0       	push   0xc0024f98
c00093d8:	e8 67 59 01 00       	call   c001ed44 <LinkedList<UnixFile>::removeFirst()>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093e8:	74 43                	je     c000942d <UnixFile::~UnixFile()+0x95>
c00093ea:	83 ec 08             	sub    esp,0x8
c00093ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f1:	68 98 4f 02 c0       	push   0xc0024f98
c00093f6:	e8 6d 58 01 00       	call   c001ec68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009402:	8d 50 01             	lea    edx,[eax+0x1]
c0009405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009409:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000940e:	0f 94 c0             	sete   al
c0009411:	0f b6 c0             	movzx  eax,al
c0009414:	85 c0                	test   eax,eax
c0009416:	74 a4                	je     c00093bc <UnixFile::~UnixFile()+0x24>
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	68 74 01 02 c0       	push   0xc0020174
c0009420:	e8 94 77 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	eb 92                	jmp    c00093bc <UnixFile::~UnixFile()+0x24>
c000942a:	90                   	nop
c000942b:	eb 01                	jmp    c000942e <UnixFile::~UnixFile()+0x96>
c000942d:	90                   	nop
c000942e:	90                   	nop
c000942f:	83 c4 1c             	add    esp,0x1c
c0009432:	c3                   	ret    
c0009433:	90                   	nop

c0009434 <UnixFile::~UnixFile()>:
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	83 ec 0c             	sub    esp,0xc
c000943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943e:	e8 55 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009443:	83 c4 10             	add    esp,0x10
c0009446:	83 ec 08             	sub    esp,0x8
c0009449:	6a 0c                	push   0xc
c000944b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944f:	e8 b8 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	83 c4 0c             	add    esp,0xc
c000945a:	c3                   	ret    
c000945b:	90                   	nop

c000945c <ReservedFilename::~ReservedFilename()>:
c000945c:	83 ec 0c             	sub    esp,0xc
c000945f:	ba b8 01 02 c0       	mov    edx,0xc00201b8
c0009464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009468:	89 10                	mov    DWORD PTR [eax],edx
c000946a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946e:	83 ec 0c             	sub    esp,0xc
c0009471:	50                   	push   eax
c0009472:	e8 21 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	90                   	nop
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	83 ec 0c             	sub    esp,0xc
c0009486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948a:	e8 cd ff ff ff       	call   c000945c <ReservedFilename::~ReservedFilename()>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	83 ec 08             	sub    esp,0x8
c0009495:	6a 0c                	push   0xc
c0009497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949b:	e8 6c 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00094a0:	83 c4 10             	add    esp,0x10
c00094a3:	83 c4 0c             	add    esp,0xc
c00094a6:	c3                   	ret    

c00094a7 <KeGetFileFromDescriptor(int)>:
c00094a7:	53                   	push   ebx
c00094a8:	83 ec 08             	sub    esp,0x8
c00094ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094af:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bb:	7f 2c                	jg     c00094e9 <KeGetFileFromDescriptor(int)+0x42>
c00094bd:	83 ec 0c             	sub    esp,0xc
c00094c0:	68 98 4f 02 c0       	push   0xc0024f98
c00094c5:	e8 72 58 01 00       	call   c001ed3c <LinkedList<UnixFile>::getFirstElement()>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	75 04                	jne    c00094d5 <KeGetFileFromDescriptor(int)+0x2e>
c00094d1:	31 c0                	xor    eax,eax
c00094d3:	eb 6e                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094d5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094d8:	74 69                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094da:	52                   	push   edx
c00094db:	52                   	push   edx
c00094dc:	50                   	push   eax
c00094dd:	68 98 4f 02 c0       	push   0xc0024f98
c00094e2:	e8 ff 58 01 00       	call   c001ede6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094e7:	eb e1                	jmp    c00094ca <KeGetFileFromDescriptor(int)+0x23>
c00094e9:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094ee:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f4:	74 4d                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094f6:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094fb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009501:	74 40                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009503:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009508:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950e:	74 33                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009510:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009515:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951b:	74 26                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c000951d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009523:	83 f8 08             	cmp    eax,0x8
c0009526:	77 09                	ja     c0009531 <KeGetFileFromDescriptor(int)+0x8a>
c0009528:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000952f:	eb 12                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009531:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009537:	83 fb 08             	cmp    ebx,0x8
c000953a:	77 95                	ja     c00094d1 <KeGetFileFromDescriptor(int)+0x2a>
c000953c:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009543:	83 c4 08             	add    esp,0x8
c0009546:	5b                   	pop    ebx
c0009547:	c3                   	ret    

c0009548 <__static_initialization_and_destruction_0(int, int)>:
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009550:	75 34                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009552:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955a:	75 2a                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	68 98 4f 02 c0       	push   0xc0024f98
c0009564:	e8 bd 56 01 00       	call   c001ec26 <LinkedList<UnixFile>::LinkedList()>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	83 ec 04             	sub    esp,0x4
c000956f:	68 44 26 02 c0       	push   0xc0022644
c0009574:	68 98 4f 02 c0       	push   0xc0024f98
c0009579:	68 24 ec 01 c0       	push   0xc001ec24
c000957e:	e8 39 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009583:	83 c4 10             	add    esp,0x10
c0009586:	90                   	nop
c0009587:	83 c4 0c             	add    esp,0xc
c000958a:	c3                   	ret    

c000958b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958b:	83 ec 0c             	sub    esp,0xc
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	68 ff ff 00 00       	push   0xffff
c0009596:	6a 01                	push   0x1
c0009598:	e8 ab ff ff ff       	call   c0009548 <__static_initialization_and_destruction_0(int, int)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	c3                   	ret    

c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a4:	53                   	push   ebx
c00095a5:	8b 15 c8 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226c8
c00095ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095b9:	89 d8                	mov    eax,ebx
c00095bb:	d1 e8                	shr    eax,1
c00095bd:	01 d0                	add    eax,edx
c00095bf:	80 e3 01             	and    bl,0x1
c00095c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c4:	75 09                	jne    c00095cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095c6:	83 e2 f0             	and    edx,0xfffffff0
c00095c9:	09 ca                	or     edx,ecx
c00095cb:	88 10                	mov    BYTE PTR [eax],dl
c00095cd:	5b                   	pop    ebx
c00095ce:	c3                   	ret    
c00095cf:	83 e2 0f             	and    edx,0xf
c00095d2:	0f b6 c9             	movzx  ecx,cl
c00095d5:	c1 e1 04             	shl    ecx,0x4
c00095d8:	09 ca                	or     edx,ecx
c00095da:	88 10                	mov    BYTE PTR [eax],dl
c00095dc:	5b                   	pop    ebx
c00095dd:	c3                   	ret    

c00095de <Virt::getPageState(unsigned long)>:
c00095de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e2:	8b 0d c8 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226c8
c00095e8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095ee:	89 d0                	mov    eax,edx
c00095f0:	d1 e8                	shr    eax,1
c00095f2:	80 e2 01             	and    dl,0x1
c00095f5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095f8:	74 03                	je     c00095fd <Virt::getPageState(unsigned long)+0x1f>
c00095fa:	c1 e8 04             	shr    eax,0x4
c00095fd:	83 e0 0f             	and    eax,0xf
c0009600:	c3                   	ret    

c0009601 <Virt::allocateKernelVirtualPages(int)>:
c0009601:	55                   	push   ebp
c0009602:	31 ed                	xor    ebp,ebp
c0009604:	57                   	push   edi
c0009605:	31 ff                	xor    edi,edi
c0009607:	56                   	push   esi
c0009608:	53                   	push   ebx
c0009609:	31 db                	xor    ebx,ebx
c000960b:	83 ec 0c             	sub    esp,0xc
c000960e:	8b 35 c4 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226c4
c0009614:	56                   	push   esi
c0009615:	e8 c4 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000961a:	5a                   	pop    edx
c000961b:	84 c0                	test   al,al
c000961d:	75 41                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000961f:	85 db                	test   ebx,ebx
c0009621:	75 02                	jne    c0009625 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009623:	89 f5                	mov    ebp,esi
c0009625:	83 c3 01             	add    ebx,0x1
c0009628:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000962c:	74 5f                	je     c000968d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000962e:	83 c6 01             	add    esi,0x1
c0009631:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009637:	76 34                	jbe    c000966d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009639:	c7 05 c4 26 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00226c4,0xc8000
c0009643:	f7 c7 01 00 00 00    	test   edi,0x1
c0009649:	75 2a                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x74>
c000964b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009650:	bf 01 00 00 00       	mov    edi,0x1
c0009655:	56                   	push   esi
c0009656:	e8 83 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000965b:	5a                   	pop    edx
c000965c:	84 c0                	test   al,al
c000965e:	74 bf                	je     c000961f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009660:	31 db                	xor    ebx,ebx
c0009662:	83 c6 01             	add    esi,0x1
c0009665:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000966b:	77 cc                	ja     c0009639 <Virt::allocateKernelVirtualPages(int)+0x38>
c000966d:	89 35 c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,esi
c0009673:	eb 9f                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	68 cc 01 02 c0       	push   0xc00201cc
c000967d:	e8 37 75 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009682:	8b 35 c4 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226c4
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	eb 87                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c000968d:	89 2d c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,ebp
c0009693:	83 fb 01             	cmp    ebx,0x1
c0009696:	74 6f                	je     c0009707 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000969c:	85 c9                	test   ecx,ecx
c000969e:	74 49                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a4:	89 e8                	mov    eax,ebp
c00096a6:	31 db                	xor    ebx,ebx
c00096a8:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096ab:	eb 18                	jmp    c00096c5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096ad:	6a 01                	push   0x1
c00096af:	83 c3 01             	add    ebx,0x1
c00096b2:	50                   	push   eax
c00096b3:	e8 ec fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b8:	58                   	pop    eax
c00096b9:	5a                   	pop    edx
c00096ba:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096be:	74 29                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096c0:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c00096c5:	8d 50 01             	lea    edx,[eax+0x1]
c00096c8:	85 db                	test   ebx,ebx
c00096ca:	89 15 c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,edx
c00096d0:	74 24                	je     c00096f6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096d2:	39 df                	cmp    edi,ebx
c00096d4:	75 d7                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xac>
c00096d6:	6a 03                	push   0x3
c00096d8:	83 c3 01             	add    ebx,0x1
c00096db:	50                   	push   eax
c00096dc:	e8 c3 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e1:	59                   	pop    ecx
c00096e2:	5e                   	pop    esi
c00096e3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096e7:	75 d7                	jne    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096e9:	83 c4 0c             	add    esp,0xc
c00096ec:	89 e8                	mov    eax,ebp
c00096ee:	5b                   	pop    ebx
c00096ef:	c1 e0 0c             	shl    eax,0xc
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	5d                   	pop    ebp
c00096f5:	c3                   	ret    
c00096f6:	6a 02                	push   0x2
c00096f8:	bb 01 00 00 00       	mov    ebx,0x1
c00096fd:	50                   	push   eax
c00096fe:	e8 a1 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009703:	58                   	pop    eax
c0009704:	5a                   	pop    edx
c0009705:	eb b9                	jmp    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009707:	6a 04                	push   0x4
c0009709:	8d 45 01             	lea    eax,[ebp+0x1]
c000970c:	55                   	push   ebp
c000970d:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0009712:	e8 8d fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	5b                   	pop    ebx
c0009718:	89 e8                	mov    eax,ebp
c000971a:	5e                   	pop    esi
c000971b:	c1 e0 0c             	shl    eax,0xc
c000971e:	83 c4 0c             	add    esp,0xc
c0009721:	5b                   	pop    ebx
c0009722:	5e                   	pop    esi
c0009723:	5f                   	pop    edi
c0009724:	5d                   	pop    ebp
c0009725:	c3                   	ret    

c0009726 <Virt::freeSwapfilePage(unsigned long)>:
c0009726:	53                   	push   ebx
c0009727:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	b8 01 00 00 00       	mov    eax,0x1
c0009736:	89 cb                	mov    ebx,ecx
c0009738:	d3 e0                	shl    eax,cl
c000973a:	c1 eb 05             	shr    ebx,0x5
c000973d:	f7 d0                	not    eax
c000973f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009742:	21 c1                	and    ecx,eax
c0009744:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009747:	5b                   	pop    ebx
c0009748:	c3                   	ret    

c0009749 <Virt::swapIDToSector(unsigned long)>:
c0009749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974d:	8b 15 cc 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226cc
c0009753:	8b 0d d4 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226d4
c0009759:	0f af c2             	imul   eax,edx
c000975c:	01 c8                	add    eax,ecx
c000975e:	c3                   	ret    

c000975f <Virt::allocateSwapfilePage()>:
c000975f:	55                   	push   ebp
c0009760:	31 d2                	xor    edx,edx
c0009762:	57                   	push   edi
c0009763:	56                   	push   esi
c0009764:	53                   	push   ebx
c0009765:	83 ec 0c             	sub    esp,0xc
c0009768:	8b 0d cc 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226cc
c000976e:	a1 d0 26 02 c0       	mov    eax,ds:0xc00226d0
c0009773:	f7 f1                	div    ecx
c0009775:	39 0d d0 26 02 c0    	cmp    DWORD PTR ds:0xc00226d0,ecx
c000977b:	72 2f                	jb     c00097ac <Virt::allocateSwapfilePage()+0x4d>
c000977d:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009783:	8b 16                	mov    edx,DWORD PTR [esi]
c0009785:	f6 c2 01             	test   dl,0x1
c0009788:	74 3e                	je     c00097c8 <Virt::allocateSwapfilePage()+0x69>
c000978a:	31 c9                	xor    ecx,ecx
c000978c:	bf 01 00 00 00       	mov    edi,0x1
c0009791:	eb 12                	jmp    c00097a5 <Virt::allocateSwapfilePage()+0x46>
c0009793:	89 fd                	mov    ebp,edi
c0009795:	89 ca                	mov    edx,ecx
c0009797:	d3 e5                	shl    ebp,cl
c0009799:	c1 ea 05             	shr    edx,0x5
c000979c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000979f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a1:	85 ea                	test   edx,ebp
c00097a3:	74 2c                	je     c00097d1 <Virt::allocateSwapfilePage()+0x72>
c00097a5:	83 c1 01             	add    ecx,0x1
c00097a8:	39 c8                	cmp    eax,ecx
c00097aa:	77 e7                	ja     c0009793 <Virt::allocateSwapfilePage()+0x34>
c00097ac:	83 ec 0c             	sub    esp,0xc
c00097af:	68 60 04 02 c0       	push   0xc0020460
c00097b4:	e8 00 74 00 00       	call   c0010bb9 <KePanic(char const*)>
c00097b9:	83 c4 10             	add    esp,0x10
c00097bc:	31 c9                	xor    ecx,ecx
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	5b                   	pop    ebx
c00097c4:	5e                   	pop    esi
c00097c5:	5f                   	pop    edi
c00097c6:	5d                   	pop    ebp
c00097c7:	c3                   	ret    
c00097c8:	89 f3                	mov    ebx,esi
c00097ca:	bd 01 00 00 00       	mov    ebp,0x1
c00097cf:	31 c9                	xor    ecx,ecx
c00097d1:	09 ea                	or     edx,ebp
c00097d3:	89 c8                	mov    eax,ecx
c00097d5:	89 13                	mov    DWORD PTR [ebx],edx
c00097d7:	83 c4 0c             	add    esp,0xc
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    

c00097df <Virt::virtualMemorySetup()>:
c00097df:	53                   	push   ebx
c00097e0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e5:	6a 0f                	push   0xf
c00097e7:	53                   	push   ebx
c00097e8:	83 c3 01             	add    ebx,0x1
c00097eb:	e8 b4 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f0:	58                   	pop    eax
c00097f1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f7:	5a                   	pop    edx
c00097f8:	75 eb                	jne    c00097e5 <Virt::virtualMemorySetup()+0x6>
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 00                	push   0x0
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 9a fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	59                   	pop    ecx
c000980b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009811:	58                   	pop    eax
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x20>
c0009814:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009819:	6a 0f                	push   0xf
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 80 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	58                   	pop    eax
c0009825:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000982b:	5a                   	pop    edx
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x3a>
c000982e:	5b                   	pop    ebx
c000982f:	c3                   	ret    

c0009830 <Virt::setupPageSwapping(int)>:
c0009830:	53                   	push   ebx
c0009831:	83 ec 0c             	sub    esp,0xc
c0009834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009838:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c000983d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009843:	8b 10                	mov    edx,DWORD PTR [eax]
c0009845:	53                   	push   ebx
c0009846:	c1 e3 0b             	shl    ebx,0xb
c0009849:	68 77 04 02 c0       	push   0xc0020477
c000984e:	50                   	push   eax
c000984f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009852:	89 1d d0 26 02 c0    	mov    DWORD PTR ds:0xc00226d0,ebx
c0009858:	c6 05 d8 26 02 c0 43 	mov    BYTE PTR ds:0xc00226d8,0x43
c000985f:	c1 eb 08             	shr    ebx,0x8
c0009862:	a3 d4 26 02 c0       	mov    ds:0xc00226d4,eax
c0009867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000986a:	c7 05 cc 26 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00226cc,0x8
c0009874:	e8 35 e2 ff ff       	call   c0007aae <malloc>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 c1                	mov    ecx,eax
c000987e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009883:	31 d2                	xor    edx,edx
c0009885:	a1 d0 26 02 c0       	mov    eax,ds:0xc00226d0
c000988a:	f7 35 cc 26 02 c0    	div    DWORD PTR ds:0xc00226cc
c0009890:	c1 e8 05             	shr    eax,0x5
c0009893:	50                   	push   eax
c0009894:	6a 00                	push   0x0
c0009896:	51                   	push   ecx
c0009897:	e8 54 6c ff ff       	call   c00004f0 <memset>
c000989c:	83 c4 18             	add    esp,0x18
c000989f:	5b                   	pop    ebx
c00098a0:	c3                   	ret    
c00098a1:	90                   	nop

c00098a2 <VAS::setCPUSpecific(unsigned long)>:
c00098a2:	c3                   	ret    
c00098a3:	90                   	nop

c00098a4 <VAS::VAS(VAS*)>:
c00098a4:	83 ec 0c             	sub    esp,0xc
c00098a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	68 ec 01 02 c0       	push   0xc00201ec
c00098c5:	e8 ef 72 00 00       	call   c0010bb9 <KePanic(char const*)>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	90                   	nop
c00098ce:	83 c4 0c             	add    esp,0xc
c00098d1:	c3                   	ret    

c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098db:	89 c2                	mov    edx,eax
c00098dd:	c1 e8 0a             	shr    eax,0xa
c00098e0:	c1 ea 16             	shr    edx,0x16
c00098e3:	83 f9 01             	cmp    ecx,0x1
c00098e6:	19 c9                	sbb    ecx,ecx
c00098e8:	c1 e2 0c             	shl    edx,0xc
c00098eb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098f1:	25 fc 0f 00 00       	and    eax,0xffc
c00098f6:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098fd:	01 d0                	add    eax,edx
c00098ff:	c3                   	ret    

c0009900 <VAS::getPageTableEntry(unsigned long)>:
c0009900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009904:	89 ca                	mov    edx,ecx
c0009906:	c1 e9 0a             	shr    ecx,0xa
c0009909:	c1 ea 16             	shr    edx,0x16
c000990c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009912:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009918:	c1 e0 0c             	shl    eax,0xc
c000991b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000991e:	c3                   	ret    

c000991f <Virt::freeKernelVirtualPages(unsigned long)>:
c000991f:	55                   	push   ebp
c0009920:	57                   	push   edi
c0009921:	bf 01 00 00 00       	mov    edi,0x1
c0009926:	56                   	push   esi
c0009927:	53                   	push   ebx
c0009928:	83 ec 1c             	sub    esp,0x1c
c000992b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000992f:	c1 ee 0c             	shr    esi,0xc
c0009932:	eb 48                	jmp    c000997c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009934:	83 ec 08             	sub    esp,0x8
c0009937:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000993c:	55                   	push   ebp
c000993d:	50                   	push   eax
c000993e:	e8 bd ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009943:	83 c4 10             	add    esp,0x10
c0009946:	8b 10                	mov    edx,DWORD PTR [eax]
c0009948:	f6 c6 04             	test   dh,0x4
c000994b:	75 70                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009953:	83 fb 04             	cmp    ebx,0x4
c0009956:	0f 84 8a 00 00 00    	je     c00099e6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000995c:	83 fb 02             	cmp    ebx,0x2
c000995f:	0f 84 9a 00 00 00    	je     c00099ff <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009965:	83 fb 03             	cmp    ebx,0x3
c0009968:	0f 84 be 00 00 00    	je     c0009a2c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000996e:	83 fb 01             	cmp    ebx,0x1
c0009971:	0f 84 a2 00 00 00    	je     c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009977:	83 c6 01             	add    esi,0x1
c000997a:	31 ff                	xor    edi,edi
c000997c:	56                   	push   esi
c000997d:	89 f5                	mov    ebp,esi
c000997f:	e8 5a fc ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c0009984:	c1 e5 0c             	shl    ebp,0xc
c0009987:	0f b6 d8             	movzx  ebx,al
c000998a:	5a                   	pop    edx
c000998b:	85 db                	test   ebx,ebx
c000998d:	75 a5                	jne    c0009934 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000998f:	83 ec 0c             	sub    esp,0xc
c0009992:	68 8e 04 02 c0       	push   0xc002048e
c0009997:	e8 1d 72 00 00       	call   c0010bb9 <KePanic(char const*)>
c000999c:	5a                   	pop    edx
c000999d:	59                   	pop    ecx
c000999e:	55                   	push   ebp
c000999f:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099a5:	55                   	push   ebp
c00099a6:	e8 55 ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00099b0:	f6 c6 04             	test   dh,0x4
c00099b3:	75 08                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099bb:	eb ba                	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099c7:	83 ec 0c             	sub    esp,0xc
c00099ca:	52                   	push   edx
c00099cb:	e8 79 e3 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c00099d0:	83 c4 10             	add    esp,0x10
c00099d3:	83 fb 04             	cmp    ebx,0x4
c00099d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099e0:	0f 85 76 ff ff ff    	jne    c000995c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099e6:	83 e7 01             	and    edi,0x1
c00099e9:	75 46                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099eb:	c7 44 24 30 10 02 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020210
c00099f3:	83 c4 1c             	add    esp,0x1c
c00099f6:	5b                   	pop    ebx
c00099f7:	5e                   	pop    esi
c00099f8:	5f                   	pop    edi
c00099f9:	5d                   	pop    ebp
c00099fa:	e9 ba 71 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c00099ff:	83 e7 01             	and    edi,0x1
c0009a02:	75 15                	jne    c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a04:	83 ec 0c             	sub    esp,0xc
c0009a07:	68 aa 04 02 c0       	push   0xc00204aa
c0009a0c:	e8 a8 71 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	e9 5e ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a19:	83 ec 08             	sub    esp,0x8
c0009a1c:	6a 00                	push   0x0
c0009a1e:	56                   	push   esi
c0009a1f:	e8 80 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a24:	83 c4 10             	add    esp,0x10
c0009a27:	e9 4b ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a2c:	83 e7 01             	and    edi,0x1
c0009a2f:	75 16                	jne    c0009a47 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a31:	83 ec 08             	sub    esp,0x8
c0009a34:	6a 00                	push   0x0
c0009a36:	56                   	push   esi
c0009a37:	e8 68 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	83 c4 1c             	add    esp,0x1c
c0009a42:	5b                   	pop    ebx
c0009a43:	5e                   	pop    esi
c0009a44:	5f                   	pop    edi
c0009a45:	5d                   	pop    ebp
c0009a46:	c3                   	ret    
c0009a47:	c7 44 24 30 c6 04 02 c0 	mov    DWORD PTR [esp+0x30],0xc00204c6
c0009a4f:	83 c4 1c             	add    esp,0x1c
c0009a52:	5b                   	pop    ebx
c0009a53:	5e                   	pop    esi
c0009a54:	5f                   	pop    edi
c0009a55:	5d                   	pop    ebp
c0009a56:	e9 5e 71 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c0009a5b:	90                   	nop

c0009a5c <VAS::freeAllocatedPages(unsigned long)>:
c0009a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a64:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a68:	74 09                	je     c0009a73 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a6e:	e9 ac fe ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009a73:	c7 44 24 04 34 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020234
c0009a7b:	e9 b9 0e 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c0009a80 <VAS::virtualToPhysical(unsigned long)>:
c0009a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a84:	50                   	push   eax
c0009a85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a89:	52                   	push   edx
c0009a8a:	e8 71 fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009a8f:	59                   	pop    ecx
c0009a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a92:	5a                   	pop    edx
c0009a93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a98:	c3                   	ret    
c0009a99:	90                   	nop

c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a9a:	55                   	push   ebp
c0009a9b:	57                   	push   edi
c0009a9c:	56                   	push   esi
c0009a9d:	53                   	push   ebx
c0009a9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009aa6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009aaa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aae:	85 db                	test   ebx,ebx
c0009ab0:	7e 24                	jle    c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ab2:	c1 e3 0c             	shl    ebx,0xc
c0009ab5:	01 f3                	add    ebx,esi
c0009ab7:	56                   	push   esi
c0009ab8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009abe:	55                   	push   ebp
c0009abf:	e8 3c fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009ac4:	5a                   	pop    edx
c0009ac5:	59                   	pop    ecx
c0009ac6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009acc:	21 f9                	and    ecx,edi
c0009ace:	09 d1                	or     ecx,edx
c0009ad0:	39 f3                	cmp    ebx,esi
c0009ad2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad4:	75 e1                	jne    c0009ab7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ad6:	5b                   	pop    ebx
c0009ad7:	5e                   	pop    esi
c0009ad8:	5f                   	pop    edi
c0009ad9:	5d                   	pop    ebp
c0009ada:	c3                   	ret    
c0009adb:	90                   	nop

c0009adc <VAS::VAS()>:
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aeb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aff:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b07:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b15:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b1a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b1f:	29 c2                	sub    edx,eax
c0009b21:	89 d0                	mov    eax,edx
c0009b23:	05 ff 0f 00 00       	add    eax,0xfff
c0009b28:	c1 e8 0c             	shr    eax,0xc
c0009b2b:	89 c2                	mov    edx,eax
c0009b2d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b32:	6a 04                	push   0x4
c0009b34:	6a ff                	push   0xffffffff
c0009b36:	52                   	push   edx
c0009b37:	50                   	push   eax
c0009b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b3c:	e8 59 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b41:	83 c4 14             	add    esp,0x14
c0009b44:	90                   	nop
c0009b45:	c3                   	ret    

c0009b46 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b46:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b51:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b58:	75 01                	jne    c0009b5b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b5a:	c3                   	ret    
c0009b5b:	68 80 00 00 00       	push   0x80
c0009b60:	6a ff                	push   0xffffffff
c0009b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b66:	50                   	push   eax
c0009b67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b6b:	52                   	push   edx
c0009b6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b70:	51                   	push   ecx
c0009b71:	e8 24 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b76:	83 c4 14             	add    esp,0x14
c0009b79:	c3                   	ret    

c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b85:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b8d:	83 f8 01             	cmp    eax,0x1
c0009b90:	19 c0                	sbb    eax,eax
c0009b92:	83 ca 03             	or     edx,0x3
c0009b95:	83 e0 fc             	and    eax,0xfffffffc
c0009b98:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b9f:	0f 20 d8             	mov    eax,cr3
c0009ba2:	0f 22 d8             	mov    cr3,eax
c0009ba5:	c3                   	ret    

c0009ba6 <VAS::~VAS()>:
c0009ba6:	83 ec 2c             	sub    esp,0x2c
c0009ba9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bb1:	fa                   	cli    
c0009bb2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009bb7:	83 c0 01             	add    eax,0x1
c0009bba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009bbf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bc9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bd3:	6a 01                	push   0x1
c0009bd5:	50                   	push   eax
c0009bd6:	e8 9f ff ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bdb:	83 c4 0c             	add    esp,0xc
c0009bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009be6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bee:	0f 8f d8 00 00 00    	jg     c0009ccc <VAS::~VAS()+0x126>
c0009bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bff:	c1 e2 02             	shl    edx,0x2
c0009c02:	01 d0                	add    eax,edx
c0009c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c0e:	83 e0 01             	and    eax,0x1
c0009c11:	0f 84 ab 00 00 00    	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009c17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c1f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c27:	7f 74                	jg     c0009c9d <VAS::~VAS()+0xf7>
c0009c29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c2d:	c1 e0 0a             	shl    eax,0xa
c0009c30:	89 c2                	mov    edx,eax
c0009c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c36:	01 d0                	add    eax,edx
c0009c38:	c1 e0 0c             	shl    eax,0xc
c0009c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c3f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c49:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c53:	6a 01                	push   0x1
c0009c55:	50                   	push   eax
c0009c56:	e8 77 fc ff ff       	call   c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c5b:	83 c4 0c             	add    esp,0xc
c0009c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 01 04 00 00       	and    eax,0x401
c0009c75:	3d 01 04 00 00       	cmp    eax,0x401
c0009c7a:	75 1a                	jne    c0009c96 <VAS::~VAS()+0xf0>
c0009c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	50                   	push   eax
c0009c89:	e8 bb e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c96:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c9b:	eb 82                	jmp    c0009c1f <VAS::~VAS()+0x79>
c0009c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca1:	25 00 04 00 00       	and    eax,0x400
c0009ca6:	74 1a                	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 8f e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cc7:	e9 1a ff ff ff       	jmp    c0009be6 <VAS::~VAS()+0x40>
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cd3:	83 ec 0c             	sub    esp,0xc
c0009cd6:	50                   	push   eax
c0009cd7:	e8 43 fc ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009cdc:	83 c4 10             	add    esp,0x10
c0009cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ce6:	83 ec 0c             	sub    esp,0xc
c0009ce9:	50                   	push   eax
c0009cea:	e8 5a e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cef:	83 c4 10             	add    esp,0x10
c0009cf2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cf7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cfc:	83 e8 01             	sub    eax,0x1
c0009cff:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009d04:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d09:	85 c0                	test   eax,eax
c0009d0b:	75 01                	jne    c0009d0e <VAS::~VAS()+0x168>
c0009d0d:	fb                   	sti    
c0009d0e:	90                   	nop
c0009d0f:	83 c4 2c             	add    esp,0x2c
c0009d12:	c3                   	ret    
c0009d13:	90                   	nop

c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d14:	55                   	push   ebp
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	53                   	push   ebx
c0009d18:	83 ec 1c             	sub    esp,0x1c
c0009d1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d29:	77 08                	ja     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d2b:	0f 20 d8             	mov    eax,cr3
c0009d2e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d31:	75 49                	jne    c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d37:	09 d8                	or     eax,ebx
c0009d39:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d3e:	75 59                	jne    c0009d99 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d40:	89 de                	mov    esi,ebx
c0009d42:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d45:	c1 ee 16             	shr    esi,0x16
c0009d48:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d4f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d53:	74 56                	je     c0009dab <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d5d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d63:	c1 eb 0a             	shr    ebx,0xa
c0009d66:	c1 e6 0c             	shl    esi,0xc
c0009d69:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d6f:	09 d0                	or     eax,edx
c0009d71:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d74:	83 c4 1c             	add    esp,0x1c
c0009d77:	5b                   	pop    ebx
c0009d78:	5e                   	pop    esi
c0009d79:	5f                   	pop    edi
c0009d7a:	5d                   	pop    ebp
c0009d7b:	c3                   	ret    
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	68 58 02 02 c0       	push   0xc0020258
c0009d84:	e8 b0 0b 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d90:	09 d8                	or     eax,ebx
c0009d92:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d97:	74 a7                	je     c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	68 c0 02 02 c0       	push   0xc00202c0
c0009da1:	e8 13 6e 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009da6:	83 c4 10             	add    esp,0x10
c0009da9:	eb 95                	jmp    c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009daf:	e8 fe df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	89 c5                	mov    ebp,eax
c0009db9:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009dbf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc3:	6a 01                	push   0x1
c0009dc5:	e8 37 f8 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009dca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd1:	6a 01                	push   0x1
c0009dd3:	50                   	push   eax
c0009dd4:	55                   	push   ebp
c0009dd5:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ddb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ddf:	51                   	push   ecx
c0009de0:	e8 29 01 00 00       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009de5:	83 c4 1c             	add    esp,0x1c
c0009de8:	68 00 10 00 00       	push   0x1000
c0009ded:	6a 00                	push   0x0
c0009def:	50                   	push   eax
c0009df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009df4:	e8 f7 66 ff ff       	call   c00004f0 <memset>
c0009df9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dfd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e00:	e8 1a fb ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e09:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0c:	83 c4 10             	add    esp,0x10
c0009e0f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e12:	e9 3e ff ff ff       	jmp    c0009d55 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e17:	90                   	nop

c0009e18 <VAS::allocatePages(int, int)>:
c0009e18:	55                   	push   ebp
c0009e19:	57                   	push   edi
c0009e1a:	56                   	push   esi
c0009e1b:	53                   	push   ebx
c0009e1c:	83 ec 1c             	sub    esp,0x1c
c0009e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e27:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e2b:	75 71                	jne    c0009e9e <VAS::allocatePages(int, int)+0x86>
c0009e2d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e34:	85 c0                	test   eax,eax
c0009e36:	74 4d                	je     c0009e85 <VAS::allocatePages(int, int)+0x6d>
c0009e38:	89 dd                	mov    ebp,ebx
c0009e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e3e:	c1 e5 0c             	shl    ebp,0xc
c0009e41:	01 c5                	add    ebp,eax
c0009e43:	85 db                	test   ebx,ebx
c0009e45:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e48:	7e 29                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009e4a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e52:	81 cf 00 04 00 00    	or     edi,0x400
c0009e58:	e8 55 df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009e5d:	57                   	push   edi
c0009e5e:	53                   	push   ebx
c0009e5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e65:	50                   	push   eax
c0009e66:	56                   	push   esi
c0009e67:	e8 a8 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	39 dd                	cmp    ebp,ebx
c0009e71:	75 e5                	jne    c0009e58 <VAS::allocatePages(int, int)+0x40>
c0009e73:	0f 20 d8             	mov    eax,cr3
c0009e76:	0f 22 d8             	mov    cr3,eax
c0009e79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7d:	83 c4 1c             	add    esp,0x1c
c0009e80:	5b                   	pop    ebx
c0009e81:	5e                   	pop    esi
c0009e82:	5f                   	pop    edi
c0009e83:	5d                   	pop    ebp
c0009e84:	c3                   	ret    
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 e4 02 02 c0       	push   0xc00202e4
c0009e8d:	e8 27 6d 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009e92:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	eb 9a                	jmp    c0009e38 <VAS::allocatePages(int, int)+0x20>
c0009e9e:	83 ec 0c             	sub    esp,0xc
c0009ea1:	53                   	push   ebx
c0009ea2:	e8 5a f7 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eb3:	77 37                	ja     c0009eec <VAS::allocatePages(int, int)+0xd4>
c0009eb5:	85 db                	test   ebx,ebx
c0009eb7:	7e ba                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eb9:	c1 e3 0c             	shl    ebx,0xc
c0009ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ec0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ec4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ec7:	81 cf 00 04 00 00    	or     edi,0x400
c0009ecd:	89 c3                	mov    ebx,eax
c0009ecf:	e8 de de ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ed4:	57                   	push   edi
c0009ed5:	53                   	push   ebx
c0009ed6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009edc:	50                   	push   eax
c0009edd:	56                   	push   esi
c0009ede:	e8 31 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee3:	83 c4 10             	add    esp,0x10
c0009ee6:	39 dd                	cmp    ebp,ebx
c0009ee8:	75 e5                	jne    c0009ecf <VAS::allocatePages(int, int)+0xb7>
c0009eea:	eb 87                	jmp    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ef1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef7:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009efe:	74 b5                	je     c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f04:	80 ce 01             	or     dh,0x1
c0009f07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f0b:	eb a8                	jmp    c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f0d:	90                   	nop

c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f0e:	55                   	push   ebp
c0009f0f:	57                   	push   edi
c0009f10:	56                   	push   esi
c0009f11:	53                   	push   ebx
c0009f12:	83 ec 0c             	sub    esp,0xc
c0009f15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f21:	85 db                	test   ebx,ebx
c0009f23:	7e 2f                	jle    c0009f54 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f25:	c1 e3 0c             	shl    ebx,0xc
c0009f28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f2c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f30:	01 d3                	add    ebx,edx
c0009f32:	55                   	push   ebp
c0009f33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f3b:	29 c2                	sub    edx,eax
c0009f3d:	01 f2                	add    edx,esi
c0009f3f:	52                   	push   edx
c0009f40:	56                   	push   esi
c0009f41:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f47:	57                   	push   edi
c0009f48:	e8 c7 fd ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	39 de                	cmp    esi,ebx
c0009f52:	75 de                	jne    c0009f32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f54:	0f 20 d8             	mov    eax,cr3
c0009f57:	0f 22 d8             	mov    cr3,eax
c0009f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5e:	83 c4 0c             	add    esp,0xc
c0009f61:	5b                   	pop    ebx
c0009f62:	5e                   	pop    esi
c0009f63:	5f                   	pop    edi
c0009f64:	5d                   	pop    ebp
c0009f65:	c3                   	ret    

c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f66:	55                   	push   ebp
c0009f67:	57                   	push   edi
c0009f68:	56                   	push   esi
c0009f69:	53                   	push   ebx
c0009f6a:	83 ec 1c             	sub    esp,0x1c
c0009f6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f75:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f79:	09 f8                	or     eax,edi
c0009f7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4f                	jne    c0009fd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f8a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f8d:	c1 eb 16             	shr    ebx,0x16
c0009f90:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009f97:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009f9b:	74 52                	je     c0009fef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009f9d:	0f b6 f2             	movzx  esi,dl
c0009fa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fa4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fa8:	c1 e8 0a             	shr    eax,0xa
c0009fab:	83 fe 01             	cmp    esi,0x1
c0009fae:	19 d2                	sbb    edx,edx
c0009fb0:	c1 e3 0c             	shl    ebx,0xc
c0009fb3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fb9:	25 fc 0f 00 00       	and    eax,0xffc
c0009fbe:	01 d8                	add    eax,ebx
c0009fc0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fc4:	09 d9                	or     ecx,ebx
c0009fc6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fcd:	83 c4 1c             	add    esp,0x1c
c0009fd0:	5b                   	pop    ebx
c0009fd1:	5e                   	pop    esi
c0009fd2:	5f                   	pop    edi
c0009fd3:	5d                   	pop    ebp
c0009fd4:	c3                   	ret    
c0009fd5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fd9:	83 ec 0c             	sub    esp,0xc
c0009fdc:	68 10 03 02 c0       	push   0xc0020310
c0009fe1:	e8 d3 6b 00 00       	call   c0010bb9 <KePanic(char const*)>
c0009fe6:	83 c4 10             	add    esp,0x10
c0009fe9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fed:	eb 97                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009fef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ff3:	e8 ba dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	89 c5                	mov    ebp,eax
c0009ffd:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a003:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a007:	6a 01                	push   0x1
c000a009:	e8 f3 f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a00e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a015:	6a 01                	push   0x1
c000a017:	50                   	push   eax
c000a018:	55                   	push   ebp
c000a019:	81 cd 07 04 00 00    	or     ebp,0x407
c000a01f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a023:	51                   	push   ecx
c000a024:	e8 e5 fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a029:	83 c4 1c             	add    esp,0x1c
c000a02c:	68 00 10 00 00       	push   0x1000
c000a031:	6a 00                	push   0x0
c000a033:	50                   	push   eax
c000a034:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a038:	e8 b3 64 ff ff       	call   c00004f0 <memset>
c000a03d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a041:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a044:	e8 d6 f8 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a049:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a04c:	83 c4 10             	add    esp,0x10
c000a04f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a056:	e9 42 ff ff ff       	jmp    c0009f9d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a05b:	90                   	nop

c000a05c <VAS::VAS(bool)>:
c000a05c:	53                   	push   ebx
c000a05d:	83 ec 28             	sub    esp,0x28
c000a060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a064:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a077:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a082:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a086:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a089:	e8 24 dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a08e:	89 c2                	mov    edx,eax
c000a090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a094:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a097:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a09d:	83 ec 0c             	sub    esp,0xc
c000a0a0:	6a 01                	push   0x1
c000a0a2:	e8 5a f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 c2                	mov    edx,eax
c000a0ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0b3:	83 ec 0c             	sub    esp,0xc
c000a0b6:	6a 03                	push   0x3
c000a0b8:	6a 01                	push   0x1
c000a0ba:	52                   	push   edx
c000a0bb:	50                   	push   eax
c000a0bc:	53                   	push   ebx
c000a0bd:	e8 4c fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0c2:	83 c4 20             	add    esp,0x20
c000a0c5:	89 c2                	mov    edx,eax
c000a0c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0ce:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0d6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0de:	7f 1d                	jg     c000a0fd <VAS::VAS(bool)+0xa1>
c000a0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0eb:	c1 e2 02             	shl    edx,0x2
c000a0ee:	01 d0                	add    eax,edx
c000a0f0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0f6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0fb:	eb d9                	jmp    c000a0d6 <VAS::VAS(bool)+0x7a>
c000a0fd:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a105:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a10d:	7f 7e                	jg     c000a18d <VAS::VAS(bool)+0x131>
c000a10f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a113:	2d 00 02 00 00       	sub    eax,0x200
c000a118:	c1 e0 0c             	shl    eax,0xc
c000a11b:	83 c8 05             	or     eax,0x5
c000a11e:	89 c2                	mov    edx,eax
c000a120:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a125:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a12b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a131:	83 e0 10             	and    eax,0x10
c000a134:	0f b6 c0             	movzx  eax,al
c000a137:	85 c0                	test   eax,eax
c000a139:	74 07                	je     c000a142 <VAS::VAS(bool)+0xe6>
c000a13b:	b8 00 01 00 00       	mov    eax,0x100
c000a140:	eb 05                	jmp    c000a147 <VAS::VAS(bool)+0xeb>
c000a142:	b8 00 00 00 00       	mov    eax,0x0
c000a147:	09 d0                	or     eax,edx
c000a149:	89 c1                	mov    ecx,eax
c000a14b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a156:	c1 e2 02             	shl    edx,0x2
c000a159:	01 d0                	add    eax,edx
c000a15b:	89 ca                	mov    edx,ecx
c000a15d:	89 10                	mov    DWORD PTR [eax],edx
c000a15f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a163:	2d 40 03 00 00       	sub    eax,0x340
c000a168:	83 f8 7f             	cmp    eax,0x7f
c000a16b:	77 16                	ja     c000a183 <VAS::VAS(bool)+0x127>
c000a16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a171:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a178:	c1 e2 02             	shl    edx,0x2
c000a17b:	01 d0                	add    eax,edx
c000a17d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a183:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a188:	e9 78 ff ff ff       	jmp    c000a105 <VAS::VAS(bool)+0xa9>
c000a18d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a198:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a19e:	83 e0 10             	and    eax,0x10
c000a1a1:	0f b6 c0             	movzx  eax,al
c000a1a4:	85 c0                	test   eax,eax
c000a1a6:	74 07                	je     c000a1af <VAS::VAS(bool)+0x153>
c000a1a8:	b8 03 41 00 00       	mov    eax,0x4103
c000a1ad:	eb 05                	jmp    c000a1b4 <VAS::VAS(bool)+0x158>
c000a1af:	b8 03 40 00 00       	mov    eax,0x4003
c000a1b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1b8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1bb:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1c1:	89 02                	mov    DWORD PTR [edx],eax
c000a1c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1ca:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1db:	83 e0 10             	and    eax,0x10
c000a1de:	0f b6 c0             	movzx  eax,al
c000a1e1:	85 c0                	test   eax,eax
c000a1e3:	74 07                	je     c000a1ec <VAS::VAS(bool)+0x190>
c000a1e5:	b8 00 01 00 00       	mov    eax,0x100
c000a1ea:	eb 05                	jmp    c000a1f1 <VAS::VAS(bool)+0x195>
c000a1ec:	b8 00 00 00 00       	mov    eax,0x0
c000a1f1:	09 c2                	or     edx,eax
c000a1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1fa:	05 fc 0f 00 00       	add    eax,0xffc
c000a1ff:	83 ca 03             	or     edx,0x3
c000a202:	89 10                	mov    DWORD PTR [eax],edx
c000a204:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a209:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a20f:	83 ec 0c             	sub    esp,0xc
c000a212:	50                   	push   eax
c000a213:	e8 be 20 00 00       	call   c000c2d6 <Device::getName()>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	83 ec 08             	sub    esp,0x8
c000a21e:	68 e0 04 02 c0       	push   0xc00204e0
c000a223:	50                   	push   eax
c000a224:	e8 27 65 ff ff       	call   c0000750 <strcmp>
c000a229:	83 c4 10             	add    esp,0x10
c000a22c:	85 c0                	test   eax,eax
c000a22e:	0f 94 c0             	sete   al
c000a231:	0f b6 c0             	movzx  eax,al
c000a234:	85 c0                	test   eax,eax
c000a236:	74 68                	je     c000a2a0 <VAS::VAS(bool)+0x244>
c000a238:	fa                   	cli    
c000a239:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a23e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a244:	05 7c 09 00 00       	add    eax,0x97c
c000a249:	83 ec 0c             	sub    esp,0xc
c000a24c:	50                   	push   eax
c000a24d:	e8 54 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a252:	83 c4 10             	add    esp,0x10
c000a255:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a25a:	89 c3                	mov    ebx,eax
c000a25c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a267:	05 7c 09 00 00       	add    eax,0x97c
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	50                   	push   eax
c000a270:	e8 31 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	50                   	push   eax
c000a27c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a280:	e8 7b f6 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	8b 00                	mov    eax,DWORD PTR [eax]
c000a28a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a28f:	6a 11                	push   0x11
c000a291:	53                   	push   ebx
c000a292:	50                   	push   eax
c000a293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a297:	e8 78 fa ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a29c:	83 c4 10             	add    esp,0x10
c000a29f:	fb                   	sti    
c000a2a0:	90                   	nop
c000a2a1:	83 c4 28             	add    esp,0x28
c000a2a4:	5b                   	pop    ebx
c000a2a5:	c3                   	ret    

c000a2a6 <VAS::evict(unsigned long)>:
c000a2a6:	55                   	push   ebp
c000a2a7:	57                   	push   edi
c000a2a8:	56                   	push   esi
c000a2a9:	53                   	push   ebx
c000a2aa:	83 ec 1c             	sub    esp,0x1c
c000a2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b9:	e8 a1 f4 ff ff       	call   c000975f <Virt::allocateSwapfilePage()>
c000a2be:	89 c7                	mov    edi,eax
c000a2c0:	a1 cc 26 02 c0       	mov    eax,ds:0xc00226cc
c000a2c5:	85 c0                	test   eax,eax
c000a2c7:	7e 40                	jle    c000a309 <VAS::evict(unsigned long)+0x63>
c000a2c9:	89 ee                	mov    esi,ebp
c000a2cb:	31 db                	xor    ebx,ebx
c000a2cd:	83 ec 0c             	sub    esp,0xc
c000a2d0:	57                   	push   edi
c000a2d1:	e8 73 f4 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a2d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d9:	01 d8                	add    eax,ebx
c000a2db:	6a 01                	push   0x1
c000a2dd:	31 d2                	xor    edx,edx
c000a2df:	83 c3 01             	add    ebx,0x1
c000a2e2:	52                   	push   edx
c000a2e3:	81 c6 00 02 00 00    	add    esi,0x200
c000a2e9:	50                   	push   eax
c000a2ea:	0f be 05 d8 26 02 c0 	movsx  eax,BYTE PTR ds:0xc00226d8
c000a2f1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a2f8:	50                   	push   eax
c000a2f9:	e8 92 31 00 00       	call   c000d490 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2fe:	83 c4 20             	add    esp,0x20
c000a301:	39 1d cc 26 02 c0    	cmp    DWORD PTR ds:0xc00226cc,ebx
c000a307:	7f c4                	jg     c000a2cd <VAS::evict(unsigned long)+0x27>
c000a309:	83 ec 08             	sub    esp,0x8
c000a30c:	c1 e7 0c             	shl    edi,0xc
c000a30f:	55                   	push   ebp
c000a310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a314:	50                   	push   eax
c000a315:	e8 e6 f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a31a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a31c:	89 d3                	mov    ebx,edx
c000a31e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a324:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a32a:	09 d7                	or     edi,edx
c000a32c:	89 38                	mov    DWORD PTR [eax],edi
c000a32e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a331:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a337:	83 c2 01             	add    edx,0x1
c000a33a:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a340:	e8 04 da ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c000a345:	0f 20 d8             	mov    eax,cr3
c000a348:	0f 22 d8             	mov    cr3,eax
c000a34b:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a351:	51                   	push   ecx
c000a352:	55                   	push   ebp
c000a353:	53                   	push   ebx
c000a354:	68 34 03 02 c0       	push   0xc0020334
c000a359:	e8 db 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a35e:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a363:	c7 44 24 50 ee 04 02 c0 	mov    DWORD PTR [esp+0x50],0xc00204ee
c000a36b:	8d 50 01             	lea    edx,[eax+0x1]
c000a36e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a372:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a378:	83 c4 3c             	add    esp,0x3c
c000a37b:	5b                   	pop    ebx
c000a37c:	5e                   	pop    esi
c000a37d:	5f                   	pop    edi
c000a37e:	5d                   	pop    ebp
c000a37f:	e9 b5 05 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a384:	55                   	push   ebp
c000a385:	57                   	push   edi
c000a386:	56                   	push   esi
c000a387:	53                   	push   ebx
c000a388:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a38e:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a395:	89 f3                	mov    ebx,esi
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3a3:	77 22                	ja     c000a3c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3a5:	83 ec 08             	sub    esp,0x8
c000a3a8:	56                   	push   esi
c000a3a9:	68 11 05 02 c0       	push   0xc0020511
c000a3ae:	e8 86 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 db                	test   ebx,ebx
c000a3b8:	75 2a                	jne    c000a3e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3ba:	31 c0                	xor    eax,eax
c000a3bc:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3c2:	5b                   	pop    ebx
c000a3c3:	5e                   	pop    esi
c000a3c4:	5f                   	pop    edi
c000a3c5:	5d                   	pop    ebp
c000a3c6:	c3                   	ret    
c000a3c7:	83 ec 0c             	sub    esp,0xc
c000a3ca:	68 ff 04 02 c0       	push   0xc00204ff
c000a3cf:	e8 e5 67 00 00       	call   c0010bb9 <KePanic(char const*)>
c000a3d4:	5f                   	pop    edi
c000a3d5:	5d                   	pop    ebp
c000a3d6:	56                   	push   esi
c000a3d7:	68 11 05 02 c0       	push   0xc0020511
c000a3dc:	e8 58 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3e1:	83 c4 10             	add    esp,0x10
c000a3e4:	83 ec 08             	sub    esp,0x8
c000a3e7:	53                   	push   ebx
c000a3e8:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3ef:	51                   	push   ecx
c000a3f0:	e8 0b f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a3f5:	83 c4 10             	add    esp,0x10
c000a3f8:	89 c2                	mov    edx,eax
c000a3fa:	85 c0                	test   eax,eax
c000a3fc:	74 bc                	je     c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a3fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a400:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a406:	0f 85 c0 00 00 00    	jne    c000a4cc <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a40c:	89 e8                	mov    eax,ebp
c000a40e:	25 01 04 00 00       	and    eax,0x401
c000a413:	3d 00 04 00 00       	cmp    eax,0x400
c000a418:	75 a0                	jne    c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a41a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a41e:	c1 ed 0c             	shr    ebp,0xc
c000a421:	e8 8c d9 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a426:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a42a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a42c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a432:	09 c1                	or     ecx,eax
c000a434:	81 c9 01 08 00 00    	or     ecx,0x801
c000a43a:	89 0a                	mov    DWORD PTR [edx],ecx
c000a43c:	8b 15 cc 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226cc
c000a442:	85 d2                	test   edx,edx
c000a444:	7e 40                	jle    c000a486 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a446:	89 df                	mov    edi,ebx
c000a448:	31 f6                	xor    esi,esi
c000a44a:	83 ec 0c             	sub    esp,0xc
c000a44d:	55                   	push   ebp
c000a44e:	e8 f6 f2 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a453:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a456:	01 f0                	add    eax,esi
c000a458:	6a 01                	push   0x1
c000a45a:	31 d2                	xor    edx,edx
c000a45c:	83 c6 01             	add    esi,0x1
c000a45f:	52                   	push   edx
c000a460:	81 c7 00 02 00 00    	add    edi,0x200
c000a466:	50                   	push   eax
c000a467:	0f be 05 d8 26 02 c0 	movsx  eax,BYTE PTR ds:0xc00226d8
c000a46e:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a475:	50                   	push   eax
c000a476:	e8 a9 2f 00 00       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c000a47b:	83 c4 20             	add    esp,0x20
c000a47e:	39 35 cc 26 02 c0    	cmp    DWORD PTR ds:0xc00226cc,esi
c000a484:	7f c4                	jg     c000a44a <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a486:	83 ec 04             	sub    esp,0x4
c000a489:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a48e:	83 e8 01             	sub    eax,0x1
c000a491:	50                   	push   eax
c000a492:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a497:	53                   	push   ebx
c000a498:	68 24 05 02 c0       	push   0xc0020524
c000a49d:	e8 97 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4a5:	e8 7c f2 ff ff       	call   c0009726 <Virt::freeSwapfilePage(unsigned long)>
c000a4aa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	83 e8 01             	sub    eax,0x1
c000a4b5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a4ba:	85 c0                	test   eax,eax
c000a4bc:	75 01                	jne    c000a4bf <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4be:	fb                   	sti    
c000a4bf:	0f 20 d8             	mov    eax,cr3
c000a4c2:	0f 22 d8             	mov    cr3,eax
c000a4c5:	b0 01                	mov    al,0x1
c000a4c7:	e9 f0 fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4d0:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4d5:	83 ec 0c             	sub    esp,0xc
c000a4d8:	89 de                	mov    esi,ebx
c000a4da:	68 64 03 02 c0       	push   0xc0020364
c000a4df:	e8 55 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4e4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4e8:	e8 c5 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a4ed:	89 e9                	mov    ecx,ebp
c000a4ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4f5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a4f7:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a4fd:	09 c8                	or     eax,ecx
c000a4ff:	83 c8 02             	or     eax,0x2
c000a502:	89 02                	mov    DWORD PTR [edx],eax
c000a504:	0f 20 d8             	mov    eax,cr3
c000a507:	0f 22 d8             	mov    cr3,eax
c000a50a:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a50e:	89 df                	mov    edi,ebx
c000a510:	89 e9                	mov    ecx,ebp
c000a512:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a514:	b0 01                	mov    al,0x1
c000a516:	83 c4 10             	add    esp,0x10
c000a519:	e9 9e fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a529:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a52d:	50                   	push   eax
c000a52e:	e8 ce f0 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	89 c5                	mov    ebp,eax
c000a538:	6a 07                	push   0x7
c000a53a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53e:	52                   	push   edx
c000a53f:	56                   	push   esi
c000a540:	e8 d3 f8 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	89 c7                	mov    edi,eax
c000a54a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 db                	xor    ebx,ebx
c000a554:	e8 59 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a559:	83 c3 01             	add    ebx,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	56                   	push   esi
c000a565:	e8 aa f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	56                   	push   esi
c000a573:	e8 9c f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 84 03 02 c0       	push   0xc0020384
c000a59f:	e8 95 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 e4 03 02 c0 	mov    DWORD PTR [esp],0xc00203e4
c000a5ab:	e8 89 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 62 f3 ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	89 da                	mov    edx,ebx
c000a5d7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 16 f3 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ed:	59                   	pop    ecx
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	83 c6 01             	add    esi,0x1
c000a616:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	89 da                	mov    edx,ebx
c000a62e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	83 ec 08             	sub    esp,0x8
c000a660:	89 d0                	mov    eax,edx
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 39 05 02 c0       	push   0xc0020539
c000a671:	e8 c3 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a676:	58                   	pop    eax
c000a677:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 24 fc ff ff       	call   c000a2a6 <VAS::evict(unsigned long)>
c000a682:	5b                   	pop    ebx
c000a683:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 4d 05 02 c0       	push   0xc002054d
c000a68d:	e8 a7 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 60 05 02 c0       	push   0xc0020560
c000a6a2:	e8 92 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6b7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6df:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e4:	c1 e5 15             	shl    ebp,0x15
c000a6e7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6ec:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 b7 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 fb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 85 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 bb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 30 02 c0       	push   0xc0023000
c000a775:	56                   	push   esi
c000a776:	e8 1f f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 30 02 c0       	push   0xc0023000
c000a78d:	50                   	push   eax
c000a78e:	e8 07 f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 6d 05 02 c0       	push   0xc002056d
c000a7ac:	e8 88 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 86 05 02 c0       	push   0xc0020586
c000a7ce:	e8 66 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 86 05 02 c0       	push   0xc0020586
c000a7e0:	e8 54 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 8e 05 02 c0 	mov    DWORD PTR [esp],0xc002058e
c000a7ec:	e8 c8 63 00 00       	call   c0010bb9 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 a6 05 02 c0       	push   0xc00205a6
c000a7fe:	e8 b6 63 00 00       	call   c0010bb9 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 a2 d2 ff ff       	jmp    c0007aae <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 bd d2 ff ff       	jmp    c0007ace <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 b8 d2 ff ff       	jmp    c0007ace <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 b3 d2 ff ff       	jmp    c0007ace <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	be af 00 02 c0       	mov    esi,0xc00200af
c000a823:	53                   	push   ebx
c000a824:	83 ec 20             	sub    esp,0x20
c000a827:	a0 ae 00 02 c0       	mov    al,ds:0xc00200ae
c000a82c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a830:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a834:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a838:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a83c:	b8 10 00 00 00       	mov    eax,0x10
c000a841:	f7 c7 02 00 00 00    	test   edi,0x2
c000a847:	75 60                	jne    c000a8a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a849:	89 c1                	mov    ecx,eax
c000a84b:	c1 e9 02             	shr    ecx,0x2
c000a84e:	fc                   	cld    
c000a84f:	31 d2                	xor    edx,edx
c000a851:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a853:	a8 02                	test   al,0x2
c000a855:	74 0b                	je     c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a857:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a85a:	66 89 17             	mov    WORD PTR [edi],dx
c000a85d:	ba 02 00 00 00       	mov    edx,0x2
c000a862:	a8 01                	test   al,0x1
c000a864:	74 06                	je     c000a86c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a866:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a869:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a86c:	89 ee                	mov    esi,ebp
c000a86e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a872:	eb 02                	jmp    c000a876 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a874:	89 c6                	mov    esi,eax
c000a876:	31 d2                	xor    edx,edx
c000a878:	83 c1 01             	add    ecx,0x1
c000a87b:	89 f0                	mov    eax,esi
c000a87d:	f7 f3                	div    ebx
c000a87f:	39 de                	cmp    esi,ebx
c000a881:	73 f1                	jae    c000a874 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a883:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a886:	eb 02                	jmp    c000a88a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a888:	89 c5                	mov    ebp,eax
c000a88a:	31 d2                	xor    edx,edx
c000a88c:	83 e9 01             	sub    ecx,0x1
c000a88f:	89 e8                	mov    eax,ebp
c000a891:	f7 f3                	div    ebx
c000a893:	39 dd                	cmp    ebp,ebx
c000a895:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a899:	88 11                	mov    BYTE PTR [ecx],dl
c000a89b:	73 eb                	jae    c000a888 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a89d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8a1:	83 c4 20             	add    esp,0x20
c000a8a4:	5b                   	pop    ebx
c000a8a5:	5e                   	pop    esi
c000a8a6:	5f                   	pop    edi
c000a8a7:	5d                   	pop    ebp
c000a8a8:	c3                   	ret    
c000a8a9:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8ac:	83 c7 02             	add    edi,0x2
c000a8af:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8b3:	83 c6 02             	add    esi,0x2
c000a8b6:	83 e8 02             	sub    eax,0x2
c000a8b9:	eb 8e                	jmp    c000a849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8bb <Dbg::logc(char)>:
c000a8bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8bf:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8c6:	75 12                	jne    c000a8da <Dbg::logc(char)+0x1f>
c000a8c8:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8cd:	ec                   	in     al,dx
c000a8ce:	a8 20                	test   al,0x20
c000a8d0:	74 fb                	je     c000a8cd <Dbg::logc(char)+0x12>
c000a8d2:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8d7:	88 c8                	mov    al,cl
c000a8d9:	ee                   	out    dx,al
c000a8da:	c3                   	ret    

c000a8db <Dbg::logs(char*)>:
c000a8db:	53                   	push   ebx
c000a8dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e3:	85 c0                	test   eax,eax
c000a8e5:	74 11                	je     c000a8f8 <Dbg::logs(char*)+0x1d>
c000a8e7:	83 c3 01             	add    ebx,0x1
c000a8ea:	50                   	push   eax
c000a8eb:	e8 cb ff ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a8f0:	58                   	pop    eax
c000a8f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f4:	85 c0                	test   eax,eax
c000a8f6:	75 ef                	jne    c000a8e7 <Dbg::logs(char*)+0xc>
c000a8f8:	5b                   	pop    ebx
c000a8f9:	c3                   	ret    

c000a8fa <Dbg::logWriteInt(unsigned int)>:
c000a8fa:	83 ec 10             	sub    esp,0x10
c000a8fd:	6a 0a                	push   0xa
c000a8ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a903:	50                   	push   eax
c000a904:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a908:	50                   	push   eax
c000a909:	e8 0d ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a90e:	50                   	push   eax
c000a90f:	e8 c7 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a914:	83 c4 20             	add    esp,0x20
c000a917:	c3                   	ret    

c000a918 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a918:	83 ec 10             	sub    esp,0x10
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	50                   	push   eax
c000a920:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a924:	50                   	push   eax
c000a925:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a929:	52                   	push   edx
c000a92a:	e8 ec fe ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a92f:	50                   	push   eax
c000a930:	e8 a6 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a935:	83 c4 20             	add    esp,0x20
c000a938:	c3                   	ret    

c000a939 <Dbg::kprintf(char const*, ...)>:
c000a939:	55                   	push   ebp
c000a93a:	57                   	push   edi
c000a93b:	56                   	push   esi
c000a93c:	53                   	push   ebx
c000a93d:	83 ec 0c             	sub    esp,0xc
c000a940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a944:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a94b:	74 08                	je     c000a955 <Dbg::kprintf(char const*, ...)+0x1c>
c000a94d:	83 c4 0c             	add    esp,0xc
c000a950:	5b                   	pop    ebx
c000a951:	5e                   	pop    esi
c000a952:	5f                   	pop    edi
c000a953:	5d                   	pop    ebp
c000a954:	c3                   	ret    
c000a955:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a959:	31 ff                	xor    edi,edi
c000a95b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a95f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a962:	85 c0                	test   eax,eax
c000a964:	74 e7                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a966:	8d 77 01             	lea    esi,[edi+0x1]
c000a969:	83 f8 25             	cmp    eax,0x25
c000a96c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a96f:	75 47                	jne    c000a9b8 <Dbg::kprintf(char const*, ...)+0x7f>
c000a971:	83 c7 02             	add    edi,0x2
c000a974:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a977:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97a:	83 e8 25             	sub    eax,0x25
c000a97d:	0f b6 c0             	movzx  eax,al
c000a980:	83 f8 53             	cmp    eax,0x53
c000a983:	0f 87 ce 00 00 00    	ja     c000aa57 <Dbg::kprintf(char const*, ...)+0x11e>
c000a989:	ff 24 85 bc 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa44]
c000a990:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a994:	89 c8                	mov    eax,ecx
c000a996:	83 c1 04             	add    ecx,0x4
c000a999:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a99d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a99f:	55                   	push   ebp
c000a9a0:	e8 55 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9a5:	58                   	pop    eax
c000a9a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9a9:	85 c0                	test   eax,eax
c000a9ab:	74 a0                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a9ad:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b0:	83 f8 25             	cmp    eax,0x25
c000a9b3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b6:	74 b9                	je     c000a971 <Dbg::kprintf(char const*, ...)+0x38>
c000a9b8:	50                   	push   eax
c000a9b9:	89 f7                	mov    edi,esi
c000a9bb:	e8 fb fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a9c0:	89 ee                	mov    esi,ebp
c000a9c2:	58                   	pop    eax
c000a9c3:	eb e1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9c9:	89 c8                	mov    eax,ecx
c000a9cb:	83 c1 04             	add    ecx,0x4
c000a9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d4:	50                   	push   eax
c000a9d5:	e8 01 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a9da:	58                   	pop    eax
c000a9db:	eb c9                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e1:	89 d0                	mov    eax,edx
c000a9e3:	83 c2 04             	add    edx,0x4
c000a9e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ec:	50                   	push   eax
c000a9ed:	e8 08 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9f2:	58                   	pop    eax
c000a9f3:	eb b1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f9:	89 d0                	mov    eax,edx
c000a9fb:	83 c2 04             	add    edx,0x4
c000a9fe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa05:	50                   	push   eax
c000aa06:	e8 b0 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa0b:	58                   	pop    eax
c000aa0c:	eb 98                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa12:	89 c8                	mov    eax,ecx
c000aa14:	83 c1 04             	add    ecx,0x4
c000aa17:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1b:	6a 10                	push   0x10
c000aa1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa1f:	51                   	push   ecx
c000aa20:	e8 f3 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa25:	5d                   	pop    ebp
c000aa26:	58                   	pop    eax
c000aa27:	e9 7a ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa30:	89 d0                	mov    eax,edx
c000aa32:	83 c2 08             	add    edx,0x8
c000aa35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa39:	6a 10                	push   0x10
c000aa3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3d:	50                   	push   eax
c000aa3e:	e8 d5 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa43:	58                   	pop    eax
c000aa44:	5a                   	pop    edx
c000aa45:	e9 5c ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4a:	6a 25                	push   0x25
c000aa4c:	e8 6a fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa51:	5a                   	pop    edx
c000aa52:	e9 4f ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa57:	6a 25                	push   0x25
c000aa59:	e8 5d fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa5e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa62:	50                   	push   eax
c000aa63:	e8 53 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa68:	5a                   	pop    edx
c000aa69:	59                   	pop    ecx
c000aa6a:	e9 37 ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6f:	90                   	nop

c000aa70 <KiUbsanPrintDetails(char const*, void*)>:
c000aa70:	83 ec 1c             	sub    esp,0x1c
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7a:	68 0c 07 02 c0       	push   0xc002070c
c000aa7f:	e8 b5 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa93:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 20 07 02 c0       	push   0xc0020720
c000aa9e:	e8 96 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	50                   	push   eax
c000aab1:	68 2a 07 02 c0       	push   0xc002072a
c000aab6:	e8 7e fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 34 07 02 c0       	push   0xc0020734
c000aace:	e8 66 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 1c             	add    esp,0x1c
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <__ubsan_handle_type_mismatch_v1>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aae6:	68 78 08 02 c0       	push   0xc0020878
c000aaeb:	e8 80 ff ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aaf8:	75 16                	jne    c000ab10 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	68 3e 07 02 c0       	push   0xc002073e
c000ab02:	e8 32 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	e9 91 00 00 00       	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab0f:	90                   	nop
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab17:	85 c0                	test   eax,eax
c000ab19:	74 29                	je     c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab22:	83 e8 01             	sub    eax,0x1
c000ab25:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab29:	75 19                	jne    c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	68 98 08 02 c0       	push   0xc0020898
c000ab37:	e8 fd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	eb 5f                	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	68 53 07 02 c0       	push   0xc0020753
c000ab4c:	e8 e8 fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5b:	0f b6 c0             	movzx  eax,al
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	50                   	push   eax
c000ab62:	68 6d 07 02 c0       	push   0xc002076d
c000ab67:	e8 cd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab81:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab84:	0f b6 c0             	movzx  eax,al
c000ab87:	8b 04 85 e0 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd920]
c000ab8e:	51                   	push   ecx
c000ab8f:	52                   	push   edx
c000ab90:	50                   	push   eax
c000ab91:	68 c0 08 02 c0       	push   0xc00208c0
c000ab96:	e8 9e fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	66 90                	xchg   ax,ax
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	68 78 08 02 c0       	push   0xc0020878
c000aba8:	e8 0c 60 00 00       	call   c0010bb9 <KePanic(char const*)>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	8d 76 00             	lea    esi,[esi+0x0]

c000abb8 <__ubsan_handle_pointer_overflow>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 08 09 02 c0       	push   0xc0020908
c000abc7:	e8 a4 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 08 09 02 c0       	push   0xc0020908
c000abd7:	e8 dd 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_out_of_bounds>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 78 07 02 c0       	push   0xc0020778
c000abf3:	e8 78 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 78 07 02 c0       	push   0xc0020778
c000ac03:	e8 b1 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_add_overflow>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 95 07 02 c0       	push   0xc0020795
c000ac1f:	e8 4c fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 95 07 02 c0       	push   0xc0020795
c000ac2f:	e8 85 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_load_invalid_value>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 28 09 02 c0       	push   0xc0020928
c000ac4b:	e8 20 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 28 09 02 c0       	push   0xc0020928
c000ac5b:	e8 59 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_divrem_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 4c 09 02 c0       	push   0xc002094c
c000ac77:	e8 f4 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 4c 09 02 c0       	push   0xc002094c
c000ac87:	e8 2d 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_mul_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 b1 07 02 c0       	push   0xc00207b1
c000aca3:	e8 c8 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 b1 07 02 c0       	push   0xc00207b1
c000acb3:	e8 01 5f 00 00       	call   c0010bb9 <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_sub_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 cd 07 02 c0       	push   0xc00207cd
c000accf:	e8 9c fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 cd 07 02 c0       	push   0xc00207cd
c000acdf:	e8 d5 5e 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_shift_out_of_bounds>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 6c 09 02 c0       	push   0xc002096c
c000acfb:	e8 70 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 6c 09 02 c0       	push   0xc002096c
c000ad0b:	e8 a9 5e 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_negate_overflow>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 90 09 02 c0       	push   0xc0020990
c000ad27:	e8 44 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 90 09 02 c0       	push   0xc0020990
c000ad37:	e8 7d 5e 00 00       	call   c0010bb9 <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <File::read(unsigned long long, void*, int*)>:
c000ad44:	53                   	push   ebx
c000ad45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad4d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad54:	83 f8 19             	cmp    eax,0x19
c000ad57:	77 35                	ja     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad59:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ad60:	85 c0                	test   eax,eax
c000ad62:	74 2a                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad64:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad6a:	85 c0                	test   eax,eax
c000ad6c:	74 20                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad72:	74 21                	je     c000ad95 <File::read(unsigned long long, void*, int*)+0x51>
c000ad74:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad7a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad88:	5b                   	pop    ebx
c000ad89:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad8c:	ff e0                	jmp    eax
c000ad8e:	b8 0b 00 00 00       	mov    eax,0xb
c000ad93:	eb 05                	jmp    c000ad9a <File::read(unsigned long long, void*, int*)+0x56>
c000ad95:	b8 05 00 00 00       	mov    eax,0x5
c000ad9a:	5b                   	pop    ebx
c000ad9b:	c3                   	ret    

c000ad9c <File::write(unsigned long long, void*, int*)>:
c000ad9c:	53                   	push   ebx
c000ad9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ada1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ada5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adac:	83 f8 19             	cmp    eax,0x19
c000adaf:	77 35                	ja     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adb1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000adb8:	85 c0                	test   eax,eax
c000adba:	74 2a                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adbc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adc2:	85 c0                	test   eax,eax
c000adc4:	74 20                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adc6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adca:	74 21                	je     c000aded <File::write(unsigned long long, void*, int*)+0x51>
c000adcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000add2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000add8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000addc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ade0:	5b                   	pop    ebx
c000ade1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ade4:	ff e0                	jmp    eax
c000ade6:	b8 0b 00 00 00       	mov    eax,0xb
c000adeb:	eb 05                	jmp    c000adf2 <File::write(unsigned long long, void*, int*)+0x56>
c000aded:	b8 05 00 00 00       	mov    eax,0x5
c000adf2:	5b                   	pop    ebx
c000adf3:	c3                   	ret    

c000adf4 <Directory::read(unsigned long long, void*, int*)>:
c000adf4:	53                   	push   ebx
c000adf5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adf9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adfd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ae04:	83 f8 19             	cmp    eax,0x19
c000ae07:	77 35                	ja     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae09:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 2a                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae14:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae1a:	85 c0                	test   eax,eax
c000ae1c:	74 20                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae22:	74 21                	je     c000ae45 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ae24:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae26:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae2a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae38:	5b                   	pop    ebx
c000ae39:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae3c:	ff e0                	jmp    eax
c000ae3e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae43:	eb 05                	jmp    c000ae4a <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae45:	b8 05 00 00 00       	mov    eax,0x5
c000ae4a:	5b                   	pop    ebx
c000ae4b:	c3                   	ret    

c000ae4c <Directory::write(unsigned long long, void*, int*)>:
c000ae4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae50:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	83 fa 19             	cmp    edx,0x19
c000ae5f:	77 18                	ja     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae61:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ae68:	85 d2                	test   edx,edx
c000ae6a:	74 0d                	je     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae6c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae73:	19 c0                	sbb    eax,eax
c000ae75:	83 e0 0a             	and    eax,0xa
c000ae78:	40                   	inc    eax
c000ae79:	c3                   	ret    

c000ae7a <File::isAtty()>:
c000ae7a:	31 c0                	xor    eax,eax
c000ae7c:	c3                   	ret    
c000ae7d:	90                   	nop

c000ae7e <Directory::isAtty()>:
c000ae7e:	31 c0                	xor    eax,eax
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae82:	b8 0a 00 00 00       	mov    eax,0xa
c000ae87:	c3                   	ret    

c000ae88 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae88:	b8 0a 00 00 00       	mov    eax,0xa
c000ae8d:	c3                   	ret    

c000ae8e <Filesystem::allocateSwapfile(char const*, int)>:
c000ae8e:	31 c0                	xor    eax,eax
c000ae90:	31 d2                	xor    edx,edx
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <File::~File()>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c000ae9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea0:	89 10                	mov    DWORD PTR [eax],edx
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	50                   	push   eax
c000aeaa:	e8 e9 e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	90                   	nop
c000aeb3:	83 c4 0c             	add    esp,0xc
c000aeb6:	c3                   	ret    
c000aeb7:	90                   	nop

c000aeb8 <File::~File()>:
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	83 ec 0c             	sub    esp,0xc
c000aebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec2:	e8 cd ff ff ff       	call   c000ae94 <File::~File()>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	83 ec 08             	sub    esp,0x8
c000aecd:	68 14 01 00 00       	push   0x114
c000aed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed6:	e8 31 f9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	c3                   	ret    

c000aee2 <Directory::~Directory()>:
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	89 10                	mov    DWORD PTR [eax],edx
c000aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	50                   	push   eax
c000aef8:	e8 9b e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	90                   	nop
c000af01:	83 c4 0c             	add    esp,0xc
c000af04:	c3                   	ret    
c000af05:	90                   	nop

c000af06 <Directory::~Directory()>:
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af10:	e8 cd ff ff ff       	call   c000aee2 <Directory::~Directory()>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	83 ec 08             	sub    esp,0x8
c000af1b:	68 14 01 00 00       	push   0x114
c000af20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af24:	e8 e3 f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	83 c4 0c             	add    esp,0xc
c000af2f:	c3                   	ret    

c000af30 <Filesystem::Filesystem()>:
c000af30:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c000af35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af39:	89 10                	mov    DWORD PTR [eax],edx
c000af3b:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000af41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4c:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000af51:	90                   	nop
c000af52:	c3                   	ret    
c000af53:	90                   	nop

c000af54 <Filesystem::~Filesystem()>:
c000af54:	ba b8 09 02 c0       	mov    edx,0xc00209b8
c000af59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af5d:	89 10                	mov    DWORD PTR [eax],edx
c000af5f:	90                   	nop
c000af60:	c3                   	ret    
c000af61:	90                   	nop

c000af62 <Filesystem::~Filesystem()>:
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af69:	e8 e6 ff ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c000af6e:	83 c4 04             	add    esp,0x4
c000af71:	83 ec 08             	sub    esp,0x8
c000af74:	6a 08                	push   0x8
c000af76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7a:	e8 8d f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	83 c4 0c             	add    esp,0xc
c000af85:	c3                   	ret    

c000af86 <Fs::getcwd(Process*, char*, int)>:
c000af86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af8a:	31 c0                	xor    eax,eax
c000af8c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af8f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af93:	7d 15                	jge    c000afaa <Fs::getcwd(Process*, char*, int)+0x24>
c000af95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af99:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000afa0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000afa3:	84 c9                	test   cl,cl
c000afa5:	74 06                	je     c000afad <Fs::getcwd(Process*, char*, int)+0x27>
c000afa7:	40                   	inc    eax
c000afa8:	eb e2                	jmp    c000af8c <Fs::getcwd(Process*, char*, int)+0x6>
c000afaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000afad:	31 c0                	xor    eax,eax
c000afaf:	c3                   	ret    

c000afb0 <Fs::initVFS()>:
c000afb0:	83 ec 18             	sub    esp,0x18
c000afb3:	6a 08                	push   0x8
c000afb5:	e8 f4 ca ff ff       	call   c0007aae <malloc>
c000afba:	89 04 24             	mov    DWORD PTR [esp],eax
c000afbd:	e8 ba de 00 00       	call   c0018e7c <FAT::FAT()>
c000afc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afc9:	e8 e0 ca ff ff       	call   c0007aae <malloc>
c000afce:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd1:	e8 cc ed 00 00       	call   c0019da2 <ISO9660::ISO9660()>
c000afd6:	83 c4 1c             	add    esp,0x1c
c000afd9:	c3                   	ret    

c000afda <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afda:	55                   	push   ebp
c000afdb:	57                   	push   edi
c000afdc:	56                   	push   esi
c000afdd:	53                   	push   ebx
c000afde:	81 ec 10 04 00 00    	sub    esp,0x410
c000afe4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afeb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aff2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aff9:	68 00 04 00 00       	push   0x400
c000affe:	6a 00                	push   0x0
c000b000:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b004:	56                   	push   esi
c000b005:	e8 e6 54 ff ff       	call   c00004f0 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b011:	75 0b                	jne    c000b01e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b013:	50                   	push   eax
c000b014:	50                   	push   eax
c000b015:	57                   	push   edi
c000b016:	56                   	push   esi
c000b017:	e8 24 56 ff ff       	call   c0000640 <strcpy>
c000b01c:	eb 44                	jmp    c000b062 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b01e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b021:	83 f8 5c             	cmp    eax,0x5c
c000b024:	74 05                	je     c000b02b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b026:	83 f8 2f             	cmp    eax,0x2f
c000b029:	75 18                	jne    c000b043 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b02b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b02e:	3c 60                	cmp    al,0x60
c000b030:	7e 03                	jle    c000b035 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b032:	83 e8 20             	sub    eax,0x20
c000b035:	88 04 24             	mov    BYTE PTR [esp],al
c000b038:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b03f:	50                   	push   eax
c000b040:	50                   	push   eax
c000b041:	eb 18                	jmp    c000b05b <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b043:	50                   	push   eax
c000b044:	50                   	push   eax
c000b045:	55                   	push   ebp
c000b046:	56                   	push   esi
c000b047:	e8 f4 55 ff ff       	call   c0000640 <strcpy>
c000b04c:	5a                   	pop    edx
c000b04d:	59                   	pop    ecx
c000b04e:	68 3f 19 02 c0       	push   0xc002193f
c000b053:	56                   	push   esi
c000b054:	e8 e7 57 ff ff       	call   c0000840 <strcat>
c000b059:	5d                   	pop    ebp
c000b05a:	58                   	pop    eax
c000b05b:	57                   	push   edi
c000b05c:	56                   	push   esi
c000b05d:	e8 de 57 ff ff       	call   c0000840 <strcat>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b068:	3c 60                	cmp    al,0x60
c000b06a:	7e 03                	jle    c000b06f <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b06c:	83 e8 20             	sub    eax,0x20
c000b06f:	88 04 24             	mov    BYTE PTR [esp],al
c000b072:	88 03                	mov    BYTE PTR [ebx],al
c000b074:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b07b:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b081:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b085:	bf 03 00 00 00       	mov    edi,0x3
c000b08a:	b8 03 00 00 00       	mov    eax,0x3
c000b08f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b093:	89 ea                	mov    edx,ebp
c000b095:	85 ed                	test   ebp,ebp
c000b097:	0f 84 97 00 00 00    	je     c000b134 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b09d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b0a0:	83 fd 5c             	cmp    ebp,0x5c
c000b0a3:	74 05                	je     c000b0aa <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b0a5:	83 fd 2f             	cmp    ebp,0x2f
c000b0a8:	75 12                	jne    c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0aa:	89 c5                	mov    ebp,eax
c000b0ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b0b1:	74 09                	je     c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0b3:	40                   	inc    eax
c000b0b4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0b8:	89 cf                	mov    edi,ecx
c000b0ba:	eb d3                	jmp    c000b08f <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b0bc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b0c1:	0f be ea             	movsx  ebp,dl
c000b0c4:	75 5e                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0c6:	83 fd 2e             	cmp    ebp,0x2e
c000b0c9:	75 59                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0cb:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0cf:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b0d4:	74 18                	je     c000b0ee <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b0d6:	83 fd 2e             	cmp    ebp,0x2e
c000b0d9:	74 53                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0db:	89 f9                	mov    ecx,edi
c000b0dd:	41                   	inc    ecx
c000b0de:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0e2:	83 fa 2f             	cmp    edx,0x2f
c000b0e5:	74 f6                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0e7:	83 fa 5c             	cmp    edx,0x5c
c000b0ea:	74 f1                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0ec:	eb ca                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0ee:	83 fd 2e             	cmp    ebp,0x2e
c000b0f1:	74 3b                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0f3:	83 f8 03             	cmp    eax,0x3
c000b0f6:	74 c0                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0f8:	41                   	inc    ecx
c000b0f9:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0fd:	83 fa 2f             	cmp    edx,0x2f
c000b100:	74 f6                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b102:	83 fa 5c             	cmp    edx,0x5c
c000b105:	74 f1                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b107:	48                   	dec    eax
c000b108:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b10c:	75 06                	jne    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b10e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b112:	eb f3                	jmp    c000b107 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b114:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b118:	74 07                	je     c000b121 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b11a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b11e:	48                   	dec    eax
c000b11f:	eb f3                	jmp    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b121:	40                   	inc    eax
c000b122:	eb 94                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b124:	83 fd 2f             	cmp    ebp,0x2f
c000b127:	74 8f                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b129:	83 fd 5c             	cmp    ebp,0x5c
c000b12c:	74 8a                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b12e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b131:	40                   	inc    eax
c000b132:	eb 84                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b134:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b138:	83 ec 0c             	sub    esp,0xc
c000b13b:	53                   	push   ebx
c000b13c:	e8 2f 54 ff ff       	call   c0000570 <strlen>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b149:	75 26                	jne    c000b171 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b14b:	83 ec 0c             	sub    esp,0xc
c000b14e:	53                   	push   ebx
c000b14f:	e8 1c 54 ff ff       	call   c0000570 <strlen>
c000b154:	83 c4 10             	add    esp,0x10
c000b157:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b15c:	74 26                	je     c000b184 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	53                   	push   ebx
c000b162:	e8 09 54 ff ff       	call   c0000570 <strlen>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b16f:	eb c7                	jmp    c000b138 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	53                   	push   ebx
c000b175:	e8 f6 53 ff ff       	call   c0000570 <strlen>
c000b17a:	83 c4 10             	add    esp,0x10
c000b17d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b182:	74 c7                	je     c000b14b <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b184:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b18a:	5b                   	pop    ebx
c000b18b:	5e                   	pop    esi
c000b18c:	5f                   	pop    edi
c000b18d:	5d                   	pop    ebp
c000b18e:	c3                   	ret    
c000b18f:	90                   	nop

c000b190 <File::File(char const*, Process*)>:
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b197:	83 ec 08             	sub    esp,0x8
c000b19a:	6a 00                	push   0x0
c000b19c:	50                   	push   eax
c000b19d:	e8 10 e0 ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	89 10                	mov    DWORD PTR [eax],edx
c000b1b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1be:	83 c0 0d             	add    eax,0xd
c000b1c1:	83 ec 04             	sub    esp,0x4
c000b1c4:	52                   	push   edx
c000b1c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1c9:	50                   	push   eax
c000b1ca:	e8 0b fe ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1d9:	83 e8 41             	sub    eax,0x41
c000b1dc:	88 c2                	mov    dl,al
c000b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1fa:	0f b6 c0             	movzx  eax,al
c000b1fd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b204:	85 c0                	test   eax,eax
c000b206:	74 3e                	je     c000b246 <File::File(char const*, Process*)+0xb6>
c000b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b212:	0f b6 c0             	movzx  eax,al
c000b215:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b21c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b222:	85 c0                	test   eax,eax
c000b224:	75 20                	jne    c000b246 <File::File(char const*, Process*)+0xb6>
c000b226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b230:	0f b6 c0             	movzx  eax,al
c000b233:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	50                   	push   eax
c000b23e:	e8 1f 21 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	90                   	nop
c000b247:	83 c4 0c             	add    esp,0xc
c000b24a:	c3                   	ret    
c000b24b:	90                   	nop

c000b24c <File::open(FileOpenMode)>:
c000b24c:	53                   	push   ebx
c000b24d:	b8 0b 00 00 00       	mov    eax,0xb
c000b252:	83 ec 08             	sub    esp,0x8
c000b255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b259:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b260:	83 fa 19             	cmp    edx,0x19
c000b263:	77 40                	ja     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b265:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b26c:	85 d2                	test   edx,edx
c000b26e:	74 35                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b270:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b276:	85 d2                	test   edx,edx
c000b278:	74 2b                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b27a:	b8 06 00 00 00       	mov    eax,0x6
c000b27f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b283:	75 20                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b285:	8b 02                	mov    eax,DWORD PTR [edx]
c000b287:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b291:	51                   	push   ecx
c000b292:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b295:	51                   	push   ecx
c000b296:	52                   	push   edx
c000b297:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	85 c0                	test   eax,eax
c000b29f:	75 04                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b2a1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2a5:	83 c4 08             	add    esp,0x8
c000b2a8:	5b                   	pop    ebx
c000b2a9:	c3                   	ret    

c000b2aa <File::close()>:
c000b2aa:	53                   	push   ebx
c000b2ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2be:	83 f9 19             	cmp    ecx,0x19
c000b2c1:	77 41                	ja     c000b304 <File::close()+0x5a>
c000b2c3:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2ca:	85 db                	test   ebx,ebx
c000b2cc:	74 36                	je     c000b304 <File::close()+0x5a>
c000b2ce:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2d5:	74 2d                	je     c000b304 <File::close()+0x5a>
c000b2d7:	b8 05 00 00 00       	mov    eax,0x5
c000b2dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e0:	74 22                	je     c000b304 <File::close()+0x5a>
c000b2e2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b2e6:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2ed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f3:	53                   	push   ebx
c000b2f4:	53                   	push   ebx
c000b2f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2fd:	50                   	push   eax
c000b2fe:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	83 c4 08             	add    esp,0x8
c000b307:	5b                   	pop    ebx
c000b308:	c3                   	ret    
c000b309:	90                   	nop

c000b30a <File::seek(unsigned long long)>:
c000b30a:	56                   	push   esi
c000b30b:	53                   	push   ebx
c000b30c:	b8 0b 00 00 00       	mov    eax,0xb
c000b311:	51                   	push   ecx
c000b312:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b316:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b31a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b325:	83 fa 19             	cmp    edx,0x19
c000b328:	77 31                	ja     c000b35b <File::seek(unsigned long long)+0x51>
c000b32a:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b331:	85 d2                	test   edx,edx
c000b333:	74 26                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b33b:	85 d2                	test   edx,edx
c000b33d:	74 1c                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b33f:	b8 05 00 00 00       	mov    eax,0x5
c000b344:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b348:	74 11                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b34a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b34c:	53                   	push   ebx
c000b34d:	51                   	push   ecx
c000b34e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b354:	52                   	push   edx
c000b355:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	5a                   	pop    edx
c000b35c:	5b                   	pop    ebx
c000b35d:	5e                   	pop    esi
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <File::tell(unsigned long long*)>:
c000b360:	83 ec 0c             	sub    esp,0xc
c000b363:	b8 0b 00 00 00       	mov    eax,0xb
c000b368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b36c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b373:	83 fa 19             	cmp    edx,0x19
c000b376:	77 34                	ja     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b378:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b37f:	85 d2                	test   edx,edx
c000b381:	74 29                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b383:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b389:	85 d2                	test   edx,edx
c000b38b:	74 1f                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b38d:	b8 05 00 00 00       	mov    eax,0x5
c000b392:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b396:	74 14                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b398:	50                   	push   eax
c000b399:	8b 02                	mov    eax,DWORD PTR [edx]
c000b39b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b39f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3a5:	52                   	push   edx
c000b3a6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	83 c4 0c             	add    esp,0xc
c000b3af:	c3                   	ret    

c000b3b0 <File::rewind()>:
c000b3b0:	83 ec 10             	sub    esp,0x10
c000b3b3:	6a 00                	push   0x0
c000b3b5:	6a 00                	push   0x0
c000b3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3bb:	e8 4a ff ff ff       	call   c000b30a <File::seek(unsigned long long)>
c000b3c0:	83 c4 1c             	add    esp,0x1c
c000b3c3:	c3                   	ret    

c000b3c4 <File::unlink()>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b3cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3d7:	83 f9 19             	cmp    ecx,0x19
c000b3da:	77 2f                	ja     c000b40b <File::unlink()+0x47>
c000b3dc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b3e3:	85 c9                	test   ecx,ecx
c000b3e5:	74 24                	je     c000b40b <File::unlink()+0x47>
c000b3e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3ed:	85 c9                	test   ecx,ecx
c000b3ef:	74 1a                	je     c000b40b <File::unlink()+0x47>
c000b3f1:	b8 06 00 00 00       	mov    eax,0x6
c000b3f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3fa:	75 0f                	jne    c000b40b <File::unlink()+0x47>
c000b3fc:	83 c2 0d             	add    edx,0xd
c000b3ff:	50                   	push   eax
c000b400:	50                   	push   eax
c000b401:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b403:	52                   	push   edx
c000b404:	51                   	push   ecx
c000b405:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <File::rename(char const*)>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	b8 0b 00 00 00       	mov    eax,0xb
c000b418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b41c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b423:	83 f9 19             	cmp    ecx,0x19
c000b426:	77 32                	ja     c000b45a <File::rename(char const*)+0x4a>
c000b428:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b42f:	85 c9                	test   ecx,ecx
c000b431:	74 27                	je     c000b45a <File::rename(char const*)+0x4a>
c000b433:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b439:	85 c9                	test   ecx,ecx
c000b43b:	74 1d                	je     c000b45a <File::rename(char const*)+0x4a>
c000b43d:	b8 06 00 00 00       	mov    eax,0x6
c000b442:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b446:	75 12                	jne    c000b45a <File::rename(char const*)+0x4a>
c000b448:	83 c2 0d             	add    edx,0xd
c000b44b:	50                   	push   eax
c000b44c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b452:	52                   	push   edx
c000b453:	51                   	push   ecx
c000b454:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <File::chfatattr(unsigned char, unsigned char)>:
c000b45e:	57                   	push   edi
c000b45f:	b8 0b 00 00 00       	mov    eax,0xb
c000b464:	56                   	push   esi
c000b465:	53                   	push   ebx
c000b466:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b46a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b46e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b475:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b479:	83 f9 19             	cmp    ecx,0x19
c000b47c:	77 37                	ja     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b47e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b485:	85 c9                	test   ecx,ecx
c000b487:	74 2c                	je     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b489:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b48f:	85 c9                	test   ecx,ecx
c000b491:	74 22                	je     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b493:	b8 06 00 00 00       	mov    eax,0x6
c000b498:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b49c:	75 17                	jne    c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b49e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4a0:	89 f0                	mov    eax,esi
c000b4a2:	83 c2 0d             	add    edx,0xd
c000b4a5:	0f b6 f0             	movzx  esi,al
c000b4a8:	0f b6 db             	movzx  ebx,bl
c000b4ab:	56                   	push   esi
c000b4ac:	53                   	push   ebx
c000b4ad:	52                   	push   edx
c000b4ae:	51                   	push   ecx
c000b4af:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	5b                   	pop    ebx
c000b4b6:	5e                   	pop    esi
c000b4b7:	5f                   	pop    edi
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <File::exists()>:
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	31 c0                	xor    eax,eax
c000b4bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4ca:	83 f9 19             	cmp    ecx,0x19
c000b4cd:	77 24                	ja     c000b4f3 <File::exists()+0x39>
c000b4cf:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b4d6:	85 c9                	test   ecx,ecx
c000b4d8:	74 19                	je     c000b4f3 <File::exists()+0x39>
c000b4da:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4e0:	85 c9                	test   ecx,ecx
c000b4e2:	74 0f                	je     c000b4f3 <File::exists()+0x39>
c000b4e4:	83 c2 0d             	add    edx,0xd
c000b4e7:	50                   	push   eax
c000b4e8:	50                   	push   eax
c000b4e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4eb:	52                   	push   edx
c000b4ec:	51                   	push   ecx
c000b4ed:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4f0:	83 c4 10             	add    esp,0x10
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    
c000b4f7:	90                   	nop

c000b4f8 <File::stat(unsigned long long*, bool*)>:
c000b4f8:	56                   	push   esi
c000b4f9:	53                   	push   ebx
c000b4fa:	50                   	push   eax
c000b4fb:	b8 0b 00 00 00       	mov    eax,0xb
c000b500:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b504:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b508:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b50f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b513:	83 f9 19             	cmp    ecx,0x19
c000b516:	77 3d                	ja     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b518:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b51f:	85 c9                	test   ecx,ecx
c000b521:	74 32                	je     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b523:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b529:	85 c9                	test   ecx,ecx
c000b52b:	74 28                	je     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b52d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b52f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b533:	74 13                	je     c000b548 <File::stat(unsigned long long*, bool*)+0x50>
c000b535:	83 ec 04             	sub    esp,0x4
c000b538:	56                   	push   esi
c000b539:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b53f:	51                   	push   ecx
c000b540:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b543:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b546:	eb 0a                	jmp    c000b552 <File::stat(unsigned long long*, bool*)+0x5a>
c000b548:	53                   	push   ebx
c000b549:	83 c2 0d             	add    edx,0xd
c000b54c:	56                   	push   esi
c000b54d:	52                   	push   edx
c000b54e:	51                   	push   ecx
c000b54f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	5a                   	pop    edx
c000b556:	5b                   	pop    ebx
c000b557:	5e                   	pop    esi
c000b558:	c3                   	ret    

c000b559 <Fs::setcwd(Process*, char*)>:
c000b559:	55                   	push   ebp
c000b55a:	57                   	push   edi
c000b55b:	56                   	push   esi
c000b55c:	53                   	push   ebx
c000b55d:	81 ec 20 02 00 00    	sub    esp,0x220
c000b563:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b56a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b570:	57                   	push   edi
c000b571:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b578:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b57c:	56                   	push   esi
c000b57d:	e8 58 fa ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b582:	89 34 24             	mov    DWORD PTR [esp],esi
c000b585:	e8 e6 4f ff ff       	call   c0000570 <strlen>
c000b58a:	83 c4 10             	add    esp,0x10
c000b58d:	83 f8 02             	cmp    eax,0x2
c000b590:	77 15                	ja     c000b5a7 <Fs::setcwd(Process*, char*)+0x4e>
c000b592:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b597:	83 eb 41             	sub    ebx,0x41
c000b59a:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b5a1:	85 c0                	test   eax,eax
c000b5a3:	75 1c                	jne    c000b5c1 <Fs::setcwd(Process*, char*)+0x68>
c000b5a5:	eb 2f                	jmp    c000b5d6 <Fs::setcwd(Process*, char*)+0x7d>
c000b5a7:	83 ec 0c             	sub    esp,0xc
c000b5aa:	56                   	push   esi
c000b5ab:	e8 c0 4f ff ff       	call   c0000570 <strlen>
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	83 f8 03             	cmp    eax,0x3
c000b5b6:	75 57                	jne    c000b60f <Fs::setcwd(Process*, char*)+0xb6>
c000b5b8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5bd:	75 50                	jne    c000b60f <Fs::setcwd(Process*, char*)+0xb6>
c000b5bf:	eb d1                	jmp    c000b592 <Fs::setcwd(Process*, char*)+0x39>
c000b5c1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b5c8:	75 0c                	jne    c000b5d6 <Fs::setcwd(Process*, char*)+0x7d>
c000b5ca:	83 ec 0c             	sub    esp,0xc
c000b5cd:	50                   	push   eax
c000b5ce:	e8 8f 1d 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	b8 03 00 00 00       	mov    eax,0x3
c000b5db:	83 fb 19             	cmp    ebx,0x19
c000b5de:	0f 87 c6 00 00 00    	ja     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b5e4:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b5eb:	b8 05 00 00 00       	mov    eax,0x5
c000b5f0:	85 d2                	test   edx,edx
c000b5f2:	0f 84 b2 00 00 00    	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b5f8:	b8 06 00 00 00       	mov    eax,0x6
c000b5fd:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b604:	0f 85 92 00 00 00    	jne    c000b69c <Fs::setcwd(Process*, char*)+0x143>
c000b60a:	e9 9b 00 00 00       	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b60f:	83 ec 0c             	sub    esp,0xc
c000b612:	68 14 01 00 00       	push   0x114
c000b617:	e8 92 c4 ff ff       	call   c0007aae <malloc>
c000b61c:	83 c4 0c             	add    esp,0xc
c000b61f:	89 c3                	mov    ebx,eax
c000b621:	55                   	push   ebp
c000b622:	56                   	push   esi
c000b623:	50                   	push   eax
c000b624:	e8 67 fb ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000b629:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b62e:	83 c4 0c             	add    esp,0xc
c000b631:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b635:	50                   	push   eax
c000b636:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b63a:	50                   	push   eax
c000b63b:	53                   	push   ebx
c000b63c:	e8 b7 fe ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	83 f8 02             	cmp    eax,0x2
c000b647:	74 27                	je     c000b670 <Fs::setcwd(Process*, char*)+0x117>
c000b649:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b64e:	75 1c                	jne    c000b66c <Fs::setcwd(Process*, char*)+0x113>
c000b650:	b8 02 00 00 00       	mov    eax,0x2
c000b655:	85 db                	test   ebx,ebx
c000b657:	74 51                	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b659:	83 ec 0c             	sub    esp,0xc
c000b65c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b65e:	53                   	push   ebx
c000b65f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b662:	83 c4 10             	add    esp,0x10
c000b665:	b8 02 00 00 00       	mov    eax,0x2
c000b66a:	eb 3e                	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b66c:	85 c0                	test   eax,eax
c000b66e:	74 1c                	je     c000b68c <Fs::setcwd(Process*, char*)+0x133>
c000b670:	b8 01 00 00 00       	mov    eax,0x1
c000b675:	85 db                	test   ebx,ebx
c000b677:	74 31                	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b679:	83 ec 0c             	sub    esp,0xc
c000b67c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b67e:	53                   	push   ebx
c000b67f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b682:	83 c4 10             	add    esp,0x10
c000b685:	b8 01 00 00 00       	mov    eax,0x1
c000b68a:	eb 1e                	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b68c:	85 db                	test   ebx,ebx
c000b68e:	74 0c                	je     c000b69c <Fs::setcwd(Process*, char*)+0x143>
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b695:	53                   	push   ebx
c000b696:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	50                   	push   eax
c000b69d:	50                   	push   eax
c000b69e:	56                   	push   esi
c000b69f:	57                   	push   edi
c000b6a0:	e8 9b 4f ff ff       	call   c0000640 <strcpy>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	31 c0                	xor    eax,eax
c000b6aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b6b0:	5b                   	pop    ebx
c000b6b1:	5e                   	pop    esi
c000b6b2:	5f                   	pop    edi
c000b6b3:	5d                   	pop    ebp
c000b6b4:	c3                   	ret    
c000b6b5:	90                   	nop

c000b6b6 <Directory::Directory(char const*, Process*)>:
c000b6b6:	83 ec 0c             	sub    esp,0xc
c000b6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6bd:	83 ec 08             	sub    esp,0x8
c000b6c0:	6a 00                	push   0x0
c000b6c2:	50                   	push   eax
c000b6c3:	e8 ea da ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b6c8:	83 c4 10             	add    esp,0x10
c000b6cb:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c000b6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d4:	89 10                	mov    DWORD PTR [eax],edx
c000b6d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e4:	83 c0 0d             	add    eax,0xd
c000b6e7:	83 ec 04             	sub    esp,0x4
c000b6ea:	52                   	push   edx
c000b6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ef:	50                   	push   eax
c000b6f0:	e8 e5 f8 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6ff:	83 e8 41             	sub    eax,0x41
c000b702:	88 c2                	mov    dl,al
c000b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b708:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b712:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b720:	0f b6 c0             	movzx  eax,al
c000b723:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b72a:	85 c0                	test   eax,eax
c000b72c:	74 3e                	je     c000b76c <Directory::Directory(char const*, Process*)+0xb6>
c000b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b732:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b738:	0f b6 c0             	movzx  eax,al
c000b73b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b742:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b748:	85 c0                	test   eax,eax
c000b74a:	75 20                	jne    c000b76c <Directory::Directory(char const*, Process*)+0xb6>
c000b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b750:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b756:	0f b6 c0             	movzx  eax,al
c000b759:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	50                   	push   eax
c000b764:	e8 f9 1b 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	90                   	nop
c000b76d:	83 c4 0c             	add    esp,0xc
c000b770:	c3                   	ret    
c000b771:	90                   	nop

c000b772 <Directory::open()>:
c000b772:	53                   	push   ebx
c000b773:	b8 0b 00 00 00       	mov    eax,0xb
c000b778:	83 ec 08             	sub    esp,0x8
c000b77b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b77f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b786:	83 fa 19             	cmp    edx,0x19
c000b789:	77 3d                	ja     c000b7c8 <Directory::open()+0x56>
c000b78b:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b792:	85 d2                	test   edx,edx
c000b794:	74 32                	je     c000b7c8 <Directory::open()+0x56>
c000b796:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b79c:	85 d2                	test   edx,edx
c000b79e:	74 28                	je     c000b7c8 <Directory::open()+0x56>
c000b7a0:	b8 06 00 00 00       	mov    eax,0x6
c000b7a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7a9:	75 1d                	jne    c000b7c8 <Directory::open()+0x56>
c000b7ab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7b1:	50                   	push   eax
c000b7b2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7b4:	51                   	push   ecx
c000b7b5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7b8:	51                   	push   ecx
c000b7b9:	52                   	push   edx
c000b7ba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	85 c0                	test   eax,eax
c000b7c2:	75 04                	jne    c000b7c8 <Directory::open()+0x56>
c000b7c4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7c8:	83 c4 08             	add    esp,0x8
c000b7cb:	5b                   	pop    ebx
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Directory::close()>:
c000b7ce:	53                   	push   ebx
c000b7cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b7d4:	83 ec 08             	sub    esp,0x8
c000b7d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7db:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7e2:	83 f9 19             	cmp    ecx,0x19
c000b7e5:	77 41                	ja     c000b828 <Directory::close()+0x5a>
c000b7e7:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7ee:	85 db                	test   ebx,ebx
c000b7f0:	74 36                	je     c000b828 <Directory::close()+0x5a>
c000b7f2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b7f9:	74 2d                	je     c000b828 <Directory::close()+0x5a>
c000b7fb:	b8 05 00 00 00       	mov    eax,0x5
c000b800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b804:	74 22                	je     c000b828 <Directory::close()+0x5a>
c000b806:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b80a:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b811:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b817:	53                   	push   ebx
c000b818:	53                   	push   ebx
c000b819:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b81b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b821:	50                   	push   eax
c000b822:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b825:	83 c4 10             	add    esp,0x10
c000b828:	83 c4 08             	add    esp,0x8
c000b82b:	5b                   	pop    ebx
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Directory::unlink()>:
c000b82e:	83 ec 0c             	sub    esp,0xc
c000b831:	b8 0b 00 00 00       	mov    eax,0xb
c000b836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b83a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b841:	83 f9 19             	cmp    ecx,0x19
c000b844:	77 2f                	ja     c000b875 <Directory::unlink()+0x47>
c000b846:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b84d:	85 c9                	test   ecx,ecx
c000b84f:	74 24                	je     c000b875 <Directory::unlink()+0x47>
c000b851:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b857:	85 c9                	test   ecx,ecx
c000b859:	74 1a                	je     c000b875 <Directory::unlink()+0x47>
c000b85b:	b8 06 00 00 00       	mov    eax,0x6
c000b860:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b864:	75 0f                	jne    c000b875 <Directory::unlink()+0x47>
c000b866:	83 c2 0d             	add    edx,0xd
c000b869:	50                   	push   eax
c000b86a:	50                   	push   eax
c000b86b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b86d:	52                   	push   edx
c000b86e:	51                   	push   ecx
c000b86f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b872:	83 c4 10             	add    esp,0x10
c000b875:	83 c4 0c             	add    esp,0xc
c000b878:	c3                   	ret    
c000b879:	90                   	nop

c000b87a <Directory::rename(char const*)>:
c000b87a:	83 ec 0c             	sub    esp,0xc
c000b87d:	b8 0b 00 00 00       	mov    eax,0xb
c000b882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b886:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b88d:	83 f9 19             	cmp    ecx,0x19
c000b890:	77 32                	ja     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b892:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b899:	85 c9                	test   ecx,ecx
c000b89b:	74 27                	je     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b89d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8a3:	85 c9                	test   ecx,ecx
c000b8a5:	74 1d                	je     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b8a7:	b8 06 00 00 00       	mov    eax,0x6
c000b8ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8b0:	75 12                	jne    c000b8c4 <Directory::rename(char const*)+0x4a>
c000b8b2:	83 c2 0d             	add    edx,0xd
c000b8b5:	50                   	push   eax
c000b8b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8bc:	52                   	push   edx
c000b8bd:	51                   	push   ecx
c000b8be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b8c1:	83 c4 10             	add    esp,0x10
c000b8c4:	83 c4 0c             	add    esp,0xc
c000b8c7:	c3                   	ret    

c000b8c8 <Directory::exists()>:
c000b8c8:	83 ec 0c             	sub    esp,0xc
c000b8cb:	31 c0                	xor    eax,eax
c000b8cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8d8:	83 f9 19             	cmp    ecx,0x19
c000b8db:	77 24                	ja     c000b901 <Directory::exists()+0x39>
c000b8dd:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b8e4:	85 c9                	test   ecx,ecx
c000b8e6:	74 19                	je     c000b901 <Directory::exists()+0x39>
c000b8e8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8ee:	85 c9                	test   ecx,ecx
c000b8f0:	74 0f                	je     c000b901 <Directory::exists()+0x39>
c000b8f2:	83 c2 0d             	add    edx,0xd
c000b8f5:	50                   	push   eax
c000b8f6:	50                   	push   eax
c000b8f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8f9:	52                   	push   edx
c000b8fa:	51                   	push   ecx
c000b8fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	83 c4 0c             	add    esp,0xc
c000b904:	c3                   	ret    
c000b905:	90                   	nop

c000b906 <Directory::read(dirent*)>:
c000b906:	83 ec 1c             	sub    esp,0x1c
c000b909:	b8 0b 00 00 00       	mov    eax,0xb
c000b90e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b912:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b919:	83 f9 19             	cmp    ecx,0x19
c000b91c:	77 30                	ja     c000b94e <Directory::read(dirent*)+0x48>
c000b91e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b925:	85 c9                	test   ecx,ecx
c000b927:	74 25                	je     c000b94e <Directory::read(dirent*)+0x48>
c000b929:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b930:	74 1c                	je     c000b94e <Directory::read(dirent*)+0x48>
c000b932:	83 ec 0c             	sub    esp,0xc
c000b935:	8b 02                	mov    eax,DWORD PTR [edx]
c000b937:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b93b:	51                   	push   ecx
c000b93c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b940:	6a 00                	push   0x0
c000b942:	68 10 01 00 00       	push   0x110
c000b947:	52                   	push   edx
c000b948:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b94b:	83 c4 20             	add    esp,0x20
c000b94e:	83 c4 1c             	add    esp,0x1c
c000b951:	c3                   	ret    

c000b952 <Directory::create()>:
c000b952:	83 ec 0c             	sub    esp,0xc
c000b955:	b8 0b 00 00 00       	mov    eax,0xb
c000b95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b95e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b965:	83 f9 19             	cmp    ecx,0x19
c000b968:	77 2f                	ja     c000b999 <Directory::create()+0x47>
c000b96a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b971:	85 c9                	test   ecx,ecx
c000b973:	74 24                	je     c000b999 <Directory::create()+0x47>
c000b975:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b97b:	85 c9                	test   ecx,ecx
c000b97d:	74 1a                	je     c000b999 <Directory::create()+0x47>
c000b97f:	b8 06 00 00 00       	mov    eax,0x6
c000b984:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b988:	75 0f                	jne    c000b999 <Directory::create()+0x47>
c000b98a:	83 c2 0d             	add    edx,0xd
c000b98d:	50                   	push   eax
c000b98e:	50                   	push   eax
c000b98f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b991:	52                   	push   edx
c000b992:	51                   	push   ecx
c000b993:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b996:	83 c4 10             	add    esp,0x10
c000b999:	83 c4 0c             	add    esp,0xc
c000b99c:	c3                   	ret    
c000b99d:	90                   	nop

c000b99e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b99e:	b8 0a 00 00 00       	mov    eax,0xa
c000b9a3:	c3                   	ret    

c000b9a4 <Bus::Bus(char const*)>:
c000b9a4:	83 ec 0c             	sub    esp,0xc
c000b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ab:	83 ec 08             	sub    esp,0x8
c000b9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b2:	50                   	push   eax
c000b9b3:	e8 22 08 00 00       	call   c000c1da <Device::Device(char const*)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	ba 58 0a 02 c0       	mov    edx,0xc0020a58
c000b9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c4:	89 10                	mov    DWORD PTR [eax],edx
c000b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9d4:	90                   	nop
c000b9d5:	83 c4 0c             	add    esp,0xc
c000b9d8:	c3                   	ret    
c000b9d9:	90                   	nop
c000b9da:	66 90                	xchg   ax,ax

c000b9dc <Bus::~Bus()>:
c000b9dc:	83 ec 0c             	sub    esp,0xc
c000b9df:	ba 58 0a 02 c0       	mov    edx,0xc0020a58
c000b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	50                   	push   eax
c000b9f2:	e8 4d 05 00 00       	call   c000bf44 <Device::~Device()>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	90                   	nop
c000b9fb:	83 c4 0c             	add    esp,0xc
c000b9fe:	c3                   	ret    
c000b9ff:	90                   	nop

c000ba00 <Bus::~Bus()>:
c000ba00:	83 ec 0c             	sub    esp,0xc
c000ba03:	83 ec 0c             	sub    esp,0xc
c000ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba0a:	e8 cd ff ff ff       	call   c000b9dc <Bus::~Bus()>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	83 ec 08             	sub    esp,0x8
c000ba15:	68 58 01 00 00       	push   0x158
c000ba1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba1e:	e8 e9 ed ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	83 c4 0c             	add    esp,0xc
c000ba29:	c3                   	ret    

c000ba2a <beepThread(void*)>:
c000ba2a:	83 ec 0c             	sub    esp,0xc
c000ba2d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ba32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba36:	48                   	dec    eax
c000ba37:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ba3c:	75 01                	jne    c000ba3f <beepThread(void*)+0x15>
c000ba3e:	fb                   	sti    
c000ba3f:	83 ec 0c             	sub    esp,0xc
c000ba42:	6b c2 0a             	imul   eax,edx,0xa
c000ba45:	50                   	push   eax
c000ba46:	e8 61 9c 00 00       	call   c00156ac <milliTenthSleep(unsigned int)>
c000ba4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba52:	e8 b0 bb 00 00       	call   c0017607 <HalMakeBeep(int)>
c000ba57:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba5f:	83 c4 1c             	add    esp,0x1c
c000ba62:	e9 29 9b 00 00       	jmp    c0015590 <blockTask(TaskState)>

c000ba67 <Krnl::beep(int, int, bool)>:
c000ba67:	56                   	push   esi
c000ba68:	53                   	push   ebx
c000ba69:	83 ec 10             	sub    esp,0x10
c000ba6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba78:	e8 8a bb 00 00       	call   c0017607 <HalMakeBeep(int)>
c000ba7d:	83 c4 10             	add    esp,0x10
c000ba80:	89 f0                	mov    eax,esi
c000ba82:	84 c0                	test   al,al
c000ba84:	74 1e                	je     c000baa4 <Krnl::beep(int, int, bool)+0x3d>
c000ba86:	83 ec 0c             	sub    esp,0xc
c000ba89:	6b db 0a             	imul   ebx,ebx,0xa
c000ba8c:	53                   	push   ebx
c000ba8d:	e8 1a 9c 00 00       	call   c00156ac <milliTenthSleep(unsigned int)>
c000ba92:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba9a:	83 c4 14             	add    esp,0x14
c000ba9d:	5b                   	pop    ebx
c000ba9e:	5e                   	pop    esi
c000ba9f:	e9 63 bb 00 00       	jmp    c0017607 <HalMakeBeep(int)>
c000baa4:	68 e6 00 00 00       	push   0xe6
c000baa9:	53                   	push   ebx
c000baaa:	68 2a ba 00 c0       	push   0xc000ba2a
c000baaf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000bab5:	e8 72 96 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c000baba:	83 c4 14             	add    esp,0x14
c000babd:	5b                   	pop    ebx
c000babe:	5e                   	pop    esi
c000babf:	c3                   	ret    

c000bac0 <User::loadClockSettings(int)>:
c000bac0:	53                   	push   ebx
c000bac1:	83 ec 14             	sub    esp,0x14
c000bac4:	68 14 01 00 00       	push   0x114
c000bac9:	e8 e0 bf ff ff       	call   c0007aae <malloc>
c000bace:	83 c4 0c             	add    esp,0xc
c000bad1:	89 c3                	mov    ebx,eax
c000bad3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000bad9:	68 7c 0a 02 c0       	push   0xc0020a7c
c000bade:	50                   	push   eax
c000badf:	e8 ac f6 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000bae4:	58                   	pop    eax
c000bae5:	5a                   	pop    edx
c000bae6:	6a 01                	push   0x1
c000bae8:	53                   	push   ebx
c000bae9:	e8 5e f7 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000baee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000baf1:	e8 b4 f7 ff ff       	call   c000b2aa <File::close()>
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	85 db                	test   ebx,ebx
c000bafb:	74 0f                	je     c000bb0c <User::loadClockSettings(int)+0x4c>
c000bafd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb06:	83 c4 08             	add    esp,0x8
c000bb09:	5b                   	pop    ebx
c000bb0a:	ff e0                	jmp    eax
c000bb0c:	83 c4 08             	add    esp,0x8
c000bb0f:	5b                   	pop    ebx
c000bb10:	c3                   	ret    
c000bb11:	90                   	nop

c000bb12 <Clock::Clock(char const*)>:
c000bb12:	83 ec 0c             	sub    esp,0xc
c000bb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb19:	83 ec 08             	sub    esp,0x8
c000bb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb20:	50                   	push   eax
c000bb21:	e8 b4 06 00 00       	call   c000c1da <Device::Device(char const*)>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	ba a4 0a 02 c0       	mov    edx,0xc0020aa4
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	89 10                	mov    DWORD PTR [eax],edx
c000bb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb42:	90                   	nop
c000bb43:	83 c4 0c             	add    esp,0xc
c000bb46:	c3                   	ret    
c000bb47:	90                   	nop

c000bb48 <Clock::~Clock()>:
c000bb48:	83 ec 0c             	sub    esp,0xc
c000bb4b:	ba a4 0a 02 c0       	mov    edx,0xc0020aa4
c000bb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb54:	89 10                	mov    DWORD PTR [eax],edx
c000bb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5a:	83 ec 0c             	sub    esp,0xc
c000bb5d:	50                   	push   eax
c000bb5e:	e8 e1 03 00 00       	call   c000bf44 <Device::~Device()>
c000bb63:	83 c4 10             	add    esp,0x10
c000bb66:	90                   	nop
c000bb67:	83 c4 0c             	add    esp,0xc
c000bb6a:	c3                   	ret    
c000bb6b:	90                   	nop

c000bb6c <Clock::~Clock()>:
c000bb6c:	83 ec 0c             	sub    esp,0xc
c000bb6f:	83 ec 0c             	sub    esp,0xc
c000bb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb76:	e8 cd ff ff ff       	call   c000bb48 <Clock::~Clock()>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	83 ec 08             	sub    esp,0x8
c000bb81:	68 58 01 00 00       	push   0x158
c000bb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8a:	e8 7d ec ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	83 c4 0c             	add    esp,0xc
c000bb95:	c3                   	ret    

c000bb96 <Clock::timeInSecondsLocal()>:
c000bb96:	53                   	push   ebx
c000bb97:	83 ec 14             	sub    esp,0x14
c000bb9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bba0:	50                   	push   eax
c000bba1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bba4:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bbab:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bbb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbb7:	89 cb                	mov    ebx,ecx
c000bbb9:	c1 fb 1f             	sar    ebx,0x1f
c000bbbc:	01 c8                	add    eax,ecx
c000bbbe:	11 da                	adc    edx,ebx
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	31 c9                	xor    ecx,ecx
c000bbc5:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bbcc:	74 05                	je     c000bbd3 <Clock::timeInSecondsLocal()+0x3d>
c000bbce:	b9 08 07 00 00       	mov    ecx,0x708
c000bbd3:	31 db                	xor    ebx,ebx
c000bbd5:	01 c8                	add    eax,ecx
c000bbd7:	11 da                	adc    edx,ebx
c000bbd9:	83 c4 08             	add    esp,0x8
c000bbdc:	5b                   	pop    ebx
c000bbdd:	c3                   	ret    

c000bbde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbde:	57                   	push   edi
c000bbdf:	56                   	push   esi
c000bbe0:	53                   	push   ebx
c000bbe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbe5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbe9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbf2:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000bbf9:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000bbff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc05:	99                   	cdq    
c000bc06:	29 c6                	sub    esi,eax
c000bc08:	19 d7                	sbb    edi,edx
c000bc0a:	89 f0                	mov    eax,esi
c000bc0c:	89 fa                	mov    edx,edi
c000bc0e:	31 f6                	xor    esi,esi
c000bc10:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bc17:	74 05                	je     c000bc1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc19:	be 08 07 00 00       	mov    esi,0x708
c000bc1e:	31 ff                	xor    edi,edi
c000bc20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc24:	29 f0                	sub    eax,esi
c000bc26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc2a:	19 fa                	sbb    edx,edi
c000bc2c:	89 d8                	mov    eax,ebx
c000bc2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc32:	5b                   	pop    ebx
c000bc33:	5e                   	pop    esi
c000bc34:	5f                   	pop    edi
c000bc35:	ff e0                	jmp    eax

c000bc37 <datetimeToSeconds(datetime_t)>:
c000bc37:	55                   	push   ebp
c000bc38:	57                   	push   edi
c000bc39:	56                   	push   esi
c000bc3a:	53                   	push   ebx
c000bc3b:	83 ec 0c             	sub    esp,0xc
c000bc3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc42:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000bc46:	89 d6                	mov    esi,edx
c000bc48:	0f b6 c7             	movzx  eax,bh
c000bc4b:	c1 ee 10             	shr    esi,0x10
c000bc4e:	6b e8 3c             	imul   ebp,eax,0x3c
c000bc51:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bc57:	0f b6 ce             	movzx  ecx,dh
c000bc5a:	89 df                	mov    edi,ebx
c000bc5c:	49                   	dec    ecx
c000bc5d:	c1 ef 10             	shr    edi,0x10
c000bc60:	0f b6 db             	movzx  ebx,bl
c000bc63:	89 f8                	mov    eax,edi
c000bc65:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000bc6b:	0f b6 f8             	movzx  edi,al
c000bc6e:	0f b6 d2             	movzx  edx,dl
c000bc71:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000bc75:	01 d8                	add    eax,ebx
c000bc77:	0f b7 de             	movzx  ebx,si
c000bc7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000bc7d:	c1 f8 1f             	sar    eax,0x1f
c000bc80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc84:	0f b6 c1             	movzx  eax,cl
c000bc87:	8b 0c 85 e0 0a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf520]
c000bc8e:	83 f8 01             	cmp    eax,0x1
c000bc91:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc95:	76 27                	jbe    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bc97:	83 e6 03             	and    esi,0x3
c000bc9a:	75 22                	jne    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bc9c:	31 d2                	xor    edx,edx
c000bc9e:	be 64 00 00 00       	mov    esi,0x64
c000bca3:	89 d8                	mov    eax,ebx
c000bca5:	f7 f6                	div    esi
c000bca7:	85 d2                	test   edx,edx
c000bca9:	75 12                	jne    c000bcbd <datetimeToSeconds(datetime_t)+0x86>
c000bcab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcb1:	be 90 01 00 00       	mov    esi,0x190
c000bcb6:	99                   	cdq    
c000bcb7:	f7 fe                	idiv   esi
c000bcb9:	85 d2                	test   edx,edx
c000bcbb:	75 01                	jne    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bcbd:	41                   	inc    ecx
c000bcbe:	83 fb 46             	cmp    ebx,0x46
c000bcc1:	76 48                	jbe    c000bd0b <datetimeToSeconds(datetime_t)+0xd4>
c000bcc3:	be 46 00 00 00       	mov    esi,0x46
c000bcc8:	bf 64 00 00 00       	mov    edi,0x64
c000bccd:	bd 90 01 00 00       	mov    ebp,0x190
c000bcd2:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcd7:	f7 c6 03 00 00 00    	test   esi,0x3
c000bcdd:	75 23                	jne    c000bd02 <datetimeToSeconds(datetime_t)+0xcb>
c000bcdf:	89 f0                	mov    eax,esi
c000bce1:	99                   	cdq    
c000bce2:	f7 ff                	idiv   edi
c000bce4:	b8 6e 01 00 00       	mov    eax,0x16e
c000bce9:	85 d2                	test   edx,edx
c000bceb:	75 15                	jne    c000bd02 <datetimeToSeconds(datetime_t)+0xcb>
c000bced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bcf3:	99                   	cdq    
c000bcf4:	f7 fd                	idiv   ebp
c000bcf6:	83 fa 01             	cmp    edx,0x1
c000bcf9:	19 c0                	sbb    eax,eax
c000bcfb:	f7 d0                	not    eax
c000bcfd:	05 6e 01 00 00       	add    eax,0x16e
c000bd02:	01 c1                	add    ecx,eax
c000bd04:	46                   	inc    esi
c000bd05:	39 de                	cmp    esi,ebx
c000bd07:	7c c9                	jl     c000bcd2 <datetimeToSeconds(datetime_t)+0x9b>
c000bd09:	eb 34                	jmp    c000bd3f <datetimeToSeconds(datetime_t)+0x108>
c000bd0b:	74 32                	je     c000bd3f <datetimeToSeconds(datetime_t)+0x108>
c000bd0d:	b8 45 00 00 00       	mov    eax,0x45
c000bd12:	89 c2                	mov    edx,eax
c000bd14:	83 e2 03             	and    edx,0x3
c000bd17:	39 d8                	cmp    eax,ebx
c000bd19:	7e 0f                	jle    c000bd2a <datetimeToSeconds(datetime_t)+0xf3>
c000bd1b:	83 fa 01             	cmp    edx,0x1
c000bd1e:	19 d2                	sbb    edx,edx
c000bd20:	48                   	dec    eax
c000bd21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd28:	eb e8                	jmp    c000bd12 <datetimeToSeconds(datetime_t)+0xdb>
c000bd2a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd2f:	85 d2                	test   edx,edx
c000bd31:	75 0a                	jne    c000bd3d <datetimeToSeconds(datetime_t)+0x106>
c000bd33:	83 fb 01             	cmp    ebx,0x1
c000bd36:	19 c0                	sbb    eax,eax
c000bd38:	05 6e 01 00 00       	add    eax,0x16e
c000bd3d:	29 c1                	sub    ecx,eax
c000bd3f:	b8 80 51 01 00       	mov    eax,0x15180
c000bd44:	f7 e9                	imul   ecx
c000bd46:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd4d:	83 c4 0c             	add    esp,0xc
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	5f                   	pop    edi
c000bd53:	5d                   	pop    ebp
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop

c000bd56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd56:	57                   	push   edi
c000bd57:	56                   	push   esi
c000bd58:	53                   	push   ebx
c000bd59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd6a:	e8 c8 fe ff ff       	call   c000bc37 <datetimeToSeconds(datetime_t)>
c000bd6f:	59                   	pop    ecx
c000bd70:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bd77:	5b                   	pop    ebx
c000bd78:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bd7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd84:	89 cb                	mov    ebx,ecx
c000bd86:	c1 fb 1f             	sar    ebx,0x1f
c000bd89:	29 c8                	sub    eax,ecx
c000bd8b:	19 da                	sbb    edx,ebx
c000bd8d:	31 c9                	xor    ecx,ecx
c000bd8f:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bd96:	74 05                	je     c000bd9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd98:	b9 08 07 00 00       	mov    ecx,0x708
c000bd9d:	31 db                	xor    ebx,ebx
c000bd9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bda3:	29 c8                	sub    eax,ecx
c000bda5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bda9:	19 da                	sbb    edx,ebx
c000bdab:	89 f8                	mov    eax,edi
c000bdad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb1:	5b                   	pop    ebx
c000bdb2:	5e                   	pop    esi
c000bdb3:	5f                   	pop    edi
c000bdb4:	ff e0                	jmp    eax

c000bdb6 <secondsToDatetime(unsigned long long)>:
c000bdb6:	55                   	push   ebp
c000bdb7:	57                   	push   edi
c000bdb8:	56                   	push   esi
c000bdb9:	53                   	push   ebx
c000bdba:	83 ec 1c             	sub    esp,0x1c
c000bdbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdc9:	6a 00                	push   0x0
c000bdcb:	68 80 51 01 00       	push   0x15180
c000bdd0:	55                   	push   ebp
c000bdd1:	57                   	push   edi
c000bdd2:	e8 a9 2b 01 00       	call   c001e980 <__udivdi3>
c000bdd7:	83 c4 10             	add    esp,0x10
c000bdda:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bde0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bde4:	6a 00                	push   0x0
c000bde6:	68 80 51 01 00       	push   0x15180
c000bdeb:	55                   	push   ebp
c000bdec:	57                   	push   edi
c000bded:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdf2:	e8 89 2c 01 00       	call   c001ea80 <__umoddi3>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	99                   	cdq    
c000bdfb:	f7 ff                	idiv   edi
c000bdfd:	bf 3c 00 00 00       	mov    edi,0x3c
c000be02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be05:	89 d0                	mov    eax,edx
c000be07:	99                   	cdq    
c000be08:	f7 ff                	idiv   edi
c000be0a:	85 db                	test   ebx,ebx
c000be0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be12:	79 11                	jns    c000be25 <secondsToDatetime(unsigned long long)+0x6f>
c000be14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be23:	eb 07                	jmp    c000be2c <secondsToDatetime(unsigned long long)+0x76>
c000be25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be2a:	89 d8                	mov    eax,ebx
c000be2c:	bf b4 05 00 00       	mov    edi,0x5b4
c000be31:	99                   	cdq    
c000be32:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be37:	f7 f9                	idiv   ecx
c000be39:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be42:	31 d2                	xor    edx,edx
c000be44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be4c:	01 c3                	add    ebx,eax
c000be4e:	89 d8                	mov    eax,ebx
c000be50:	f7 f1                	div    ecx
c000be52:	31 d2                	xor    edx,edx
c000be54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be57:	89 d8                	mov    eax,ebx
c000be59:	f7 f7                	div    edi
c000be5b:	31 d2                	xor    edx,edx
c000be5d:	29 c1                	sub    ecx,eax
c000be5f:	89 d8                	mov    eax,ebx
c000be61:	f7 f5                	div    ebp
c000be63:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be68:	29 c1                	sub    ecx,eax
c000be6a:	31 d2                	xor    edx,edx
c000be6c:	89 c8                	mov    eax,ecx
c000be6e:	f7 f5                	div    ebp
c000be70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be79:	31 d2                	xor    edx,edx
c000be7b:	89 c8                	mov    eax,ecx
c000be7d:	f7 f5                	div    ebp
c000be7f:	31 d2                	xor    edx,edx
c000be81:	01 c3                	add    ebx,eax
c000be83:	89 c8                	mov    eax,ecx
c000be85:	f7 f7                	div    edi
c000be87:	bf 99 00 00 00       	mov    edi,0x99
c000be8c:	29 c3                	sub    ebx,eax
c000be8e:	31 d2                	xor    edx,edx
c000be90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be98:	29 c3                	sub    ebx,eax
c000be9a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be9d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bea0:	bb 05 00 00 00       	mov    ebx,0x5
c000bea5:	83 c1 02             	add    ecx,0x2
c000bea8:	89 c8                	mov    eax,ecx
c000beaa:	f7 f7                	div    edi
c000beac:	31 d2                	xor    edx,edx
c000beae:	89 c7                	mov    edi,eax
c000beb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000beb6:	83 c0 02             	add    eax,0x2
c000beb9:	f7 f3                	div    ebx
c000bebb:	89 eb                	mov    ebx,ebp
c000bebd:	29 c3                	sub    ebx,eax
c000bebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bec5:	88 1e                	mov    BYTE PTR [esi],bl
c000bec7:	19 c0                	sbb    eax,eax
c000bec9:	31 d2                	xor    edx,edx
c000becb:	83 e0 0c             	and    eax,0xc
c000bece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000beda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bede:	83 f9 01             	cmp    ecx,0x1
c000bee1:	0f 96 c2             	setbe  dl
c000bee4:	41                   	inc    ecx
c000bee5:	01 d0                	add    eax,edx
c000bee7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000beea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000beee:	83 c4 1c             	add    esp,0x1c
c000bef1:	89 f0                	mov    eax,esi
c000bef3:	5b                   	pop    ebx
c000bef4:	5e                   	pop    esi
c000bef5:	5f                   	pop    edi
c000bef6:	5d                   	pop    ebp
c000bef7:	c2 04 00             	ret    0x4

c000befa <Clock::timeInDatetimeLocal()>:
c000befa:	53                   	push   ebx
c000befb:	83 ec 14             	sub    esp,0x14
c000befe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf06:	e8 8b fc ff ff       	call   c000bb96 <Clock::timeInSecondsLocal()>
c000bf0b:	83 c4 0c             	add    esp,0xc
c000bf0e:	52                   	push   edx
c000bf0f:	50                   	push   eax
c000bf10:	53                   	push   ebx
c000bf11:	e8 a0 fe ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c000bf16:	89 d8                	mov    eax,ebx
c000bf18:	83 c4 14             	add    esp,0x14
c000bf1b:	5b                   	pop    ebx
c000bf1c:	c2 04 00             	ret    0x4
c000bf1f:	90                   	nop

c000bf20 <Device::hibernate()>:
c000bf20:	c3                   	ret    
c000bf21:	90                   	nop

c000bf22 <Device::wake()>:
c000bf22:	c3                   	ret    
c000bf23:	90                   	nop

c000bf24 <Device::detect()>:
c000bf24:	c3                   	ret    
c000bf25:	90                   	nop

c000bf26 <Device::disableLegacy()>:
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Device::powerSaving(PowerSavingLevel)>:
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <DriverlessDevice::close(int, int, void*)>:
c000bf2a:	31 c0                	xor    eax,eax
c000bf2c:	c3                   	ret    
c000bf2d:	90                   	nop

c000bf2e <DriverlessDevice::detect()>:
c000bf2e:	c3                   	ret    
c000bf2f:	90                   	nop

c000bf30 <DriverlessDevice::open(int, int, void*)>:
c000bf30:	83 ec 18             	sub    esp,0x18
c000bf33:	68 10 0b 02 c0       	push   0xc0020b10
c000bf38:	e8 7c 4c 00 00       	call   c0010bb9 <KePanic(char const*)>
c000bf3d:	83 c8 ff             	or     eax,0xffffffff
c000bf40:	83 c4 1c             	add    esp,0x1c
c000bf43:	c3                   	ret    

c000bf44 <Device::~Device()>:
c000bf44:	ba 70 0b 02 c0       	mov    edx,0xc0020b70
c000bf49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf4d:	89 10                	mov    DWORD PTR [eax],edx
c000bf4f:	90                   	nop
c000bf50:	c3                   	ret    
c000bf51:	90                   	nop

c000bf52 <Device::~Device()>:
c000bf52:	83 ec 0c             	sub    esp,0xc
c000bf55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf59:	e8 e6 ff ff ff       	call   c000bf44 <Device::~Device()>
c000bf5e:	83 c4 04             	add    esp,0x4
c000bf61:	83 ec 08             	sub    esp,0x8
c000bf64:	68 58 01 00 00       	push   0x158
c000bf69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6d:	e8 9a e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bf72:	83 c4 10             	add    esp,0x10
c000bf75:	83 c4 0c             	add    esp,0xc
c000bf78:	c3                   	ret    
c000bf79:	90                   	nop

c000bf7a <Device::findAndLoadDriver()>:
c000bf7a:	c7 44 24 04 2e 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b2e
c000bf82:	e9 b2 e9 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c000bf87:	90                   	nop

c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf88:	57                   	push   edi
c000bf89:	b9 09 00 00 00       	mov    ecx,0x9
c000bf8e:	56                   	push   esi
c000bf8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf93:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bfa1:	81 c7 18 01 00 00    	add    edi,0x118
c000bfa7:	fc                   	cld    
c000bfa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bfaa:	5e                   	pop    esi
c000bfab:	5f                   	pop    edi
c000bfac:	c3                   	ret    
c000bfad:	90                   	nop

c000bfae <Device::preOpenACPI(void*, char*, char*)>:
c000bfae:	57                   	push   edi
c000bfaf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfb4:	56                   	push   esi
c000bfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfbd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfc7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfcd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd9:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfde:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfea:	5e                   	pop    esi
c000bfeb:	5f                   	pop    edi
c000bfec:	c3                   	ret    
c000bfed:	90                   	nop

c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfee:	53                   	push   ebx
c000bfef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bff3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfff:	0f b6 c0             	movzx  eax,al
c000c002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c00a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c00e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c012:	5b                   	pop    ebx
c000c013:	e9 a8 05 00 00       	jmp    c000c5c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c018 <Device::getParent()>:
c000c018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c01c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c022:	c3                   	ret    
c000c023:	90                   	nop

c000c024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c02c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c031:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c03d:	e9 e6 06 00 00       	jmp    c000c728 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c042 <Device::addChild(Device*)>:
c000c042:	53                   	push   ebx
c000c043:	83 ec 08             	sub    esp,0x8
c000c046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c04a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c04e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c05a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c05c:	85 d2                	test   edx,edx
c000c05e:	74 04                	je     c000c064 <Device::addChild(Device*)+0x22>
c000c060:	89 d3                	mov    ebx,edx
c000c062:	eb f6                	jmp    c000c05a <Device::addChild(Device*)+0x18>
c000c064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c067:	83 ec 0c             	sub    esp,0xc
c000c06a:	6a 08                	push   0x8
c000c06c:	e8 3d ba ff ff       	call   c0007aae <malloc>
c000c071:	89 03                	mov    DWORD PTR [ebx],eax
c000c073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c080:	83 c4 18             	add    esp,0x18
c000c083:	5b                   	pop    ebx
c000c084:	c3                   	ret    
c000c085:	90                   	nop

c000c086 <Device::removeAllChildren()>:
c000c086:	56                   	push   esi
c000c087:	53                   	push   ebx
c000c088:	52                   	push   edx
c000c089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c08d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c096:	74 17                	je     c000c0af <Device::removeAllChildren()+0x29>
c000c098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c09b:	85 c0                	test   eax,eax
c000c09d:	74 0c                	je     c000c0ab <Device::removeAllChildren()+0x25>
c000c09f:	83 ec 0c             	sub    esp,0xc
c000c0a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0a4:	50                   	push   eax
c000c0a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0ad:	eb e4                	jmp    c000c093 <Device::removeAllChildren()+0xd>
c000c0af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0c8:	58                   	pop    eax
c000c0c9:	5b                   	pop    ebx
c000c0ca:	5e                   	pop    esi
c000c0cb:	c3                   	ret    

c000c0cc <Device::hibernateAll()>:
c000c0cc:	53                   	push   ebx
c000c0cd:	83 ec 14             	sub    esp,0x14
c000c0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0d6:	53                   	push   ebx
c000c0d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0e6:	74 0f                	je     c000c0f7 <Device::hibernateAll()+0x2b>
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0ee:	e8 d9 ff ff ff       	call   c000c0cc <Device::hibernateAll()>
c000c0f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0f5:	eb e9                	jmp    c000c0e0 <Device::hibernateAll()+0x14>
c000c0f7:	83 c4 08             	add    esp,0x8
c000c0fa:	5b                   	pop    ebx
c000c0fb:	c3                   	ret    

c000c0fc <Device::wakeAll()>:
c000c0fc:	53                   	push   ebx
c000c0fd:	83 ec 14             	sub    esp,0x14
c000c100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c106:	53                   	push   ebx
c000c107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c10a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c116:	74 0f                	je     c000c127 <Device::wakeAll()+0x2b>
c000c118:	83 ec 0c             	sub    esp,0xc
c000c11b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c11e:	e8 d9 ff ff ff       	call   c000c0fc <Device::wakeAll()>
c000c123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c125:	eb e9                	jmp    c000c110 <Device::wakeAll()+0x14>
c000c127:	83 c4 08             	add    esp,0x8
c000c12a:	5b                   	pop    ebx
c000c12b:	c3                   	ret    

c000c12c <Device::detectAll()>:
c000c12c:	53                   	push   ebx
c000c12d:	83 ec 14             	sub    esp,0x14
c000c130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c134:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c136:	53                   	push   ebx
c000c137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c13a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c140:	83 c4 10             	add    esp,0x10
c000c143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c146:	74 0f                	je     c000c157 <Device::detectAll()+0x2b>
c000c148:	83 ec 0c             	sub    esp,0xc
c000c14b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c14e:	e8 d9 ff ff ff       	call   c000c12c <Device::detectAll()>
c000c153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c155:	eb e9                	jmp    c000c140 <Device::detectAll()+0x14>
c000c157:	83 c4 08             	add    esp,0x8
c000c15a:	5b                   	pop    ebx
c000c15b:	c3                   	ret    

c000c15c <Device::disableLegacyAll()>:
c000c15c:	c3                   	ret    
c000c15d:	90                   	nop

c000c15e <Device::loadDriversForAll()>:
c000c15e:	c3                   	ret    
c000c15f:	90                   	nop

c000c160 <Device::closeAll()>:
c000c160:	53                   	push   ebx
c000c161:	83 ec 08             	sub    esp,0x8
c000c164:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c168:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c16a:	6a 00                	push   0x0
c000c16c:	6a 00                	push   0x0
c000c16e:	6a 00                	push   0x0
c000c170:	53                   	push   ebx
c000c171:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c180:	74 0f                	je     c000c191 <Device::closeAll()+0x31>
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c188:	e8 d3 ff ff ff       	call   c000c160 <Device::closeAll()>
c000c18d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c18f:	eb e9                	jmp    c000c17a <Device::closeAll()+0x1a>
c000c191:	83 c4 08             	add    esp,0x8
c000c194:	5b                   	pop    ebx
c000c195:	c3                   	ret    

c000c196 <Device::powerSavingAll(PowerSavingLevel)>:
c000c196:	56                   	push   esi
c000c197:	53                   	push   ebx
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c19f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1a5:	56                   	push   esi
c000c1a6:	53                   	push   ebx
c000c1a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1b0:	83 c4 10             	add    esp,0x10
c000c1b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1b6:	74 0f                	je     c000c1c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1b8:	52                   	push   edx
c000c1b9:	52                   	push   edx
c000c1ba:	56                   	push   esi
c000c1bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1be:	e8 d3 ff ff ff       	call   c000c196 <Device::powerSavingAll(PowerSavingLevel)>
c000c1c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1c5:	eb e9                	jmp    c000c1b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1c7:	58                   	pop    eax
c000c1c8:	5b                   	pop    ebx
c000c1c9:	5e                   	pop    esi
c000c1ca:	c3                   	ret    
c000c1cb:	90                   	nop

c000c1cc <Device::setName(char const*)>:
c000c1cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1d4:	e9 67 44 ff ff       	jmp    c0000640 <strcpy>
c000c1d9:	90                   	nop

c000c1da <Device::Device(char const*)>:
c000c1da:	83 ec 1c             	sub    esp,0x1c
c000c1dd:	ba 70 0b 02 c0       	mov    edx,0xc0020b70
c000c1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e6:	89 10                	mov    DWORD PTR [eax],edx
c000c1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c208:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c216:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c220:	83 ec 08             	sub    esp,0x8
c000c223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c22b:	e8 9c ff ff ff       	call   c000c1cc <Device::setName(char const*)>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c242:	e8 67 b8 ff ff       	call   c0007aae <malloc>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c250:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c25b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c265:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c26b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c275:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c27b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c286:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c291:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2aa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c2d0:	90                   	nop
c000c2d1:	83 c4 1c             	add    esp,0x1c
c000c2d4:	c3                   	ret    
c000c2d5:	90                   	nop

c000c2d6 <Device::getName()>:
c000c2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2da:	05 d0 00 00 00       	add    eax,0xd0
c000c2df:	c3                   	ret    

c000c2e0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e7:	83 ec 08             	sub    esp,0x8
c000c2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ee:	50                   	push   eax
c000c2ef:	e8 e6 fe ff ff       	call   c000c1da <Device::Device(char const*)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c000c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c300:	89 10                	mov    DWORD PTR [eax],edx
c000c302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c306:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c310:	90                   	nop
c000c311:	83 c4 0c             	add    esp,0xc
c000c314:	c3                   	ret    
c000c315:	90                   	nop

c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c316:	57                   	push   edi
c000c317:	56                   	push   esi
c000c318:	53                   	push   ebx
c000c319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c31d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c321:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c325:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c32b:	75 0c                	jne    c000c339 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c32d:	52                   	push   edx
c000c32e:	52                   	push   edx
c000c32f:	53                   	push   ebx
c000c330:	56                   	push   esi
c000c331:	e8 fc 2a 01 00       	call   c001ee32 <LinkedList<Device>::addElement(Device*)>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c342:	74 12                	je     c000c356 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c344:	50                   	push   eax
c000c345:	57                   	push   edi
c000c346:	56                   	push   esi
c000c347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c34a:	e8 c7 ff ff ff       	call   c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	eb e9                	jmp    c000c33f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c356:	5b                   	pop    ebx
c000c357:	5e                   	pop    esi
c000c358:	5f                   	pop    edi
c000c359:	c3                   	ret    

c000c35a <getDevicesOfType(DeviceType)>:
c000c35a:	53                   	push   ebx
c000c35b:	83 ec 14             	sub    esp,0x14
c000c35e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c362:	53                   	push   ebx
c000c363:	e8 a6 2b 01 00       	call   c001ef0e <LinkedList<Device>::LinkedList()>
c000c368:	83 c4 0c             	add    esp,0xc
c000c36b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c36f:	53                   	push   ebx
c000c370:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c376:	e8 9b ff ff ff       	call   c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c37b:	89 d8                	mov    eax,ebx
c000c37d:	83 c4 18             	add    esp,0x18
c000c380:	5b                   	pop    ebx
c000c381:	c2 04 00             	ret    0x4

c000c384 <HardDiskController::HardDiskController(char const*)>:
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38b:	83 ec 08             	sub    esp,0x8
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	50                   	push   eax
c000c393:	e8 42 fe ff ff       	call   c000c1da <Device::Device(char const*)>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	ba c8 0b 02 c0       	mov    edx,0xc0020bc8
c000c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a4:	89 10                	mov    DWORD PTR [eax],edx
c000c3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3aa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3b4:	90                   	nop
c000c3b5:	83 c4 0c             	add    esp,0xc
c000c3b8:	c3                   	ret    
c000c3b9:	90                   	nop
c000c3ba:	66 90                	xchg   ax,ax

c000c3bc <HardDiskController::~HardDiskController()>:
c000c3bc:	83 ec 0c             	sub    esp,0xc
c000c3bf:	ba c8 0b 02 c0       	mov    edx,0xc0020bc8
c000c3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c8:	89 10                	mov    DWORD PTR [eax],edx
c000c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ce:	83 ec 0c             	sub    esp,0xc
c000c3d1:	50                   	push   eax
c000c3d2:	e8 6d fb ff ff       	call   c000bf44 <Device::~Device()>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	90                   	nop
c000c3db:	83 c4 0c             	add    esp,0xc
c000c3de:	c3                   	ret    
c000c3df:	90                   	nop

c000c3e0 <HardDiskController::~HardDiskController()>:
c000c3e0:	83 ec 0c             	sub    esp,0xc
c000c3e3:	83 ec 0c             	sub    esp,0xc
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	e8 cd ff ff ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	83 ec 08             	sub    esp,0x8
c000c3f5:	68 58 01 00 00       	push   0x158
c000c3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fe:	e8 09 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	c3                   	ret    

c000c40a <PhysicalDisk::eject()>:
c000c40a:	83 c8 ff             	or     eax,0xffffffff
c000c40d:	c3                   	ret    

c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c415:	83 ec 08             	sub    esp,0x8
c000c418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41c:	50                   	push   eax
c000c41d:	e8 b8 fd ff ff       	call   c000c1da <Device::Device(char const*)>
c000c422:	83 c4 10             	add    esp,0x10
c000c425:	ba f4 0b 02 c0       	mov    edx,0xc0020bf4
c000c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42e:	89 10                	mov    DWORD PTR [eax],edx
c000c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c434:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c458:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c45c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c466:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c470:	90                   	nop
c000c471:	83 c4 0c             	add    esp,0xc
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <PhysicalDisk::startCache()>:
c000c476:	56                   	push   esi
c000c477:	53                   	push   ebx
c000c478:	83 ec 10             	sub    esp,0x10
c000c47b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c47f:	6a 44                	push   0x44
c000c481:	e8 28 b6 ff ff       	call   c0007aae <malloc>
c000c486:	89 c6                	mov    esi,eax
c000c488:	58                   	pop    eax
c000c489:	5a                   	pop    edx
c000c48a:	53                   	push   ebx
c000c48b:	56                   	push   esi
c000c48c:	e8 7b 17 00 00       	call   c000dc0c <VCache::VCache(PhysicalDisk*)>
c000c491:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c497:	83 c4 14             	add    esp,0x14
c000c49a:	5b                   	pop    ebx
c000c49b:	5e                   	pop    esi
c000c49c:	c3                   	ret    
c000c49d:	90                   	nop

c000c49e <PhysicalDisk::~PhysicalDisk()>:
c000c49e:	83 ec 0c             	sub    esp,0xc
c000c4a1:	ba f4 0b 02 c0       	mov    edx,0xc0020bf4
c000c4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4aa:	89 10                	mov    DWORD PTR [eax],edx
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	83 ec 0c             	sub    esp,0xc
c000c4b3:	50                   	push   eax
c000c4b4:	e8 8b fa ff ff       	call   c000bf44 <Device::~Device()>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	90                   	nop
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <PhysicalDisk::~PhysicalDisk()>:
c000c4c2:	83 ec 0c             	sub    esp,0xc
c000c4c5:	83 ec 0c             	sub    esp,0xc
c000c4c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4cc:	e8 cd ff ff ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	83 ec 08             	sub    esp,0x8
c000c4d7:	68 6c 01 00 00       	push   0x16c
c000c4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4e0:	e8 27 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c4e5:	83 c4 10             	add    esp,0x10
c000c4e8:	83 c4 0c             	add    esp,0xc
c000c4eb:	c3                   	ret    

c000c4ec <int_handler>:
c000c4ec:	55                   	push   ebp
c000c4ed:	57                   	push   edi
c000c4ee:	56                   	push   esi
c000c4ef:	53                   	push   ebx
c000c4f0:	83 ec 0c             	sub    esp,0xc
c000c4f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4f7:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c4fe:	74 0b                	je     c000c50b <int_handler+0x1f>
c000c500:	fa                   	cli    
c000c501:	f4                   	hlt    
c000c502:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c509:	75 f5                	jne    c000c500 <int_handler+0x14>
c000c50b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c50e:	8d 46 e0             	lea    eax,[esi-0x20]
c000c511:	83 f8 17             	cmp    eax,0x17
c000c514:	76 40                	jbe    c000c556 <int_handler+0x6a>
c000c516:	c1 e6 04             	shl    esi,0x4
c000c519:	31 db                	xor    ebx,ebx
c000c51b:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c521:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c527:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c52b:	85 c0                	test   eax,eax
c000c52d:	74 13                	je     c000c542 <int_handler+0x56>
c000c52f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c532:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c536:	74 2c                	je     c000c564 <int_handler+0x78>
c000c538:	83 ec 08             	sub    esp,0x8
c000c53b:	52                   	push   edx
c000c53c:	57                   	push   edi
c000c53d:	ff d0                	call   eax
c000c53f:	83 c4 10             	add    esp,0x10
c000c542:	83 c3 01             	add    ebx,0x1
c000c545:	83 fb 04             	cmp    ebx,0x4
c000c548:	75 dd                	jne    c000c527 <int_handler+0x3b>
c000c54a:	83 c4 0c             	add    esp,0xc
c000c54d:	31 c0                	xor    eax,eax
c000c54f:	5b                   	pop    ebx
c000c550:	31 d2                	xor    edx,edx
c000c552:	5e                   	pop    esi
c000c553:	5f                   	pop    edi
c000c554:	5d                   	pop    ebp
c000c555:	c3                   	ret    
c000c556:	83 ec 0c             	sub    esp,0xc
c000c559:	50                   	push   eax
c000c55a:	e8 e5 b0 00 00       	call   c0017644 <HalEndOfInterrupt(int)>
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	eb b2                	jmp    c000c516 <int_handler+0x2a>
c000c564:	83 ec 08             	sub    esp,0x8
c000c567:	52                   	push   edx
c000c568:	57                   	push   edi
c000c569:	ff d0                	call   eax
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	83 c4 0c             	add    esp,0xc
c000c571:	5b                   	pop    ebx
c000c572:	5e                   	pop    esi
c000c573:	5f                   	pop    edi
c000c574:	5d                   	pop    ebp
c000c575:	c3                   	ret    

c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c576:	56                   	push   esi
c000c577:	31 c0                	xor    eax,eax
c000c579:	53                   	push   ebx
c000c57a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c57e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c582:	89 ca                	mov    edx,ecx
c000c584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c588:	c1 e2 04             	shl    edx,0x4
c000c58b:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c593:	74 17                	je     c000c5ac <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c595:	83 c0 01             	add    eax,0x1
c000c598:	83 f8 04             	cmp    eax,0x4
c000c59b:	75 ee                	jne    c000c58b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c59d:	c7 44 24 0c 24 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020c24
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	e9 0d 46 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c000c5ac:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5af:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c5b6:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c5bd:	5b                   	pop    ebx
c000c5be:	5e                   	pop    esi
c000c5bf:	c3                   	ret    

c000c5c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5c0:	57                   	push   edi
c000c5c1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5c7:	56                   	push   esi
c000c5c8:	53                   	push   ebx
c000c5c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5d1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5d8:	74 54                	je     c000c62e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c5da:	89 c7                	mov    edi,eax
c000c5dc:	84 c0                	test   al,al
c000c5de:	74 1d                	je     c000c5fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c5e0:	83 fe 0f             	cmp    esi,0xf
c000c5e3:	0f 8f d5 00 00 00    	jg     c000c6be <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c5e9:	0f b6 b6 08 27 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd8f8]
c000c5f0:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c5f8:	d1 ef                	shr    edi,1
c000c5fa:	83 e7 01             	and    edi,0x1
c000c5fd:	83 ec 08             	sub    esp,0x8
c000c600:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c605:	31 db                	xor    ebx,ebx
c000c607:	50                   	push   eax
c000c608:	68 31 0c 02 c0       	push   0xc0020c31
c000c60d:	e8 27 e3 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c61a:	85 c0                	test   eax,eax
c000c61c:	7f 55                	jg     c000c673 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c61e:	83 ec 0c             	sub    esp,0xc
c000c621:	68 48 0c 02 c0       	push   0xc0020c48
c000c626:	e8 8e 45 00 00       	call   c0010bb9 <KePanic(char const*)>
c000c62b:	83 c4 10             	add    esp,0x10
c000c62e:	8d 7e 20             	lea    edi,[esi+0x20]
c000c631:	89 f8                	mov    eax,edi
c000c633:	31 d2                	xor    edx,edx
c000c635:	c1 e0 04             	shl    eax,0x4
c000c638:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c63f:	85 c9                	test   ecx,ecx
c000c641:	0f 84 8e 00 00 00    	je     c000c6d5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c647:	83 c2 01             	add    edx,0x1
c000c64a:	83 fa 04             	cmp    edx,0x4
c000c64d:	75 e9                	jne    c000c638 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	68 9c 0c 02 c0       	push   0xc0020c9c
c000c657:	e8 5d 45 00 00       	call   c0010bb9 <KePanic(char const*)>
c000c65c:	83 c4 10             	add    esp,0x10
c000c65f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c664:	5b                   	pop    ebx
c000c665:	5e                   	pop    esi
c000c666:	5f                   	pop    edi
c000c667:	c3                   	ret    
c000c668:	83 c3 01             	add    ebx,0x1
c000c66b:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c671:	7e ab                	jle    c000c61e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c673:	83 ec 08             	sub    esp,0x8
c000c676:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c67d:	56                   	push   esi
c000c67e:	50                   	push   eax
c000c67f:	e8 da 16 01 00       	call   c001dd5e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c684:	83 c4 10             	add    esp,0x10
c000c687:	84 c0                	test   al,al
c000c689:	74 dd                	je     c000c668 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c68b:	83 ec 04             	sub    esp,0x4
c000c68e:	89 f8                	mov    eax,edi
c000c690:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c697:	0f b6 f8             	movzx  edi,al
c000c69a:	57                   	push   edi
c000c69b:	8d 7e 20             	lea    edi,[esi+0x20]
c000c69e:	6a 00                	push   0x0
c000c6a0:	89 f8                	mov    eax,edi
c000c6a2:	0f b6 c0             	movzx  eax,al
c000c6a5:	50                   	push   eax
c000c6a6:	89 f0                	mov    eax,esi
c000c6a8:	6a 00                	push   0x0
c000c6aa:	0f b6 c0             	movzx  eax,al
c000c6ad:	6a 00                	push   0x0
c000c6af:	50                   	push   eax
c000c6b0:	53                   	push   ebx
c000c6b1:	e8 14 18 01 00       	call   c001deca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6b6:	83 c4 20             	add    esp,0x20
c000c6b9:	e9 73 ff ff ff       	jmp    c000c631 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c6be:	83 ec 0c             	sub    esp,0xc
c000c6c1:	31 ff                	xor    edi,edi
c000c6c3:	68 64 0c 02 c0       	push   0xc0020c64
c000c6c8:	e8 ec 44 00 00       	call   c0010bb9 <KePanic(char const*)>
c000c6cd:	83 c4 10             	add    esp,0x10
c000c6d0:	e9 28 ff ff ff       	jmp    c000c5fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c6d5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c6d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6dc:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c6e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6e7:	5b                   	pop    ebx
c000c6e8:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c6ef:	89 f0                	mov    eax,esi
c000c6f1:	5e                   	pop    esi
c000c6f2:	5f                   	pop    edi
c000c6f3:	c3                   	ret    

c000c6f4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6fc:	c1 e0 04             	shl    eax,0x4
c000c6ff:	8d 50 10             	lea    edx,[eax+0x10]
c000c702:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c708:	74 08                	je     c000c712 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c70a:	83 c0 04             	add    eax,0x4
c000c70d:	39 d0                	cmp    eax,edx
c000c70f:	75 f1                	jne    c000c702 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c711:	c3                   	ret    
c000c712:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c71c:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c726:	eb e2                	jmp    c000c70a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c728 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c728:	53                   	push   ebx
c000c729:	83 ec 08             	sub    esp,0x8
c000c72c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c730:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c735:	74 0e                	je     c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c737:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c73c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c743:	75 37                	jne    c000c77c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c749:	83 c0 20             	add    eax,0x20
c000c74c:	c1 e0 04             	shl    eax,0x4
c000c74f:	8d 50 10             	lea    edx,[eax+0x10]
c000c752:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c758:	74 0c                	je     c000c766 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c75a:	83 c0 04             	add    eax,0x4
c000c75d:	39 d0                	cmp    eax,edx
c000c75f:	75 f1                	jne    c000c752 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c761:	83 c4 08             	add    esp,0x8
c000c764:	5b                   	pop    ebx
c000c765:	c3                   	ret    
c000c766:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c770:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c77a:	eb de                	jmp    c000c75a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c77c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c781:	7f 11                	jg     c000c794 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c787:	0f b6 80 08 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd8f8]
c000c78e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c792:	eb b1                	jmp    c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c794:	83 ec 0c             	sub    esp,0xc
c000c797:	68 55 0c 02 c0       	push   0xc0020c55
c000c79c:	e8 18 44 00 00       	call   c0010bb9 <KePanic(char const*)>
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	eb 9f                	jmp    c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c7a6 <setupINTS()>:
c000c7a6:	31 c0                	xor    eax,eax
c000c7a8:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7b2:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c7bc:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c7c6:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c7d0:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c7da:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c7e4:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c7ee:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c7f8:	83 c0 10             	add    eax,0x10
c000c7fb:	3d 00 10 00 00       	cmp    eax,0x1000
c000c800:	75 a6                	jne    c000c7a8 <setupINTS()+0x2>
c000c802:	c3                   	ret    

c000c803 <convertLegacyIRQNumber(int)>:
c000c803:	83 ec 0c             	sub    esp,0xc
c000c806:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c810:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c817:	74 0c                	je     c000c825 <convertLegacyIRQNumber(int)+0x22>
c000c819:	83 f8 0f             	cmp    eax,0xf
c000c81c:	7f 0b                	jg     c000c829 <convertLegacyIRQNumber(int)+0x26>
c000c81e:	0f b6 80 08 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd8f8]
c000c825:	83 c4 0c             	add    esp,0xc
c000c828:	c3                   	ret    
c000c829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82d:	83 ec 0c             	sub    esp,0xc
c000c830:	68 64 0c 02 c0       	push   0xc0020c64
c000c835:	e8 7f 43 00 00       	call   c0010bb9 <KePanic(char const*)>
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c841:	83 c4 0c             	add    esp,0xc
c000c844:	c3                   	ret    
c000c845:	90                   	nop

c000c846 <startGUI(void*)>:
c000c846:	55                   	push   ebp
c000c847:	89 e5                	mov    ebp,esp
c000c849:	53                   	push   ebx
c000c84a:	83 ec 04             	sub    esp,0x4
c000c84d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c852:	83 e8 01             	sub    eax,0x1
c000c855:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c85a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c85f:	85 c0                	test   eax,eax
c000c861:	75 01                	jne    c000c864 <startGUI(void*)+0x1e>
c000c863:	fb                   	sti    
c000c864:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c86a:	83 ec 08             	sub    esp,0x8
c000c86d:	6a 01                	push   0x1
c000c86f:	68 c1 0c 02 c0       	push   0xc0020cc1
c000c874:	e8 a5 80 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000c879:	83 c4 10             	add    esp,0x10
c000c87c:	83 ec 08             	sub    esp,0x8
c000c87f:	53                   	push   ebx
c000c880:	50                   	push   eax
c000c881:	e8 c9 82 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	6a 01                	push   0x1
c000c894:	68 db 0c 02 c0       	push   0xc0020cdb
c000c899:	e8 80 80 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	83 ec 08             	sub    esp,0x8
c000c8a4:	53                   	push   ebx
c000c8a5:	50                   	push   eax
c000c8a6:	e8 a4 82 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	90                   	nop
c000c8af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8b2:	c9                   	leave  
c000c8b3:	c3                   	ret    

c000c8b4 <startGUIVESA(void*)>:
c000c8b4:	55                   	push   ebp
c000c8b5:	89 e5                	mov    ebp,esp
c000c8b7:	53                   	push   ebx
c000c8b8:	83 ec 04             	sub    esp,0x4
c000c8bb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c8c0:	83 e8 01             	sub    eax,0x1
c000c8c3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c8c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c8cd:	85 c0                	test   eax,eax
c000c8cf:	75 01                	jne    c000c8d2 <startGUIVESA(void*)+0x1e>
c000c8d1:	fb                   	sti    
c000c8d2:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8d8:	83 ec 08             	sub    esp,0x8
c000c8db:	6a 01                	push   0x1
c000c8dd:	68 f9 0c 02 c0       	push   0xc0020cf9
c000c8e2:	e8 37 80 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000c8e7:	83 c4 10             	add    esp,0x10
c000c8ea:	83 ec 08             	sub    esp,0x8
c000c8ed:	53                   	push   ebx
c000c8ee:	50                   	push   eax
c000c8ef:	e8 5b 82 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8fd:	83 ec 08             	sub    esp,0x8
c000c900:	6a 01                	push   0x1
c000c902:	68 db 0c 02 c0       	push   0xc0020cdb
c000c907:	e8 12 80 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000c90c:	83 c4 10             	add    esp,0x10
c000c90f:	83 ec 08             	sub    esp,0x8
c000c912:	53                   	push   ebx
c000c913:	50                   	push   eax
c000c914:	e8 36 82 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c919:	83 c4 10             	add    esp,0x10
c000c91c:	90                   	nop
c000c91d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c920:	c9                   	leave  
c000c921:	c3                   	ret    

c000c922 <sendKeyToTerminal(unsigned char)>:
c000c922:	55                   	push   ebp
c000c923:	89 e5                	mov    ebp,esp
c000c925:	83 ec 28             	sub    esp,0x28
c000c928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c92e:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c933:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c937:	83 ec 08             	sub    esp,0x8
c000c93a:	52                   	push   edx
c000c93b:	50                   	push   eax
c000c93c:	e8 67 c4 ff ff       	call   c0008da8 <VgaText::receiveKey(unsigned char)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c948:	83 f8 0a             	cmp    eax,0xa
c000c94b:	74 16                	je     c000c963 <sendKeyToTerminal(unsigned char)+0x41>
c000c94d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c951:	83 f8 03             	cmp    eax,0x3
c000c954:	74 0d                	je     c000c963 <sendKeyToTerminal(unsigned char)+0x41>
c000c956:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c95a:	83 f8 1c             	cmp    eax,0x1c
c000c95d:	0f 85 97 00 00 00    	jne    c000c9fa <sendKeyToTerminal(unsigned char)+0xd8>
c000c963:	fa                   	cli    
c000c964:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c969:	83 c0 01             	add    eax,0x1
c000c96c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c971:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c976:	83 c0 01             	add    eax,0x1
c000c979:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c97e:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c983:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c986:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c990:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c994:	74 1f                	je     c000c9b5 <sendKeyToTerminal(unsigned char)+0x93>
c000c996:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c999:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c99c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c99f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9a5:	83 ec 0c             	sub    esp,0xc
c000c9a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9ab:	e8 e4 8e 00 00       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c000c9b0:	83 c4 10             	add    esp,0x10
c000c9b3:	eb db                	jmp    c000c990 <sendKeyToTerminal(unsigned char)+0x6e>
c000c9b5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9ba:	83 e8 01             	sub    eax,0x1
c000c9bd:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c9c2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9c7:	85 c0                	test   eax,eax
c000c9c9:	75 18                	jne    c000c9e3 <sendKeyToTerminal(unsigned char)+0xc1>
c000c9cb:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c9d0:	85 c0                	test   eax,eax
c000c9d2:	74 0f                	je     c000c9e3 <sendKeyToTerminal(unsigned char)+0xc1>
c000c9d4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c9de:	e8 99 89 00 00       	call   c001537c <schedule()>
c000c9e3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c9e8:	83 e8 01             	sub    eax,0x1
c000c9eb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c9f0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <sendKeyToTerminal(unsigned char)+0xd8>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	c9                   	leave  
c000c9fc:	c3                   	ret    

c000c9fd <sendKeyboardToken(KeyboardToken)>:
c000c9fd:	55                   	push   ebp
c000c9fe:	89 e5                	mov    ebp,esp
c000ca00:	83 ec 18             	sub    esp,0x18
c000ca03:	e8 01 42 00 00       	call   c0010c09 <KeUserIOReceived()>
c000ca08:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	83 f2 01             	xor    edx,0x1
c000ca14:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000ca1a:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ca1f:	85 c0                	test   eax,eax
c000ca21:	74 24                	je     c000ca47 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca23:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000ca29:	83 ec 04             	sub    esp,0x4
c000ca2c:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ca31:	83 ec 08             	sub    esp,0x8
c000ca34:	89 e2                	mov    edx,esp
c000ca36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca39:	89 02                	mov    DWORD PTR [edx],eax
c000ca3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca3e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca42:	ff d1                	call   ecx
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca4b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca4e:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000ca53:	0f b6 d2             	movzx  edx,dl
c000ca56:	0f b6 c0             	movzx  eax,al
c000ca59:	39 c2                	cmp    edx,eax
c000ca5b:	74 1c                	je     c000ca79 <sendKeyboardToken(KeyboardToken)+0x7c>
c000ca5d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca60:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000ca65:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000ca6a:	0f b6 c0             	movzx  eax,al
c000ca6d:	83 ec 0c             	sub    esp,0xc
c000ca70:	50                   	push   eax
c000ca71:	e8 7e ba ff ff       	call   c00084f4 <setTerminalScrollLock(bool)>
c000ca76:	83 c4 10             	add    esp,0x10
c000ca79:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca7c:	0f b6 c0             	movzx  eax,al
c000ca7f:	85 c0                	test   eax,eax
c000ca81:	0f 84 da 00 00 00    	je     c000cb61 <sendKeyboardToken(KeyboardToken)+0x164>
c000ca87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	3d 18 03 00 00       	cmp    eax,0x318
c000ca92:	75 06                	jne    c000ca9a <sendKeyboardToken(KeyboardToken)+0x9d>
c000ca94:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca9d:	0f b7 c0             	movzx  eax,ax
c000caa0:	3d 19 03 00 00       	cmp    eax,0x319
c000caa5:	75 06                	jne    c000caad <sendKeyboardToken(KeyboardToken)+0xb0>
c000caa7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000caad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab0:	0f b7 c0             	movzx  eax,ax
c000cab3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cab8:	75 06                	jne    c000cac0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000caba:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac3:	0f b7 c0             	movzx  eax,ax
c000cac6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cacb:	75 06                	jne    c000cad3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000cacd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad6:	0f b7 c0             	movzx  eax,ax
c000cad9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cade:	75 06                	jne    c000cae6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cae0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	3d 1d 03 00 00       	cmp    eax,0x31d
c000caf1:	75 06                	jne    c000caf9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000caf3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafc:	0f b7 c0             	movzx  eax,ax
c000caff:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb04:	75 06                	jne    c000cb0c <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb06:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0f:	0f b7 c0             	movzx  eax,ax
c000cb12:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb17:	75 06                	jne    c000cb1f <sendKeyboardToken(KeyboardToken)+0x122>
c000cb19:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb22:	0f b7 c0             	movzx  eax,ax
c000cb25:	3d 20 03 00 00       	cmp    eax,0x320
c000cb2a:	75 06                	jne    c000cb32 <sendKeyboardToken(KeyboardToken)+0x135>
c000cb2c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	3d 21 03 00 00       	cmp    eax,0x321
c000cb3d:	75 06                	jne    c000cb45 <sendKeyboardToken(KeyboardToken)+0x148>
c000cb3f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb48:	0f b7 c0             	movzx  eax,ax
c000cb4b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb50:	0f 85 f1 00 00 00    	jne    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb56:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb5c:	e9 e6 00 00 00       	jmp    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb64:	0f b7 c0             	movzx  eax,ax
c000cb67:	3d 18 03 00 00       	cmp    eax,0x318
c000cb6c:	75 0a                	jne    c000cb78 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cb6e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb74:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7b:	0f b7 c0             	movzx  eax,ax
c000cb7e:	3d 19 03 00 00       	cmp    eax,0x319
c000cb83:	75 0a                	jne    c000cb8f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb85:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb92:	0f b7 c0             	movzx  eax,ax
c000cb95:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cb9a:	75 0a                	jne    c000cba6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cb9c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cba2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba9:	0f b7 c0             	movzx  eax,ax
c000cbac:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbb1:	75 0a                	jne    c000cbbd <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cbb3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cbb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc0:	0f b7 c0             	movzx  eax,ax
c000cbc3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cbc8:	75 0a                	jne    c000cbd4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cbca:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cbd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd7:	0f b7 c0             	movzx  eax,ax
c000cbda:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cbdf:	75 0a                	jne    c000cbeb <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cbe1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cbe7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbee:	0f b7 c0             	movzx  eax,ax
c000cbf1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cbf6:	75 0a                	jne    c000cc02 <sendKeyboardToken(KeyboardToken)+0x205>
c000cbf8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cbfe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc05:	0f b7 c0             	movzx  eax,ax
c000cc08:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc0d:	75 0a                	jne    c000cc19 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc0f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1c:	0f b7 c0             	movzx  eax,ax
c000cc1f:	3d 20 03 00 00       	cmp    eax,0x320
c000cc24:	75 0a                	jne    c000cc30 <sendKeyboardToken(KeyboardToken)+0x233>
c000cc26:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc33:	0f b7 c0             	movzx  eax,ax
c000cc36:	3d 21 03 00 00       	cmp    eax,0x321
c000cc3b:	75 0a                	jne    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc3d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4a:	0f b7 c0             	movzx  eax,ax
c000cc4d:	3d 00 02 00 00       	cmp    eax,0x200
c000cc52:	75 2f                	jne    c000cc83 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc54:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cc59:	83 f0 01             	xor    eax,0x1
c000cc5c:	0f b6 c0             	movzx  eax,al
c000cc5f:	85 c0                	test   eax,eax
c000cc61:	74 20                	je     c000cc83 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc63:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cc68:	6a 01                	push   0x1
c000cc6a:	6a 00                	push   0x0
c000cc6c:	68 46 c8 00 c0       	push   0xc000c846
c000cc71:	50                   	push   eax
c000cc72:	e8 b5 84 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000cc81:	eb 3a                	jmp    c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc86:	0f b7 c0             	movzx  eax,ax
c000cc89:	3d 01 02 00 00       	cmp    eax,0x201
c000cc8e:	75 2d                	jne    c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc90:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cc95:	83 f0 01             	xor    eax,0x1
c000cc98:	0f b6 c0             	movzx  eax,al
c000cc9b:	85 c0                	test   eax,eax
c000cc9d:	74 1e                	je     c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc9f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cca4:	6a 01                	push   0x1
c000cca6:	6a 00                	push   0x0
c000cca8:	68 b4 c8 00 c0       	push   0xc000c8b4
c000ccad:	50                   	push   eax
c000ccae:	e8 79 84 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c000ccb3:	83 c4 10             	add    esp,0x10
c000ccb6:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ccbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc0:	0f b7 c0             	movzx  eax,ax
c000ccc3:	3d 25 03 00 00       	cmp    eax,0x325
c000ccc8:	75 06                	jne    c000ccd0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ccca:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ccd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd3:	0f b7 c0             	movzx  eax,ax
c000ccd6:	3d 24 03 00 00       	cmp    eax,0x324
c000ccdb:	75 06                	jne    c000cce3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ccdd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cce6:	0f b7 c0             	movzx  eax,ax
c000cce9:	3d 23 03 00 00       	cmp    eax,0x323
c000ccee:	75 06                	jne    c000ccf6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ccf0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ccf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf9:	0f b7 c0             	movzx  eax,ax
c000ccfc:	3d 26 03 00 00       	cmp    eax,0x326
c000cd01:	75 06                	jne    c000cd09 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd03:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	0f b7 c0             	movzx  eax,ax
c000cd0f:	3d 27 03 00 00       	cmp    eax,0x327
c000cd14:	75 06                	jne    c000cd1c <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd16:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd1f:	0f b7 c0             	movzx  eax,ax
c000cd22:	3d 22 03 00 00       	cmp    eax,0x322
c000cd27:	75 06                	jne    c000cd2f <sendKeyboardToken(KeyboardToken)+0x332>
c000cd29:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd2f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd33:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd36:	83 f0 01             	xor    eax,0x1
c000cd39:	0f b6 c0             	movzx  eax,al
c000cd3c:	85 c0                	test   eax,eax
c000cd3e:	74 7c                	je     c000cdbc <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd40:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cd45:	0f b6 c0             	movzx  eax,al
c000cd48:	85 c0                	test   eax,eax
c000cd4a:	74 43                	je     c000cd8f <sendKeyboardToken(KeyboardToken)+0x392>
c000cd4c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd50:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cd54:	85 c0                	test   eax,eax
c000cd56:	74 2b                	je     c000cd83 <sendKeyboardToken(KeyboardToken)+0x386>
c000cd58:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cd5e:	89 d0                	mov    eax,edx
c000cd60:	c1 e0 02             	shl    eax,0x2
c000cd63:	01 d0                	add    eax,edx
c000cd65:	01 c0                	add    eax,eax
c000cd67:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6f:	0f b7 c0             	movzx  eax,ax
c000cd72:	8d 50 d0             	lea    edx,[eax-0x30]
c000cd75:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd7a:	01 d0                	add    eax,edx
c000cd7c:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cd81:	eb 71                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd83:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cd8d:	eb 65                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd8f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd94:	85 c0                	test   eax,eax
c000cd96:	74 18                	je     c000cdb0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cd98:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd9d:	0f b6 c0             	movzx  eax,al
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	50                   	push   eax
c000cda4:	e8 79 fb ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdb0:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdba:	eb 38                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbf:	0f b7 c0             	movzx  eax,ax
c000cdc2:	3d 01 01 00 00       	cmp    eax,0x101
c000cdc7:	75 2b                	jne    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdc9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdce:	85 c0                	test   eax,eax
c000cdd0:	74 18                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cdd2:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdd7:	0f b6 c0             	movzx  eax,al
c000cdda:	83 ec 0c             	sub    esp,0xc
c000cddd:	50                   	push   eax
c000cdde:	e8 3f fb ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdea:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdf4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 5a                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce04:	83 f0 01             	xor    eax,0x1
c000ce07:	0f b6 c0             	movzx  eax,al
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	74 4d                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce0e:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ce13:	83 f0 01             	xor    eax,0x1
c000ce16:	0f b6 c0             	movzx  eax,al
c000ce19:	85 c0                	test   eax,eax
c000ce1b:	74 3e                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce20:	0f b7 c0             	movzx  eax,ax
c000ce23:	83 f8 1f             	cmp    eax,0x1f
c000ce26:	76 0b                	jbe    c000ce33 <sendKeyboardToken(KeyboardToken)+0x436>
c000ce28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce2b:	0f b7 c0             	movzx  eax,ax
c000ce2e:	83 f8 7e             	cmp    eax,0x7e
c000ce31:	76 16                	jbe    c000ce49 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce36:	0f b7 c0             	movzx  eax,ax
c000ce39:	83 f8 0a             	cmp    eax,0xa
c000ce3c:	74 0b                	je     c000ce49 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce41:	0f b7 c0             	movzx  eax,ax
c000ce44:	83 f8 08             	cmp    eax,0x8
c000ce47:	75 12                	jne    c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce4c:	0f b6 c0             	movzx  eax,al
c000ce4f:	83 ec 0c             	sub    esp,0xc
c000ce52:	50                   	push   eax
c000ce53:	e8 ca fa ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce5e:	83 f0 01             	xor    eax,0x1
c000ce61:	0f b6 c0             	movzx  eax,al
c000ce64:	85 c0                	test   eax,eax
c000ce66:	74 5d                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce68:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	74 50                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce75:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ce7a:	0f b6 c0             	movzx  eax,al
c000ce7d:	85 c0                	test   eax,eax
c000ce7f:	74 44                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce84:	0f b7 c0             	movzx  eax,ax
c000ce87:	83 f8 3f             	cmp    eax,0x3f
c000ce8a:	76 39                	jbe    c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce8f:	0f b7 c0             	movzx  eax,ax
c000ce92:	83 f8 7f             	cmp    eax,0x7f
c000ce95:	77 2e                	ja     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce9a:	88 c2                	mov    dl,al
c000ce9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce9f:	0f b7 c0             	movzx  eax,ax
c000cea2:	83 f8 5f             	cmp    eax,0x5f
c000cea5:	76 04                	jbe    c000ceab <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cea7:	b0 20                	mov    al,0x20
c000cea9:	eb 02                	jmp    c000cead <sendKeyboardToken(KeyboardToken)+0x4b0>
c000ceab:	b0 00                	mov    al,0x0
c000cead:	89 d1                	mov    ecx,edx
c000ceaf:	29 c1                	sub    ecx,eax
c000ceb1:	89 c8                	mov    eax,ecx
c000ceb3:	83 e8 40             	sub    eax,0x40
c000ceb6:	0f b6 c0             	movzx  eax,al
c000ceb9:	83 ec 0c             	sub    esp,0xc
c000cebc:	50                   	push   eax
c000cebd:	e8 60 fa ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cec2:	83 c4 10             	add    esp,0x10
c000cec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec8:	0f b7 c0             	movzx  eax,ax
c000cecb:	3d 00 03 00 00       	cmp    eax,0x300
c000ced0:	75 12                	jne    c000cee4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ced2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ced5:	83 f0 01             	xor    eax,0x1
c000ced8:	0f b6 c0             	movzx  eax,al
c000cedb:	85 c0                	test   eax,eax
c000cedd:	74 05                	je     c000cee4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cedf:	e8 11 b6 ff ff       	call   c00084f5 <doTerminalCycle()>
c000cee4:	90                   	nop
c000cee5:	c9                   	leave  
c000cee6:	c3                   	ret    

c000cee7 <clearInternalKeybuffer(VgaText*)>:
c000cee7:	55                   	push   ebp
c000cee8:	89 e5                	mov    ebp,esp
c000ceea:	83 ec 08             	sub    esp,0x8
c000ceed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cef0:	05 02 01 00 00       	add    eax,0x102
c000cef5:	83 ec 0c             	sub    esp,0xc
c000cef8:	50                   	push   eax
c000cef9:	e8 72 36 ff ff       	call   c0000570 <strlen>
c000cefe:	83 c4 10             	add    esp,0x10
c000cf01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf04:	81 c2 02 01 00 00    	add    edx,0x102
c000cf0a:	83 ec 04             	sub    esp,0x4
c000cf0d:	50                   	push   eax
c000cf0e:	6a 00                	push   0x0
c000cf10:	52                   	push   edx
c000cf11:	e8 da 35 ff ff       	call   c00004f0 <memset>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	90                   	nop
c000cf1a:	c9                   	leave  
c000cf1b:	c3                   	ret    

c000cf1c <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf1c:	55                   	push   ebp
c000cf1d:	89 e5                	mov    ebp,esp
c000cf1f:	83 ec 18             	sub    esp,0x18
c000cf22:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cf27:	85 c0                	test   eax,eax
c000cf29:	74 2a                	je     c000cf55 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf2b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf31:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cf37:	83 ec 04             	sub    esp,0x4
c000cf3a:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	89 e2                	mov    edx,esp
c000cf44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cf47:	89 02                	mov    DWORD PTR [edx],eax
c000cf49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf4c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cf50:	ff d1                	call   ecx
c000cf52:	83 c4 10             	add    esp,0x10
c000cf55:	fb                   	sti    
c000cf56:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cf5d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cf61:	0f 84 0d 01 00 00    	je     c000d074 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cf67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf6a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cf70:	0f be c0             	movsx  eax,al
c000cf73:	85 c0                	test   eax,eax
c000cf75:	75 2c                	jne    c000cfa3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cf77:	fa                   	cli    
c000cf78:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf7d:	83 c0 01             	add    eax,0x1
c000cf80:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cf85:	e8 f2 83 00 00       	call   c001537c <schedule()>
c000cf8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf8f:	83 e8 01             	sub    eax,0x1
c000cf92:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cf97:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf9c:	85 c0                	test   eax,eax
c000cf9e:	75 c7                	jne    c000cf67 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfa0:	fb                   	sti    
c000cfa1:	eb c4                	jmp    c000cf67 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfa6:	8d 50 01             	lea    edx,[eax+0x1]
c000cfa9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cfaf:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cfb5:	88 10                	mov    BYTE PTR [eax],dl
c000cfb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfba:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfc0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cfc3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfc7:	83 f8 03             	cmp    eax,0x3
c000cfca:	75 1e                	jne    c000cfea <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cfcc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cfd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cfd6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cfdc:	83 ec 08             	sub    esp,0x8
c000cfdf:	6a 02                	push   0x2
c000cfe1:	50                   	push   eax
c000cfe2:	e8 73 40 00 00       	call   c001105a <KeRaiseSignal(SigHandlerBlock*, int)>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfee:	83 f8 1c             	cmp    eax,0x1c
c000cff1:	75 1e                	jne    c000d011 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cff3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cff8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cffd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d003:	83 ec 08             	sub    esp,0x8
c000d006:	6a 09                	push   0x9
c000d008:	50                   	push   eax
c000d009:	e8 4c 40 00 00       	call   c001105a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d014:	05 02 01 00 00       	add    eax,0x102
c000d019:	83 ec 0c             	sub    esp,0xc
c000d01c:	50                   	push   eax
c000d01d:	e8 4e 35 ff ff       	call   c0000570 <strlen>
c000d022:	83 c4 10             	add    esp,0x10
c000d025:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d028:	81 c2 02 01 00 00    	add    edx,0x102
c000d02e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d031:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d034:	81 c2 02 01 00 00    	add    edx,0x102
c000d03a:	83 ec 04             	sub    esp,0x4
c000d03d:	50                   	push   eax
c000d03e:	51                   	push   ecx
c000d03f:	52                   	push   edx
c000d040:	e8 8b 33 ff ff       	call   c00003d0 <memmove>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d04c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d050:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d054:	83 f8 0a             	cmp    eax,0xa
c000d057:	74 16                	je     c000d06f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d059:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d05d:	83 f8 03             	cmp    eax,0x3
c000d060:	74 0d                	je     c000d06f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d062:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d066:	83 f8 1c             	cmp    eax,0x1c
c000d069:	0f 85 ee fe ff ff    	jne    c000cf5d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d06f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d072:	eb 03                	jmp    c000d077 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d074:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d077:	c9                   	leave  
c000d078:	c3                   	ret    
c000d079:	90                   	nop

c000d07a <Keyboard::Keyboard(char const*)>:
c000d07a:	83 ec 0c             	sub    esp,0xc
c000d07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d088:	50                   	push   eax
c000d089:	e8 4c f1 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d08e:	83 c4 10             	add    esp,0x10
c000d091:	ba 1c 0d 02 c0       	mov    edx,0xc0020d1c
c000d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09a:	89 10                	mov    DWORD PTR [eax],edx
c000d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0aa:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000d0b1:	90                   	nop
c000d0b2:	83 c4 0c             	add    esp,0xc
c000d0b5:	c3                   	ret    

c000d0b6 <Keyboard::~Keyboard()>:
c000d0b6:	83 ec 0c             	sub    esp,0xc
c000d0b9:	ba 1c 0d 02 c0       	mov    edx,0xc0020d1c
c000d0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c2:	89 10                	mov    DWORD PTR [eax],edx
c000d0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c8:	83 ec 0c             	sub    esp,0xc
c000d0cb:	50                   	push   eax
c000d0cc:	e8 73 ee ff ff       	call   c000bf44 <Device::~Device()>
c000d0d1:	83 c4 10             	add    esp,0x10
c000d0d4:	90                   	nop
c000d0d5:	83 c4 0c             	add    esp,0xc
c000d0d8:	c3                   	ret    
c000d0d9:	90                   	nop

c000d0da <Keyboard::~Keyboard()>:
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	83 ec 0c             	sub    esp,0xc
c000d0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e4:	e8 cd ff ff ff       	call   c000d0b6 <Keyboard::~Keyboard()>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	83 ec 08             	sub    esp,0x8
c000d0ef:	68 5c 01 00 00       	push   0x15c
c000d0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f8:	e8 0f d7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d0fd:	83 c4 10             	add    esp,0x10
c000d100:	83 c4 0c             	add    esp,0xc
c000d103:	c3                   	ret    

c000d104 <LogicalDisk::close(int, int, void*)>:
c000d104:	83 c8 ff             	or     eax,0xffffffff
c000d107:	c3                   	ret    

c000d108 <LogicalDisk::~LogicalDisk()>:
c000d108:	83 ec 0c             	sub    esp,0xc
c000d10b:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c000d110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d114:	89 10                	mov    DWORD PTR [eax],edx
c000d116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	50                   	push   eax
c000d11e:	e8 21 ee ff ff       	call   c000bf44 <Device::~Device()>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	90                   	nop
c000d127:	83 c4 0c             	add    esp,0xc
c000d12a:	c3                   	ret    
c000d12b:	90                   	nop

c000d12c <LogicalDisk::~LogicalDisk()>:
c000d12c:	83 ec 0c             	sub    esp,0xc
c000d12f:	83 ec 0c             	sub    esp,0xc
c000d132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d136:	e8 cd ff ff ff       	call   c000d108 <LogicalDisk::~LogicalDisk()>
c000d13b:	83 c4 10             	add    esp,0x10
c000d13e:	83 ec 08             	sub    esp,0x8
c000d141:	68 78 01 00 00       	push   0x178
c000d146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14a:	e8 bd d6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d14f:	83 c4 10             	add    esp,0x10
c000d152:	83 c4 0c             	add    esp,0xc
c000d155:	c3                   	ret    

c000d156 <LogicalDisk::open(int, int, void*)>:
c000d156:	83 ec 18             	sub    esp,0x18
c000d159:	68 48 0d 02 c0       	push   0xc0020d48
c000d15e:	e8 56 3a 00 00       	call   c0010bb9 <KePanic(char const*)>
c000d163:	83 c8 ff             	or     eax,0xffffffff
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	c3                   	ret    

c000d16a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d16a:	53                   	push   ebx
c000d16b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d173:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d177:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d17d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d183:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d189:	77 10                	ja     c000d19b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d18b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d191:	89 d3                	mov    ebx,edx
c000d193:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d199:	72 05                	jb     c000d1a0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d19b:	83 c8 ff             	or     eax,0xffffffff
c000d19e:	89 c2                	mov    edx,eax
c000d1a0:	5b                   	pop    ebx
c000d1a1:	c3                   	ret    

c000d1a2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1a2:	56                   	push   esi
c000d1a3:	83 c8 ff             	or     eax,0xffffffff
c000d1a6:	53                   	push   ebx
c000d1a7:	89 c2                	mov    edx,eax
c000d1a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1ad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1bb:	77 27                	ja     c000d1e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1bd:	89 d8                	mov    eax,ebx
c000d1bf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d1c5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d1cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d1d0:	89 c2                	mov    edx,eax
c000d1d2:	73 10                	jae    c000d1e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1d4:	89 c8                	mov    eax,ecx
c000d1d6:	89 da                	mov    edx,ebx
c000d1d8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d1de:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d1e4:	5b                   	pop    ebx
c000d1e5:	5e                   	pop    esi
c000d1e6:	c3                   	ret    
c000d1e7:	90                   	nop

c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d1e8:	83 ec 1c             	sub    esp,0x1c
c000d1eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d1fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d202:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d206:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d20a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d20e:	83 ec 08             	sub    esp,0x8
c000d211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 bf ef ff ff       	call   c000c1da <Device::Device(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c000d223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d227:	89 10                	mov    DWORD PTR [eax],edx
c000d229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d22d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d238:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d243:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d258:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d260:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d264:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d26a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d270:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d274:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d277:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d27b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d281:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d28b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d28f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d299:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2a3:	90                   	nop
c000d2a4:	83 c4 1c             	add    esp,0x1c
c000d2a7:	c3                   	ret    

c000d2a8 <LogicalDisk::assignDriveLetter()>:
c000d2a8:	55                   	push   ebp
c000d2a9:	57                   	push   edi
c000d2aa:	56                   	push   esi
c000d2ab:	53                   	push   ebx
c000d2ac:	83 ec 14             	sub    esp,0x14
c000d2af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2b3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d2b9:	b0 41                	mov    al,0x41
c000d2bb:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d2c1:	84 d2                	test   dl,dl
c000d2c3:	75 02                	jne    c000d2c7 <LogicalDisk::assignDriveLetter()+0x1f>
c000d2c5:	b0 43                	mov    al,0x43
c000d2c7:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d2cd:	0f b6 ca             	movzx  ecx,dl
c000d2d0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d2d4:	0f be e8             	movsx  ebp,al
c000d2d7:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d2dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d2e1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d2e5:	3c 43                	cmp    al,0x43
c000d2e7:	75 10                	jne    c000d2f9 <LogicalDisk::assignDriveLetter()+0x51>
c000d2e9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d2f0:	75 5a                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d2f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d2f7:	75 53                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d2f9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d2fc:	ba 01 00 00 00       	mov    edx,0x1
c000d301:	89 34 24             	mov    DWORD PTR [esp],esi
c000d304:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d307:	d3 e2                	shl    edx,cl
c000d309:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d30d:	89 d7                	mov    edi,edx
c000d30f:	89 d6                	mov    esi,edx
c000d311:	c1 ff 1f             	sar    edi,0x1f
c000d314:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d318:	21 f9                	and    ecx,edi
c000d31a:	09 d1                	or     ecx,edx
c000d31c:	75 2e                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d31e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d322:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d326:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d32c:	09 f2                	or     edx,esi
c000d32e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d331:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d337:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d33e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d342:	09 fa                	or     edx,edi
c000d344:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d34a:	eb 0d                	jmp    c000d359 <LogicalDisk::assignDriveLetter()+0xb1>
c000d34c:	8d 50 01             	lea    edx,[eax+0x1]
c000d34f:	45                   	inc    ebp
c000d350:	88 d0                	mov    al,dl
c000d352:	80 fa 5b             	cmp    dl,0x5b
c000d355:	75 8e                	jne    c000d2e5 <LogicalDisk::assignDriveLetter()+0x3d>
c000d357:	31 c0                	xor    eax,eax
c000d359:	83 c4 14             	add    esp,0x14
c000d35c:	5b                   	pop    ebx
c000d35d:	5e                   	pop    esi
c000d35e:	5f                   	pop    edi
c000d35f:	5d                   	pop    ebp
c000d360:	c3                   	ret    
c000d361:	90                   	nop

c000d362 <LogicalDisk::mount()>:
c000d362:	56                   	push   esi
c000d363:	53                   	push   ebx
c000d364:	53                   	push   ebx
c000d365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d369:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d36f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d379:	85 db                	test   ebx,ebx
c000d37b:	74 27                	je     c000d3a4 <LogicalDisk::mount()+0x42>
c000d37d:	51                   	push   ecx
c000d37e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d385:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d387:	83 e8 41             	sub    eax,0x41
c000d38a:	50                   	push   eax
c000d38b:	56                   	push   esi
c000d38c:	53                   	push   ebx
c000d38d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	84 c0                	test   al,al
c000d395:	74 08                	je     c000d39f <LogicalDisk::mount()+0x3d>
c000d397:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d39d:	eb 07                	jmp    c000d3a6 <LogicalDisk::mount()+0x44>
c000d39f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3a2:	eb d5                	jmp    c000d379 <LogicalDisk::mount()+0x17>
c000d3a4:	31 c0                	xor    eax,eax
c000d3a6:	5a                   	pop    edx
c000d3a7:	5b                   	pop    ebx
c000d3a8:	5e                   	pop    esi
c000d3a9:	c3                   	ret    

c000d3aa <LogicalDisk::unmount()>:
c000d3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ae:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d3b8:	c3                   	ret    
c000d3b9:	90                   	nop

c000d3ba <LogicalDisk::eject()>:
c000d3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3ca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d3cd:	90                   	nop

c000d3ce <LogicalDisk::unassignDriveLetter()>:
c000d3ce:	57                   	push   edi
c000d3cf:	56                   	push   esi
c000d3d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d3db:	85 c9                	test   ecx,ecx
c000d3dd:	75 0f                	jne    c000d3ee <LogicalDisk::unassignDriveLetter()+0x20>
c000d3df:	c7 44 24 0c 6c 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d6c
c000d3e7:	5e                   	pop    esi
c000d3e8:	5f                   	pop    edi
c000d3e9:	e9 cb 37 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c000d3ee:	83 e9 41             	sub    ecx,0x41
c000d3f1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d3f8:	b8 01 00 00 00       	mov    eax,0x1
c000d3fd:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d408:	d3 e0                	shl    eax,cl
c000d40a:	89 c7                	mov    edi,eax
c000d40c:	f7 d0                	not    eax
c000d40e:	c1 ff 1f             	sar    edi,0x1f
c000d411:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d417:	89 fe                	mov    esi,edi
c000d419:	f7 d6                	not    esi
c000d41b:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d421:	5e                   	pop    esi
c000d422:	5f                   	pop    edi
c000d423:	c3                   	ret    

c000d424 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d424:	57                   	push   edi
c000d425:	56                   	push   esi
c000d426:	53                   	push   ebx
c000d427:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d42b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d42f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d437:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d43d:	77 41                	ja     c000d480 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d43f:	99                   	cdq    
c000d440:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d446:	01 c8                	add    eax,ecx
c000d448:	11 da                	adc    edx,ebx
c000d44a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d450:	19 d7                	sbb    edi,edx
c000d452:	72 33                	jb     c000d487 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d454:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d45a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d460:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d464:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d468:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d46e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d478:	5b                   	pop    ebx
c000d479:	5e                   	pop    esi
c000d47a:	5f                   	pop    edi
c000d47b:	e9 c6 0a 00 00       	jmp    c000df46 <VCache::read(unsigned long long, int, void*)>
c000d480:	b8 05 00 00 00       	mov    eax,0x5
c000d485:	eb 05                	jmp    c000d48c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d487:	b8 07 00 00 00       	mov    eax,0x7
c000d48c:	5b                   	pop    ebx
c000d48d:	5e                   	pop    esi
c000d48e:	5f                   	pop    edi
c000d48f:	c3                   	ret    

c000d490 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d490:	57                   	push   edi
c000d491:	56                   	push   esi
c000d492:	53                   	push   ebx
c000d493:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d49b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4a9:	77 41                	ja     c000d4ec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4ab:	99                   	cdq    
c000d4ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d4b2:	01 c8                	add    eax,ecx
c000d4b4:	11 da                	adc    edx,ebx
c000d4b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4bc:	19 d7                	sbb    edi,edx
c000d4be:	72 33                	jb     c000d4f3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d4c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d4c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e4:	5b                   	pop    ebx
c000d4e5:	5e                   	pop    esi
c000d4e6:	5f                   	pop    edi
c000d4e7:	e9 6c 09 00 00       	jmp    c000de58 <VCache::write(unsigned long long, int, void*)>
c000d4ec:	b8 05 00 00 00       	mov    eax,0x5
c000d4f1:	eb 05                	jmp    c000d4f8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d4f3:	b8 07 00 00 00       	mov    eax,0x7
c000d4f8:	5b                   	pop    ebx
c000d4f9:	5e                   	pop    esi
c000d4fa:	5f                   	pop    edi
c000d4fb:	c3                   	ret    

c000d4fc <Mouse::Mouse(char const*)>:
c000d4fc:	83 ec 0c             	sub    esp,0xc
c000d4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d503:	83 ec 08             	sub    esp,0x8
c000d506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50a:	50                   	push   eax
c000d50b:	e8 ca ec ff ff       	call   c000c1da <Device::Device(char const*)>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	ba c0 0d 02 c0       	mov    edx,0xc0020dc0
c000d518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51c:	89 10                	mov    DWORD PTR [eax],edx
c000d51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d522:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d52c:	90                   	nop
c000d52d:	83 c4 0c             	add    esp,0xc
c000d530:	c3                   	ret    
c000d531:	90                   	nop
c000d532:	66 90                	xchg   ax,ax

c000d534 <Mouse::~Mouse()>:
c000d534:	83 ec 0c             	sub    esp,0xc
c000d537:	ba c0 0d 02 c0       	mov    edx,0xc0020dc0
c000d53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d540:	89 10                	mov    DWORD PTR [eax],edx
c000d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d546:	83 ec 0c             	sub    esp,0xc
c000d549:	50                   	push   eax
c000d54a:	e8 f5 e9 ff ff       	call   c000bf44 <Device::~Device()>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	90                   	nop
c000d553:	83 c4 0c             	add    esp,0xc
c000d556:	c3                   	ret    
c000d557:	90                   	nop

c000d558 <Mouse::~Mouse()>:
c000d558:	83 ec 0c             	sub    esp,0xc
c000d55b:	83 ec 0c             	sub    esp,0xc
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	e8 cd ff ff ff       	call   c000d534 <Mouse::~Mouse()>
c000d567:	83 c4 10             	add    esp,0x10
c000d56a:	83 ec 08             	sub    esp,0x8
c000d56d:	68 58 01 00 00       	push   0x158
c000d572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d576:	e8 91 d2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d57b:	83 c4 10             	add    esp,0x10
c000d57e:	83 c4 0c             	add    esp,0xc
c000d581:	c3                   	ret    

c000d582 <NIC::getMAC()>:
c000d582:	31 c0                	xor    eax,eax
c000d584:	31 d2                	xor    edx,edx
c000d586:	c3                   	ret    
c000d587:	90                   	nop

c000d588 <NIC::write(int, unsigned char*, int*)>:
c000d588:	b8 01 00 00 00       	mov    eax,0x1
c000d58d:	c3                   	ret    

c000d58e <NIC::NIC(char const*)>:
c000d58e:	83 ec 0c             	sub    esp,0xc
c000d591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d595:	83 ec 08             	sub    esp,0x8
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	50                   	push   eax
c000d59d:	e8 38 ec ff ff       	call   c000c1da <Device::Device(char const*)>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c000d5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ae:	89 10                	mov    DWORD PTR [eax],edx
c000d5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d5be:	90                   	nop
c000d5bf:	83 c4 0c             	add    esp,0xc
c000d5c2:	c3                   	ret    
c000d5c3:	90                   	nop

c000d5c4 <NIC::~NIC()>:
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	50                   	push   eax
c000d5da:	e8 65 e9 ff ff       	call   c000bf44 <Device::~Device()>
c000d5df:	83 c4 10             	add    esp,0x10
c000d5e2:	90                   	nop
c000d5e3:	83 c4 0c             	add    esp,0xc
c000d5e6:	c3                   	ret    
c000d5e7:	90                   	nop

c000d5e8 <NIC::~NIC()>:
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	83 ec 0c             	sub    esp,0xc
c000d5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f2:	e8 cd ff ff ff       	call   c000d5c4 <NIC::~NIC()>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	83 ec 08             	sub    esp,0x8
c000d5fd:	68 58 01 00 00       	push   0x158
c000d602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d606:	e8 01 d2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	83 c4 0c             	add    esp,0xc
c000d611:	c3                   	ret    

c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d612:	55                   	push   ebp
c000d613:	57                   	push   edi
c000d614:	56                   	push   esi
c000d615:	53                   	push   ebx
c000d616:	81 ec 28 01 00 00    	sub    esp,0x128
c000d61c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d623:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d62a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d631:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d63c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d640:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d647:	e8 8a ec ff ff       	call   c000c2d6 <Device::getName()>
c000d64c:	5a                   	pop    edx
c000d64d:	59                   	pop    ecx
c000d64e:	50                   	push   eax
c000d64f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d653:	55                   	push   ebp
c000d654:	e8 e7 2f ff ff       	call   c0000640 <strcpy>
c000d659:	5b                   	pop    ebx
c000d65a:	58                   	pop    eax
c000d65b:	68 18 0e 02 c0       	push   0xc0020e18
c000d660:	55                   	push   ebp
c000d661:	e8 da 31 ff ff       	call   c0000840 <strcat>
c000d666:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d66d:	e8 3c a4 ff ff       	call   c0007aae <malloc>
c000d672:	83 c4 0c             	add    esp,0xc
c000d675:	89 c3                	mov    ebx,eax
c000d677:	57                   	push   edi
c000d678:	56                   	push   esi
c000d679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d67d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d681:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d688:	55                   	push   ebp
c000d689:	50                   	push   eax
c000d68a:	e8 59 fb ff ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d68f:	83 c4 14             	add    esp,0x14
c000d692:	53                   	push   ebx
c000d693:	e8 10 fc ff ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c000d698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d69b:	e8 c2 fc ff ff       	call   c000d362 <LogicalDisk::mount()>
c000d6a0:	58                   	pop    eax
c000d6a1:	5a                   	pop    edx
c000d6a2:	53                   	push   ebx
c000d6a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6aa:	e8 93 e9 ff ff       	call   c000c042 <Device::addChild(Device*)>
c000d6af:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d6b5:	5b                   	pop    ebx
c000d6b6:	5e                   	pop    esi
c000d6b7:	5f                   	pop    edi
c000d6b8:	5d                   	pop    ebp
c000d6b9:	c3                   	ret    

c000d6ba <createPartitionsForDisk(PhysicalDisk*)>:
c000d6ba:	55                   	push   ebp
c000d6bb:	57                   	push   edi
c000d6bc:	56                   	push   esi
c000d6bd:	53                   	push   ebx
c000d6be:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d6c4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d6cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d6d1:	3d 00 02 00 00       	cmp    eax,0x200
c000d6d6:	74 27                	je     c000d6ff <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d6d8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d6de:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d6e4:	83 ec 10             	sub    esp,0x10
c000d6e7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d6eb:	99                   	cdq    
c000d6ec:	c1 e6 0a             	shl    esi,0xa
c000d6ef:	52                   	push   edx
c000d6f0:	89 fd                	mov    ebp,edi
c000d6f2:	50                   	push   eax
c000d6f3:	55                   	push   ebp
c000d6f4:	56                   	push   esi
c000d6f5:	e8 86 12 01 00       	call   c001e980 <__udivdi3>
c000d6fa:	e9 b9 00 00 00       	jmp    c000d7b8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d6ff:	83 ec 0c             	sub    esp,0xc
c000d702:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d704:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d708:	56                   	push   esi
c000d709:	6a 01                	push   0x1
c000d70b:	6a 00                	push   0x0
c000d70d:	6a 00                	push   0x0
c000d70f:	53                   	push   ebx
c000d710:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d713:	83 c4 20             	add    esp,0x20
c000d716:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d71e:	75 0a                	jne    c000d72a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d720:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d728:	74 2c                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d72a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d730:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d736:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d73c:	83 ec 10             	sub    esp,0x10
c000d73f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d743:	89 f7                	mov    edi,esi
c000d745:	c1 e0 0a             	shl    eax,0xa
c000d748:	c1 ff 1f             	sar    edi,0x1f
c000d74b:	57                   	push   edi
c000d74c:	56                   	push   esi
c000d74d:	52                   	push   edx
c000d74e:	50                   	push   eax
c000d74f:	e8 2c 12 01 00       	call   c001e980 <__udivdi3>
c000d754:	eb 62                	jmp    c000d7b8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d756:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d75d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d764:	89 cf                	mov    edi,ecx
c000d766:	83 e2 7f             	and    edx,0x7f
c000d769:	83 e7 7f             	and    edi,0x7f
c000d76c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d773:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d776:	83 e0 7f             	and    eax,0x7f
c000d779:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d77c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d783:	83 e0 7f             	and    eax,0x7f
c000d786:	01 d0                	add    eax,edx
c000d788:	89 c5                	mov    ebp,eax
c000d78a:	84 c0                	test   al,al
c000d78c:	74 41                	je     c000d7cf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d78e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d794:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d79a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7a0:	83 ec 10             	sub    esp,0x10
c000d7a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7a7:	89 f7                	mov    edi,esi
c000d7a9:	c1 e0 0a             	shl    eax,0xa
c000d7ac:	c1 ff 1f             	sar    edi,0x1f
c000d7af:	57                   	push   edi
c000d7b0:	56                   	push   esi
c000d7b1:	52                   	push   edx
c000d7b2:	50                   	push   eax
c000d7b3:	e8 c8 11 01 00       	call   c001e980 <__udivdi3>
c000d7b8:	83 c4 14             	add    esp,0x14
c000d7bb:	52                   	push   edx
c000d7bc:	50                   	push   eax
c000d7bd:	6a 00                	push   0x0
c000d7bf:	6a 00                	push   0x0
c000d7c1:	53                   	push   ebx
c000d7c2:	e8 4b fe ff ff       	call   c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d7c7:	83 c4 20             	add    esp,0x20
c000d7ca:	e9 73 01 00 00       	jmp    c000d942 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d7cf:	89 f0                	mov    eax,esi
c000d7d1:	31 c9                	xor    ecx,ecx
c000d7d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d7da:	75 02                	jne    c000d7de <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d7dc:	89 cd                	mov    ebp,ecx
c000d7de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d7e5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d7ec:	c1 e2 08             	shl    edx,0x8
c000d7ef:	c1 e6 10             	shl    esi,0x10
c000d7f2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d7fa:	09 f2                	or     edx,esi
c000d7fc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d804:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d80b:	83 c0 10             	add    eax,0x10
c000d80e:	09 f2                	or     edx,esi
c000d810:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d817:	c1 e6 18             	shl    esi,0x18
c000d81a:	09 f2                	or     edx,esi
c000d81c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d823:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d827:	c1 e6 10             	shl    esi,0x10
c000d82a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d831:	c1 e2 08             	shl    edx,0x8
c000d834:	09 f2                	or     edx,esi
c000d836:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d83d:	09 f2                	or     edx,esi
c000d83f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d846:	c1 e6 18             	shl    esi,0x18
c000d849:	09 f2                	or     edx,esi
c000d84b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d84f:	41                   	inc    ecx
c000d850:	83 f9 04             	cmp    ecx,0x4
c000d853:	0f 85 7a ff ff ff    	jne    c000d7d3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85d:	83 f0 01             	xor    eax,0x1
c000d860:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d864:	75 4f                	jne    c000d8b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d86a:	83 f0 01             	xor    eax,0x1
c000d86d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d871:	75 42                	jne    c000d8b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d873:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d87b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d883:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d889:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d88f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d895:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d899:	89 f7                	mov    edi,esi
c000d89b:	c1 e0 0a             	shl    eax,0xa
c000d89e:	c1 ff 1f             	sar    edi,0x1f
c000d8a1:	57                   	push   edi
c000d8a2:	56                   	push   esi
c000d8a3:	52                   	push   edx
c000d8a4:	50                   	push   eax
c000d8a5:	e8 d6 10 01 00       	call   c001e980 <__udivdi3>
c000d8aa:	83 c4 10             	add    esp,0x10
c000d8ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8b5:	89 e8                	mov    eax,ebp
c000d8b7:	0f b6 e8             	movzx  ebp,al
c000d8ba:	85 ed                	test   ebp,ebp
c000d8bc:	74 50                	je     c000d90e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d8be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8ca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d8ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d8da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d8de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8ea:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d8ee:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d8f2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d8f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d8fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8fe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d902:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d906:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d90a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d90e:	31 ed                	xor    ebp,ebp
c000d910:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d914:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d918:	89 f8                	mov    eax,edi
c000d91a:	09 f0                	or     eax,esi
c000d91c:	74 1e                	je     c000d93c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d91e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d922:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d926:	89 d1                	mov    ecx,edx
c000d928:	09 c1                	or     ecx,eax
c000d92a:	74 10                	je     c000d93c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	57                   	push   edi
c000d930:	56                   	push   esi
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	53                   	push   ebx
c000d934:	e8 d9 fc ff ff       	call   c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d939:	83 c4 20             	add    esp,0x20
c000d93c:	45                   	inc    ebp
c000d93d:	83 fd 04             	cmp    ebp,0x4
c000d940:	75 ce                	jne    c000d910 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d942:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d948:	5b                   	pop    ebx
c000d949:	5e                   	pop    esi
c000d94a:	5f                   	pop    edi
c000d94b:	5d                   	pop    ebp
c000d94c:	c3                   	ret    
c000d94d:	66 90                	xchg   ax,ax
c000d94f:	90                   	nop

c000d950 <Serial::Serial(char const*)>:
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d957:	83 ec 08             	sub    esp,0x8
c000d95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d95e:	50                   	push   eax
c000d95f:	e8 76 e8 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c000d96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d970:	89 10                	mov    DWORD PTR [eax],edx
c000d972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d976:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d980:	90                   	nop
c000d981:	83 c4 0c             	add    esp,0xc
c000d984:	c3                   	ret    
c000d985:	90                   	nop
c000d986:	66 90                	xchg   ax,ax

c000d988 <Serial::~Serial()>:
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c000d990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d994:	89 10                	mov    DWORD PTR [eax],edx
c000d996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d99a:	83 ec 0c             	sub    esp,0xc
c000d99d:	50                   	push   eax
c000d99e:	e8 a1 e5 ff ff       	call   c000bf44 <Device::~Device()>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	90                   	nop
c000d9a7:	83 c4 0c             	add    esp,0xc
c000d9aa:	c3                   	ret    
c000d9ab:	90                   	nop

c000d9ac <Serial::~Serial()>:
c000d9ac:	83 ec 0c             	sub    esp,0xc
c000d9af:	83 ec 0c             	sub    esp,0xc
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	e8 cd ff ff ff       	call   c000d988 <Serial::~Serial()>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	83 ec 08             	sub    esp,0x8
c000d9c1:	68 58 01 00 00       	push   0x158
c000d9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ca:	e8 3d ce ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d9cf:	83 c4 10             	add    esp,0x10
c000d9d2:	83 c4 0c             	add    esp,0xc
c000d9d5:	c3                   	ret    
c000d9d6:	66 90                	xchg   ax,ax

c000d9d8 <Timer::Timer(char const*)>:
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9df:	83 ec 08             	sub    esp,0x8
c000d9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e6:	50                   	push   eax
c000d9e7:	e8 ee e7 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d9ec:	83 c4 10             	add    esp,0x10
c000d9ef:	ba 70 0e 02 c0       	mov    edx,0xc0020e70
c000d9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f8:	89 10                	mov    DWORD PTR [eax],edx
c000d9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fe:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da08:	90                   	nop
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	c3                   	ret    
c000da0d:	90                   	nop
c000da0e:	66 90                	xchg   ax,ax

c000da10 <Timer::~Timer()>:
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ba 70 0e 02 c0       	mov    edx,0xc0020e70
c000da18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1c:	89 10                	mov    DWORD PTR [eax],edx
c000da1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da22:	83 ec 0c             	sub    esp,0xc
c000da25:	50                   	push   eax
c000da26:	e8 19 e5 ff ff       	call   c000bf44 <Device::~Device()>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	90                   	nop
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	c3                   	ret    
c000da33:	90                   	nop

c000da34 <Timer::~Timer()>:
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	83 ec 0c             	sub    esp,0xc
c000da3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3e:	e8 cd ff ff ff       	call   c000da10 <Timer::~Timer()>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	83 ec 08             	sub    esp,0x8
c000da49:	68 5c 01 00 00       	push   0x15c
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 b5 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	83 c4 0c             	add    esp,0xc
c000da5d:	c3                   	ret    

c000da5e <Timer::read()>:
c000da5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da68:	c3                   	ret    

c000da69 <setupTimer(int)>:
c000da69:	53                   	push   ebx
c000da6a:	83 ec 14             	sub    esp,0x14
c000da6d:	68 5c 01 00 00       	push   0x15c
c000da72:	e8 37 a0 ff ff       	call   c0007aae <malloc>
c000da77:	89 04 24             	mov    DWORD PTR [esp],eax
c000da7a:	89 c3                	mov    ebx,eax
c000da7c:	e8 67 07 01 00       	call   c001e1e8 <PIT::PIT()>
c000da81:	58                   	pop    eax
c000da82:	5a                   	pop    edx
c000da83:	53                   	push   ebx
c000da84:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000da8a:	e8 b3 e5 ff ff       	call   c000c042 <Device::addChild(Device*)>
c000da8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da91:	6a 00                	push   0x0
c000da93:	6a 00                	push   0x0
c000da95:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da99:	53                   	push   ebx
c000da9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da9d:	89 d8                	mov    eax,ebx
c000da9f:	83 c4 28             	add    esp,0x28
c000daa2:	5b                   	pop    ebx
c000daa3:	c3                   	ret    

c000daa4 <timerHandler(unsigned int)>:
c000daa4:	56                   	push   esi
c000daa5:	53                   	push   ebx
c000daa6:	51                   	push   ecx
c000daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daab:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000dab1:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000dab8:	0f 84 4a 01 00 00    	je     c000dc08 <timerHandler(unsigned int)+0x164>
c000dabe:	fa                   	cli    
c000dabf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000dac5:	83 ec 0c             	sub    esp,0xc
c000dac8:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000dace:	68 78 81 02 c0       	push   0xc0028178
c000dad3:	e8 78 14 01 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dad8:	83 c4 10             	add    esp,0x10
c000dadb:	84 c0                	test   al,al
c000dadd:	0f 85 a1 00 00 00    	jne    c000db84 <timerHandler(unsigned int)+0xe0>
c000dae3:	83 ec 0c             	sub    esp,0xc
c000dae6:	68 78 81 02 c0       	push   0xc0028178
c000daeb:	e8 7c 14 01 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	89 c6                	mov    esi,eax
c000daf5:	8d 76 00             	lea    esi,[esi+0x0]
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	68 78 81 02 c0       	push   0xc0028178
c000db00:	e8 67 14 01 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db05:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000db0c:	89 c3                	mov    ebx,eax
c000db0e:	e8 61 14 01 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000db1f:	77 23                	ja     c000db44 <timerHandler(unsigned int)+0xa0>
c000db21:	83 ec 0c             	sub    esp,0xc
c000db24:	53                   	push   ebx
c000db25:	e8 6a 7d 00 00       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	39 de                	cmp    esi,ebx
c000db2f:	75 27                	jne    c000db58 <timerHandler(unsigned int)+0xb4>
c000db31:	83 ec 0c             	sub    esp,0xc
c000db34:	68 78 81 02 c0       	push   0xc0028178
c000db39:	e8 2e 14 01 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db3e:	89 c6                	mov    esi,eax
c000db40:	eb 12                	jmp    c000db54 <timerHandler(unsigned int)+0xb0>
c000db42:	66 90                	xchg   ax,ax
c000db44:	52                   	push   edx
c000db45:	52                   	push   edx
c000db46:	53                   	push   ebx
c000db47:	68 78 81 02 c0       	push   0xc0028178
c000db4c:	e8 df 14 01 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000db51:	8d 76 00             	lea    esi,[esi+0x0]
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	90                   	nop
c000db58:	83 ec 0c             	sub    esp,0xc
c000db5b:	68 78 81 02 c0       	push   0xc0028178
c000db60:	e8 eb 13 01 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	84 c0                	test   al,al
c000db6a:	75 18                	jne    c000db84 <timerHandler(unsigned int)+0xe0>
c000db6c:	83 ec 0c             	sub    esp,0xc
c000db6f:	68 78 81 02 c0       	push   0xc0028178
c000db74:	e8 f3 13 01 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	39 f0                	cmp    eax,esi
c000db7e:	0f 85 74 ff ff ff    	jne    c000daf8 <timerHandler(unsigned int)+0x54>
c000db84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000db89:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000db8d:	74 41                	je     c000dbd0 <timerHandler(unsigned int)+0x12c>
c000db8f:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000db96:	74 38                	je     c000dbd0 <timerHandler(unsigned int)+0x12c>
c000db98:	fa                   	cli    
c000db99:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000db9f:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000dba4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbaa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dbad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbb3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dbb6:	72 08                	jb     c000dbc0 <timerHandler(unsigned int)+0x11c>
c000dbb8:	e8 bf 77 00 00       	call   c001537c <schedule()>
c000dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dbc5:	48                   	dec    eax
c000dbc6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dbcb:	75 03                	jne    c000dbd0 <timerHandler(unsigned int)+0x12c>
c000dbcd:	fb                   	sti    
c000dbce:	66 90                	xchg   ax,ax
c000dbd0:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000dbd5:	48                   	dec    eax
c000dbd6:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000dbdb:	75 1b                	jne    c000dbf8 <timerHandler(unsigned int)+0x154>
c000dbdd:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000dbe4:	74 12                	je     c000dbf8 <timerHandler(unsigned int)+0x154>
c000dbe6:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000dbf0:	e8 87 77 00 00       	call   c001537c <schedule()>
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dbfd:	48                   	dec    eax
c000dbfe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dc03:	75 03                	jne    c000dc08 <timerHandler(unsigned int)+0x164>
c000dc05:	fb                   	sti    
c000dc06:	66 90                	xchg   ax,ax
c000dc08:	58                   	pop    eax
c000dc09:	5b                   	pop    ebx
c000dc0a:	5e                   	pop    esi
c000dc0b:	c3                   	ret    

c000dc0c <VCache::VCache(PhysicalDisk*)>:
c000dc0c:	53                   	push   ebx
c000dc0d:	83 ec 18             	sub    esp,0x18
c000dc10:	ba a0 0e 02 c0       	mov    edx,0xc0020ea0
c000dc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc19:	89 10                	mov    DWORD PTR [eax],edx
c000dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc35:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc3c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc47:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc64:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dc68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dc73:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dc82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc86:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dc92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc96:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dc9d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dca5:	83 ec 0c             	sub    esp,0xc
c000dca8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcac:	e8 fd 9d ff ff       	call   c0007aae <malloc>
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	89 c3                	mov    ebx,eax
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	53                   	push   ebx
c000dcba:	e8 59 74 00 00       	call   c0015118 <Mutex::Mutex()>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dccd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dcd1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dcdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dce3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dced:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dcf4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dcfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd04:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd07:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd16:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd1c:	05 00 02 00 00       	add    eax,0x200
c000dd21:	c1 e0 03             	shl    eax,0x3
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	50                   	push   eax
c000dd28:	e8 81 9d ff ff       	call   c0007aae <malloc>
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	89 c2                	mov    edx,eax
c000dd32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd3d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd56:	89 d0                	mov    eax,edx
c000dd58:	c1 e0 02             	shl    eax,0x2
c000dd5b:	01 d0                	add    eax,edx
c000dd5d:	c1 e0 04             	shl    eax,0x4
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	50                   	push   eax
c000dd64:	e8 45 9d ff ff       	call   c0007aae <malloc>
c000dd69:	83 c4 10             	add    esp,0x10
c000dd6c:	89 c2                	mov    edx,eax
c000dd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd72:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dd75:	90                   	nop
c000dd76:	83 c4 18             	add    esp,0x18
c000dd79:	5b                   	pop    ebx
c000dd7a:	c3                   	ret    
c000dd7b:	90                   	nop

c000dd7c <VCache::invalidateReadBuffer()>:
c000dd7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd80:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dd86:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dd8a:	c3                   	ret    
c000dd8b:	90                   	nop

c000dd8c <VCache::writeWriteBuffer()>:
c000dd8c:	53                   	push   ebx
c000dd8d:	83 ec 08             	sub    esp,0x8
c000dd90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd94:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd98:	74 1e                	je     c000ddb8 <VCache::writeWriteBuffer()+0x2c>
c000dd9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd9d:	83 ec 0c             	sub    esp,0xc
c000dda0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dda2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dda5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dda8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ddab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddae:	50                   	push   eax
c000ddaf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ddb2:	83 c4 20             	add    esp,0x20
c000ddb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ddbf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ddc6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ddca:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ddd1:	83 c4 08             	add    esp,0x8
c000ddd4:	5b                   	pop    ebx
c000ddd5:	c3                   	ret    
c000ddd6:	66 90                	xchg   ax,ax

c000ddd8 <VCache::~VCache()>:
c000ddd8:	83 ec 0c             	sub    esp,0xc
c000dddb:	ba a0 0e 02 c0       	mov    edx,0xc0020ea0
c000dde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde4:	89 10                	mov    DWORD PTR [eax],edx
c000dde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dded:	0f b6 c0             	movzx  eax,al
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	74 10                	je     c000de04 <VCache::~VCache()+0x2c>
c000ddf4:	83 ec 0c             	sub    esp,0xc
c000ddf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfb:	e8 8c ff ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	90                   	nop
c000de04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de08:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de0b:	83 ec 0c             	sub    esp,0xc
c000de0e:	50                   	push   eax
c000de0f:	e8 aa 9c ff ff       	call   c0007abe <free>
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de1e:	83 ec 0c             	sub    esp,0xc
c000de21:	50                   	push   eax
c000de22:	e8 97 9c ff ff       	call   c0007abe <free>
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	90                   	nop
c000de2b:	83 c4 0c             	add    esp,0xc
c000de2e:	c3                   	ret    
c000de2f:	90                   	nop

c000de30 <VCache::~VCache()>:
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	83 ec 0c             	sub    esp,0xc
c000de36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3a:	e8 99 ff ff ff       	call   c000ddd8 <VCache::~VCache()>
c000de3f:	83 c4 10             	add    esp,0x10
c000de42:	83 ec 08             	sub    esp,0x8
c000de45:	6a 44                	push   0x44
c000de47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de4b:	e8 bc c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	83 c4 0c             	add    esp,0xc
c000de56:	c3                   	ret    
c000de57:	90                   	nop

c000de58 <VCache::write(unsigned long long, int, void*)>:
c000de58:	55                   	push   ebp
c000de59:	57                   	push   edi
c000de5a:	56                   	push   esi
c000de5b:	53                   	push   ebx
c000de5c:	83 ec 1c             	sub    esp,0x1c
c000de5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000de63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de67:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de6f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000de73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000de77:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000de7b:	74 07                	je     c000de84 <VCache::write(unsigned long long, int, void*)+0x2c>
c000de7d:	53                   	push   ebx
c000de7e:	e8 f9 fe ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c000de83:	58                   	pop    eax
c000de84:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000de88:	74 62                	je     c000deec <VCache::write(unsigned long long, int, void*)+0x94>
c000de8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000de8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de91:	99                   	cdq    
c000de92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de96:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000de99:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000de9c:	31 c1                	xor    ecx,eax
c000de9e:	89 d0                	mov    eax,edx
c000dea0:	89 ca                	mov    edx,ecx
c000dea2:	31 e8                	xor    eax,ebp
c000dea4:	09 c2                	or     edx,eax
c000dea6:	75 38                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x88>
c000dea8:	83 ff 01             	cmp    edi,0x1
c000deab:	75 33                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x88>
c000dead:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000deb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deb4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000deba:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000debd:	0f af c8             	imul   ecx,eax
c000dec0:	01 cf                	add    edi,ecx
c000dec2:	89 c1                	mov    ecx,eax
c000dec4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dec6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dec9:	40                   	inc    eax
c000deca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000decd:	83 f8 50             	cmp    eax,0x50
c000ded0:	75 6a                	jne    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000ded2:	83 ec 0c             	sub    esp,0xc
c000ded5:	53                   	push   ebx
c000ded6:	e8 b1 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	eb 5c                	jmp    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000dee0:	83 ec 0c             	sub    esp,0xc
c000dee3:	53                   	push   ebx
c000dee4:	e8 a3 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000deef:	83 ff 4f             	cmp    edi,0x4f
c000def2:	7f 20                	jg     c000df14 <VCache::write(unsigned long long, int, void*)+0xbc>
c000def4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000def7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000defb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000defe:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000df01:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df05:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df10:	eb 2a                	jmp    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000df12:	66 90                	xchg   ax,ax
c000df14:	8b 10                	mov    edx,DWORD PTR [eax]
c000df16:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df1a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df22:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df26:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000df2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df2e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df31:	83 c4 1c             	add    esp,0x1c
c000df34:	5b                   	pop    ebx
c000df35:	5e                   	pop    esi
c000df36:	5f                   	pop    edi
c000df37:	5d                   	pop    ebp
c000df38:	ff e0                	jmp    eax
c000df3a:	66 90                	xchg   ax,ax
c000df3c:	83 c4 1c             	add    esp,0x1c
c000df3f:	31 c0                	xor    eax,eax
c000df41:	5b                   	pop    ebx
c000df42:	5e                   	pop    esi
c000df43:	5f                   	pop    edi
c000df44:	5d                   	pop    ebp
c000df45:	c3                   	ret    

c000df46 <VCache::read(unsigned long long, int, void*)>:
c000df46:	55                   	push   ebp
c000df47:	57                   	push   edi
c000df48:	56                   	push   esi
c000df49:	53                   	push   ebx
c000df4a:	83 ec 1c             	sub    esp,0x1c
c000df4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000df51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000df59:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000df5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000df61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df65:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000df69:	74 0d                	je     c000df78 <VCache::read(unsigned long long, int, void*)+0x32>
c000df6b:	83 ec 0c             	sub    esp,0xc
c000df6e:	57                   	push   edi
c000df6f:	e8 18 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	90                   	nop
c000df78:	83 fd 01             	cmp    ebp,0x1
c000df7b:	0f 85 93 00 00 00    	jne    c000e014 <VCache::read(unsigned long long, int, void*)+0xce>
c000df81:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000df84:	89 04 24             	mov    DWORD PTR [esp],eax
c000df87:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000df8e:	0f 85 80 00 00 00    	jne    c000e014 <VCache::read(unsigned long long, int, void*)+0xce>
c000df94:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000df97:	89 e9                	mov    ecx,ebp
c000df99:	f7 d9                	neg    ecx
c000df9b:	89 c8                	mov    eax,ecx
c000df9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dfa1:	c1 f8 1f             	sar    eax,0x1f
c000dfa4:	21 d9                	and    ecx,ebx
c000dfa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfaa:	89 c8                	mov    eax,ecx
c000dfac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dfb0:	21 f1                	and    ecx,esi
c000dfb2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dfb6:	89 ca                	mov    edx,ecx
c000dfb8:	74 2e                	je     c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfba:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dfbd:	75 29                	jne    c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfbf:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dfc2:	75 24                	jne    c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfc4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfc7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dfcd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dfd0:	8d 70 ff             	lea    esi,[eax-0x1]
c000dfd3:	21 f3                	and    ebx,esi
c000dfd5:	0f af d9             	imul   ebx,ecx
c000dfd8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dfdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dfdf:	89 de                	mov    esi,ebx
c000dfe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfe3:	31 c0                	xor    eax,eax
c000dfe5:	eb 61                	jmp    c000e048 <VCache::read(unsigned long long, int, void*)+0x102>
c000dfe7:	90                   	nop
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dfef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dff3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dff6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dff9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dffb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dffe:	55                   	push   ebp
c000dfff:	52                   	push   edx
c000e000:	50                   	push   eax
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e008:	83 c4 20             	add    esp,0x20
c000e00b:	85 c0                	test   eax,eax
c000e00d:	75 39                	jne    c000e048 <VCache::read(unsigned long long, int, void*)+0x102>
c000e00f:	eb b3                	jmp    c000dfc4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e011:	8d 76 00             	lea    esi,[esi+0x0]
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	57                   	push   edi
c000e018:	e8 5f fd ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c000e01d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e020:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e024:	8b 10                	mov    edx,DWORD PTR [eax]
c000e026:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e02a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e02e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e032:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e036:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e03a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e03d:	83 c4 2c             	add    esp,0x2c
c000e040:	5b                   	pop    ebx
c000e041:	5e                   	pop    esi
c000e042:	5f                   	pop    edi
c000e043:	5d                   	pop    ebp
c000e044:	ff e0                	jmp    eax
c000e046:	66 90                	xchg   ax,ax
c000e048:	83 c4 1c             	add    esp,0x1c
c000e04b:	5b                   	pop    ebx
c000e04c:	5e                   	pop    esi
c000e04d:	5f                   	pop    edi
c000e04e:	5d                   	pop    ebp
c000e04f:	c3                   	ret    

c000e050 <Video::putrect(int, int, int, int, unsigned int)>:
c000e050:	55                   	push   ebp
c000e051:	57                   	push   edi
c000e052:	56                   	push   esi
c000e053:	53                   	push   ebx
c000e054:	83 ec 1c             	sub    esp,0x1c
c000e057:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e05b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e05f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e063:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e067:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e06b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e06f:	01 df                	add    edi,ebx
c000e071:	39 fb                	cmp    ebx,edi
c000e073:	7d 1f                	jge    c000e094 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e075:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e079:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e07d:	7d 12                	jge    c000e091 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e07f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e081:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e085:	53                   	push   ebx
c000e086:	55                   	push   ebp
c000e087:	45                   	inc    ebp
c000e088:	56                   	push   esi
c000e089:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	eb e8                	jmp    c000e079 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e091:	43                   	inc    ebx
c000e092:	eb dd                	jmp    c000e071 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e094:	83 c4 1c             	add    esp,0x1c
c000e097:	5b                   	pop    ebx
c000e098:	5e                   	pop    esi
c000e099:	5f                   	pop    edi
c000e09a:	5d                   	pop    ebp
c000e09b:	c3                   	ret    

c000e09c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e09c:	55                   	push   ebp
c000e09d:	57                   	push   edi
c000e09e:	31 ff                	xor    edi,edi
c000e0a0:	56                   	push   esi
c000e0a1:	53                   	push   ebx
c000e0a2:	83 ec 1c             	sub    esp,0x1c
c000e0a5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e0a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0ad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e0b4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e0b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0bd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e0c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e0c5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e0c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e0cc:	01 f9                	add    ecx,edi
c000e0ce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e0d2:	7d 2f                	jge    c000e103 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e0d4:	31 f6                	xor    esi,esi
c000e0d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e0da:	01 f2                	add    edx,esi
c000e0dc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e0e0:	7d 1a                	jge    c000e0fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e0e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e0e5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e0e8:	46                   	inc    esi
c000e0e9:	51                   	push   ecx
c000e0ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e0ee:	52                   	push   edx
c000e0ef:	55                   	push   ebp
c000e0f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e0fa:	eb da                	jmp    c000e0d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e0fc:	47                   	inc    edi
c000e0fd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e101:	eb c5                	jmp    c000e0c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e103:	83 c4 1c             	add    esp,0x1c
c000e106:	5b                   	pop    ebx
c000e107:	5e                   	pop    esi
c000e108:	5f                   	pop    edi
c000e109:	5d                   	pop    ebp
c000e10a:	c3                   	ret    
c000e10b:	90                   	nop

c000e10c <Video::blit(unsigned int*, int, int, int, int)>:
c000e10c:	55                   	push   ebp
c000e10d:	57                   	push   edi
c000e10e:	56                   	push   esi
c000e10f:	53                   	push   ebx
c000e110:	83 ec 1c             	sub    esp,0x1c
c000e113:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e117:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e11b:	85 c0                	test   eax,eax
c000e11d:	79 02                	jns    c000e121 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e11f:	31 c0                	xor    eax,eax
c000e121:	c1 e0 02             	shl    eax,0x2
c000e124:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e12c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e130:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e134:	39 d8                	cmp    eax,ebx
c000e136:	7e 49                	jle    c000e181 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e138:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e13e:	7c 41                	jl     c000e181 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e140:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e144:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e148:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e14c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e150:	39 f9                	cmp    ecx,edi
c000e152:	7e 22                	jle    c000e176 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e154:	83 c5 04             	add    ebp,0x4
c000e157:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e15d:	7c 14                	jl     c000e173 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e15f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e161:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e164:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e168:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e16c:	56                   	push   esi
c000e16d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e170:	83 c4 10             	add    esp,0x10
c000e173:	47                   	inc    edi
c000e174:	eb d2                	jmp    c000e148 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e17a:	43                   	inc    ebx
c000e17b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e17f:	eb ab                	jmp    c000e12c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e181:	83 c4 1c             	add    esp,0x1c
c000e184:	5b                   	pop    ebx
c000e185:	5e                   	pop    esi
c000e186:	5f                   	pop    edi
c000e187:	5d                   	pop    ebp
c000e188:	c3                   	ret    
c000e189:	90                   	nop

c000e18a <Video::clearScreen(unsigned int)>:
c000e18a:	57                   	push   edi
c000e18b:	56                   	push   esi
c000e18c:	53                   	push   ebx
c000e18d:	31 db                	xor    ebx,ebx
c000e18f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e193:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e199:	7e 1f                	jle    c000e1ba <Video::clearScreen(unsigned int)+0x30>
c000e19b:	31 ff                	xor    edi,edi
c000e19d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1a3:	7e 12                	jle    c000e1b7 <Video::clearScreen(unsigned int)+0x2d>
c000e1a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ab:	53                   	push   ebx
c000e1ac:	57                   	push   edi
c000e1ad:	47                   	inc    edi
c000e1ae:	56                   	push   esi
c000e1af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	eb e6                	jmp    c000e19d <Video::clearScreen(unsigned int)+0x13>
c000e1b7:	43                   	inc    ebx
c000e1b8:	eb d9                	jmp    c000e193 <Video::clearScreen(unsigned int)+0x9>
c000e1ba:	5b                   	pop    ebx
c000e1bb:	5e                   	pop    esi
c000e1bc:	5f                   	pop    edi
c000e1bd:	c3                   	ret    

c000e1be <Video::putpixel(int, int, unsigned int)>:
c000e1be:	c7 44 24 04 a8 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ea8
c000e1c6:	e9 ee 29 00 00       	jmp    c0010bb9 <KePanic(char const*)>
c000e1cb:	90                   	nop

c000e1cc <Video::readPixelApprox(int, int)>:
c000e1cc:	83 ec 18             	sub    esp,0x18
c000e1cf:	68 c9 0e 02 c0       	push   0xc0020ec9
c000e1d4:	e8 e0 29 00 00       	call   c0010bb9 <KePanic(char const*)>
c000e1d9:	31 c0                	xor    eax,eax
c000e1db:	83 c4 1c             	add    esp,0x1c
c000e1de:	c3                   	ret    
c000e1df:	90                   	nop

c000e1e0 <Video::Video(char const*)>:
c000e1e0:	83 ec 0c             	sub    esp,0xc
c000e1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e7:	83 ec 08             	sub    esp,0x8
c000e1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ee:	50                   	push   eax
c000e1ef:	e8 e6 df ff ff       	call   c000c1da <Device::Device(char const*)>
c000e1f4:	83 c4 10             	add    esp,0x10
c000e1f7:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c000e1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e200:	89 10                	mov    DWORD PTR [eax],edx
c000e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e206:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e210:	90                   	nop
c000e211:	83 c4 0c             	add    esp,0xc
c000e214:	c3                   	ret    
c000e215:	90                   	nop

c000e216 <Video::~Video()>:
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c000e21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e222:	89 10                	mov    DWORD PTR [eax],edx
c000e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 13 dd ff ff       	call   c000bf44 <Device::~Device()>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	90                   	nop
c000e235:	83 c4 0c             	add    esp,0xc
c000e238:	c3                   	ret    
c000e239:	90                   	nop

c000e23a <Video::~Video()>:
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	83 ec 0c             	sub    esp,0xc
c000e240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e244:	e8 cd ff ff ff       	call   c000e216 <Video::~Video()>
c000e249:	83 c4 10             	add    esp,0x10
c000e24c:	83 ec 08             	sub    esp,0x8
c000e24f:	68 64 01 00 00       	push   0x164
c000e254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e258:	e8 af c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	83 c4 0c             	add    esp,0xc
c000e263:	c3                   	ret    

c000e264 <Video::isMonochrome()>:
c000e264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e268:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e26e:	c3                   	ret    
c000e26f:	90                   	nop

c000e270 <Video::getWidth()>:
c000e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e274:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e27a:	c3                   	ret    
c000e27b:	90                   	nop

c000e27c <Video::getHeight()>:
c000e27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e280:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e286:	c3                   	ret    
c000e287:	90                   	nop

c000e288 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e288:	55                   	push   ebp
c000e289:	57                   	push   edi
c000e28a:	56                   	push   esi
c000e28b:	53                   	push   ebx
c000e28c:	83 ec 2c             	sub    esp,0x2c
c000e28f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e293:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e297:	83 f8 01             	cmp    eax,0x1
c000e29a:	19 c9                	sbb    ecx,ecx
c000e29c:	31 db                	xor    ebx,ebx
c000e29e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2a2:	89 cd                	mov    ebp,ecx
c000e2a4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e2ac:	f7 d5                	not    ebp
c000e2ae:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e2b4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e2b8:	01 d8                	add    eax,ebx
c000e2ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2be:	56                   	push   esi
c000e2bf:	e8 b8 ff ff ff       	call   c000e27c <Video::getHeight()>
c000e2c4:	59                   	pop    ecx
c000e2c5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e2c9:	7e 70                	jle    c000e33b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e2cb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2cf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e2d3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2de:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e2e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e9:	89 f8                	mov    eax,edi
c000e2eb:	83 c0 20             	add    eax,0x20
c000e2ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e2f2:	56                   	push   esi
c000e2f3:	e8 78 ff ff ff       	call   c000e270 <Video::getWidth()>
c000e2f8:	5a                   	pop    edx
c000e2f9:	39 c7                	cmp    edi,eax
c000e2fb:	7d 34                	jge    c000e331 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e2fd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e302:	74 05                	je     c000e309 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e304:	8b 06                	mov    eax,DWORD PTR [esi]
c000e306:	55                   	push   ebp
c000e307:	eb 0d                	jmp    c000e316 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e309:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e30e:	74 12                	je     c000e322 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e310:	8b 06                	mov    eax,DWORD PTR [esi]
c000e312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e316:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e31a:	57                   	push   edi
c000e31b:	56                   	push   esi
c000e31c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e326:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e32a:	47                   	inc    edi
c000e32b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e32f:	75 c1                	jne    c000e2f2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e331:	43                   	inc    ebx
c000e332:	83 fb 20             	cmp    ebx,0x20
c000e335:	0f 85 79 ff ff ff    	jne    c000e2b4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e33b:	83 c4 2c             	add    esp,0x2c
c000e33e:	5b                   	pop    ebx
c000e33f:	5e                   	pop    esi
c000e340:	5f                   	pop    edi
c000e341:	5d                   	pop    ebp
c000e342:	c3                   	ret    
c000e343:	90                   	nop

c000e344 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e344:	55                   	push   ebp
c000e345:	57                   	push   edi
c000e346:	56                   	push   esi
c000e347:	53                   	push   ebx
c000e348:	83 ec 28             	sub    esp,0x28
c000e34b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e34f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e353:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e357:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e35b:	c1 e6 08             	shl    esi,0x8
c000e35e:	01 c6                	add    esi,eax
c000e360:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e364:	c1 e0 08             	shl    eax,0x8
c000e367:	01 d0                	add    eax,edx
c000e369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e36d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e371:	0f af c6             	imul   eax,esi
c000e374:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e37b:	50                   	push   eax
c000e37c:	e8 2d 97 ff ff       	call   c0007aae <malloc>
c000e381:	83 c4 10             	add    esp,0x10
c000e384:	89 c7                	mov    edi,eax
c000e386:	85 c0                	test   eax,eax
c000e388:	75 10                	jne    c000e39a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e38a:	83 ec 0c             	sub    esp,0xc
c000e38d:	68 f4 0e 02 c0       	push   0xc0020ef4
c000e392:	e8 22 28 00 00       	call   c0010bb9 <KePanic(char const*)>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e39e:	ba 12 00 00 00       	mov    edx,0x12
c000e3a3:	85 c0                	test   eax,eax
c000e3a5:	74 11                	je     c000e3b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e3a7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e3ab:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e3af:	c1 fa 03             	sar    edx,0x3
c000e3b2:	0f af d1             	imul   edx,ecx
c000e3b5:	83 c2 12             	add    edx,0x12
c000e3b8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e3bc:	74 04                	je     c000e3c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e3be:	85 f6                	test   esi,esi
c000e3c0:	75 12                	jne    c000e3d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	68 04 0f 02 c0       	push   0xc0020f04
c000e3ca:	e8 6a c5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e3cf:	e9 b8 00 00 00       	jmp    c000e48c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e3d4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e3d8:	83 f9 02             	cmp    ecx,0x2
c000e3db:	0f 85 96 00 00 00    	jne    c000e477 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e3e1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e3e6:	75 0e                	jne    c000e3f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e3e8:	85 c0                	test   eax,eax
c000e3ea:	75 0a                	jne    c000e3f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e3ec:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e3ef:	83 e8 18             	sub    eax,0x18
c000e3f2:	a8 f7                	test   al,0xf7
c000e3f4:	74 0a                	je     c000e400 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	68 19 0f 02 c0       	push   0xc0020f19
c000e3fe:	eb 7f                	jmp    c000e47f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e408:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e410:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e414:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e41c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e420:	75 0c                	jne    c000e42e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e422:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e427:	c1 e0 18             	shl    eax,0x18
c000e42a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e42e:	45                   	inc    ebp
c000e42f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e434:	c1 e1 10             	shl    ecx,0x10
c000e437:	89 c8                	mov    eax,ecx
c000e439:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e43e:	c1 e1 08             	shl    ecx,0x8
c000e441:	09 c1                	or     ecx,eax
c000e443:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e447:	09 c1                	or     ecx,eax
c000e449:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e44d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e451:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e455:	c1 f8 03             	sar    eax,0x3
c000e458:	01 c2                	add    edx,eax
c000e45a:	89 e8                	mov    eax,ebp
c000e45c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e460:	39 c6                	cmp    esi,eax
c000e462:	7f b0                	jg     c000e414 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e464:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e46c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e46f:	7e 22                	jle    c000e493 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e471:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e475:	eb 99                	jmp    c000e410 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e477:	50                   	push   eax
c000e478:	50                   	push   eax
c000e479:	51                   	push   ecx
c000e47a:	68 27 0f 02 c0       	push   0xc0020f27
c000e47f:	e8 b5 c4 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e484:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e487:	e8 32 96 ff ff       	call   c0007abe <free>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	31 ff                	xor    edi,edi
c000e491:	eb 0f                	jmp    c000e4a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e493:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e497:	89 30                	mov    DWORD PTR [eax],esi
c000e499:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e49d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e4a0:	89 30                	mov    DWORD PTR [eax],esi
c000e4a2:	83 c4 1c             	add    esp,0x1c
c000e4a5:	89 f8                	mov    eax,edi
c000e4a7:	5b                   	pop    ebx
c000e4a8:	5e                   	pop    esi
c000e4a9:	5f                   	pop    edi
c000e4aa:	5d                   	pop    ebp
c000e4ab:	c3                   	ret    

c000e4ac <Video::putTGA(int, int, unsigned char*, int)>:
c000e4ac:	55                   	push   ebp
c000e4ad:	57                   	push   edi
c000e4ae:	56                   	push   esi
c000e4af:	53                   	push   ebx
c000e4b0:	83 ec 28             	sub    esp,0x28
c000e4b3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e4b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4bb:	50                   	push   eax
c000e4bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4c0:	50                   	push   eax
c000e4c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4c9:	56                   	push   esi
c000e4ca:	e8 75 fe ff ff       	call   c000e344 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e4cf:	83 c4 20             	add    esp,0x20
c000e4d2:	85 c0                	test   eax,eax
c000e4d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e4d8:	74 35                	je     c000e50f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e4da:	89 c7                	mov    edi,eax
c000e4dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4e4:	39 d8                	cmp    eax,ebx
c000e4e6:	7e 27                	jle    c000e50f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e4e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e4ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e4f4:	39 e8                	cmp    eax,ebp
c000e4f6:	7e 14                	jle    c000e50c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e4f8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e4fa:	83 c7 04             	add    edi,0x4
c000e4fd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e500:	53                   	push   ebx
c000e501:	55                   	push   ebp
c000e502:	45                   	inc    ebp
c000e503:	56                   	push   esi
c000e504:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	eb e0                	jmp    c000e4ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e50c:	43                   	inc    ebx
c000e50d:	eb cd                	jmp    c000e4dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e50f:	83 c4 1c             	add    esp,0x1c
c000e512:	5b                   	pop    ebx
c000e513:	5e                   	pop    esi
c000e514:	5f                   	pop    edi
c000e515:	5d                   	pop    ebp
c000e516:	c3                   	ret    
c000e517:	90                   	nop

c000e518 <ACPI::close(int, int, void*)>:
c000e518:	83 ec 1c             	sub    esp,0x1c
c000e51b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e523:	74 0b                	je     c000e530 <ACPI::close(int, int, void*)+0x18>
c000e525:	b8 00 00 00 00       	mov    eax,0x0
c000e52a:	e9 99 00 00 00       	jmp    c000e5c8 <ACPI::close(int, int, void*)+0xb0>
c000e52f:	90                   	nop
c000e530:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e535:	75 29                	jne    c000e560 <ACPI::close(int, int, void*)+0x48>
c000e537:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e53c:	85 c0                	test   eax,eax
c000e53e:	74 08                	je     c000e548 <ACPI::close(int, int, void*)+0x30>
c000e540:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e545:	ff d0                	call   eax
c000e547:	90                   	nop
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	68 88 0f 02 c0       	push   0xc0020f88
c000e550:	e8 64 26 00 00       	call   c0010bb9 <KePanic(char const*)>
c000e555:	83 c4 10             	add    esp,0x10
c000e558:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e55d:	eb 69                	jmp    c000e5c8 <ACPI::close(int, int, void*)+0xb0>
c000e55f:	90                   	nop
c000e560:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e565:	75 59                	jne    c000e5c0 <ACPI::close(int, int, void*)+0xa8>
c000e567:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e56c:	85 c0                	test   eax,eax
c000e56e:	74 08                	je     c000e578 <ACPI::close(int, int, void*)+0x60>
c000e570:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e575:	ff d0                	call   eax
c000e577:	90                   	nop
c000e578:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e57d:	8d 76 00             	lea    esi,[esi+0x0]
c000e580:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e585:	83 e0 02             	and    eax,0x2
c000e588:	74 1e                	je     c000e5a8 <ACPI::close(int, int, void*)+0x90>
c000e58a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e595:	89 c2                	mov    edx,eax
c000e597:	ec                   	in     al,dx
c000e598:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e59c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5a0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a4:	eb da                	jmp    c000e580 <ACPI::close(int, int, void*)+0x68>
c000e5a6:	66 90                	xchg   ax,ax
c000e5a8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e5af:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e5b4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e5b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5bc:	ee                   	out    dx,al
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c8:	83 c4 1c             	add    esp,0x1c
c000e5cb:	c3                   	ret    

c000e5cc <findRSDP()>:
c000e5cc:	83 ec 1c             	sub    esp,0x1c
c000e5cf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5d4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5da:	83 e0 04             	and    eax,0x4
c000e5dd:	0f b6 c0             	movzx  eax,al
c000e5e0:	85 c0                	test   eax,eax
c000e5e2:	75 08                	jne    c000e5ec <findRSDP()+0x20>
c000e5e4:	b8 00 00 00 00       	mov    eax,0x0
c000e5e9:	eb 75                	jmp    c000e660 <findRSDP()+0x94>
c000e5eb:	90                   	nop
c000e5ec:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e5f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e5f6:	7f 1c                	jg     c000e614 <findRSDP()+0x48>
c000e5f8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5fd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e603:	83 e2 fb             	and    edx,0xfffffffb
c000e606:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e60c:	b8 00 00 00 00       	mov    eax,0x0
c000e611:	eb 4d                	jmp    c000e660 <findRSDP()+0x94>
c000e613:	90                   	nop
c000e614:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e61c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e624:	77 32                	ja     c000e658 <findRSDP()+0x8c>
c000e626:	83 ec 04             	sub    esp,0x4
c000e629:	6a 08                	push   0x8
c000e62b:	68 23 10 02 c0       	push   0xc0021023
c000e630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e634:	e8 47 1d ff ff       	call   c0000380 <memcmp>
c000e639:	83 c4 10             	add    esp,0x10
c000e63c:	85 c0                	test   eax,eax
c000e63e:	0f 94 c0             	sete   al
c000e641:	0f b6 c0             	movzx  eax,al
c000e644:	85 c0                	test   eax,eax
c000e646:	74 08                	je     c000e650 <findRSDP()+0x84>
c000e648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e64c:	eb 12                	jmp    c000e660 <findRSDP()+0x94>
c000e64e:	66 90                	xchg   ax,ax
c000e650:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e655:	eb c5                	jmp    c000e61c <findRSDP()+0x50>
c000e657:	90                   	nop
c000e658:	b8 00 00 00 00       	mov    eax,0x0
c000e65d:	8d 76 00             	lea    esi,[esi+0x0]
c000e660:	83 c4 1c             	add    esp,0x1c
c000e663:	c3                   	ret    

c000e664 <loadACPITables(unsigned char*)>:
c000e664:	57                   	push   edi
c000e665:	56                   	push   esi
c000e666:	53                   	push   ebx
c000e667:	83 ec 60             	sub    esp,0x60
c000e66a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e66f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e675:	83 e0 04             	and    eax,0x4
c000e678:	0f b6 c0             	movzx  eax,al
c000e67b:	85 c0                	test   eax,eax
c000e67d:	0f 84 41 02 00 00    	je     c000e8c4 <loadACPITables(unsigned char*)+0x260>
c000e683:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e688:	0f b6 c0             	movzx  eax,al
c000e68b:	85 c0                	test   eax,eax
c000e68d:	74 79                	je     c000e708 <loadACPITables(unsigned char*)+0xa4>
c000e68f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e693:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e697:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e69e:	83 e8 24             	sub    eax,0x24
c000e6a1:	c1 e8 03             	shr    eax,0x3
c000e6a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6a8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e6b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e6b8:	0f 8d ba 00 00 00    	jge    c000e778 <loadACPITables(unsigned char*)+0x114>
c000e6be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6c2:	83 c0 24             	add    eax,0x24
c000e6c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e6c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e6cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6d5:	c1 e0 03             	shl    eax,0x3
c000e6d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e6dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e6e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e5:	89 c1                	mov    ecx,eax
c000e6e7:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e6ec:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ef:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e6f5:	89 ca                	mov    edx,ecx
c000e6f7:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e6fe:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e703:	eb ab                	jmp    c000e6b0 <loadACPITables(unsigned char*)+0x4c>
c000e705:	8d 76 00             	lea    esi,[esi+0x0]
c000e708:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e70c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e710:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e714:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e717:	83 e8 24             	sub    eax,0x24
c000e71a:	c1 e8 02             	shr    eax,0x2
c000e71d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e721:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e730:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e734:	7d 42                	jge    c000e778 <loadACPITables(unsigned char*)+0x114>
c000e736:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e73a:	83 c0 24             	add    eax,0x24
c000e73d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e741:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e745:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e749:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e74d:	c1 e0 02             	shl    eax,0x2
c000e750:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e754:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e758:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e75a:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e75f:	8d 50 01             	lea    edx,[eax+0x1]
c000e762:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e768:	89 ca                	mov    edx,ecx
c000e76a:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e771:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e776:	eb b4                	jmp    c000e72c <loadACPITables(unsigned char*)+0xc8>
c000e778:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e780:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e785:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e789:	0f 8d 39 01 00 00    	jge    c000e8c8 <loadACPITables(unsigned char*)+0x264>
c000e78f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e793:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e79a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e79e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7aa:	25 ff 0f 00 00       	and    eax,0xfff
c000e7af:	89 c6                	mov    esi,eax
c000e7b1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e7b7:	83 ec 0c             	sub    esp,0xc
c000e7ba:	6a 01                	push   0x1
c000e7bc:	e8 40 ae ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	6a 01                	push   0x1
c000e7d3:	6a 01                	push   0x1
c000e7d5:	50                   	push   eax
c000e7d6:	52                   	push   edx
c000e7d7:	53                   	push   ebx
c000e7d8:	e8 31 b7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7dd:	83 c4 20             	add    esp,0x20
c000e7e0:	09 f0                	or     eax,esi
c000e7e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7ea:	c1 e0 03             	shl    eax,0x3
c000e7ed:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e7fe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e80e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e816:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e81a:	89 c6                	mov    esi,eax
c000e81c:	89 d7                	mov    edi,edx
c000e81e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e820:	89 c8                	mov    eax,ecx
c000e822:	89 fa                	mov    edx,edi
c000e824:	89 f3                	mov    ebx,esi
c000e826:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e82a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e839:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e841:	05 00 10 00 00       	add    eax,0x1000
c000e846:	c1 e8 0c             	shr    eax,0xc
c000e849:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e84d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e851:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e859:	25 ff 0f 00 00       	and    eax,0xfff
c000e85e:	89 c6                	mov    esi,eax
c000e860:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e866:	83 ec 0c             	sub    esp,0xc
c000e869:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e86d:	e8 8f ad ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e879:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e87f:	83 ec 0c             	sub    esp,0xc
c000e882:	6a 01                	push   0x1
c000e884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e888:	50                   	push   eax
c000e889:	52                   	push   edx
c000e88a:	53                   	push   ebx
c000e88b:	e8 7e b6 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e890:	83 c4 20             	add    esp,0x20
c000e893:	09 f0                	or     eax,esi
c000e895:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89d:	83 ec 0c             	sub    esp,0xc
c000e8a0:	50                   	push   eax
c000e8a1:	e8 79 b0 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e8ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8b1:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e8b8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e8bd:	e9 be fe ff ff       	jmp    c000e780 <loadACPITables(unsigned char*)+0x11c>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	90                   	nop
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	83 c4 60             	add    esp,0x60
c000e8cb:	5b                   	pop    ebx
c000e8cc:	5e                   	pop    esi
c000e8cd:	5f                   	pop    edi
c000e8ce:	c3                   	ret    
c000e8cf:	90                   	nop

c000e8d0 <findRSDT(unsigned char*)>:
c000e8d0:	57                   	push   edi
c000e8d1:	56                   	push   esi
c000e8d2:	53                   	push   ebx
c000e8d3:	83 ec 50             	sub    esp,0x50
c000e8d6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8db:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8e1:	83 e0 04             	and    eax,0x4
c000e8e4:	0f b6 c0             	movzx  eax,al
c000e8e7:	85 c0                	test   eax,eax
c000e8e9:	75 0d                	jne    c000e8f8 <findRSDT(unsigned char*)+0x28>
c000e8eb:	b8 00 00 00 00       	mov    eax,0x0
c000e8f0:	e9 2b 01 00 00       	jmp    c000ea20 <findRSDT(unsigned char*)+0x150>
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f8:	89 e0                	mov    eax,esp
c000e8fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e902:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e906:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e90e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e912:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e916:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e91a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e91e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e922:	89 c6                	mov    esi,eax
c000e924:	89 d7                	mov    edi,edx
c000e926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e928:	89 c8                	mov    eax,ecx
c000e92a:	89 fa                	mov    edx,edi
c000e92c:	89 f3                	mov    ebx,esi
c000e92e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e932:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e936:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e93a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e93e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e942:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e94a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e94e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e952:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e95a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e95e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e962:	25 ff 0f 00 00       	and    eax,0xfff
c000e967:	89 c6                	mov    esi,eax
c000e969:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	6a 02                	push   0x2
c000e974:	e8 88 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e980:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e986:	83 ec 0c             	sub    esp,0xc
c000e989:	6a 01                	push   0x1
c000e98b:	6a 02                	push   0x2
c000e98d:	50                   	push   eax
c000e98e:	52                   	push   edx
c000e98f:	53                   	push   ebx
c000e990:	e8 79 b5 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e995:	83 c4 20             	add    esp,0x20
c000e998:	09 f0                	or     eax,esi
c000e99a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e99e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9a2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9a7:	89 c6                	mov    esi,eax
c000e9a9:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e9af:	83 ec 0c             	sub    esp,0xc
c000e9b2:	6a 02                	push   0x2
c000e9b4:	e8 48 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e9c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	6a 01                	push   0x1
c000e9cb:	6a 02                	push   0x2
c000e9cd:	50                   	push   eax
c000e9ce:	52                   	push   edx
c000e9cf:	53                   	push   ebx
c000e9d0:	e8 39 b5 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9d5:	83 c4 20             	add    esp,0x20
c000e9d8:	09 f0                	or     eax,esi
c000e9da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9de:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e9e3:	85 c0                	test   eax,eax
c000e9e5:	75 11                	jne    c000e9f8 <findRSDT(unsigned char*)+0x128>
c000e9e7:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e9ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e9f6:	eb 24                	jmp    c000ea1c <findRSDT(unsigned char*)+0x14c>
c000e9f8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e9fd:	83 f8 02             	cmp    eax,0x2
c000ea00:	75 12                	jne    c000ea14 <findRSDT(unsigned char*)+0x144>
c000ea02:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000ea09:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea11:	eb 09                	jmp    c000ea1c <findRSDT(unsigned char*)+0x14c>
c000ea13:	90                   	nop
c000ea14:	b8 00 00 00 00       	mov    eax,0x0
c000ea19:	eb 05                	jmp    c000ea20 <findRSDT(unsigned char*)+0x150>
c000ea1b:	90                   	nop
c000ea1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea20:	83 c4 50             	add    esp,0x50
c000ea23:	5b                   	pop    ebx
c000ea24:	5e                   	pop    esi
c000ea25:	5f                   	pop    edi
c000ea26:	c3                   	ret    
c000ea27:	90                   	nop

c000ea28 <findDataTable(unsigned char*, char*)>:
c000ea28:	83 ec 1c             	sub    esp,0x1c
c000ea2b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ea30:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea36:	83 e0 04             	and    eax,0x4
c000ea39:	0f b6 c0             	movzx  eax,al
c000ea3c:	85 c0                	test   eax,eax
c000ea3e:	75 08                	jne    c000ea48 <findDataTable(unsigned char*, char*)+0x20>
c000ea40:	b8 00 00 00 00       	mov    eax,0x0
c000ea45:	eb 5d                	jmp    c000eaa4 <findDataTable(unsigned char*, char*)+0x7c>
c000ea47:	90                   	nop
c000ea48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea50:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000ea55:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000ea59:	7d 41                	jge    c000ea9c <findDataTable(unsigned char*, char*)+0x74>
c000ea5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5f:	c1 e0 03             	shl    eax,0x3
c000ea62:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000ea67:	83 ec 04             	sub    esp,0x4
c000ea6a:	6a 04                	push   0x4
c000ea6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea70:	50                   	push   eax
c000ea71:	e8 0a 19 ff ff       	call   c0000380 <memcmp>
c000ea76:	83 c4 10             	add    esp,0x10
c000ea79:	85 c0                	test   eax,eax
c000ea7b:	0f 94 c0             	sete   al
c000ea7e:	0f b6 c0             	movzx  eax,al
c000ea81:	85 c0                	test   eax,eax
c000ea83:	74 0f                	je     c000ea94 <findDataTable(unsigned char*, char*)+0x6c>
c000ea85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea89:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000ea90:	eb 12                	jmp    c000eaa4 <findDataTable(unsigned char*, char*)+0x7c>
c000ea92:	66 90                	xchg   ax,ax
c000ea94:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea99:	eb b5                	jmp    c000ea50 <findDataTable(unsigned char*, char*)+0x28>
c000ea9b:	90                   	nop
c000ea9c:	b8 00 00 00 00       	mov    eax,0x0
c000eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c000eaa4:	83 c4 1c             	add    esp,0x1c
c000eaa7:	c3                   	ret    

c000eaa8 <scanMADT()>:
c000eaa8:	53                   	push   ebx
c000eaa9:	83 ec 38             	sub    esp,0x38
c000eaac:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000eab1:	25 00 04 00 00       	and    eax,0x400
c000eab6:	74 14                	je     c000eacc <scanMADT()+0x24>
c000eab8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eabd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eac3:	83 e2 fb             	and    edx,0xfffffffb
c000eac6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eacc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ead1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ead7:	83 e0 04             	and    eax,0x4
c000eada:	0f b6 c0             	movzx  eax,al
c000eadd:	85 c0                	test   eax,eax
c000eadf:	0f 84 6b 04 00 00    	je     c000ef50 <scanMADT()+0x4a8>
c000eae5:	e8 e2 fa ff ff       	call   c000e5cc <findRSDP()>
c000eaea:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000eaef:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eaf4:	85 c0                	test   eax,eax
c000eaf6:	75 1c                	jne    c000eb14 <scanMADT()+0x6c>
c000eaf8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eafd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb03:	83 e2 fb             	and    edx,0xfffffffb
c000eb06:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb0c:	e9 47 04 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	50                   	push   eax
c000eb1d:	e8 ae fd ff ff       	call   c000e8d0 <findRSDT(unsigned char*)>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000eb2a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb2f:	85 c0                	test   eax,eax
c000eb31:	75 19                	jne    c000eb4c <scanMADT()+0xa4>
c000eb33:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb38:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb3e:	83 e2 fb             	and    edx,0xfffffffb
c000eb41:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb47:	e9 0c 04 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb4c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	50                   	push   eax
c000eb55:	e8 0a fb ff ff       	call   c000e664 <loadACPITables(unsigned char*)>
c000eb5a:	83 c4 10             	add    esp,0x10
c000eb5d:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb62:	83 ec 08             	sub    esp,0x8
c000eb65:	68 2c 10 02 c0       	push   0xc002102c
c000eb6a:	50                   	push   eax
c000eb6b:	e8 b8 fe ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eb77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000eb7c:	75 1a                	jne    c000eb98 <scanMADT()+0xf0>
c000eb7e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb83:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb89:	83 e2 fe             	and    edx,0xfffffffe
c000eb8c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb92:	e9 c1 03 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb97:	90                   	nop
c000eb98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000eba0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eba7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ebab:	0f 87 a7 03 00 00    	ja     c000ef58 <scanMADT()+0x4b0>
c000ebb1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ebb9:	0f 87 99 03 00 00    	ja     c000ef58 <scanMADT()+0x4b0>
c000ebbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ebc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebcb:	8d 50 01             	lea    edx,[eax+0x1]
c000ebce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebd6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebda:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ebde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe2:	8d 50 01             	lea    edx,[eax+0x1]
c000ebe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebf1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ebf5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ebfa:	83 f8 02             	cmp    eax,0x2
c000ebfd:	0f 86 51 03 00 00    	jbe    c000ef54 <scanMADT()+0x4ac>
c000ec03:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec08:	85 c0                	test   eax,eax
c000ec0a:	75 58                	jne    c000ec64 <scanMADT()+0x1bc>
c000ec0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec10:	8d 50 01             	lea    edx,[eax+0x1]
c000ec13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec17:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec1d:	0f b6 d2             	movzx  edx,dl
c000ec20:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec24:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec28:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ec2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec32:	8d 50 01             	lea    edx,[eax+0x1]
c000ec35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec39:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec42:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ec48:	0f b6 d2             	movzx  edx,dl
c000ec4b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec4f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec53:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ec59:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec5e:	e9 d9 02 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ec63:	90                   	nop
c000ec64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec69:	83 f8 01             	cmp    eax,0x1
c000ec6c:	0f 85 1a 01 00 00    	jne    c000ed8c <scanMADT()+0x2e4>
c000ec72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec76:	8d 50 01             	lea    edx,[eax+0x1]
c000ec79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec7d:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ec83:	0f b6 d2             	movzx  edx,dl
c000ec86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec8e:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ec94:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ec99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca1:	01 d0                	add    eax,edx
c000eca3:	83 c0 2c             	add    eax,0x2c
c000eca6:	8a 00                	mov    al,BYTE PTR [eax]
c000eca8:	0f b6 d0             	movzx  edx,al
c000ecab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecaf:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecb6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecba:	0f b6 c0             	movzx  eax,al
c000ecbd:	c1 e0 08             	shl    eax,0x8
c000ecc0:	89 d1                	mov    ecx,edx
c000ecc2:	09 c1                	or     ecx,eax
c000ecc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc8:	8d 50 02             	lea    edx,[eax+0x2]
c000eccb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eccf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ecd3:	0f b6 c0             	movzx  eax,al
c000ecd6:	c1 e0 10             	shl    eax,0x10
c000ecd9:	09 c1                	or     ecx,eax
c000ecdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecdf:	8d 50 03             	lea    edx,[eax+0x3]
c000ece2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ece6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ecea:	0f b6 c0             	movzx  eax,al
c000eced:	c1 e0 18             	shl    eax,0x18
c000ecf0:	09 c1                	or     ecx,eax
c000ecf2:	89 ca                	mov    edx,ecx
c000ecf4:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ecf9:	0f b6 c0             	movzx  eax,al
c000ecfc:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ed03:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed10:	01 d0                	add    eax,edx
c000ed12:	83 c0 2c             	add    eax,0x2c
c000ed15:	8a 00                	mov    al,BYTE PTR [eax]
c000ed17:	0f b6 d0             	movzx  edx,al
c000ed1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed29:	0f b6 c0             	movzx  eax,al
c000ed2c:	c1 e0 08             	shl    eax,0x8
c000ed2f:	89 d1                	mov    ecx,edx
c000ed31:	09 c1                	or     ecx,eax
c000ed33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed37:	8d 50 02             	lea    edx,[eax+0x2]
c000ed3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed42:	0f b6 c0             	movzx  eax,al
c000ed45:	c1 e0 10             	shl    eax,0x10
c000ed48:	09 c1                	or     ecx,eax
c000ed4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed4e:	8d 50 03             	lea    edx,[eax+0x3]
c000ed51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed59:	0f b6 c0             	movzx  eax,al
c000ed5c:	c1 e0 18             	shl    eax,0x18
c000ed5f:	09 c1                	or     ecx,eax
c000ed61:	89 ca                	mov    edx,ecx
c000ed63:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed68:	0f b6 c0             	movzx  eax,al
c000ed6b:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000ed72:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed77:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed7c:	83 c0 01             	add    eax,0x1
c000ed7f:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ed84:	e9 b3 01 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ed89:	8d 76 00             	lea    esi,[esi+0x0]
c000ed8c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed91:	83 f8 02             	cmp    eax,0x2
c000ed94:	0f 85 ea 00 00 00    	jne    c000ee84 <scanMADT()+0x3dc>
c000ed9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed9e:	8d 50 01             	lea    edx,[eax+0x1]
c000eda1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eda5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eda9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000edad:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000edb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edb5:	8d 50 01             	lea    edx,[eax+0x1]
c000edb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edc0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000edc4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000edc8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edd0:	01 d0                	add    eax,edx
c000edd2:	83 c0 2c             	add    eax,0x2c
c000edd5:	8a 00                	mov    al,BYTE PTR [eax]
c000edd7:	0f b6 d0             	movzx  edx,al
c000edda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edde:	8d 48 01             	lea    ecx,[eax+0x1]
c000ede1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ede5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ede9:	0f b6 c0             	movzx  eax,al
c000edec:	c1 e0 08             	shl    eax,0x8
c000edef:	89 d1                	mov    ecx,edx
c000edf1:	09 c1                	or     ecx,eax
c000edf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edf7:	8d 50 02             	lea    edx,[eax+0x2]
c000edfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edfe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee02:	0f b6 c0             	movzx  eax,al
c000ee05:	c1 e0 10             	shl    eax,0x10
c000ee08:	09 c1                	or     ecx,eax
c000ee0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee0e:	8d 50 03             	lea    edx,[eax+0x3]
c000ee11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee15:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee19:	0f b6 c0             	movzx  eax,al
c000ee1c:	c1 e0 18             	shl    eax,0x18
c000ee1f:	09 c8                	or     eax,ecx
c000ee21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee25:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee32:	01 d0                	add    eax,edx
c000ee34:	83 c0 2c             	add    eax,0x2c
c000ee37:	8a 00                	mov    al,BYTE PTR [eax]
c000ee39:	0f b6 c0             	movzx  eax,al
c000ee3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee40:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ee43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee47:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ee4b:	0f b6 d2             	movzx  edx,dl
c000ee4e:	c1 e2 08             	shl    edx,0x8
c000ee51:	09 d0                	or     eax,edx
c000ee53:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ee58:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ee5d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ee62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee66:	88 90 08 27 02 c0    	mov    BYTE PTR [eax-0x3ffdd8f8],dl
c000ee6c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ee71:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ee76:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ee7e:	e9 b9 00 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ee83:	90                   	nop
c000ee84:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ee89:	83 f8 04             	cmp    eax,0x4
c000ee8c:	0f 85 9a 00 00 00    	jne    c000ef2c <scanMADT()+0x484>
c000ee92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee96:	8d 50 01             	lea    edx,[eax+0x1]
c000ee99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eea1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eea5:	0f b6 c0             	movzx  eax,al
c000eea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eeac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eeb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eeb4:	01 d0                	add    eax,edx
c000eeb6:	83 c0 2c             	add    eax,0x2c
c000eeb9:	8a 00                	mov    al,BYTE PTR [eax]
c000eebb:	0f b6 d0             	movzx  edx,al
c000eebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eec2:	8d 48 01             	lea    ecx,[eax+0x1]
c000eec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eec9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eecd:	0f b6 c0             	movzx  eax,al
c000eed0:	c1 e0 08             	shl    eax,0x8
c000eed3:	09 d0                	or     eax,edx
c000eed5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eed9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eee2:	8d 50 01             	lea    edx,[eax+0x1]
c000eee5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eeed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eef1:	0f b6 c0             	movzx  eax,al
c000eef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eefc:	c1 e0 08             	shl    eax,0x8
c000eeff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef03:	89 c1                	mov    ecx,eax
c000ef05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef09:	c1 e0 18             	shl    eax,0x18
c000ef0c:	89 c3                	mov    ebx,eax
c000ef0e:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ef13:	8d 50 01             	lea    edx,[eax+0x1]
c000ef16:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ef1c:	09 d9                	or     ecx,ebx
c000ef1e:	89 ca                	mov    edx,ecx
c000ef20:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ef27:	eb 13                	jmp    c000ef3c <scanMADT()+0x494>
c000ef29:	8d 76 00             	lea    esi,[esi+0x0]
c000ef2c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef31:	83 f8 05             	cmp    eax,0x5
c000ef34:	75 06                	jne    c000ef3c <scanMADT()+0x494>
c000ef36:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef3b:	90                   	nop
c000ef3c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef45:	01 d0                	add    eax,edx
c000ef47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ef4b:	e9 50 fc ff ff       	jmp    c000eba0 <scanMADT()+0xf8>
c000ef50:	90                   	nop
c000ef51:	eb 05                	jmp    c000ef58 <scanMADT()+0x4b0>
c000ef53:	90                   	nop
c000ef54:	90                   	nop
c000ef55:	8d 76 00             	lea    esi,[esi+0x0]
c000ef58:	83 c4 38             	add    esp,0x38
c000ef5b:	5b                   	pop    ebx
c000ef5c:	c3                   	ret    
c000ef5d:	90                   	nop
c000ef5e:	66 90                	xchg   ax,ax

c000ef60 <ACPI::ACPI()>:
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef67:	83 ec 08             	sub    esp,0x8
c000ef6a:	68 31 10 02 c0       	push   0xc0021031
c000ef6f:	50                   	push   eax
c000ef70:	e8 65 d2 ff ff       	call   c000c1da <Device::Device(char const*)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	ba a0 11 02 c0       	mov    edx,0xc00211a0
c000ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef81:	89 10                	mov    DWORD PTR [eax],edx
c000ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef87:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ef8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef92:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ef9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000efaa:	e8 f9 fa ff ff       	call   c000eaa8 <scanMADT()>
c000efaf:	90                   	nop
c000efb0:	83 c4 0c             	add    esp,0xc
c000efb3:	c3                   	ret    

c000efb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000efb4:	83 ec 2c             	sub    esp,0x2c
c000efb7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000efbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efbf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efc3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000efc7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000efcc:	88 d0                	mov    al,dl
c000efce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000efd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000efd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000efdf:	90                   	nop
c000efe0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000efe4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000efea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000efee:	0f 8d b0 00 00 00    	jge    c000f0a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000eff4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eff8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000effc:	83 c2 2a             	add    edx,0x2a
c000efff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f003:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f008:	0f b7 c0             	movzx  eax,ax
c000f00b:	39 c2                	cmp    edx,eax
c000f00d:	0f 85 85 00 00 00    	jne    c000f098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f013:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f017:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f01b:	83 c2 2a             	add    edx,0x2a
c000f01e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f022:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f027:	0f b6 c0             	movzx  eax,al
c000f02a:	39 c2                	cmp    edx,eax
c000f02c:	75 6a                	jne    c000f098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f02e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f033:	85 c0                	test   eax,eax
c000f035:	74 3d                	je     c000f074 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f037:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f03b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f03f:	83 c2 2a             	add    edx,0x2a
c000f042:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f04a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f04d:	39 c2                	cmp    edx,eax
c000f04f:	74 13                	je     c000f064 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	68 ac 0f 02 c0       	push   0xc0020fac
c000f059:	e8 5b 1b 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	68 36 10 02 c0       	push   0xc0021036
c000f06c:	e8 48 1b 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f071:	83 c4 10             	add    esp,0x10
c000f074:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f078:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f07c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f080:	83 c2 2a             	add    edx,0x2a
c000f083:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f087:	8b 02                	mov    eax,DWORD PTR [edx]
c000f089:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f08c:	89 01                	mov    DWORD PTR [ecx],eax
c000f08e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f091:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f096:	66 90                	xchg   ax,ax
c000f098:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f09d:	e9 3e ff ff ff       	jmp    c000efe0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0a2:	66 90                	xchg   ax,ax
c000f0a4:	90                   	nop
c000f0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a9:	83 c4 2c             	add    esp,0x2c
c000f0ac:	c2 04 00             	ret    0x4
c000f0af:	90                   	nop

c000f0b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f0b0:	83 ec 1c             	sub    esp,0x1c
c000f0b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f0bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0c4:	88 c8                	mov    al,cl
c000f0c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f0ca:	88 d0                	mov    al,dl
c000f0cc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0d4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f0da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f0e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f0e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f0e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f0f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f0f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f107:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f10d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f111:	83 c0 01             	add    eax,0x1
c000f114:	88 c1                	mov    cl,al
c000f116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f11a:	83 c2 2a             	add    edx,0x2a
c000f11d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f125:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f12b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f12f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f132:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f136:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f13e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f144:	8d 50 01             	lea    edx,[eax+0x1]
c000f147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f14b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f155:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f15b:	3d 00 02 00 00       	cmp    eax,0x200
c000f160:	75 12                	jne    c000f174 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f162:	83 ec 0c             	sub    esp,0xc
c000f165:	68 45 10 02 c0       	push   0xc0021045
c000f16a:	e8 4a 1a 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f16f:	83 c4 10             	add    esp,0x10
c000f172:	66 90                	xchg   ax,ax
c000f174:	90                   	nop
c000f175:	83 c4 1c             	add    esp,0x1c
c000f178:	c3                   	ret    
c000f179:	90                   	nop
c000f17a:	66 90                	xchg   ax,ax

c000f17c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f17c:	b8 00 00 00 00       	mov    eax,0x0
c000f181:	c3                   	ret    
c000f182:	66 90                	xchg   ax,ax

c000f184 <ACPI::detectPCI()>:
c000f184:	53                   	push   ebx
c000f185:	83 ec 28             	sub    esp,0x28
c000f188:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f18d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f192:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f197:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f19d:	83 e0 04             	and    eax,0x4
c000f1a0:	0f b6 c0             	movzx  eax,al
c000f1a3:	85 c0                	test   eax,eax
c000f1a5:	74 2d                	je     c000f1d4 <ACPI::detectPCI()+0x50>
c000f1a7:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f1ac:	83 ec 08             	sub    esp,0x8
c000f1af:	68 62 10 02 c0       	push   0xc0021062
c000f1b4:	50                   	push   eax
c000f1b5:	e8 6e f8 ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f1c6:	74 0c                	je     c000f1d4 <ACPI::detectPCI()+0x50>
c000f1c8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f1cd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f1d2:	66 90                	xchg   ax,ax
c000f1d4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e2:	0f b6 c0             	movzx  eax,al
c000f1e5:	83 f8 01             	cmp    eax,0x1
c000f1e8:	75 0e                	jne    c000f1f8 <ACPI::detectPCI()+0x74>
c000f1ea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f1ef:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f1f4:	eb 2e                	jmp    c000f224 <ACPI::detectPCI()+0xa0>
c000f1f6:	66 90                	xchg   ax,ax
c000f1f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1fc:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fe:	0f b6 c0             	movzx  eax,al
c000f201:	83 f8 02             	cmp    eax,0x2
c000f204:	75 1e                	jne    c000f224 <ACPI::detectPCI()+0xa0>
c000f206:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f20b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f210:	85 c0                	test   eax,eax
c000f212:	74 10                	je     c000f224 <ACPI::detectPCI()+0xa0>
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	68 dc 0f 02 c0       	push   0xc0020fdc
c000f21c:	e8 98 19 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f228:	83 f0 01             	xor    eax,0x1
c000f22b:	0f b6 c0             	movzx  eax,al
c000f22e:	85 c0                	test   eax,eax
c000f230:	74 46                	je     c000f278 <ACPI::detectPCI()+0xf4>
c000f232:	e8 f9 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f237:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f23b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f240:	75 0e                	jne    c000f250 <ACPI::detectPCI()+0xcc>
c000f242:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f247:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f24c:	eb 2a                	jmp    c000f278 <ACPI::detectPCI()+0xf4>
c000f24e:	66 90                	xchg   ax,ax
c000f250:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f255:	75 21                	jne    c000f278 <ACPI::detectPCI()+0xf4>
c000f257:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f25c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f261:	85 c0                	test   eax,eax
c000f263:	74 13                	je     c000f278 <ACPI::detectPCI()+0xf4>
c000f265:	83 ec 0c             	sub    esp,0xc
c000f268:	68 dc 0f 02 c0       	push   0xc0020fdc
c000f26d:	e8 47 19 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f272:	83 c4 10             	add    esp,0x10
c000f275:	8d 76 00             	lea    esi,[esi+0x0]
c000f278:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f27d:	85 c0                	test   eax,eax
c000f27f:	0f 84 87 00 00 00    	je     c000f30c <ACPI::detectPCI()+0x188>
c000f285:	83 ec 0c             	sub    esp,0xc
c000f288:	68 67 10 02 c0       	push   0xc0021067
c000f28d:	e8 53 12 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f29d:	83 ec 0c             	sub    esp,0xc
c000f2a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2a4:	e8 05 88 ff ff       	call   c0007aae <malloc>
c000f2a9:	83 c4 10             	add    esp,0x10
c000f2ac:	89 c3                	mov    ebx,eax
c000f2ae:	83 ec 0c             	sub    esp,0xc
c000f2b1:	53                   	push   ebx
c000f2b2:	e8 2d b1 00 00       	call   c001a3e4 <PCI::PCI()>
c000f2b7:	83 c4 10             	add    esp,0x10
c000f2ba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2c2:	83 ec 08             	sub    esp,0x8
c000f2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f2c9:	50                   	push   eax
c000f2ca:	e8 73 cd ff ff       	call   c000c042 <Device::addChild(Device*)>
c000f2cf:	83 c4 10             	add    esp,0x10
c000f2d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2d8:	83 c0 08             	add    eax,0x8
c000f2db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2dd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f2e2:	85 d2                	test   edx,edx
c000f2e4:	74 0a                	je     c000f2f0 <ACPI::detectPCI()+0x16c>
c000f2e6:	ba 01 00 00 00       	mov    edx,0x1
c000f2eb:	eb 0b                	jmp    c000f2f8 <ACPI::detectPCI()+0x174>
c000f2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f0:	ba 02 00 00 00       	mov    edx,0x2
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	6a 00                	push   0x0
c000f2fa:	6a 00                	push   0x0
c000f2fc:	52                   	push   edx
c000f2fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f301:	ff d0                	call   eax
c000f303:	83 c4 10             	add    esp,0x10
c000f306:	e9 91 00 00 00       	jmp    c000f39c <ACPI::detectPCI()+0x218>
c000f30b:	90                   	nop
c000f30c:	83 ec 0c             	sub    esp,0xc
c000f30f:	68 7f 10 02 c0       	push   0xc002107f
c000f314:	e8 cc 11 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f319:	83 c4 10             	add    esp,0x10
c000f31c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f323:	83 ec 0c             	sub    esp,0xc
c000f326:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f32a:	e8 7f 87 ff ff       	call   c0007aae <malloc>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	89 c3                	mov    ebx,eax
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	53                   	push   ebx
c000f338:	e8 41 bc 00 00       	call   c001af7e <IDE::IDE()>
c000f33d:	83 c4 10             	add    esp,0x10
c000f340:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f344:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f348:	83 ec 08             	sub    esp,0x8
c000f34b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f34f:	50                   	push   eax
c000f350:	e8 ed cc ff ff       	call   c000c042 <Device::addChild(Device*)>
c000f355:	83 c4 10             	add    esp,0x10
c000f358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f35c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f377:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f384:	8b 00                	mov    eax,DWORD PTR [eax]
c000f386:	83 c0 08             	add    eax,0x8
c000f389:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38b:	6a 00                	push   0x0
c000f38d:	6a 00                	push   0x0
c000f38f:	6a 00                	push   0x0
c000f391:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f395:	ff d0                	call   eax
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	66 90                	xchg   ax,ax
c000f39c:	90                   	nop
c000f39d:	83 c4 28             	add    esp,0x28
c000f3a0:	5b                   	pop    ebx
c000f3a1:	c3                   	ret    
c000f3a2:	66 90                	xchg   ax,ax

c000f3a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f3a4:	83 ec 1c             	sub    esp,0x1c
c000f3a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3ab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f3ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f3b2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3b7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3bc:	83 ec 08             	sub    esp,0x8
c000f3bf:	52                   	push   edx
c000f3c0:	50                   	push   eax
c000f3c1:	e8 aa 7d ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f3cd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3d2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3d7:	83 ec 04             	sub    esp,0x4
c000f3da:	6a 01                	push   0x1
c000f3dc:	52                   	push   edx
c000f3dd:	50                   	push   eax
c000f3de:	e8 a7 7e ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	90                   	nop
c000f3e7:	83 c4 1c             	add    esp,0x1c
c000f3ea:	c3                   	ret    
c000f3eb:	90                   	nop

c000f3ec <ACPI::sleep()>:
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f3f4:	85 c0                	test   eax,eax
c000f3f6:	74 08                	je     c000f400 <ACPI::sleep()+0x14>
c000f3f8:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f3fd:	ff d0                	call   eax
c000f3ff:	90                   	nop
c000f400:	90                   	nop
c000f401:	83 c4 0c             	add    esp,0xc
c000f404:	c3                   	ret    
c000f405:	90                   	nop
c000f406:	66 90                	xchg   ax,ax

c000f408 <ACPI::open(int, int, void*)>:
c000f408:	57                   	push   edi
c000f409:	56                   	push   esi
c000f40a:	53                   	push   ebx
c000f40b:	81 ec 70 01 00 00    	sub    esp,0x170
c000f411:	83 ec 0c             	sub    esp,0xc
c000f414:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f41b:	e8 64 fd ff ff       	call   c000f184 <ACPI::detectPCI()>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	83 ec 0c             	sub    esp,0xc
c000f426:	68 04 10 02 c0       	push   0xc0021004
c000f42b:	e8 b5 10 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	b8 4c 05 00 00       	mov    eax,0x54c
c000f438:	8a 00                	mov    al,BYTE PTR [eax]
c000f43a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f441:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f449:	83 f8 01             	cmp    eax,0x1
c000f44c:	75 12                	jne    c000f460 <ACPI::open(int, int, void*)+0x58>
c000f44e:	83 ec 0c             	sub    esp,0xc
c000f451:	68 94 10 02 c0       	push   0xc0021094
c000f456:	e8 49 4a 00 00       	call   c0013ea4 <Thr::loadKernelSymbolTable(char const*)>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	eb 34                	jmp    c000f494 <ACPI::open(int, int, void*)+0x8c>
c000f460:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f468:	3d bb 00 00 00       	cmp    eax,0xbb
c000f46d:	75 15                	jne    c000f484 <ACPI::open(int, int, void*)+0x7c>
c000f46f:	83 ec 0c             	sub    esp,0xc
c000f472:	68 b2 10 02 c0       	push   0xc00210b2
c000f477:	e8 28 4a 00 00       	call   c0013ea4 <Thr::loadKernelSymbolTable(char const*)>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	eb 13                	jmp    c000f494 <ACPI::open(int, int, void*)+0x8c>
c000f481:	8d 76 00             	lea    esi,[esi+0x0]
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	68 d0 10 02 c0       	push   0xc00210d0
c000f48c:	e8 28 17 00 00       	call   c0010bb9 <KePanic(char const*)>
c000f491:	83 c4 10             	add    esp,0x10
c000f494:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f49c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f4a7:	83 ec 0c             	sub    esp,0xc
c000f4aa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f4b1:	e8 f8 85 ff ff       	call   c0007aae <malloc>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	89 c3                	mov    ebx,eax
c000f4bb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4c0:	83 ec 04             	sub    esp,0x4
c000f4c3:	50                   	push   eax
c000f4c4:	68 ea 10 02 c0       	push   0xc00210ea
c000f4c9:	53                   	push   ebx
c000f4ca:	e8 c1 bc ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f4cf:	83 c4 10             	add    esp,0x10
c000f4d2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f4d9:	83 ec 08             	sub    esp,0x8
c000f4dc:	6a 01                	push   0x1
c000f4de:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f4e5:	e8 62 bd ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f4f4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f4fc:	75 16                	jne    c000f514 <ACPI::open(int, int, void*)+0x10c>
c000f4fe:	83 ec 0c             	sub    esp,0xc
c000f501:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f508:	e8 9d bd ff ff       	call   c000b2aa <File::close()>
c000f50d:	83 c4 10             	add    esp,0x10
c000f510:	eb 0a                	jmp    c000f51c <ACPI::open(int, int, void*)+0x114>
c000f512:	66 90                	xchg   ax,ax
c000f514:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f51c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f524:	74 1e                	je     c000f544 <ACPI::open(int, int, void*)+0x13c>
c000f526:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f52d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52f:	83 c0 08             	add    eax,0x8
c000f532:	8b 00                	mov    eax,DWORD PTR [eax]
c000f534:	83 ec 0c             	sub    esp,0xc
c000f537:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f53e:	ff d0                	call   eax
c000f540:	83 c4 10             	add    esp,0x10
c000f543:	90                   	nop
c000f544:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f54b:	83 f0 01             	xor    eax,0x1
c000f54e:	0f b6 c0             	movzx  eax,al
c000f551:	85 c0                	test   eax,eax
c000f553:	74 43                	je     c000f598 <ACPI::open(int, int, void*)+0x190>
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	68 08 11 02 c0       	push   0xc0021108
c000f55d:	e8 83 0f 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	83 ec 04             	sub    esp,0x4
c000f568:	6a 0c                	push   0xc
c000f56a:	68 23 11 02 c0       	push   0xc0021123
c000f56f:	68 34 11 02 c0       	push   0xc0021134
c000f574:	e8 d7 3c 00 00       	call   c0013250 <Reg::readIntWithDefault(char*, char*, int)>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f583:	83 ec 0c             	sub    esp,0xc
c000f586:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f58d:	e8 9e a2 ff ff       	call   c0009830 <Virt::setupPageSwapping(int)>
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	8d 76 00             	lea    esi,[esi+0x0]
c000f598:	83 ec 0c             	sub    esp,0xc
c000f59b:	68 75 fd 01 c0       	push   0xc001fd75
c000f5a0:	e8 40 0f 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f5a5:	83 c4 10             	add    esp,0x10
c000f5a8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f5af:	83 ec 08             	sub    esp,0x8
c000f5b2:	6a 13                	push   0x13
c000f5b4:	50                   	push   eax
c000f5b5:	e8 a0 cd ff ff       	call   c000c35a <getDevicesOfType(DeviceType)>
c000f5ba:	83 c4 0c             	add    esp,0xc
c000f5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f5ca:	50                   	push   eax
c000f5cb:	e8 90 fb 00 00       	call   c001f160 <LinkedList<Device>::isEmpty()>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	83 f0 01             	xor    eax,0x1
c000f5d6:	0f b6 c0             	movzx  eax,al
c000f5d9:	85 c0                	test   eax,eax
c000f5db:	0f 84 47 01 00 00    	je     c000f728 <ACPI::open(int, int, void*)+0x320>
c000f5e1:	83 ec 0c             	sub    esp,0xc
c000f5e4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f5eb:	50                   	push   eax
c000f5ec:	e8 8b fb 00 00       	call   c001f17c <LinkedList<Device>::getFirstElement()>
c000f5f1:	83 c4 10             	add    esp,0x10
c000f5f4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f5fb:	83 ec 0c             	sub    esp,0xc
c000f5fe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f605:	50                   	push   eax
c000f606:	e8 79 fb 00 00       	call   c001f184 <LinkedList<Device>::removeFirst()>
c000f60b:	83 c4 10             	add    esp,0x10
c000f60e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f615:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f61c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f623:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f627:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f62d:	ba 09 00 00 00       	mov    edx,0x9
c000f632:	fc                   	cld    
c000f633:	89 c7                	mov    edi,eax
c000f635:	89 de                	mov    esi,ebx
c000f637:	89 d1                	mov    ecx,edx
c000f639:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f63b:	83 ec 08             	sub    esp,0x8
c000f63e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f642:	50                   	push   eax
c000f643:	83 ec 24             	sub    esp,0x24
c000f646:	89 e0                	mov    eax,esp
c000f648:	89 c3                	mov    ebx,eax
c000f64a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f64e:	ba 09 00 00 00       	mov    edx,0x9
c000f653:	89 df                	mov    edi,ebx
c000f655:	89 c6                	mov    esi,eax
c000f657:	89 d1                	mov    ecx,edx
c000f659:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f65b:	e8 6e b2 00 00       	call   c001a8ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f660:	83 c4 30             	add    esp,0x30
c000f663:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f66a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f672:	0f 84 48 ff ff ff    	je     c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f678:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f683:	83 ec 0c             	sub    esp,0xc
c000f686:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f68d:	e8 1c 84 ff ff       	call   c0007aae <malloc>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	89 c3                	mov    ebx,eax
c000f697:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f69c:	83 ec 04             	sub    esp,0x4
c000f69f:	50                   	push   eax
c000f6a0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6a7:	53                   	push   ebx
c000f6a8:	e8 e3 ba ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f6ad:	83 c4 10             	add    esp,0x10
c000f6b0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f6b7:	83 ec 0c             	sub    esp,0xc
c000f6ba:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6c1:	e8 f4 bd ff ff       	call   c000b4ba <File::exists()>
c000f6c6:	83 c4 10             	add    esp,0x10
c000f6c9:	0f b6 c0             	movzx  eax,al
c000f6cc:	85 c0                	test   eax,eax
c000f6ce:	74 28                	je     c000f6f8 <ACPI::open(int, int, void*)+0x2f0>
c000f6d0:	83 ec 08             	sub    esp,0x8
c000f6d3:	6a 01                	push   0x1
c000f6d5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f6dc:	e8 3d 52 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	83 ec 08             	sub    esp,0x8
c000f6e7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f6ee:	50                   	push   eax
c000f6ef:	e8 5b 54 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000f6f4:	83 c4 10             	add    esp,0x10
c000f6f7:	90                   	nop
c000f6f8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f700:	0f 84 ba fe ff ff    	je     c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f706:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f70d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70f:	83 c0 08             	add    eax,0x8
c000f712:	8b 00                	mov    eax,DWORD PTR [eax]
c000f714:	83 ec 0c             	sub    esp,0xc
c000f717:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f71e:	ff d0                	call   eax
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	e9 98 fe ff ff       	jmp    c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f732:	50                   	push   eax
c000f733:	e8 24 fa 00 00       	call   c001f15c <LinkedList<Device>::~LinkedList()>
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f741:	83 ec 08             	sub    esp,0x8
c000f744:	6a 01                	push   0x1
c000f746:	68 3b 11 02 c0       	push   0xc002113b
c000f74b:	e8 ce 51 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000f750:	83 c4 10             	add    esp,0x10
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	53                   	push   ebx
c000f757:	50                   	push   eax
c000f758:	e8 f2 53 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f765:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f76b:	83 e0 04             	and    eax,0x4
c000f76e:	0f b6 c0             	movzx  eax,al
c000f771:	85 c0                	test   eax,eax
c000f773:	0f 84 1b 01 00 00    	je     c000f894 <ACPI::open(int, int, void*)+0x48c>
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	68 58 11 02 c0       	push   0xc0021158
c000f781:	e8 5f 0d 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f794:	83 ec 0c             	sub    esp,0xc
c000f797:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f79e:	e8 0b 83 ff ff       	call   c0007aae <malloc>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	89 c3                	mov    ebx,eax
c000f7a8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f7ad:	83 ec 04             	sub    esp,0x4
c000f7b0:	50                   	push   eax
c000f7b1:	68 75 11 02 c0       	push   0xc0021175
c000f7b6:	53                   	push   ebx
c000f7b7:	e8 d4 b9 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f7c6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f7ce:	74 20                	je     c000f7f0 <ACPI::open(int, int, void*)+0x3e8>
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f7da:	e8 db bc ff ff       	call   c000b4ba <File::exists()>
c000f7df:	83 c4 10             	add    esp,0x10
c000f7e2:	0f b6 c0             	movzx  eax,al
c000f7e5:	85 c0                	test   eax,eax
c000f7e7:	74 07                	je     c000f7f0 <ACPI::open(int, int, void*)+0x3e8>
c000f7e9:	b0 01                	mov    al,0x1
c000f7eb:	eb 07                	jmp    c000f7f4 <ACPI::open(int, int, void*)+0x3ec>
c000f7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f0:	b0 00                	mov    al,0x0
c000f7f2:	66 90                	xchg   ax,ax
c000f7f4:	0f b6 c0             	movzx  eax,al
c000f7f7:	85 c0                	test   eax,eax
c000f7f9:	74 25                	je     c000f820 <ACPI::open(int, int, void*)+0x418>
c000f7fb:	83 ec 08             	sub    esp,0x8
c000f7fe:	6a 01                	push   0x1
c000f800:	68 75 11 02 c0       	push   0xc0021175
c000f805:	e8 14 51 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c000f80a:	83 c4 10             	add    esp,0x10
c000f80d:	83 ec 08             	sub    esp,0x8
c000f810:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f817:	50                   	push   eax
c000f818:	e8 32 53 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000f81d:	83 c4 10             	add    esp,0x10
c000f820:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f828:	74 2a                	je     c000f854 <ACPI::open(int, int, void*)+0x44c>
c000f82a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f832:	74 20                	je     c000f854 <ACPI::open(int, int, void*)+0x44c>
c000f834:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f83b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f83d:	83 c0 08             	add    eax,0x8
c000f840:	8b 00                	mov    eax,DWORD PTR [eax]
c000f842:	83 ec 0c             	sub    esp,0xc
c000f845:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f84c:	ff d0                	call   eax
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	8d 76 00             	lea    esi,[esi+0x0]
c000f854:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f859:	83 ec 08             	sub    esp,0x8
c000f85c:	68 92 11 02 c0       	push   0xc0021192
c000f861:	50                   	push   eax
c000f862:	e8 c1 f1 ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000f867:	83 c4 10             	add    esp,0x10
c000f86a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f871:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f879:	74 19                	je     c000f894 <ACPI::open(int, int, void*)+0x48c>
c000f87b:	83 ec 08             	sub    esp,0x8
c000f87e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f885:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f88c:	e8 13 fb ff ff       	call   c000f3a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f891:	83 c4 10             	add    esp,0x10
c000f894:	b8 00 00 00 00       	mov    eax,0x0
c000f899:	81 c4 70 01 00 00    	add    esp,0x170
c000f89f:	5b                   	pop    ebx
c000f8a0:	5e                   	pop    esi
c000f8a1:	5f                   	pop    edi
c000f8a2:	c3                   	ret    
c000f8a3:	90                   	nop

c000f8a4 <CPU::close(int, int, void*)>:
c000f8a4:	31 c0                	xor    eax,eax
c000f8a6:	c3                   	ret    
c000f8a7:	90                   	nop

c000f8a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f8a8:	60                   	pusha  
c000f8a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8b5:	9c                   	pushf  
c000f8b6:	fa                   	cli    
c000f8b7:	0f 09                	wbinvd 
c000f8b9:	0f 30                	wrmsr  
c000f8bb:	9d                   	popf   
c000f8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c0:	89 02                	mov    DWORD PTR [edx],eax
c000f8c2:	61                   	popa   
c000f8c3:	c3                   	ret    

c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f8c4:	60                   	pusha  
c000f8c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8c9:	9c                   	pushf  
c000f8ca:	fa                   	cli    
c000f8cb:	0f 09                	wbinvd 
c000f8cd:	31 c0                	xor    eax,eax
c000f8cf:	31 d2                	xor    edx,edx
c000f8d1:	0f 32                	rdmsr  
c000f8d3:	9d                   	popf   
c000f8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8d8:	89 02                	mov    DWORD PTR [edx],eax
c000f8da:	61                   	popa   
c000f8db:	c3                   	ret    

c000f8dc <CPU::AMD_K6_writeback(int, int, int)>:
c000f8dc:	56                   	push   esi
c000f8dd:	53                   	push   ebx
c000f8de:	83 ec 10             	sub    esp,0x10
c000f8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8e5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f8ea:	75 5d                	jne    c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8ec:	83 f8 08             	cmp    eax,0x8
c000f8ef:	75 09                	jne    c000f8fa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f8f1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f8f6:	7e 13                	jle    c000f90b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f8f8:	eb 30                	jmp    c000f92a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f8fa:	83 f8 06             	cmp    eax,0x6
c000f8fd:	7c 4a                	jl     c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8ff:	83 f8 07             	cmp    eax,0x7
c000f902:	7e 07                	jle    c000f90b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f904:	83 f8 09             	cmp    eax,0x9
c000f907:	74 21                	je     c000f92a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f909:	eb 3e                	jmp    c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f90b:	89 e6                	mov    esi,esp
c000f90d:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f913:	56                   	push   esi
c000f914:	c1 eb 15             	shr    ebx,0x15
c000f917:	68 82 00 00 c0       	push   0xc0000082
c000f91c:	83 e3 7e             	and    ebx,0x7e
c000f91f:	e8 a0 ff ff ff       	call   c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f924:	56                   	push   esi
c000f925:	6a 00                	push   0x0
c000f927:	53                   	push   ebx
c000f928:	eb 12                	jmp    c000f93c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f92a:	89 e3                	mov    ebx,esp
c000f92c:	53                   	push   ebx
c000f92d:	68 82 00 00 c0       	push   0xc0000082
c000f932:	e8 8d ff ff ff       	call   c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f937:	53                   	push   ebx
c000f938:	6a 00                	push   0x0
c000f93a:	6a 00                	push   0x0
c000f93c:	68 82 00 00 c0       	push   0xc0000082
c000f941:	e8 62 ff ff ff       	call   c000f8a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f946:	83 c4 18             	add    esp,0x18
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	c3                   	ret    
c000f94f:	90                   	nop

c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f950:	55                   	push   ebp
c000f951:	57                   	push   edi
c000f952:	56                   	push   esi
c000f953:	53                   	push   ebx
c000f954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f958:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f95c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f960:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f964:	39 05 18 27 02 c0    	cmp    DWORD PTR ds:0xc0022718,eax
c000f96a:	75 23                	jne    c000f98f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f96c:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f971:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f975:	89 06                	mov    DWORD PTR [esi],eax
c000f977:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f97c:	89 07                	mov    DWORD PTR [edi],eax
c000f97e:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f983:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f986:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f98b:	89 02                	mov    DWORD PTR [edx],eax
c000f98d:	eb 3f                	jmp    c000f9ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f98f:	31 c9                	xor    ecx,ecx
c000f991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f995:	0f a2                	cpuid  
c000f997:	89 06                	mov    DWORD PTR [esi],eax
c000f999:	89 1f                	mov    DWORD PTR [edi],ebx
c000f99b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f99f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f9a2:	89 10                	mov    DWORD PTR [eax],edx
c000f9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9a8:	a3 18 27 02 c0       	mov    ds:0xc0022718,eax
c000f9ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9af:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f9b4:	8b 07                	mov    eax,DWORD PTR [edi]
c000f9b6:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f9bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f9be:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f9c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c9:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f9ce:	5b                   	pop    ebx
c000f9cf:	5e                   	pop    esi
c000f9d0:	5f                   	pop    edi
c000f9d1:	5d                   	pop    ebp
c000f9d2:	c3                   	ret    
c000f9d3:	90                   	nop

c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>:
c000f9d4:	83 ec 10             	sub    esp,0x10
c000f9d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9db:	50                   	push   eax
c000f9dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e0:	50                   	push   eax
c000f9e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e5:	50                   	push   eax
c000f9e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ea:	50                   	push   eax
c000f9eb:	6a 01                	push   0x1
c000f9ed:	e8 5e ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f9fa:	0f 95 c0             	setne  al
c000f9fd:	83 c4 24             	add    esp,0x24
c000fa00:	c3                   	ret    
c000fa01:	90                   	nop

c000fa02 <CPU::cpuidCheckECX(unsigned int)>:
c000fa02:	83 ec 10             	sub    esp,0x10
c000fa05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa09:	50                   	push   eax
c000fa0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa0e:	50                   	push   eax
c000fa0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa13:	50                   	push   eax
c000fa14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa18:	50                   	push   eax
c000fa19:	6a 01                	push   0x1
c000fa1b:	e8 30 ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa24:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa28:	0f 95 c0             	setne  al
c000fa2b:	83 c4 24             	add    esp,0x24
c000fa2e:	c3                   	ret    
c000fa2f:	90                   	nop

c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fa30:	83 ec 10             	sub    esp,0x10
c000fa33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa37:	50                   	push   eax
c000fa38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa3c:	50                   	push   eax
c000fa3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa41:	50                   	push   eax
c000fa42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa46:	50                   	push   eax
c000fa47:	6a 07                	push   0x7
c000fa49:	e8 02 ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa52:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fa56:	0f 95 c0             	setne  al
c000fa59:	83 c4 24             	add    esp,0x24
c000fa5c:	c3                   	ret    
c000fa5d:	90                   	nop

c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fa5e:	83 ec 10             	sub    esp,0x10
c000fa61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa65:	50                   	push   eax
c000fa66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa6a:	50                   	push   eax
c000fa6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa6f:	50                   	push   eax
c000fa70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa74:	50                   	push   eax
c000fa75:	6a 07                	push   0x7
c000fa77:	e8 d4 fe ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa80:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa84:	0f 95 c0             	setne  al
c000fa87:	83 c4 24             	add    esp,0x24
c000fa8a:	c3                   	ret    
c000fa8b:	90                   	nop

c000fa8c <CPU::CPU()>:
c000fa8c:	83 ec 0c             	sub    esp,0xc
c000fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa93:	83 ec 08             	sub    esp,0x8
c000fa96:	68 b5 12 02 c0       	push   0xc00212b5
c000fa9b:	50                   	push   eax
c000fa9c:	e8 39 c7 ff ff       	call   c000c1da <Device::Device(char const*)>
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	ba 48 13 02 c0       	mov    edx,0xc0021348
c000faa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faad:	89 10                	mov    DWORD PTR [eax],edx
c000faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fac1:	05 78 01 00 00       	add    eax,0x178
c000fac6:	83 ec 0c             	sub    esp,0xc
c000fac9:	50                   	push   eax
c000faca:	e8 85 78 ff ff       	call   c0007354 <GDT::GDT()>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fad6:	05 7c 09 00 00       	add    eax,0x97c
c000fadb:	83 ec 0c             	sub    esp,0xc
c000fade:	50                   	push   eax
c000fadf:	e8 c0 7a ff ff       	call   c00075a4 <IDT::IDT()>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faeb:	05 7c 11 00 00       	add    eax,0x117c
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	50                   	push   eax
c000faf4:	e8 3f 94 ff ff       	call   c0008f38 <TSS::TSS()>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb00:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb0b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fb15:	90                   	nop
c000fb16:	83 c4 0c             	add    esp,0xc
c000fb19:	c3                   	ret    

c000fb1a <CPU::displayFeatures()>:
c000fb1a:	c3                   	ret    
c000fb1b:	90                   	nop

c000fb1c <CPU::detectFeatures()>:
c000fb1c:	55                   	push   ebp
c000fb1d:	57                   	push   edi
c000fb1e:	56                   	push   esi
c000fb1f:	53                   	push   ebx
c000fb20:	83 ec 30             	sub    esp,0x30
c000fb23:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb27:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fb31:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fb38:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fb3e:	6a 0d                	push   0xd
c000fb40:	6a 00                	push   0x0
c000fb42:	55                   	push   ebp
c000fb43:	e8 a8 09 ff ff       	call   c00004f0 <memset>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fb50:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fb57:	0f 84 db 05 00 00    	je     c0010138 <CPU::detectFeatures()+0x61c>
c000fb5d:	83 ec 0c             	sub    esp,0xc
c000fb60:	89 ef                	mov    edi,ebp
c000fb62:	6a 10                	push   0x10
c000fb64:	e8 6b fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fb69:	83 e0 01             	and    eax,0x1
c000fb6c:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb6f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb75:	83 e0 fd             	and    eax,0xfffffffd
c000fb78:	09 d0                	or     eax,edx
c000fb7a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb80:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fb87:	e8 48 fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fb8c:	83 e0 01             	and    eax,0x1
c000fb8f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb96:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb9c:	83 e0 fb             	and    eax,0xfffffffb
c000fb9f:	09 d0                	or     eax,edx
c000fba1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fba7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fbae:	e8 21 fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbb3:	83 e0 01             	and    eax,0x1
c000fbb6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbbd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbc3:	83 e0 f7             	and    eax,0xfffffff7
c000fbc6:	09 d0                	or     eax,edx
c000fbc8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbce:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fbd5:	e8 fa fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbda:	83 e0 01             	and    eax,0x1
c000fbdd:	c1 e0 04             	shl    eax,0x4
c000fbe0:	89 c2                	mov    edx,eax
c000fbe2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbe8:	83 e0 ef             	and    eax,0xffffffef
c000fbeb:	09 d0                	or     eax,edx
c000fbed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbf3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fbfa:	e8 d5 fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbff:	83 e0 01             	and    eax,0x1
c000fc02:	c1 e0 05             	shl    eax,0x5
c000fc05:	89 c2                	mov    edx,eax
c000fc07:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc0d:	83 e0 df             	and    eax,0xffffffdf
c000fc10:	09 d0                	or     eax,edx
c000fc12:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc18:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fc1f:	e8 b0 fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fc24:	83 e0 01             	and    eax,0x1
c000fc27:	8d 14 00             	lea    edx,[eax+eax*1]
c000fc2a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc30:	83 e0 fd             	and    eax,0xfffffffd
c000fc33:	09 d0                	or     eax,edx
c000fc35:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc3b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fc42:	e8 8d fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fc47:	83 e0 01             	and    eax,0x1
c000fc4a:	c1 e0 06             	shl    eax,0x6
c000fc4d:	89 c2                	mov    edx,eax
c000fc4f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc55:	83 e0 bf             	and    eax,0xffffffbf
c000fc58:	09 d0                	or     eax,edx
c000fc5a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc60:	58                   	pop    eax
c000fc61:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc65:	50                   	push   eax
c000fc66:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc6a:	50                   	push   eax
c000fc6b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc6f:	56                   	push   esi
c000fc70:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc74:	50                   	push   eax
c000fc75:	6a 00                	push   0x0
c000fc77:	e8 d4 fc ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc7c:	b8 04 00 00 00       	mov    eax,0x4
c000fc81:	89 c1                	mov    ecx,eax
c000fc83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc85:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fc8b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fc8f:	89 c1                	mov    ecx,eax
c000fc91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc93:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fc99:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fc9d:	89 c1                	mov    ecx,eax
c000fc9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fca1:	83 c4 18             	add    esp,0x18
c000fca4:	68 c4 11 02 c0       	push   0xc00211c4
c000fca9:	55                   	push   ebp
c000fcaa:	e8 a1 0a ff ff       	call   c0000750 <strcmp>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	85 c0                	test   eax,eax
c000fcb4:	75 0f                	jne    c000fcc5 <CPU::detectFeatures()+0x1a9>
c000fcb6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fcc0:	e9 22 02 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fcc5:	50                   	push   eax
c000fcc6:	50                   	push   eax
c000fcc7:	68 d1 11 02 c0       	push   0xc00211d1
c000fccc:	55                   	push   ebp
c000fccd:	e8 7e 0a ff ff       	call   c0000750 <strcmp>
c000fcd2:	83 c4 10             	add    esp,0x10
c000fcd5:	85 c0                	test   eax,eax
c000fcd7:	74 dd                	je     c000fcb6 <CPU::detectFeatures()+0x19a>
c000fcd9:	50                   	push   eax
c000fcda:	50                   	push   eax
c000fcdb:	68 de 11 02 c0       	push   0xc00211de
c000fce0:	55                   	push   ebp
c000fce1:	e8 6a 0a ff ff       	call   c0000750 <strcmp>
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	85 c0                	test   eax,eax
c000fceb:	74 2a                	je     c000fd17 <CPU::detectFeatures()+0x1fb>
c000fced:	50                   	push   eax
c000fcee:	50                   	push   eax
c000fcef:	68 eb 11 02 c0       	push   0xc00211eb
c000fcf4:	55                   	push   ebp
c000fcf5:	e8 56 0a ff ff       	call   c0000750 <strcmp>
c000fcfa:	83 c4 10             	add    esp,0x10
c000fcfd:	85 c0                	test   eax,eax
c000fcff:	74 16                	je     c000fd17 <CPU::detectFeatures()+0x1fb>
c000fd01:	50                   	push   eax
c000fd02:	50                   	push   eax
c000fd03:	68 f8 11 02 c0       	push   0xc00211f8
c000fd08:	55                   	push   ebp
c000fd09:	e8 42 0a ff ff       	call   c0000750 <strcmp>
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	85 c0                	test   eax,eax
c000fd13:	74 48                	je     c000fd5d <CPU::detectFeatures()+0x241>
c000fd15:	eb 0f                	jmp    c000fd26 <CPU::detectFeatures()+0x20a>
c000fd17:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fd21:	e9 c1 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd26:	50                   	push   eax
c000fd27:	50                   	push   eax
c000fd28:	68 05 12 02 c0       	push   0xc0021205
c000fd2d:	55                   	push   ebp
c000fd2e:	e8 1d 0a ff ff       	call   c0000750 <strcmp>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	85 c0                	test   eax,eax
c000fd38:	74 23                	je     c000fd5d <CPU::detectFeatures()+0x241>
c000fd3a:	57                   	push   edi
c000fd3b:	57                   	push   edi
c000fd3c:	68 12 12 02 c0       	push   0xc0021212
c000fd41:	55                   	push   ebp
c000fd42:	e8 09 0a ff ff       	call   c0000750 <strcmp>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	85 c0                	test   eax,eax
c000fd4c:	75 1e                	jne    c000fd6c <CPU::detectFeatures()+0x250>
c000fd4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd58:	e9 8a 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd5d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fd67:	e9 7b 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd6c:	56                   	push   esi
c000fd6d:	56                   	push   esi
c000fd6e:	68 1f 12 02 c0       	push   0xc002121f
c000fd73:	55                   	push   ebp
c000fd74:	e8 d7 09 ff ff       	call   c0000750 <strcmp>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	85 c0                	test   eax,eax
c000fd7e:	75 0f                	jne    c000fd8f <CPU::detectFeatures()+0x273>
c000fd80:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fd8a:	e9 58 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd8f:	51                   	push   ecx
c000fd90:	51                   	push   ecx
c000fd91:	68 de 11 02 c0       	push   0xc00211de
c000fd96:	55                   	push   ebp
c000fd97:	e8 b4 09 ff ff       	call   c0000750 <strcmp>
c000fd9c:	83 c4 10             	add    esp,0x10
c000fd9f:	85 c0                	test   eax,eax
c000fda1:	75 0f                	jne    c000fdb2 <CPU::detectFeatures()+0x296>
c000fda3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fdad:	e9 35 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdb2:	52                   	push   edx
c000fdb3:	52                   	push   edx
c000fdb4:	68 2c 12 02 c0       	push   0xc002122c
c000fdb9:	55                   	push   ebp
c000fdba:	e8 91 09 ff ff       	call   c0000750 <strcmp>
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	85 c0                	test   eax,eax
c000fdc4:	75 0f                	jne    c000fdd5 <CPU::detectFeatures()+0x2b9>
c000fdc6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fdd0:	e9 12 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdd5:	50                   	push   eax
c000fdd6:	50                   	push   eax
c000fdd7:	68 39 12 02 c0       	push   0xc0021239
c000fddc:	55                   	push   ebp
c000fddd:	e8 6e 09 ff ff       	call   c0000750 <strcmp>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	85 c0                	test   eax,eax
c000fde7:	75 0f                	jne    c000fdf8 <CPU::detectFeatures()+0x2dc>
c000fde9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fdf3:	e9 ef 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdf8:	50                   	push   eax
c000fdf9:	50                   	push   eax
c000fdfa:	68 46 12 02 c0       	push   0xc0021246
c000fdff:	55                   	push   ebp
c000fe00:	e8 4b 09 ff ff       	call   c0000750 <strcmp>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	85 c0                	test   eax,eax
c000fe0a:	75 0f                	jne    c000fe1b <CPU::detectFeatures()+0x2ff>
c000fe0c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fe16:	e9 cc 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe1b:	50                   	push   eax
c000fe1c:	50                   	push   eax
c000fe1d:	68 53 12 02 c0       	push   0xc0021253
c000fe22:	55                   	push   ebp
c000fe23:	e8 28 09 ff ff       	call   c0000750 <strcmp>
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	85 c0                	test   eax,eax
c000fe2d:	75 0f                	jne    c000fe3e <CPU::detectFeatures()+0x322>
c000fe2f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fe39:	e9 a9 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe3e:	50                   	push   eax
c000fe3f:	50                   	push   eax
c000fe40:	68 60 12 02 c0       	push   0xc0021260
c000fe45:	55                   	push   ebp
c000fe46:	e8 05 09 ff ff       	call   c0000750 <strcmp>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	85 c0                	test   eax,eax
c000fe50:	75 0f                	jne    c000fe61 <CPU::detectFeatures()+0x345>
c000fe52:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fe5c:	e9 86 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe61:	50                   	push   eax
c000fe62:	50                   	push   eax
c000fe63:	68 6d 12 02 c0       	push   0xc002126d
c000fe68:	55                   	push   ebp
c000fe69:	e8 e2 08 ff ff       	call   c0000750 <strcmp>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	85 c0                	test   eax,eax
c000fe73:	75 0c                	jne    c000fe81 <CPU::detectFeatures()+0x365>
c000fe75:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fe7f:	eb 66                	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe81:	50                   	push   eax
c000fe82:	50                   	push   eax
c000fe83:	68 7a 12 02 c0       	push   0xc002127a
c000fe88:	55                   	push   ebp
c000fe89:	e8 c2 08 ff ff       	call   c0000750 <strcmp>
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	85 c0                	test   eax,eax
c000fe93:	75 0c                	jne    c000fea1 <CPU::detectFeatures()+0x385>
c000fe95:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fe9f:	eb 46                	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fea1:	57                   	push   edi
c000fea2:	57                   	push   edi
c000fea3:	68 87 12 02 c0       	push   0xc0021287
c000fea8:	55                   	push   ebp
c000fea9:	e8 a2 08 ff ff       	call   c0000750 <strcmp>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	85 c0                	test   eax,eax
c000feb3:	74 e0                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000feb5:	56                   	push   esi
c000feb6:	56                   	push   esi
c000feb7:	68 94 12 02 c0       	push   0xc0021294
c000febc:	55                   	push   ebp
c000febd:	e8 8e 08 ff ff       	call   c0000750 <strcmp>
c000fec2:	83 c4 10             	add    esp,0x10
c000fec5:	85 c0                	test   eax,eax
c000fec7:	74 cc                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000fec9:	51                   	push   ecx
c000feca:	51                   	push   ecx
c000fecb:	68 a1 12 02 c0       	push   0xc00212a1
c000fed0:	55                   	push   ebp
c000fed1:	e8 7a 08 ff ff       	call   c0000750 <strcmp>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	85 c0                	test   eax,eax
c000fedb:	74 b8                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000fedd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fee7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000feec:	0f 86 be 00 00 00    	jbe    c000ffb0 <CPU::detectFeatures()+0x494>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	68 80 00 00 00       	push   0x80
c000fefa:	e8 31 fb ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feff:	83 e0 01             	and    eax,0x1
c000ff02:	c1 e0 06             	shl    eax,0x6
c000ff05:	89 c2                	mov    edx,eax
c000ff07:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff0d:	83 e0 bf             	and    eax,0xffffffbf
c000ff10:	09 d0                	or     eax,edx
c000ff12:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff18:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000ff1f:	e8 0c fb ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff24:	83 e0 01             	and    eax,0x1
c000ff27:	c1 e0 04             	shl    eax,0x4
c000ff2a:	89 c2                	mov    edx,eax
c000ff2c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff32:	83 e0 ef             	and    eax,0xffffffef
c000ff35:	09 d0                	or     eax,edx
c000ff37:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff3d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000ff44:	e8 e7 fa ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff49:	89 c2                	mov    edx,eax
c000ff4b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff51:	c1 e2 07             	shl    edx,0x7
c000ff54:	83 e0 7f             	and    eax,0x7f
c000ff57:	09 d0                	or     eax,edx
c000ff59:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ff66:	e8 f3 fa ff ff       	call   c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff6b:	83 e0 01             	and    eax,0x1
c000ff6e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ff75:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff7b:	83 e0 f7             	and    eax,0xfffffff7
c000ff7e:	09 d0                	or     eax,edx
c000ff80:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff86:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ff8d:	e8 cc fa ff ff       	call   c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff92:	83 c4 10             	add    esp,0x10
c000ff95:	83 e0 01             	and    eax,0x1
c000ff98:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff9f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffa5:	83 e0 fb             	and    eax,0xfffffffb
c000ffa8:	09 d0                	or     eax,edx
c000ffaa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ffb7:	50                   	push   eax
c000ffb8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ffbc:	50                   	push   eax
c000ffbd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ffc1:	57                   	push   edi
c000ffc2:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ffc6:	56                   	push   esi
c000ffc7:	6a 01                	push   0x1
c000ffc9:	e8 82 f9 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000ffd8:	89 c1                	mov    ecx,eax
c000ffda:	83 e2 f0             	and    edx,0xfffffff0
c000ffdd:	83 e1 0f             	and    ecx,0xf
c000ffe0:	09 ca                	or     edx,ecx
c000ffe2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ffe8:	89 c2                	mov    edx,eax
c000ffea:	c1 ea 04             	shr    edx,0x4
c000ffed:	83 e2 0f             	and    edx,0xf
c000fff0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fff4:	89 d1                	mov    ecx,edx
c000fff6:	83 c4 20             	add    esp,0x20
c000fff9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000ffff:	c1 e1 06             	shl    ecx,0x6
c0010002:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010008:	09 ca                	or     edx,ecx
c001000a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010011:	89 c2                	mov    edx,eax
c0010013:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010019:	c1 ea 08             	shr    edx,0x8
c001001c:	83 e1 3f             	and    ecx,0x3f
c001001f:	83 e2 0f             	and    edx,0xf
c0010022:	89 d5                	mov    ebp,edx
c0010024:	83 e5 03             	and    ebp,0x3
c0010027:	c1 e5 06             	shl    ebp,0x6
c001002a:	09 e9                	or     ecx,ebp
c001002c:	89 d5                	mov    ebp,edx
c001002e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010034:	c1 ed 02             	shr    ebp,0x2
c0010037:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001003d:	83 e1 c0             	and    ecx,0xffffffc0
c0010040:	09 e9                	or     ecx,ebp
c0010042:	89 c5                	mov    ebp,eax
c0010044:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001004a:	c1 ed 08             	shr    ebp,0x8
c001004d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010053:	83 e5 30             	and    ebp,0x30
c0010056:	83 e1 cf             	and    ecx,0xffffffcf
c0010059:	09 e9                	or     ecx,ebp
c001005b:	83 fa 06             	cmp    edx,0x6
c001005e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010064:	74 05                	je     c001006b <CPU::detectFeatures()+0x54f>
c0010066:	83 fa 0f             	cmp    edx,0xf
c0010069:	75 64                	jne    c00100cf <CPU::detectFeatures()+0x5b3>
c001006b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010071:	89 c1                	mov    ecx,eax
c0010073:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010079:	c1 e9 10             	shr    ecx,0x10
c001007c:	c1 e1 04             	shl    ecx,0x4
c001007f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010083:	0f b6 c9             	movzx  ecx,cl
c0010086:	c1 e1 06             	shl    ecx,0x6
c0010089:	09 e9                	or     ecx,ebp
c001008b:	83 fa 0f             	cmp    edx,0xf
c001008e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010095:	75 38                	jne    c00100cf <CPU::detectFeatures()+0x5b3>
c0010097:	c1 e8 14             	shr    eax,0x14
c001009a:	83 c0 0f             	add    eax,0xf
c001009d:	0f b6 c0             	movzx  eax,al
c00100a0:	89 c2                	mov    edx,eax
c00100a2:	c1 e8 02             	shr    eax,0x2
c00100a5:	83 e2 03             	and    edx,0x3
c00100a8:	89 d1                	mov    ecx,edx
c00100aa:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00100b0:	c1 e1 06             	shl    ecx,0x6
c00100b3:	83 e2 3f             	and    edx,0x3f
c00100b6:	09 ca                	or     edx,ecx
c00100b8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00100be:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00100c4:	83 e2 c0             	and    edx,0xffffffc0
c00100c7:	09 d0                	or     eax,edx
c00100c9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00100cf:	83 ec 0c             	sub    esp,0xc
c00100d2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00100d8:	83 c8 07             	or     eax,0x7
c00100db:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00100e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00100e5:	50                   	push   eax
c00100e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00100ea:	55                   	push   ebp
c00100eb:	57                   	push   edi
c00100ec:	56                   	push   esi
c00100ed:	68 00 00 00 80       	push   0x80000000
c00100f2:	e8 59 f8 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100f7:	83 c4 20             	add    esp,0x20
c00100fa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010102:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010106:	76 1e                	jbe    c0010126 <CPU::detectFeatures()+0x60a>
c0010108:	83 ec 0c             	sub    esp,0xc
c001010b:	50                   	push   eax
c001010c:	55                   	push   ebp
c001010d:	57                   	push   edi
c001010e:	56                   	push   esi
c001010f:	68 01 00 00 80       	push   0x80000001
c0010114:	e8 37 f8 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010119:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010123:	83 c4 20             	add    esp,0x20
c0010126:	52                   	push   edx
c0010127:	52                   	push   edx
c0010128:	68 ad 12 02 c0       	push   0xc00212ad
c001012d:	53                   	push   ebx
c001012e:	e8 99 c0 ff ff       	call   c000c1cc <Device::setName(char const*)>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	eb 69                	jmp    c00101a1 <CPU::detectFeatures()+0x685>
c0010138:	50                   	push   eax
c0010139:	50                   	push   eax
c001013a:	68 12 12 02 c0       	push   0xc0021212
c001013f:	55                   	push   ebp
c0010140:	e8 fb 04 ff ff       	call   c0000640 <strcpy>
c0010145:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001014f:	e8 6f 00 ff ff       	call   c00001c3 <is486>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	85 c0                	test   eax,eax
c0010159:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001015f:	74 1f                	je     c0010180 <CPU::detectFeatures()+0x664>
c0010161:	83 c8 07             	or     eax,0x7
c0010164:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001016a:	0f 20 c0             	mov    eax,cr0
c001016d:	83 e0 14             	and    eax,0x14
c0010170:	83 f8 04             	cmp    eax,0x4
c0010173:	75 10                	jne    c0010185 <CPU::detectFeatures()+0x669>
c0010175:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001017b:	83 e0 fd             	and    eax,0xfffffffd
c001017e:	eb 1b                	jmp    c001019b <CPU::detectFeatures()+0x67f>
c0010180:	83 e0 f8             	and    eax,0xfffffff8
c0010183:	eb df                	jmp    c0010164 <CPU::detectFeatures()+0x648>
c0010185:	e8 14 00 ff ff       	call   c000019e <hasLegacyFPU>
c001018a:	83 e0 01             	and    eax,0x1
c001018d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010190:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010196:	83 e0 fd             	and    eax,0xfffffffd
c0010199:	09 d0                	or     eax,edx
c001019b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101a1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00101a8:	74 17                	je     c00101c1 <CPU::detectFeatures()+0x6a5>
c00101aa:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c00101b0:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00101b6:	83 c8 10             	or     eax,0x10
c00101b9:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00101bf:	eb 20                	jmp    c00101e1 <CPU::detectFeatures()+0x6c5>
c00101c1:	e8 d8 ff fe ff       	call   c000019e <hasLegacyFPU>
c00101c6:	83 e0 01             	and    eax,0x1
c00101c9:	8d 14 00             	lea    edx,[eax+eax*1]
c00101cc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101d2:	83 e0 fd             	and    eax,0xfffffffd
c00101d5:	09 d0                	or     eax,edx
c00101d7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101dd:	a8 02                	test   al,0x2
c00101df:	75 c9                	jne    c00101aa <CPU::detectFeatures()+0x68e>
c00101e1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00101e8:	83 c4 2c             	add    esp,0x2c
c00101eb:	5b                   	pop    ebx
c00101ec:	5e                   	pop    esi
c00101ed:	5f                   	pop    edi
c00101ee:	5d                   	pop    ebp
c00101ef:	c3                   	ret    

c00101f0 <CPU::setupSMEP()>:
c00101f0:	0f 20 e0             	mov    eax,cr4
c00101f3:	0d 00 00 10 00       	or     eax,0x100000
c00101f8:	0f 22 e0             	mov    cr4,eax
c00101fb:	c3                   	ret    

c00101fc <CPU::setupUMIP()>:
c00101fc:	0f 20 e0             	mov    eax,cr4
c00101ff:	80 cc 08             	or     ah,0x8
c0010202:	0f 22 e0             	mov    cr4,eax
c0010205:	c3                   	ret    

c0010206 <CPU::setupTSC()>:
c0010206:	0f 20 e0             	mov    eax,cr4
c0010209:	83 c8 04             	or     eax,0x4
c001020c:	0f 22 e0             	mov    cr4,eax
c001020f:	c3                   	ret    

c0010210 <CPU::setupLargePages()>:
c0010210:	0f 20 e0             	mov    eax,cr4
c0010213:	83 c8 10             	or     eax,0x10
c0010216:	0f 22 e0             	mov    cr4,eax
c0010219:	c3                   	ret    

c001021a <CPU::setupPAT()>:
c001021a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001021f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010226:	74 2c                	je     c0010254 <CPU::setupPAT()+0x3a>
c0010228:	53                   	push   ebx
c0010229:	83 ec 10             	sub    esp,0x10
c001022c:	68 77 02 00 00       	push   0x277
c0010231:	50                   	push   eax
c0010232:	e8 81 6e ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0010237:	83 e2 f8             	and    edx,0xfffffff8
c001023a:	83 ca 01             	or     edx,0x1
c001023d:	52                   	push   edx
c001023e:	50                   	push   eax
c001023f:	68 77 02 00 00       	push   0x277
c0010244:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001024a:	e8 95 6e ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001024f:	83 c4 28             	add    esp,0x28
c0010252:	5b                   	pop    ebx
c0010253:	c3                   	ret    
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <CPU::setupMTRR()>:
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <CPU::setupGlobalPages()>:
c0010258:	0f 20 e0             	mov    eax,cr4
c001025b:	0c 80                	or     al,0x80
c001025d:	0f 22 e0             	mov    cr4,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <CPU::allowUsermodeDataAccess()>:
c0010262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010266:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001026d:	74 03                	je     c0010272 <CPU::allowUsermodeDataAccess()+0x10>
c001026f:	0f 01 cb             	stac   
c0010272:	c3                   	ret    
c0010273:	90                   	nop

c0010274 <CPU::prohibitUsermodeDataAccess()>:
c0010274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010278:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001027f:	74 03                	je     c0010284 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010281:	0f 01 ca             	clac   
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <CPU::setupSMAP()>:
c0010286:	0f 20 e0             	mov    eax,cr4
c0010289:	0d 00 00 20 00       	or     eax,0x200000
c001028e:	0f 22 e0             	mov    cr4,eax
c0010291:	eb e1                	jmp    c0010274 <CPU::prohibitUsermodeDataAccess()>
c0010293:	90                   	nop

c0010294 <CPU::setupFeatures()>:
c0010294:	53                   	push   ebx
c0010295:	83 ec 08             	sub    esp,0x8
c0010298:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001029c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00102a3:	74 18                	je     c00102bd <CPU::setupFeatures()+0x29>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	68 b9 12 02 c0       	push   0xc00212b9
c00102ad:	e8 87 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b5:	e8 42 ff ff ff       	call   c00101fc <CPU::setupUMIP()>
c00102ba:	83 c4 10             	add    esp,0x10
c00102bd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00102c4:	74 18                	je     c00102de <CPU::setupFeatures()+0x4a>
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	68 c3 12 02 c0       	push   0xc00212c3
c00102ce:	e8 66 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102d6:	e8 2b ff ff ff       	call   c0010206 <CPU::setupTSC()>
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00102e5:	74 18                	je     c00102ff <CPU::setupFeatures()+0x6b>
c00102e7:	83 ec 0c             	sub    esp,0xc
c00102ea:	68 cc 12 02 c0       	push   0xc00212cc
c00102ef:	e8 45 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f7:	e8 14 ff ff ff       	call   c0010210 <CPU::setupLargePages()>
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010306:	74 18                	je     c0010320 <CPU::setupFeatures()+0x8c>
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	68 d5 12 02 c0       	push   0xc00212d5
c0010310:	e8 24 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0010315:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010318:	e8 3b ff ff ff       	call   c0010258 <CPU::setupGlobalPages()>
c001031d:	83 c4 10             	add    esp,0x10
c0010320:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010327:	74 18                	je     c0010341 <CPU::setupFeatures()+0xad>
c0010329:	83 ec 0c             	sub    esp,0xc
c001032c:	68 e7 12 02 c0       	push   0xc00212e7
c0010331:	e8 03 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0010336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010339:	e8 dc fe ff ff       	call   c001021a <CPU::setupPAT()>
c001033e:	83 c4 10             	add    esp,0x10
c0010341:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010348:	74 11                	je     c001035b <CPU::setupFeatures()+0xc7>
c001034a:	c7 44 24 10 f0 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc00212f0
c0010352:	83 c4 08             	add    esp,0x8
c0010355:	5b                   	pop    ebx
c0010356:	e9 de a5 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c001035b:	83 c4 08             	add    esp,0x8
c001035e:	5b                   	pop    ebx
c001035f:	c3                   	ret    

c0010360 <CPU::open(int, int, void*)>:
c0010360:	55                   	push   ebp
c0010361:	57                   	push   edi
c0010362:	56                   	push   esi
c0010363:	53                   	push   ebx
c0010364:	83 ec 18             	sub    esp,0x18
c0010367:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001036b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001036f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010373:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010379:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001037f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010385:	50                   	push   eax
c0010386:	e8 2b 70 ff ff       	call   c00073b6 <GDT::setup()>
c001038b:	83 c4 0c             	add    esp,0xc
c001038e:	6a 00                	push   0x0
c0010390:	68 ef be ad de       	push   0xdeadbeef
c0010395:	55                   	push   ebp
c0010396:	e8 e1 8b ff ff       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c001039b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001039e:	e8 b9 8b ff ff       	call   c0008f5c <TSS::flush()>
c00103a3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00103a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ac:	e8 69 72 ff ff       	call   c000761a <IDT::setup()>
c00103b1:	b8 00 04 00 00       	mov    eax,0x400
c00103b6:	0f 23 f8             	mov    db7,eax
c00103b9:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00103c3:	e8 ea 79 ff ff       	call   c0007db2 <Phys::allocatePage()>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00103d1:	85 f6                	test   esi,esi
c00103d3:	89 38                	mov    DWORD PTR [eax],edi
c00103d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00103db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00103de:	74 10                	je     c00103f0 <CPU::open(int, int, void*)+0x90>
c00103e0:	50                   	push   eax
c00103e1:	50                   	push   eax
c00103e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00103e8:	56                   	push   esi
c00103e9:	e8 b4 94 ff ff       	call   c00098a2 <VAS::setCPUSpecific(unsigned long)>
c00103ee:	eb 0d                	jmp    c00103fd <CPU::open(int, int, void*)+0x9d>
c00103f0:	83 ec 0c             	sub    esp,0xc
c00103f3:	68 fa 12 02 c0       	push   0xc00212fa
c00103f8:	e8 bc 07 00 00       	call   c0010bb9 <KePanic(char const*)>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	68 08 13 02 c0       	push   0xc0021308
c0010408:	e8 d8 00 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c001040d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010410:	e8 07 f7 ff ff       	call   c000fb1c <CPU::detectFeatures()>
c0010415:	c7 04 24 2b 13 02 c0 	mov    DWORD PTR [esp],0xc002132b
c001041c:	e8 c4 00 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0010421:	e8 2b 70 00 00       	call   c0017451 <HalInitialise()>
c0010426:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c001042b:	83 e0 10             	and    eax,0x10
c001042e:	83 f8 01             	cmp    eax,0x1
c0010431:	19 c0                	sbb    eax,eax
c0010433:	83 e0 46             	and    eax,0x46
c0010436:	83 c0 1e             	add    eax,0x1e
c0010439:	89 04 24             	mov    DWORD PTR [esp],eax
c001043c:	e8 28 d6 ff ff       	call   c000da69 <setupTimer(int)>
c0010441:	83 c4 10             	add    esp,0x10
c0010444:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001044a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010451:	74 0c                	je     c001045f <CPU::open(int, int, void*)+0xff>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	53                   	push   ebx
c0010457:	e8 38 fe ff ff       	call   c0010294 <CPU::setupFeatures()>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	83 c4 0c             	add    esp,0xc
c0010462:	31 c0                	xor    eax,eax
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    

c0010469 <KeDisplaySplashScreen()>:
c0010469:	55                   	push   ebp
c001046a:	bd 05 00 00 00       	mov    ebp,0x5
c001046f:	57                   	push   edi
c0010470:	bf 0a 00 00 00       	mov    edi,0xa
c0010475:	56                   	push   esi
c0010476:	31 f6                	xor    esi,esi
c0010478:	53                   	push   ebx
c0010479:	31 db                	xor    ebx,ebx
c001047b:	83 ec 0c             	sub    esp,0xc
c001047e:	0f b6 96 20 27 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd8e0]
c0010485:	89 d0                	mov    eax,edx
c0010487:	85 d2                	test   edx,edx
c0010489:	74 52                	je     c00104dd <KeDisplaySplashScreen()+0x74>
c001048b:	80 bb 56 27 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd8aa],0xdb
c0010492:	75 13                	jne    c00104a7 <KeDisplaySplashScreen()+0x3e>
c0010494:	0f b6 8b 55 27 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd8ab]
c001049b:	83 e1 fe             	and    ecx,0xfffffffe
c001049e:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00104a4:	75 01                	jne    c00104a7 <KeDisplaySplashScreen()+0x3e>
c00104a6:	47                   	inc    edi
c00104a7:	83 fa 0d             	cmp    edx,0xd
c00104aa:	74 28                	je     c00104d4 <KeDisplaySplashScreen()+0x6b>
c00104ac:	83 fa 0a             	cmp    edx,0xa
c00104af:	75 0a                	jne    c00104bb <KeDisplaySplashScreen()+0x52>
c00104b1:	45                   	inc    ebp
c00104b2:	bf 0a 00 00 00       	mov    edi,0xa
c00104b7:	31 db                	xor    ebx,ebx
c00104b9:	eb 19                	jmp    c00104d4 <KeDisplaySplashScreen()+0x6b>
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	8d 14 1f             	lea    edx,[edi+ebx*1]
c00104c1:	55                   	push   ebp
c00104c2:	0f be c0             	movsx  eax,al
c00104c5:	52                   	push   edx
c00104c6:	43                   	inc    ebx
c00104c7:	6a 00                	push   0x0
c00104c9:	6a 0e                	push   0xe
c00104cb:	50                   	push   eax
c00104cc:	e8 ff 7b 00 00       	call   c00180d0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00104d1:	83 c4 20             	add    esp,0x20
c00104d4:	46                   	inc    esi
c00104d5:	81 fe 42 01 00 00    	cmp    esi,0x142
c00104db:	75 a1                	jne    c001047e <KeDisplaySplashScreen()+0x15>
c00104dd:	83 c4 0c             	add    esp,0xc
c00104e0:	5b                   	pop    ebx
c00104e1:	5e                   	pop    esi
c00104e2:	5f                   	pop    edi
c00104e3:	5d                   	pop    ebp
c00104e4:	c3                   	ret    

c00104e5 <KeSetBootMessage(char const*)>:
c00104e5:	57                   	push   edi
c00104e6:	56                   	push   esi
c00104e7:	53                   	push   ebx
c00104e8:	81 ec a4 00 00 00    	sub    esp,0xa4
c00104ee:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00104f5:	68 9e 00 00 00       	push   0x9e
c00104fa:	6a 00                	push   0x0
c00104fc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010500:	56                   	push   esi
c0010501:	e8 ea ff fe ff       	call   c00004f0 <memset>
c0010506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010509:	e8 62 00 ff ff       	call   c0000570 <strlen>
c001050e:	ba 50 00 00 00       	mov    edx,0x50
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	29 c2                	sub    edx,eax
c0010518:	31 c9                	xor    ecx,ecx
c001051a:	83 e2 fe             	and    edx,0xfffffffe
c001051d:	01 f2                	add    edx,esi
c001051f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010524:	84 c0                	test   al,al
c0010526:	74 0a                	je     c0010532 <KeSetBootMessage(char const*)+0x4d>
c0010528:	80 cc 0f             	or     ah,0xf
c001052b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001052f:	41                   	inc    ecx
c0010530:	eb ed                	jmp    c001051f <KeSetBootMessage(char const*)+0x3a>
c0010532:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010537:	b9 9e 00 00 00       	mov    ecx,0x9e
c001053c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001053e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010544:	5b                   	pop    ebx
c0010545:	5e                   	pop    esi
c0010546:	5f                   	pop    edi
c0010547:	c3                   	ret    

c0010548 <Krnl::handlePowerButton()>:
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	e8 c4 06 00 00       	call   c0010c14 <KeHandlePowerButton()>
c0010550:	90                   	nop
c0010551:	83 c4 0c             	add    esp,0xc
c0010554:	c3                   	ret    
c0010555:	8d 76 00             	lea    esi,[esi+0x0]

c0010558 <Krnl::handleSleepButton()>:
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	e8 e9 06 00 00       	call   c0010c49 <KeHandleSleepButton()>
c0010560:	90                   	nop
c0010561:	83 c4 0c             	add    esp,0xc
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <EnvVarContainer::getEnv(char const*)>:
c0010566:	57                   	push   edi
c0010567:	56                   	push   esi
c0010568:	53                   	push   ebx
c0010569:	31 db                	xor    ebx,ebx
c001056b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001056f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010571:	7e 2b                	jle    c001059e <EnvVarContainer::getEnv(char const*)+0x38>
c0010573:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001057a:	50                   	push   eax
c001057b:	50                   	push   eax
c001057c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001057f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010582:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010586:	e8 c5 01 ff ff       	call   c0000750 <strcmp>
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	85 c0                	test   eax,eax
c0010590:	75 09                	jne    c001059b <EnvVarContainer::getEnv(char const*)+0x35>
c0010592:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010595:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010599:	eb 05                	jmp    c00105a0 <EnvVarContainer::getEnv(char const*)+0x3a>
c001059b:	43                   	inc    ebx
c001059c:	eb d1                	jmp    c001056f <EnvVarContainer::getEnv(char const*)+0x9>
c001059e:	31 c0                	xor    eax,eax
c00105a0:	5b                   	pop    ebx
c00105a1:	5e                   	pop    esi
c00105a2:	5f                   	pop    edi
c00105a3:	c3                   	ret    

c00105a4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00105a4:	55                   	push   ebp
c00105a5:	57                   	push   edi
c00105a6:	56                   	push   esi
c00105a7:	53                   	push   ebx
c00105a8:	83 ec 28             	sub    esp,0x28
c00105ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00105af:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00105b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00105b7:	56                   	push   esi
c00105b8:	e8 b3 ff fe ff       	call   c0000570 <strlen>
c00105bd:	40                   	inc    eax
c00105be:	89 04 24             	mov    DWORD PTR [esp],eax
c00105c1:	e8 e8 74 ff ff       	call   c0007aae <malloc>
c00105c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105cd:	e8 9e ff fe ff       	call   c0000570 <strlen>
c00105d2:	40                   	inc    eax
c00105d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00105d6:	e8 d3 74 ff ff       	call   c0007aae <malloc>
c00105db:	89 34 24             	mov    DWORD PTR [esp],esi
c00105de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105e2:	e8 89 ff fe ff       	call   c0000570 <strlen>
c00105e7:	83 c4 0c             	add    esp,0xc
c00105ea:	40                   	inc    eax
c00105eb:	50                   	push   eax
c00105ec:	6a 00                	push   0x0
c00105ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105f2:	e8 f9 fe fe ff       	call   c00004f0 <memset>
c00105f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00105fa:	e8 71 ff fe ff       	call   c0000570 <strlen>
c00105ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010603:	8d 48 01             	lea    ecx,[eax+0x1]
c0010606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010608:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001060b:	89 de                	mov    esi,ebx
c001060d:	e8 5e ff fe ff       	call   c0000570 <strlen>
c0010612:	83 c4 0c             	add    esp,0xc
c0010615:	40                   	inc    eax
c0010616:	50                   	push   eax
c0010617:	6a 00                	push   0x0
c0010619:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001061d:	e8 ce fe fe ff       	call   c00004f0 <memset>
c0010622:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010625:	e8 46 ff fe ff       	call   c0000570 <strlen>
c001062a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001062e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010631:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010633:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010636:	40                   	inc    eax
c0010637:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001063a:	c1 e0 03             	shl    eax,0x3
c001063d:	5a                   	pop    edx
c001063e:	59                   	pop    ecx
c001063f:	50                   	push   eax
c0010640:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010643:	e8 52 74 ff ff       	call   c0007a9a <realloc>
c0010648:	8d 74 24 18          	lea    esi,[esp+0x18]
c001064c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001064f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010652:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010656:	b9 08 00 00 00       	mov    ecx,0x8
c001065b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001065d:	83 c4 2c             	add    esp,0x2c
c0010660:	5b                   	pop    ebx
c0010661:	5e                   	pop    esi
c0010662:	5f                   	pop    edi
c0010663:	5d                   	pop    ebp
c0010664:	c3                   	ret    
c0010665:	90                   	nop

c0010666 <EnvVarContainer::deleteEnv(char const*)>:
c0010666:	c3                   	ret    
c0010667:	90                   	nop

c0010668 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010668:	55                   	push   ebp
c0010669:	57                   	push   edi
c001066a:	56                   	push   esi
c001066b:	53                   	push   ebx
c001066c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010672:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010679:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010680:	68 14 01 00 00       	push   0x114
c0010685:	e8 24 74 ff ff       	call   c0007aae <malloc>
c001068a:	83 c4 0c             	add    esp,0xc
c001068d:	89 c3                	mov    ebx,eax
c001068f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010692:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010699:	50                   	push   eax
c001069a:	e8 f1 aa ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001069f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106a2:	e8 13 ae ff ff       	call   c000b4ba <File::exists()>
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	84 c0                	test   al,al
c00106ac:	75 31                	jne    c00106df <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00106ae:	50                   	push   eax
c00106af:	50                   	push   eax
c00106b0:	6a 12                	push   0x12
c00106b2:	53                   	push   ebx
c00106b3:	e8 94 ab ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00106b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ba:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00106bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00106c0:	e8 ab fe fe ff       	call   c0000570 <strlen>
c00106c5:	5a                   	pop    edx
c00106c6:	31 d2                	xor    edx,edx
c00106c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00106cc:	51                   	push   ecx
c00106cd:	56                   	push   esi
c00106ce:	52                   	push   edx
c00106cf:	50                   	push   eax
c00106d0:	53                   	push   ebx
c00106d1:	ff d7                	call   edi
c00106d3:	83 c4 14             	add    esp,0x14
c00106d6:	53                   	push   ebx
c00106d7:	e8 ce ab ff ff       	call   c000b2aa <File::close()>
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	56                   	push   esi
c00106e0:	31 f6                	xor    esi,esi
c00106e2:	68 00 01 00 00       	push   0x100
c00106e7:	6a 00                	push   0x0
c00106e9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00106ed:	50                   	push   eax
c00106ee:	e8 fd fd fe ff       	call   c00004f0 <memset>
c00106f3:	5f                   	pop    edi
c00106f4:	58                   	pop    eax
c00106f5:	6a 01                	push   0x1
c00106f7:	53                   	push   ebx
c00106f8:	e8 4f ab ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00106fd:	83 c4 10             	add    esp,0x10
c0010700:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010708:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010710:	83 ec 0c             	sub    esp,0xc
c0010713:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010715:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010719:	51                   	push   ecx
c001071a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001071e:	52                   	push   edx
c001071f:	6a 00                	push   0x0
c0010721:	6a 01                	push   0x1
c0010723:	53                   	push   ebx
c0010724:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010727:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001072c:	83 c4 20             	add    esp,0x20
c001072f:	89 c2                	mov    edx,eax
c0010731:	85 c0                	test   eax,eax
c0010733:	0f 84 36 01 00 00    	je     c001086f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010739:	83 f8 0d             	cmp    eax,0xd
c001073c:	0f 84 22 01 00 00    	je     c0010864 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010742:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010747:	0f 84 f0 00 00 00    	je     c001083d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001074d:	83 f8 0a             	cmp    eax,0xa
c0010750:	74 13                	je     c0010765 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010752:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010757:	74 0c                	je     c0010765 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010759:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001075f:	0f 8e f6 00 00 00    	jle    c001085b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010769:	83 ec 0c             	sub    esp,0xc
c001076c:	8d 78 01             	lea    edi,[eax+0x1]
c001076f:	57                   	push   edi
c0010770:	e8 39 73 ff ff       	call   c0007aae <malloc>
c0010775:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010779:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001077d:	8d 56 04             	lea    edx,[esi+0x4]
c0010780:	89 14 24             	mov    DWORD PTR [esp],edx
c0010783:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010787:	e8 22 73 ff ff       	call   c0007aae <malloc>
c001078c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010790:	83 c4 0c             	add    esp,0xc
c0010793:	57                   	push   edi
c0010794:	6a 00                	push   0x0
c0010796:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001079a:	e8 51 fd fe ff       	call   c00004f0 <memset>
c001079f:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00107a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00107ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107ad:	83 c4 0c             	add    esp,0xc
c00107b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107b4:	52                   	push   edx
c00107b5:	6a 00                	push   0x0
c00107b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00107bb:	e8 30 fd fe ff       	call   c00004f0 <memset>
c00107c0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107c4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00107c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00107cb:	e8 a0 fd fe ff       	call   c0000570 <strlen>
c00107d0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00107d4:	89 c1                	mov    ecx,eax
c00107d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00107db:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00107de:	40                   	inc    eax
c00107df:	83 c4 10             	add    esp,0x10
c00107e2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00107e5:	85 d2                	test   edx,edx
c00107e7:	75 0c                	jne    c00107f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00107e9:	83 ec 0c             	sub    esp,0xc
c00107ec:	6a 08                	push   0x8
c00107ee:	e8 bb 72 ff ff       	call   c0007aae <malloc>
c00107f3:	eb 0c                	jmp    c0010801 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00107f5:	c1 e0 03             	shl    eax,0x3
c00107f8:	51                   	push   ecx
c00107f9:	51                   	push   ecx
c00107fa:	50                   	push   eax
c00107fb:	52                   	push   edx
c00107fc:	e8 99 72 ff ff       	call   c0007a9a <realloc>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010807:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001080a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001080d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010811:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010815:	b9 08 00 00 00       	mov    ecx,0x8
c001081a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001081c:	31 f6                	xor    esi,esi
c001081e:	50                   	push   eax
c001081f:	68 00 01 00 00       	push   0x100
c0010824:	6a 00                	push   0x0
c0010826:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001082a:	50                   	push   eax
c001082b:	e8 c0 fc fe ff       	call   c00004f0 <memset>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001083b:	eb 27                	jmp    c0010864 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001083d:	83 f8 3d             	cmp    eax,0x3d
c0010840:	74 1e                	je     c0010860 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010842:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010848:	7f 07                	jg     c0010851 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001084a:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001084e:	46                   	inc    esi
c001084f:	eb 13                	jmp    c0010864 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010851:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010859:	eb 09                	jmp    c0010864 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001085b:	83 f8 3d             	cmp    eax,0x3d
c001085e:	75 ea                	jne    c001084a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010860:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010864:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010869:	0f 85 99 fe ff ff    	jne    c0010708 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001086f:	83 ec 0c             	sub    esp,0xc
c0010872:	53                   	push   ebx
c0010873:	e8 32 aa ff ff       	call   c000b2aa <File::close()>
c0010878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001087a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001087d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010880:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010886:	5b                   	pop    ebx
c0010887:	5e                   	pop    esi
c0010888:	5f                   	pop    edi
c0010889:	5d                   	pop    ebp
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <EnvVarContainer::__loadSystem()>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	68 80 28 02 c0       	push   0xc0022880
c0010894:	68 6c 13 02 c0       	push   0xc002136c
c0010899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001089d:	e8 c6 fd ff ff       	call   c0010668 <EnvVarContainer::loadFrom(char const*, char const*)>
c00108a2:	83 c4 1c             	add    esp,0x1c
c00108a5:	c3                   	ret    

c00108a6 <EnvVarContainer::__loadUser()>:
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00108a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00108bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108c8:	90                   	nop
c00108c9:	c3                   	ret    

c00108ca <EnvVarContainer::~EnvVarContainer()>:
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108d4:	85 c0                	test   eax,eax
c00108d6:	74 1d                	je     c00108f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00108de:	85 c0                	test   eax,eax
c00108e0:	74 13                	je     c00108f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	50                   	push   eax
c00108ed:	e8 cc 71 ff ff       	call   c0007abe <free>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	90                   	nop
c00108f6:	83 c4 0c             	add    esp,0xc
c00108f9:	c3                   	ret    

c00108fa <KeGetEnv(Process*, char const*)>:
c00108fa:	53                   	push   ebx
c00108fb:	83 ec 08             	sub    esp,0x8
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010906:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001090c:	74 04                	je     c0010912 <KeGetEnv(Process*, char const*)+0x18>
c001090e:	85 c0                	test   eax,eax
c0010910:	75 0b                	jne    c001091d <KeGetEnv(Process*, char const*)+0x23>
c0010912:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010917:	85 c0                	test   eax,eax
c0010919:	75 19                	jne    c0010934 <KeGetEnv(Process*, char const*)+0x3a>
c001091b:	eb 27                	jmp    c0010944 <KeGetEnv(Process*, char const*)+0x4a>
c001091d:	52                   	push   edx
c001091e:	52                   	push   edx
c001091f:	53                   	push   ebx
c0010920:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010926:	e8 3b fc ff ff       	call   c0010566 <EnvVarContainer::getEnv(char const*)>
c001092b:	83 c4 10             	add    esp,0x10
c001092e:	85 c0                	test   eax,eax
c0010930:	75 28                	jne    c001095a <KeGetEnv(Process*, char const*)+0x60>
c0010932:	eb de                	jmp    c0010912 <KeGetEnv(Process*, char const*)+0x18>
c0010934:	52                   	push   edx
c0010935:	52                   	push   edx
c0010936:	53                   	push   ebx
c0010937:	50                   	push   eax
c0010938:	e8 29 fc ff ff       	call   c0010566 <EnvVarContainer::getEnv(char const*)>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	85 c0                	test   eax,eax
c0010942:	75 16                	jne    c001095a <KeGetEnv(Process*, char const*)+0x60>
c0010944:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010948:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c001094d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010951:	83 c4 08             	add    esp,0x8
c0010954:	5b                   	pop    ebx
c0010955:	e9 0c fc ff ff       	jmp    c0010566 <EnvVarContainer::getEnv(char const*)>
c001095a:	83 c4 08             	add    esp,0x8
c001095d:	5b                   	pop    ebx
c001095e:	c3                   	ret    

c001095f <KeSetEnvSystem(char const*, char const*)>:
c001095f:	83 ec 10             	sub    esp,0x10
c0010962:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010966:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001096a:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010970:	e8 2f fc ff ff       	call   c00105a4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010975:	83 c4 1c             	add    esp,0x1c
c0010978:	c3                   	ret    

c0010979 <KeSetEnvUser(char const*, char const*)>:
c0010979:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001097e:	85 c0                	test   eax,eax
c0010980:	74 15                	je     c0010997 <KeSetEnvUser(char const*, char const*)+0x1e>
c0010982:	83 ec 10             	sub    esp,0x10
c0010985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001098d:	50                   	push   eax
c001098e:	e8 11 fc ff ff       	call   c00105a4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010993:	83 c4 1c             	add    esp,0x1c
c0010996:	c3                   	ret    
c0010997:	c3                   	ret    

c0010998 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001099c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00109a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109a6:	e9 f9 fb ff ff       	jmp    c00105a4 <EnvVarContainer::setEnv(char const*, char const*)>

c00109ab <KeDeleteEnvSystem(char const*)>:
c00109ab:	c3                   	ret    

c00109ac <KeDeleteEnvUser(char const*)>:
c00109ac:	c3                   	ret    

c00109ad <KeDeleteEnvProcess(Process*, char const*)>:
c00109ad:	c3                   	ret    

c00109ae <KeNewProcessEnv(Process*)>:
c00109ae:	83 ec 28             	sub    esp,0x28
c00109b1:	6a 0c                	push   0xc
c00109b3:	e8 f6 70 ff ff       	call   c0007aae <malloc>
c00109b8:	5a                   	pop    edx
c00109b9:	59                   	pop    ecx
c00109ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109be:	50                   	push   eax
c00109bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109c3:	e8 e0 fe ff ff       	call   c00108a8 <EnvVarContainer::EnvVarContainer(Process*)>
c00109c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109cc:	83 c4 2c             	add    esp,0x2c
c00109cf:	c3                   	ret    

c00109d0 <KeCopyProcessEnv(Process*, Process*)>:
c00109d0:	57                   	push   edi
c00109d1:	56                   	push   esi
c00109d2:	53                   	push   ebx
c00109d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d7:	83 ec 0c             	sub    esp,0xc
c00109da:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00109e0:	6a 0c                	push   0xc
c00109e2:	e8 c7 70 ff ff       	call   c0007aae <malloc>
c00109e7:	89 c3                	mov    ebx,eax
c00109e9:	58                   	pop    eax
c00109ea:	5a                   	pop    edx
c00109eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ef:	53                   	push   ebx
c00109f0:	e8 b3 fe ff ff       	call   c00108a8 <EnvVarContainer::EnvVarContainer(Process*)>
c00109f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00109f7:	89 03                	mov    DWORD PTR [ebx],eax
c00109f9:	c1 e0 03             	shl    eax,0x3
c00109fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ff:	e8 aa 70 ff ff       	call   c0007aae <malloc>
c0010a04:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010a07:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010a09:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010a0c:	c1 e1 03             	shl    ecx,0x3
c0010a0f:	89 c7                	mov    edi,eax
c0010a11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	89 d8                	mov    eax,ebx
c0010a18:	5b                   	pop    ebx
c0010a19:	5e                   	pop    esi
c0010a1a:	5f                   	pop    edi
c0010a1b:	c3                   	ret    

c0010a1c <KeLoadSystemEnv()>:
c0010a1c:	53                   	push   ebx
c0010a1d:	83 ec 14             	sub    esp,0x14
c0010a20:	6a 0c                	push   0xc
c0010a22:	e8 87 70 ff ff       	call   c0007aae <malloc>
c0010a27:	89 c3                	mov    ebx,eax
c0010a29:	58                   	pop    eax
c0010a2a:	5a                   	pop    edx
c0010a2b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010a31:	53                   	push   ebx
c0010a32:	e8 71 fe ff ff       	call   c00108a8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a3a:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c0010a40:	e8 47 fe ff ff       	call   c001088c <EnvVarContainer::__loadSystem()>
c0010a45:	83 c4 18             	add    esp,0x18
c0010a48:	5b                   	pop    ebx
c0010a49:	c3                   	ret    

c0010a4a <KeLoadUserEnv()>:
c0010a4a:	53                   	push   ebx
c0010a4b:	83 ec 14             	sub    esp,0x14
c0010a4e:	6a 0c                	push   0xc
c0010a50:	e8 59 70 ff ff       	call   c0007aae <malloc>
c0010a55:	89 c3                	mov    ebx,eax
c0010a57:	58                   	pop    eax
c0010a58:	5a                   	pop    edx
c0010a59:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010a5f:	53                   	push   ebx
c0010a60:	e8 43 fe ff ff       	call   c00108a8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a65:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010a6b:	83 c4 18             	add    esp,0x18
c0010a6e:	5b                   	pop    ebx
c0010a6f:	c3                   	ret    

c0010a70 <KeFlushEnv()>:
c0010a70:	c3                   	ret    

c0010a71 <KeGetProcessTotalEnvCount(Process*)>:
c0010a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a75:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010a7b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a81:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a88:	03 01                	add    eax,DWORD PTR [ecx]
c0010a8a:	85 d2                	test   edx,edx
c0010a8c:	74 02                	je     c0010a90 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010a8e:	03 02                	add    eax,DWORD PTR [edx]
c0010a90:	c3                   	ret    

c0010a91 <KeGetProcessEnvPair(Process*, int)>:
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010a99:	53                   	push   ebx
c0010a9a:	85 f6                	test   esi,esi
c0010a9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010aa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aa4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010aaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010aae:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010ab0:	75 16                	jne    c0010ac8 <KeGetProcessEnvPair(Process*, int)+0x37>
c0010ab2:	39 c2                	cmp    edx,eax
c0010ab4:	7c 16                	jl     c0010acc <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010ab6:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010abc:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010abe:	01 c6                	add    esi,eax
c0010ac0:	39 d6                	cmp    esi,edx
c0010ac2:	7e 3c                	jle    c0010b00 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010ac4:	29 c2                	sub    edx,eax
c0010ac6:	eb 04                	jmp    c0010acc <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010ac8:	39 c2                	cmp    edx,eax
c0010aca:	7d 05                	jge    c0010ad1 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010acc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010acf:	eb 20                	jmp    c0010af1 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010ad1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010ad3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010ad6:	39 d1                	cmp    ecx,edx
c0010ad8:	7e 04                	jle    c0010ade <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010ada:	29 c2                	sub    edx,eax
c0010adc:	eb 10                	jmp    c0010aee <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010ade:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010ae4:	03 0e                	add    ecx,DWORD PTR [esi]
c0010ae6:	39 d1                	cmp    ecx,edx
c0010ae8:	7e 16                	jle    c0010b00 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010aea:	29 c2                	sub    edx,eax
c0010aec:	29 fa                	sub    edx,edi
c0010aee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010af1:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010af4:	8b 02                	mov    eax,DWORD PTR [edx]
c0010af6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010af9:	89 03                	mov    DWORD PTR [ebx],eax
c0010afb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010afe:	eb 1d                	jmp    c0010b1d <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	68 8e 13 02 c0       	push   0xc002138e
c0010b08:	e8 ac 00 00 00       	call   c0010bb9 <KePanic(char const*)>
c0010b0d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010b13:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010b1a:	83 c4 10             	add    esp,0x10
c0010b1d:	89 d8                	mov    eax,ebx
c0010b1f:	5b                   	pop    ebx
c0010b20:	5e                   	pop    esi
c0010b21:	5f                   	pop    edi
c0010b22:	c2 04 00             	ret    0x4

c0010b25 <CPU::current()>:
c0010b25:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010b2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b30:	c3                   	ret    

c0010b31 <operator new(unsigned long)>:
c0010b31:	e9 78 6f ff ff       	jmp    c0007aae <malloc>

c0010b36 <operator delete(void*)>:
c0010b36:	e9 93 6f ff ff       	jmp    c0007ace <rfree>

c0010b3b <disableIRQs()>:
c0010b3b:	fa                   	cli    
c0010b3c:	c3                   	ret    

c0010b3d <enableIRQs()>:
c0010b3d:	fb                   	sti    
c0010b3e:	c3                   	ret    

c0010b3f <lockScheduler()>:
c0010b3f:	fa                   	cli    
c0010b40:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010b46:	c3                   	ret    

c0010b47 <unlockScheduler()>:
c0010b47:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010b4c:	48                   	dec    eax
c0010b4d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010b52:	75 01                	jne    c0010b55 <unlockScheduler()+0xe>
c0010b54:	fb                   	sti    
c0010b55:	c3                   	ret    

c0010b56 <lockStuff()>:
c0010b56:	fa                   	cli    
c0010b57:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010b5d:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010b63:	c3                   	ret    

c0010b64 <unlockStuff()>:
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010b6c:	48                   	dec    eax
c0010b6d:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010b72:	75 18                	jne    c0010b8c <unlockStuff()+0x28>
c0010b74:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010b7b:	74 0f                	je     c0010b8c <unlockStuff()+0x28>
c0010b7d:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010b87:	e8 f0 47 00 00       	call   c001537c <schedule()>
c0010b8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010b91:	48                   	dec    eax
c0010b92:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010b97:	75 01                	jne    c0010b9a <unlockStuff()+0x36>
c0010b99:	fb                   	sti    
c0010b9a:	83 c4 0c             	add    esp,0xc
c0010b9d:	c3                   	ret    

c0010b9e <Virt::getAKernelVAS()>:
c0010b9e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010ba3:	c3                   	ret    

c0010ba4 <__not_memcpy>:
c0010ba4:	57                   	push   edi
c0010ba5:	56                   	push   esi
c0010ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010baa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010bb2:	89 c7                	mov    edi,eax
c0010bb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bb6:	5e                   	pop    esi
c0010bb7:	5f                   	pop    edi
c0010bb8:	c3                   	ret    

c0010bb9 <KePanic(char const*)>:
c0010bb9:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010bc0:	e9 5d 67 00 00       	jmp    c0017322 <HalPanic(char const*)>

c0010bc5 <KePowerThread(void*)>:
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010bcd:	48                   	dec    eax
c0010bce:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010bd3:	75 01                	jne    c0010bd6 <KePowerThread(void*)+0x11>
c0010bd5:	fb                   	sti    
c0010bd6:	83 ec 0c             	sub    esp,0xc
c0010bd9:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010be0:	6a 0a                	push   0xa
c0010be2:	e8 d9 4a 00 00       	call   c00156c0 <sleep(unsigned int)>
c0010be7:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010bee:	83 c4 10             	add    esp,0x10
c0010bf1:	eb e3                	jmp    c0010bd6 <KePowerThread(void*)+0x11>

c0010bf3 <KeChangePowerSettings(PowerSettings)>:
c0010bf3:	57                   	push   edi
c0010bf4:	b9 09 00 00 00       	mov    ecx,0x9
c0010bf9:	56                   	push   esi
c0010bfa:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010bff:	fc                   	cld    
c0010c00:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c06:	5e                   	pop    esi
c0010c07:	5f                   	pop    edi
c0010c08:	c3                   	ret    

c0010c09 <KeUserIOReceived()>:
c0010c09:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010c13:	c3                   	ret    

c0010c14 <KeHandlePowerButton()>:
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010c1c:	83 f8 02             	cmp    eax,0x2
c0010c1f:	75 10                	jne    c0010c31 <KeHandlePowerButton()+0x1d>
c0010c21:	83 ec 0c             	sub    esp,0xc
c0010c24:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010c2a:	e8 f1 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c2f:	eb 11                	jmp    c0010c42 <KeHandlePowerButton()+0x2e>
c0010c31:	48                   	dec    eax
c0010c32:	75 11                	jne    c0010c45 <KeHandlePowerButton()+0x31>
c0010c34:	83 ec 0c             	sub    esp,0xc
c0010c37:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010c3d:	e8 0e 65 ff ff       	call   c0007150 <Computer::sleep()>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	83 c4 0c             	add    esp,0xc
c0010c48:	c3                   	ret    

c0010c49 <KeHandleSleepButton()>:
c0010c49:	83 ec 0c             	sub    esp,0xc
c0010c4c:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010c51:	83 f8 02             	cmp    eax,0x2
c0010c54:	75 10                	jne    c0010c66 <KeHandleSleepButton()+0x1d>
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010c5f:	e8 bc 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c64:	eb 11                	jmp    c0010c77 <KeHandleSleepButton()+0x2e>
c0010c66:	48                   	dec    eax
c0010c67:	75 11                	jne    c0010c7a <KeHandleSleepButton()+0x31>
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010c72:	e8 d9 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010c77:	83 c4 10             	add    esp,0x10
c0010c7a:	83 c4 0c             	add    esp,0xc
c0010c7d:	c3                   	ret    

c0010c7e <KeSetupPowerManager()>:
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010c8b:	68 f0 00 00 00       	push   0xf0
c0010c90:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010c97:	6a 00                	push   0x0
c0010c99:	68 c5 0b 01 c0       	push   0xc0010bc5
c0010c9e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010ca4:	e8 83 44 00 00       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c0010ca9:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010cb3:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010cbd:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010cc7:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010cd1:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010cdb:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010ce5:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010cef:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010cf9:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010d03:	83 c4 1c             	add    esp,0x1c
c0010d06:	c3                   	ret    

c0010d07 <KeRand()>:
c0010d07:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010d11:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010d1b:	53                   	push   ebx
c0010d1c:	01 c1                	add    ecx,eax
c0010d1e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010d23:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010d29:	01 ca                	add    edx,ecx
c0010d2b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010d30:	83 d2 00             	adc    edx,0x0
c0010d33:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010d38:	0f b7 da             	movzx  ebx,dx
c0010d3b:	89 da                	mov    edx,ebx
c0010d3d:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010d43:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010d47:	5b                   	pop    ebx
c0010d48:	c3                   	ret    

c0010d49 <KeSeedRand(unsigned int)>:
c0010d49:	53                   	push   ebx
c0010d4a:	83 ec 08             	sub    esp,0x8
c0010d4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d51:	e8 eb 68 00 00       	call   c0017641 <HalGetRand()>
c0010d56:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010d60:	31 d8                	xor    eax,ebx
c0010d62:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010d67:	e8 9b ff ff ff       	call   c0010d07 <KeRand()>
c0010d6c:	83 c4 08             	add    esp,0x8
c0010d6f:	5b                   	pop    ebx
c0010d70:	eb 95                	jmp    c0010d07 <KeRand()>

c0010d72 <KeInitRand()>:
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	e8 bc 66 00 00       	call   c0017436 <HalQueryPerformanceCounter()>
c0010d7a:	0f 20 da             	mov    edx,cr3
c0010d7d:	0f 22 da             	mov    cr3,edx
c0010d80:	0f 20 da             	mov    edx,cr3
c0010d83:	0f 22 da             	mov    cr3,edx
c0010d86:	0f 20 da             	mov    edx,cr3
c0010d89:	0f 22 da             	mov    cr3,edx
c0010d8c:	0f 20 da             	mov    edx,cr3
c0010d8f:	0f 22 da             	mov    cr3,edx
c0010d92:	83 ec 0c             	sub    esp,0xc
c0010d95:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010d9a:	50                   	push   eax
c0010d9b:	e8 a9 ff ff ff       	call   c0010d49 <KeSeedRand(unsigned int)>
c0010da0:	83 c4 1c             	add    esp,0x1c
c0010da3:	c3                   	ret    

c0010da4 <KeResolveCompatibilitySymbol(char*)>:
c0010da4:	83 ec 0c             	sub    esp,0xc
c0010da7:	83 ec 08             	sub    esp,0x8
c0010daa:	68 a8 13 02 c0       	push   0xc00213a8
c0010daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db3:	e8 98 f9 fe ff       	call   c0000750 <strcmp>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	85 c0                	test   eax,eax
c0010dbd:	0f 94 c0             	sete   al
c0010dc0:	0f b6 c0             	movzx  eax,al
c0010dc3:	85 c0                	test   eax,eax
c0010dc5:	74 0d                	je     c0010dd4 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010dc7:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010dcc:	e9 8b 01 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd4:	83 ec 08             	sub    esp,0x8
c0010dd7:	68 b1 13 02 c0       	push   0xc00213b1
c0010ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de0:	e8 6b f9 fe ff       	call   c0000750 <strcmp>
c0010de5:	83 c4 10             	add    esp,0x10
c0010de8:	85 c0                	test   eax,eax
c0010dea:	0f 94 c0             	sete   al
c0010ded:	0f b6 c0             	movzx  eax,al
c0010df0:	85 c0                	test   eax,eax
c0010df2:	74 0c                	je     c0010e00 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010df4:	b8 80 e9 01 c0       	mov    eax,0xc001e980
c0010df9:	e9 5e 01 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010dfe:	66 90                	xchg   ax,ax
c0010e00:	83 ec 08             	sub    esp,0x8
c0010e03:	68 bb 13 02 c0       	push   0xc00213bb
c0010e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0c:	e8 3f f9 fe ff       	call   c0000750 <strcmp>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	85 c0                	test   eax,eax
c0010e16:	0f 94 c0             	sete   al
c0010e19:	0f b6 c0             	movzx  eax,al
c0010e1c:	85 c0                	test   eax,eax
c0010e1e:	74 0c                	je     c0010e2c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010e20:	b8 b4 e6 01 c0       	mov    eax,0xc001e6b4
c0010e25:	e9 32 01 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e2a:	66 90                	xchg   ax,ax
c0010e2c:	83 ec 08             	sub    esp,0x8
c0010e2f:	68 c4 13 02 c0       	push   0xc00213c4
c0010e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e38:	e8 13 f9 fe ff       	call   c0000750 <strcmp>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	85 c0                	test   eax,eax
c0010e42:	0f 94 c0             	sete   al
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	85 c0                	test   eax,eax
c0010e4a:	74 0c                	je     c0010e58 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010e4c:	b8 b9 0b 01 c0       	mov    eax,0xc0010bb9
c0010e51:	e9 06 01 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e56:	66 90                	xchg   ax,ax
c0010e58:	83 ec 08             	sub    esp,0x8
c0010e5b:	68 d7 13 02 c0       	push   0xc00213d7
c0010e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e64:	e8 e7 f8 fe ff       	call   c0000750 <strcmp>
c0010e69:	83 c4 10             	add    esp,0x10
c0010e6c:	85 c0                	test   eax,eax
c0010e6e:	0f 94 c0             	sete   al
c0010e71:	0f b6 c0             	movzx  eax,al
c0010e74:	85 c0                	test   eax,eax
c0010e76:	74 0c                	je     c0010e84 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010e78:	b8 e5 04 01 c0       	mov    eax,0xc00104e5
c0010e7d:	e9 da 00 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e82:	66 90                	xchg   ax,ax
c0010e84:	83 ec 08             	sub    esp,0x8
c0010e87:	68 f4 13 02 c0       	push   0xc00213f4
c0010e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e90:	e8 bb f8 fe ff       	call   c0000750 <strcmp>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 c0                	test   eax,eax
c0010e9a:	0f 94 c0             	sete   al
c0010e9d:	0f b6 c0             	movzx  eax,al
c0010ea0:	85 c0                	test   eax,eax
c0010ea2:	74 0c                	je     c0010eb0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010ea4:	b8 80 ea 01 c0       	mov    eax,0xc001ea80
c0010ea9:	e9 ae 00 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eae:	66 90                	xchg   ax,ax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 fe 13 02 c0       	push   0xc00213fe
c0010eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ebc:	e8 8f f8 fe ff       	call   c0000750 <strcmp>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	85 c0                	test   eax,eax
c0010ec6:	0f 94 c0             	sete   al
c0010ec9:	0f b6 c0             	movzx  eax,al
c0010ecc:	85 c0                	test   eax,eax
c0010ece:	74 0c                	je     c0010edc <KeResolveCompatibilitySymbol(char*)+0x138>
c0010ed0:	b8 00 e8 01 c0       	mov    eax,0xc001e800
c0010ed5:	e9 82 00 00 00       	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eda:	66 90                	xchg   ax,ax
c0010edc:	83 ec 08             	sub    esp,0x8
c0010edf:	68 07 14 02 c0       	push   0xc0021407
c0010ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee8:	e8 63 f8 fe ff       	call   c0000750 <strcmp>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	85 c0                	test   eax,eax
c0010ef2:	0f 94 c0             	sete   al
c0010ef5:	0f b6 c0             	movzx  eax,al
c0010ef8:	85 c0                	test   eax,eax
c0010efa:	74 08                	je     c0010f04 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010efc:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010f01:	eb 59                	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f03:	90                   	nop
c0010f04:	83 ec 08             	sub    esp,0x8
c0010f07:	68 1f 14 02 c0       	push   0xc002141f
c0010f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f10:	e8 3b f8 fe ff       	call   c0000750 <strcmp>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	85 c0                	test   eax,eax
c0010f1a:	0f 94 c0             	sete   al
c0010f1d:	0f b6 c0             	movzx  eax,al
c0010f20:	85 c0                	test   eax,eax
c0010f22:	74 08                	je     c0010f2c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010f24:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010f29:	eb 31                	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f2b:	90                   	nop
c0010f2c:	83 ec 08             	sub    esp,0x8
c0010f2f:	68 2c 14 02 c0       	push   0xc002142c
c0010f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f38:	e8 13 f8 fe ff       	call   c0000750 <strcmp>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	85 c0                	test   eax,eax
c0010f42:	0f 94 c0             	sete   al
c0010f45:	0f b6 c0             	movzx  eax,al
c0010f48:	85 c0                	test   eax,eax
c0010f4a:	74 08                	je     c0010f54 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010f4c:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010f51:	eb 09                	jmp    c0010f5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f53:	90                   	nop
c0010f54:	b8 00 00 00 00       	mov    eax,0x0
c0010f59:	8d 76 00             	lea    esi,[esi+0x0]
c0010f5c:	83 c4 0c             	add    esp,0xc
c0010f5f:	c3                   	ret    

c0010f60 <KiSigKill(int)>:
c0010f60:	83 ec 0c             	sub    esp,0xc
c0010f63:	6a 00                	push   0x0
c0010f65:	6a 00                	push   0x0
c0010f67:	6a ff                	push   0xffffffff
c0010f69:	6a 01                	push   0x1
c0010f6b:	e8 e2 20 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	c3                   	ret    

c0010f74 <KiDefaultSignalHandlerIgnore(int)>:
c0010f74:	c3                   	ret    

c0010f75 <KiDefaultSignalHandlerPause(int)>:
c0010f75:	57                   	push   edi
c0010f76:	b9 07 00 00 00       	mov    ecx,0x7
c0010f7b:	56                   	push   esi
c0010f7c:	be 75 14 02 c0       	mov    esi,0xc0021475
c0010f81:	83 ec 24             	sub    esp,0x24
c0010f84:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010f88:	fc                   	cld    
c0010f89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f8b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010f8f:	50                   	push   eax
c0010f90:	6a 00                	push   0x0
c0010f92:	6a 00                	push   0x0
c0010f94:	6a 27                	push   0x27
c0010f96:	e8 b7 20 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f9b:	83 c4 34             	add    esp,0x34
c0010f9e:	5e                   	pop    esi
c0010f9f:	5f                   	pop    edi
c0010fa0:	c3                   	ret    

c0010fa1 <KiDefaultSignalHandlerResume(int)>:
c0010fa1:	57                   	push   edi
c0010fa2:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010fa7:	56                   	push   esi
c0010fa8:	be 91 14 02 c0       	mov    esi,0xc0021491
c0010fad:	83 ec 24             	sub    esp,0x24
c0010fb0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010fb4:	fc                   	cld    
c0010fb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb7:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010fbb:	50                   	push   eax
c0010fbc:	6a 00                	push   0x0
c0010fbe:	6a 00                	push   0x0
c0010fc0:	6a 27                	push   0x27
c0010fc2:	e8 8b 20 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fc7:	83 c4 34             	add    esp,0x34
c0010fca:	5e                   	pop    esi
c0010fcb:	5f                   	pop    edi
c0010fcc:	c3                   	ret    

c0010fcd <KeDeinitSignals(SigHandlerBlock*)>:
c0010fcd:	e9 ec 6a ff ff       	jmp    c0007abe <free>

c0010fd2 <KeInitSignals()>:
c0010fd2:	53                   	push   ebx
c0010fd3:	83 ec 14             	sub    esp,0x14
c0010fd6:	68 c8 00 00 00       	push   0xc8
c0010fdb:	e8 ce 6a ff ff       	call   c0007aae <malloc>
c0010fe0:	83 c4 0c             	add    esp,0xc
c0010fe3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010fed:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010ff7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010ffe:	89 c3                	mov    ebx,eax
c0011000:	6a 20                	push   0x20
c0011002:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011008:	6a 00                	push   0x0
c001100a:	50                   	push   eax
c001100b:	e8 e0 f4 fe ff       	call   c00004f0 <memset>
c0011010:	83 c4 0c             	add    esp,0xc
c0011013:	6a 44                	push   0x44
c0011015:	6a 00                	push   0x0
c0011017:	53                   	push   ebx
c0011018:	e8 d3 f4 fe ff       	call   c00004f0 <memset>
c001101d:	89 d8                	mov    eax,ebx
c001101f:	83 c4 18             	add    esp,0x18
c0011022:	5b                   	pop    ebx
c0011023:	c3                   	ret    

c0011024 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011024:	53                   	push   ebx
c0011025:	b8 01 00 00 00       	mov    eax,0x1
c001102a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001102e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011032:	83 f9 10             	cmp    ecx,0x10
c0011035:	7f 21                	jg     c0011058 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011037:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001103a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103e:	89 03                	mov    DWORD PTR [ebx],eax
c0011040:	b8 01 00 00 00       	mov    eax,0x1
c0011045:	d3 e0                	shl    eax,cl
c0011047:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001104b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001104e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011056:	31 c0                	xor    eax,eax
c0011058:	5b                   	pop    ebx
c0011059:	c3                   	ret    

c001105a <KeRaiseSignal(SigHandlerBlock*, int)>:
c001105a:	55                   	push   ebp
c001105b:	57                   	push   edi
c001105c:	bf 08 00 00 00       	mov    edi,0x8
c0011061:	56                   	push   esi
c0011062:	53                   	push   ebx
c0011063:	83 ec 18             	sub    esp,0x18
c0011066:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001106a:	68 ae 14 02 c0       	push   0xc00214ae
c001106f:	e8 c5 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011074:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001107b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	31 c9                	xor    ecx,ecx
c0011086:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001108a:	99                   	cdq    
c001108b:	f7 ff                	idiv   edi
c001108d:	8d 42 24             	lea    eax,[edx+0x24]
c0011090:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011094:	85 f6                	test   esi,esi
c0011096:	75 1a                	jne    c00110b2 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011098:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001109c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00110a0:	50                   	push   eax
c00110a1:	50                   	push   eax
c00110a2:	52                   	push   edx
c00110a3:	68 bf 14 02 c0       	push   0xc00214bf
c00110a8:	e8 8c 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	eb 1b                	jmp    c00110cd <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00110b2:	41                   	inc    ecx
c00110b3:	83 f9 08             	cmp    ecx,0x8
c00110b6:	75 ce                	jne    c0011086 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00110b8:	83 ec 0c             	sub    esp,0xc
c00110bb:	be 01 00 00 00       	mov    esi,0x1
c00110c0:	68 e0 14 02 c0       	push   0xc00214e0
c00110c5:	e8 6f 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	83 c4 0c             	add    esp,0xc
c00110d0:	89 f0                	mov    eax,esi
c00110d2:	5b                   	pop    ebx
c00110d3:	5e                   	pop    esi
c00110d4:	5f                   	pop    edi
c00110d5:	5d                   	pop    ebp
c00110d6:	c3                   	ret    

c00110d7 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00110d7:	55                   	push   ebp
c00110d8:	57                   	push   edi
c00110d9:	56                   	push   esi
c00110da:	53                   	push   ebx
c00110db:	51                   	push   ecx
c00110dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00110e0:	85 db                	test   ebx,ebx
c00110e2:	0f 84 bc 00 00 00    	je     c00111a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110e8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00110ef:	0f 84 af 00 00 00    	je     c00111a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110f5:	31 c9                	xor    ecx,ecx
c00110f7:	bf 08 00 00 00       	mov    edi,0x8
c00110fc:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011102:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011105:	99                   	cdq    
c0011106:	f7 ff                	idiv   edi
c0011108:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001110f:	85 ed                	test   ebp,ebp
c0011111:	0f 84 9e 00 00 00    	je     c00111b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011117:	89 e9                	mov    ecx,ebp
c0011119:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001111f:	bf 01 00 00 00       	mov    edi,0x1
c0011124:	89 04 24             	mov    DWORD PTR [esp],eax
c0011127:	d3 e7                	shl    edi,cl
c0011129:	31 c9                	xor    ecx,ecx
c001112b:	b8 01 00 00 00       	mov    eax,0x1
c0011130:	d3 e0                	shl    eax,cl
c0011132:	85 04 24             	test   DWORD PTR [esp],eax
c0011135:	74 06                	je     c001113d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011137:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001113b:	75 67                	jne    c00111a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001113d:	41                   	inc    ecx
c001113e:	83 f9 11             	cmp    ecx,0x11
c0011141:	75 e8                	jne    c001112b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011143:	46                   	inc    esi
c0011144:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011147:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001114d:	09 f8                	or     eax,edi
c001114f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001115a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011160:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011167:	31 c0                	xor    eax,eax
c0011169:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011171:	74 09                	je     c001117c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011173:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001117a:	eb 06                	jmp    c0011182 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001117c:	40                   	inc    eax
c001117d:	83 f8 08             	cmp    eax,0x8
c0011180:	75 e7                	jne    c0011169 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011182:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011185:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011189:	83 fd 09             	cmp    ebp,0x9
c001118c:	89 2a                	mov    DWORD PTR [edx],ebp
c001118e:	75 07                	jne    c0011197 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011190:	b8 60 0f 01 c0       	mov    eax,0xc0010f60
c0011195:	eb 31                	jmp    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011197:	83 f8 01             	cmp    eax,0x1
c001119a:	75 0c                	jne    c00111a8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001119c:	f7 d7                	not    edi
c001119e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00111a4:	31 c0                	xor    eax,eax
c00111a6:	eb 20                	jmp    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111a8:	85 c0                	test   eax,eax
c00111aa:	75 1c                	jne    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111ac:	8b 04 ad e0 28 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd720]
c00111b3:	eb 13                	jmp    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111b5:	46                   	inc    esi
c00111b6:	41                   	inc    ecx
c00111b7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111bd:	83 f9 08             	cmp    ecx,0x8
c00111c0:	0f 85 36 ff ff ff    	jne    c00110fc <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00111c6:	eb dc                	jmp    c00111a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00111c8:	5a                   	pop    edx
c00111c9:	5b                   	pop    ebx
c00111ca:	5e                   	pop    esi
c00111cb:	5f                   	pop    edi
c00111cc:	5d                   	pop    ebp
c00111cd:	c3                   	ret    

c00111ce <KiCheckSignalZ>:
c00111ce:	83 ec 10             	sub    esp,0x10
c00111d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00111d5:	50                   	push   eax
c00111d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111de:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00111e4:	e8 ee fe ff ff       	call   c00110d7 <KeCheckSignal(SigHandlerBlock*, int*)>
c00111e9:	5a                   	pop    edx
c00111ea:	31 d2                	xor    edx,edx
c00111ec:	59                   	pop    ecx
c00111ed:	85 c0                	test   eax,eax
c00111ef:	74 19                	je     c001120a <KiCheckSignalZ+0x3c>
c00111f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111f7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111fa:	89 02                	mov    DWORD PTR [edx],eax
c00111fc:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011207:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001120a:	89 d0                	mov    eax,edx
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	c3                   	ret    

c0011210 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011210:	56                   	push   esi
c0011211:	53                   	push   ebx
c0011212:	bb 01 00 00 00       	mov    ebx,0x1
c0011217:	52                   	push   edx
c0011218:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001121c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011220:	d3 e3                	shl    ebx,cl
c0011222:	83 f9 10             	cmp    ecx,0x10
c0011225:	7f 08                	jg     c001122f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011227:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001122d:	75 10                	jne    c001123f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001122f:	83 ec 0c             	sub    esp,0xc
c0011232:	68 f1 14 02 c0       	push   0xc00214f1
c0011237:	e8 7d f9 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001123c:	83 c4 10             	add    esp,0x10
c001123f:	f7 d3                	not    ebx
c0011241:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011247:	58                   	pop    eax
c0011248:	5b                   	pop    ebx
c0011249:	5e                   	pop    esi
c001124a:	c3                   	ret    

c001124b <KiFinishSignalZ>:
c001124b:	53                   	push   ebx
c001124c:	83 ec 10             	sub    esp,0x10
c001124f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011253:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001125b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001125e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011264:	e8 a7 ff ff ff       	call   c0011210 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011269:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001126f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011276:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001127d:	83 c4 18             	add    esp,0x18
c0011280:	5b                   	pop    ebx
c0011281:	c3                   	ret    

c0011282 <SysSeekDir(regs*)>:
c0011282:	31 c0                	xor    eax,eax
c0011284:	31 d2                	xor    edx,edx
c0011286:	c3                   	ret    

c0011287 <SysTellDir(regs*)>:
c0011287:	31 c0                	xor    eax,eax
c0011289:	31 d2                	xor    edx,edx
c001128b:	c3                   	ret    

c001128c <SysVerify(regs*)>:
c001128c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011290:	31 d2                	xor    edx,edx
c0011292:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011295:	c3                   	ret    

c0011296 <SysGetArgc(regs*)>:
c0011296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001129b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001129e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112a4:	89 c2                	mov    edx,eax
c00112a6:	c1 fa 1f             	sar    edx,0x1f
c00112a9:	c3                   	ret    

c00112aa <SysTTYName(regs*)>:
c00112aa:	b8 01 00 00 00       	mov    eax,0x1
c00112af:	31 d2                	xor    edx,edx
c00112b1:	c3                   	ret    

c00112b2 <SysFormatDisk(regs*)>:
c00112b2:	56                   	push   esi
c00112b3:	53                   	push   ebx
c00112b4:	83 ec 04             	sub    esp,0x4
c00112b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112bb:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c00112c1:	eb 28                	jmp    c00112eb <SysFormatDisk(regs*)+0x39>
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112c9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112ce:	51                   	push   ecx
c00112cf:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112d2:	51                   	push   ecx
c00112d3:	50                   	push   eax
c00112d4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00112db:	50                   	push   eax
c00112dc:	53                   	push   ebx
c00112dd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00112e0:	83 c4 20             	add    esp,0x20
c00112e3:	83 f8 08             	cmp    eax,0x8
c00112e6:	75 14                	jne    c00112fc <SysFormatDisk(regs*)+0x4a>
c00112e8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112eb:	85 db                	test   ebx,ebx
c00112ed:	75 d4                	jne    c00112c3 <SysFormatDisk(regs*)+0x11>
c00112ef:	83 c4 04             	add    esp,0x4
c00112f2:	b8 03 00 00 00       	mov    eax,0x3
c00112f7:	31 d2                	xor    edx,edx
c00112f9:	5b                   	pop    ebx
c00112fa:	5e                   	pop    esi
c00112fb:	c3                   	ret    
c00112fc:	85 c0                	test   eax,eax
c00112fe:	74 1f                	je     c001131f <SysFormatDisk(regs*)+0x6d>
c0011300:	83 f8 09             	cmp    eax,0x9
c0011303:	74 0d                	je     c0011312 <SysFormatDisk(regs*)+0x60>
c0011305:	83 c4 04             	add    esp,0x4
c0011308:	b8 02 00 00 00       	mov    eax,0x2
c001130d:	31 d2                	xor    edx,edx
c001130f:	5b                   	pop    ebx
c0011310:	5e                   	pop    esi
c0011311:	c3                   	ret    
c0011312:	83 c4 04             	add    esp,0x4
c0011315:	b8 01 00 00 00       	mov    eax,0x1
c001131a:	31 d2                	xor    edx,edx
c001131c:	5b                   	pop    ebx
c001131d:	5e                   	pop    esi
c001131e:	c3                   	ret    
c001131f:	83 c4 04             	add    esp,0x4
c0011322:	31 c0                	xor    eax,eax
c0011324:	31 d2                	xor    edx,edx
c0011326:	5b                   	pop    ebx
c0011327:	5e                   	pop    esi
c0011328:	c3                   	ret    

c0011329 <SysSetDiskVolumeLabel(regs*)>:
c0011329:	56                   	push   esi
c001132a:	53                   	push   ebx
c001132b:	83 ec 04             	sub    esp,0x4
c001132e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011332:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011335:	83 f8 19             	cmp    eax,0x19
c0011338:	77 33                	ja     c001136d <SysSetDiskVolumeLabel(regs*)+0x44>
c001133a:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0011341:	85 c9                	test   ecx,ecx
c0011343:	74 28                	je     c001136d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011345:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011348:	85 db                	test   ebx,ebx
c001134a:	74 21                	je     c001136d <SysSetDiskVolumeLabel(regs*)+0x44>
c001134c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011352:	85 d2                	test   edx,edx
c0011354:	74 17                	je     c001136d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011356:	8b 32                	mov    esi,DWORD PTR [edx]
c0011358:	53                   	push   ebx
c0011359:	50                   	push   eax
c001135a:	51                   	push   ecx
c001135b:	52                   	push   edx
c001135c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	89 c2                	mov    edx,eax
c0011364:	83 c4 04             	add    esp,0x4
c0011367:	c1 fa 1f             	sar    edx,0x1f
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	c3                   	ret    
c001136d:	83 c4 04             	add    esp,0x4
c0011370:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011375:	ba ff ff ff ff       	mov    edx,0xffffffff
c001137a:	5b                   	pop    ebx
c001137b:	5e                   	pop    esi
c001137c:	c3                   	ret    

c001137d <SysGetDiskVolumeLabel(regs*)>:
c001137d:	57                   	push   edi
c001137e:	56                   	push   esi
c001137f:	53                   	push   ebx
c0011380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011384:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011387:	83 fa 19             	cmp    edx,0x19
c001138a:	77 3c                	ja     c00113c8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001138c:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011393:	85 c9                	test   ecx,ecx
c0011395:	74 31                	je     c00113c8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011397:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001139a:	85 db                	test   ebx,ebx
c001139c:	74 2a                	je     c00113c8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001139e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113a1:	85 f6                	test   esi,esi
c00113a3:	74 23                	je     c00113c8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113a5:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00113ab:	85 c0                	test   eax,eax
c00113ad:	74 19                	je     c00113c8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113af:	83 ec 0c             	sub    esp,0xc
c00113b2:	8b 38                	mov    edi,DWORD PTR [eax]
c00113b4:	56                   	push   esi
c00113b5:	53                   	push   ebx
c00113b6:	52                   	push   edx
c00113b7:	51                   	push   ecx
c00113b8:	50                   	push   eax
c00113b9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113bc:	83 c4 20             	add    esp,0x20
c00113bf:	89 c2                	mov    edx,eax
c00113c1:	5b                   	pop    ebx
c00113c2:	c1 fa 1f             	sar    edx,0x1f
c00113c5:	5e                   	pop    esi
c00113c6:	5f                   	pop    edi
c00113c7:	c3                   	ret    
c00113c8:	5b                   	pop    ebx
c00113c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d3:	5e                   	pop    esi
c00113d4:	5f                   	pop    edi
c00113d5:	c3                   	ret    

c00113d6 <SysShutdown(regs*)>:
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113e0:	85 c0                	test   eax,eax
c00113e2:	74 18                	je     c00113fc <SysShutdown(regs*)+0x26>
c00113e4:	83 f8 01             	cmp    eax,0x1
c00113e7:	74 38                	je     c0011421 <SysShutdown(regs*)+0x4b>
c00113e9:	83 f8 02             	cmp    eax,0x2
c00113ec:	74 24                	je     c0011412 <SysShutdown(regs*)+0x3c>
c00113ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113f8:	83 c4 0c             	add    esp,0xc
c00113fb:	c3                   	ret    
c00113fc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011401:	8b 10                	mov    edx,DWORD PTR [eax]
c0011403:	6a 00                	push   0x0
c0011405:	6a 00                	push   0x0
c0011407:	6a 00                	push   0x0
c0011409:	50                   	push   eax
c001140a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	eb dc                	jmp    c00113ee <SysShutdown(regs*)+0x18>
c0011412:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011417:	8b 10                	mov    edx,DWORD PTR [eax]
c0011419:	6a 00                	push   0x0
c001141b:	6a 00                	push   0x0
c001141d:	6a 01                	push   0x1
c001141f:	eb e8                	jmp    c0011409 <SysShutdown(regs*)+0x33>
c0011421:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011426:	85 c0                	test   eax,eax
c0011428:	74 02                	je     c001142c <SysShutdown(regs*)+0x56>
c001142a:	ff d0                	call   eax
c001142c:	31 c0                	xor    eax,eax
c001142e:	31 d2                	xor    edx,edx
c0011430:	83 c4 0c             	add    esp,0xc
c0011433:	c3                   	ret    

c0011434 <SysRealpath(regs*)>:
c0011434:	83 ec 0c             	sub    esp,0xc
c0011437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001143e:	85 d2                	test   edx,edx
c0011440:	74 07                	je     c0011449 <SysRealpath(regs*)+0x15>
c0011442:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011445:	85 c0                	test   eax,eax
c0011447:	75 0b                	jne    c0011454 <SysRealpath(regs*)+0x20>
c0011449:	b8 01 00 00 00       	mov    eax,0x1
c001144e:	31 d2                	xor    edx,edx
c0011450:	83 c4 0c             	add    esp,0xc
c0011453:	c3                   	ret    
c0011454:	83 ec 04             	sub    esp,0x4
c0011457:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001145d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011460:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011466:	51                   	push   ecx
c0011467:	52                   	push   edx
c0011468:	50                   	push   eax
c0011469:	e8 6c 9b ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c001146e:	83 c4 10             	add    esp,0x10
c0011471:	31 c0                	xor    eax,eax
c0011473:	31 d2                	xor    edx,edx
c0011475:	83 c4 0c             	add    esp,0xc
c0011478:	c3                   	ret    

c0011479 <SysReadDir(regs*)>:
c0011479:	53                   	push   ebx
c001147a:	83 ec 18             	sub    esp,0x18
c001147d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011481:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011484:	83 f8 02             	cmp    eax,0x2
c0011487:	76 61                	jbe    c00114ea <SysReadDir(regs*)+0x71>
c0011489:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011490:	77 49                	ja     c00114db <SysReadDir(regs*)+0x62>
c0011492:	83 ec 0c             	sub    esp,0xc
c0011495:	50                   	push   eax
c0011496:	e8 0c 80 ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 c0                	test   eax,eax
c00114a0:	74 39                	je     c00114db <SysReadDir(regs*)+0x62>
c00114a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00114af:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114b3:	51                   	push   ecx
c00114b4:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114b7:	51                   	push   ecx
c00114b8:	6a 00                	push   0x0
c00114ba:	68 10 01 00 00       	push   0x110
c00114bf:	50                   	push   eax
c00114c0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114c3:	83 c4 20             	add    esp,0x20
c00114c6:	85 c0                	test   eax,eax
c00114c8:	74 29                	je     c00114f3 <SysReadDir(regs*)+0x7a>
c00114ca:	83 f8 07             	cmp    eax,0x7
c00114cd:	74 1b                	je     c00114ea <SysReadDir(regs*)+0x71>
c00114cf:	b8 02 00 00 00       	mov    eax,0x2
c00114d4:	31 d2                	xor    edx,edx
c00114d6:	83 c4 18             	add    esp,0x18
c00114d9:	5b                   	pop    ebx
c00114da:	c3                   	ret    
c00114db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e5:	83 c4 18             	add    esp,0x18
c00114e8:	5b                   	pop    ebx
c00114e9:	c3                   	ret    
c00114ea:	b8 01 00 00 00       	mov    eax,0x1
c00114ef:	31 d2                	xor    edx,edx
c00114f1:	eb e3                	jmp    c00114d6 <SysReadDir(regs*)+0x5d>
c00114f3:	31 c0                	xor    eax,eax
c00114f5:	31 d2                	xor    edx,edx
c00114f7:	eb dd                	jmp    c00114d6 <SysReadDir(regs*)+0x5d>

c00114f9 <SysIsATTY(regs*)>:
c00114f9:	83 ec 0c             	sub    esp,0xc
c00114fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011500:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011503:	83 f8 02             	cmp    eax,0x2
c0011506:	76 07                	jbe    c001150f <SysIsATTY(regs*)+0x16>
c0011508:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001150d:	75 26                	jne    c0011535 <SysIsATTY(regs*)+0x3c>
c001150f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011514:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011517:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001151d:	85 c0                	test   eax,eax
c001151f:	74 24                	je     c0011545 <SysIsATTY(regs*)+0x4c>
c0011521:	83 ec 0c             	sub    esp,0xc
c0011524:	8b 10                	mov    edx,DWORD PTR [eax]
c0011526:	50                   	push   eax
c0011527:	ff 12                	call   DWORD PTR [edx]
c0011529:	31 d2                	xor    edx,edx
c001152b:	0f b6 c0             	movzx  eax,al
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	83 c4 0c             	add    esp,0xc
c0011534:	c3                   	ret    
c0011535:	83 ec 0c             	sub    esp,0xc
c0011538:	50                   	push   eax
c0011539:	e8 69 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	85 c0                	test   eax,eax
c0011543:	75 dc                	jne    c0011521 <SysIsATTY(regs*)+0x28>
c0011545:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001154f:	83 c4 0c             	add    esp,0xc
c0011552:	c3                   	ret    

c0011553 <SysSeek(regs*)>:
c0011553:	53                   	push   ebx
c0011554:	83 ec 08             	sub    esp,0x8
c0011557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001155b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001155e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011561:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011567:	77 32                	ja     c001159b <SysSeek(regs*)+0x48>
c0011569:	83 ec 0c             	sub    esp,0xc
c001156c:	50                   	push   eax
c001156d:	e8 35 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011572:	83 c4 0c             	add    esp,0xc
c0011575:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011578:	31 db                	xor    ebx,ebx
c001157a:	53                   	push   ebx
c001157b:	51                   	push   ecx
c001157c:	50                   	push   eax
c001157d:	e8 88 9d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	85 c0                	test   eax,eax
c0011587:	0f 95 c0             	setne  al
c001158a:	31 d2                	xor    edx,edx
c001158c:	0f b6 c0             	movzx  eax,al
c001158f:	f7 d8                	neg    eax
c0011591:	83 d2 00             	adc    edx,0x0
c0011594:	83 c4 08             	add    esp,0x8
c0011597:	f7 da                	neg    edx
c0011599:	5b                   	pop    ebx
c001159a:	c3                   	ret    
c001159b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a5:	83 c4 08             	add    esp,0x8
c00115a8:	5b                   	pop    ebx
c00115a9:	c3                   	ret    

c00115aa <SysTell(regs*)>:
c00115aa:	53                   	push   ebx
c00115ab:	83 ec 08             	sub    esp,0x8
c00115ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115b5:	83 f8 02             	cmp    eax,0x2
c00115b8:	76 4e                	jbe    c0011608 <SysTell(regs*)+0x5e>
c00115ba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115bf:	76 19                	jbe    c00115da <SysTell(regs*)+0x30>
c00115c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115c4:	31 d2                	xor    edx,edx
c00115c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115d3:	31 c0                	xor    eax,eax
c00115d5:	83 c4 08             	add    esp,0x8
c00115d8:	5b                   	pop    ebx
c00115d9:	c3                   	ret    
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	50                   	push   eax
c00115de:	e8 c4 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00115e3:	5a                   	pop    edx
c00115e4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115e7:	59                   	pop    ecx
c00115e8:	53                   	push   ebx
c00115e9:	50                   	push   eax
c00115ea:	e8 71 9d ff ff       	call   c000b360 <File::tell(unsigned long long*)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	85 c0                	test   eax,eax
c00115f4:	0f 95 c0             	setne  al
c00115f7:	31 d2                	xor    edx,edx
c00115f9:	0f b6 c0             	movzx  eax,al
c00115fc:	f7 d8                	neg    eax
c00115fe:	83 d2 00             	adc    edx,0x0
c0011601:	83 c4 08             	add    esp,0x8
c0011604:	f7 da                	neg    edx
c0011606:	5b                   	pop    ebx
c0011607:	c3                   	ret    
c0011608:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001160d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011612:	83 c4 08             	add    esp,0x8
c0011615:	5b                   	pop    ebx
c0011616:	c3                   	ret    

c0011617 <SysSize(regs*)>:
c0011617:	53                   	push   ebx
c0011618:	83 ec 18             	sub    esp,0x18
c001161b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001161f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011622:	83 f8 02             	cmp    eax,0x2
c0011625:	76 54                	jbe    c001167b <SysSize(regs*)+0x64>
c0011627:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001162c:	76 19                	jbe    c0011647 <SysSize(regs*)+0x30>
c001162e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011631:	31 d2                	xor    edx,edx
c0011633:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011640:	31 c0                	xor    eax,eax
c0011642:	83 c4 18             	add    esp,0x18
c0011645:	5b                   	pop    ebx
c0011646:	c3                   	ret    
c0011647:	83 ec 0c             	sub    esp,0xc
c001164a:	50                   	push   eax
c001164b:	e8 57 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011650:	83 c4 0c             	add    esp,0xc
c0011653:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011657:	52                   	push   edx
c0011658:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001165b:	52                   	push   edx
c001165c:	50                   	push   eax
c001165d:	e8 96 9e ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	85 c0                	test   eax,eax
c0011667:	0f 95 c0             	setne  al
c001166a:	31 d2                	xor    edx,edx
c001166c:	0f b6 c0             	movzx  eax,al
c001166f:	f7 d8                	neg    eax
c0011671:	83 d2 00             	adc    edx,0x0
c0011674:	83 c4 18             	add    esp,0x18
c0011677:	f7 da                	neg    edx
c0011679:	5b                   	pop    ebx
c001167a:	c3                   	ret    
c001167b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011680:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011685:	83 c4 18             	add    esp,0x18
c0011688:	5b                   	pop    ebx
c0011689:	c3                   	ret    

c001168a <SysSizeFromFilename(regs*)>:
c001168a:	57                   	push   edi
c001168b:	56                   	push   esi
c001168c:	53                   	push   ebx
c001168d:	83 ec 20             	sub    esp,0x20
c0011690:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011694:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011697:	83 fb 02             	cmp    ebx,0x2
c001169a:	0f 86 8a 00 00 00    	jbe    c001172a <SysSizeFromFilename(regs*)+0xa0>
c00116a0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116a6:	76 1b                	jbe    c00116c3 <SysSizeFromFilename(regs*)+0x39>
c00116a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116ab:	31 d2                	xor    edx,edx
c00116ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116ba:	83 c4 20             	add    esp,0x20
c00116bd:	31 c0                	xor    eax,eax
c00116bf:	5b                   	pop    ebx
c00116c0:	5e                   	pop    esi
c00116c1:	5f                   	pop    edi
c00116c2:	c3                   	ret    
c00116c3:	83 ec 0c             	sub    esp,0xc
c00116c6:	68 14 01 00 00       	push   0x114
c00116cb:	e8 de 63 ff ff       	call   c0007aae <malloc>
c00116d0:	83 c4 0c             	add    esp,0xc
c00116d3:	89 c7                	mov    edi,eax
c00116d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116dd:	50                   	push   eax
c00116de:	53                   	push   ebx
c00116df:	57                   	push   edi
c00116e0:	e8 ab 9a ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00116e5:	83 c4 0c             	add    esp,0xc
c00116e8:	8d 44 24 23          	lea    eax,[esp+0x23]
c00116ec:	50                   	push   eax
c00116ed:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00116f0:	52                   	push   edx
c00116f1:	57                   	push   edi
c00116f2:	e8 01 9e ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	85 ff                	test   edi,edi
c00116fc:	74 14                	je     c0011712 <SysSizeFromFilename(regs*)+0x88>
c00116fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011702:	8b 17                	mov    edx,DWORD PTR [edi]
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	57                   	push   edi
c0011708:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011712:	85 c0                	test   eax,eax
c0011714:	0f 95 c0             	setne  al
c0011717:	31 d2                	xor    edx,edx
c0011719:	0f b6 c0             	movzx  eax,al
c001171c:	f7 d8                	neg    eax
c001171e:	83 d2 00             	adc    edx,0x0
c0011721:	83 c4 20             	add    esp,0x20
c0011724:	f7 da                	neg    edx
c0011726:	5b                   	pop    ebx
c0011727:	5e                   	pop    esi
c0011728:	5f                   	pop    edi
c0011729:	c3                   	ret    
c001172a:	83 c4 20             	add    esp,0x20
c001172d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011732:	5b                   	pop    ebx
c0011733:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011738:	5e                   	pop    esi
c0011739:	5f                   	pop    edi
c001173a:	c3                   	ret    

c001173b <SysClose(regs*)>:
c001173b:	53                   	push   ebx
c001173c:	83 ec 08             	sub    esp,0x8
c001173f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011743:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011746:	83 f8 02             	cmp    eax,0x2
c0011749:	76 41                	jbe    c001178c <SysClose(regs*)+0x51>
c001174b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011751:	83 fa 01             	cmp    edx,0x1
c0011754:	76 2d                	jbe    c0011783 <SysClose(regs*)+0x48>
c0011756:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001175b:	77 2f                	ja     c001178c <SysClose(regs*)+0x51>
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	50                   	push   eax
c0011761:	e8 41 7d ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011766:	89 c3                	mov    ebx,eax
c0011768:	89 04 24             	mov    DWORD PTR [esp],eax
c001176b:	e8 3a 9b ff ff       	call   c000b2aa <File::close()>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	85 db                	test   ebx,ebx
c0011775:	74 0c                	je     c0011783 <SysClose(regs*)+0x48>
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001177c:	53                   	push   ebx
c001177d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	31 c0                	xor    eax,eax
c0011785:	31 d2                	xor    edx,edx
c0011787:	83 c4 08             	add    esp,0x8
c001178a:	5b                   	pop    ebx
c001178b:	c3                   	ret    
c001178c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011791:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011796:	83 c4 08             	add    esp,0x8
c0011799:	5b                   	pop    ebx
c001179a:	c3                   	ret    

c001179b <SysOpenDir(regs*)>:
c001179b:	56                   	push   esi
c001179c:	53                   	push   ebx
c001179d:	83 ec 04             	sub    esp,0x4
c00117a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117a7:	85 c9                	test   ecx,ecx
c00117a9:	74 5d                	je     c0011808 <SysOpenDir(regs*)+0x6d>
c00117ab:	83 ec 0c             	sub    esp,0xc
c00117ae:	68 14 01 00 00       	push   0x114
c00117b3:	e8 f6 62 ff ff       	call   c0007aae <malloc>
c00117b8:	83 c4 0c             	add    esp,0xc
c00117bb:	89 c6                	mov    esi,eax
c00117bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117c5:	50                   	push   eax
c00117c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117c9:	52                   	push   edx
c00117ca:	56                   	push   esi
c00117cb:	e8 e6 9e ff ff       	call   c000b6b6 <Directory::Directory(char const*, Process*)>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	85 f6                	test   esi,esi
c00117d5:	74 31                	je     c0011808 <SysOpenDir(regs*)+0x6d>
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	56                   	push   esi
c00117db:	e8 92 9f ff ff       	call   c000b772 <Directory::open()>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	85 c0                	test   eax,eax
c00117e5:	75 21                	jne    c0011808 <SysOpenDir(regs*)+0x6d>
c00117e7:	83 ec 0c             	sub    esp,0xc
c00117ea:	56                   	push   esi
c00117eb:	e8 ba 79 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c00117f0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	89 02                	mov    DWORD PTR [edx],eax
c00117f8:	c1 f8 1f             	sar    eax,0x1f
c00117fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117fe:	83 c4 04             	add    esp,0x4
c0011801:	31 c0                	xor    eax,eax
c0011803:	31 d2                	xor    edx,edx
c0011805:	5b                   	pop    ebx
c0011806:	5e                   	pop    esi
c0011807:	c3                   	ret    
c0011808:	83 c4 04             	add    esp,0x4
c001180b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011810:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011815:	5b                   	pop    ebx
c0011816:	5e                   	pop    esi
c0011817:	c3                   	ret    

c0011818 <SysMakeDir(regs*)>:
c0011818:	56                   	push   esi
c0011819:	53                   	push   ebx
c001181a:	83 ec 10             	sub    esp,0x10
c001181d:	68 14 01 00 00       	push   0x114
c0011822:	e8 87 62 ff ff       	call   c0007aae <malloc>
c0011827:	83 c4 0c             	add    esp,0xc
c001182a:	89 c3                	mov    ebx,eax
c001182c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011831:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011834:	50                   	push   eax
c0011835:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011839:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001183c:	52                   	push   edx
c001183d:	53                   	push   ebx
c001183e:	e8 73 9e ff ff       	call   c000b6b6 <Directory::Directory(char const*, Process*)>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	85 db                	test   ebx,ebx
c0011848:	74 2c                	je     c0011876 <SysMakeDir(regs*)+0x5e>
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	53                   	push   ebx
c001184e:	e8 ff a0 ff ff       	call   c000b952 <Directory::create()>
c0011853:	89 c6                	mov    esi,eax
c0011855:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011857:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001185a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	31 c0                	xor    eax,eax
c0011862:	85 f6                	test   esi,esi
c0011864:	0f 95 c0             	setne  al
c0011867:	31 d2                	xor    edx,edx
c0011869:	f7 d8                	neg    eax
c001186b:	83 d2 00             	adc    edx,0x0
c001186e:	83 c4 04             	add    esp,0x4
c0011871:	f7 da                	neg    edx
c0011873:	5b                   	pop    ebx
c0011874:	5e                   	pop    esi
c0011875:	c3                   	ret    
c0011876:	83 c4 04             	add    esp,0x4
c0011879:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001187e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011883:	5b                   	pop    ebx
c0011884:	5e                   	pop    esi
c0011885:	c3                   	ret    

c0011886 <SysCloseDir(regs*)>:
c0011886:	53                   	push   ebx
c0011887:	83 ec 08             	sub    esp,0x8
c001188a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001188e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011891:	8d 50 fd             	lea    edx,[eax-0x3]
c0011894:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001189a:	77 2f                	ja     c00118cb <SysCloseDir(regs*)+0x45>
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	50                   	push   eax
c00118a0:	e8 02 7c ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00118a5:	89 c3                	mov    ebx,eax
c00118a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00118aa:	e8 1f 9f ff ff       	call   c000b7ce <Directory::close()>
c00118af:	83 c4 10             	add    esp,0x10
c00118b2:	85 db                	test   ebx,ebx
c00118b4:	74 0c                	je     c00118c2 <SysCloseDir(regs*)+0x3c>
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118bb:	53                   	push   ebx
c00118bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	31 c0                	xor    eax,eax
c00118c4:	31 d2                	xor    edx,edx
c00118c6:	83 c4 08             	add    esp,0x8
c00118c9:	5b                   	pop    ebx
c00118ca:	c3                   	ret    
c00118cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118d5:	83 c4 08             	add    esp,0x8
c00118d8:	5b                   	pop    ebx
c00118d9:	c3                   	ret    

c00118da <SysWait(regs*)>:
c00118da:	83 ec 10             	sub    esp,0x10
c00118dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118e1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118e4:	52                   	push   edx
c00118e5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118e8:	51                   	push   ecx
c00118e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118ec:	50                   	push   eax
c00118ed:	e8 d6 3c 00 00       	call   c00155c8 <waitTask(int, int*, int)>
c00118f2:	83 c4 1c             	add    esp,0x1c
c00118f5:	89 c2                	mov    edx,eax
c00118f7:	c1 fa 1f             	sar    edx,0x1f
c00118fa:	c3                   	ret    

c00118fb <SysNotImpl(regs*)>:
c00118fb:	83 ec 18             	sub    esp,0x18
c00118fe:	68 02 15 02 c0       	push   0xc0021502
c0011903:	e8 b1 f2 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0011908:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001190d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011912:	83 c4 1c             	add    esp,0x1c
c0011915:	c3                   	ret    

c0011916 <SysPanic(regs*)>:
c0011916:	83 ec 18             	sub    esp,0x18
c0011919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001191d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011920:	50                   	push   eax
c0011921:	e8 93 f2 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0011926:	b8 01 00 00 00       	mov    eax,0x1
c001192b:	31 d2                	xor    edx,edx
c001192d:	83 c4 1c             	add    esp,0x1c
c0011930:	c3                   	ret    

c0011931 <SysRmdir(regs*)>:
c0011931:	56                   	push   esi
c0011932:	53                   	push   ebx
c0011933:	83 ec 20             	sub    esp,0x20
c0011936:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001193a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001193d:	68 14 01 00 00       	push   0x114
c0011942:	e8 67 61 ff ff       	call   c0007aae <malloc>
c0011947:	83 c4 0c             	add    esp,0xc
c001194a:	89 c3                	mov    ebx,eax
c001194c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011951:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011954:	50                   	push   eax
c0011955:	56                   	push   esi
c0011956:	53                   	push   ebx
c0011957:	e8 34 98 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001195c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001195f:	e8 60 9a ff ff       	call   c000b3c4 <File::unlink()>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	85 db                	test   ebx,ebx
c0011969:	74 14                	je     c001197f <SysRmdir(regs*)+0x4e>
c001196b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001196f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	53                   	push   ebx
c0011975:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011978:	83 c4 10             	add    esp,0x10
c001197b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001197f:	85 c0                	test   eax,eax
c0011981:	0f 95 c0             	setne  al
c0011984:	31 d2                	xor    edx,edx
c0011986:	0f b6 c0             	movzx  eax,al
c0011989:	f7 d8                	neg    eax
c001198b:	83 d2 00             	adc    edx,0x0
c001198e:	83 c4 14             	add    esp,0x14
c0011991:	f7 da                	neg    edx
c0011993:	5b                   	pop    ebx
c0011994:	5e                   	pop    esi
c0011995:	c3                   	ret    

c0011996 <SysUnlink(regs*)>:
c0011996:	56                   	push   esi
c0011997:	53                   	push   ebx
c0011998:	83 ec 20             	sub    esp,0x20
c001199b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001199f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119a2:	68 14 01 00 00       	push   0x114
c00119a7:	e8 02 61 ff ff       	call   c0007aae <malloc>
c00119ac:	83 c4 0c             	add    esp,0xc
c00119af:	89 c3                	mov    ebx,eax
c00119b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b9:	50                   	push   eax
c00119ba:	56                   	push   esi
c00119bb:	53                   	push   ebx
c00119bc:	e8 cf 97 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00119c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119c4:	e8 fb 99 ff ff       	call   c000b3c4 <File::unlink()>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	85 db                	test   ebx,ebx
c00119ce:	74 14                	je     c00119e4 <SysUnlink(regs*)+0x4e>
c00119d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	53                   	push   ebx
c00119da:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119e4:	85 c0                	test   eax,eax
c00119e6:	0f 95 c0             	setne  al
c00119e9:	31 d2                	xor    edx,edx
c00119eb:	0f b6 c0             	movzx  eax,al
c00119ee:	f7 d8                	neg    eax
c00119f0:	83 d2 00             	adc    edx,0x0
c00119f3:	83 c4 14             	add    esp,0x14
c00119f6:	f7 da                	neg    edx
c00119f8:	5b                   	pop    ebx
c00119f9:	5e                   	pop    esi
c00119fa:	c3                   	ret    

c00119fb <SysGetArgv(regs*)>:
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a02:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a05:	85 c0                	test   eax,eax
c0011a07:	78 2c                	js     c0011a35 <SysGetArgv(regs*)+0x3a>
c0011a09:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a0f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a12:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a18:	7d 1b                	jge    c0011a35 <SysGetArgv(regs*)+0x3a>
c0011a1a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a21:	85 c0                	test   eax,eax
c0011a23:	74 18                	je     c0011a3d <SysGetArgv(regs*)+0x42>
c0011a25:	83 ec 08             	sub    esp,0x8
c0011a28:	50                   	push   eax
c0011a29:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a2c:	50                   	push   eax
c0011a2d:	e8 0e ec fe ff       	call   c0000640 <strcpy>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	31 c0                	xor    eax,eax
c0011a37:	31 d2                	xor    edx,edx
c0011a39:	83 c4 0c             	add    esp,0xc
c0011a3c:	c3                   	ret    
c0011a3d:	b8 01 00 00 00       	mov    eax,0x1
c0011a42:	31 d2                	xor    edx,edx
c0011a44:	83 c4 0c             	add    esp,0xc
c0011a47:	c3                   	ret    

c0011a48 <SysUSleep(regs*)>:
c0011a48:	83 ec 1c             	sub    esp,0x1c
c0011a4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a4f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a52:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a55:	6a 00                	push   0x0
c0011a57:	6a 64                	push   0x64
c0011a59:	52                   	push   edx
c0011a5a:	50                   	push   eax
c0011a5b:	e8 20 cf 00 00       	call   c001e980 <__udivdi3>
c0011a60:	83 c4 14             	add    esp,0x14
c0011a63:	50                   	push   eax
c0011a64:	e8 43 3c 00 00       	call   c00156ac <milliTenthSleep(unsigned int)>
c0011a69:	31 c0                	xor    eax,eax
c0011a6b:	31 d2                	xor    edx,edx
c0011a6d:	83 c4 1c             	add    esp,0x1c
c0011a70:	c3                   	ret    

c0011a71 <SysSpawn(regs*)>:
c0011a71:	56                   	push   esi
c0011a72:	53                   	push   ebx
c0011a73:	83 ec 04             	sub    esp,0x4
c0011a76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a7a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a7d:	85 f6                	test   esi,esi
c0011a7f:	75 0a                	jne    c0011a8b <SysSpawn(regs*)+0x1a>
c0011a81:	83 c4 04             	add    esp,0x4
c0011a84:	31 c0                	xor    eax,eax
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	5b                   	pop    ebx
c0011a89:	5e                   	pop    esi
c0011a8a:	c3                   	ret    
c0011a8b:	83 ec 0c             	sub    esp,0xc
c0011a8e:	68 24 07 00 00       	push   0x724
c0011a93:	e8 16 60 ff ff       	call   c0007aae <malloc>
c0011a98:	83 c4 10             	add    esp,0x10
c0011a9b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a9e:	89 c6                	mov    esi,eax
c0011aa0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aa3:	85 c9                	test   ecx,ecx
c0011aa5:	75 39                	jne    c0011ae0 <SysSpawn(regs*)+0x6f>
c0011aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aaf:	52                   	push   edx
c0011ab0:	50                   	push   eax
c0011ab1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ab4:	50                   	push   eax
c0011ab5:	56                   	push   esi
c0011ab6:	e8 41 32 00 00       	call   c0014cfc <Process::Process(char const*, Process*, char**)>
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011ac5:	75 ba                	jne    c0011a81 <SysSpawn(regs*)+0x10>
c0011ac7:	83 ec 0c             	sub    esp,0xc
c0011aca:	56                   	push   esi
c0011acb:	e8 68 37 00 00       	call   c0015238 <Process::createUserThread()>
c0011ad0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	89 c2                	mov    edx,eax
c0011ad7:	83 c4 04             	add    esp,0x4
c0011ada:	c1 fa 1f             	sar    edx,0x1f
c0011add:	5b                   	pop    ebx
c0011ade:	5e                   	pop    esi
c0011adf:	c3                   	ret    
c0011ae0:	31 c0                	xor    eax,eax
c0011ae2:	eb cb                	jmp    c0011aaf <SysSpawn(regs*)+0x3e>

c0011ae4 <SysGetEnv(regs*)>:
c0011ae4:	57                   	push   edi
c0011ae5:	56                   	push   esi
c0011ae6:	53                   	push   ebx
c0011ae7:	83 ec 1c             	sub    esp,0x1c
c0011aea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011af6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011af9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011afc:	51                   	push   ecx
c0011afd:	e8 6f ef ff ff       	call   c0010a71 <KeGetProcessTotalEnvCount(Process*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	39 c7                	cmp    edi,eax
c0011b07:	7c 14                	jl     c0011b1d <SysGetEnv(regs*)+0x39>
c0011b09:	85 f6                	test   esi,esi
c0011b0b:	75 0b                	jne    c0011b18 <SysGetEnv(regs*)+0x34>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	31 c0                	xor    eax,eax
c0011b12:	5b                   	pop    ebx
c0011b13:	31 d2                	xor    edx,edx
c0011b15:	5e                   	pop    esi
c0011b16:	5f                   	pop    edi
c0011b17:	c3                   	ret    
c0011b18:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b1b:	eb f0                	jmp    c0011b0d <SysGetEnv(regs*)+0x29>
c0011b1d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b21:	83 ec 04             	sub    esp,0x4
c0011b24:	57                   	push   edi
c0011b25:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b2b:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011b2e:	57                   	push   edi
c0011b2f:	50                   	push   eax
c0011b30:	e8 5c ef ff ff       	call   c0010a91 <KeGetProcessEnvPair(Process*, int)>
c0011b35:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b40:	83 c4 0c             	add    esp,0xc
c0011b43:	85 d2                	test   edx,edx
c0011b45:	75 23                	jne    c0011b6a <SysGetEnv(regs*)+0x86>
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	50                   	push   eax
c0011b4b:	e8 20 ea fe ff       	call   c0000570 <strlen>
c0011b50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b53:	89 c3                	mov    ebx,eax
c0011b55:	e8 16 ea fe ff       	call   c0000570 <strlen>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	31 d2                	xor    edx,edx
c0011b66:	5b                   	pop    ebx
c0011b67:	5e                   	pop    esi
c0011b68:	5f                   	pop    edi
c0011b69:	c3                   	ret    
c0011b6a:	83 ec 08             	sub    esp,0x8
c0011b6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b70:	50                   	push   eax
c0011b71:	56                   	push   esi
c0011b72:	e8 c9 ea fe ff       	call   c0000640 <strcpy>
c0011b77:	58                   	pop    eax
c0011b78:	5a                   	pop    edx
c0011b79:	68 1c 15 02 c0       	push   0xc002151c
c0011b7e:	56                   	push   esi
c0011b7f:	e8 bc ec fe ff       	call   c0000840 <strcat>
c0011b84:	59                   	pop    ecx
c0011b85:	5b                   	pop    ebx
c0011b86:	57                   	push   edi
c0011b87:	56                   	push   esi
c0011b88:	e8 b3 ec fe ff       	call   c0000840 <strcat>
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	e9 78 ff ff ff       	jmp    c0011b0d <SysGetEnv(regs*)+0x29>

c0011b95 <SysSetFatAttrib(regs*)>:
c0011b95:	57                   	push   edi
c0011b96:	56                   	push   esi
c0011b97:	53                   	push   ebx
c0011b98:	83 ec 1c             	sub    esp,0x1c
c0011b9b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b9f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ba2:	68 14 01 00 00       	push   0x114
c0011ba7:	e8 02 5f ff ff       	call   c0007aae <malloc>
c0011bac:	83 c4 0c             	add    esp,0xc
c0011baf:	89 c3                	mov    ebx,eax
c0011bb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb9:	50                   	push   eax
c0011bba:	57                   	push   edi
c0011bbb:	53                   	push   ebx
c0011bbc:	e8 cf 95 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011bc1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bc4:	83 c4 0c             	add    esp,0xc
c0011bc7:	0f b6 d4             	movzx  edx,ah
c0011bca:	0f b6 c0             	movzx  eax,al
c0011bcd:	52                   	push   edx
c0011bce:	50                   	push   eax
c0011bcf:	53                   	push   ebx
c0011bd0:	e8 89 98 ff ff       	call   c000b45e <File::chfatattr(unsigned char, unsigned char)>
c0011bd5:	83 c4 10             	add    esp,0x10
c0011bd8:	85 db                	test   ebx,ebx
c0011bda:	74 14                	je     c0011bf0 <SysSetFatAttrib(regs*)+0x5b>
c0011bdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011be0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011be2:	83 ec 0c             	sub    esp,0xc
c0011be5:	53                   	push   ebx
c0011be6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bf0:	85 c0                	test   eax,eax
c0011bf2:	0f 95 c0             	setne  al
c0011bf5:	31 d2                	xor    edx,edx
c0011bf7:	0f b6 c0             	movzx  eax,al
c0011bfa:	f7 d8                	neg    eax
c0011bfc:	83 d2 00             	adc    edx,0x0
c0011bff:	83 c4 10             	add    esp,0x10
c0011c02:	f7 da                	neg    edx
c0011c04:	5b                   	pop    ebx
c0011c05:	5e                   	pop    esi
c0011c06:	5f                   	pop    edi
c0011c07:	c3                   	ret    

c0011c08 <SysPipe(regs*)>:
c0011c08:	57                   	push   edi
c0011c09:	56                   	push   esi
c0011c0a:	53                   	push   ebx
c0011c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c15:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c18:	6a 20                	push   0x20
c0011c1a:	e8 8f 5e ff ff       	call   c0007aae <malloc>
c0011c1f:	89 c3                	mov    ebx,eax
c0011c21:	58                   	pop    eax
c0011c22:	5a                   	pop    edx
c0011c23:	68 00 50 00 00       	push   0x5000
c0011c28:	53                   	push   ebx
c0011c29:	e8 ec 67 ff ff       	call   c000841a <Pipe::Pipe(int)>
c0011c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c31:	e8 74 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c36:	89 07                	mov    DWORD PTR [edi],eax
c0011c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c3b:	e8 6a 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	89 06                	mov    DWORD PTR [esi],eax
c0011c45:	31 d2                	xor    edx,edx
c0011c47:	5b                   	pop    ebx
c0011c48:	31 c0                	xor    eax,eax
c0011c4a:	5e                   	pop    esi
c0011c4b:	5f                   	pop    edi
c0011c4c:	c3                   	ret    

c0011c4d <SysGetUnixTime(regs*)>:
c0011c4d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011c52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c5c:	e9 35 9f ff ff       	jmp    c000bb96 <Clock::timeInSecondsLocal()>

c0011c61 <string_ends_with(char const*, char const*)>:
c0011c61:	57                   	push   edi
c0011c62:	56                   	push   esi
c0011c63:	53                   	push   ebx
c0011c64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c6c:	83 ec 0c             	sub    esp,0xc
c0011c6f:	53                   	push   ebx
c0011c70:	e8 fb e8 fe ff       	call   c0000570 <strlen>
c0011c75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c78:	89 c6                	mov    esi,eax
c0011c7a:	e8 f1 e8 fe ff       	call   c0000570 <strlen>
c0011c7f:	83 c4 10             	add    esp,0x10
c0011c82:	39 c6                	cmp    esi,eax
c0011c84:	7d 06                	jge    c0011c8c <string_ends_with(char const*, char const*)+0x2b>
c0011c86:	5b                   	pop    ebx
c0011c87:	31 c0                	xor    eax,eax
c0011c89:	5e                   	pop    esi
c0011c8a:	5f                   	pop    edi
c0011c8b:	c3                   	ret    
c0011c8c:	83 ec 08             	sub    esp,0x8
c0011c8f:	29 c6                	sub    esi,eax
c0011c91:	57                   	push   edi
c0011c92:	01 f3                	add    ebx,esi
c0011c94:	53                   	push   ebx
c0011c95:	e8 b6 ea fe ff       	call   c0000750 <strcmp>
c0011c9a:	83 c4 10             	add    esp,0x10
c0011c9d:	85 c0                	test   eax,eax
c0011c9f:	5b                   	pop    ebx
c0011ca0:	0f 94 c0             	sete   al
c0011ca3:	5e                   	pop    esi
c0011ca4:	0f b6 c0             	movzx  eax,al
c0011ca7:	5f                   	pop    edi
c0011ca8:	c3                   	ret    

c0011ca9 <SysOpen(regs*)>:
c0011ca9:	56                   	push   esi
c0011caa:	53                   	push   ebx
c0011cab:	81 ec 04 01 00 00    	sub    esp,0x104
c0011cb1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011cb8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cbb:	85 c0                	test   eax,eax
c0011cbd:	0f 84 bd 01 00 00    	je     c0011e80 <SysOpen(regs*)+0x1d7>
c0011cc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cc6:	85 c0                	test   eax,eax
c0011cc8:	0f 84 b2 01 00 00    	je     c0011e80 <SysOpen(regs*)+0x1d7>
c0011cce:	83 ec 04             	sub    esp,0x4
c0011cd1:	68 1e 15 02 c0       	push   0xc002151e
c0011cd6:	50                   	push   eax
c0011cd7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cdb:	56                   	push   esi
c0011cdc:	e8 f9 92 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ce1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce4:	e8 87 e8 fe ff       	call   c0000570 <strlen>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	83 e8 01             	sub    eax,0x1
c0011cef:	74 21                	je     c0011d12 <SysOpen(regs*)+0x69>
c0011cf1:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011cf5:	eb 12                	jmp    c0011d09 <SysOpen(regs*)+0x60>
c0011cf7:	83 fa 3a             	cmp    edx,0x3a
c0011cfa:	74 12                	je     c0011d0e <SysOpen(regs*)+0x65>
c0011cfc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d00:	83 e8 01             	sub    eax,0x1
c0011d03:	74 0d                	je     c0011d12 <SysOpen(regs*)+0x69>
c0011d05:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011d09:	83 fa 2e             	cmp    edx,0x2e
c0011d0c:	75 e9                	jne    c0011cf7 <SysOpen(regs*)+0x4e>
c0011d0e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d12:	83 ec 08             	sub    esp,0x8
c0011d15:	68 22 15 02 c0       	push   0xc0021522
c0011d1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d1d:	50                   	push   eax
c0011d1e:	e8 3e ff ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	85 c0                	test   eax,eax
c0011d28:	74 1d                	je     c0011d47 <SysOpen(regs*)+0x9e>
c0011d2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d3a:	81 c4 04 01 00 00    	add    esp,0x104
c0011d40:	31 c0                	xor    eax,eax
c0011d42:	31 d2                	xor    edx,edx
c0011d44:	5b                   	pop    ebx
c0011d45:	5e                   	pop    esi
c0011d46:	c3                   	ret    
c0011d47:	83 ec 08             	sub    esp,0x8
c0011d4a:	68 27 15 02 c0       	push   0xc0021527
c0011d4f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d52:	50                   	push   eax
c0011d53:	e8 09 ff ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	85 c0                	test   eax,eax
c0011d5d:	75 cb                	jne    c0011d2a <SysOpen(regs*)+0x81>
c0011d5f:	83 ec 08             	sub    esp,0x8
c0011d62:	68 23 15 02 c0       	push   0xc0021523
c0011d67:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d6a:	50                   	push   eax
c0011d6b:	e8 e0 e9 fe ff       	call   c0000750 <strcmp>
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	85 c0                	test   eax,eax
c0011d75:	74 b3                	je     c0011d2a <SysOpen(regs*)+0x81>
c0011d77:	83 ec 08             	sub    esp,0x8
c0011d7a:	68 22 15 02 c0       	push   0xc0021522
c0011d7f:	56                   	push   esi
c0011d80:	e8 dc fe ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	85 c0                	test   eax,eax
c0011d8a:	75 9e                	jne    c0011d2a <SysOpen(regs*)+0x81>
c0011d8c:	83 ec 08             	sub    esp,0x8
c0011d8f:	68 2c 15 02 c0       	push   0xc002152c
c0011d94:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d97:	50                   	push   eax
c0011d98:	e8 c4 fe ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	85 c0                	test   eax,eax
c0011da2:	0f 85 eb 00 00 00    	jne    c0011e93 <SysOpen(regs*)+0x1ea>
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	68 31 15 02 c0       	push   0xc0021531
c0011db0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011db3:	50                   	push   eax
c0011db4:	e8 a8 fe ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	85 c0                	test   eax,eax
c0011dbe:	0f 85 cf 00 00 00    	jne    c0011e93 <SysOpen(regs*)+0x1ea>
c0011dc4:	83 ec 08             	sub    esp,0x8
c0011dc7:	68 2d 15 02 c0       	push   0xc002152d
c0011dcc:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011dcf:	51                   	push   ecx
c0011dd0:	e8 7b e9 fe ff       	call   c0000750 <strcmp>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	85 c0                	test   eax,eax
c0011dda:	0f 84 b3 00 00 00    	je     c0011e93 <SysOpen(regs*)+0x1ea>
c0011de0:	83 ec 08             	sub    esp,0x8
c0011de3:	68 2c 15 02 c0       	push   0xc002152c
c0011de8:	56                   	push   esi
c0011de9:	e8 73 fe ff ff       	call   c0011c61 <string_ends_with(char const*, char const*)>
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	85 c0                	test   eax,eax
c0011df3:	0f 85 9a 00 00 00    	jne    c0011e93 <SysOpen(regs*)+0x1ea>
c0011df9:	83 ec 0c             	sub    esp,0xc
c0011dfc:	68 14 01 00 00       	push   0x114
c0011e01:	e8 a8 5c ff ff       	call   c0007aae <malloc>
c0011e06:	83 c4 0c             	add    esp,0xc
c0011e09:	89 c6                	mov    esi,eax
c0011e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e13:	50                   	push   eax
c0011e14:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e17:	52                   	push   edx
c0011e18:	56                   	push   esi
c0011e19:	e8 72 93 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	85 f6                	test   esi,esi
c0011e23:	74 5b                	je     c0011e80 <SysOpen(regs*)+0x1d7>
c0011e25:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e28:	0f b6 c2             	movzx  eax,dl
c0011e2b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e2e:	89 d0                	mov    eax,edx
c0011e30:	83 e0 01             	and    eax,0x1
c0011e33:	f6 c2 02             	test   dl,0x2
c0011e36:	74 03                	je     c0011e3b <SysOpen(regs*)+0x192>
c0011e38:	83 c8 02             	or     eax,0x2
c0011e3b:	f6 c2 04             	test   dl,0x4
c0011e3e:	74 03                	je     c0011e43 <SysOpen(regs*)+0x19a>
c0011e40:	83 c8 04             	or     eax,0x4
c0011e43:	f6 c2 08             	test   dl,0x8
c0011e46:	74 03                	je     c0011e4b <SysOpen(regs*)+0x1a2>
c0011e48:	83 c8 0a             	or     eax,0xa
c0011e4b:	80 e2 10             	and    dl,0x10
c0011e4e:	74 03                	je     c0011e53 <SysOpen(regs*)+0x1aa>
c0011e50:	83 c8 12             	or     eax,0x12
c0011e53:	83 ec 08             	sub    esp,0x8
c0011e56:	50                   	push   eax
c0011e57:	56                   	push   esi
c0011e58:	e8 ef 93 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	85 c0                	test   eax,eax
c0011e62:	75 1c                	jne    c0011e80 <SysOpen(regs*)+0x1d7>
c0011e64:	83 ec 0c             	sub    esp,0xc
c0011e67:	56                   	push   esi
c0011e68:	e8 3d 73 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011e6d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	89 02                	mov    DWORD PTR [edx],eax
c0011e75:	c1 f8 1f             	sar    eax,0x1f
c0011e78:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e7b:	e9 ba fe ff ff       	jmp    c0011d3a <SysOpen(regs*)+0x91>
c0011e80:	81 c4 04 01 00 00    	add    esp,0x104
c0011e86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e90:	5b                   	pop    ebx
c0011e91:	5e                   	pop    esi
c0011e92:	c3                   	ret    
c0011e93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e96:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e9c:	e9 92 fe ff ff       	jmp    c0011d33 <SysOpen(regs*)+0x8a>

c0011ea1 <KeSystemCall(regs*, void*)>:
c0011ea1:	53                   	push   ebx
c0011ea2:	83 ec 08             	sub    esp,0x8
c0011ea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ea9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011eac:	83 f8 3b             	cmp    eax,0x3b
c0011eaf:	77 16                	ja     c0011ec7 <KeSystemCall(regs*, void*)+0x26>
c0011eb1:	8b 14 85 40 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd6c0]
c0011eb8:	85 d2                	test   edx,edx
c0011eba:	74 0b                	je     c0011ec7 <KeSystemCall(regs*, void*)+0x26>
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	53                   	push   ebx
c0011ec0:	ff d2                	call   edx
c0011ec2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ec5:	eb 0d                	jmp    c0011ed4 <KeSystemCall(regs*, void*)+0x33>
c0011ec7:	52                   	push   edx
c0011ec8:	52                   	push   edx
c0011ec9:	50                   	push   eax
c0011eca:	68 36 15 02 c0       	push   0xc0021536
c0011ecf:	e8 65 8a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011edc:	31 d2                	xor    edx,edx
c0011ede:	83 c4 08             	add    esp,0x8
c0011ee1:	5b                   	pop    ebx
c0011ee2:	c3                   	ret    
c0011ee3:	90                   	nop

c0011ee4 <KeSwitchEndian16(unsigned short)>:
c0011ee4:	83 ec 04             	sub    esp,0x4
c0011ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011eeb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011eef:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ef3:	c1 f8 08             	sar    eax,0x8
c0011ef6:	89 c2                	mov    edx,eax
c0011ef8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011efc:	c1 e0 08             	shl    eax,0x8
c0011eff:	09 d0                	or     eax,edx
c0011f01:	83 c4 04             	add    esp,0x4
c0011f04:	c3                   	ret    
c0011f05:	8d 76 00             	lea    esi,[esi+0x0]

c0011f08 <KeSwitchEndian32(unsigned int)>:
c0011f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0c:	c1 e8 18             	shr    eax,0x18
c0011f0f:	89 c2                	mov    edx,eax
c0011f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f15:	c1 e0 08             	shl    eax,0x8
c0011f18:	25 00 00 ff 00       	and    eax,0xff0000
c0011f1d:	09 c2                	or     edx,eax
c0011f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f23:	c1 e8 08             	shr    eax,0x8
c0011f26:	25 00 ff 00 00       	and    eax,0xff00
c0011f2b:	09 c2                	or     edx,eax
c0011f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f31:	c1 e0 18             	shl    eax,0x18
c0011f34:	09 d0                	or     eax,edx
c0011f36:	c3                   	ret    
c0011f37:	90                   	nop

c0011f38 <EthernetCRC32(unsigned char*, int)>:
c0011f38:	83 ec 10             	sub    esp,0x10
c0011f3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f40:	75 0a                	jne    c0011f4c <EthernetCRC32(unsigned char*, int)+0x14>
c0011f42:	b8 00 00 00 00       	mov    eax,0x0
c0011f47:	e9 8c 00 00 00       	jmp    c0011fd8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f4c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011f51:	7f 09                	jg     c0011f5c <EthernetCRC32(unsigned char*, int)+0x24>
c0011f53:	b8 00 00 00 00       	mov    eax,0x0
c0011f58:	eb 7e                	jmp    c0011fd8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f5a:	66 90                	xchg   ax,ax
c0011f5c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011f64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f70:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011f74:	7d 5a                	jge    c0011fd0 <EthernetCRC32(unsigned char*, int)+0x98>
c0011f76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f7e:	01 d0                	add    eax,edx
c0011f80:	8a 00                	mov    al,BYTE PTR [eax]
c0011f82:	0f b6 c0             	movzx  eax,al
c0011f85:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011f89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f91:	8d 76 00             	lea    esi,[esi+0x0]
c0011f94:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011f99:	7f 2d                	jg     c0011fc8 <EthernetCRC32(unsigned char*, int)+0x90>
c0011f9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9f:	83 e0 01             	and    eax,0x1
c0011fa2:	74 10                	je     c0011fb4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa8:	d1 e8                	shr    eax,1
c0011faa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011faf:	eb 0b                	jmp    c0011fbc <EthernetCRC32(unsigned char*, int)+0x84>
c0011fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb8:	d1 e8                	shr    eax,1
c0011fba:	66 90                	xchg   ax,ax
c0011fbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fc0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011fc5:	eb cd                	jmp    c0011f94 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011fc7:	90                   	nop
c0011fc8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011fcd:	eb 9d                	jmp    c0011f6c <EthernetCRC32(unsigned char*, int)+0x34>
c0011fcf:	90                   	nop
c0011fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd4:	f7 d0                	not    eax
c0011fd6:	66 90                	xchg   ax,ax
c0011fd8:	83 c4 10             	add    esp,0x10
c0011fdb:	c3                   	ret    

c0011fdc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011fdc:	83 ec 2c             	sub    esp,0x2c
c0011fdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fe8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ff0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ff4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ff7:	0f b7 c0             	movzx  eax,ax
c0011ffa:	3d 06 08 00 00       	cmp    eax,0x806
c0011fff:	75 13                	jne    c0012014 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012001:	83 ec 0c             	sub    esp,0xc
c0012004:	68 4a 15 02 c0       	push   0xc002154a
c0012009:	e8 2b 89 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001200e:	83 c4 10             	add    esp,0x10
c0012011:	eb 25                	jmp    c0012038 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012013:	90                   	nop
c0012014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001201b:	0f b7 c0             	movzx  eax,ax
c001201e:	3d 00 08 00 00       	cmp    eax,0x800
c0012023:	75 13                	jne    c0012038 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012025:	83 ec 0c             	sub    esp,0xc
c0012028:	68 60 15 02 c0       	push   0xc0021560
c001202d:	e8 07 89 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8d 76 00             	lea    esi,[esi+0x0]
c0012038:	90                   	nop
c0012039:	83 c4 2c             	add    esp,0x2c
c001203c:	c3                   	ret    

c001203d <CmOpen(char const*)>:
c001203d:	57                   	push   edi
c001203e:	56                   	push   esi
c001203f:	53                   	push   ebx
c0012040:	83 ec 1c             	sub    esp,0x1c
c0012043:	6a 30                	push   0x30
c0012045:	e8 64 5a ff ff       	call   c0007aae <malloc>
c001204a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012051:	89 c3                	mov    ebx,eax
c0012053:	e8 56 5a ff ff       	call   c0007aae <malloc>
c0012058:	83 c4 0c             	add    esp,0xc
c001205b:	89 c6                	mov    esi,eax
c001205d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012063:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012067:	50                   	push   eax
c0012068:	e8 23 91 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001206d:	83 c4 0c             	add    esp,0xc
c0012070:	89 33                	mov    DWORD PTR [ebx],esi
c0012072:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012076:	50                   	push   eax
c0012077:	8d 44 24 10          	lea    eax,[esp+0x10]
c001207b:	50                   	push   eax
c001207c:	56                   	push   esi
c001207d:	e8 76 94 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0012082:	5a                   	pop    edx
c0012083:	59                   	pop    ecx
c0012084:	6a 01                	push   0x1
c0012086:	ff 33                	push   DWORD PTR [ebx]
c0012088:	e8 bf 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001208d:	5e                   	pop    esi
c001208e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012092:	e8 17 5a ff ff       	call   c0007aae <malloc>
c0012097:	5a                   	pop    edx
c0012098:	89 c7                	mov    edi,eax
c001209a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001209e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00120a2:	56                   	push   esi
c00120a3:	57                   	push   edi
c00120a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120ac:	50                   	push   eax
c00120ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120b0:	83 c4 14             	add    esp,0x14
c00120b3:	ff 33                	push   DWORD PTR [ebx]
c00120b5:	e8 f0 91 ff ff       	call   c000b2aa <File::close()>
c00120ba:	59                   	pop    ecx
c00120bb:	58                   	pop    eax
c00120bc:	6a 13                	push   0x13
c00120be:	ff 33                	push   DWORD PTR [ebx]
c00120c0:	e8 87 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00120c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00120c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00120cc:	57                   	push   edi
c00120cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120d5:	50                   	push   eax
c00120d6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120d9:	83 c4 14             	add    esp,0x14
c00120dc:	57                   	push   edi
c00120dd:	e8 dc 59 ff ff       	call   c0007abe <free>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00120e8:	75 10                	jne    c00120fa <CmOpen(char const*)+0xbd>
c00120ea:	83 ec 0c             	sub    esp,0xc
c00120ed:	68 75 15 02 c0       	push   0xc0021575
c00120f2:	e8 c2 ea ff ff       	call   c0010bb9 <KePanic(char const*)>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	8d 7b 05             	lea    edi,[ebx+0x5]
c00120fd:	50                   	push   eax
c00120fe:	6a 00                	push   0x0
c0012100:	6a 00                	push   0x0
c0012102:	ff 33                	push   DWORD PTR [ebx]
c0012104:	e8 01 92 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012109:	8b 03                	mov    eax,DWORD PTR [ebx]
c001210b:	8b 10                	mov    edx,DWORD PTR [eax]
c001210d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012110:	57                   	push   edi
c0012111:	6a 00                	push   0x0
c0012113:	6a 2b                	push   0x2b
c0012115:	50                   	push   eax
c0012116:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012119:	83 c4 1c             	add    esp,0x1c
c001211c:	6a 00                	push   0x0
c001211e:	6a 00                	push   0x0
c0012120:	ff 33                	push   DWORD PTR [ebx]
c0012122:	e8 e3 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012127:	83 c4 0c             	add    esp,0xc
c001212a:	6a 08                	push   0x8
c001212c:	68 86 15 02 c0       	push   0xc0021586
c0012131:	57                   	push   edi
c0012132:	e8 49 e2 fe ff       	call   c0000380 <memcmp>
c0012137:	83 c4 10             	add    esp,0x10
c001213a:	85 c0                	test   eax,eax
c001213c:	74 10                	je     c001214e <CmOpen(char const*)+0x111>
c001213e:	83 ec 0c             	sub    esp,0xc
c0012141:	68 8f 15 02 c0       	push   0xc002158f
c0012146:	e8 6e ea ff ff       	call   c0010bb9 <KePanic(char const*)>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012152:	89 d8                	mov    eax,ebx
c0012154:	83 c4 10             	add    esp,0x10
c0012157:	5b                   	pop    ebx
c0012158:	5e                   	pop    esi
c0012159:	5f                   	pop    edi
c001215a:	c3                   	ret    

c001215b <CmClose(Reghive_Tag*)>:
c001215b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001215f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012163:	74 0b                	je     c0012170 <CmClose(Reghive_Tag*)+0x15>
c0012165:	8b 00                	mov    eax,DWORD PTR [eax]
c0012167:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001216b:	e9 3a 91 ff ff       	jmp    c000b2aa <File::close()>
c0012170:	c3                   	ret    

c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012171:	53                   	push   ebx
c0012172:	83 ec 18             	sub    esp,0x18
c0012175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012179:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001217d:	74 29                	je     c00121a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001217f:	50                   	push   eax
c0012180:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012185:	99                   	cdq    
c0012186:	52                   	push   edx
c0012187:	50                   	push   eax
c0012188:	ff 33                	push   DWORD PTR [ebx]
c001218a:	e8 7b 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001218f:	5a                   	pop    edx
c0012190:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012192:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012196:	8b 10                	mov    edx,DWORD PTR [eax]
c0012198:	51                   	push   ecx
c0012199:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001219d:	6a 00                	push   0x0
c001219f:	6a 2b                	push   0x2b
c00121a1:	50                   	push   eax
c00121a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00121a5:	83 c4 20             	add    esp,0x20
c00121a8:	83 c4 18             	add    esp,0x18
c00121ab:	5b                   	pop    ebx
c00121ac:	c3                   	ret    

c00121ad <CmGetString(Reghive_Tag*, int, char*)>:
c00121ad:	55                   	push   ebp
c00121ae:	57                   	push   edi
c00121af:	56                   	push   esi
c00121b0:	53                   	push   ebx
c00121b1:	31 db                	xor    ebx,ebx
c00121b3:	83 ec 70             	sub    esp,0x70
c00121b6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00121bd:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00121c1:	50                   	push   eax
c00121c2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00121c9:	55                   	push   ebp
c00121ca:	e8 a2 ff ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00121d7:	c1 e0 08             	shl    eax,0x8
c00121da:	89 c2                	mov    edx,eax
c00121dc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00121e1:	09 d0                	or     eax,edx
c00121e3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00121e8:	c1 e0 08             	shl    eax,0x8
c00121eb:	09 d0                	or     eax,edx
c00121ed:	74 25                	je     c0012214 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00121ef:	6b fb 0d             	imul   edi,ebx,0xd
c00121f2:	52                   	push   edx
c00121f3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00121f7:	52                   	push   edx
c00121f8:	50                   	push   eax
c00121f9:	55                   	push   ebp
c00121fa:	e8 72 ff ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121ff:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012203:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001220a:	b9 27 00 00 00       	mov    ecx,0x27
c001220f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012211:	83 c4 10             	add    esp,0x10
c0012214:	83 c3 03             	add    ebx,0x3
c0012217:	83 fb 15             	cmp    ebx,0x15
c001221a:	75 b6                	jne    c00121d2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c001221c:	83 c4 6c             	add    esp,0x6c
c001221f:	5b                   	pop    ebx
c0012220:	5e                   	pop    esi
c0012221:	5f                   	pop    edi
c0012222:	5d                   	pop    ebp
c0012223:	c3                   	ret    

c0012224 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012224:	83 ec 40             	sub    esp,0x40
c0012227:	8d 44 24 09          	lea    eax,[esp+0x9]
c001222b:	50                   	push   eax
c001222c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012230:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012234:	e8 38 ff ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	83 c8 ff             	or     eax,0xffffffff
c001223f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012244:	75 19                	jne    c001225f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012246:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001224b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012250:	c1 e0 08             	shl    eax,0x8
c0012253:	09 c2                	or     edx,eax
c0012255:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001225a:	c1 e0 10             	shl    eax,0x10
c001225d:	09 d0                	or     eax,edx
c001225f:	83 c4 3c             	add    esp,0x3c
c0012262:	c3                   	ret    

c0012263 <CmGetNext(Reghive_Tag*, int)>:
c0012263:	83 ec 40             	sub    esp,0x40
c0012266:	8d 44 24 09          	lea    eax,[esp+0x9]
c001226a:	50                   	push   eax
c001226b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001226f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012273:	e8 f9 fe ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012278:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001227d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012282:	c1 e0 08             	shl    eax,0x8
c0012285:	09 c2                	or     edx,eax
c0012287:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001228c:	83 c4 4c             	add    esp,0x4c
c001228f:	c1 e0 10             	shl    eax,0x10
c0012292:	09 d0                	or     eax,edx
c0012294:	c3                   	ret    

c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012295:	53                   	push   ebx
c0012296:	83 ec 18             	sub    esp,0x18
c0012299:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001229d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122a1:	74 29                	je     c00122cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00122a3:	50                   	push   eax
c00122a4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00122a9:	99                   	cdq    
c00122aa:	52                   	push   edx
c00122ab:	50                   	push   eax
c00122ac:	ff 33                	push   DWORD PTR [ebx]
c00122ae:	e8 57 90 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00122b3:	5a                   	pop    edx
c00122b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122b6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00122ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00122bc:	51                   	push   ecx
c00122bd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00122c1:	6a 00                	push   0x0
c00122c3:	6a 2b                	push   0x2b
c00122c5:	50                   	push   eax
c00122c6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00122c9:	83 c4 20             	add    esp,0x20
c00122cc:	83 c4 18             	add    esp,0x18
c00122cf:	5b                   	pop    ebx
c00122d0:	c3                   	ret    

c00122d1 <CmFreeExtent(Reghive_Tag*, int)>:
c00122d1:	53                   	push   ebx
c00122d2:	83 ec 3c             	sub    esp,0x3c
c00122d5:	6a 2b                	push   0x2b
c00122d7:	6a 00                	push   0x0
c00122d9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00122dd:	53                   	push   ebx
c00122de:	e8 0d e2 fe ff       	call   c00004f0 <memset>
c00122e3:	83 c4 0c             	add    esp,0xc
c00122e6:	53                   	push   ebx
c00122e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122ef:	e8 a1 ff ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122f4:	83 c4 48             	add    esp,0x48
c00122f7:	5b                   	pop    ebx
c00122f8:	c3                   	ret    

c00122f9 <CmUpdateHeader(Reghive_Tag*)>:
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012304:	74 10                	je     c0012316 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012306:	52                   	push   edx
c0012307:	8d 50 05             	lea    edx,[eax+0x5]
c001230a:	52                   	push   edx
c001230b:	6a 00                	push   0x0
c001230d:	50                   	push   eax
c001230e:	e8 82 ff ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	83 c4 0c             	add    esp,0xc
c0012319:	c3                   	ret    

c001231a <CmExpand(Reghive_Tag*, int)>:
c001231a:	57                   	push   edi
c001231b:	56                   	push   esi
c001231c:	83 ce ff             	or     esi,0xffffffff
c001231f:	53                   	push   ebx
c0012320:	83 ec 30             	sub    esp,0x30
c0012323:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012327:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001232b:	74 5f                	je     c001238c <CmExpand(Reghive_Tag*, int)+0x72>
c001232d:	31 d2                	xor    edx,edx
c001232f:	31 f6                	xor    esi,esi
c0012331:	50                   	push   eax
c0012332:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012336:	52                   	push   edx
c0012337:	50                   	push   eax
c0012338:	ff 33                	push   DWORD PTR [ebx]
c001233a:	e8 cb 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001233f:	83 c4 0c             	add    esp,0xc
c0012342:	6a 2b                	push   0x2b
c0012344:	6a 00                	push   0x0
c0012346:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001234a:	57                   	push   edi
c001234b:	e8 a0 e1 fe ff       	call   c00004f0 <memset>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012357:	7d 1b                	jge    c0012374 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012359:	83 ec 0c             	sub    esp,0xc
c001235c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001235e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012362:	8b 10                	mov    edx,DWORD PTR [eax]
c0012364:	46                   	inc    esi
c0012365:	51                   	push   ecx
c0012366:	57                   	push   edi
c0012367:	6a 00                	push   0x0
c0012369:	6a 2b                	push   0x2b
c001236b:	50                   	push   eax
c001236c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001236f:	83 c4 20             	add    esp,0x20
c0012372:	eb df                	jmp    c0012353 <CmExpand(Reghive_Tag*, int)+0x39>
c0012374:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012378:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	01 f2                	add    edx,esi
c0012380:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012383:	53                   	push   ebx
c0012384:	e8 70 ff ff ff       	call   c00122f9 <CmUpdateHeader(Reghive_Tag*)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	83 c4 30             	add    esp,0x30
c001238f:	89 f0                	mov    eax,esi
c0012391:	5b                   	pop    ebx
c0012392:	5e                   	pop    esi
c0012393:	5f                   	pop    edi
c0012394:	c3                   	ret    

c0012395 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012395:	55                   	push   ebp
c0012396:	57                   	push   edi
c0012397:	56                   	push   esi
c0012398:	53                   	push   ebx
c0012399:	83 cb ff             	or     ebx,0xffffffff
c001239c:	83 ec 1c             	sub    esp,0x1c
c001239f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00123a3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00123a7:	74 68                	je     c0012411 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00123a9:	be 2b 00 00 00       	mov    esi,0x2b
c00123ae:	51                   	push   ecx
c00123af:	31 ff                	xor    edi,edi
c00123b1:	6a 00                	push   0x0
c00123b3:	31 db                	xor    ebx,ebx
c00123b5:	6a 00                	push   0x0
c00123b7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00123ba:	e8 4b 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00123bf:	83 c4 10             	add    esp,0x10
c00123c2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00123c5:	76 3b                	jbe    c0012402 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123cd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00123d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00123d3:	51                   	push   ecx
c00123d4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00123d8:	51                   	push   ecx
c00123d9:	6a 00                	push   0x0
c00123db:	6a 01                	push   0x1
c00123dd:	50                   	push   eax
c00123de:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00123e1:	83 c4 20             	add    esp,0x20
c00123e4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123e9:	74 26                	je     c0012411 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00123eb:	43                   	inc    ebx
c00123ec:	52                   	push   edx
c00123ed:	57                   	push   edi
c00123ee:	56                   	push   esi
c00123ef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00123f2:	e8 13 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00123f7:	83 c6 2b             	add    esi,0x2b
c00123fa:	83 d7 00             	adc    edi,0x0
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	eb c0                	jmp    c00123c2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012402:	50                   	push   eax
c0012403:	50                   	push   eax
c0012404:	6a 40                	push   0x40
c0012406:	55                   	push   ebp
c0012407:	e8 0e ff ff ff       	call   c001231a <CmExpand(Reghive_Tag*, int)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	89 c3                	mov    ebx,eax
c0012411:	83 c4 1c             	add    esp,0x1c
c0012414:	89 d8                	mov    eax,ebx
c0012416:	5b                   	pop    ebx
c0012417:	5e                   	pop    esi
c0012418:	5f                   	pop    edi
c0012419:	5d                   	pop    ebp
c001241a:	c3                   	ret    

c001241b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001241b:	55                   	push   ebp
c001241c:	57                   	push   edi
c001241d:	56                   	push   esi
c001241e:	53                   	push   ebx
c001241f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012425:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001242c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012433:	e8 5d ff ff ff       	call   c0012395 <CmFindUnusedExtent(Reghive_Tag*)>
c0012438:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001243c:	83 c4 0c             	add    esp,0xc
c001243f:	6a 2b                	push   0x2b
c0012441:	6a 00                	push   0x0
c0012443:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012447:	55                   	push   ebp
c0012448:	e8 a3 e0 fe ff       	call   c00004f0 <memset>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	85 db                	test   ebx,ebx
c0012452:	74 12                	je     c0012466 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012454:	51                   	push   ecx
c0012455:	55                   	push   ebp
c0012456:	53                   	push   ebx
c0012457:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001245e:	e8 0e fd ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001246a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012471:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012476:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012478:	85 db                	test   ebx,ebx
c001247a:	74 49                	je     c00124c5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001247c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012481:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012486:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001248a:	c1 e0 08             	shl    eax,0x8
c001248d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012493:	09 c8                	or     eax,ecx
c0012495:	74 11                	je     c00124a8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012497:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001249b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001249f:	c1 e8 10             	shr    eax,0x10
c00124a2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00124a6:	eb 0f                	jmp    c00124b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00124a8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00124ad:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00124b2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124b7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00124bb:	c1 ea 08             	shr    edx,0x8
c00124be:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00124c3:	eb 0f                	jmp    c00124d4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00124c5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00124ca:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00124cf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124d4:	52                   	push   edx
c00124d5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00124d9:	50                   	push   eax
c00124da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124de:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124e5:	e8 ab fd ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	85 db                	test   ebx,ebx
c00124ef:	74 12                	je     c0012503 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00124f1:	50                   	push   eax
c00124f2:	55                   	push   ebp
c00124f3:	53                   	push   ebx
c00124f4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124fb:	e8 95 fd ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012500:	83 c4 10             	add    esp,0x10
c0012503:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012507:	83 c4 7c             	add    esp,0x7c
c001250a:	5b                   	pop    ebx
c001250b:	5e                   	pop    esi
c001250c:	5f                   	pop    edi
c001250d:	5d                   	pop    ebp
c001250e:	c3                   	ret    

c001250f <CmSetString(Reghive_Tag*, int, char const*)>:
c001250f:	55                   	push   ebp
c0012510:	57                   	push   edi
c0012511:	56                   	push   esi
c0012512:	53                   	push   ebx
c0012513:	bb 27 00 00 00       	mov    ebx,0x27
c0012518:	81 ec 88 00 00 00    	sub    esp,0x88
c001251e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012525:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001252c:	e8 3f e0 fe ff       	call   c0000570 <strlen>
c0012531:	8d 48 26             	lea    ecx,[eax+0x26]
c0012534:	89 c8                	mov    eax,ecx
c0012536:	99                   	cdq    
c0012537:	f7 fb                	idiv   ebx
c0012539:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001253d:	83 c4 10             	add    esp,0x10
c0012540:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012546:	7e 10                	jle    c0012558 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012548:	83 ec 0c             	sub    esp,0xc
c001254b:	68 a0 15 02 c0       	push   0xc00215a0
c0012550:	e8 64 e6 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	31 ff                	xor    edi,edi
c001255a:	50                   	push   eax
c001255b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001255f:	53                   	push   ebx
c0012560:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012567:	56                   	push   esi
c0012568:	e8 04 fc ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012574:	89 d0                	mov    eax,edx
c0012576:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001257a:	c1 e0 08             	shl    eax,0x8
c001257d:	09 c2                	or     edx,eax
c001257f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012583:	c1 e2 08             	shl    edx,0x8
c0012586:	09 c2                	or     edx,eax
c0012588:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001258c:	7e 76                	jle    c0012604 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001258e:	85 d2                	test   edx,edx
c0012590:	75 25                	jne    c00125b7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012592:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012597:	8d 44 24 45          	lea    eax,[esp+0x45]
c001259b:	50                   	push   eax
c001259c:	6a 00                	push   0x0
c001259e:	6a 00                	push   0x0
c00125a0:	56                   	push   esi
c00125a1:	e8 75 fe ff ff       	call   c001241b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	89 c2                	mov    edx,eax
c00125ab:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00125ae:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00125b1:	c1 f8 10             	sar    eax,0x10
c00125b4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00125b7:	55                   	push   ebp
c00125b8:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00125bc:	55                   	push   ebp
c00125bd:	52                   	push   edx
c00125be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00125c2:	56                   	push   esi
c00125c3:	e8 a9 fb ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125c8:	83 c4 0c             	add    esp,0xc
c00125cb:	6a 27                	push   0x27
c00125cd:	6a 00                	push   0x0
c00125cf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125d3:	51                   	push   ecx
c00125d4:	e8 17 df fe ff       	call   c00004f0 <memset>
c00125d9:	83 c4 0c             	add    esp,0xc
c00125dc:	6b c7 27             	imul   eax,edi,0x27
c00125df:	6a 27                	push   0x27
c00125e1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00125e8:	50                   	push   eax
c00125e9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125ed:	51                   	push   ecx
c00125ee:	e8 8d e0 fe ff       	call   c0000680 <strncpy>
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	55                   	push   ebp
c00125f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125fb:	52                   	push   edx
c00125fc:	56                   	push   esi
c00125fd:	e8 93 fc ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012602:	eb 19                	jmp    c001261d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012604:	85 d2                	test   edx,edx
c0012606:	74 18                	je     c0012620 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012608:	51                   	push   ecx
c0012609:	51                   	push   ecx
c001260a:	52                   	push   edx
c001260b:	56                   	push   esi
c001260c:	e8 c0 fc ff ff       	call   c00122d1 <CmFreeExtent(Reghive_Tag*, int)>
c0012611:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012615:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012619:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	47                   	inc    edi
c0012621:	83 c3 03             	add    ebx,0x3
c0012624:	83 ff 07             	cmp    edi,0x7
c0012627:	0f 85 43 ff ff ff    	jne    c0012570 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001262d:	50                   	push   eax
c001262e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012632:	50                   	push   eax
c0012633:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001263a:	56                   	push   esi
c001263b:	e8 55 fc ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012640:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012646:	5b                   	pop    ebx
c0012647:	5e                   	pop    esi
c0012648:	5f                   	pop    edi
c0012649:	5d                   	pop    ebp
c001264a:	c3                   	ret    

c001264b <CmGetMatch(char*, char*, bool, bool*)>:
c001264b:	56                   	push   esi
c001264c:	53                   	push   ebx
c001264d:	50                   	push   eax
c001264e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012652:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012657:	74 25                	je     c001267e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012659:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001265c:	31 db                	xor    ebx,ebx
c001265e:	50                   	push   eax
c001265f:	50                   	push   eax
c0012660:	8d 04 9d 40 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd5c0]
c0012667:	50                   	push   eax
c0012668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001266c:	e8 df e0 fe ff       	call   c0000750 <strcmp>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	85 c0                	test   eax,eax
c0012676:	74 2e                	je     c00126a6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012678:	43                   	inc    ebx
c0012679:	83 fb 3f             	cmp    ebx,0x3f
c001267c:	75 e0                	jne    c001265e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001267e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012681:	31 db                	xor    ebx,ebx
c0012683:	8d 04 9d 40 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd5c0]
c001268a:	51                   	push   ecx
c001268b:	51                   	push   ecx
c001268c:	50                   	push   eax
c001268d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012691:	e8 ba e0 fe ff       	call   c0000750 <strcmp>
c0012696:	83 c4 10             	add    esp,0x10
c0012699:	85 c0                	test   eax,eax
c001269b:	74 09                	je     c00126a6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001269d:	43                   	inc    ebx
c001269e:	83 fb 3f             	cmp    ebx,0x3f
c00126a1:	75 e0                	jne    c0012683 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00126a3:	83 cb ff             	or     ebx,0xffffffff
c00126a6:	89 d8                	mov    eax,ebx
c00126a8:	5a                   	pop    edx
c00126a9:	5b                   	pop    ebx
c00126aa:	5e                   	pop    esi
c00126ab:	c3                   	ret    

c00126ac <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00126ac:	55                   	push   ebp
c00126ad:	31 c0                	xor    eax,eax
c00126af:	57                   	push   edi
c00126b0:	56                   	push   esi
c00126b1:	53                   	push   ebx
c00126b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00126b6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00126c0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00126c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126c7:	83 fd 1f             	cmp    ebp,0x1f
c00126ca:	7f 0b                	jg     c00126d7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00126cc:	0f b6 c2             	movzx  eax,dl
c00126cf:	d3 e0                	shl    eax,cl
c00126d1:	09 07                	or     DWORD PTR [edi],eax
c00126d3:	b0 01                	mov    al,0x1
c00126d5:	01 33                	add    DWORD PTR [ebx],esi
c00126d7:	5b                   	pop    ebx
c00126d8:	5e                   	pop    esi
c00126d9:	5f                   	pop    edi
c00126da:	5d                   	pop    ebp
c00126db:	c3                   	ret    

c00126dc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00126dc:	57                   	push   edi
c00126dd:	56                   	push   esi
c00126de:	53                   	push   ebx
c00126df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00126e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126e7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00126eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00126ef:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00126f1:	7c 17                	jl     c001270a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00126f3:	8b 17                	mov    edx,DWORD PTR [edi]
c00126f5:	b8 01 00 00 00       	mov    eax,0x1
c00126fa:	d3 e0                	shl    eax,cl
c00126fc:	48                   	dec    eax
c00126fd:	21 d0                	and    eax,edx
c00126ff:	d3 ea                	shr    edx,cl
c0012701:	89 17                	mov    DWORD PTR [edi],edx
c0012703:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012705:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012708:	eb 05                	jmp    c001270f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001270a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001270d:	31 c0                	xor    eax,eax
c001270f:	5b                   	pop    ebx
c0012710:	5e                   	pop    esi
c0012711:	5f                   	pop    edi
c0012712:	c3                   	ret    

c0012713 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012713:	83 ec 40             	sub    esp,0x40
c0012716:	8d 44 24 09          	lea    eax,[esp+0x9]
c001271a:	50                   	push   eax
c001271b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001271f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012723:	e8 49 fa ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012728:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001272c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012730:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012734:	89 10                	mov    DWORD PTR [eax],edx
c0012736:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012739:	83 c4 4c             	add    esp,0x4c
c001273c:	c3                   	ret    

c001273d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001273d:	55                   	push   ebp
c001273e:	57                   	push   edi
c001273f:	56                   	push   esi
c0012740:	53                   	push   ebx
c0012741:	83 ec 40             	sub    esp,0x40
c0012744:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012748:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001274c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012750:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012754:	53                   	push   ebx
c0012755:	56                   	push   esi
c0012756:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001275a:	e8 12 fa ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001275f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012763:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012767:	83 c4 0c             	add    esp,0xc
c001276a:	53                   	push   ebx
c001276b:	56                   	push   esi
c001276c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012770:	e8 20 fb ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012775:	83 c4 4c             	add    esp,0x4c
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	5d                   	pop    ebp
c001277c:	c3                   	ret    

c001277d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001277d:	55                   	push   ebp
c001277e:	57                   	push   edi
c001277f:	56                   	push   esi
c0012780:	31 f6                	xor    esi,esi
c0012782:	53                   	push   ebx
c0012783:	31 db                	xor    ebx,ebx
c0012785:	83 ec 40             	sub    esp,0x40
c0012788:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012790:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012798:	6a 12                	push   0x12
c001279a:	68 ee 00 00 00       	push   0xee
c001279f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00127a3:	e8 48 dd fe ff       	call   c00004f0 <memset>
c00127a8:	83 c4 10             	add    esp,0x10
c00127ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00127af:	6a 08                	push   0x8
c00127b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127b5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00127b9:	50                   	push   eax
c00127ba:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00127be:	55                   	push   ebp
c00127bf:	57                   	push   edi
c00127c0:	e8 e7 fe ff ff       	call   c00126ac <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00127cc:	50                   	push   eax
c00127cd:	6a 06                	push   0x6
c00127cf:	55                   	push   ebp
c00127d0:	57                   	push   edi
c00127d1:	e8 06 ff ff ff       	call   c00126dc <CmGetShift(unsigned int*, int*, int, bool*)>
c00127d6:	83 c4 10             	add    esp,0x10
c00127d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127de:	74 07                	je     c00127e7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00127e0:	46                   	inc    esi
c00127e1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00127e5:	eb e1                	jmp    c00127c8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00127e7:	43                   	inc    ebx
c00127e8:	83 fb 12             	cmp    ebx,0x12
c00127eb:	75 c2                	jne    c00127af <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00127ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127f1:	31 db                	xor    ebx,ebx
c00127f3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00127f6:	50                   	push   eax
c00127f7:	50                   	push   eax
c00127f8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00127fd:	43                   	inc    ebx
c00127fe:	8d 04 85 40 2a 02 c0 	lea    eax,[eax*4-0x3ffdd5c0]
c0012805:	50                   	push   eax
c0012806:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001280a:	e8 31 e0 fe ff       	call   c0000840 <strcat>
c001280f:	83 c4 10             	add    esp,0x10
c0012812:	83 fb 18             	cmp    ebx,0x18
c0012815:	75 df                	jne    c00127f6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012817:	83 c4 3c             	add    esp,0x3c
c001281a:	31 c0                	xor    eax,eax
c001281c:	5b                   	pop    ebx
c001281d:	5e                   	pop    esi
c001281e:	5f                   	pop    edi
c001281f:	5d                   	pop    ebp
c0012820:	c3                   	ret    

c0012821 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012821:	83 ec 40             	sub    esp,0x40
c0012824:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012828:	50                   	push   eax
c0012829:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001282d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012831:	e8 3b f9 ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012836:	58                   	pop    eax
c0012837:	5a                   	pop    edx
c0012838:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001283c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012840:	50                   	push   eax
c0012841:	e8 37 ff ff ff       	call   c001277d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012846:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001284b:	83 c4 4c             	add    esp,0x4c
c001284e:	c3                   	ret    

c001284f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001284f:	55                   	push   ebp
c0012850:	57                   	push   edi
c0012851:	56                   	push   esi
c0012852:	53                   	push   ebx
c0012853:	31 db                	xor    ebx,ebx
c0012855:	83 ec 70             	sub    esp,0x70
c0012858:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001285f:	6a 30                	push   0x30
c0012861:	6a 00                	push   0x0
c0012863:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012867:	56                   	push   esi
c0012868:	e8 83 dc fe ff       	call   c00004f0 <memset>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	83 ec 0c             	sub    esp,0xc
c0012873:	57                   	push   edi
c0012874:	e8 f7 dc fe ff       	call   c0000570 <strlen>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	39 d8                	cmp    eax,ebx
c001287e:	76 16                	jbe    c0012896 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012887:	50                   	push   eax
c0012888:	e8 a3 e0 fe ff       	call   c0000930 <toupper>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012893:	43                   	inc    ebx
c0012894:	eb da                	jmp    c0012870 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012896:	31 f6                	xor    esi,esi
c0012898:	52                   	push   edx
c0012899:	31 ff                	xor    edi,edi
c001289b:	6a 18                	push   0x18
c001289d:	6a 3f                	push   0x3f
c001289f:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128a3:	50                   	push   eax
c00128a4:	e8 47 dc fe ff       	call   c00004f0 <memset>
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00128b0:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00128b4:	84 c0                	test   al,al
c00128b6:	0f 84 b0 00 00 00    	je     c001296c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00128bc:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00128c0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00128c5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00128c9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00128ce:	8d 6e 01             	lea    ebp,[esi+0x1]
c00128d1:	83 ec 0c             	sub    esp,0xc
c00128d4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00128d8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00128dc:	53                   	push   ebx
c00128dd:	e8 8e dc fe ff       	call   c0000570 <strlen>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	85 c0                	test   eax,eax
c00128e7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00128eb:	74 0b                	je     c00128f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00128ed:	50                   	push   eax
c00128ee:	6a 01                	push   0x1
c00128f0:	53                   	push   ebx
c00128f1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00128f5:	50                   	push   eax
c00128f6:	eb 0a                	jmp    c0012902 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00128f8:	50                   	push   eax
c00128f9:	6a 00                	push   0x0
c00128fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00128ff:	50                   	push   eax
c0012900:	6a 00                	push   0x0
c0012902:	e8 44 fd ff ff       	call   c001264b <CmGetMatch(char*, char*, bool, bool*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	83 f8 ff             	cmp    eax,0xffffffff
c001290d:	75 1a                	jne    c0012929 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001290f:	83 ec 0c             	sub    esp,0xc
c0012912:	68 b5 15 02 c0       	push   0xc00215b5
c0012917:	e8 9d e2 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	b8 02 00 00 00       	mov    eax,0x2
c0012924:	e9 bc 00 00 00       	jmp    c00129e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012929:	83 ff 18             	cmp    edi,0x18
c001292c:	75 1a                	jne    c0012948 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001292e:	83 ec 0c             	sub    esp,0xc
c0012931:	68 ca 15 02 c0       	push   0xc00215ca
c0012936:	e8 7e e2 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	b8 01 00 00 00       	mov    eax,0x1
c0012943:	e9 9d 00 00 00       	jmp    c00129e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012948:	47                   	inc    edi
c0012949:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001294e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012952:	74 02                	je     c0012956 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012954:	89 ee                	mov    esi,ebp
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	53                   	push   ebx
c001295a:	e8 11 dc fe ff       	call   c0000570 <strlen>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	85 c0                	test   eax,eax
c0012964:	74 06                	je     c001296c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012966:	46                   	inc    esi
c0012967:	e9 40 ff ff ff       	jmp    c00128ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001296c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012974:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001297c:	31 f6                	xor    esi,esi
c001297e:	50                   	push   eax
c001297f:	31 ff                	xor    edi,edi
c0012981:	6a 12                	push   0x12
c0012983:	68 ee 00 00 00       	push   0xee
c0012988:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001298f:	e8 5c db fe ff       	call   c00004f0 <memset>
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	83 fe 17             	cmp    esi,0x17
c001299a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001299e:	7e 26                	jle    c00129c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00129a0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00129a4:	50                   	push   eax
c00129a5:	6a 08                	push   0x8
c00129a7:	55                   	push   ebp
c00129a8:	53                   	push   ebx
c00129a9:	e8 2e fd ff ff       	call   c00126dc <CmGetShift(unsigned int*, int*, int, bool*)>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00129b6:	74 26                	je     c00129de <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00129b8:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00129bf:	4e                   	dec    esi
c00129c0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00129c3:	47                   	inc    edi
c00129c4:	eb 1c                	jmp    c00129e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00129c6:	6a 06                	push   0x6
c00129c8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00129cd:	50                   	push   eax
c00129ce:	55                   	push   ebp
c00129cf:	53                   	push   ebx
c00129d0:	e8 d7 fc ff ff       	call   c00126ac <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	84 c0                	test   al,al
c00129da:	75 06                	jne    c00129e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00129dc:	eb c2                	jmp    c00129a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00129de:	31 c0                	xor    eax,eax
c00129e0:	eb 03                	jmp    c00129e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00129e2:	46                   	inc    esi
c00129e3:	eb b2                	jmp    c0012997 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00129e5:	83 c4 6c             	add    esp,0x6c
c00129e8:	5b                   	pop    ebx
c00129e9:	5e                   	pop    esi
c00129ea:	5f                   	pop    edi
c00129eb:	5d                   	pop    ebp
c00129ec:	c3                   	ret    

c00129ed <CmCreateString(Reghive_Tag*, int, char const*)>:
c00129ed:	53                   	push   ebx
c00129ee:	83 ec 3c             	sub    esp,0x3c
c00129f1:	6a 2b                	push   0x2b
c00129f3:	6a 00                	push   0x0
c00129f5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00129f9:	53                   	push   ebx
c00129fa:	e8 f1 da fe ff       	call   c00004f0 <memset>
c00129ff:	58                   	pop    eax
c0012a00:	5a                   	pop    edx
c0012a01:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a05:	50                   	push   eax
c0012a06:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a0a:	e8 40 fe ff ff       	call   c001284f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a0f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012a14:	83 c4 0c             	add    esp,0xc
c0012a17:	6a 15                	push   0x15
c0012a19:	6a 00                	push   0x0
c0012a1b:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012a1f:	50                   	push   eax
c0012a20:	e8 cb da fe ff       	call   c00004f0 <memset>
c0012a25:	53                   	push   ebx
c0012a26:	6a 00                	push   0x0
c0012a28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a2c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a30:	e8 e6 f9 ff ff       	call   c001241b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a35:	83 c4 58             	add    esp,0x58
c0012a38:	5b                   	pop    ebx
c0012a39:	c3                   	ret    

c0012a3a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012a3a:	56                   	push   esi
c0012a3b:	53                   	push   ebx
c0012a3c:	83 ec 48             	sub    esp,0x48
c0012a3f:	6a 12                	push   0x12
c0012a41:	68 ff 00 00 00       	push   0xff
c0012a46:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012a4a:	56                   	push   esi
c0012a4b:	e8 a0 da fe ff       	call   c00004f0 <memset>
c0012a50:	5a                   	pop    edx
c0012a51:	59                   	pop    ecx
c0012a52:	56                   	push   esi
c0012a53:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012a57:	e8 f3 fd ff ff       	call   c001284f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a5c:	83 c4 10             	add    esp,0x10
c0012a5f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012a63:	85 db                	test   ebx,ebx
c0012a65:	74 42                	je     c0012aa9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012a67:	50                   	push   eax
c0012a68:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012a6c:	50                   	push   eax
c0012a6d:	53                   	push   ebx
c0012a6e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a72:	e8 fa f6 ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a77:	83 c4 0c             	add    esp,0xc
c0012a7a:	6a 12                	push   0x12
c0012a7c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012a80:	50                   	push   eax
c0012a81:	56                   	push   esi
c0012a82:	e8 f9 d8 fe ff       	call   c0000380 <memcmp>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	85 c0                	test   eax,eax
c0012a8c:	74 1e                	je     c0012aac <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012a8e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012a93:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012a98:	c1 e3 08             	shl    ebx,0x8
c0012a9b:	09 d8                	or     eax,ebx
c0012a9d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012aa2:	c1 e3 10             	shl    ebx,0x10
c0012aa5:	09 c3                	or     ebx,eax
c0012aa7:	eb ba                	jmp    c0012a63 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012aa9:	83 cb ff             	or     ebx,0xffffffff
c0012aac:	89 d8                	mov    eax,ebx
c0012aae:	83 c4 44             	add    esp,0x44
c0012ab1:	5b                   	pop    ebx
c0012ab2:	5e                   	pop    esi
c0012ab3:	c3                   	ret    

c0012ab4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012ab4:	57                   	push   edi
c0012ab5:	56                   	push   esi
c0012ab6:	53                   	push   ebx
c0012ab7:	83 ec 34             	sub    esp,0x34
c0012aba:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012abe:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012ac2:	6a 2b                	push   0x2b
c0012ac4:	6a 00                	push   0x0
c0012ac6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012aca:	53                   	push   ebx
c0012acb:	e8 20 da fe ff       	call   c00004f0 <memset>
c0012ad0:	58                   	pop    eax
c0012ad1:	5a                   	pop    edx
c0012ad2:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012ad6:	50                   	push   eax
c0012ad7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012adb:	e8 6f fd ff ff       	call   c001284f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012ae0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012ae4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012ae8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012aec:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012af0:	53                   	push   ebx
c0012af1:	6a 00                	push   0x0
c0012af3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012af7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012afb:	e8 1b f9 ff ff       	call   c001241b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b00:	83 c4 50             	add    esp,0x50
c0012b03:	5b                   	pop    ebx
c0012b04:	5e                   	pop    esi
c0012b05:	5f                   	pop    edi
c0012b06:	c3                   	ret    

c0012b07 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012b07:	55                   	push   ebp
c0012b08:	57                   	push   edi
c0012b09:	56                   	push   esi
c0012b0a:	53                   	push   ebx
c0012b0b:	83 ec 40             	sub    esp,0x40
c0012b0e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012b12:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012b16:	6a 2b                	push   0x2b
c0012b18:	6a 00                	push   0x0
c0012b1a:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012b1e:	56                   	push   esi
c0012b1f:	e8 cc d9 fe ff       	call   c00004f0 <memset>
c0012b24:	5f                   	pop    edi
c0012b25:	89 ef                	mov    edi,ebp
c0012b27:	58                   	pop    eax
c0012b28:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012b2c:	50                   	push   eax
c0012b2d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012b31:	e8 19 fd ff ff       	call   c001284f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b36:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012b3b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012b40:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012b45:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	85 ed                	test   ebp,ebp
c0012b4f:	74 14                	je     c0012b65 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b51:	51                   	push   ecx
c0012b52:	51                   	push   ecx
c0012b53:	57                   	push   edi
c0012b54:	53                   	push   ebx
c0012b55:	e8 09 f7 ff ff       	call   c0012263 <CmGetNext(Reghive_Tag*, int)>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	85 c0                	test   eax,eax
c0012b5f:	74 04                	je     c0012b65 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b61:	89 c7                	mov    edi,eax
c0012b63:	eb e8                	jmp    c0012b4d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012b65:	56                   	push   esi
c0012b66:	6a 00                	push   0x0
c0012b68:	57                   	push   edi
c0012b69:	53                   	push   ebx
c0012b6a:	e8 ac f8 ff ff       	call   c001241b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b6f:	83 c4 0c             	add    esp,0xc
c0012b72:	89 c7                	mov    edi,eax
c0012b74:	56                   	push   esi
c0012b75:	50                   	push   eax
c0012b76:	53                   	push   ebx
c0012b77:	e8 f5 f5 ff ff       	call   c0012171 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b7c:	58                   	pop    eax
c0012b7d:	5a                   	pop    edx
c0012b7e:	6a 6c                	push   0x6c
c0012b80:	6a 00                	push   0x0
c0012b82:	6a 00                	push   0x0
c0012b84:	68 db 15 02 c0       	push   0xc00215db
c0012b89:	57                   	push   edi
c0012b8a:	53                   	push   ebx
c0012b8b:	e8 24 ff ff ff       	call   c0012ab4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012b90:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012b94:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012b98:	c1 e8 10             	shr    eax,0x10
c0012b9b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012b9f:	83 c4 1c             	add    esp,0x1c
c0012ba2:	56                   	push   esi
c0012ba3:	57                   	push   edi
c0012ba4:	53                   	push   ebx
c0012ba5:	e8 eb f6 ff ff       	call   c0012295 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012baa:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012baf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012bb4:	c1 e0 08             	shl    eax,0x8
c0012bb7:	09 c2                	or     edx,eax
c0012bb9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012bbe:	83 c4 4c             	add    esp,0x4c
c0012bc1:	c1 e0 10             	shl    eax,0x10
c0012bc4:	5b                   	pop    ebx
c0012bc5:	09 d0                	or     eax,edx
c0012bc7:	5e                   	pop    esi
c0012bc8:	5f                   	pop    edi
c0012bc9:	5d                   	pop    ebp
c0012bca:	c3                   	ret    

c0012bcb <zStrtok(char*, char const*)>:
c0012bcb:	55                   	push   ebp
c0012bcc:	57                   	push   edi
c0012bcd:	56                   	push   esi
c0012bce:	53                   	push   ebx
c0012bcf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bd7:	85 db                	test   ebx,ebx
c0012bd9:	74 2f                	je     c0012c0a <zStrtok(char*, char const*)+0x3f>
c0012bdb:	85 c0                	test   eax,eax
c0012bdd:	75 09                	jne    c0012be8 <zStrtok(char*, char const*)+0x1d>
c0012bdf:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012be4:	85 c0                	test   eax,eax
c0012be6:	74 50                	je     c0012c38 <zStrtok(char*, char const*)+0x6d>
c0012be8:	31 c9                	xor    ecx,ecx
c0012bea:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012bee:	74 03                	je     c0012bf3 <zStrtok(char*, char const*)+0x28>
c0012bf0:	41                   	inc    ecx
c0012bf1:	eb f7                	jmp    c0012bea <zStrtok(char*, char const*)+0x1f>
c0012bf3:	31 d2                	xor    edx,edx
c0012bf5:	39 ca                	cmp    edx,ecx
c0012bf7:	74 15                	je     c0012c0e <zStrtok(char*, char const*)+0x43>
c0012bf9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012bfd:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012c00:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012c03:	39 ee                	cmp    esi,ebp
c0012c05:	74 13                	je     c0012c1a <zStrtok(char*, char const*)+0x4f>
c0012c07:	42                   	inc    edx
c0012c08:	eb eb                	jmp    c0012bf5 <zStrtok(char*, char const*)+0x2a>
c0012c0a:	31 c0                	xor    eax,eax
c0012c0c:	eb 2a                	jmp    c0012c38 <zStrtok(char*, char const*)+0x6d>
c0012c0e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012c18:	eb 1e                	jmp    c0012c38 <zStrtok(char*, char const*)+0x6d>
c0012c1a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c1d:	39 ce                	cmp    esi,ecx
c0012c1f:	75 0a                	jne    c0012c2b <zStrtok(char*, char const*)+0x60>
c0012c21:	40                   	inc    eax
c0012c22:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012c27:	89 d8                	mov    eax,ebx
c0012c29:	eb 0d                	jmp    c0012c38 <zStrtok(char*, char const*)+0x6d>
c0012c2b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012c2f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012c32:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012c38:	5b                   	pop    ebx
c0012c39:	5e                   	pop    esi
c0012c3a:	5f                   	pop    edi
c0012c3b:	5d                   	pop    ebp
c0012c3c:	c3                   	ret    

c0012c3d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012c3d:	57                   	push   edi
c0012c3e:	56                   	push   esi
c0012c3f:	53                   	push   ebx
c0012c40:	81 ec 08 01 00 00    	sub    esp,0x108
c0012c46:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012c4d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012c54:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012c58:	53                   	push   ebx
c0012c59:	e8 e2 d9 fe ff       	call   c0000640 <strcpy>
c0012c5e:	59                   	pop    ecx
c0012c5f:	5e                   	pop    esi
c0012c60:	68 3f 19 02 c0       	push   0xc002193f
c0012c65:	53                   	push   ebx
c0012c66:	bb 01 00 00 00       	mov    ebx,0x1
c0012c6b:	e8 5b ff ff ff       	call   c0012bcb <zStrtok(char*, char const*)>
c0012c70:	83 c4 10             	add    esp,0x10
c0012c73:	85 c0                	test   eax,eax
c0012c75:	74 3b                	je     c0012cb2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c77:	52                   	push   edx
c0012c78:	50                   	push   eax
c0012c79:	6a 01                	push   0x1
c0012c7b:	57                   	push   edi
c0012c7c:	e8 b9 fd ff ff       	call   c0012a3a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012c81:	59                   	pop    ecx
c0012c82:	89 c3                	mov    ebx,eax
c0012c84:	5e                   	pop    esi
c0012c85:	68 3f 19 02 c0       	push   0xc002193f
c0012c8a:	6a 00                	push   0x0
c0012c8c:	e8 3a ff ff ff       	call   c0012bcb <zStrtok(char*, char const*)>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	89 c6                	mov    esi,eax
c0012c96:	85 c0                	test   eax,eax
c0012c98:	74 18                	je     c0012cb2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c9a:	52                   	push   edx
c0012c9b:	52                   	push   edx
c0012c9c:	53                   	push   ebx
c0012c9d:	57                   	push   edi
c0012c9e:	e8 81 f5 ff ff       	call   c0012224 <CmEnterDirectory(Reghive_Tag*, int)>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	89 c3                	mov    ebx,eax
c0012ca8:	83 f8 ff             	cmp    eax,0xffffffff
c0012cab:	74 05                	je     c0012cb2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012cad:	50                   	push   eax
c0012cae:	56                   	push   esi
c0012caf:	53                   	push   ebx
c0012cb0:	eb c9                	jmp    c0012c7b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012cb2:	81 c4 00 01 00 00    	add    esp,0x100
c0012cb8:	89 d8                	mov    eax,ebx
c0012cba:	5b                   	pop    ebx
c0012cbb:	5e                   	pop    esi
c0012cbc:	5f                   	pop    edi
c0012cbd:	c3                   	ret    

c0012cbe <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012cbe:	55                   	push   ebp
c0012cbf:	57                   	push   edi
c0012cc0:	56                   	push   esi
c0012cc1:	53                   	push   ebx
c0012cc2:	83 ec 5c             	sub    esp,0x5c
c0012cc5:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012cc9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012ccd:	85 db                	test   ebx,ebx
c0012ccf:	0f 8e 84 00 00 00    	jle    c0012d59 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012cd5:	31 ed                	xor    ebp,ebp
c0012cd7:	57                   	push   edi
c0012cd8:	6a 32                	push   0x32
c0012cda:	6a 00                	push   0x0
c0012cdc:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012ce0:	57                   	push   edi
c0012ce1:	e8 0a d8 fe ff       	call   c00004f0 <memset>
c0012ce6:	83 c4 0c             	add    esp,0xc
c0012ce9:	57                   	push   edi
c0012cea:	53                   	push   ebx
c0012ceb:	56                   	push   esi
c0012cec:	e8 30 fb ff ff       	call   c0012821 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cf5:	83 c4 10             	add    esp,0x10
c0012cf8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012cfc:	7d 13                	jge    c0012d11 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	45                   	inc    ebp
c0012d02:	68 e3 1c 02 c0       	push   0xc0021ce3
c0012d07:	e8 2d 7c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	eb e7                	jmp    c0012cf8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012d11:	51                   	push   ecx
c0012d12:	57                   	push   edi
c0012d13:	53                   	push   ebx
c0012d14:	68 e1 15 02 c0       	push   0xc00215e1
c0012d19:	e8 1b 7c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012d1e:	83 c4 10             	add    esp,0x10
c0012d21:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012d26:	75 1e                	jne    c0012d46 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012d28:	52                   	push   edx
c0012d29:	52                   	push   edx
c0012d2a:	53                   	push   ebx
c0012d2b:	56                   	push   esi
c0012d2c:	e8 f3 f4 ff ff       	call   c0012224 <CmEnterDirectory(Reghive_Tag*, int)>
c0012d31:	83 c4 0c             	add    esp,0xc
c0012d34:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012d38:	8d 51 04             	lea    edx,[ecx+0x4]
c0012d3b:	52                   	push   edx
c0012d3c:	50                   	push   eax
c0012d3d:	56                   	push   esi
c0012d3e:	e8 7b ff ff ff       	call   c0012cbe <CmDisplayTree(Reghive_Tag*, int, int)>
c0012d43:	83 c4 10             	add    esp,0x10
c0012d46:	50                   	push   eax
c0012d47:	50                   	push   eax
c0012d48:	53                   	push   ebx
c0012d49:	56                   	push   esi
c0012d4a:	e8 14 f5 ff ff       	call   c0012263 <CmGetNext(Reghive_Tag*, int)>
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	89 c3                	mov    ebx,eax
c0012d54:	e9 74 ff ff ff       	jmp    c0012ccd <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012d59:	83 c4 5c             	add    esp,0x5c
c0012d5c:	5b                   	pop    ebx
c0012d5d:	5e                   	pop    esi
c0012d5e:	5f                   	pop    edi
c0012d5f:	5d                   	pop    ebp
c0012d60:	c3                   	ret    

c0012d61 <CmSplitFinalSlashInPlace(char*)>:
c0012d61:	53                   	push   ebx
c0012d62:	83 ec 14             	sub    esp,0x14
c0012d65:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012d69:	53                   	push   ebx
c0012d6a:	e8 01 d8 fe ff       	call   c0000570 <strlen>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	48                   	dec    eax
c0012d73:	85 c0                	test   eax,eax
c0012d75:	74 15                	je     c0012d8c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012d77:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012d7a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d7e:	75 09                	jne    c0012d89 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012d80:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012d83:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012d87:	eb 05                	jmp    c0012d8e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012d89:	48                   	dec    eax
c0012d8a:	eb e7                	jmp    c0012d73 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012d8c:	31 c0                	xor    eax,eax
c0012d8e:	83 c4 08             	add    esp,0x8
c0012d91:	5b                   	pop    ebx
c0012d92:	c3                   	ret    

c0012d93 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012d93:	55                   	push   ebp
c0012d94:	57                   	push   edi
c0012d95:	56                   	push   esi
c0012d96:	53                   	push   ebx
c0012d97:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012d9d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012da4:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012da6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012da9:	80 fa 40             	cmp    dl,0x40
c0012dac:	75 1c                	jne    c0012dca <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012dae:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012db1:	85 c9                	test   ecx,ecx
c0012db3:	0f 84 09 01 00 00    	je     c0012ec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012db9:	8d 43 01             	lea    eax,[ebx+0x1]
c0012dbc:	83 f9 3a             	cmp    ecx,0x3a
c0012dbf:	74 04                	je     c0012dc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012dc1:	89 c3                	mov    ebx,eax
c0012dc3:	eb e9                	jmp    c0012dae <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012dc5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012dc8:	89 c3                	mov    ebx,eax
c0012dca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012dce:	50                   	push   eax
c0012dcf:	6a 40                	push   0x40
c0012dd1:	6a 00                	push   0x0
c0012dd3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dd7:	50                   	push   eax
c0012dd8:	e8 13 d7 fe ff       	call   c00004f0 <memset>
c0012ddd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012de4:	31 c0                	xor    eax,eax
c0012de6:	83 c4 10             	add    esp,0x10
c0012de9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012dee:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012df1:	89 d1                	mov    ecx,edx
c0012df3:	85 d2                	test   edx,edx
c0012df5:	0f 84 c7 00 00 00    	je     c0012ec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012dfb:	3d c7 00 00 00       	cmp    eax,0xc7
c0012e00:	0f 8f bc 00 00 00    	jg     c0012ec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e06:	83 fa 0a             	cmp    edx,0xa
c0012e09:	0f 85 a4 00 00 00    	jne    c0012eb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012e0f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012e14:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012e19:	89 c8                	mov    eax,ecx
c0012e1b:	a8 df                	test   al,0xdf
c0012e1d:	0f 94 c2             	sete   dl
c0012e20:	83 f9 23             	cmp    ecx,0x23
c0012e23:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e28:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012e2c:	80 e2 01             	and    dl,0x1
c0012e2f:	75 4a                	jne    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e31:	83 e8 09             	sub    eax,0x9
c0012e34:	3c 01                	cmp    al,0x1
c0012e36:	76 43                	jbe    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e38:	83 f9 5b             	cmp    ecx,0x5b
c0012e3b:	75 42                	jne    c0012e7f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012e3d:	83 fe 40             	cmp    esi,0x40
c0012e40:	75 39                	jne    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e42:	83 ec 0c             	sub    esp,0xc
c0012e45:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012e49:	52                   	push   edx
c0012e4a:	e8 21 d7 fe ff       	call   c0000570 <strlen>
c0012e4f:	83 c4 10             	add    esp,0x10
c0012e52:	83 f8 3f             	cmp    eax,0x3f
c0012e55:	77 6b                	ja     c0012ec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e57:	50                   	push   eax
c0012e58:	50                   	push   eax
c0012e59:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012e5d:	52                   	push   edx
c0012e5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e62:	52                   	push   edx
c0012e63:	e8 d8 d7 fe ff       	call   c0000640 <strcpy>
c0012e68:	58                   	pop    eax
c0012e69:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e6d:	52                   	push   edx
c0012e6e:	e8 fd d6 fe ff       	call   c0000570 <strlen>
c0012e73:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012e78:	83 c4 10             	add    esp,0x10
c0012e7b:	31 d2                	xor    edx,edx
c0012e7d:	eb 3b                	jmp    c0012eba <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012e7f:	83 fe 40             	cmp    esi,0x40
c0012e82:	74 06                	je     c0012e8a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012e84:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012e88:	eb 20                	jmp    c0012eaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012e8a:	50                   	push   eax
c0012e8b:	50                   	push   eax
c0012e8c:	55                   	push   ebp
c0012e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e91:	50                   	push   eax
c0012e92:	e8 b9 d8 fe ff       	call   c0000750 <strcmp>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	85 c0                	test   eax,eax
c0012e9c:	75 dd                	jne    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e9e:	eb e4                	jmp    c0012e84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0012ea3:	83 f9 3d             	cmp    ecx,0x3d
c0012ea6:	74 1e                	je     c0012ec6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012ea8:	89 d0                	mov    eax,edx
c0012eaa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012ead:	85 c9                	test   ecx,ecx
c0012eaf:	75 ef                	jne    c0012ea0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012eb1:	eb 0f                	jmp    c0012ec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012eb3:	8d 50 01             	lea    edx,[eax+0x1]
c0012eb6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012eba:	47                   	inc    edi
c0012ebb:	89 d0                	mov    eax,edx
c0012ebd:	e9 2c ff ff ff       	jmp    c0012dee <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012ec2:	31 c0                	xor    eax,eax
c0012ec4:	eb 33                	jmp    c0012ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012ec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012eca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012ecd:	50                   	push   eax
c0012ece:	50                   	push   eax
c0012ecf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012ed3:	50                   	push   eax
c0012ed4:	53                   	push   ebx
c0012ed5:	e8 76 d8 fe ff       	call   c0000750 <strcmp>
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	85 c0                	test   eax,eax
c0012edf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ee3:	75 96                	jne    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ee5:	51                   	push   ecx
c0012ee6:	51                   	push   ecx
c0012ee7:	52                   	push   edx
c0012ee8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012eef:	e8 4c d7 fe ff       	call   c0000640 <strcpy>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	b0 01                	mov    al,0x1
c0012ef9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012eff:	5b                   	pop    ebx
c0012f00:	5e                   	pop    esi
c0012f01:	5f                   	pop    edi
c0012f02:	5d                   	pop    ebp
c0012f03:	c3                   	ret    

c0012f04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012f04:	57                   	push   edi
c0012f05:	56                   	push   esi
c0012f06:	53                   	push   ebx
c0012f07:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012f0d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012f14:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012f1b:	53                   	push   ebx
c0012f1c:	e8 4f d6 fe ff       	call   c0000570 <strlen>
c0012f21:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f24:	89 c7                	mov    edi,eax
c0012f26:	e8 45 d6 fe ff       	call   c0000570 <strlen>
c0012f2b:	83 c4 10             	add    esp,0x10
c0012f2e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012f32:	3d ff 00 00 00       	cmp    eax,0xff
c0012f37:	0f 87 d3 00 00 00    	ja     c0013010 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f3d:	57                   	push   edi
c0012f3e:	57                   	push   edi
c0012f3f:	56                   	push   esi
c0012f40:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012f44:	56                   	push   esi
c0012f45:	e8 f6 d6 fe ff       	call   c0000640 <strcpy>
c0012f4a:	58                   	pop    eax
c0012f4b:	5a                   	pop    edx
c0012f4c:	68 3f 19 02 c0       	push   0xc002193f
c0012f51:	56                   	push   esi
c0012f52:	e8 e9 d8 fe ff       	call   c0000840 <strcat>
c0012f57:	59                   	pop    ecx
c0012f58:	5f                   	pop    edi
c0012f59:	53                   	push   ebx
c0012f5a:	56                   	push   esi
c0012f5b:	e8 e0 d8 fe ff       	call   c0000840 <strcat>
c0012f60:	58                   	pop    eax
c0012f61:	5a                   	pop    edx
c0012f62:	68 eb 15 02 c0       	push   0xc00215eb
c0012f67:	56                   	push   esi
c0012f68:	e8 d3 d8 fe ff       	call   c0000840 <strcat>
c0012f6d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f74:	e8 35 4b ff ff       	call   c0007aae <malloc>
c0012f79:	83 c4 0c             	add    esp,0xc
c0012f7c:	89 c3                	mov    ebx,eax
c0012f7e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012f84:	56                   	push   esi
c0012f85:	50                   	push   eax
c0012f86:	e8 05 82 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0012f8b:	83 c4 10             	add    esp,0x10
c0012f8e:	85 db                	test   ebx,ebx
c0012f90:	74 7e                	je     c0013010 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f92:	51                   	push   ecx
c0012f93:	51                   	push   ecx
c0012f94:	6a 01                	push   0x1
c0012f96:	53                   	push   ebx
c0012f97:	e8 b0 82 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0012f9c:	83 c4 10             	add    esp,0x10
c0012f9f:	85 c0                	test   eax,eax
c0012fa1:	74 08                	je     c0012fab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012fa3:	83 ec 0c             	sub    esp,0xc
c0012fa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fa8:	53                   	push   ebx
c0012fa9:	eb 5f                	jmp    c001300a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012fab:	52                   	push   edx
c0012fac:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012fb0:	50                   	push   eax
c0012fb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fb5:	50                   	push   eax
c0012fb6:	53                   	push   ebx
c0012fb7:	e8 3c 85 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0012fbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	89 c1                	mov    ecx,eax
c0012fc5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012fc9:	74 31                	je     c0012ffc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fcb:	83 ec 0c             	sub    esp,0xc
c0012fce:	50                   	push   eax
c0012fcf:	e8 da 4a ff ff       	call   c0007aae <malloc>
c0012fd4:	89 c6                	mov    esi,eax
c0012fd6:	58                   	pop    eax
c0012fd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fd9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012fdd:	52                   	push   edx
c0012fde:	56                   	push   esi
c0012fdf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fe3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fe7:	53                   	push   ebx
c0012fe8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012feb:	83 c4 20             	add    esp,0x20
c0012fee:	85 c0                	test   eax,eax
c0012ff0:	75 0a                	jne    c0012ffc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012ff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ff6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012ffa:	74 18                	je     c0013014 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	53                   	push   ebx
c0013000:	e8 a5 82 ff ff       	call   c000b2aa <File::close()>
c0013005:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013007:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001300a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	31 c0                	xor    eax,eax
c0013012:	eb 3b                	jmp    c001304f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013014:	83 ec 0c             	sub    esp,0xc
c0013017:	53                   	push   ebx
c0013018:	e8 8d 82 ff ff       	call   c000b2aa <File::close()>
c001301d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001301f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013022:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013025:	83 c4 0c             	add    esp,0xc
c0013028:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001302f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013036:	56                   	push   esi
c0013037:	e8 57 fd ff ff       	call   c0012d93 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001303c:	89 34 24             	mov    DWORD PTR [esp],esi
c001303f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013043:	e8 76 4a ff ff       	call   c0007abe <free>
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001304f:	81 c4 20 01 00 00    	add    esp,0x120
c0013055:	5b                   	pop    ebx
c0013056:	5e                   	pop    esi
c0013057:	5f                   	pop    edi
c0013058:	c3                   	ret    

c0013059 <Reg::getLine(char*, char*, char*)>:
c0013059:	57                   	push   edi
c001305a:	56                   	push   esi
c001305b:	53                   	push   ebx
c001305c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013060:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013064:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013068:	57                   	push   edi
c0013069:	56                   	push   esi
c001306a:	53                   	push   ebx
c001306b:	68 f0 15 02 c0       	push   0xc00215f0
c0013070:	e8 8f fe ff ff       	call   c0012f04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	84 c0                	test   al,al
c001307a:	75 10                	jne    c001308c <Reg::getLine(char*, char*, char*)+0x33>
c001307c:	57                   	push   edi
c001307d:	56                   	push   esi
c001307e:	53                   	push   ebx
c001307f:	68 15 16 02 c0       	push   0xc0021615
c0013084:	e8 7b fe ff ff       	call   c0012f04 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	5b                   	pop    ebx
c001308d:	5e                   	pop    esi
c001308e:	5f                   	pop    edi
c001308f:	c3                   	ret    

c0013090 <Reg::readInt(char*, char*, int*)>:
c0013090:	55                   	push   ebp
c0013091:	57                   	push   edi
c0013092:	56                   	push   esi
c0013093:	53                   	push   ebx
c0013094:	81 ec f0 00 00 00    	sub    esp,0xf0
c001309a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001309e:	55                   	push   ebp
c001309f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00130a6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00130ad:	e8 a7 ff ff ff       	call   c0013059 <Reg::getLine(char*, char*, char*)>
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	84 c0                	test   al,al
c00130b7:	0f 84 b6 00 00 00    	je     c0013173 <Reg::readInt(char*, char*, int*)+0xe3>
c00130bd:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00130c2:	83 fa 2b             	cmp    edx,0x2b
c00130c5:	74 0c                	je     c00130d3 <Reg::readInt(char*, char*, int*)+0x43>
c00130c7:	83 fa 2d             	cmp    edx,0x2d
c00130ca:	75 0e                	jne    c00130da <Reg::readInt(char*, char*, int*)+0x4a>
c00130cc:	ba 01 00 00 00       	mov    edx,0x1
c00130d1:	eb 0b                	jmp    c00130de <Reg::readInt(char*, char*, int*)+0x4e>
c00130d3:	ba 01 00 00 00       	mov    edx,0x1
c00130d8:	eb 02                	jmp    c00130dc <Reg::readInt(char*, char*, int*)+0x4c>
c00130da:	31 d2                	xor    edx,edx
c00130dc:	31 c0                	xor    eax,eax
c00130de:	be 0a 00 00 00       	mov    esi,0xa
c00130e3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00130e8:	75 21                	jne    c001310b <Reg::readInt(char*, char*, int*)+0x7b>
c00130ea:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00130ef:	83 f9 78             	cmp    ecx,0x78
c00130f2:	75 0a                	jne    c00130fe <Reg::readInt(char*, char*, int*)+0x6e>
c00130f4:	83 c2 02             	add    edx,0x2
c00130f7:	be 10 00 00 00       	mov    esi,0x10
c00130fc:	eb 0d                	jmp    c001310b <Reg::readInt(char*, char*, int*)+0x7b>
c00130fe:	83 f9 62             	cmp    ecx,0x62
c0013101:	75 08                	jne    c001310b <Reg::readInt(char*, char*, int*)+0x7b>
c0013103:	83 c2 02             	add    edx,0x2
c0013106:	be 02 00 00 00       	mov    esi,0x2
c001310b:	01 d5                	add    ebp,edx
c001310d:	31 d2                	xor    edx,edx
c001310f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013113:	83 f9 0d             	cmp    ecx,0xd
c0013116:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001311a:	0f 94 c3             	sete   bl
c001311d:	85 c9                	test   ecx,ecx
c001311f:	89 df                	mov    edi,ebx
c0013121:	0f 94 c3             	sete   bl
c0013124:	09 df                	or     edi,ebx
c0013126:	89 fb                	mov    ebx,edi
c0013128:	83 e7 01             	and    edi,0x1
c001312b:	75 35                	jne    c0013162 <Reg::readInt(char*, char*, int*)+0xd2>
c001312d:	0f af d6             	imul   edx,esi
c0013130:	83 fe 10             	cmp    esi,0x10
c0013133:	75 26                	jne    c001315b <Reg::readInt(char*, char*, int*)+0xcb>
c0013135:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013139:	83 ef 41             	sub    edi,0x41
c001313c:	89 fb                	mov    ebx,edi
c001313e:	80 fb 05             	cmp    bl,0x5
c0013141:	77 06                	ja     c0013149 <Reg::readInt(char*, char*, int*)+0xb9>
c0013143:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013147:	eb 16                	jmp    c001315f <Reg::readInt(char*, char*, int*)+0xcf>
c0013149:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001314d:	83 eb 61             	sub    ebx,0x61
c0013150:	80 fb 05             	cmp    bl,0x5
c0013153:	77 06                	ja     c001315b <Reg::readInt(char*, char*, int*)+0xcb>
c0013155:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013159:	eb 04                	jmp    c001315f <Reg::readInt(char*, char*, int*)+0xcf>
c001315b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001315f:	45                   	inc    ebp
c0013160:	eb ad                	jmp    c001310f <Reg::readInt(char*, char*, int*)+0x7f>
c0013162:	84 c0                	test   al,al
c0013164:	74 02                	je     c0013168 <Reg::readInt(char*, char*, int*)+0xd8>
c0013166:	f7 da                	neg    edx
c0013168:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001316f:	89 10                	mov    DWORD PTR [eax],edx
c0013171:	88 d8                	mov    al,bl
c0013173:	81 c4 ec 00 00 00    	add    esp,0xec
c0013179:	5b                   	pop    ebx
c001317a:	5e                   	pop    esi
c001317b:	5f                   	pop    edi
c001317c:	5d                   	pop    ebp
c001317d:	c3                   	ret    

c001317e <Reg::readString(char*, char*, char*, int)>:
c001317e:	57                   	push   edi
c001317f:	56                   	push   esi
c0013180:	53                   	push   ebx
c0013181:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013187:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001318e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013192:	57                   	push   edi
c0013193:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001319a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00131a1:	e8 b3 fe ff ff       	call   c0013059 <Reg::getLine(char*, char*, char*)>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	89 c6                	mov    esi,eax
c00131ab:	84 c0                	test   al,al
c00131ad:	74 44                	je     c00131f3 <Reg::readString(char*, char*, char*, int)+0x75>
c00131af:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00131b6:	31 c0                	xor    eax,eax
c00131b8:	4a                   	dec    edx
c00131b9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00131bc:	84 c9                	test   cl,cl
c00131be:	74 0f                	je     c00131cf <Reg::readString(char*, char*, char*, int)+0x51>
c00131c0:	39 c2                	cmp    edx,eax
c00131c2:	7e 0b                	jle    c00131cf <Reg::readString(char*, char*, char*, int)+0x51>
c00131c4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00131c7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00131cc:	40                   	inc    eax
c00131cd:	eb ea                	jmp    c00131b9 <Reg::readString(char*, char*, char*, int)+0x3b>
c00131cf:	83 ec 0c             	sub    esp,0xc
c00131d2:	53                   	push   ebx
c00131d3:	e8 98 d3 fe ff       	call   c0000570 <strlen>
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00131e0:	75 11                	jne    c00131f3 <Reg::readString(char*, char*, char*, int)+0x75>
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	53                   	push   ebx
c00131e6:	e8 85 d3 fe ff       	call   c0000570 <strlen>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00131f3:	81 c4 d0 00 00 00    	add    esp,0xd0
c00131f9:	89 f0                	mov    eax,esi
c00131fb:	5b                   	pop    ebx
c00131fc:	5e                   	pop    esi
c00131fd:	5f                   	pop    edi
c00131fe:	c3                   	ret    

c00131ff <Reg::readBool(char*, char*, bool*)>:
c00131ff:	83 ec 20             	sub    esp,0x20
c0013202:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013206:	50                   	push   eax
c0013207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001320b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001320f:	e8 7c fe ff ff       	call   c0013090 <Reg::readInt(char*, char*, int*)>
c0013214:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013219:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001321d:	0f 95 02             	setne  BYTE PTR [edx]
c0013220:	83 c4 2c             	add    esp,0x2c
c0013223:	c3                   	ret    

c0013224 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013224:	53                   	push   ebx
c0013225:	83 ec 1c             	sub    esp,0x1c
c0013228:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001322c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013230:	50                   	push   eax
c0013231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013239:	e8 c1 ff ff ff       	call   c00131ff <Reg::readBool(char*, char*, bool*)>
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	84 c0                	test   al,al
c0013243:	74 04                	je     c0013249 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013245:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013249:	88 d8                	mov    al,bl
c001324b:	83 c4 18             	add    esp,0x18
c001324e:	5b                   	pop    ebx
c001324f:	c3                   	ret    

c0013250 <Reg::readIntWithDefault(char*, char*, int)>:
c0013250:	53                   	push   ebx
c0013251:	83 ec 1c             	sub    esp,0x1c
c0013254:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013258:	8d 44 24 10          	lea    eax,[esp+0x10]
c001325c:	50                   	push   eax
c001325d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013265:	e8 26 fe ff ff       	call   c0013090 <Reg::readInt(char*, char*, int*)>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	84 c0                	test   al,al
c001326f:	74 04                	je     c0013275 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013271:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013275:	89 d8                	mov    eax,ebx
c0013277:	83 c4 18             	add    esp,0x18
c001327a:	5b                   	pop    ebx
c001327b:	c3                   	ret    

c001327c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001327c:	57                   	push   edi
c001327d:	56                   	push   esi
c001327e:	56                   	push   esi
c001327f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013283:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013287:	56                   	push   esi
c0013288:	57                   	push   edi
c0013289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001328d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013291:	e8 e8 fe ff ff       	call   c001317e <Reg::readString(char*, char*, char*, int)>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	84 c0                	test   al,al
c001329b:	75 1a                	jne    c00132b7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001329d:	51                   	push   ecx
c001329e:	56                   	push   esi
c001329f:	6a 00                	push   0x0
c00132a1:	57                   	push   edi
c00132a2:	e8 49 d2 fe ff       	call   c00004f0 <memset>
c00132a7:	8d 4e ff             	lea    ecx,[esi-0x1]
c00132aa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00132b7:	89 f8                	mov    eax,edi
c00132b9:	5a                   	pop    edx
c00132ba:	5e                   	pop    esi
c00132bb:	5f                   	pop    edi
c00132bc:	c3                   	ret    

c00132bd <SysEject(regs*)>:
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	83 ca ff             	or     edx,0xffffffff
c00132c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00132ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00132cf:	83 e9 41             	sub    ecx,0x41
c00132d2:	83 f9 19             	cmp    ecx,0x19
c00132d5:	77 18                	ja     c00132ef <SysEject(regs*)+0x32>
c00132d7:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00132de:	85 c9                	test   ecx,ecx
c00132e0:	74 0d                	je     c00132ef <SysEject(regs*)+0x32>
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	51                   	push   ecx
c00132e6:	e8 cf a0 ff ff       	call   c000d3ba <LogicalDisk::eject()>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	99                   	cdq    
c00132ef:	83 c4 0c             	add    esp,0xc
c00132f2:	c3                   	ret    

c00132f3 <SysExit(regs*)>:
c00132f3:	83 ec 18             	sub    esp,0x18
c00132f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132fa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132fd:	e8 1a 2a 00 00       	call   c0015d1c <terminateTask(int)>
c0013302:	83 c8 ff             	or     eax,0xffffffff
c0013305:	83 c4 1c             	add    esp,0x1c
c0013308:	89 c2                	mov    edx,eax
c001330a:	c3                   	ret    

c001330b <SysGetCwd(regs*)>:
c001330b:	83 ec 10             	sub    esp,0x10
c001330e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013312:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013315:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001331d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013320:	e8 61 7c ff ff       	call   c000af86 <Fs::getcwd(Process*, char*, int)>
c0013325:	83 c4 1c             	add    esp,0x1c
c0013328:	99                   	cdq    
c0013329:	c3                   	ret    

c001332a <SysGetPID(regs*)>:
c001332a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001332f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013332:	8b 00                	mov    eax,DWORD PTR [eax]
c0013334:	99                   	cdq    
c0013335:	c3                   	ret    

c0013336 <SysGetRAMData(regs*)>:
c0013336:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c001333c:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0013346:	99                   	cdq    
c0013347:	f7 f9                	idiv   ecx
c0013349:	c1 e0 18             	shl    eax,0x18
c001334c:	09 c8                	or     eax,ecx
c001334e:	99                   	cdq    
c001334f:	c3                   	ret    

c0013350 <SysGetVGAPtr(regs*)>:
c0013350:	55                   	push   ebp
c0013351:	57                   	push   edi
c0013352:	56                   	push   esi
c0013353:	53                   	push   ebx
c0013354:	83 ec 18             	sub    esp,0x18
c0013357:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001335b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001335e:	e8 85 24 00 00       	call   c00157e8 <Thr::processFromPID(int)>
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	89 c1                	mov    ecx,eax
c0013368:	b8 01 00 00 00       	mov    eax,0x1
c001336d:	85 c9                	test   ecx,ecx
c001336f:	74 57                	je     c00133c8 <SysGetVGAPtr(regs*)+0x78>
c0013371:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013377:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001337b:	74 0c                	je     c0013389 <SysGetVGAPtr(regs*)+0x39>
c001337d:	83 ec 0c             	sub    esp,0xc
c0013380:	55                   	push   ebp
c0013381:	e8 c5 53 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0013386:	83 c4 10             	add    esp,0x10
c0013389:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001338c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001338f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013394:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013396:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001339c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00133a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133a5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00133a8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00133ae:	50                   	push   eax
c00133af:	50                   	push   eax
c00133b0:	68 30 16 02 c0       	push   0xc0021630
c00133b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133b8:	05 a8 0f 00 00       	add    eax,0xfa8
c00133bd:	50                   	push   eax
c00133be:	e8 7d d2 fe ff       	call   c0000640 <strcpy>
c00133c3:	83 c4 10             	add    esp,0x10
c00133c6:	31 c0                	xor    eax,eax
c00133c8:	83 c4 0c             	add    esp,0xc
c00133cb:	31 d2                	xor    edx,edx
c00133cd:	5b                   	pop    ebx
c00133ce:	5e                   	pop    esi
c00133cf:	5f                   	pop    edi
c00133d0:	5d                   	pop    ebp
c00133d1:	c3                   	ret    
c00133d2:	66 90                	xchg   ax,ax

c00133d4 <SysKill(regs*)>:
c00133d4:	53                   	push   ebx
c00133d5:	83 ec 08             	sub    esp,0x8
c00133d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133dc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00133e0:	75 16                	jne    c00133f8 <SysKill(regs*)+0x24>
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	68 3a 16 02 c0       	push   0xc002163a
c00133ea:	e8 ca d7 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	e9 89 00 00 00       	jmp    c0013480 <SysKill(regs*)+0xac>
c00133f7:	90                   	nop
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	68 84 81 02 c0       	push   0xc0028184
c0013400:	e8 67 bb 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013405:	8d 76 00             	lea    esi,[esi+0x0]
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	85 c0                	test   eax,eax
c001340d:	74 19                	je     c0013428 <SysKill(regs*)+0x54>
c001340f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013412:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013415:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013417:	74 33                	je     c001344c <SysKill(regs*)+0x78>
c0013419:	52                   	push   edx
c001341a:	52                   	push   edx
c001341b:	50                   	push   eax
c001341c:	68 84 81 02 c0       	push   0xc0028184
c0013421:	e8 66 be 00 00       	call   c001f28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013426:	eb e0                	jmp    c0013408 <SysKill(regs*)+0x34>
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	68 78 81 02 c0       	push   0xc0028178
c0013430:	e8 37 bb 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013435:	8d 76 00             	lea    esi,[esi+0x0]
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	85 c0                	test   eax,eax
c001343d:	74 41                	je     c0013480 <SysKill(regs*)+0xac>
c001343f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013442:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013445:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013447:	75 27                	jne    c0013470 <SysKill(regs*)+0x9c>
c0013449:	8d 76 00             	lea    esi,[esi+0x0]
c001344c:	51                   	push   ecx
c001344d:	51                   	push   ecx
c001344e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013456:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013459:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001345f:	e8 f6 db ff ff       	call   c001105a <KeRaiseSignal(SigHandlerBlock*, int)>
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	31 c0                	xor    eax,eax
c0013469:	31 d2                	xor    edx,edx
c001346b:	eb 1b                	jmp    c0013488 <SysKill(regs*)+0xb4>
c001346d:	8d 76 00             	lea    esi,[esi+0x0]
c0013470:	52                   	push   edx
c0013471:	52                   	push   edx
c0013472:	50                   	push   eax
c0013473:	68 78 81 02 c0       	push   0xc0028178
c0013478:	e8 0f be 00 00       	call   c001f28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001347d:	eb b9                	jmp    c0013438 <SysKill(regs*)+0x64>
c001347f:	90                   	nop
c0013480:	83 c8 ff             	or     eax,0xffffffff
c0013483:	89 c2                	mov    edx,eax
c0013485:	8d 76 00             	lea    esi,[esi+0x0]
c0013488:	83 c4 08             	add    esp,0x8
c001348b:	5b                   	pop    ebx
c001348c:	c3                   	ret    

c001348d <SysLoadDLL(regs*)>:
c001348d:	56                   	push   esi
c001348e:	53                   	push   ebx
c001348f:	31 d2                	xor    edx,edx
c0013491:	51                   	push   ecx
c0013492:	b8 01 00 00 00       	mov    eax,0x1
c0013497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001349b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001349f:	0f 84 8c 00 00 00    	je     c0013531 <SysLoadDLL(regs*)+0xa4>
c00134a5:	83 ec 0c             	sub    esp,0xc
c00134a8:	68 14 01 00 00       	push   0x114
c00134ad:	e8 fc 45 ff ff       	call   c0007aae <malloc>
c00134b2:	83 c4 0c             	add    esp,0xc
c00134b5:	89 c3                	mov    ebx,eax
c00134b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134bc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134c2:	53                   	push   ebx
c00134c3:	e8 c8 7c ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	31 d2                	xor    edx,edx
c00134cd:	b8 02 00 00 00       	mov    eax,0x2
c00134d2:	85 db                	test   ebx,ebx
c00134d4:	74 5b                	je     c0013531 <SysLoadDLL(regs*)+0xa4>
c00134d6:	83 ec 0c             	sub    esp,0xc
c00134d9:	53                   	push   ebx
c00134da:	e8 db 7f ff ff       	call   c000b4ba <File::exists()>
c00134df:	83 c4 10             	add    esp,0x10
c00134e2:	84 c0                	test   al,al
c00134e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e6:	75 11                	jne    c00134f9 <SysLoadDLL(regs*)+0x6c>
c00134e8:	83 ec 0c             	sub    esp,0xc
c00134eb:	53                   	push   ebx
c00134ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	b8 03 00 00 00       	mov    eax,0x3
c00134f7:	eb 36                	jmp    c001352f <SysLoadDLL(regs*)+0xa2>
c00134f9:	83 ec 0c             	sub    esp,0xc
c00134fc:	53                   	push   ebx
c00134fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013500:	58                   	pop    eax
c0013501:	5a                   	pop    edx
c0013502:	6a 00                	push   0x0
c0013504:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013507:	e8 12 14 00 00       	call   c001491e <Thr::loadDLL(char const*, bool)>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	89 c1                	mov    ecx,eax
c0013511:	31 d2                	xor    edx,edx
c0013513:	b8 04 00 00 00       	mov    eax,0x4
c0013518:	85 c9                	test   ecx,ecx
c001351a:	74 15                	je     c0013531 <SysLoadDLL(regs*)+0xa4>
c001351c:	53                   	push   ebx
c001351d:	53                   	push   ebx
c001351e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013524:	51                   	push   ecx
c0013525:	e8 25 16 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	31 c0                	xor    eax,eax
c001352f:	31 d2                	xor    edx,edx
c0013531:	59                   	pop    ecx
c0013532:	5b                   	pop    ebx
c0013533:	5e                   	pop    esi
c0013534:	c3                   	ret    

c0013535 <SysRead(regs*)>:
c0013535:	57                   	push   edi
c0013536:	56                   	push   esi
c0013537:	53                   	push   ebx
c0013538:	83 ec 10             	sub    esp,0x10
c001353b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001353f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013542:	83 f8 02             	cmp    eax,0x2
c0013545:	77 10                	ja     c0013557 <SysRead(regs*)+0x22>
c0013547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001354c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001354f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013555:	eb 0e                	jmp    c0013565 <SysRead(regs*)+0x30>
c0013557:	83 ec 0c             	sub    esp,0xc
c001355a:	50                   	push   eax
c001355b:	e8 47 5f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0013560:	83 c4 10             	add    esp,0x10
c0013563:	89 c1                	mov    ecx,eax
c0013565:	83 c8 ff             	or     eax,0xffffffff
c0013568:	85 c9                	test   ecx,ecx
c001356a:	89 c2                	mov    edx,eax
c001356c:	74 28                	je     c0013596 <SysRead(regs*)+0x61>
c001356e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013576:	31 ff                	xor    edi,edi
c0013578:	83 ec 0c             	sub    esp,0xc
c001357b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013581:	52                   	push   edx
c0013582:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013585:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013588:	57                   	push   edi
c0013589:	56                   	push   esi
c001358a:	51                   	push   ecx
c001358b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001358e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013592:	83 c4 20             	add    esp,0x20
c0013595:	99                   	cdq    
c0013596:	83 c4 10             	add    esp,0x10
c0013599:	5b                   	pop    ebx
c001359a:	5e                   	pop    esi
c001359b:	5f                   	pop    edi
c001359c:	c3                   	ret    

c001359d <SysRegisterSignal(regs*)>:
c001359d:	83 ec 18             	sub    esp,0x18
c00135a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a4:	6a 00                	push   0x0
c00135a6:	6a 00                	push   0x0
c00135a8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135ab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135b6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00135bc:	e8 63 da ff ff       	call   c0011024 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00135c1:	83 c4 2c             	add    esp,0x2c
c00135c4:	99                   	cdq    
c00135c5:	c3                   	ret    

c00135c6 <SysRegistryGetTypeFromPath(regs*)>:
c00135c6:	57                   	push   edi
c00135c7:	56                   	push   esi
c00135c8:	53                   	push   ebx
c00135c9:	81 ec 38 01 00 00    	sub    esp,0x138
c00135cf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00135d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135d9:	68 5b 16 02 c0       	push   0xc002165b
c00135de:	e8 56 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00135e3:	5a                   	pop    edx
c00135e4:	59                   	pop    ecx
c00135e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135eb:	e8 4d f6 ff ff       	call   c0012c3d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135f0:	5f                   	pop    edi
c00135f1:	89 c6                	mov    esi,eax
c00135f3:	5a                   	pop    edx
c00135f4:	50                   	push   eax
c00135f5:	68 7b 16 02 c0       	push   0xc002167b
c00135fa:	e8 3a 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	85 f6                	test   esi,esi
c0013604:	74 28                	je     c001362e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013606:	50                   	push   eax
c0013607:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001360b:	57                   	push   edi
c001360c:	56                   	push   esi
c001360d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013610:	e8 0c f2 ff ff       	call   c0012821 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013615:	83 c4 0c             	add    esp,0xc
c0013618:	89 c3                	mov    ebx,eax
c001361a:	57                   	push   edi
c001361b:	50                   	push   eax
c001361c:	68 83 16 02 c0       	push   0xc0021683
c0013621:	e8 13 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013626:	89 d8                	mov    eax,ebx
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	99                   	cdq    
c001362c:	eb 05                	jmp    c0013633 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001362e:	83 c8 ff             	or     eax,0xffffffff
c0013631:	89 c2                	mov    edx,eax
c0013633:	81 c4 30 01 00 00    	add    esp,0x130
c0013639:	5b                   	pop    ebx
c001363a:	5e                   	pop    esi
c001363b:	5f                   	pop    edi
c001363c:	c3                   	ret    

c001363d <SysRegistryReadExtent(regs*)>:
c001363d:	83 ec 1c             	sub    esp,0x1c
c0013640:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013644:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013647:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001364a:	85 c0                	test   eax,eax
c001364c:	79 1f                	jns    c001366d <SysRegistryReadExtent(regs*)+0x30>
c001364e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013653:	52                   	push   edx
c0013654:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013658:	52                   	push   edx
c0013659:	50                   	push   eax
c001365a:	51                   	push   ecx
c001365b:	e8 b3 f0 ff ff       	call   c0012713 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013668:	83 c4 10             	add    esp,0x10
c001366b:	eb 14                	jmp    c0013681 <SysRegistryReadExtent(regs*)+0x44>
c001366d:	83 ec 04             	sub    esp,0x4
c0013670:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013673:	50                   	push   eax
c0013674:	51                   	push   ecx
c0013675:	e8 33 eb ff ff       	call   c00121ad <CmGetString(Reghive_Tag*, int, char*)>
c001367a:	83 c4 10             	add    esp,0x10
c001367d:	31 c0                	xor    eax,eax
c001367f:	31 d2                	xor    edx,edx
c0013681:	83 c4 1c             	add    esp,0x1c
c0013684:	c3                   	ret    

c0013685 <SysRegistryPathToExtentLookup(regs*)>:
c0013685:	53                   	push   ebx
c0013686:	83 ec 10             	sub    esp,0x10
c0013689:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001368d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013690:	68 99 16 02 c0       	push   0xc0021699
c0013695:	e8 9f 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001369a:	58                   	pop    eax
c001369b:	5a                   	pop    edx
c001369c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001369f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136a2:	e8 96 f5 ff ff       	call   c0012c3d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136a7:	83 c4 18             	add    esp,0x18
c00136aa:	99                   	cdq    
c00136ab:	5b                   	pop    ebx
c00136ac:	c3                   	ret    

c00136ad <SysRegistryEnterDirectory(regs*)>:
c00136ad:	53                   	push   ebx
c00136ae:	83 ec 10             	sub    esp,0x10
c00136b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136b8:	68 bc 16 02 c0       	push   0xc00216bc
c00136bd:	e8 77 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00136c2:	58                   	pop    eax
c00136c3:	5a                   	pop    edx
c00136c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136ca:	e8 55 eb ff ff       	call   c0012224 <CmEnterDirectory(Reghive_Tag*, int)>
c00136cf:	83 c4 18             	add    esp,0x18
c00136d2:	99                   	cdq    
c00136d3:	5b                   	pop    ebx
c00136d4:	c3                   	ret    

c00136d5 <SysRegistryGetNext(regs*)>:
c00136d5:	53                   	push   ebx
c00136d6:	83 ec 10             	sub    esp,0x10
c00136d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136e0:	68 da 16 02 c0       	push   0xc00216da
c00136e5:	e8 4f 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00136ea:	58                   	pop    eax
c00136eb:	5a                   	pop    edx
c00136ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136f2:	e8 6c eb ff ff       	call   c0012263 <CmGetNext(Reghive_Tag*, int)>
c00136f7:	83 c4 18             	add    esp,0x18
c00136fa:	99                   	cdq    
c00136fb:	5b                   	pop    ebx
c00136fc:	c3                   	ret    

c00136fd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00136fd:	57                   	push   edi
c00136fe:	56                   	push   esi
c00136ff:	53                   	push   ebx
c0013700:	81 ec 34 01 00 00    	sub    esp,0x134
c0013706:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001370d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013711:	57                   	push   edi
c0013712:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013715:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013718:	e8 04 f1 ff ff       	call   c0012821 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001371d:	89 c3                	mov    ebx,eax
c001371f:	58                   	pop    eax
c0013720:	5a                   	pop    edx
c0013721:	57                   	push   edi
c0013722:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013725:	e8 16 cf fe ff       	call   c0000640 <strcpy>
c001372a:	89 d8                	mov    eax,ebx
c001372c:	81 c4 40 01 00 00    	add    esp,0x140
c0013732:	99                   	cdq    
c0013733:	5b                   	pop    ebx
c0013734:	5e                   	pop    esi
c0013735:	5f                   	pop    edi
c0013736:	c3                   	ret    

c0013737 <SysRegistryOpen(regs*)>:
c0013737:	83 ec 18             	sub    esp,0x18
c001373a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001373e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013741:	e8 f7 e8 ff ff       	call   c001203d <CmOpen(char const*)>
c0013746:	83 c4 1c             	add    esp,0x1c
c0013749:	99                   	cdq    
c001374a:	c3                   	ret    

c001374b <SysRegistryClose(regs*)>:
c001374b:	83 ec 18             	sub    esp,0x18
c001374e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013752:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013755:	e8 01 ea ff ff       	call   c001215b <CmClose(Reghive_Tag*)>
c001375a:	31 c0                	xor    eax,eax
c001375c:	31 d2                	xor    edx,edx
c001375e:	83 c4 1c             	add    esp,0x1c
c0013761:	c3                   	ret    

c0013762 <SysSbrk(regs*)>:
c0013762:	56                   	push   esi
c0013763:	53                   	push   ebx
c0013764:	50                   	push   eax
c0013765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001376a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001376e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013771:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013774:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001377a:	85 db                	test   ebx,ebx
c001377c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001377f:	74 02                	je     c0013783 <SysSbrk(regs*)+0x21>
c0013781:	79 06                	jns    c0013789 <SysSbrk(regs*)+0x27>
c0013783:	89 f0                	mov    eax,esi
c0013785:	31 d2                	xor    edx,edx
c0013787:	eb 2a                	jmp    c00137b3 <SysSbrk(regs*)+0x51>
c0013789:	83 c8 ff             	or     eax,0xffffffff
c001378c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013792:	89 c2                	mov    edx,eax
c0013794:	77 1d                	ja     c00137b3 <SysSbrk(regs*)+0x51>
c0013796:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001379c:	50                   	push   eax
c001379d:	c1 ea 0c             	shr    edx,0xc
c00137a0:	68 07 0c 00 00       	push   0xc07
c00137a5:	52                   	push   edx
c00137a6:	51                   	push   ecx
c00137a7:	e8 6c 66 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c00137ac:	89 f0                	mov    eax,esi
c00137ae:	31 d2                	xor    edx,edx
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	59                   	pop    ecx
c00137b4:	5b                   	pop    ebx
c00137b5:	5e                   	pop    esi
c00137b6:	c3                   	ret    

c00137b7 <SysSetCwd(regs*)>:
c00137b7:	83 ec 14             	sub    esp,0x14
c00137ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137c6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00137c9:	e8 8b 7d ff ff       	call   c000b559 <Fs::setcwd(Process*, char*)>
c00137ce:	83 c4 1c             	add    esp,0x1c
c00137d1:	99                   	cdq    
c00137d2:	c3                   	ret    

c00137d3 <SysSetTime(regs*)>:
c00137d3:	55                   	push   ebp
c00137d4:	31 c9                	xor    ecx,ecx
c00137d6:	57                   	push   edi
c00137d7:	bd 0c 00 00 00       	mov    ebp,0xc
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	31 db                	xor    ebx,ebx
c00137e0:	83 ec 10             	sub    esp,0x10
c00137e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137e7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00137ea:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00137ed:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00137f0:	89 c2                	mov    edx,eax
c00137f2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00137f8:	83 e2 1f             	and    edx,0x1f
c00137fb:	c1 e7 10             	shl    edi,0x10
c00137fe:	42                   	inc    edx
c00137ff:	c1 e8 05             	shr    eax,0x5
c0013802:	88 d1                	mov    cl,dl
c0013804:	31 d2                	xor    edx,edx
c0013806:	f7 f5                	div    ebp
c0013808:	89 dd                	mov    ebp,ebx
c001380a:	88 d5                	mov    ch,dl
c001380c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013812:	0f b7 c1             	movzx  eax,cx
c0013815:	31 d2                	xor    edx,edx
c0013817:	09 f8                	or     eax,edi
c0013819:	bf 3c 00 00 00       	mov    edi,0x3c
c001381e:	89 c1                	mov    ecx,eax
c0013820:	89 f0                	mov    eax,esi
c0013822:	f7 f7                	div    edi
c0013824:	c1 e2 10             	shl    edx,0x10
c0013827:	09 d5                	or     ebp,edx
c0013829:	31 d2                	xor    edx,edx
c001382b:	89 eb                	mov    ebx,ebp
c001382d:	f7 f7                	div    edi
c001382f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013834:	88 d7                	mov    bh,dl
c0013836:	89 f0                	mov    eax,esi
c0013838:	31 d2                	xor    edx,edx
c001383a:	f7 f7                	div    edi
c001383c:	bf 18 00 00 00       	mov    edi,0x18
c0013841:	31 d2                	xor    edx,edx
c0013843:	f7 f7                	div    edi
c0013845:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001384a:	88 d3                	mov    bl,dl
c001384c:	53                   	push   ebx
c001384d:	51                   	push   ecx
c001384e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013854:	e8 fd 84 ff ff       	call   c000bd56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013859:	83 c4 1c             	add    esp,0x1c
c001385c:	83 f0 01             	xor    eax,0x1
c001385f:	5b                   	pop    ebx
c0013860:	0f b6 c0             	movzx  eax,al
c0013863:	5e                   	pop    esi
c0013864:	31 d2                	xor    edx,edx
c0013866:	5f                   	pop    edi
c0013867:	5d                   	pop    ebp
c0013868:	c3                   	ret    

c0013869 <SysTimezone(regs*)>:
c0013869:	53                   	push   ebx
c001386a:	83 ec 08             	sub    esp,0x8
c001386d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013871:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013875:	75 17                	jne    c001388e <SysTimezone(regs*)+0x25>
c0013877:	83 ec 0c             	sub    esp,0xc
c001387a:	68 f1 16 02 c0       	push   0xc00216f1
c001387f:	e8 b5 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013884:	83 c8 ff             	or     eax,0xffffffff
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	89 c2                	mov    edx,eax
c001388c:	eb 20                	jmp    c00138ae <SysTimezone(regs*)+0x45>
c001388e:	83 ec 0c             	sub    esp,0xc
c0013891:	68 06 17 02 c0       	push   0xc0021706
c0013896:	e8 9e 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001389b:	58                   	pop    eax
c001389c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001389f:	e8 1c 82 ff ff       	call   c000bac0 <User::loadClockSettings(int)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	b8 01 00 00 00       	mov    eax,0x1
c00138ac:	31 d2                	xor    edx,edx
c00138ae:	83 c4 08             	add    esp,0x8
c00138b1:	5b                   	pop    ebx
c00138b2:	c3                   	ret    

c00138b3 <SysWrite(regs*)>:
c00138b3:	57                   	push   edi
c00138b4:	56                   	push   esi
c00138b5:	53                   	push   ebx
c00138b6:	83 ec 10             	sub    esp,0x10
c00138b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138c0:	83 f8 02             	cmp    eax,0x2
c00138c3:	77 10                	ja     c00138d5 <SysWrite(regs*)+0x22>
c00138c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138cd:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00138d3:	eb 0e                	jmp    c00138e3 <SysWrite(regs*)+0x30>
c00138d5:	83 ec 0c             	sub    esp,0xc
c00138d8:	50                   	push   eax
c00138d9:	e8 c9 5b ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	89 c1                	mov    ecx,eax
c00138e3:	83 c8 ff             	or     eax,0xffffffff
c00138e6:	85 c9                	test   ecx,ecx
c00138e8:	89 c2                	mov    edx,eax
c00138ea:	74 28                	je     c0013914 <SysWrite(regs*)+0x61>
c00138ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138f4:	31 ff                	xor    edi,edi
c00138f6:	83 ec 0c             	sub    esp,0xc
c00138f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00138ff:	52                   	push   edx
c0013900:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013903:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013906:	57                   	push   edi
c0013907:	56                   	push   esi
c0013908:	51                   	push   ecx
c0013909:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001390c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013910:	83 c4 20             	add    esp,0x20
c0013913:	99                   	cdq    
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	5b                   	pop    ebx
c0013918:	5e                   	pop    esi
c0013919:	5f                   	pop    edi
c001391a:	c3                   	ret    

c001391b <SysWsbe(regs*)>:
c001391b:	57                   	push   edi
c001391c:	b9 0b 00 00 00       	mov    ecx,0xb
c0013921:	56                   	push   esi
c0013922:	be 45 17 02 c0       	mov    esi,0xc0021745
c0013927:	53                   	push   ebx
c0013928:	83 ec 30             	sub    esp,0x30
c001392b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001392f:	fc                   	cld    
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013935:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001393e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013941:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013947:	8b 06                	mov    eax,DWORD PTR [esi]
c0013949:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001394c:	57                   	push   edi
c001394d:	e8 1e cc fe ff       	call   c0000570 <strlen>
c0013952:	5a                   	pop    edx
c0013953:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013957:	52                   	push   edx
c0013958:	31 d2                	xor    edx,edx
c001395a:	57                   	push   edi
c001395b:	52                   	push   edx
c001395c:	50                   	push   eax
c001395d:	56                   	push   esi
c001395e:	ff d3                	call   ebx
c0013960:	83 c4 14             	add    esp,0x14
c0013963:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013967:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001396a:	e8 ad 23 00 00       	call   c0015d1c <terminateTask(int)>
c001396f:	83 c4 40             	add    esp,0x40
c0013972:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013977:	5b                   	pop    ebx
c0013978:	31 d2                	xor    edx,edx
c001397a:	5e                   	pop    esi
c001397b:	5f                   	pop    edi
c001397c:	c3                   	ret    

c001397d <SysYield(regs*)>:
c001397d:	83 ec 0c             	sub    esp,0xc
c0013980:	fa                   	cli    
c0013981:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013987:	e8 f0 19 00 00       	call   c001537c <schedule()>
c001398c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013991:	48                   	dec    eax
c0013992:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013997:	75 01                	jne    c001399a <SysYield(regs*)+0x1d>
c0013999:	fb                   	sti    
c001399a:	31 c0                	xor    eax,eax
c001399c:	31 d2                	xor    edx,edx
c001399e:	83 c4 0c             	add    esp,0xc
c00139a1:	c3                   	ret    

c00139a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00139a2:	55                   	push   ebp
c00139a3:	57                   	push   edi
c00139a4:	56                   	push   esi
c00139a5:	53                   	push   ebx
c00139a6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00139ac:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00139b4:	0f 95 c0             	setne  al
c00139b7:	31 d2                	xor    edx,edx
c00139b9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00139c1:	0f 94 c2             	sete   dl
c00139c4:	85 c2                	test   edx,eax
c00139c6:	74 34                	je     c00139fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139c8:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00139d3:	74 27                	je     c00139fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139d5:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00139dc:	05 00 10 00 00       	add    eax,0x1000
c00139e1:	89 c1                	mov    ecx,eax
c00139e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139e8:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00139ee:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00139f5:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00139fc:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013a03:	83 ec 0c             	sub    esp,0xc
c0013a06:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013a0c:	6a 01                	push   0x1
c0013a0e:	e8 ee 5b ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	89 c3                	mov    ebx,eax
c0013a18:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013a1e:	0f 86 25 01 00 00    	jbe    c0013b49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013a24:	c1 ee 0c             	shr    esi,0xc
c0013a27:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013a2e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013a32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a3a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013a41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a45:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013a4c:	29 ef                	sub    edi,ebp
c0013a4e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013a52:	0f 83 f8 00 00 00    	jae    c0013b50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013a58:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a5e:	76 05                	jbe    c0013a65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013a60:	bf 00 10 00 00       	mov    edi,0x1000
c0013a65:	83 ec 0c             	sub    esp,0xc
c0013a68:	31 d2                	xor    edx,edx
c0013a6a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a71:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a73:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a77:	50                   	push   eax
c0013a78:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a7c:	56                   	push   esi
c0013a7d:	52                   	push   edx
c0013a7e:	57                   	push   edi
c0013a7f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a89:	83 c4 20             	add    esp,0x20
c0013a8c:	85 c0                	test   eax,eax
c0013a8e:	75 06                	jne    c0013a96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013a90:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a94:	74 13                	je     c0013aa9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	53                   	push   ebx
c0013a9a:	e8 80 5e ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	31 c0                	xor    eax,eax
c0013aa4:	e9 7c 01 00 00       	jmp    c0013c25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013aa9:	fa                   	cli    
c0013aaa:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013ab0:	e8 fd 42 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013ab5:	6a 07                	push   0x7
c0013ab7:	89 c7                	mov    edi,eax
c0013ab9:	53                   	push   ebx
c0013aba:	50                   	push   eax
c0013abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ac3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ac9:	e8 46 62 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ace:	83 c4 0c             	add    esp,0xc
c0013ad1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013ad8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ade:	6a 00                	push   0x0
c0013ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ae8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aee:	e8 87 60 ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013af3:	58                   	pop    eax
c0013af4:	5a                   	pop    edx
c0013af5:	68 07 0c 00 00       	push   0xc07
c0013afa:	55                   	push   ebp
c0013afb:	57                   	push   edi
c0013afc:	89 df                	mov    edi,ebx
c0013afe:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b05:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b0b:	6a 00                	push   0x0
c0013b0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b15:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b1b:	e8 46 64 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b20:	b9 00 10 00 00       	mov    ecx,0x1000
c0013b25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b27:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013b2c:	83 c4 20             	add    esp,0x20
c0013b2f:	48                   	dec    eax
c0013b30:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013b35:	85 c0                	test   eax,eax
c0013b37:	75 01                	jne    c0013b3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013b39:	fb                   	sti    
c0013b3a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b40:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013b44:	e9 f1 fe ff ff       	jmp    c0013a3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013b49:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b50:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b57:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b5d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b63:	0f 86 ae 00 00 00    	jbe    c0013c17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013b69:	fa                   	cli    
c0013b6a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013b70:	c1 ee 0c             	shr    esi,0xc
c0013b73:	51                   	push   ecx
c0013b74:	31 ff                	xor    edi,edi
c0013b76:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b7d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b83:	6a 00                	push   0x0
c0013b85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b8d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b93:	e8 e2 5f ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013b98:	83 c4 10             	add    esp,0x10
c0013b9b:	e8 12 42 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013ba0:	47                   	inc    edi
c0013ba1:	6a 07                	push   0x7
c0013ba3:	53                   	push   ebx
c0013ba4:	50                   	push   eax
c0013ba5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ba9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013baf:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013bb2:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013bb8:	e8 57 61 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bbd:	58                   	pop    eax
c0013bbe:	5a                   	pop    edx
c0013bbf:	68 07 0c 00 00       	push   0xc07
c0013bc4:	55                   	push   ebp
c0013bc5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bcf:	50                   	push   eax
c0013bd0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013bd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bdd:	6a 00                	push   0x0
c0013bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013be7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bed:	e8 74 63 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bf2:	83 c4 1c             	add    esp,0x1c
c0013bf5:	68 00 10 00 00       	push   0x1000
c0013bfa:	6a 00                	push   0x0
c0013bfc:	53                   	push   ebx
c0013bfd:	e8 ee c8 fe ff       	call   c00004f0 <memset>
c0013c02:	83 c4 10             	add    esp,0x10
c0013c05:	39 fe                	cmp    esi,edi
c0013c07:	77 92                	ja     c0013b9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013c09:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013c0e:	48                   	dec    eax
c0013c0f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013c14:	75 01                	jne    c0013c17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013c16:	fb                   	sti    
c0013c17:	83 ec 0c             	sub    esp,0xc
c0013c1a:	53                   	push   ebx
c0013c1b:	e8 ff 5c ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	b0 01                	mov    al,0x1
c0013c25:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013c2b:	5b                   	pop    ebx
c0013c2c:	5e                   	pop    esi
c0013c2d:	5f                   	pop    edi
c0013c2e:	5d                   	pop    ebp
c0013c2f:	c3                   	ret    

c0013c30 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013c30:	55                   	push   ebp
c0013c31:	57                   	push   edi
c0013c32:	56                   	push   esi
c0013c33:	53                   	push   ebx
c0013c34:	83 ec 48             	sub    esp,0x48
c0013c37:	68 14 01 00 00       	push   0x114
c0013c3c:	e8 6d 3e ff ff       	call   c0007aae <malloc>
c0013c41:	83 c4 0c             	add    esp,0xc
c0013c44:	89 c6                	mov    esi,eax
c0013c46:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c4e:	50                   	push   eax
c0013c4f:	e8 3c 75 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013c54:	58                   	pop    eax
c0013c55:	5a                   	pop    edx
c0013c56:	6a 01                	push   0x1
c0013c58:	56                   	push   esi
c0013c59:	e8 ee 75 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013c5e:	83 c4 10             	add    esp,0x10
c0013c61:	85 c0                	test   eax,eax
c0013c63:	0f 85 43 01 00 00    	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c69:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c71:	83 ec 0c             	sub    esp,0xc
c0013c74:	6a 34                	push   0x34
c0013c76:	e8 33 3e ff ff       	call   c0007aae <malloc>
c0013c7b:	89 c3                	mov    ebx,eax
c0013c7d:	58                   	pop    eax
c0013c7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c80:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013c84:	57                   	push   edi
c0013c85:	53                   	push   ebx
c0013c86:	6a 00                	push   0x0
c0013c88:	6a 34                	push   0x34
c0013c8a:	56                   	push   esi
c0013c8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c8e:	83 c4 20             	add    esp,0x20
c0013c91:	85 c0                	test   eax,eax
c0013c93:	0f 85 13 01 00 00    	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c99:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c9f:	0f 85 07 01 00 00    	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013ca5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ca8:	85 c0                	test   eax,eax
c0013caa:	0f 84 fc 00 00 00    	je     c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cb0:	31 d2                	xor    edx,edx
c0013cb2:	55                   	push   ebp
c0013cb3:	52                   	push   edx
c0013cb4:	50                   	push   eax
c0013cb5:	56                   	push   esi
c0013cb6:	e8 4f 76 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	85 c0                	test   eax,eax
c0013cc0:	0f 85 e6 00 00 00    	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cc6:	83 ec 0c             	sub    esp,0xc
c0013cc9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013ccc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013cd4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cd8:	0f af c2             	imul   eax,edx
c0013cdb:	50                   	push   eax
c0013cdc:	e8 cd 3d ff ff       	call   c0007aae <malloc>
c0013ce1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013ce3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ce7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013cea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cee:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cf2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cf6:	0f af c2             	imul   eax,edx
c0013cf9:	99                   	cdq    
c0013cfa:	52                   	push   edx
c0013cfb:	50                   	push   eax
c0013cfc:	56                   	push   esi
c0013cfd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d00:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013d03:	83 c4 20             	add    esp,0x20
c0013d06:	85 c0                	test   eax,eax
c0013d08:	0f 84 9e 00 00 00    	je     c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d0e:	31 d2                	xor    edx,edx
c0013d10:	51                   	push   ecx
c0013d11:	52                   	push   edx
c0013d12:	50                   	push   eax
c0013d13:	56                   	push   esi
c0013d14:	e8 f1 75 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	85 c0                	test   eax,eax
c0013d1e:	0f 85 88 00 00 00    	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d2b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d2f:	31 ed                	xor    ebp,ebp
c0013d31:	0f af c2             	imul   eax,edx
c0013d34:	50                   	push   eax
c0013d35:	e8 74 3d ff ff       	call   c0007aae <malloc>
c0013d3a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d47:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d4b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d4f:	0f af c2             	imul   eax,edx
c0013d52:	99                   	cdq    
c0013d53:	52                   	push   edx
c0013d54:	50                   	push   eax
c0013d55:	56                   	push   esi
c0013d56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d59:	83 c4 20             	add    esp,0x20
c0013d5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d64:	0f b7 fd             	movzx  edi,bp
c0013d67:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013d6b:	73 7d                	jae    c0013dea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013d6d:	c1 e7 05             	shl    edi,0x5
c0013d70:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013d74:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013d77:	75 6b                	jne    c0013de4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013d79:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d80:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013d83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d87:	52                   	push   edx
c0013d88:	31 d2                	xor    edx,edx
c0013d8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013d8d:	52                   	push   edx
c0013d8e:	50                   	push   eax
c0013d8f:	56                   	push   esi
c0013d90:	e8 75 75 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	85 c0                	test   eax,eax
c0013d9a:	74 17                	je     c0013db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013d9c:	83 ec 0c             	sub    esp,0xc
c0013d9f:	68 71 17 02 c0       	push   0xc0021771
c0013da4:	e8 90 6b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	31 c0                	xor    eax,eax
c0013dae:	e9 87 00 00 00       	jmp    c0013e3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013db3:	83 ec 0c             	sub    esp,0xc
c0013db6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013db9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013dbc:	50                   	push   eax
c0013dbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013dc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc5:	56                   	push   esi
c0013dc6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013dca:	e8 d3 fb ff ff       	call   c00139a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013dcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dd3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013dd7:	83 c4 20             	add    esp,0x20
c0013dda:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013dde:	73 04                	jae    c0013de4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013de0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013de4:	45                   	inc    ebp
c0013de5:	e9 7a ff ff ff       	jmp    c0013d64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013dea:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013dee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013df6:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013e05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e0a:	05 00 10 00 00       	add    eax,0x1000
c0013e0f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e16:	e8 a3 3c ff ff       	call   c0007abe <free>
c0013e1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e1e:	e8 9b 3c ff ff       	call   c0007abe <free>
c0013e23:	58                   	pop    eax
c0013e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e28:	e8 91 3c ff ff       	call   c0007abe <free>
c0013e2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e30:	e8 75 74 ff ff       	call   c000b2aa <File::close()>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	b0 01                	mov    al,0x1
c0013e3a:	83 c4 3c             	add    esp,0x3c
c0013e3d:	5b                   	pop    ebx
c0013e3e:	5e                   	pop    esi
c0013e3f:	5f                   	pop    edi
c0013e40:	5d                   	pop    ebp
c0013e41:	c3                   	ret    

c0013e42 <Thr::runtimeReferenceHelper()>:
c0013e42:	83 ec 18             	sub    esp,0x18
c0013e45:	68 79 17 02 c0       	push   0xc0021779
c0013e4a:	e8 ea 6a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013e4f:	fa                   	cli    
c0013e50:	83 c4 10             	add    esp,0x10
c0013e53:	eb fe                	jmp    c0013e53 <Thr::runtimeReferenceHelper()+0x11>

c0013e55 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e55:	57                   	push   edi
c0013e56:	56                   	push   esi
c0013e57:	53                   	push   ebx
c0013e58:	31 db                	xor    ebx,ebx
c0013e5a:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013e60:	7e 3c                	jle    c0013e9e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e62:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013e69:	31 ff                	xor    edi,edi
c0013e6b:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013e72:	7e 27                	jle    c0013e9b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e74:	50                   	push   eax
c0013e75:	50                   	push   eax
c0013e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e7a:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e7c:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013e83:	50                   	push   eax
c0013e84:	e8 c7 c8 fe ff       	call   c0000750 <strcmp>
c0013e89:	83 c4 10             	add    esp,0x10
c0013e8c:	85 c0                	test   eax,eax
c0013e8e:	75 05                	jne    c0013e95 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e93:	eb 0b                	jmp    c0013ea0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e95:	83 c6 10             	add    esi,0x10
c0013e98:	47                   	inc    edi
c0013e99:	eb d0                	jmp    c0013e6b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e9b:	43                   	inc    ebx
c0013e9c:	eb bc                	jmp    c0013e5a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e9e:	31 c0                	xor    eax,eax
c0013ea0:	5b                   	pop    ebx
c0013ea1:	5e                   	pop    esi
c0013ea2:	5f                   	pop    edi
c0013ea3:	c3                   	ret    

c0013ea4 <Thr::loadKernelSymbolTable(char const*)>:
c0013ea4:	55                   	push   ebp
c0013ea5:	57                   	push   edi
c0013ea6:	56                   	push   esi
c0013ea7:	53                   	push   ebx
c0013ea8:	83 ec 68             	sub    esp,0x68
c0013eab:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013eb1:	68 14 01 00 00       	push   0x114
c0013eb6:	e8 f3 3b ff ff       	call   c0007aae <malloc>
c0013ebb:	83 c4 0c             	add    esp,0xc
c0013ebe:	89 c3                	mov    ebx,eax
c0013ec0:	56                   	push   esi
c0013ec1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013ec5:	50                   	push   eax
c0013ec6:	e8 c5 72 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013ecb:	5e                   	pop    esi
c0013ecc:	5f                   	pop    edi
c0013ecd:	6a 01                	push   0x1
c0013ecf:	53                   	push   ebx
c0013ed0:	e8 77 73 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	85 c0                	test   eax,eax
c0013eda:	74 0a                	je     c0013ee6 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	68 9b 17 02 c0       	push   0xc002179b
c0013ee4:	eb 34                	jmp    c0013f1a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013ee6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013eee:	83 ec 0c             	sub    esp,0xc
c0013ef1:	6a 34                	push   0x34
c0013ef3:	e8 b6 3b ff ff       	call   c0007aae <malloc>
c0013ef8:	59                   	pop    ecx
c0013ef9:	89 c7                	mov    edi,eax
c0013efb:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013eff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f01:	56                   	push   esi
c0013f02:	57                   	push   edi
c0013f03:	6a 00                	push   0x0
c0013f05:	6a 34                	push   0x34
c0013f07:	53                   	push   ebx
c0013f08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f0b:	83 c4 20             	add    esp,0x20
c0013f0e:	85 c0                	test   eax,eax
c0013f10:	74 17                	je     c0013f29 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	68 b2 17 02 c0       	push   0xc00217b2
c0013f1a:	e8 9a cc ff ff       	call   c0010bb9 <KePanic(char const*)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	31 c0                	xor    eax,eax
c0013f24:	e9 31 02 00 00       	jmp    c001415a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013f29:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f2f:	75 e1                	jne    c0013f12 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f31:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f34:	85 c0                	test   eax,eax
c0013f36:	74 da                	je     c0013f12 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f38:	52                   	push   edx
c0013f39:	31 d2                	xor    edx,edx
c0013f3b:	52                   	push   edx
c0013f3c:	50                   	push   eax
c0013f3d:	53                   	push   ebx
c0013f3e:	e8 c7 73 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	85 c0                	test   eax,eax
c0013f48:	75 c8                	jne    c0013f12 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f51:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f55:	31 ed                	xor    ebp,ebp
c0013f57:	0f af c2             	imul   eax,edx
c0013f5a:	50                   	push   eax
c0013f5b:	e8 4e 3b ff ff       	call   c0007aae <malloc>
c0013f60:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f66:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f75:	0f af c2             	imul   eax,edx
c0013f78:	99                   	cdq    
c0013f79:	52                   	push   edx
c0013f7a:	50                   	push   eax
c0013f7b:	53                   	push   ebx
c0013f7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f7f:	83 c4 20             	add    esp,0x20
c0013f82:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f8a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f92:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fa2:	0f b7 f5             	movzx  esi,bp
c0013fa5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013fa9:	0f 83 a7 00 00 00    	jae    c0014056 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013faf:	6b f6 28             	imul   esi,esi,0x28
c0013fb2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013fb6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013fb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013fbd:	50                   	push   eax
c0013fbe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fc2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013fc6:	8b 16                	mov    edx,DWORD PTR [esi]
c0013fc8:	6b c0 28             	imul   eax,eax,0x28
c0013fcb:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013fcf:	89 d0                	mov    eax,edx
c0013fd1:	31 d2                	xor    edx,edx
c0013fd3:	52                   	push   edx
c0013fd4:	50                   	push   eax
c0013fd5:	53                   	push   ebx
c0013fd6:	e8 2f 73 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	6a 20                	push   0x20
c0013fe0:	6a 00                	push   0x0
c0013fe2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fe6:	52                   	push   edx
c0013fe7:	e8 04 c5 fe ff       	call   c00004f0 <memset>
c0013fec:	58                   	pop    eax
c0013fed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fef:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013ff3:	51                   	push   ecx
c0013ff4:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013ff8:	52                   	push   edx
c0013ff9:	6a 00                	push   0x0
c0013ffb:	6a 1f                	push   0x1f
c0013ffd:	53                   	push   ebx
c0013ffe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014001:	83 c4 18             	add    esp,0x18
c0014004:	68 c9 17 02 c0       	push   0xc00217c9
c0014009:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001400d:	52                   	push   edx
c001400e:	e8 3d c7 fe ff       	call   c0000750 <strcmp>
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	85 c0                	test   eax,eax
c0014018:	75 0f                	jne    c0014029 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001401a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001401d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014029:	50                   	push   eax
c001402a:	50                   	push   eax
c001402b:	68 d1 17 02 c0       	push   0xc00217d1
c0014030:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014034:	50                   	push   eax
c0014035:	e8 16 c7 fe ff       	call   c0000750 <strcmp>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	85 c0                	test   eax,eax
c001403f:	75 0f                	jne    c0014050 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014041:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014044:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014050:	45                   	inc    ebp
c0014051:	e9 4c ff ff ff       	jmp    c0013fa2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014056:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001405b:	75 10                	jne    c001406d <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001405d:	83 ec 0c             	sub    esp,0xc
c0014060:	68 d9 17 02 c0       	push   0xc00217d9
c0014065:	e8 4f cb ff ff       	call   c0010bb9 <KePanic(char const*)>
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014072:	75 10                	jne    c0014084 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	68 d9 17 02 c0       	push   0xc00217d9
c001407c:	e8 38 cb ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014081:	83 c4 10             	add    esp,0x10
c0014084:	31 d2                	xor    edx,edx
c0014086:	50                   	push   eax
c0014087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408b:	52                   	push   edx
c001408c:	50                   	push   eax
c001408d:	53                   	push   ebx
c001408e:	e8 77 72 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014093:	5a                   	pop    edx
c0014094:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014098:	e8 11 3a ff ff       	call   c0007aae <malloc>
c001409d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140a5:	31 c9                	xor    ecx,ecx
c00140a7:	5e                   	pop    esi
c00140a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140aa:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00140ae:	55                   	push   ebp
c00140af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b3:	51                   	push   ecx
c00140b4:	52                   	push   edx
c00140b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00140b9:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00140bd:	53                   	push   ebx
c00140be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c1:	83 c4 14             	add    esp,0x14
c00140c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140c8:	e8 e1 39 ff ff       	call   c0007aae <malloc>
c00140cd:	89 c6                	mov    esi,eax
c00140cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140d4:	56                   	push   esi
c00140d5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00140dd:	51                   	push   ecx
c00140de:	52                   	push   edx
c00140df:	53                   	push   ebx
c00140e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140e7:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c00140ed:	83 c4 1c             	add    esp,0x1c
c00140f0:	c1 e8 04             	shr    eax,0x4
c00140f3:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c00140fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140fe:	31 d2                	xor    edx,edx
c0014100:	52                   	push   edx
c0014101:	50                   	push   eax
c0014102:	53                   	push   ebx
c0014103:	e8 02 72 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014108:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001410a:	31 d2                	xor    edx,edx
c001410c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001410f:	56                   	push   esi
c0014110:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014114:	52                   	push   edx
c0014115:	50                   	push   eax
c0014116:	53                   	push   ebx
c0014117:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001411a:	83 c4 14             	add    esp,0x14
c001411d:	53                   	push   ebx
c001411e:	e8 87 71 ff ff       	call   c000b2aa <File::close()>
c0014123:	5d                   	pop    ebp
c0014124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014128:	e8 91 39 ff ff       	call   c0007abe <free>
c001412d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014130:	e8 89 39 ff ff       	call   c0007abe <free>
c0014135:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c001413a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001413e:	8d 50 01             	lea    edx,[eax+0x1]
c0014141:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0014148:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c001414f:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	b0 01                	mov    al,0x1
c001415a:	83 c4 5c             	add    esp,0x5c
c001415d:	5b                   	pop    ebx
c001415e:	5e                   	pop    esi
c001415f:	5f                   	pop    edi
c0014160:	5d                   	pop    ebp
c0014161:	c3                   	ret    

c0014162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014162:	55                   	push   ebp
c0014163:	57                   	push   edi
c0014164:	56                   	push   esi
c0014165:	53                   	push   ebx
c0014166:	81 ec 68 03 00 00    	sub    esp,0x368
c001416c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014173:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0014179:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001417d:	68 14 01 00 00       	push   0x114
c0014182:	e8 27 39 ff ff       	call   c0007aae <malloc>
c0014187:	83 c4 0c             	add    esp,0xc
c001418a:	89 c5                	mov    ebp,eax
c001418c:	53                   	push   ebx
c001418d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014194:	50                   	push   eax
c0014195:	e8 f6 6f ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001419a:	5e                   	pop    esi
c001419b:	5f                   	pop    edi
c001419c:	6a 01                	push   0x1
c001419e:	55                   	push   ebp
c001419f:	e8 a8 70 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00141a4:	83 c4 10             	add    esp,0x10
c00141a7:	85 c0                	test   eax,eax
c00141a9:	0f 85 aa 06 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00141af:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00141b7:	83 ec 0c             	sub    esp,0xc
c00141ba:	6a 34                	push   0x34
c00141bc:	e8 ed 38 ff ff       	call   c0007aae <malloc>
c00141c1:	5b                   	pop    ebx
c00141c2:	89 c7                	mov    edi,eax
c00141c4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00141c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00141cb:	53                   	push   ebx
c00141cc:	57                   	push   edi
c00141cd:	6a 00                	push   0x0
c00141cf:	6a 34                	push   0x34
c00141d1:	55                   	push   ebp
c00141d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141d5:	83 c4 20             	add    esp,0x20
c00141d8:	85 c0                	test   eax,eax
c00141da:	0f 85 79 06 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00141e0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00141e6:	0f 85 6d 06 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00141ec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00141ef:	85 c0                	test   eax,eax
c00141f1:	0f 84 62 06 00 00    	je     c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00141f7:	31 d2                	xor    edx,edx
c00141f9:	51                   	push   ecx
c00141fa:	52                   	push   edx
c00141fb:	50                   	push   eax
c00141fc:	55                   	push   ebp
c00141fd:	e8 08 71 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014202:	83 c4 10             	add    esp,0x10
c0014205:	85 c0                	test   eax,eax
c0014207:	0f 85 4c 06 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001420d:	83 ec 0c             	sub    esp,0xc
c0014210:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014213:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014217:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001421b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001421f:	0f af c2             	imul   eax,edx
c0014222:	50                   	push   eax
c0014223:	e8 86 38 ff ff       	call   c0007aae <malloc>
c0014228:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001422b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001422f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014236:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001423a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001423e:	0f af c2             	imul   eax,edx
c0014241:	99                   	cdq    
c0014242:	52                   	push   edx
c0014243:	50                   	push   eax
c0014244:	55                   	push   ebp
c0014245:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014248:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001424b:	83 c4 20             	add    esp,0x20
c001424e:	85 c0                	test   eax,eax
c0014250:	0f 84 03 06 00 00    	je     c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014256:	52                   	push   edx
c0014257:	31 d2                	xor    edx,edx
c0014259:	52                   	push   edx
c001425a:	50                   	push   eax
c001425b:	55                   	push   ebp
c001425c:	e8 a9 70 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	85 c0                	test   eax,eax
c0014266:	0f 85 ed 05 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001426c:	83 ec 0c             	sub    esp,0xc
c001426f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014273:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014277:	31 f6                	xor    esi,esi
c0014279:	0f af c2             	imul   eax,edx
c001427c:	50                   	push   eax
c001427d:	e8 2c 38 ff ff       	call   c0007aae <malloc>
c0014282:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014285:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001428c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014290:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014294:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014298:	0f af c2             	imul   eax,edx
c001429b:	99                   	cdq    
c001429c:	52                   	push   edx
c001429d:	50                   	push   eax
c001429e:	55                   	push   ebp
c001429f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142a2:	83 c4 20             	add    esp,0x20
c00142a5:	0f b7 de             	movzx  ebx,si
c00142a8:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00142ac:	0f 83 87 00 00 00    	jae    c0014339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00142b2:	c1 e3 05             	shl    ebx,0x5
c00142b5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00142b9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00142bc:	75 75                	jne    c0014333 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00142be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00142c1:	31 d2                	xor    edx,edx
c00142c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00142ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142ce:	50                   	push   eax
c00142cf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142d2:	52                   	push   edx
c00142d3:	50                   	push   eax
c00142d4:	55                   	push   ebp
c00142d5:	e8 30 70 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00142da:	83 c4 10             	add    esp,0x10
c00142dd:	85 c0                	test   eax,eax
c00142df:	0f 85 74 05 00 00    	jne    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142e5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00142ec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142ef:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00142f3:	31 d2                	xor    edx,edx
c00142f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00142f9:	83 ec 0c             	sub    esp,0xc
c00142fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014300:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014307:	50                   	push   eax
c0014308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001430c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014310:	52                   	push   edx
c0014311:	50                   	push   eax
c0014312:	55                   	push   ebp
c0014313:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014316:	83 c4 1c             	add    esp,0x1c
c0014319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001431c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001431f:	50                   	push   eax
c0014320:	6a 00                	push   0x0
c0014322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014326:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001432a:	50                   	push   eax
c001432b:	e8 c0 c1 fe ff       	call   c00004f0 <memset>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	46                   	inc    esi
c0014334:	e9 6c ff ff ff       	jmp    c00142a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014339:	53                   	push   ebx
c001433a:	31 db                	xor    ebx,ebx
c001433c:	68 00 01 00 00       	push   0x100
c0014341:	6a 00                	push   0x0
c0014343:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014347:	50                   	push   eax
c0014348:	e8 a3 c1 fe ff       	call   c00004f0 <memset>
c001434d:	83 c4 0c             	add    esp,0xc
c0014350:	68 00 01 00 00       	push   0x100
c0014355:	6a 00                	push   0x0
c0014357:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001435e:	50                   	push   eax
c001435f:	e8 8c c1 fe ff       	call   c00004f0 <memset>
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001436f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014377:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001437f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014387:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001438f:	0f b7 f3             	movzx  esi,bx
c0014392:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014396:	0f 83 2d 01 00 00    	jae    c00144c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001439c:	6b f6 28             	imul   esi,esi,0x28
c001439f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00143a3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00143a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143aa:	52                   	push   edx
c00143ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00143af:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00143b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00143b5:	6b d2 28             	imul   edx,edx,0x28
c00143b8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00143bc:	31 d2                	xor    edx,edx
c00143be:	52                   	push   edx
c00143bf:	50                   	push   eax
c00143c0:	55                   	push   ebp
c00143c1:	e8 44 6f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00143c6:	83 c4 0c             	add    esp,0xc
c00143c9:	6a 20                	push   0x20
c00143cb:	6a 00                	push   0x0
c00143cd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143d4:	51                   	push   ecx
c00143d5:	e8 16 c1 fe ff       	call   c00004f0 <memset>
c00143da:	59                   	pop    ecx
c00143db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143de:	8d 54 24 58          	lea    edx,[esp+0x58]
c00143e2:	52                   	push   edx
c00143e3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00143ea:	51                   	push   ecx
c00143eb:	6a 00                	push   0x0
c00143ed:	6a 1f                	push   0x1f
c00143ef:	55                   	push   ebp
c00143f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143f3:	83 c4 1c             	add    esp,0x1c
c00143f6:	6a 09                	push   0x9
c00143f8:	68 f3 17 02 c0       	push   0xc00217f3
c00143fd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014404:	51                   	push   ecx
c0014405:	e8 76 bf fe ff       	call   c0000380 <memcmp>
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	85 c0                	test   eax,eax
c001440f:	75 21                	jne    c0014432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014415:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014419:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001441d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014421:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014424:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001442b:	89 d0                	mov    eax,edx
c001442d:	40                   	inc    eax
c001442e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014432:	50                   	push   eax
c0014433:	6a 09                	push   0x9
c0014435:	68 fd 17 02 c0       	push   0xc00217fd
c001443a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014441:	50                   	push   eax
c0014442:	e8 39 bf fe ff       	call   c0000380 <memcmp>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	85 c0                	test   eax,eax
c001444c:	75 21                	jne    c001446f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001444e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014452:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014456:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001445a:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001445e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014461:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014468:	89 d0                	mov    eax,edx
c001446a:	40                   	inc    eax
c001446b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001446f:	50                   	push   eax
c0014470:	50                   	push   eax
c0014471:	68 c9 17 02 c0       	push   0xc00217c9
c0014476:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001447d:	50                   	push   eax
c001447e:	e8 cd c2 fe ff       	call   c0000750 <strcmp>
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	85 c0                	test   eax,eax
c0014488:	75 0f                	jne    c0014499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001448a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001448d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014491:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014495:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014499:	50                   	push   eax
c001449a:	50                   	push   eax
c001449b:	68 d1 17 02 c0       	push   0xc00217d1
c00144a0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144a7:	50                   	push   eax
c00144a8:	e8 a3 c2 fe ff       	call   c0000750 <strcmp>
c00144ad:	83 c4 10             	add    esp,0x10
c00144b0:	85 c0                	test   eax,eax
c00144b2:	75 0f                	jne    c00144c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00144b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00144c3:	43                   	inc    ebx
c00144c4:	e9 c6 fe ff ff       	jmp    c001438f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00144c9:	31 d2                	xor    edx,edx
c00144cb:	50                   	push   eax
c00144cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d0:	52                   	push   edx
c00144d1:	50                   	push   eax
c00144d2:	55                   	push   ebp
c00144d3:	e8 32 6e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00144d8:	58                   	pop    eax
c00144d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144dd:	e8 cc 35 ff ff       	call   c0007aae <malloc>
c00144e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00144e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00144e9:	31 d2                	xor    edx,edx
c00144eb:	58                   	pop    eax
c00144ec:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00144f0:	53                   	push   ebx
c00144f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00144f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144f9:	52                   	push   edx
c00144fa:	50                   	push   eax
c00144fb:	55                   	push   ebp
c00144fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ff:	83 c4 14             	add    esp,0x14
c0014502:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014506:	e8 a3 35 ff ff       	call   c0007aae <malloc>
c001450b:	31 d2                	xor    edx,edx
c001450d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014511:	83 c4 0c             	add    esp,0xc
c0014514:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014518:	52                   	push   edx
c0014519:	50                   	push   eax
c001451a:	55                   	push   ebp
c001451b:	e8 ea 6d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014520:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014523:	31 d2                	xor    edx,edx
c0014525:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014528:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014530:	52                   	push   edx
c0014531:	50                   	push   eax
c0014532:	55                   	push   ebp
c0014533:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014536:	83 c4 20             	add    esp,0x20
c0014539:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001453e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014546:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001454a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001454e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014552:	0f 84 05 03 00 00    	je     c001485d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014558:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001455f:	31 d2                	xor    edx,edx
c0014561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014565:	c1 e8 03             	shr    eax,0x3
c0014568:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001456c:	51                   	push   ecx
c001456d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014571:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014575:	52                   	push   edx
c0014576:	50                   	push   eax
c0014577:	55                   	push   ebp
c0014578:	e8 8d 6d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001457d:	5b                   	pop    ebx
c001457e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014582:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014589:	e8 20 35 ff ff       	call   c0007aae <malloc>
c001458e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014591:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014595:	31 d2                	xor    edx,edx
c0014597:	5e                   	pop    esi
c0014598:	8d 44 24 58          	lea    eax,[esp+0x58]
c001459c:	50                   	push   eax
c001459d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00145a5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00145ac:	52                   	push   edx
c00145ad:	50                   	push   eax
c00145ae:	55                   	push   ebp
c00145af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145b2:	83 c4 20             	add    esp,0x20
c00145b5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00145bd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00145c1:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00145c5:	0f 8d 76 02 00 00    	jge    c0014841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00145cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00145cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145d3:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00145d8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00145db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e3:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00145e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145eb:	c1 e8 08             	shr    eax,0x8
c00145ee:	89 c6                	mov    esi,eax
c00145f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00145f4:	c1 e6 04             	shl    esi,0x4
c00145f7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00145fb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00145fe:	85 db                	test   ebx,ebx
c0014600:	0f 85 b3 00 00 00    	jne    c00146b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014606:	83 ec 0c             	sub    esp,0xc
c0014609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001460d:	03 06                	add    eax,DWORD PTR [esi]
c001460f:	50                   	push   eax
c0014610:	e8 40 f8 ff ff       	call   c0013e55 <Thr::getAddressOfKernelSymbol(char const*)>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	89 c3                	mov    ebx,eax
c001461a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001461f:	85 c0                	test   eax,eax
c0014621:	0f 85 92 00 00 00    	jne    c00146b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014627:	83 ec 0c             	sub    esp,0xc
c001462a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001462e:	03 06                	add    eax,DWORD PTR [esi]
c0014630:	50                   	push   eax
c0014631:	e8 6e c7 ff ff       	call   c0010da4 <KeResolveCompatibilitySymbol(char*)>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	89 c3                	mov    ebx,eax
c001463b:	85 c0                	test   eax,eax
c001463d:	75 7a                	jne    c00146b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001463f:	51                   	push   ecx
c0014640:	51                   	push   ecx
c0014641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014645:	03 06                	add    eax,DWORD PTR [esi]
c0014647:	50                   	push   eax
c0014648:	68 07 18 02 c0       	push   0xc0021807
c001464d:	e8 e7 62 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014652:	58                   	pop    eax
c0014653:	5a                   	pop    edx
c0014654:	68 21 18 02 c0       	push   0xc0021821
c0014659:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014660:	50                   	push   eax
c0014661:	e8 da bf fe ff       	call   c0000640 <strcpy>
c0014666:	59                   	pop    ecx
c0014667:	58                   	pop    eax
c0014668:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001466c:	03 06                	add    eax,DWORD PTR [esi]
c001466e:	50                   	push   eax
c001466f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014676:	50                   	push   eax
c0014677:	e8 c4 c1 fe ff       	call   c0000840 <strcat>
c001467c:	58                   	pop    eax
c001467d:	5a                   	pop    edx
c001467e:	68 b7 18 02 c0       	push   0xc00218b7
c0014683:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001468a:	50                   	push   eax
c001468b:	e8 b0 c1 fe ff       	call   c0000840 <strcat>
c0014690:	83 c4 10             	add    esp,0x10
c0014693:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014698:	0f 84 5d 01 00 00    	je     c00147fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00146a8:	50                   	push   eax
c00146a9:	e8 0b c5 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00146ae:	83 c4 10             	add    esp,0x10
c00146b1:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00146b5:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00146b9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00146be:	83 f8 01             	cmp    eax,0x1
c00146c1:	0f 85 8f 00 00 00    	jne    c0014756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00146c7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00146ce:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00146d2:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00146d6:	01 ce                	add    esi,ecx
c00146d8:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00146e0:	0f 94 c0             	sete   al
c00146e3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00146eb:	0f 94 c2             	sete   dl
c00146ee:	09 c2                	or     edx,eax
c00146f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00146f2:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00146f7:	0f b6 d2             	movzx  edx,dl
c00146fa:	74 41                	je     c001473d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00146fc:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00146ff:	85 d2                	test   edx,edx
c0014701:	75 15                	jne    c0014718 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014703:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014707:	66 83 f8 0c          	cmp    ax,0xc
c001470b:	76 05                	jbe    c0014712 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001470d:	b8 0c 00 00 00       	mov    eax,0xc
c0014712:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014716:	76 37                	jbe    c001474f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014718:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001471c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014721:	0f 84 d4 00 00 00    	je     c00147fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014727:	83 ec 0c             	sub    esp,0xc
c001472a:	68 38 18 02 c0       	push   0xc0021838
c001472f:	e8 85 c4 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001473b:	eb 12                	jmp    c001474f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001473d:	01 c1                	add    ecx,eax
c001473f:	85 d2                	test   edx,edx
c0014741:	75 0c                	jne    c001474f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014743:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014747:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001474b:	77 02                	ja     c001474f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001474d:	01 d9                	add    ecx,ebx
c001474f:	89 0e                	mov    DWORD PTR [esi],ecx
c0014751:	e9 e2 00 00 00       	jmp    c0014838 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014756:	83 f8 02             	cmp    eax,0x2
c0014759:	75 77                	jne    c00147d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001475b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014762:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014766:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001476a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014772:	74 21                	je     c0014795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014774:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001477c:	74 17                	je     c0014795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001477e:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014782:	b8 0a 00 00 00       	mov    eax,0xa
c0014787:	83 fa 0e             	cmp    edx,0xe
c001478a:	77 03                	ja     c001478f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001478c:	8d 42 fc             	lea    eax,[edx-0x4]
c001478f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014793:	76 17                	jbe    c00147ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014795:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001479a:	74 5f                	je     c00147fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	68 54 18 02 c0       	push   0xc0021854
c00147a4:	e8 10 c4 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00147a9:	83 c4 10             	add    esp,0x10
c00147ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00147ae:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00147b3:	74 13                	je     c00147c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00147b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147b9:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00147c0:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00147c4:	01 d0                	add    eax,edx
c00147c6:	eb 04                	jmp    c00147cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00147c8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00147cc:	01 c3                	add    ebx,eax
c00147ce:	89 1e                	mov    DWORD PTR [esi],ebx
c00147d0:	eb 66                	jmp    c0014838 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00147d2:	52                   	push   edx
c00147d3:	52                   	push   edx
c00147d4:	50                   	push   eax
c00147d5:	68 70 18 02 c0       	push   0xc0021870
c00147da:	e8 5a 61 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00147df:	83 c4 10             	add    esp,0x10
c00147e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147e7:	74 12                	je     c00147fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147e9:	83 ec 0c             	sub    esp,0xc
c00147ec:	68 7b 18 02 c0       	push   0xc002187b
c00147f1:	e8 c3 c3 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	eb 3d                	jmp    c0014838 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	55                   	push   ebp
c00147ff:	e8 a6 6a ff ff       	call   c000b2aa <File::close()>
c0014804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014807:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001480a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001480d:	59                   	pop    ecx
c001480e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014812:	e8 a7 32 ff ff       	call   c0007abe <free>
c0014817:	5b                   	pop    ebx
c0014818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001481c:	e8 9d 32 ff ff       	call   c0007abe <free>
c0014821:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014824:	e8 95 32 ff ff       	call   c0007abe <free>
c0014829:	5e                   	pop    esi
c001482a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482e:	e8 8b 32 ff ff       	call   c0007abe <free>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	eb 21                	jmp    c0014859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014838:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001483c:	e9 7c fd ff ff       	jmp    c00145bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014841:	83 ec 0c             	sub    esp,0xc
c0014844:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014848:	e8 71 32 ff ff       	call   c0007abe <free>
c001484d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	e9 f1 fc ff ff       	jmp    c001454a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014859:	31 c0                	xor    eax,eax
c001485b:	eb 33                	jmp    c0014890 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001485d:	83 ec 0c             	sub    esp,0xc
c0014860:	55                   	push   ebp
c0014861:	e8 44 6a ff ff       	call   c000b2aa <File::close()>
c0014866:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014869:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001486c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001486f:	58                   	pop    eax
c0014870:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014874:	e8 45 32 ff ff       	call   c0007abe <free>
c0014879:	89 3c 24             	mov    DWORD PTR [esp],edi
c001487c:	e8 3d 32 ff ff       	call   c0007abe <free>
c0014881:	5a                   	pop    edx
c0014882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014886:	e8 33 32 ff ff       	call   c0007abe <free>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	b0 01                	mov    al,0x1
c0014890:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014896:	5b                   	pop    ebx
c0014897:	5e                   	pop    esi
c0014898:	5f                   	pop    edi
c0014899:	5d                   	pop    ebp
c001489a:	c3                   	ret    

c001489b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001489b:	56                   	push   esi
c001489c:	31 d2                	xor    edx,edx
c001489e:	53                   	push   ebx
c001489f:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00148a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148a9:	39 d3                	cmp    ebx,edx
c00148ab:	7e 1b                	jle    c00148c8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00148ad:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c00148b4:	39 c8                	cmp    eax,ecx
c00148b6:	77 0d                	ja     c00148c5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00148b8:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00148bf:	01 c6                	add    esi,eax
c00148c1:	39 ce                	cmp    esi,ecx
c00148c3:	77 05                	ja     c00148ca <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00148c5:	42                   	inc    edx
c00148c6:	eb e1                	jmp    c00148a9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00148c8:	31 c0                	xor    eax,eax
c00148ca:	5b                   	pop    ebx
c00148cb:	5e                   	pop    esi
c00148cc:	c3                   	ret    

c00148cd <Thr::getDriverNameFromAddress(unsigned long)>:
c00148cd:	53                   	push   ebx
c00148ce:	31 c0                	xor    eax,eax
c00148d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00148d4:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00148da:	39 c3                	cmp    ebx,eax
c00148dc:	7e 22                	jle    c0014900 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00148de:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00148e5:	39 ca                	cmp    edx,ecx
c00148e7:	77 14                	ja     c00148fd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148e9:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00148f0:	39 ca                	cmp    edx,ecx
c00148f2:	76 09                	jbe    c00148fd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148f4:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00148fb:	eb 05                	jmp    c0014902 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148fd:	40                   	inc    eax
c00148fe:	eb da                	jmp    c00148da <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014900:	31 c0                	xor    eax,eax
c0014902:	5b                   	pop    ebx
c0014903:	c3                   	ret    

c0014904 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014904:	53                   	push   ebx
c0014905:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014909:	53                   	push   ebx
c001490a:	e8 8c ff ff ff       	call   c001489b <Thr::getDriverBaseFromAddress(unsigned long)>
c001490f:	5a                   	pop    edx
c0014910:	31 d2                	xor    edx,edx
c0014912:	85 c0                	test   eax,eax
c0014914:	74 04                	je     c001491a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014916:	89 da                	mov    edx,ebx
c0014918:	29 c2                	sub    edx,eax
c001491a:	89 d0                	mov    eax,edx
c001491c:	5b                   	pop    ebx
c001491d:	c3                   	ret    

c001491e <Thr::loadDLL(char const*, bool)>:
c001491e:	55                   	push   ebp
c001491f:	57                   	push   edi
c0014920:	56                   	push   esi
c0014921:	53                   	push   ebx
c0014922:	81 ec 34 01 00 00    	sub    esp,0x134
c0014928:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001492f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014936:	56                   	push   esi
c0014937:	68 93 18 02 c0       	push   0xc0021893
c001493c:	e8 f8 5f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014941:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014948:	e8 61 31 ff ff       	call   c0007aae <malloc>
c001494d:	83 c4 0c             	add    esp,0xc
c0014950:	89 c3                	mov    ebx,eax
c0014952:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014958:	56                   	push   esi
c0014959:	50                   	push   eax
c001495a:	e8 31 68 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001495f:	83 c4 10             	add    esp,0x10
c0014962:	85 db                	test   ebx,ebx
c0014964:	75 3c                	jne    c00149a2 <Thr::loadDLL(char const*, bool)+0x84>
c0014966:	89 f8                	mov    eax,edi
c0014968:	84 c0                	test   al,al
c001496a:	0f 84 d2 01 00 00    	je     c0014b42 <Thr::loadDLL(char const*, bool)+0x224>
c0014970:	55                   	push   ebp
c0014971:	55                   	push   ebp
c0014972:	68 a4 18 02 c0       	push   0xc00218a4
c0014977:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001497b:	55                   	push   ebp
c001497c:	e8 bf bc fe ff       	call   c0000640 <strcpy>
c0014981:	58                   	pop    eax
c0014982:	5a                   	pop    edx
c0014983:	56                   	push   esi
c0014984:	55                   	push   ebp
c0014985:	e8 b6 be fe ff       	call   c0000840 <strcat>
c001498a:	59                   	pop    ecx
c001498b:	58                   	pop    eax
c001498c:	68 b7 18 02 c0       	push   0xc00218b7
c0014991:	55                   	push   ebp
c0014992:	e8 a9 be fe ff       	call   c0000840 <strcat>
c0014997:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001499a:	e8 1a c2 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001499f:	83 c4 10             	add    esp,0x10
c00149a2:	51                   	push   ecx
c00149a3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00149a7:	50                   	push   eax
c00149a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00149ac:	50                   	push   eax
c00149ad:	53                   	push   ebx
c00149ae:	e8 45 6b ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c00149b3:	83 c4 10             	add    esp,0x10
c00149b6:	85 db                	test   ebx,ebx
c00149b8:	74 0c                	je     c00149c6 <Thr::loadDLL(char const*, bool)+0xa8>
c00149ba:	83 ec 0c             	sub    esp,0xc
c00149bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149bf:	53                   	push   ebx
c00149c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149c3:	83 c4 10             	add    esp,0x10
c00149c6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00149cb:	75 0a                	jne    c00149d7 <Thr::loadDLL(char const*, bool)+0xb9>
c00149cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00149d5:	75 3c                	jne    c0014a13 <Thr::loadDLL(char const*, bool)+0xf5>
c00149d7:	89 f8                	mov    eax,edi
c00149d9:	84 c0                	test   al,al
c00149db:	0f 84 49 01 00 00    	je     c0014b2a <Thr::loadDLL(char const*, bool)+0x20c>
c00149e1:	51                   	push   ecx
c00149e2:	51                   	push   ecx
c00149e3:	68 a4 18 02 c0       	push   0xc00218a4
c00149e8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149ec:	53                   	push   ebx
c00149ed:	e8 4e bc fe ff       	call   c0000640 <strcpy>
c00149f2:	5d                   	pop    ebp
c00149f3:	58                   	pop    eax
c00149f4:	56                   	push   esi
c00149f5:	53                   	push   ebx
c00149f6:	e8 45 be fe ff       	call   c0000840 <strcat>
c00149fb:	58                   	pop    eax
c00149fc:	5a                   	pop    edx
c00149fd:	68 b7 18 02 c0       	push   0xc00218b7
c0014a02:	53                   	push   ebx
c0014a03:	e8 38 be fe ff       	call   c0000840 <strcat>
c0014a08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a0b:	e8 a9 c1 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014a10:	83 c4 10             	add    esp,0x10
c0014a13:	52                   	push   edx
c0014a14:	6a 03                	push   0x3
c0014a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a1e:	05 ff 0f 00 00       	add    eax,0xfff
c0014a23:	83 d2 00             	adc    edx,0x0
c0014a26:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a2a:	50                   	push   eax
c0014a2b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014a31:	e8 e2 53 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c0014a36:	59                   	pop    ecx
c0014a37:	89 c3                	mov    ebx,eax
c0014a39:	5d                   	pop    ebp
c0014a3a:	50                   	push   eax
c0014a3b:	68 12 00 02 c0       	push   0xc0020012
c0014a40:	e8 f4 5e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014a45:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a48:	e8 23 bb fe ff       	call   c0000570 <strlen>
c0014a4d:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c0014a53:	40                   	inc    eax
c0014a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a57:	e8 52 30 ff ff       	call   c0007aae <malloc>
c0014a5c:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014a63:	58                   	pop    eax
c0014a64:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a69:	5a                   	pop    edx
c0014a6a:	56                   	push   esi
c0014a6b:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014a72:	e8 c9 bb fe ff       	call   c0000640 <strcpy>
c0014a77:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a7f:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014a86:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014a8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a90:	83 c4 0c             	add    esp,0xc
c0014a93:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014a9a:	6a 01                	push   0x1
c0014a9c:	53                   	push   ebx
c0014a9d:	56                   	push   esi
c0014a9e:	e8 bf f6 ff ff       	call   c0014162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b6 c0             	movzx  eax,al
c0014aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014aad:	85 c0                	test   eax,eax
c0014aaf:	0f 85 89 00 00 00    	jne    c0014b3e <Thr::loadDLL(char const*, bool)+0x220>
c0014ab5:	89 f8                	mov    eax,edi
c0014ab7:	84 c0                	test   al,al
c0014ab9:	74 73                	je     c0014b2e <Thr::loadDLL(char const*, bool)+0x210>
c0014abb:	83 ec 0c             	sub    esp,0xc
c0014abe:	68 b9 18 02 c0       	push   0xc00218b9
c0014ac3:	e8 f1 c0 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014ac8:	83 c4 10             	add    esp,0x10
c0014acb:	eb 61                	jmp    c0014b2e <Thr::loadDLL(char const*, bool)+0x210>
c0014acd:	50                   	push   eax
c0014ace:	50                   	push   eax
c0014acf:	89 e8                	mov    eax,ebp
c0014ad1:	c1 e0 0c             	shl    eax,0xc
c0014ad4:	01 d8                	add    eax,ebx
c0014ad6:	50                   	push   eax
c0014ad7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014add:	e8 1e 4e ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ae7:	a8 60                	test   al,0x60
c0014ae9:	75 11                	jne    c0014afc <Thr::loadDLL(char const*, bool)+0x1de>
c0014aeb:	83 ec 0c             	sub    esp,0xc
c0014aee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014af3:	50                   	push   eax
c0014af4:	e8 50 32 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0014af9:	83 c4 10             	add    esp,0x10
c0014afc:	45                   	inc    ebp
c0014afd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b05:	05 ff 0f 00 00       	add    eax,0xfff
c0014b0a:	bf 00 00 00 00       	mov    edi,0x0
c0014b0f:	83 d2 00             	adc    edx,0x0
c0014b12:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b16:	c1 ea 0c             	shr    edx,0xc
c0014b19:	39 c5                	cmp    ebp,eax
c0014b1b:	89 d1                	mov    ecx,edx
c0014b1d:	89 f8                	mov    eax,edi
c0014b1f:	19 c8                	sbb    eax,ecx
c0014b21:	72 aa                	jb     c0014acd <Thr::loadDLL(char const*, bool)+0x1af>
c0014b23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014b28:	75 18                	jne    c0014b42 <Thr::loadDLL(char const*, bool)+0x224>
c0014b2a:	31 db                	xor    ebx,ebx
c0014b2c:	eb 14                	jmp    c0014b42 <Thr::loadDLL(char const*, bool)+0x224>
c0014b2e:	83 ec 0c             	sub    esp,0xc
c0014b31:	68 d8 18 02 c0       	push   0xc00218d8
c0014b36:	e8 7e c0 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014b3b:	83 c4 10             	add    esp,0x10
c0014b3e:	31 ed                	xor    ebp,ebp
c0014b40:	eb bb                	jmp    c0014afd <Thr::loadDLL(char const*, bool)+0x1df>
c0014b42:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b48:	89 d8                	mov    eax,ebx
c0014b4a:	5b                   	pop    ebx
c0014b4b:	5e                   	pop    esi
c0014b4c:	5f                   	pop    edi
c0014b4d:	5d                   	pop    ebp
c0014b4e:	c3                   	ret    

c0014b4f <Thr::executeDLL(unsigned long, void*)>:
c0014b4f:	56                   	push   esi
c0014b50:	53                   	push   ebx
c0014b51:	52                   	push   edx
c0014b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b56:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b5a:	85 db                	test   ebx,ebx
c0014b5c:	75 10                	jne    c0014b6e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b5e:	83 ec 0c             	sub    esp,0xc
c0014b61:	68 f4 18 02 c0       	push   0xc00218f4
c0014b66:	e8 4e c0 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0014b6b:	83 c4 10             	add    esp,0x10
c0014b6e:	50                   	push   eax
c0014b6f:	50                   	push   eax
c0014b70:	53                   	push   ebx
c0014b71:	68 1e 19 02 c0       	push   0xc002191e
c0014b76:	e8 be 5d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014b7b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b7f:	89 d8                	mov    eax,ebx
c0014b81:	83 c4 14             	add    esp,0x14
c0014b84:	5b                   	pop    ebx
c0014b85:	5e                   	pop    esi
c0014b86:	ff e0                	jmp    eax

c0014b88 <userModeEntryPoint(void*)>:
c0014b88:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014b8d:	83 e8 01             	sub    eax,0x1
c0014b90:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014b95:	75 01                	jne    c0014b98 <userModeEntryPoint(void*)+0x10>
c0014b97:	fb                   	sti    
c0014b98:	fb                   	sti    
c0014b99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ba1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014ba7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bab:	e9 8f b6 fe ff       	jmp    c000023f <goToUsermode>

c0014bb0 <changeTSS>:
c0014bb0:	83 ec 14             	sub    esp,0x14
c0014bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014bbb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014bc0:	c1 e2 15             	shl    edx,0x15
c0014bc3:	29 d0                	sub    eax,edx
c0014bc5:	50                   	push   eax
c0014bc6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014bcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bd1:	05 7c 11 00 00       	add    eax,0x117c
c0014bd6:	50                   	push   eax
c0014bd7:	e8 6c 43 ff ff       	call   c0008f48 <TSS::setESP(unsigned long)>
c0014bdc:	83 c4 1c             	add    esp,0x1c
c0014bdf:	c3                   	ret    

c0014be0 <switchToThread(ThreadControlBlock*)>:
c0014be0:	57                   	push   edi
c0014be1:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014be7:	56                   	push   esi
c0014be8:	85 c9                	test   ecx,ecx
c0014bea:	53                   	push   ebx
c0014beb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bef:	0f 85 8b 00 00 00    	jne    c0014c80 <switchToThread(ThreadControlBlock*)+0xa0>
c0014bf5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014bf9:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014bff:	74 7b                	je     c0014c7c <switchToThread(ThreadControlBlock*)+0x9c>
c0014c01:	b8 00 04 00 00       	mov    eax,0x400
c0014c06:	29 d0                	sub    eax,edx
c0014c08:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c0b:	d1 f8                	sar    eax,1
c0014c0d:	01 d0                	add    eax,edx
c0014c0f:	90                   	nop
c0014c10:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c13:	e8 1e 28 00 00       	call   c0017436 <HalQueryPerformanceCounter()>
c0014c18:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014c1d:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014c23:	89 c6                	mov    esi,eax
c0014c25:	89 d7                	mov    edi,edx
c0014c27:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014c2d:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014c32:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014c38:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014c3e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014c44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c4a:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014c50:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014c53:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014c56:	01 c6                	add    esi,eax
c0014c58:	11 d7                	adc    edi,edx
c0014c5a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014c5d:	83 ec 0c             	sub    esp,0xc
c0014c60:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014c63:	53                   	push   ebx
c0014c64:	e8 0e b6 fe ff       	call   c0000277 <switchToThreadASM>
c0014c69:	0f 20 c0             	mov    eax,cr0
c0014c6c:	83 c8 08             	or     eax,0x8
c0014c6f:	0f 22 c0             	mov    cr0,eax
c0014c72:	83 c4 10             	add    esp,0x10
c0014c75:	5b                   	pop    ebx
c0014c76:	5e                   	pop    esi
c0014c77:	5f                   	pop    edi
c0014c78:	c3                   	ret    
c0014c79:	8d 76 00             	lea    esi,[esi+0x0]
c0014c7c:	31 c0                	xor    eax,eax
c0014c7e:	eb 90                	jmp    c0014c10 <switchToThread(ThreadControlBlock*)+0x30>
c0014c80:	5b                   	pop    ebx
c0014c81:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014c8b:	5e                   	pop    esi
c0014c8c:	5f                   	pop    edi
c0014c8d:	c3                   	ret    
c0014c8e:	66 90                	xchg   ax,ax

c0014c90 <Process::addArgs(char**)>:
c0014c90:	57                   	push   edi
c0014c91:	56                   	push   esi
c0014c92:	53                   	push   ebx
c0014c93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c97:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014c9b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014ca5:	85 ff                	test   edi,edi
c0014ca7:	74 4f                	je     c0014cf8 <Process::addArgs(char**)+0x68>
c0014ca9:	8b 07                	mov    eax,DWORD PTR [edi]
c0014cab:	85 c0                	test   eax,eax
c0014cad:	74 49                	je     c0014cf8 <Process::addArgs(char**)+0x68>
c0014caf:	31 db                	xor    ebx,ebx
c0014cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	50                   	push   eax
c0014cb8:	e8 b3 b8 fe ff       	call   c0000570 <strlen>
c0014cbd:	83 c0 01             	add    eax,0x1
c0014cc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cc3:	e8 e6 2d ff ff       	call   c0007aae <malloc>
c0014cc8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014ccf:	5a                   	pop    edx
c0014cd0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014cd3:	59                   	pop    ecx
c0014cd4:	83 c3 01             	add    ebx,0x1
c0014cd7:	52                   	push   edx
c0014cd8:	50                   	push   eax
c0014cd9:	e8 62 b9 fe ff       	call   c0000640 <strcpy>
c0014cde:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	83 c1 01             	add    ecx,0x1
c0014cea:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014cf0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014cf3:	85 c0                	test   eax,eax
c0014cf5:	75 bd                	jne    c0014cb4 <Process::addArgs(char**)+0x24>
c0014cf7:	90                   	nop
c0014cf8:	5b                   	pop    ebx
c0014cf9:	5e                   	pop    esi
c0014cfa:	5f                   	pop    edi
c0014cfb:	c3                   	ret    

c0014cfc <Process::Process(char const*, Process*, char**)>:
c0014cfc:	56                   	push   esi
c0014cfd:	53                   	push   ebx
c0014cfe:	83 ec 14             	sub    esp,0x14
c0014d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d05:	05 0c 02 00 00       	add    eax,0x20c
c0014d0a:	bb 07 00 00 00       	mov    ebx,0x7
c0014d0f:	89 c6                	mov    esi,eax
c0014d11:	8d 76 00             	lea    esi,[esi+0x0]
c0014d14:	85 db                	test   ebx,ebx
c0014d16:	78 14                	js     c0014d2c <Process::Process(char const*, Process*, char**)+0x30>
c0014d18:	83 ec 0c             	sub    esp,0xc
c0014d1b:	56                   	push   esi
c0014d1c:	e8 77 a5 00 00       	call   c001f298 <ThreadControlBlock::ThreadControlBlock()>
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	83 c6 5f             	add    esi,0x5f
c0014d27:	83 eb 01             	sub    ebx,0x1
c0014d2a:	eb e8                	jmp    c0014d14 <Process::Process(char const*, Process*, char**)+0x18>
c0014d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d30:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d3b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d42:	83 ec 0c             	sub    esp,0xc
c0014d45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d49:	e8 60 bc ff ff       	call   c00109ae <KeNewProcessEnv(Process*)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	89 c2                	mov    edx,eax
c0014d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d57:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d61:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d6a:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c0014d6f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d72:	89 15 40 2b 02 c0    	mov    DWORD PTR ds:0xc0022b40,edx
c0014d78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d7c:	89 02                	mov    DWORD PTR [edx],eax
c0014d7e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014d86:	83 ec 0c             	sub    esp,0xc
c0014d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d8d:	e8 1c 2d ff ff       	call   c0007aae <malloc>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	89 c3                	mov    ebx,eax
c0014d97:	83 ec 08             	sub    esp,0x8
c0014d9a:	6a 00                	push   0x0
c0014d9c:	53                   	push   ebx
c0014d9d:	e8 ba 52 ff ff       	call   c000a05c <VAS::VAS(bool)>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014dc5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014dcb:	e8 02 c2 ff ff       	call   c0010fd2 <KeInitSignals()>
c0014dd0:	89 c2                	mov    edx,eax
c0014dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014de6:	85 c0                	test   eax,eax
c0014de8:	74 42                	je     c0014e2c <Process::Process(char const*, Process*, char**)+0x130>
c0014dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014df4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dfe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e0e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e18:	05 0c 01 00 00       	add    eax,0x10c
c0014e1d:	83 ec 08             	sub    esp,0x8
c0014e20:	52                   	push   edx
c0014e21:	50                   	push   eax
c0014e22:	e8 19 b8 fe ff       	call   c0000640 <strcpy>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	eb 64                	jmp    c0014e90 <Process::Process(char const*, Process*, char**)+0x194>
c0014e2c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014e34:	83 ec 0c             	sub    esp,0xc
c0014e37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e3b:	e8 6e 2c ff ff       	call   c0007aae <malloc>
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	89 c3                	mov    ebx,eax
c0014e45:	83 ec 08             	sub    esp,0x8
c0014e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e4c:	53                   	push   ebx
c0014e4d:	e8 06 3e ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e59:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	50                   	push   eax
c0014e6d:	e8 84 36 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e79:	05 0c 01 00 00       	add    eax,0x10c
c0014e7e:	83 ec 08             	sub    esp,0x8
c0014e81:	68 3d 19 02 c0       	push   0xc002193d
c0014e86:	50                   	push   eax
c0014e87:	e8 b4 b7 fe ff       	call   c0000640 <strcpy>
c0014e8c:	83 c4 10             	add    esp,0x10
c0014e8f:	90                   	nop
c0014e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e94:	83 c0 0c             	add    eax,0xc
c0014e97:	83 ec 08             	sub    esp,0x8
c0014e9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9e:	50                   	push   eax
c0014e9f:	e8 9c b7 fe ff       	call   c0000640 <strcpy>
c0014ea4:	83 c4 10             	add    esp,0x10
c0014ea7:	83 ec 08             	sub    esp,0x8
c0014eaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014eae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb2:	e8 d9 fd ff ff       	call   c0014c90 <Process::addArgs(char**)>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	83 ec 08             	sub    esp,0x8
c0014ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ec1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ec5:	e8 66 ed ff ff       	call   c0013c30 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014eca:	83 c4 10             	add    esp,0x10
c0014ecd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ed1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ed5:	83 f0 01             	xor    eax,0x1
c0014ed8:	88 c2                	mov    dl,al
c0014eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ede:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014ee4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014ee9:	83 ec 04             	sub    esp,0x4
c0014eec:	50                   	push   eax
c0014eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ef1:	68 94 19 02 c0       	push   0xc0021994
c0014ef6:	e8 3e 5a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014efb:	83 c4 10             	add    esp,0x10
c0014efe:	90                   	nop
c0014eff:	83 c4 14             	add    esp,0x14
c0014f02:	5b                   	pop    ebx
c0014f03:	5e                   	pop    esi
c0014f04:	c3                   	ret    
c0014f05:	90                   	nop
c0014f06:	66 90                	xchg   ax,ax

c0014f08 <Process::Process(bool, char const*, Process*, char**)>:
c0014f08:	56                   	push   esi
c0014f09:	53                   	push   ebx
c0014f0a:	83 ec 24             	sub    esp,0x24
c0014f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f11:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f19:	05 0c 02 00 00       	add    eax,0x20c
c0014f1e:	bb 07 00 00 00       	mov    ebx,0x7
c0014f23:	89 c6                	mov    esi,eax
c0014f25:	8d 76 00             	lea    esi,[esi+0x0]
c0014f28:	85 db                	test   ebx,ebx
c0014f2a:	78 14                	js     c0014f40 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	56                   	push   esi
c0014f30:	e8 63 a3 00 00       	call   c001f298 <ThreadControlBlock::ThreadControlBlock()>
c0014f35:	83 c4 10             	add    esp,0x10
c0014f38:	83 c6 5f             	add    esi,0x5f
c0014f3b:	83 eb 01             	sub    ebx,0x1
c0014f3e:	eb e8                	jmp    c0014f28 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014f40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f44:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014f4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f4f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 4c ba ff ff       	call   c00109ae <KeNewProcessEnv(Process*)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	89 c2                	mov    edx,eax
c0014f67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f6b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f75:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014f7e:	a1 40 2b 02 c0       	mov    eax,ds:0xc0022b40
c0014f83:	8d 50 01             	lea    edx,[eax+0x1]
c0014f86:	89 15 40 2b 02 c0    	mov    DWORD PTR ds:0xc0022b40,edx
c0014f8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014f90:	89 02                	mov    DWORD PTR [edx],eax
c0014f92:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014f9a:	83 ec 0c             	sub    esp,0xc
c0014f9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014fa1:	e8 08 2b ff ff       	call   c0007aae <malloc>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	89 c3                	mov    ebx,eax
c0014fab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014fb0:	83 ec 08             	sub    esp,0x8
c0014fb3:	50                   	push   eax
c0014fb4:	53                   	push   ebx
c0014fb5:	e8 a2 50 ff ff       	call   c000a05c <VAS::VAS(bool)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fc1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fcb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014fd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014fdd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014fe3:	e8 ea bf ff ff       	call   c0010fd2 <KeInitSignals()>
c0014fe8:	89 c2                	mov    edx,eax
c0014fea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ff8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ffe:	85 c0                	test   eax,eax
c0015000:	74 42                	je     c0015044 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015006:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001500c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015016:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001501c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015020:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015026:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001502c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015030:	05 0c 01 00 00       	add    eax,0x10c
c0015035:	83 ec 08             	sub    esp,0x8
c0015038:	52                   	push   edx
c0015039:	50                   	push   eax
c001503a:	e8 01 b6 fe ff       	call   c0000640 <strcpy>
c001503f:	83 c4 10             	add    esp,0x10
c0015042:	eb 64                	jmp    c00150a8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015044:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015053:	e8 56 2a ff ff       	call   c0007aae <malloc>
c0015058:	83 c4 10             	add    esp,0x10
c001505b:	89 c3                	mov    ebx,eax
c001505d:	83 ec 08             	sub    esp,0x8
c0015060:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015064:	53                   	push   ebx
c0015065:	e8 ee 3b ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015071:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001507b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015081:	83 ec 0c             	sub    esp,0xc
c0015084:	50                   	push   eax
c0015085:	e8 6c 34 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015091:	05 0c 01 00 00       	add    eax,0x10c
c0015096:	83 ec 08             	sub    esp,0x8
c0015099:	68 3d 19 02 c0       	push   0xc002193d
c001509e:	50                   	push   eax
c001509f:	e8 9c b5 fe ff       	call   c0000640 <strcpy>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	90                   	nop
c00150a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150ac:	83 c0 0c             	add    eax,0xc
c00150af:	83 ec 08             	sub    esp,0x8
c00150b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150b6:	50                   	push   eax
c00150b7:	e8 84 b5 fe ff       	call   c0000640 <strcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	83 ec 08             	sub    esp,0x8
c00150c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00150c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150ca:	e8 c1 fb ff ff       	call   c0014c90 <Process::addArgs(char**)>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	90                   	nop
c00150d3:	83 c4 24             	add    esp,0x24
c00150d6:	5b                   	pop    ebx
c00150d7:	5e                   	pop    esi
c00150d8:	c3                   	ret    
c00150d9:	8d 76 00             	lea    esi,[esi+0x0]

c00150dc <taskStartupFunction>:
c00150dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00150e4:	c3                   	ret    
c00150e5:	90                   	nop
c00150e6:	66 90                	xchg   ax,ax

c00150e8 <Semaphore::Semaphore(int)>:
c00150e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00150f0:	89 10                	mov    DWORD PTR [eax],edx
c00150f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150f6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00150fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015101:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001510c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015113:	90                   	nop
c0015114:	c3                   	ret    
c0015115:	90                   	nop
c0015116:	66 90                	xchg   ax,ax

c0015118 <Mutex::Mutex()>:
c0015118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001511c:	6a 01                	push   0x1
c001511e:	50                   	push   eax
c001511f:	e8 c4 ff ff ff       	call   c00150e8 <Semaphore::Semaphore(int)>
c0015124:	83 c4 08             	add    esp,0x8
c0015127:	90                   	nop
c0015128:	c3                   	ret    
c0015129:	90                   	nop
c001512a:	66 90                	xchg   ax,ax

c001512c <Process::createThread(void (*)(void*), void*, int)>:
c001512c:	57                   	push   edi
c001512d:	31 c9                	xor    ecx,ecx
c001512f:	56                   	push   esi
c0015130:	53                   	push   ebx
c0015131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015135:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001513c:	89 f2                	mov    edx,esi
c001513e:	66 90                	xchg   ax,ax
c0015140:	0f b7 c2             	movzx  eax,dx
c0015143:	80 e2 01             	and    dl,0x1
c0015146:	74 14                	je     c001515c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015148:	d1 f8                	sar    eax,1
c001514a:	83 c1 01             	add    ecx,0x1
c001514d:	89 c2                	mov    edx,eax
c001514f:	83 f9 10             	cmp    ecx,0x10
c0015152:	75 ec                	jne    c0015140 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015154:	31 db                	xor    ebx,ebx
c0015156:	89 d8                	mov    eax,ebx
c0015158:	5b                   	pop    ebx
c0015159:	5e                   	pop    esi
c001515a:	5f                   	pop    edi
c001515b:	c3                   	ret    
c001515c:	b8 01 00 00 00       	mov    eax,0x1
c0015161:	d3 e0                	shl    eax,cl
c0015163:	09 c6                	or     esi,eax
c0015165:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015168:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001516f:	01 c0                	add    eax,eax
c0015171:	01 c8                	add    eax,ecx
c0015173:	8d 04 80             	lea    eax,[eax+eax*4]
c0015176:	01 d8                	add    eax,ebx
c0015178:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001517f:	75 0b                	jne    c001518c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015181:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001518b:	90                   	nop
c001518c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015192:	83 ec 0c             	sub    esp,0xc
c0015195:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015198:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001519b:	01 c0                	add    eax,eax
c001519d:	01 c8                	add    eax,ecx
c001519f:	8d 3c 80             	lea    edi,[eax+eax*4]
c00151a2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00151a5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00151ab:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00151b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151b5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00151bb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00151c1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00151c7:	89 ca                	mov    edx,ecx
c00151c9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00151d0:	f7 da                	neg    edx
c00151d2:	c1 e2 15             	shl    edx,0x15
c00151d5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00151db:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00151e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151e5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00151ef:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00151f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151f9:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00151ff:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015209:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015213:	68 00 01 00 00       	push   0x100
c0015218:	e8 91 28 ff ff       	call   c0007aae <malloc>
c001521d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015220:	58                   	pop    eax
c0015221:	5a                   	pop    edx
c0015222:	53                   	push   ebx
c0015223:	68 84 81 02 c0       	push   0xc0028184
c0015228:	e8 03 9e 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	89 d8                	mov    eax,ebx
c0015232:	5b                   	pop    ebx
c0015233:	5e                   	pop    esi
c0015234:	5f                   	pop    edi
c0015235:	c3                   	ret    
c0015236:	66 90                	xchg   ax,ax

c0015238 <Process::createUserThread()>:
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	68 80 00 00 00       	push   0x80
c0015240:	6a 00                	push   0x0
c0015242:	68 88 4b 01 c0       	push   0xc0014b88
c0015247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001524b:	50                   	push   eax
c001524c:	e8 db fe ff ff       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c0015251:	83 c4 1c             	add    esp,0x1c
c0015254:	c3                   	ret    
c0015255:	8d 76 00             	lea    esi,[esi+0x0]

c0015258 <setupMultitasking(void (*)())>:
c0015258:	56                   	push   esi
c0015259:	53                   	push   ebx
c001525a:	83 ec 04             	sub    esp,0x4
c001525d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015261:	eb 11                	jmp    c0015274 <setupMultitasking(void (*)())+0x1c>
c0015263:	90                   	nop
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	68 84 81 02 c0       	push   0xc0028184
c001526c:	e8 03 9d 00 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	83 ec 0c             	sub    esp,0xc
c0015277:	68 84 81 02 c0       	push   0xc0028184
c001527c:	e8 cf 9c 00 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	84 c0                	test   al,al
c0015286:	74 dc                	je     c0015264 <setupMultitasking(void (*)())+0xc>
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	68 24 07 00 00       	push   0x724
c0015290:	e8 19 28 ff ff       	call   c0007aae <malloc>
c0015295:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001529c:	89 c3                	mov    ebx,eax
c001529e:	6a 00                	push   0x0
c00152a0:	68 41 19 02 c0       	push   0xc0021941
c00152a5:	6a 01                	push   0x1
c00152a7:	50                   	push   eax
c00152a8:	e8 5b fc ff ff       	call   c0014f08 <Process::Process(bool, char const*, Process*, char**)>
c00152ad:	83 c4 14             	add    esp,0x14
c00152b0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00152b6:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c00152bc:	50                   	push   eax
c00152bd:	e8 89 34 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c00152c2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00152c9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00152d3:	83 c8 01             	or     eax,0x1
c00152d6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00152dd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00152e6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00152f0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00152f6:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00152fc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015306:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015310:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001531a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015320:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001532a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015330:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001533a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015341:	e8 68 27 ff ff       	call   c0007aae <malloc>
c0015346:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001534c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015352:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015358:	5a                   	pop    edx
c0015359:	59                   	pop    ecx
c001535a:	68 3d 19 02 c0       	push   0xc002193d
c001535f:	50                   	push   eax
c0015360:	e8 db b2 fe ff       	call   c0000640 <strcpy>
c0015365:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001536c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015370:	83 c4 14             	add    esp,0x14
c0015373:	5b                   	pop    ebx
c0015374:	5e                   	pop    esi
c0015375:	e9 ef ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001537a:	66 90                	xchg   ax,ax

c001537c <schedule()>:
c001537c:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015382:	85 d2                	test   edx,edx
c0015384:	74 0e                	je     c0015394 <schedule()+0x18>
c0015386:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015390:	c3                   	ret    
c0015391:	8d 76 00             	lea    esi,[esi+0x0]
c0015394:	53                   	push   ebx
c0015395:	83 ec 14             	sub    esp,0x14
c0015398:	68 84 81 02 c0       	push   0xc0028184
c001539d:	e8 ae 9b 00 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	84 c0                	test   al,al
c00153a7:	75 3f                	jne    c00153e8 <schedule()+0x6c>
c00153a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00153b1:	83 fa 01             	cmp    edx,0x1
c00153b4:	74 3a                	je     c00153f0 <schedule()+0x74>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	83 ec 0c             	sub    esp,0xc
c00153bb:	68 84 81 02 c0       	push   0xc0028184
c00153c0:	e8 a7 9b 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00153c5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00153cc:	89 c3                	mov    ebx,eax
c00153ce:	e8 a1 9b 00 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153d3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00153da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153dd:	e8 fe f7 ff ff       	call   c0014be0 <switchToThread(ThreadControlBlock*)>
c00153e2:	83 c4 10             	add    esp,0x10
c00153e5:	8d 76 00             	lea    esi,[esi+0x0]
c00153e8:	83 c4 08             	add    esp,0x8
c00153eb:	5b                   	pop    ebx
c00153ec:	c3                   	ret    
c00153ed:	8d 76 00             	lea    esi,[esi+0x0]
c00153f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00153f7:	83 ec 08             	sub    esp,0x8
c00153fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ff:	50                   	push   eax
c0015400:	68 84 81 02 c0       	push   0xc0028184
c0015405:	e8 26 9c 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	eb a9                	jmp    c00153b8 <schedule()+0x3c>
c001540f:	90                   	nop

c0015410 <Semaphore::tryAcquire()>:
c0015410:	53                   	push   ebx
c0015411:	83 ec 08             	sub    esp,0x8
c0015414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015418:	fa                   	cli    
c0015419:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001541e:	8d 50 01             	lea    edx,[eax+0x1]
c0015421:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015427:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001542d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015430:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015436:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015439:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001543b:	7c 33                	jl     c0015470 <Semaphore::tryAcquire()+0x60>
c001543d:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c0015443:	85 d2                	test   edx,edx
c0015445:	75 0d                	jne    c0015454 <Semaphore::tryAcquire()+0x44>
c0015447:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c001544d:	85 d2                	test   edx,edx
c001544f:	75 6f                	jne    c00154c0 <Semaphore::tryAcquire()+0xb0>
c0015451:	8d 76 00             	lea    esi,[esi+0x0]
c0015454:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015459:	85 c0                	test   eax,eax
c001545b:	74 0b                	je     c0015468 <Semaphore::tryAcquire()+0x58>
c001545d:	8d 76 00             	lea    esi,[esi+0x0]
c0015460:	31 c0                	xor    eax,eax
c0015462:	83 c4 08             	add    esp,0x8
c0015465:	5b                   	pop    ebx
c0015466:	c3                   	ret    
c0015467:	90                   	nop
c0015468:	fb                   	sti    
c0015469:	83 c4 08             	add    esp,0x8
c001546c:	5b                   	pop    ebx
c001546d:	c3                   	ret    
c001546e:	66 90                	xchg   ax,ax
c0015470:	83 c3 01             	add    ebx,0x1
c0015473:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c0015479:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001547c:	85 d2                	test   edx,edx
c001547e:	75 24                	jne    c00154a4 <Semaphore::tryAcquire()+0x94>
c0015480:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015486:	85 c9                	test   ecx,ecx
c0015488:	74 1a                	je     c00154a4 <Semaphore::tryAcquire()+0x94>
c001548a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015494:	e8 e3 fe ff ff       	call   c001537c <schedule()>
c0015499:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001549e:	83 e8 01             	sub    eax,0x1
c00154a1:	8d 76 00             	lea    esi,[esi+0x0]
c00154a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154a9:	85 c0                	test   eax,eax
c00154ab:	75 0b                	jne    c00154b8 <Semaphore::tryAcquire()+0xa8>
c00154ad:	fb                   	sti    
c00154ae:	b0 01                	mov    al,0x1
c00154b0:	83 c4 08             	add    esp,0x8
c00154b3:	5b                   	pop    ebx
c00154b4:	c3                   	ret    
c00154b5:	8d 76 00             	lea    esi,[esi+0x0]
c00154b8:	b0 01                	mov    al,0x1
c00154ba:	83 c4 08             	add    esp,0x8
c00154bd:	5b                   	pop    ebx
c00154be:	c3                   	ret    
c00154bf:	90                   	nop
c00154c0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154ca:	e8 ad fe ff ff       	call   c001537c <schedule()>
c00154cf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154d4:	83 e8 01             	sub    eax,0x1
c00154d7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154dc:	85 c0                	test   eax,eax
c00154de:	75 80                	jne    c0015460 <Semaphore::tryAcquire()+0x50>
c00154e0:	eb 86                	jmp    c0015468 <Semaphore::tryAcquire()+0x58>
c00154e2:	66 90                	xchg   ax,ax

c00154e4 <Semaphore::assertLocked(char const*)>:
c00154e4:	83 ec 0c             	sub    esp,0xc
c00154e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154eb:	fa                   	cli    
c00154ec:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154f2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154f7:	83 c1 01             	add    ecx,0x1
c00154fa:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015500:	8d 48 01             	lea    ecx,[eax+0x1]
c0015503:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015509:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001550b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001550e:	7c 28                	jl     c0015538 <Semaphore::assertLocked(char const*)+0x54>
c0015510:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015515:	85 c0                	test   eax,eax
c0015517:	75 0b                	jne    c0015524 <Semaphore::assertLocked(char const*)+0x40>
c0015519:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001551e:	85 c0                	test   eax,eax
c0015520:	75 32                	jne    c0015554 <Semaphore::assertLocked(char const*)+0x70>
c0015522:	66 90                	xchg   ax,ax
c0015524:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015529:	83 e8 01             	sub    eax,0x1
c001552c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015531:	75 01                	jne    c0015534 <Semaphore::assertLocked(char const*)+0x50>
c0015533:	fb                   	sti    
c0015534:	83 c4 0c             	add    esp,0xc
c0015537:	c3                   	ret    
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001553f:	52                   	push   edx
c0015540:	e8 74 b6 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0015545:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	83 e8 01             	sub    eax,0x1
c0015550:	eb be                	jmp    c0015510 <Semaphore::assertLocked(char const*)+0x2c>
c0015552:	66 90                	xchg   ax,ax
c0015554:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001555e:	e8 19 fe ff ff       	call   c001537c <schedule()>
c0015563:	eb bf                	jmp    c0015524 <Semaphore::assertLocked(char const*)+0x40>
c0015565:	8d 76 00             	lea    esi,[esi+0x0]

c0015568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015570:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015574:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015577:	e8 00 fe ff ff       	call   c001537c <schedule()>
c001557c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015581:	83 e8 01             	sub    eax,0x1
c0015584:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015589:	75 01                	jne    c001558c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001558b:	fb                   	sti    
c001558c:	83 c4 0c             	add    esp,0xc
c001558f:	c3                   	ret    

c0015590 <blockTask(TaskState)>:
c0015590:	83 ec 0c             	sub    esp,0xc
c0015593:	fa                   	cli    
c0015594:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001559d:	83 c0 01             	add    eax,0x1
c00155a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155ad:	e8 ca fd ff ff       	call   c001537c <schedule()>
c00155b2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b7:	83 e8 01             	sub    eax,0x1
c00155ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155bf:	75 03                	jne    c00155c4 <blockTask(TaskState)+0x34>
c00155c1:	fb                   	sti    
c00155c2:	66 90                	xchg   ax,ax
c00155c4:	83 c4 0c             	add    esp,0xc
c00155c7:	c3                   	ret    

c00155c8 <waitTask(int, int*, int)>:
c00155c8:	83 ec 18             	sub    esp,0x18
c00155cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00155d4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00155d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00155e3:	6a 07                	push   0x7
c00155e5:	e8 a6 ff ff ff       	call   c0015590 <blockTask(TaskState)>
c00155ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155ef:	83 c4 10             	add    esp,0x10
c00155f2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155f5:	85 d2                	test   edx,edx
c00155f7:	74 0b                	je     c0015604 <waitTask(int, int*, int)+0x3c>
c00155f9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155fc:	89 02                	mov    DWORD PTR [edx],eax
c00155fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015603:	90                   	nop
c0015604:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015607:	83 c4 0c             	add    esp,0xc
c001560a:	c3                   	ret    
c001560b:	90                   	nop

c001560c <milliTenthSleepUntil(unsigned int)>:
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015613:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015619:	76 05                	jbe    c0015620 <milliTenthSleepUntil(unsigned int)+0x14>
c001561b:	90                   	nop
c001561c:	83 c4 0c             	add    esp,0xc
c001561f:	c3                   	ret    
c0015620:	fa                   	cli    
c0015621:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015627:	83 ec 08             	sub    esp,0x8
c001562a:	83 c2 01             	add    edx,0x1
c001562d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015633:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015639:	83 c1 01             	add    ecx,0x1
c001563c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015642:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015648:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001564b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015650:	50                   	push   eax
c0015651:	68 78 81 02 c0       	push   0xc0028178
c0015656:	e8 d5 99 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001565b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015662:	e8 29 ff ff ff       	call   c0015590 <blockTask(TaskState)>
c0015667:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	83 e8 01             	sub    eax,0x1
c0015672:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015677:	85 c0                	test   eax,eax
c0015679:	75 09                	jne    c0015684 <milliTenthSleepUntil(unsigned int)+0x78>
c001567b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015680:	85 c0                	test   eax,eax
c0015682:	75 14                	jne    c0015698 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015684:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015689:	83 e8 01             	sub    eax,0x1
c001568c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015691:	75 89                	jne    c001561c <milliTenthSleepUntil(unsigned int)+0x10>
c0015693:	fb                   	sti    
c0015694:	83 c4 0c             	add    esp,0xc
c0015697:	c3                   	ret    
c0015698:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00156a2:	e8 d5 fc ff ff       	call   c001537c <schedule()>
c00156a7:	eb db                	jmp    c0015684 <milliTenthSleepUntil(unsigned int)+0x78>
c00156a9:	8d 76 00             	lea    esi,[esi+0x0]

c00156ac <milliTenthSleep(unsigned int)>:
c00156ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156b0:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00156b5:	01 c2                	add    edx,eax
c00156b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00156bb:	e9 4c ff ff ff       	jmp    c001560c <milliTenthSleepUntil(unsigned int)>

c00156c0 <sleep(unsigned int)>:
c00156c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156c4:	8d 04 80             	lea    eax,[eax+eax*4]
c00156c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00156ca:	8d 04 80             	lea    eax,[eax+eax*4]
c00156cd:	8d 04 80             	lea    eax,[eax+eax*4]
c00156d0:	c1 e0 04             	shl    eax,0x4
c00156d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156d7:	eb d3                	jmp    c00156ac <milliTenthSleep(unsigned int)>
c00156d9:	90                   	nop
c00156da:	66 90                	xchg   ax,ax

c00156dc <Semaphore::acquire()>:
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156e3:	fa                   	cli    
c00156e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00156e9:	83 c0 01             	add    eax,0x1
c00156ec:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00156f1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00156f6:	8d 48 01             	lea    ecx,[eax+0x1]
c00156f9:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00156ff:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015702:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015704:	7d 2e                	jge    c0015734 <Semaphore::acquire()+0x58>
c0015706:	83 c1 01             	add    ecx,0x1
c0015709:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001570c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015711:	85 c0                	test   eax,eax
c0015713:	75 0b                	jne    c0015720 <Semaphore::acquire()+0x44>
c0015715:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001571a:	85 c0                	test   eax,eax
c001571c:	75 66                	jne    c0015784 <Semaphore::acquire()+0xa8>
c001571e:	66 90                	xchg   ax,ax
c0015720:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015725:	83 e8 01             	sub    eax,0x1
c0015728:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001572d:	75 01                	jne    c0015730 <Semaphore::acquire()+0x54>
c001572f:	fb                   	sti    
c0015730:	83 c4 0c             	add    esp,0xc
c0015733:	c3                   	ret    
c0015734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015739:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015740:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015743:	85 c9                	test   ecx,ecx
c0015745:	74 51                	je     c0015798 <Semaphore::acquire()+0xbc>
c0015747:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001574a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015750:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015753:	90                   	nop
c0015754:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015759:	83 ec 0c             	sub    esp,0xc
c001575c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001575f:	68 c0 19 02 c0       	push   0xc00219c0
c0015764:	e8 d0 51 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015769:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015770:	e8 1b fe ff ff       	call   c0015590 <blockTask(TaskState)>
c0015775:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	83 e8 01             	sub    eax,0x1
c0015780:	eb 8a                	jmp    c001570c <Semaphore::acquire()+0x30>
c0015782:	66 90                	xchg   ax,ax
c0015784:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001578e:	e8 e9 fb ff ff       	call   c001537c <schedule()>
c0015793:	eb 8b                	jmp    c0015720 <Semaphore::acquire()+0x44>
c0015795:	8d 76 00             	lea    esi,[esi+0x0]
c0015798:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001579d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00157a0:	eb b2                	jmp    c0015754 <Semaphore::acquire()+0x78>
c00157a2:	66 90                	xchg   ax,ax

c00157a4 <taskReturned>:
c00157a4:	83 ec 18             	sub    esp,0x18
c00157a7:	68 e0 19 02 c0       	push   0xc00219e0
c00157ac:	e8 08 b4 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	6a 02                	push   0x2
c00157b9:	e8 d2 fd ff ff       	call   c0015590 <blockTask(TaskState)>
c00157be:	fa                   	cli    
c00157bf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00157c4:	83 c0 01             	add    eax,0x1
c00157c7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00157cc:	e8 ab fb ff ff       	call   c001537c <schedule()>
c00157d1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	83 e8 01             	sub    eax,0x1
c00157dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00157e1:	85 c0                	test   eax,eax
c00157e3:	75 cf                	jne    c00157b4 <taskReturned+0x10>
c00157e5:	fb                   	sti    
c00157e6:	eb cc                	jmp    c00157b4 <taskReturned+0x10>

c00157e8 <Thr::processFromPID(int)>:
c00157e8:	57                   	push   edi
c00157e9:	56                   	push   esi
c00157ea:	53                   	push   ebx
c00157eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157ef:	fa                   	cli    
c00157f0:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00157f6:	83 ec 0c             	sub    esp,0xc
c00157f9:	83 c1 01             	add    ecx,0x1
c00157fc:	68 84 81 02 c0       	push   0xc0028184
c0015801:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015807:	e8 60 97 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	89 c7                	mov    edi,eax
c0015811:	eb 15                	jmp    c0015828 <Thr::processFromPID(int)+0x40>
c0015813:	90                   	nop
c0015814:	83 ec 0c             	sub    esp,0xc
c0015817:	68 84 81 02 c0       	push   0xc0028184
c001581c:	e8 4b 97 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	39 f8                	cmp    eax,edi
c0015826:	74 50                	je     c0015878 <Thr::processFromPID(int)+0x90>
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	68 84 81 02 c0       	push   0xc0028184
c0015830:	e8 37 97 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015835:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001583c:	89 c3                	mov    ebx,eax
c001583e:	e8 31 97 00 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015843:	58                   	pop    eax
c0015844:	5a                   	pop    edx
c0015845:	53                   	push   ebx
c0015846:	68 84 81 02 c0       	push   0xc0028184
c001584b:	e8 e0 97 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015850:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015853:	83 c4 10             	add    esp,0x10
c0015856:	39 30                	cmp    DWORD PTR [eax],esi
c0015858:	75 ba                	jne    c0015814 <Thr::processFromPID(int)+0x2c>
c001585a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001585f:	83 e8 01             	sub    eax,0x1
c0015862:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015867:	74 0b                	je     c0015874 <Thr::processFromPID(int)+0x8c>
c0015869:	8d 76 00             	lea    esi,[esi+0x0]
c001586c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001586f:	5b                   	pop    ebx
c0015870:	5e                   	pop    esi
c0015871:	5f                   	pop    edi
c0015872:	c3                   	ret    
c0015873:	90                   	nop
c0015874:	fb                   	sti    
c0015875:	eb f5                	jmp    c001586c <Thr::processFromPID(int)+0x84>
c0015877:	90                   	nop
c0015878:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001587d:	83 e8 01             	sub    eax,0x1
c0015880:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015885:	75 05                	jne    c001588c <Thr::processFromPID(int)+0xa4>
c0015887:	fb                   	sti    
c0015888:	5b                   	pop    ebx
c0015889:	5e                   	pop    esi
c001588a:	5f                   	pop    edi
c001588b:	c3                   	ret    
c001588c:	5b                   	pop    ebx
c001588d:	31 c0                	xor    eax,eax
c001588f:	5e                   	pop    esi
c0015890:	5f                   	pop    edi
c0015891:	c3                   	ret    
c0015892:	66 90                	xchg   ax,ax

c0015894 <unblockTask(ThreadControlBlock*)>:
c0015894:	53                   	push   ebx
c0015895:	83 ec 08             	sub    esp,0x8
c0015898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001589c:	fa                   	cli    
c001589d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158a2:	83 c0 01             	add    eax,0x1
c00158a5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158aa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00158ad:	85 c0                	test   eax,eax
c00158af:	74 67                	je     c0015918 <unblockTask(ThreadControlBlock*)+0x84>
c00158b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00158b4:	83 f8 01             	cmp    eax,0x1
c00158b7:	74 37                	je     c00158f0 <unblockTask(ThreadControlBlock*)+0x5c>
c00158b9:	83 ec 0c             	sub    esp,0xc
c00158bc:	68 84 81 02 c0       	push   0xc0028184
c00158c1:	e8 a6 96 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	85 c0                	test   eax,eax
c00158cb:	75 1b                	jne    c00158e8 <unblockTask(ThreadControlBlock*)+0x54>
c00158cd:	eb 5d                	jmp    c001592c <unblockTask(ThreadControlBlock*)+0x98>
c00158cf:	90                   	nop
c00158d0:	83 ec 08             	sub    esp,0x8
c00158d3:	50                   	push   eax
c00158d4:	68 84 81 02 c0       	push   0xc0028184
c00158d9:	e8 ae 99 00 00       	call   c001f28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00158de:	83 c4 10             	add    esp,0x10
c00158e1:	85 c0                	test   eax,eax
c00158e3:	74 47                	je     c001592c <unblockTask(ThreadControlBlock*)+0x98>
c00158e5:	8d 76 00             	lea    esi,[esi+0x0]
c00158e8:	39 c3                	cmp    ebx,eax
c00158ea:	75 e4                	jne    c00158d0 <unblockTask(ThreadControlBlock*)+0x3c>
c00158ec:	eb 12                	jmp    c0015900 <unblockTask(ThreadControlBlock*)+0x6c>
c00158ee:	66 90                	xchg   ax,ax
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	68 5f 19 02 c0       	push   0xc002195f
c00158f8:	e8 3c 50 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00158fd:	83 c4 10             	add    esp,0x10
c0015900:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015905:	83 e8 01             	sub    eax,0x1
c0015908:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001590d:	75 01                	jne    c0015910 <unblockTask(ThreadControlBlock*)+0x7c>
c001590f:	fb                   	sti    
c0015910:	83 c4 08             	add    esp,0x8
c0015913:	5b                   	pop    ebx
c0015914:	c3                   	ret    
c0015915:	8d 76 00             	lea    esi,[esi+0x0]
c0015918:	83 ec 0c             	sub    esp,0xc
c001591b:	68 48 19 02 c0       	push   0xc0021948
c0015920:	e8 14 50 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	eb d6                	jmp    c0015900 <unblockTask(ThreadControlBlock*)+0x6c>
c001592a:	66 90                	xchg   ax,ax
c001592c:	83 ec 08             	sub    esp,0x8
c001592f:	53                   	push   ebx
c0015930:	68 84 81 02 c0       	push   0xc0028184
c0015935:	e8 f6 96 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001593a:	83 c4 10             	add    esp,0x10
c001593d:	eb c1                	jmp    c0015900 <unblockTask(ThreadControlBlock*)+0x6c>
c001593f:	90                   	nop

c0015940 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015940:	55                   	push   ebp
c0015941:	57                   	push   edi
c0015942:	56                   	push   esi
c0015943:	53                   	push   ebx
c0015944:	83 ec 1c             	sub    esp,0x1c
c0015947:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001594b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001594e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015954:	85 ed                	test   ebp,ebp
c0015956:	7e 28                	jle    c0015980 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015958:	31 f6                	xor    esi,esi
c001595a:	66 90                	xchg   ax,ax
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015966:	83 c6 01             	add    esi,0x1
c0015969:	57                   	push   edi
c001596a:	e8 4f 21 ff ff       	call   c0007abe <free>
c001596f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001597b:	7f df                	jg     c001595c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001597d:	8d 76 00             	lea    esi,[esi+0x0]
c0015980:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001598a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001598f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015992:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015995:	d3 c0                	rol    eax,cl
c0015997:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001599e:	21 c8                	and    eax,ecx
c00159a0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00159a7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159aa:	89 f7                	mov    edi,esi
c00159ac:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00159b4:	0f 85 72 01 00 00    	jne    c0015b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00159ba:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00159c0:	85 ed                	test   ebp,ebp
c00159c2:	74 1c                	je     c00159e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	55                   	push   ebp
c00159c8:	e8 fd ae ff ff       	call   c00108ca <EnvVarContainer::~EnvVarContainer()>
c00159cd:	59                   	pop    ecx
c00159ce:	5e                   	pop    esi
c00159cf:	6a 0c                	push   0xc
c00159d1:	55                   	push   ebp
c00159d2:	e8 35 4e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00159d7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	89 f7                	mov    edi,esi
c00159df:	90                   	nop
c00159e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159e6:	85 c0                	test   eax,eax
c00159e8:	0f 84 b2 00 00 00    	je     c0015aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00159ee:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00159f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00159f5:	31 c9                	xor    ecx,ecx
c00159f7:	eb 17                	jmp    c0015a10 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00159f9:	8d 76 00             	lea    esi,[esi+0x0]
c00159fc:	83 c1 01             	add    ecx,0x1
c00159ff:	83 f9 10             	cmp    ecx,0x10
c0015a02:	0f 84 98 00 00 00    	je     c0015aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015a08:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a0e:	66 90                	xchg   ax,ax
c0015a10:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015a17:	d3 fa                	sar    edx,cl
c0015a19:	80 e2 01             	and    dl,0x1
c0015a1c:	74 de                	je     c00159fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a1e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015a21:	01 d2                	add    edx,edx
c0015a23:	01 ca                	add    edx,ecx
c0015a25:	8d 14 92             	lea    edx,[edx+edx*4]
c0015a28:	01 d0                	add    eax,edx
c0015a2a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015a30:	83 fd 07             	cmp    ebp,0x7
c0015a33:	75 c7                	jne    c00159fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a35:	05 40 02 00 00       	add    eax,0x240
c0015a3a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015a3d:	83 fd ff             	cmp    ebp,0xffffffff
c0015a40:	0f 8c ee 00 00 00    	jl     c0015b34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015a46:	0f 84 ac 01 00 00    	je     c0015bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015a4c:	85 ed                	test   ebp,ebp
c0015a4e:	0f 84 90 01 00 00    	je     c0015be4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015a54:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015a56:	75 a4                	jne    c00159fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a58:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a5e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a62:	01 d0                	add    eax,edx
c0015a64:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015a71:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a7a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015a81:	50                   	push   eax
c0015a82:	e8 0d fe ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a91:	89 f7                	mov    edi,esi
c0015a93:	83 c1 01             	add    ecx,0x1
c0015a96:	83 f9 10             	cmp    ecx,0x10
c0015a99:	0f 85 69 ff ff ff    	jne    c0015a08 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015a9f:	90                   	nop
c0015aa0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015aa6:	85 c0                	test   eax,eax
c0015aa8:	74 62                	je     c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015aaa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015ab0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015ab6:	74 54                	je     c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	68 84 81 02 c0       	push   0xc0028184
c0015ac0:	e8 a7 94 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ac5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015acc:	89 c7                	mov    edi,eax
c0015ace:	e8 7d 94 00 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	84 c0                	test   al,al
c0015ad8:	0f 84 ce 00 00 00    	je     c0015bac <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015ade:	66 90                	xchg   ax,ax
c0015ae0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ae3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ae9:	85 d2                	test   edx,edx
c0015aeb:	74 0f                	je     c0015afc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015aed:	83 ec 0c             	sub    esp,0xc
c0015af0:	8b 02                	mov    eax,DWORD PTR [edx]
c0015af2:	52                   	push   edx
c0015af3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015af6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015b06:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015b09:	8d 76 00             	lea    esi,[esi+0x0]
c0015b0c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015b12:	85 db                	test   ebx,ebx
c0015b14:	74 16                	je     c0015b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	53                   	push   ebx
c0015b1a:	e8 87 40 ff ff       	call   c0009ba6 <VAS::~VAS()>
c0015b1f:	58                   	pop    eax
c0015b20:	5a                   	pop    edx
c0015b21:	6a 14                	push   0x14
c0015b23:	53                   	push   ebx
c0015b24:	e8 e3 4c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	83 c4 1c             	add    esp,0x1c
c0015b2f:	5b                   	pop    ebx
c0015b30:	5e                   	pop    esi
c0015b31:	5f                   	pop    edi
c0015b32:	5d                   	pop    ebp
c0015b33:	c3                   	ret    
c0015b34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	68 14 1a 02 c0       	push   0xc0021a14
c0015b40:	e8 74 b0 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0015b45:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	89 f7                	mov    edi,esi
c0015b4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b51:	e9 a6 fe ff ff       	jmp    c00159fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b56:	66 90                	xchg   ax,ax
c0015b58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b5e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015b64:	75 1e                	jne    c0015b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b66:	83 ec 0c             	sub    esp,0xc
c0015b69:	68 7c 1a 02 c0       	push   0xc0021a7c
c0015b6e:	e8 c6 4d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015b73:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015b7a:	e8 11 fa ff ff       	call   c0015590 <blockTask(TaskState)>
c0015b7f:	83 c4 10             	add    esp,0x10
c0015b82:	66 90                	xchg   ax,ax
c0015b84:	83 ec 08             	sub    esp,0x8
c0015b87:	56                   	push   esi
c0015b88:	68 84 81 02 c0       	push   0xc0028184
c0015b8d:	e8 9e 94 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b92:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b99:	e8 ce 93 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	39 f8                	cmp    eax,edi
c0015ba3:	0f 84 37 ff ff ff    	je     c0015ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	68 84 81 02 c0       	push   0xc0028184
c0015bb4:	e8 b3 93 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bb9:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015bc0:	89 c6                	mov    esi,eax
c0015bc2:	e8 ad 93 00 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015bc7:	83 c4 10             	add    esp,0x10
c0015bca:	39 f3                	cmp    ebx,esi
c0015bcc:	74 b6                	je     c0015b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015bce:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015bd1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bd4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015bda:	75 a8                	jne    c0015b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015bdc:	e9 77 ff ff ff       	jmp    c0015b58 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015be1:	8d 76 00             	lea    esi,[esi+0x0]
c0015be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	68 48 1a 02 c0       	push   0xc0021a48
c0015bf0:	e9 4b ff ff ff       	jmp    c0015b40 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf8:	8b 36                	mov    esi,DWORD PTR [esi]
c0015bfa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bfe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015c01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c04:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015c0a:	01 d7                	add    edi,edx
c0015c0c:	89 f8                	mov    eax,edi
c0015c0e:	e9 51 fe ff ff       	jmp    c0015a64 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015c13:	90                   	nop

c0015c14 <cleanerTaskFunction(void*)>:
c0015c14:	53                   	push   ebx
c0015c15:	83 ec 08             	sub    esp,0x8
c0015c18:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c1d:	83 e8 01             	sub    eax,0x1
c0015c20:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c25:	75 01                	jne    c0015c28 <cleanerTaskFunction(void*)+0x14>
c0015c27:	fb                   	sti    
c0015c28:	fa                   	cli    
c0015c29:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c2e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015c35:	8d 50 01             	lea    edx,[eax+0x1]
c0015c38:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c3e:	0f 84 c4 00 00 00    	je     c0015d08 <cleanerTaskFunction(void*)+0xf4>
c0015c44:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c49:	85 c0                	test   eax,eax
c0015c4b:	75 03                	jne    c0015c50 <cleanerTaskFunction(void*)+0x3c>
c0015c4d:	fb                   	sti    
c0015c4e:	66 90                	xchg   ax,ax
c0015c50:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015c57:	fa                   	cli    
c0015c58:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015c5e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015c64:	83 c2 01             	add    edx,0x1
c0015c67:	83 c1 01             	add    ecx,0x1
c0015c6a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c70:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015c76:	fa                   	cli    
c0015c77:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015c7d:	83 c3 01             	add    ebx,0x1
c0015c80:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015c86:	eb 28                	jmp    c0015cb0 <cleanerTaskFunction(void*)+0x9c>
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	68 6c 81 02 c0       	push   0xc002816c
c0015c90:	e8 d7 92 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c95:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015c9c:	89 c3                	mov    ebx,eax
c0015c9e:	e8 d1 92 00 00       	call   c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ca3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ca6:	e8 95 fc ff ff       	call   c0015940 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015cab:	83 c4 10             	add    esp,0x10
c0015cae:	66 90                	xchg   ax,ax
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	68 6c 81 02 c0       	push   0xc002816c
c0015cb8:	e8 93 92 00 00       	call   c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	84 c0                	test   al,al
c0015cc2:	74 c4                	je     c0015c88 <cleanerTaskFunction(void*)+0x74>
c0015cc4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cc9:	83 e8 01             	sub    eax,0x1
c0015ccc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd1:	75 01                	jne    c0015cd4 <cleanerTaskFunction(void*)+0xc0>
c0015cd3:	fb                   	sti    
c0015cd4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015cd9:	83 e8 01             	sub    eax,0x1
c0015cdc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015ce1:	0f 85 31 ff ff ff    	jne    c0015c18 <cleanerTaskFunction(void*)+0x4>
c0015ce7:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015cec:	85 c0                	test   eax,eax
c0015cee:	0f 84 24 ff ff ff    	je     c0015c18 <cleanerTaskFunction(void*)+0x4>
c0015cf4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015cfe:	e8 79 f6 ff ff       	call   c001537c <schedule()>
c0015d03:	e9 10 ff ff ff       	jmp    c0015c18 <cleanerTaskFunction(void*)+0x4>
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	6a 02                	push   0x2
c0015d0d:	e8 56 f8 ff ff       	call   c0015568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	e9 36 ff ff ff       	jmp    c0015c50 <cleanerTaskFunction(void*)+0x3c>
c0015d1a:	66 90                	xchg   ax,ax

c0015d1c <terminateTask(int)>:
c0015d1c:	83 ec 14             	sub    esp,0x14
c0015d1f:	fa                   	cli    
c0015d20:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015d26:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015d2c:	83 c2 01             	add    edx,0x1
c0015d2f:	83 c1 01             	add    ecx,0x1
c0015d32:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d38:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015d3e:	fa                   	cli    
c0015d3f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d48:	83 c0 01             	add    eax,0x1
c0015d4b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d55:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015d58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d5d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d60:	50                   	push   eax
c0015d61:	68 6c 81 02 c0       	push   0xc002816c
c0015d66:	e8 c5 92 00 00       	call   c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015d7a:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015d7f:	85 c0                	test   eax,eax
c0015d81:	74 65                	je     c0015de8 <terminateTask(int)+0xcc>
c0015d83:	83 ec 0c             	sub    esp,0xc
c0015d86:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015d8d:	50                   	push   eax
c0015d8e:	e8 01 fb ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	66 90                	xchg   ax,ax
c0015d98:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d9d:	83 e8 01             	sub    eax,0x1
c0015da0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015da5:	75 01                	jne    c0015da8 <terminateTask(int)+0x8c>
c0015da7:	fb                   	sti    
c0015da8:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015dad:	83 e8 01             	sub    eax,0x1
c0015db0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015db5:	75 09                	jne    c0015dc0 <terminateTask(int)+0xa4>
c0015db7:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015dbe:	75 3c                	jne    c0015dfc <terminateTask(int)+0xe0>
c0015dc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dc5:	83 e8 01             	sub    eax,0x1
c0015dc8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dcd:	75 01                	jne    c0015dd0 <terminateTask(int)+0xb4>
c0015dcf:	fb                   	sti    
c0015dd0:	fa                   	cli    
c0015dd1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dd6:	83 c0 01             	add    eax,0x1
c0015dd9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dde:	66 90                	xchg   ax,ax
c0015de0:	e8 97 f5 ff ff       	call   c001537c <schedule()>
c0015de5:	eb d9                	jmp    c0015dc0 <terminateTask(int)+0xa4>
c0015de7:	90                   	nop
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	68 76 19 02 c0       	push   0xc0021976
c0015df0:	e8 44 4b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	eb 9e                	jmp    c0015d98 <terminateTask(int)+0x7c>
c0015dfa:	66 90                	xchg   ax,ax
c0015dfc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015e06:	eb d8                	jmp    c0015de0 <terminateTask(int)+0xc4>

c0015e08 <Thr::terminateFromIRQ(int)>:
c0015e08:	83 ec 18             	sub    esp,0x18
c0015e0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e0f:	50                   	push   eax
c0015e10:	e8 07 ff ff ff       	call   c0015d1c <terminateTask(int)>
c0015e15:	90                   	nop
c0015e16:	66 90                	xchg   ax,ax

c0015e18 <Semaphore::release()>:
c0015e18:	83 ec 0c             	sub    esp,0xc
c0015e1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e1f:	fa                   	cli    
c0015e20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e25:	83 c0 01             	add    eax,0x1
c0015e28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e2d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015e32:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e35:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015e3b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e3e:	85 c9                	test   ecx,ecx
c0015e40:	74 42                	je     c0015e84 <Semaphore::release()+0x6c>
c0015e42:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e45:	83 ec 0c             	sub    esp,0xc
c0015e48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e4b:	51                   	push   ecx
c0015e4c:	e8 43 fa ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c0015e51:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	83 e8 01             	sub    eax,0x1
c0015e5c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015e61:	85 c0                	test   eax,eax
c0015e63:	75 0b                	jne    c0015e70 <Semaphore::release()+0x58>
c0015e65:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015e6a:	85 c0                	test   eax,eax
c0015e6c:	75 22                	jne    c0015e90 <Semaphore::release()+0x78>
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e75:	83 e8 01             	sub    eax,0x1
c0015e78:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e7d:	75 01                	jne    c0015e80 <Semaphore::release()+0x68>
c0015e7f:	fb                   	sti    
c0015e80:	83 c4 0c             	add    esp,0xc
c0015e83:	c3                   	ret    
c0015e84:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e87:	83 e9 01             	sub    ecx,0x1
c0015e8a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e8d:	eb cd                	jmp    c0015e5c <Semaphore::release()+0x44>
c0015e8f:	90                   	nop
c0015e90:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015e9a:	e8 dd f4 ff ff       	call   c001537c <schedule()>
c0015e9f:	eb cf                	jmp    c0015e70 <Semaphore::release()+0x58>
c0015ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ea4 <__static_initialization_and_destruction_0(int, int)>:
c0015ea4:	83 ec 0c             	sub    esp,0xc
c0015ea7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015eac:	0f 85 8e 00 00 00    	jne    c0015f40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015eb2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015eba:	0f 85 80 00 00 00    	jne    c0015f40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	68 84 81 02 c0       	push   0xc0028184
c0015ec8:	e8 17 94 00 00       	call   c001f2e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	83 ec 04             	sub    esp,0x4
c0015ed3:	68 44 26 02 c0       	push   0xc0022644
c0015ed8:	68 84 81 02 c0       	push   0xc0028184
c0015edd:	68 94 f2 01 c0       	push   0xc001f294
c0015ee2:	e8 d5 48 ff ff       	call   c000a7bc <__cxa_atexit>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	83 ec 0c             	sub    esp,0xc
c0015eed:	68 78 81 02 c0       	push   0xc0028178
c0015ef2:	e8 ed 93 00 00       	call   c001f2e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	83 ec 04             	sub    esp,0x4
c0015efd:	68 44 26 02 c0       	push   0xc0022644
c0015f02:	68 78 81 02 c0       	push   0xc0028178
c0015f07:	68 94 f2 01 c0       	push   0xc001f294
c0015f0c:	e8 ab 48 ff ff       	call   c000a7bc <__cxa_atexit>
c0015f11:	83 c4 10             	add    esp,0x10
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	68 6c 81 02 c0       	push   0xc002816c
c0015f1c:	e8 c3 93 00 00       	call   c001f2e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f21:	83 c4 10             	add    esp,0x10
c0015f24:	83 ec 04             	sub    esp,0x4
c0015f27:	68 44 26 02 c0       	push   0xc0022644
c0015f2c:	68 6c 81 02 c0       	push   0xc002816c
c0015f31:	68 94 f2 01 c0       	push   0xc001f294
c0015f36:	e8 81 48 ff ff       	call   c000a7bc <__cxa_atexit>
c0015f3b:	83 c4 10             	add    esp,0x10
c0015f3e:	66 90                	xchg   ax,ax
c0015f40:	90                   	nop
c0015f41:	83 c4 0c             	add    esp,0xc
c0015f44:	c3                   	ret    
c0015f45:	8d 76 00             	lea    esi,[esi+0x0]

c0015f48 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	83 ec 08             	sub    esp,0x8
c0015f4e:	68 ff ff 00 00       	push   0xffff
c0015f53:	6a 01                	push   0x1
c0015f55:	e8 4a ff ff ff       	call   c0015ea4 <__static_initialization_and_destruction_0(int, int)>
c0015f5a:	83 c4 10             	add    esp,0x10
c0015f5d:	83 c4 0c             	add    esp,0xc
c0015f60:	c3                   	ret    

c0015f61 <Vm::inbv(unsigned short)>:
c0015f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f65:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015f6a:	75 06                	jne    c0015f72 <Vm::inbv(unsigned short)+0x11>
c0015f6c:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015f71:	c3                   	ret    
c0015f72:	ec                   	in     al,dx
c0015f73:	c3                   	ret    

c0015f74 <Vm::outbv(unsigned short, unsigned char)>:
c0015f74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f7c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015f81:	75 25                	jne    c0015fa8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015f83:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015f89:	8d 51 01             	lea    edx,[ecx+0x1]
c0015f8c:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015f92:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015f98:	83 fa 20             	cmp    edx,0x20
c0015f9b:	75 0c                	jne    c0015fa9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015f9d:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015fa7:	c3                   	ret    
c0015fa8:	ee                   	out    dx,al
c0015fa9:	c3                   	ret    

c0015faa <Vm::realToLinear(unsigned short, unsigned short)>:
c0015faa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015faf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015fb4:	c1 e0 04             	shl    eax,0x4
c0015fb7:	01 d0                	add    eax,edx
c0015fb9:	c3                   	ret    

c0015fba <Vm::getSegment(unsigned int)>:
c0015fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fbe:	c1 e8 10             	shr    eax,0x10
c0015fc1:	c3                   	ret    

c0015fc2 <Vm::getOffset(unsigned int)>:
c0015fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fc6:	c3                   	ret    

c0015fc7 <Vm::mainloop2()>:
c0015fc7:	83 ec 18             	sub    esp,0x18
c0015fca:	fa                   	cli    
c0015fcb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015fd1:	6a 02                	push   0x2
c0015fd3:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015fda:	e8 89 f5 ff ff       	call   c0015568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015fdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015fe8:	52                   	push   edx
c0015fe9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015fed:	52                   	push   edx
c0015fee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015ff2:	52                   	push   edx
c0015ff3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ff7:	50                   	push   eax
c0015ff8:	e8 12 a2 fe ff       	call   c000020f <goToVM86>
c0015ffd:	83 c4 2c             	add    esp,0x2c
c0016000:	c3                   	ret    

c0016001 <Vm::mainVm8086Loop(void*)>:
c0016001:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016006:	48                   	dec    eax
c0016007:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001600c:	75 01                	jne    c001600f <Vm::mainVm8086Loop(void*)+0xe>
c001600e:	fb                   	sti    
c001600f:	eb b6                	jmp    c0015fc7 <Vm::mainloop2()>

c0016011 <Vm::mainloop3(unsigned long)>:
c0016011:	83 ec 18             	sub    esp,0x18
c0016014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016018:	fa                   	cli    
c0016019:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001601f:	6a 02                	push   0x2
c0016021:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0016028:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c001602d:	e8 36 f5 ff ff       	call   c0015568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016032:	83 c4 1c             	add    esp,0x1c
c0016035:	eb 90                	jmp    c0015fc7 <Vm::mainloop2()>

c0016037 <Vm::initialise8086()>:
c0016037:	83 ec 0c             	sub    esp,0xc
c001603a:	68 80 00 00 00       	push   0x80
c001603f:	6a 00                	push   0x0
c0016041:	68 01 60 01 c0       	push   0xc0016001
c0016046:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001604c:	e8 db f0 ff ff       	call   c001512c <Process::createThread(void (*)(void*), void*, int)>
c0016051:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016058:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c001605d:	68 00 01 00 00       	push   0x100
c0016062:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016067:	6a 00                	push   0x0
c0016069:	6a 00                	push   0x0
c001606b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016071:	e8 98 3e ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016076:	83 c4 2c             	add    esp,0x2c
c0016079:	c3                   	ret    

c001607a <Vm::finish8086()>:
c001607a:	53                   	push   ebx
c001607b:	83 ec 08             	sub    esp,0x8
c001607e:	fa                   	cli    
c001607f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0016085:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c001608c:	75 15                	jne    c00160a3 <Vm::finish8086()+0x29>
c001608e:	e8 e9 f2 ff ff       	call   c001537c <schedule()>
c0016093:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016098:	48                   	dec    eax
c0016099:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001609e:	75 de                	jne    c001607e <Vm::finish8086()+0x4>
c00160a0:	fb                   	sti    
c00160a1:	eb db                	jmp    c001607e <Vm::finish8086()+0x4>
c00160a3:	83 ec 0c             	sub    esp,0xc
c00160a6:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c00160ac:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c00160b2:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c00160b9:	e8 d6 f7 ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c00160be:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	8d 50 ff             	lea    edx,[eax-0x1]
c00160c9:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00160cf:	85 d2                	test   edx,edx
c00160d1:	75 01                	jne    c00160d4 <Vm::finish8086()+0x5a>
c00160d3:	fb                   	sti    
c00160d4:	89 d8                	mov    eax,ebx
c00160d6:	83 c4 08             	add    esp,0x8
c00160d9:	5b                   	pop    ebx
c00160da:	c3                   	ret    

c00160db <Vm::getOutput8086(unsigned char*)>:
c00160db:	57                   	push   edi
c00160dc:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c00160e2:	56                   	push   esi
c00160e3:	be e0 81 02 c0       	mov    esi,0xc00281e0
c00160e8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00160ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160ee:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c00160f3:	5e                   	pop    esi
c00160f4:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00160fe:	5f                   	pop    edi
c00160ff:	c3                   	ret    

c0016100 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016100:	55                   	push   ebp
c0016101:	57                   	push   edi
c0016102:	56                   	push   esi
c0016103:	53                   	push   ebx
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001610b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001610f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016113:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016117:	fa                   	cli    
c0016118:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001611e:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0016125:	75 15                	jne    c001613c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016127:	e8 50 f2 ff ff       	call   c001537c <schedule()>
c001612c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016131:	48                   	dec    eax
c0016132:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016137:	75 de                	jne    c0016117 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016139:	fb                   	sti    
c001613a:	eb db                	jmp    c0016117 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001613c:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0016141:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c001614b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001614f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016153:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016157:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001615b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001615f:	0f b7 ff             	movzx  edi,di
c0016162:	0f b7 f6             	movzx  esi,si
c0016165:	50                   	push   eax
c0016166:	6a 20                	push   0x20
c0016168:	6a 00                	push   0x0
c001616a:	68 e0 81 02 c0       	push   0xc00281e0
c001616f:	e8 7c a3 fe ff       	call   c00004f0 <memset>
c0016174:	5a                   	pop    edx
c0016175:	59                   	pop    ecx
c0016176:	57                   	push   edi
c0016177:	56                   	push   esi
c0016178:	e8 2d fe ff ff       	call   c0015faa <Vm::realToLinear(unsigned short, unsigned short)>
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	89 c7                	mov    edi,eax
c0016182:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016186:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001618a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001618c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016191:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016198:	48                   	dec    eax
c0016199:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001619e:	75 01                	jne    c00161a1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00161a0:	fb                   	sti    
c00161a1:	83 ec 0c             	sub    esp,0xc
c00161a4:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c00161aa:	e8 e5 f6 ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c00161af:	83 c4 1c             	add    esp,0x1c
c00161b2:	b0 01                	mov    al,0x1
c00161b4:	5b                   	pop    ebx
c00161b5:	5e                   	pop    esi
c00161b6:	5f                   	pop    edi
c00161b7:	5d                   	pop    ebp
c00161b8:	c3                   	ret    

c00161b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00161b9:	55                   	push   ebp
c00161ba:	57                   	push   edi
c00161bb:	56                   	push   esi
c00161bc:	53                   	push   ebx
c00161bd:	83 ec 34             	sub    esp,0x34
c00161c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00161c4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00161c8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00161cc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00161d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161d8:	68 a4 1a 02 c0       	push   0xc0021aa4
c00161dd:	e8 57 47 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	fa                   	cli    
c00161e6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00161ec:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c00161f2:	84 db                	test   bl,bl
c00161f4:	75 15                	jne    c001620b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00161f6:	e8 81 f1 ff ff       	call   c001537c <schedule()>
c00161fb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016200:	48                   	dec    eax
c0016201:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016206:	75 dd                	jne    c00161e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016208:	fb                   	sti    
c0016209:	eb da                	jmp    c00161e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001620b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001620f:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0016214:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c001621e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016222:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016226:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001622a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001622e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016232:	50                   	push   eax
c0016233:	6a 20                	push   0x20
c0016235:	6a 00                	push   0x0
c0016237:	68 e0 81 02 c0       	push   0xc00281e0
c001623c:	e8 af a2 fe ff       	call   c00004f0 <memset>
c0016241:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016248:	e8 61 18 ff ff       	call   c0007aae <malloc>
c001624d:	83 c4 0c             	add    esp,0xc
c0016250:	89 c5                	mov    ebp,eax
c0016252:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0016258:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001625c:	50                   	push   eax
c001625d:	e8 2e 4f ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	85 ed                	test   ebp,ebp
c0016267:	75 0a                	jne    c0016273 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016269:	83 ec 0c             	sub    esp,0xc
c001626c:	68 c6 1a 02 c0       	push   0xc0021ac6
c0016271:	eb 2b                	jmp    c001629e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016273:	50                   	push   eax
c0016274:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016278:	50                   	push   eax
c0016279:	8d 44 24 20          	lea    eax,[esp+0x20]
c001627d:	50                   	push   eax
c001627e:	55                   	push   ebp
c001627f:	e8 74 52 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0016284:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016288:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016294:	74 27                	je     c00162bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	68 da 1a 02 c0       	push   0xc0021ada
c001629e:	e8 16 a9 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00162a3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	48                   	dec    eax
c00162ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00162b1:	85 c0                	test   eax,eax
c00162b3:	75 01                	jne    c00162b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00162b5:	fb                   	sti    
c00162b6:	31 db                	xor    ebx,ebx
c00162b8:	e9 90 00 00 00       	jmp    c001634d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00162bd:	51                   	push   ecx
c00162be:	51                   	push   ecx
c00162bf:	6a 01                	push   0x1
c00162c1:	55                   	push   ebp
c00162c2:	e8 85 4f ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00162c7:	83 c4 10             	add    esp,0x10
c00162ca:	85 c0                	test   eax,eax
c00162cc:	74 26                	je     c00162f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	68 f3 1a 02 c0       	push   0xc0021af3
c00162d6:	e8 de a8 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00162db:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	48                   	dec    eax
c00162e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00162e9:	85 c0                	test   eax,eax
c00162eb:	75 c9                	jne    c00162b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00162ed:	fb                   	sti    
c00162ee:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00162f2:	eb 59                	jmp    c001634d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00162f4:	0f b7 ff             	movzx  edi,di
c00162f7:	50                   	push   eax
c00162f8:	0f b7 f6             	movzx  esi,si
c00162fb:	50                   	push   eax
c00162fc:	57                   	push   edi
c00162fd:	56                   	push   esi
c00162fe:	e8 a7 fc ff ff       	call   c0015faa <Vm::realToLinear(unsigned short, unsigned short)>
c0016303:	5a                   	pop    edx
c0016304:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016307:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001630b:	51                   	push   ecx
c001630c:	50                   	push   eax
c001630d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016311:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016315:	55                   	push   ebp
c0016316:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016319:	83 c4 14             	add    esp,0x14
c001631c:	55                   	push   ebp
c001631d:	e8 88 4f ff ff       	call   c000b2aa <File::close()>
c0016322:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016327:	83 c4 10             	add    esp,0x10
c001632a:	48                   	dec    eax
c001632b:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016332:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016337:	85 c0                	test   eax,eax
c0016339:	75 01                	jne    c001633c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001633b:	fb                   	sti    
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016345:	e8 4a f5 ff ff       	call   c0015894 <unblockTask(ThreadControlBlock*)>
c001634a:	83 c4 10             	add    esp,0x10
c001634d:	83 c4 2c             	add    esp,0x2c
c0016350:	88 d8                	mov    al,bl
c0016352:	5b                   	pop    ebx
c0016353:	5e                   	pop    esi
c0016354:	5f                   	pop    edi
c0016355:	5d                   	pop    ebp
c0016356:	c3                   	ret    

c0016357 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016357:	57                   	push   edi
c0016358:	56                   	push   esi
c0016359:	53                   	push   ebx
c001635a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001635e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016362:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016366:	83 e8 06             	sub    eax,0x6
c0016369:	0f b7 c0             	movzx  eax,ax
c001636c:	50                   	push   eax
c001636d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016372:	50                   	push   eax
c0016373:	e8 32 fc ff ff       	call   c0015faa <Vm::realToLinear(unsigned short, unsigned short)>
c0016378:	5a                   	pop    edx
c0016379:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c001637c:	59                   	pop    ecx
c001637d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016380:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016383:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016389:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001638c:	8d 56 02             	lea    edx,[esi+0x2]
c001638f:	66 89 10             	mov    WORD PTR [eax],dx
c0016392:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016396:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001639a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001639d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00163a1:	0f b6 f1             	movzx  esi,cl
c00163a4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ae:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00163b2:	0f b6 d5             	movzx  edx,ch
c00163b5:	74 0a                	je     c00163c1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00163b7:	c1 e2 08             	shl    edx,0x8
c00163ba:	09 f2                	or     edx,esi
c00163bc:	80 ce 02             	or     dh,0x2
c00163bf:	eb 08                	jmp    c00163c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00163c1:	c1 e2 08             	shl    edx,0x8
c00163c4:	09 f2                	or     edx,esi
c00163c6:	80 e6 fd             	and    dh,0xfd
c00163c9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163d6:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00163de:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00163e1:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00163e9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00163ec:	5b                   	pop    ebx
c00163ed:	5e                   	pop    esi
c00163ee:	5f                   	pop    edi
c00163ef:	c3                   	ret    

c00163f0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00163f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163fa:	c1 e0 04             	shl    eax,0x4
c00163fd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016400:	c3                   	ret    

c0016401 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016401:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016406:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001640b:	c1 e0 04             	shl    eax,0x4
c001640e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016412:	c3                   	ret    

c0016413 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016413:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016418:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001641d:	c1 e0 04             	shl    eax,0x4
c0016420:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016423:	c3                   	ret    

c0016424 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016424:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016429:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001642e:	c1 e0 04             	shl    eax,0x4
c0016431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016435:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016438:	c3                   	ret    

c0016439 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016439:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001643e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016443:	c1 e0 04             	shl    eax,0x4
c0016446:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001644a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001644e:	c3                   	ret    

c001644f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001644f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016454:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016459:	c1 e0 04             	shl    eax,0x4
c001645c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016460:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016463:	c3                   	ret    

c0016464 <Vm::faultHandler(regs*)>:
c0016464:	55                   	push   ebp
c0016465:	57                   	push   edi
c0016466:	56                   	push   esi
c0016467:	53                   	push   ebx
c0016468:	83 ec 2c             	sub    esp,0x2c
c001646b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001646f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016472:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016476:	0f b7 f8             	movzx  edi,ax
c0016479:	52                   	push   edx
c001647a:	0f b7 c0             	movzx  eax,ax
c001647d:	50                   	push   eax
c001647e:	e8 27 fb ff ff       	call   c0015faa <Vm::realToLinear(unsigned short, unsigned short)>
c0016483:	5a                   	pop    edx
c0016484:	59                   	pop    ecx
c0016485:	89 c1                	mov    ecx,eax
c0016487:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001648a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001648e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016493:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016497:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001649a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001649e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00164a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00164af:	e8 f6 fa ff ff       	call   c0015faa <Vm::realToLinear(unsigned short, unsigned short)>
c00164b4:	5e                   	pop    esi
c00164b5:	be 06 00 00 00       	mov    esi,0x6
c00164ba:	5d                   	pop    ebp
c00164bb:	31 ed                	xor    ebp,ebp
c00164bd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00164c2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00164c5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00164cb:	0f 84 74 02 00 00    	je     c0016745 <Vm::faultHandler(regs*)+0x2e1>
c00164d1:	0f 87 94 00 00 00    	ja     c001656b <Vm::faultHandler(regs*)+0x107>
c00164d7:	83 fa 66             	cmp    edx,0x66
c00164da:	0f 84 e2 01 00 00    	je     c00166c2 <Vm::faultHandler(regs*)+0x25e>
c00164e0:	77 47                	ja     c0016529 <Vm::faultHandler(regs*)+0xc5>
c00164e2:	83 fa 36             	cmp    edx,0x36
c00164e5:	0f 84 ca 01 00 00    	je     c00166b5 <Vm::faultHandler(regs*)+0x251>
c00164eb:	77 1a                	ja     c0016507 <Vm::faultHandler(regs*)+0xa3>
c00164ed:	83 fa 26             	cmp    edx,0x26
c00164f0:	0f 84 98 01 00 00    	je     c001668e <Vm::faultHandler(regs*)+0x22a>
c00164f6:	83 fa 2e             	cmp    edx,0x2e
c00164f9:	0f 85 21 06 00 00    	jne    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c00164ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016502:	31 f6                	xor    esi,esi
c0016504:	41                   	inc    ecx
c0016505:	eb bb                	jmp    c00164c2 <Vm::faultHandler(regs*)+0x5e>
c0016507:	83 fa 64             	cmp    edx,0x64
c001650a:	0f 84 8b 01 00 00    	je     c001669b <Vm::faultHandler(regs*)+0x237>
c0016510:	0f 87 92 01 00 00    	ja     c00166a8 <Vm::faultHandler(regs*)+0x244>
c0016516:	83 fa 3e             	cmp    edx,0x3e
c0016519:	0f 85 01 06 00 00    	jne    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c001651f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016522:	be 01 00 00 00       	mov    esi,0x1
c0016527:	eb db                	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c0016529:	83 fa 6d             	cmp    edx,0x6d
c001652c:	0f 84 34 03 00 00    	je     c0016866 <Vm::faultHandler(regs*)+0x402>
c0016532:	77 17                	ja     c001654b <Vm::faultHandler(regs*)+0xe7>
c0016534:	83 fa 67             	cmp    edx,0x67
c0016537:	0f 84 92 01 00 00    	je     c00166cf <Vm::faultHandler(regs*)+0x26b>
c001653d:	83 fa 6c             	cmp    edx,0x6c
c0016540:	0f 84 b1 02 00 00    	je     c00167f7 <Vm::faultHandler(regs*)+0x393>
c0016546:	e9 d5 05 00 00       	jmp    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c001654b:	83 fa 6f             	cmp    edx,0x6f
c001654e:	0f 84 3d 04 00 00    	je     c0016991 <Vm::faultHandler(regs*)+0x52d>
c0016554:	0f 82 9f 03 00 00    	jb     c00168f9 <Vm::faultHandler(regs*)+0x495>
c001655a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016560:	0f 84 76 01 00 00    	je     c00166dc <Vm::faultHandler(regs*)+0x278>
c0016566:	e9 b5 05 00 00       	jmp    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c001656b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016571:	0f 84 51 05 00 00    	je     c0016ac8 <Vm::faultHandler(regs*)+0x664>
c0016577:	0f 87 a9 00 00 00    	ja     c0016626 <Vm::faultHandler(regs*)+0x1c2>
c001657d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016583:	0f 84 d0 04 00 00    	je     c0016a59 <Vm::faultHandler(regs*)+0x5f5>
c0016589:	77 78                	ja     c0016603 <Vm::faultHandler(regs*)+0x19f>
c001658b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016591:	0f 84 0e 02 00 00    	je     c00167a5 <Vm::faultHandler(regs*)+0x341>
c0016597:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001659d:	0f 85 7d 05 00 00    	jne    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c00165a3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00165a7:	89 d1                	mov    ecx,edx
c00165a9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00165ac:	c1 e1 08             	shl    ecx,0x8
c00165af:	09 ca                	or     edx,ecx
c00165b1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00165b4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00165b8:	89 d1                	mov    ecx,edx
c00165ba:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00165be:	c1 e1 08             	shl    ecx,0x8
c00165c1:	09 ca                	or     edx,ecx
c00165c3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00165c6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00165ca:	89 d1                	mov    ecx,edx
c00165cc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00165d0:	c1 e1 08             	shl    ecx,0x8
c00165d3:	09 ca                	or     edx,ecx
c00165d5:	81 ca 00 02 02 00    	or     edx,0x20200
c00165db:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00165de:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00165e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165e8:	d1 e8                	shr    eax,1
c00165ea:	83 e0 01             	and    eax,0x1
c00165ed:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00165f0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165f3:	83 c0 06             	add    eax,0x6
c00165f6:	25 ff ff 00 00       	and    eax,0xffff
c00165fb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00165fe:	e9 19 05 00 00       	jmp    c0016b1c <Vm::faultHandler(regs*)+0x6b8>
c0016603:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016609:	0f 84 8f 04 00 00    	je     c0016a9e <Vm::faultHandler(regs*)+0x63a>
c001660f:	0f 82 60 04 00 00    	jb     c0016a75 <Vm::faultHandler(regs*)+0x611>
c0016615:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001661b:	0f 84 94 04 00 00    	je     c0016ab5 <Vm::faultHandler(regs*)+0x651>
c0016621:	e9 fa 04 00 00       	jmp    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c0016626:	81 fa ef 00 00 00    	cmp    edx,0xef
c001662c:	0f 84 d7 04 00 00    	je     c0016b09 <Vm::faultHandler(regs*)+0x6a5>
c0016632:	77 2e                	ja     c0016662 <Vm::faultHandler(regs*)+0x1fe>
c0016634:	81 fa ed 00 00 00    	cmp    edx,0xed
c001663a:	0f 84 a4 04 00 00    	je     c0016ae4 <Vm::faultHandler(regs*)+0x680>
c0016640:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016646:	0f 85 d4 04 00 00    	jne    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c001664c:	50                   	push   eax
c001664d:	50                   	push   eax
c001664e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016652:	50                   	push   eax
c0016653:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016657:	50                   	push   eax
c0016658:	e8 17 f9 ff ff       	call   c0015f74 <Vm::outbv(unsigned short, unsigned char)>
c001665d:	e9 9f 04 00 00       	jmp    c0016b01 <Vm::faultHandler(regs*)+0x69d>
c0016662:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016668:	0f 84 6d 01 00 00    	je     c00167db <Vm::faultHandler(regs*)+0x377>
c001666e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016674:	0f 84 6f 01 00 00    	je     c00167e9 <Vm::faultHandler(regs*)+0x385>
c001667a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016680:	0f 85 9a 04 00 00    	jne    c0016b20 <Vm::faultHandler(regs*)+0x6bc>
c0016686:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016689:	e9 76 fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c001668e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016691:	be 02 00 00 00       	mov    esi,0x2
c0016696:	e9 69 fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c001669b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001669e:	be 03 00 00 00       	mov    esi,0x3
c00166a3:	e9 5c fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c00166a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166ab:	be 04 00 00 00       	mov    esi,0x4
c00166b0:	e9 4f fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c00166b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166b8:	be 05 00 00 00       	mov    esi,0x5
c00166bd:	e9 42 fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c00166c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166c5:	bd 01 00 00 00       	mov    ebp,0x1
c00166ca:	e9 35 fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c00166cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166d2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00166d7:	e9 28 fe ff ff       	jmp    c0016504 <Vm::faultHandler(regs*)+0xa0>
c00166dc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00166df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166e3:	83 e5 01             	and    ebp,0x1
c00166e6:	74 30                	je     c0016718 <Vm::faultHandler(regs*)+0x2b4>
c00166e8:	83 e9 04             	sub    ecx,0x4
c00166eb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166f1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166f7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166fa:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016703:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016707:	0f 84 0c 04 00 00    	je     c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c001670d:	80 ce 02             	or     dh,0x2
c0016710:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016713:	e9 01 04 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016718:	83 e9 02             	sub    ecx,0x2
c001671b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016721:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016724:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016728:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001672e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016732:	74 05                	je     c0016739 <Vm::faultHandler(regs*)+0x2d5>
c0016734:	80 ce 02             	or     dh,0x2
c0016737:	eb 03                	jmp    c001673c <Vm::faultHandler(regs*)+0x2d8>
c0016739:	80 e6 fd             	and    dh,0xfd
c001673c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016740:	e9 d4 03 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016745:	83 e5 01             	and    ebp,0x1
c0016748:	74 2a                	je     c0016774 <Vm::faultHandler(regs*)+0x310>
c001674a:	8b 10                	mov    edx,DWORD PTR [eax]
c001674c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016752:	81 ca 00 02 02 00    	or     edx,0x20200
c0016758:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001675b:	8b 00                	mov    eax,DWORD PTR [eax]
c001675d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016763:	c1 e8 09             	shr    eax,0x9
c0016766:	83 e0 01             	and    eax,0x1
c0016769:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001676c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001676f:	83 c0 04             	add    eax,0x4
c0016772:	eb 24                	jmp    c0016798 <Vm::faultHandler(regs*)+0x334>
c0016774:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016777:	81 ca 00 02 02 00    	or     edx,0x20200
c001677d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016780:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016783:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016789:	c1 e8 09             	shr    eax,0x9
c001678c:	83 e0 01             	and    eax,0x1
c001678f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016792:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016795:	83 c0 02             	add    eax,0x2
c0016798:	25 ff ff 00 00       	and    eax,0xffff
c001679d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00167a0:	e9 74 03 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c00167a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167a9:	3d ee 00 00 00       	cmp    eax,0xee
c00167ae:	75 10                	jne    c00167c0 <Vm::faultHandler(regs*)+0x35c>
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00167b6:	e8 56 f8 ff ff       	call   c0016011 <Vm::mainloop3(unsigned long)>
c00167bb:	e9 44 03 00 00       	jmp    c0016b04 <Vm::faultHandler(regs*)+0x6a0>
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00167c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167cb:	51                   	push   ecx
c00167cc:	50                   	push   eax
c00167cd:	53                   	push   ebx
c00167ce:	e8 84 fb ff ff       	call   c0016357 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00167d3:	83 c4 20             	add    esp,0x20
c00167d6:	e9 41 03 00 00       	jmp    c0016b1c <Vm::faultHandler(regs*)+0x6b8>
c00167db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00167e4:	e9 30 03 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c00167e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ee:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00167f2:	e9 22 03 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c00167f7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167fa:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167ff:	74 2b                	je     c001682c <Vm::faultHandler(regs*)+0x3c8>
c0016801:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016808:	76 22                	jbe    c001682c <Vm::faultHandler(regs*)+0x3c8>
c001680a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001680e:	50                   	push   eax
c001680f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016813:	50                   	push   eax
c0016814:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016818:	50                   	push   eax
c0016819:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001681d:	50                   	push   eax
c001681e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016822:	50                   	push   eax
c0016823:	6a 6c                	push   0x6c
c0016825:	6a 6c                	push   0x6c
c0016827:	e9 bd 01 00 00       	jmp    c00169e9 <Vm::faultHandler(regs*)+0x585>
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016833:	0f b7 f6             	movzx  esi,si
c0016836:	50                   	push   eax
c0016837:	e8 25 f7 ff ff       	call   c0015f61 <Vm::inbv(unsigned short)>
c001683c:	83 c4 0c             	add    esp,0xc
c001683f:	0f b6 c0             	movzx  eax,al
c0016842:	50                   	push   eax
c0016843:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016847:	50                   	push   eax
c0016848:	56                   	push   esi
c0016849:	e8 d6 fb ff ff       	call   c0016424 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016854:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016858:	74 03                	je     c001685d <Vm::faultHandler(regs*)+0x3f9>
c001685a:	48                   	dec    eax
c001685b:	eb 01                	jmp    c001685e <Vm::faultHandler(regs*)+0x3fa>
c001685d:	40                   	inc    eax
c001685e:	0f b7 c0             	movzx  eax,ax
c0016861:	e9 8b 00 00 00       	jmp    c00168f1 <Vm::faultHandler(regs*)+0x48d>
c0016866:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016869:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001686c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016871:	74 29                	je     c001689c <Vm::faultHandler(regs*)+0x438>
c0016873:	3d ff ff 00 00       	cmp    eax,0xffff
c0016878:	76 22                	jbe    c001689c <Vm::faultHandler(regs*)+0x438>
c001687a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001687e:	50                   	push   eax
c001687f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016883:	50                   	push   eax
c0016884:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016888:	50                   	push   eax
c0016889:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001688d:	50                   	push   eax
c001688e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016892:	50                   	push   eax
c0016893:	6a 6d                	push   0x6d
c0016895:	6a 6d                	push   0x6d
c0016897:	e9 4d 01 00 00       	jmp    c00169e9 <Vm::faultHandler(regs*)+0x585>
c001689c:	0f b7 c8             	movzx  ecx,ax
c001689f:	0f b7 f6             	movzx  esi,si
c00168a2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00168a5:	83 e5 01             	and    ebp,0x1
c00168a8:	74 20                	je     c00168ca <Vm::faultHandler(regs*)+0x466>
c00168aa:	ed                   	in     eax,dx
c00168ab:	55                   	push   ebp
c00168ac:	50                   	push   eax
c00168ad:	51                   	push   ecx
c00168ae:	56                   	push   esi
c00168af:	e8 9b fb ff ff       	call   c001644f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00168b4:	83 c4 10             	add    esp,0x10
c00168b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168ba:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168be:	74 05                	je     c00168c5 <Vm::faultHandler(regs*)+0x461>
c00168c0:	83 e8 04             	sub    eax,0x4
c00168c3:	eb 27                	jmp    c00168ec <Vm::faultHandler(regs*)+0x488>
c00168c5:	83 c0 04             	add    eax,0x4
c00168c8:	eb 22                	jmp    c00168ec <Vm::faultHandler(regs*)+0x488>
c00168ca:	66 ed                	in     ax,dx
c00168cc:	0f b7 c0             	movzx  eax,ax
c00168cf:	57                   	push   edi
c00168d0:	50                   	push   eax
c00168d1:	51                   	push   ecx
c00168d2:	56                   	push   esi
c00168d3:	e8 61 fb ff ff       	call   c0016439 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00168d8:	83 c4 10             	add    esp,0x10
c00168db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168de:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168e2:	74 05                	je     c00168e9 <Vm::faultHandler(regs*)+0x485>
c00168e4:	83 e8 02             	sub    eax,0x2
c00168e7:	eb 03                	jmp    c00168ec <Vm::faultHandler(regs*)+0x488>
c00168e9:	83 c0 02             	add    eax,0x2
c00168ec:	25 ff ff 00 00       	and    eax,0xffff
c00168f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00168f4:	e9 20 02 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c00168f9:	8d 46 ff             	lea    eax,[esi-0x1]
c00168fc:	0f b6 f0             	movzx  esi,al
c00168ff:	83 fe 05             	cmp    esi,0x5
c0016902:	77 23                	ja     c0016927 <Vm::faultHandler(regs*)+0x4c3>
c0016904:	ff 24 b5 68 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde498]
c001690b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016910:	eb 15                	jmp    c0016927 <Vm::faultHandler(regs*)+0x4c3>
c0016912:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016916:	eb 0f                	jmp    c0016927 <Vm::faultHandler(regs*)+0x4c3>
c0016918:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001691c:	eb 09                	jmp    c0016927 <Vm::faultHandler(regs*)+0x4c3>
c001691e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016922:	eb 03                	jmp    c0016927 <Vm::faultHandler(regs*)+0x4c3>
c0016924:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016927:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001692a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001692f:	74 29                	je     c001695a <Vm::faultHandler(regs*)+0x4f6>
c0016931:	3d ff ff 00 00       	cmp    eax,0xffff
c0016936:	76 22                	jbe    c001695a <Vm::faultHandler(regs*)+0x4f6>
c0016938:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001693c:	50                   	push   eax
c001693d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016941:	50                   	push   eax
c0016942:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016946:	50                   	push   eax
c0016947:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001694b:	50                   	push   eax
c001694c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016950:	50                   	push   eax
c0016951:	6a 6e                	push   0x6e
c0016953:	6a 6e                	push   0x6e
c0016955:	e9 8f 00 00 00       	jmp    c00169e9 <Vm::faultHandler(regs*)+0x585>
c001695a:	0f b7 c0             	movzx  eax,ax
c001695d:	52                   	push   edx
c001695e:	52                   	push   edx
c001695f:	50                   	push   eax
c0016960:	57                   	push   edi
c0016961:	e8 8a fa ff ff       	call   c00163f0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016966:	59                   	pop    ecx
c0016967:	0f b6 c0             	movzx  eax,al
c001696a:	5e                   	pop    esi
c001696b:	50                   	push   eax
c001696c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016970:	50                   	push   eax
c0016971:	e8 fe f5 ff ff       	call   c0015f74 <Vm::outbv(unsigned short, unsigned char)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001697c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016980:	74 03                	je     c0016985 <Vm::faultHandler(regs*)+0x521>
c0016982:	48                   	dec    eax
c0016983:	eb 01                	jmp    c0016986 <Vm::faultHandler(regs*)+0x522>
c0016985:	40                   	inc    eax
c0016986:	0f b7 c0             	movzx  eax,ax
c0016989:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001698c:	e9 88 01 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016991:	8d 46 ff             	lea    eax,[esi-0x1]
c0016994:	0f b6 f0             	movzx  esi,al
c0016997:	83 fe 05             	cmp    esi,0x5
c001699a:	77 1e                	ja     c00169ba <Vm::faultHandler(regs*)+0x556>
c001699c:	ff 24 b5 80 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde480]
c00169a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00169a7:	eb 11                	jmp    c00169ba <Vm::faultHandler(regs*)+0x556>
c00169a9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00169ac:	eb 0c                	jmp    c00169ba <Vm::faultHandler(regs*)+0x556>
c00169ae:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00169b1:	eb 07                	jmp    c00169ba <Vm::faultHandler(regs*)+0x556>
c00169b3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00169b6:	eb 02                	jmp    c00169ba <Vm::faultHandler(regs*)+0x556>
c00169b8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00169ba:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00169bd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00169c2:	74 37                	je     c00169fb <Vm::faultHandler(regs*)+0x597>
c00169c4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00169ca:	76 2f                	jbe    c00169fb <Vm::faultHandler(regs*)+0x597>
c00169cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169d0:	50                   	push   eax
c00169d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169d5:	50                   	push   eax
c00169d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169da:	50                   	push   eax
c00169db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169df:	50                   	push   eax
c00169e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169e4:	50                   	push   eax
c00169e5:	6a 6f                	push   0x6f
c00169e7:	6a 6f                	push   0x6f
c00169e9:	68 0c 1b 02 c0       	push   0xc0021b0c
c00169ee:	e8 46 3f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00169f3:	83 c4 20             	add    esp,0x20
c00169f6:	e9 83 01 00 00       	jmp    c0016b7e <Vm::faultHandler(regs*)+0x71a>
c00169fb:	0f b7 d7             	movzx  edx,di
c00169fe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016a01:	0f b7 c6             	movzx  eax,si
c0016a04:	81 e1 00 04 00 00    	and    ecx,0x400
c0016a0a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016a0d:	83 e5 01             	and    ebp,0x1
c0016a10:	74 1d                	je     c0016a2f <Vm::faultHandler(regs*)+0x5cb>
c0016a12:	55                   	push   ebp
c0016a13:	55                   	push   ebp
c0016a14:	50                   	push   eax
c0016a15:	52                   	push   edx
c0016a16:	e8 f8 f9 ff ff       	call   c0016413 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	89 fa                	mov    edx,edi
c0016a20:	ef                   	out    dx,eax
c0016a21:	85 c9                	test   ecx,ecx
c0016a23:	74 05                	je     c0016a2a <Vm::faultHandler(regs*)+0x5c6>
c0016a25:	83 ee 04             	sub    esi,0x4
c0016a28:	eb 21                	jmp    c0016a4b <Vm::faultHandler(regs*)+0x5e7>
c0016a2a:	83 c6 04             	add    esi,0x4
c0016a2d:	eb 1c                	jmp    c0016a4b <Vm::faultHandler(regs*)+0x5e7>
c0016a2f:	55                   	push   ebp
c0016a30:	55                   	push   ebp
c0016a31:	50                   	push   eax
c0016a32:	52                   	push   edx
c0016a33:	e8 c9 f9 ff ff       	call   c0016401 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	89 fa                	mov    edx,edi
c0016a3d:	66 ef                	out    dx,ax
c0016a3f:	85 c9                	test   ecx,ecx
c0016a41:	74 05                	je     c0016a48 <Vm::faultHandler(regs*)+0x5e4>
c0016a43:	83 ee 02             	sub    esi,0x2
c0016a46:	eb 03                	jmp    c0016a4b <Vm::faultHandler(regs*)+0x5e7>
c0016a48:	83 c6 02             	add    esi,0x2
c0016a4b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016a51:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016a54:	e9 c0 00 00 00       	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016a59:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a67:	50                   	push   eax
c0016a68:	e8 f4 f4 ff ff       	call   c0015f61 <Vm::inbv(unsigned short)>
c0016a6d:	0f b6 c0             	movzx  eax,al
c0016a70:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a73:	eb 3a                	jmp    c0016aaf <Vm::faultHandler(regs*)+0x64b>
c0016a75:	83 e5 01             	and    ebp,0x1
c0016a78:	74 07                	je     c0016a81 <Vm::faultHandler(regs*)+0x61d>
c0016a7a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a7e:	ed                   	in     eax,dx
c0016a7f:	eb 14                	jmp    c0016a95 <Vm::faultHandler(regs*)+0x631>
c0016a81:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a84:	66 31 f6             	xor    si,si
c0016a87:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a8a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a8e:	66 ed                	in     ax,dx
c0016a90:	0f b7 c0             	movzx  eax,ax
c0016a93:	09 f0                	or     eax,esi
c0016a95:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a9c:	eb 7e                	jmp    c0016b1c <Vm::faultHandler(regs*)+0x6b8>
c0016a9e:	52                   	push   edx
c0016a9f:	52                   	push   edx
c0016aa0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016aa4:	50                   	push   eax
c0016aa5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016aa9:	50                   	push   eax
c0016aaa:	e8 c5 f4 ff ff       	call   c0015f74 <Vm::outbv(unsigned short, unsigned char)>
c0016aaf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016ab3:	eb 4f                	jmp    c0016b04 <Vm::faultHandler(regs*)+0x6a0>
c0016ab5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ab8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016abc:	83 e5 01             	and    ebp,0x1
c0016abf:	74 03                	je     c0016ac4 <Vm::faultHandler(regs*)+0x660>
c0016ac1:	ef                   	out    dx,eax
c0016ac2:	eb d4                	jmp    c0016a98 <Vm::faultHandler(regs*)+0x634>
c0016ac4:	66 ef                	out    dx,ax
c0016ac6:	eb d0                	jmp    c0016a98 <Vm::faultHandler(regs*)+0x634>
c0016ac8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016acf:	83 ec 0c             	sub    esp,0xc
c0016ad2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ad6:	50                   	push   eax
c0016ad7:	e8 85 f4 ff ff       	call   c0015f61 <Vm::inbv(unsigned short)>
c0016adc:	0f b6 c0             	movzx  eax,al
c0016adf:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016ae2:	eb 1d                	jmp    c0016b01 <Vm::faultHandler(regs*)+0x69d>
c0016ae4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ae7:	83 e5 01             	and    ebp,0x1
c0016aea:	74 03                	je     c0016aef <Vm::faultHandler(regs*)+0x68b>
c0016aec:	ed                   	in     eax,dx
c0016aed:	eb 0d                	jmp    c0016afc <Vm::faultHandler(regs*)+0x698>
c0016aef:	66 ed                	in     ax,dx
c0016af1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016af4:	0f b7 c0             	movzx  eax,ax
c0016af7:	66 31 d2             	xor    dx,dx
c0016afa:	09 d0                	or     eax,edx
c0016afc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016aff:	eb 18                	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016b01:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	eb 13                	jmp    c0016b1c <Vm::faultHandler(regs*)+0x6b8>
c0016b09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b0c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b0f:	83 e5 01             	and    ebp,0x1
c0016b12:	74 03                	je     c0016b17 <Vm::faultHandler(regs*)+0x6b3>
c0016b14:	ef                   	out    dx,eax
c0016b15:	eb 02                	jmp    c0016b19 <Vm::faultHandler(regs*)+0x6b5>
c0016b17:	66 ef                	out    dx,ax
c0016b19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b1c:	b0 01                	mov    al,0x1
c0016b1e:	eb 60                	jmp    c0016b80 <Vm::faultHandler(regs*)+0x71c>
c0016b20:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b24:	50                   	push   eax
c0016b25:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b29:	50                   	push   eax
c0016b2a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b2e:	50                   	push   eax
c0016b2f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b33:	50                   	push   eax
c0016b34:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b38:	50                   	push   eax
c0016b39:	52                   	push   edx
c0016b3a:	52                   	push   edx
c0016b3b:	68 39 1b 02 c0       	push   0xc0021b39
c0016b40:	e8 f4 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016b45:	83 c4 20             	add    esp,0x20
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	6a 60                	push   0x60
c0016b4d:	e8 0f f4 ff ff       	call   c0015f61 <Vm::inbv(unsigned short)>
c0016b52:	83 c4 10             	add    esp,0x10
c0016b55:	0f b6 d0             	movzx  edx,al
c0016b58:	83 fa 1c             	cmp    edx,0x1c
c0016b5b:	74 05                	je     c0016b62 <Vm::faultHandler(regs*)+0x6fe>
c0016b5d:	83 fa 5a             	cmp    edx,0x5a
c0016b60:	75 e6                	jne    c0016b48 <Vm::faultHandler(regs*)+0x6e4>
c0016b62:	0f b6 c0             	movzx  eax,al
c0016b65:	83 f8 1c             	cmp    eax,0x1c
c0016b68:	74 05                	je     c0016b6f <Vm::faultHandler(regs*)+0x70b>
c0016b6a:	83 f8 5a             	cmp    eax,0x5a
c0016b6d:	75 0f                	jne    c0016b7e <Vm::faultHandler(regs*)+0x71a>
c0016b6f:	83 ec 0c             	sub    esp,0xc
c0016b72:	6a 60                	push   0x60
c0016b74:	e8 e8 f3 ff ff       	call   c0015f61 <Vm::inbv(unsigned short)>
c0016b79:	83 c4 10             	add    esp,0x10
c0016b7c:	eb e4                	jmp    c0016b62 <Vm::faultHandler(regs*)+0x6fe>
c0016b7e:	31 c0                	xor    eax,eax
c0016b80:	83 c4 2c             	add    esp,0x2c
c0016b83:	5b                   	pop    ebx
c0016b84:	5e                   	pop    esi
c0016b85:	5f                   	pop    edi
c0016b86:	5d                   	pop    ebp
c0016b87:	c3                   	ret    

c0016b88 <noCopro(unsigned long)>:
c0016b88:	c3                   	ret    

c0016b89 <nmiHandler(regs*, void*)>:
c0016b89:	83 ec 0c             	sub    esp,0xc
c0016b8c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b91:	83 ec 0c             	sub    esp,0xc
c0016b94:	50                   	push   eax
c0016b95:	e8 14 07 ff ff       	call   c00072ae <Computer::handleNMI()>
c0016b9a:	83 c4 10             	add    esp,0x10
c0016b9d:	90                   	nop
c0016b9e:	83 c4 0c             	add    esp,0xc
c0016ba1:	c3                   	ret    

c0016ba2 <doubleFault(regs*, void*)>:
c0016ba2:	55                   	push   ebp
c0016ba3:	89 e5                	mov    ebp,esp
c0016ba5:	83 ec 08             	sub    esp,0x8
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	68 98 1b 02 c0       	push   0xc0021b98
c0016bb0:	e8 04 a0 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0016bb5:	83 c4 10             	add    esp,0x10
c0016bb8:	90                   	nop
c0016bb9:	c9                   	leave  
c0016bba:	c3                   	ret    

c0016bbb <displayDebugInfo(regs*)>:
c0016bbb:	83 ec 1c             	sub    esp,0x1c
c0016bbe:	0f 20 c0             	mov    eax,cr0
c0016bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc5:	0f 20 d0             	mov    eax,cr2
c0016bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bcc:	0f 20 d8             	mov    eax,cr3
c0016bcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bd3:	0f 20 e0             	mov    eax,cr4
c0016bd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016be0:	83 ec 08             	sub    esp,0x8
c0016be3:	50                   	push   eax
c0016be4:	68 b4 1b 02 c0       	push   0xc0021bb4
c0016be9:	e8 4b 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016bf8:	83 ec 08             	sub    esp,0x8
c0016bfb:	50                   	push   eax
c0016bfc:	68 a5 1b 02 c0       	push   0xc0021ba5
c0016c01:	e8 33 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c06:	83 c4 10             	add    esp,0x10
c0016c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016c10:	83 ec 08             	sub    esp,0x8
c0016c13:	50                   	push   eax
c0016c14:	68 b0 1b 02 c0       	push   0xc0021bb0
c0016c19:	e8 1b 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c1e:	83 c4 10             	add    esp,0x10
c0016c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c28:	83 ec 08             	sub    esp,0x8
c0016c2b:	50                   	push   eax
c0016c2c:	68 bf 1b 02 c0       	push   0xc0021bbf
c0016c31:	e8 03 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c3d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016c40:	83 ec 08             	sub    esp,0x8
c0016c43:	50                   	push   eax
c0016c44:	68 ca 1b 02 c0       	push   0xc0021bca
c0016c49:	e8 eb 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	83 ec 08             	sub    esp,0x8
c0016c54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c58:	68 d5 1b 02 c0       	push   0xc0021bd5
c0016c5d:	e8 d7 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c62:	83 c4 10             	add    esp,0x10
c0016c65:	83 ec 08             	sub    esp,0x8
c0016c68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c6c:	68 e0 1b 02 c0       	push   0xc0021be0
c0016c71:	e8 c3 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c7d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c80:	c1 e0 05             	shl    eax,0x5
c0016c83:	8d 90 60 2b 02 c0    	lea    edx,[eax-0x3ffdd4a0]
c0016c89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c90:	83 ec 04             	sub    esp,0x4
c0016c93:	52                   	push   edx
c0016c94:	50                   	push   eax
c0016c95:	68 eb 1b 02 c0       	push   0xc0021beb
c0016c9a:	e8 9a 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ca7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cad:	83 ec 0c             	sub    esp,0xc
c0016cb0:	50                   	push   eax
c0016cb1:	e8 95 1a ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0016cb6:	83 c4 10             	add    esp,0x10
c0016cb9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cc4:	83 ec 08             	sub    esp,0x8
c0016cc7:	68 fa 1b 02 c0       	push   0xc0021bfa
c0016ccc:	50                   	push   eax
c0016ccd:	e8 c6 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ce0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ce4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016ce7:	83 ec 08             	sub    esp,0x8
c0016cea:	52                   	push   edx
c0016ceb:	50                   	push   eax
c0016cec:	e8 61 1d ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cf9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	68 08 1c 02 c0       	push   0xc0021c08
c0016d07:	50                   	push   eax
c0016d08:	e8 8b 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d15:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d1b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016d20:	8b 12                	mov    edx,DWORD PTR [edx]
c0016d22:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016d25:	83 c2 0c             	add    edx,0xc
c0016d28:	83 ec 08             	sub    esp,0x8
c0016d2b:	52                   	push   edx
c0016d2c:	50                   	push   eax
c0016d2d:	e8 66 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d32:	83 c4 10             	add    esp,0x10
c0016d35:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d40:	83 ec 08             	sub    esp,0x8
c0016d43:	68 11 1c 02 c0       	push   0xc0021c11
c0016d48:	50                   	push   eax
c0016d49:	e8 4a 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d60:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016d63:	83 ec 08             	sub    esp,0x8
c0016d66:	52                   	push   edx
c0016d67:	50                   	push   eax
c0016d68:	e8 e5 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016d6d:	83 c4 10             	add    esp,0x10
c0016d70:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d7b:	83 ec 08             	sub    esp,0x8
c0016d7e:	68 19 1c 02 c0       	push   0xc0021c19
c0016d83:	50                   	push   eax
c0016d84:	e8 0f 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d9b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016d9e:	83 ec 08             	sub    esp,0x8
c0016da1:	52                   	push   edx
c0016da2:	50                   	push   eax
c0016da3:	e8 aa 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016db0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016db6:	83 ec 08             	sub    esp,0x8
c0016db9:	68 21 1c 02 c0       	push   0xc0021c21
c0016dbe:	50                   	push   eax
c0016dbf:	e8 d4 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016dc4:	83 c4 10             	add    esp,0x10
c0016dc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016dcc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016dd6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016dd9:	83 ec 08             	sub    esp,0x8
c0016ddc:	52                   	push   edx
c0016ddd:	50                   	push   eax
c0016dde:	e8 6f 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016deb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016df1:	83 ec 08             	sub    esp,0x8
c0016df4:	68 29 1c 02 c0       	push   0xc0021c29
c0016df9:	50                   	push   eax
c0016dfa:	e8 99 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e11:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016e14:	83 ec 08             	sub    esp,0x8
c0016e17:	52                   	push   edx
c0016e18:	50                   	push   eax
c0016e19:	e8 34 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e2c:	83 ec 08             	sub    esp,0x8
c0016e2f:	68 31 1c 02 c0       	push   0xc0021c31
c0016e34:	50                   	push   eax
c0016e35:	e8 5e 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e3a:	83 c4 10             	add    esp,0x10
c0016e3d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e4c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016e4f:	83 ec 08             	sub    esp,0x8
c0016e52:	52                   	push   edx
c0016e53:	50                   	push   eax
c0016e54:	e8 f9 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e67:	83 ec 08             	sub    esp,0x8
c0016e6a:	68 39 1c 02 c0       	push   0xc0021c39
c0016e6f:	50                   	push   eax
c0016e70:	e8 23 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e75:	83 c4 10             	add    esp,0x10
c0016e78:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e87:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016e8a:	83 ec 08             	sub    esp,0x8
c0016e8d:	52                   	push   edx
c0016e8e:	50                   	push   eax
c0016e8f:	e8 be 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ea2:	83 ec 08             	sub    esp,0x8
c0016ea5:	68 41 1c 02 c0       	push   0xc0021c41
c0016eaa:	50                   	push   eax
c0016eab:	e8 e8 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016eb0:	83 c4 10             	add    esp,0x10
c0016eb3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016eb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ebe:	83 ec 08             	sub    esp,0x8
c0016ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ec5:	50                   	push   eax
c0016ec6:	e8 87 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ed3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ed9:	83 ec 08             	sub    esp,0x8
c0016edc:	68 4a 1c 02 c0       	push   0xc0021c4a
c0016ee1:	50                   	push   eax
c0016ee2:	e8 b1 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016eef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ef5:	83 ec 08             	sub    esp,0x8
c0016ef8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016efc:	50                   	push   eax
c0016efd:	e8 50 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f02:	83 c4 10             	add    esp,0x10
c0016f05:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f10:	83 ec 08             	sub    esp,0x8
c0016f13:	68 52 1c 02 c0       	push   0xc0021c52
c0016f18:	50                   	push   eax
c0016f19:	e8 7a 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f2c:	83 ec 08             	sub    esp,0x8
c0016f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f33:	50                   	push   eax
c0016f34:	e8 19 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	fa                   	cli    
c0016f3d:	f4                   	hlt    
c0016f3e:	eb fe                	jmp    c0016f3e <displayDebugInfo(regs*)+0x383>

c0016f40 <HalSystemIdle()>:
c0016f40:	56                   	push   esi
c0016f41:	53                   	push   ebx
c0016f42:	83 ec 14             	sub    esp,0x14
c0016f45:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f50:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016f56:	83 e0 04             	and    eax,0x4
c0016f59:	0f b6 c0             	movzx  eax,al
c0016f5c:	85 c0                	test   eax,eax
c0016f5e:	0f 95 c0             	setne  al
c0016f61:	0f b6 c0             	movzx  eax,al
c0016f64:	85 c0                	test   eax,eax
c0016f66:	74 4c                	je     c0016fb4 <HalSystemIdle()+0x74>
c0016f68:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f6d:	83 ec 08             	sub    esp,0x8
c0016f70:	68 e1 00 00 00       	push   0xe1
c0016f75:	50                   	push   eax
c0016f76:	e8 3d 01 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016f7b:	83 c4 10             	add    esp,0x10
c0016f7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016f86:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f8f:	83 e2 02             	and    edx,0x2
c0016f92:	89 d3                	mov    ebx,edx
c0016f94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f98:	83 e2 00             	and    edx,0x0
c0016f9b:	89 d6                	mov    esi,edx
c0016f9d:	56                   	push   esi
c0016f9e:	53                   	push   ebx
c0016f9f:	68 e1 00 00 00       	push   0xe1
c0016fa4:	50                   	push   eax
c0016fa5:	e8 3a 01 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016faa:	83 c4 10             	add    esp,0x10
c0016fad:	e8 e2 91 fe ff       	call   c0000194 <doTPAUSE>
c0016fb2:	eb 01                	jmp    c0016fb5 <HalSystemIdle()+0x75>
c0016fb4:	f4                   	hlt    
c0016fb5:	90                   	nop
c0016fb6:	83 c4 14             	add    esp,0x14
c0016fb9:	5b                   	pop    ebx
c0016fba:	5e                   	pop    esi
c0016fbb:	c3                   	ret    

c0016fbc <displayProgramFault(char const*)>:
c0016fbc:	83 ec 0c             	sub    esp,0xc
c0016fbf:	83 ec 0c             	sub    esp,0xc
c0016fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fc6:	e8 6e 39 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016fd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fde:	85 c0                	test   eax,eax
c0016fe0:	74 21                	je     c0017003 <displayProgramFault(char const*)+0x47>
c0016fe2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fe9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ff2:	6a 04                	push   0x4
c0016ff4:	6a 0f                	push   0xf
c0016ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ffa:	50                   	push   eax
c0016ffb:	e8 0a 1b ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	90                   	nop
c0017004:	83 c4 0c             	add    esp,0xc
c0017007:	c3                   	ret    

c0017008 <gpFault(regs*, void*)>:
c0017008:	83 ec 1c             	sub    esp,0x1c
c001700b:	c7 05 14 82 02 c0 64 64 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc0016464
c0017015:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c001701a:	85 c0                	test   eax,eax
c001701c:	74 1e                	je     c001703c <gpFault(regs*, void*)+0x34>
c001701e:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0017023:	83 ec 0c             	sub    esp,0xc
c0017026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001702a:	ff d0                	call   eax
c001702c:	83 c4 10             	add    esp,0x10
c001702f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017033:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017038:	85 c0                	test   eax,eax
c001703a:	75 2e                	jne    c001706a <gpFault(regs*, void*)+0x62>
c001703c:	83 ec 0c             	sub    esp,0xc
c001703f:	68 5a 1c 02 c0       	push   0xc0021c5a
c0017044:	e8 73 ff ff ff       	call   c0016fbc <displayProgramFault(char const*)>
c0017049:	83 c4 10             	add    esp,0x10
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017053:	e8 63 fb ff ff       	call   c0016bbb <displayDebugInfo(regs*)>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	83 ec 0c             	sub    esp,0xc
c001705e:	6a 00                	push   0x0
c0017060:	e8 a3 ed ff ff       	call   c0015e08 <Thr::terminateFromIRQ(int)>
c0017065:	83 c4 10             	add    esp,0x10
c0017068:	eb 01                	jmp    c001706b <gpFault(regs*, void*)+0x63>
c001706a:	90                   	nop
c001706b:	83 c4 1c             	add    esp,0x1c
c001706e:	c3                   	ret    

c001706f <pgFault(regs*, void*)>:
c001706f:	83 ec 1c             	sub    esp,0x1c
c0017072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017076:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017079:	0f 20 d0             	mov    eax,cr2
c001707c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017084:	83 ec 04             	sub    esp,0x4
c0017087:	52                   	push   edx
c0017088:	50                   	push   eax
c0017089:	68 38 1d 02 c0       	push   0xc0021d38
c001708e:	e8 a6 38 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001709b:	8b 00                	mov    eax,DWORD PTR [eax]
c001709d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170a0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00170a6:	0f 20 d2             	mov    edx,cr2
c00170a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00170ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170b1:	83 ec 08             	sub    esp,0x8
c00170b4:	52                   	push   edx
c00170b5:	50                   	push   eax
c00170b6:	e8 c9 32 ff ff       	call   c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	0f b6 c0             	movzx  eax,al
c00170c1:	85 c0                	test   eax,eax
c00170c3:	75 2e                	jne    c00170f3 <pgFault(regs*, void*)+0x84>
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	68 73 1c 02 c0       	push   0xc0021c73
c00170cd:	e8 ea fe ff ff       	call   c0016fbc <displayProgramFault(char const*)>
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170dc:	e8 da fa ff ff       	call   c0016bbb <displayDebugInfo(regs*)>
c00170e1:	83 c4 10             	add    esp,0x10
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	6a 00                	push   0x0
c00170e9:	e8 1a ed ff ff       	call   c0015e08 <Thr::terminateFromIRQ(int)>
c00170ee:	83 c4 10             	add    esp,0x10
c00170f1:	eb 01                	jmp    c00170f4 <pgFault(regs*, void*)+0x85>
c00170f3:	90                   	nop
c00170f4:	83 c4 1c             	add    esp,0x1c
c00170f7:	c3                   	ret    

c00170f8 <otherISRHandler(regs*, void*)>:
c00170f8:	83 ec 0c             	sub    esp,0xc
c00170fb:	83 ec 0c             	sub    esp,0xc
c00170fe:	68 60 1d 02 c0       	push   0xc0021d60
c0017103:	e8 b4 fe ff ff       	call   c0016fbc <displayProgramFault(char const*)>
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	83 ec 0c             	sub    esp,0xc
c001710e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017112:	e8 a4 fa ff ff       	call   c0016bbb <displayDebugInfo(regs*)>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	83 ec 0c             	sub    esp,0xc
c001711d:	6a 00                	push   0x0
c001711f:	e8 e4 ec ff ff       	call   c0015e08 <Thr::terminateFromIRQ(int)>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	90                   	nop
c0017128:	83 c4 0c             	add    esp,0xc
c001712b:	c3                   	ret    

c001712c <opcodeFault(regs*, void*)>:
c001712c:	55                   	push   ebp
c001712d:	89 e5                	mov    ebp,esp
c001712f:	83 ec 08             	sub    esp,0x8
c0017132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017135:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017138:	83 ec 08             	sub    esp,0x8
c001713b:	50                   	push   eax
c001713c:	68 7e 1c 02 c0       	push   0xc0021c7e
c0017141:	e8 f3 37 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001714e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017154:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001715a:	0f b6 c0             	movzx  eax,al
c001715d:	85 c0                	test   eax,eax
c001715f:	74 21                	je     c0017182 <opcodeFault(regs*, void*)+0x56>
c0017161:	83 ec 0c             	sub    esp,0xc
c0017164:	68 88 1d 02 c0       	push   0xc0021d88
c0017169:	e8 cb 37 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001716e:	83 c4 10             	add    esp,0x10
c0017171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017174:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017177:	8d 50 19             	lea    edx,[eax+0x19]
c001717a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001717d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017180:	eb 2b                	jmp    c00171ad <opcodeFault(regs*, void*)+0x81>
c0017182:	83 ec 0c             	sub    esp,0xc
c0017185:	68 8c 1c 02 c0       	push   0xc0021c8c
c001718a:	e8 2d fe ff ff       	call   c0016fbc <displayProgramFault(char const*)>
c001718f:	83 c4 10             	add    esp,0x10
c0017192:	83 ec 0c             	sub    esp,0xc
c0017195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017198:	e8 1e fa ff ff       	call   c0016bbb <displayDebugInfo(regs*)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	6a 00                	push   0x0
c00171a5:	e8 5e ec ff ff       	call   c0015e08 <Thr::terminateFromIRQ(int)>
c00171aa:	83 c4 10             	add    esp,0x10
c00171ad:	c9                   	leave  
c00171ae:	c3                   	ret    

c00171af <i386SaveCoprocessor(void*)>:
c00171af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b3:	83 c0 3f             	add    eax,0x3f
c00171b6:	83 e0 c0             	and    eax,0xffffffc0
c00171b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171bd:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c00171c3 <i386LoadCoprocessor(void*)>:
c00171c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171c7:	83 c0 3f             	add    eax,0x3f
c00171ca:	83 e0 c0             	and    eax,0xffffffc0
c00171cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171d1:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c00171d7 <x87EmulHandler(regs*, void*)>:
c00171d7:	53                   	push   ebx
c00171d8:	83 ec 08             	sub    esp,0x8
c00171db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171e0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00171e4:	74 10                	je     c00171f6 <x87EmulHandler(regs*, void*)+0x1f>
c00171e6:	83 ec 0c             	sub    esp,0xc
c00171e9:	68 99 1c 02 c0       	push   0xc0021c99
c00171ee:	e8 c6 99 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	0f 20 c0             	mov    eax,cr0
c00171f9:	a8 08                	test   al,0x8
c00171fb:	74 59                	je     c0017256 <x87EmulHandler(regs*, void*)+0x7f>
c00171fd:	0f 06                	clts   
c00171ff:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0017204:	85 c0                	test   eax,eax
c0017206:	74 0e                	je     c0017216 <x87EmulHandler(regs*, void*)+0x3f>
c0017208:	83 ec 0c             	sub    esp,0xc
c001720b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001720e:	e8 9c ff ff ff       	call   c00171af <i386SaveCoprocessor(void*)>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001721c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017220:	75 12                	jne    c0017234 <x87EmulHandler(regs*, void*)+0x5d>
c0017222:	83 ec 0c             	sub    esp,0xc
c0017225:	68 40 02 00 00       	push   0x240
c001722a:	e8 7f 08 ff ff       	call   c0007aae <malloc>
c001722f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017232:	eb 10                	jmp    c0017244 <x87EmulHandler(regs*, void*)+0x6d>
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c001723c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001723f:	e8 7f ff ff ff       	call   c00171c3 <i386LoadCoprocessor(void*)>
c0017244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017249:	83 c4 10             	add    esp,0x10
c001724c:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0017251:	83 c4 08             	add    esp,0x8
c0017254:	5b                   	pop    ebx
c0017255:	c3                   	ret    
c0017256:	83 ec 0c             	sub    esp,0xc
c0017259:	68 ad 1c 02 c0       	push   0xc0021cad
c001725e:	e8 d6 36 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0017263:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001726b:	83 c4 18             	add    esp,0x18
c001726e:	5b                   	pop    ebx
c001726f:	e9 94 eb ff ff       	jmp    c0015e08 <Thr::terminateFromIRQ(int)>

c0017274 <HalInitialiseCoprocessor()>:
c0017274:	83 ec 10             	sub    esp,0x10
c0017277:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0017281:	6a 00                	push   0x0
c0017283:	68 d7 71 01 c0       	push   0xc00171d7
c0017288:	6a 07                	push   0x7
c001728a:	e8 e7 52 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001728f:	e8 dc 6f 00 00       	call   c001e270 <avxDetect>
c0017294:	83 c4 10             	add    esp,0x10
c0017297:	85 c0                	test   eax,eax
c0017299:	74 1c                	je     c00172b7 <HalInitialiseCoprocessor()+0x43>
c001729b:	c7 05 10 82 02 c0 9a e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e29a
c00172a5:	c7 05 0c 82 02 c0 ab e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2ab
c00172af:	83 c4 0c             	add    esp,0xc
c00172b2:	e9 05 70 00 00       	jmp    c001e2bc <avxInit>
c00172b7:	e8 44 73 00 00       	call   c001e600 <absolutelyNoChanceInHell>
c00172bc:	85 c0                	test   eax,eax
c00172be:	74 1c                	je     c00172dc <HalInitialiseCoprocessor()+0x68>
c00172c0:	c7 05 10 82 02 c0 18 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e618
c00172ca:	c7 05 0c 82 02 c0 20 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e620
c00172d4:	83 c4 0c             	add    esp,0xc
c00172d7:	e9 4c 73 00 00       	jmp    c001e628 <sseInit>
c00172dc:	e8 65 73 00 00       	call   c001e646 <x87Detect>
c00172e1:	85 c0                	test   eax,eax
c00172e3:	74 1c                	je     c0017301 <HalInitialiseCoprocessor()+0x8d>
c00172e5:	c7 05 10 82 02 c0 61 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e661
c00172ef:	c7 05 0c 82 02 c0 68 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e668
c00172f9:	83 c4 0c             	add    esp,0xc
c00172fc:	e9 6e 73 00 00       	jmp    c001e66f <x87Init>
c0017301:	c7 05 10 82 02 c0 88 6b 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016b88
c001730b:	c7 05 0c 82 02 c0 88 6b 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016b88
c0017315:	0f 20 c0             	mov    eax,cr0
c0017318:	83 c8 04             	or     eax,0x4
c001731b:	0f 22 c0             	mov    cr0,eax
c001731e:	83 c4 0c             	add    esp,0xc
c0017321:	c3                   	ret    

c0017322 <HalPanic(char const*)>:
c0017322:	53                   	push   ebx
c0017323:	83 ec 10             	sub    esp,0x10
c0017326:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001732a:	fa                   	cli    
c001732b:	53                   	push   ebx
c001732c:	68 c3 1c 02 c0       	push   0xc0021cc3
c0017331:	e8 03 36 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0017336:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	85 c0                	test   eax,eax
c0017340:	74 09                	je     c001734b <HalPanic(char const*)+0x29>
c0017342:	83 ec 0c             	sub    esp,0xc
c0017345:	53                   	push   ebx
c0017346:	ff d0                	call   eax
c0017348:	83 c4 10             	add    esp,0x10
c001734b:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0017350:	85 c0                	test   eax,eax
c0017352:	0f 84 dc 00 00 00    	je     c0017434 <HalPanic(char const*)+0x112>
c0017358:	52                   	push   edx
c0017359:	6a 01                	push   0x1
c001735b:	6a 0f                	push   0xf
c001735d:	50                   	push   eax
c001735e:	e8 43 12 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017363:	59                   	pop    ecx
c0017364:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001736a:	e8 27 14 ff ff       	call   c0008796 <VgaText::clearScreen()>
c001736f:	58                   	pop    eax
c0017370:	5a                   	pop    edx
c0017371:	68 c4 00 02 c0       	push   0xc00200c4
c0017376:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001737c:	e8 5d 12 ff ff       	call   c00085de <VgaText::setTitle(char*)>
c0017381:	83 c4 0c             	add    esp,0xc
c0017384:	6a 01                	push   0x1
c0017386:	6a 0f                	push   0xf
c0017388:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001738e:	e8 13 12 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017393:	59                   	pop    ecx
c0017394:	58                   	pop    eax
c0017395:	68 dc 1c 02 c0       	push   0xc0021cdc
c001739a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173a0:	e8 f3 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00173a5:	83 c4 0c             	add    esp,0xc
c00173a8:	6a 0f                	push   0xf
c00173aa:	6a 01                	push   0x1
c00173ac:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173b2:	e8 ef 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173b7:	58                   	pop    eax
c00173b8:	5a                   	pop    edx
c00173b9:	68 e5 1c 02 c0       	push   0xc0021ce5
c00173be:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173c4:	e8 cf 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00173c9:	83 c4 0c             	add    esp,0xc
c00173cc:	6a 01                	push   0x1
c00173ce:	6a 0f                	push   0xf
c00173d0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173d6:	e8 cb 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173db:	59                   	pop    ecx
c00173dc:	58                   	pop    eax
c00173dd:	68 29 1d 02 c0       	push   0xc0021d29
c00173e2:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173e8:	e8 ab 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00173ed:	58                   	pop    eax
c00173ee:	5a                   	pop    edx
c00173ef:	68 f2 1c 02 c0       	push   0xc0021cf2
c00173f4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173fa:	e8 99 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00173ff:	59                   	pop    ecx
c0017400:	58                   	pop    eax
c0017401:	68 2c 1d 02 c0       	push   0xc0021d2c
c0017406:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001740c:	e8 87 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017411:	58                   	pop    eax
c0017412:	5a                   	pop    edx
c0017413:	53                   	push   ebx
c0017414:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001741a:	e8 79 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001741f:	59                   	pop    ecx
c0017420:	5b                   	pop    ebx
c0017421:	68 29 1d 02 c0       	push   0xc0021d29
c0017426:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001742c:	e8 67 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017431:	83 c4 10             	add    esp,0x10
c0017434:	eb fe                	jmp    c0017434 <HalPanic(char const*)+0x112>

c0017436 <HalQueryPerformanceCounter()>:
c0017436:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001743b:	31 d2                	xor    edx,edx
c001743d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017443:	31 c0                	xor    eax,eax
c0017445:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001744c:	74 02                	je     c0017450 <HalQueryPerformanceCounter()+0x1a>
c001744e:	0f 31                	rdtsc  
c0017450:	c3                   	ret    

c0017451 <HalInitialise()>:
c0017451:	53                   	push   ebx
c0017452:	83 ec 08             	sub    esp,0x8
c0017455:	e8 4c 53 ff ff       	call   c000c7a6 <setupINTS()>
c001745a:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017461:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017466:	75 0f                	jne    c0017477 <HalInitialise()+0x26>
c0017468:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001746e:	83 e2 fe             	and    edx,0xfffffffe
c0017471:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017477:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001747d:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017484:	83 e2 fe             	and    edx,0xfffffffe
c0017487:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001748d:	e8 9e 02 00 00       	call   c0017730 <picOpen()>
c0017492:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017499:	74 0a                	je     c00174a5 <HalInitialise()+0x54>
c001749b:	e8 e0 01 00 00       	call   c0017680 <picDisable()>
c00174a0:	e8 3d 67 00 00       	call   c001dbe2 <apicOpen()>
c00174a5:	bb 0f 00 00 00       	mov    ebx,0xf
c00174aa:	50                   	push   eax
c00174ab:	6a 00                	push   0x0
c00174ad:	68 f8 70 01 c0       	push   0xc00170f8
c00174b2:	6a 00                	push   0x0
c00174b4:	e8 bd 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174b9:	83 c4 0c             	add    esp,0xc
c00174bc:	6a 00                	push   0x0
c00174be:	68 f8 70 01 c0       	push   0xc00170f8
c00174c3:	6a 01                	push   0x1
c00174c5:	e8 ac 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174ca:	83 c4 0c             	add    esp,0xc
c00174cd:	6a 00                	push   0x0
c00174cf:	68 89 6b 01 c0       	push   0xc0016b89
c00174d4:	6a 02                	push   0x2
c00174d6:	e8 9b 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174db:	83 c4 0c             	add    esp,0xc
c00174de:	6a 00                	push   0x0
c00174e0:	68 f8 70 01 c0       	push   0xc00170f8
c00174e5:	6a 03                	push   0x3
c00174e7:	e8 8a 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174ec:	83 c4 0c             	add    esp,0xc
c00174ef:	6a 00                	push   0x0
c00174f1:	68 f8 70 01 c0       	push   0xc00170f8
c00174f6:	6a 04                	push   0x4
c00174f8:	e8 79 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174fd:	83 c4 0c             	add    esp,0xc
c0017500:	6a 00                	push   0x0
c0017502:	68 f8 70 01 c0       	push   0xc00170f8
c0017507:	6a 05                	push   0x5
c0017509:	e8 68 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001750e:	83 c4 0c             	add    esp,0xc
c0017511:	6a 00                	push   0x0
c0017513:	68 2c 71 01 c0       	push   0xc001712c
c0017518:	6a 06                	push   0x6
c001751a:	e8 57 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001751f:	83 c4 0c             	add    esp,0xc
c0017522:	6a 00                	push   0x0
c0017524:	68 a2 6b 01 c0       	push   0xc0016ba2
c0017529:	6a 08                	push   0x8
c001752b:	e8 46 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017530:	83 c4 0c             	add    esp,0xc
c0017533:	6a 00                	push   0x0
c0017535:	68 f8 70 01 c0       	push   0xc00170f8
c001753a:	6a 09                	push   0x9
c001753c:	e8 35 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017541:	83 c4 0c             	add    esp,0xc
c0017544:	6a 00                	push   0x0
c0017546:	68 f8 70 01 c0       	push   0xc00170f8
c001754b:	6a 0a                	push   0xa
c001754d:	e8 24 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017552:	83 c4 0c             	add    esp,0xc
c0017555:	6a 00                	push   0x0
c0017557:	68 f8 70 01 c0       	push   0xc00170f8
c001755c:	6a 0b                	push   0xb
c001755e:	e8 13 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017563:	83 c4 0c             	add    esp,0xc
c0017566:	6a 00                	push   0x0
c0017568:	68 08 70 01 c0       	push   0xc0017008
c001756d:	6a 0d                	push   0xd
c001756f:	e8 02 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017574:	83 c4 0c             	add    esp,0xc
c0017577:	6a 00                	push   0x0
c0017579:	68 6f 70 01 c0       	push   0xc001706f
c001757e:	6a 0e                	push   0xe
c0017580:	e8 f1 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	50                   	push   eax
c0017589:	6a 00                	push   0x0
c001758b:	68 f8 70 01 c0       	push   0xc00170f8
c0017590:	53                   	push   ebx
c0017591:	43                   	inc    ebx
c0017592:	e8 df 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	83 fb 1e             	cmp    ebx,0x1e
c001759d:	75 e9                	jne    c0017588 <HalInitialise()+0x137>
c001759f:	50                   	push   eax
c00175a0:	6a 00                	push   0x0
c00175a2:	68 a1 1e 01 c0       	push   0xc0011ea1
c00175a7:	6a 60                	push   0x60
c00175a9:	e8 c8 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175ae:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00175b3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00175bd:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00175c4:	e8 e5 04 ff ff       	call   c0007aae <malloc>
c00175c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00175cc:	89 c3                	mov    ebx,eax
c00175ce:	e8 3b 09 00 00       	call   c0017f0e <RTC::RTC()>
c00175d3:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00175dd:	5a                   	pop    edx
c00175de:	59                   	pop    ecx
c00175df:	53                   	push   ebx
c00175e0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175e6:	e8 57 4a ff ff       	call   c000c042 <Device::addChild(Device*)>
c00175eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175ed:	6a 00                	push   0x0
c00175ef:	6a 00                	push   0x0
c00175f1:	6a 00                	push   0x0
c00175f3:	53                   	push   ebx
c00175f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175f7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00175fc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017602:	83 c4 28             	add    esp,0x28
c0017605:	5b                   	pop    ebx
c0017606:	c3                   	ret    

c0017607 <HalMakeBeep(int)>:
c0017607:	53                   	push   ebx
c0017608:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001760c:	85 db                	test   ebx,ebx
c001760e:	75 07                	jne    c0017617 <HalMakeBeep(int)+0x10>
c0017610:	e4 61                	in     al,0x61
c0017612:	83 e0 fc             	and    eax,0xfffffffc
c0017615:	eb 26                	jmp    c001763d <HalMakeBeep(int)+0x36>
c0017617:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001761c:	99                   	cdq    
c001761d:	f7 fb                	idiv   ebx
c001761f:	89 c1                	mov    ecx,eax
c0017621:	b0 b6                	mov    al,0xb6
c0017623:	e6 43                	out    0x43,al
c0017625:	88 c8                	mov    al,cl
c0017627:	e6 42                	out    0x42,al
c0017629:	89 c8                	mov    eax,ecx
c001762b:	c1 e8 08             	shr    eax,0x8
c001762e:	e6 42                	out    0x42,al
c0017630:	e4 61                	in     al,0x61
c0017632:	89 c2                	mov    edx,eax
c0017634:	83 ca 03             	or     edx,0x3
c0017637:	38 d0                	cmp    al,dl
c0017639:	74 04                	je     c001763f <HalMakeBeep(int)+0x38>
c001763b:	88 d0                	mov    al,dl
c001763d:	e6 61                	out    0x61,al
c001763f:	5b                   	pop    ebx
c0017640:	c3                   	ret    

c0017641 <HalGetRand()>:
c0017641:	31 c0                	xor    eax,eax
c0017643:	c3                   	ret    

c0017644 <HalEndOfInterrupt(int)>:
c0017644:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001764b:	74 23                	je     c0017670 <HalEndOfInterrupt(int)+0x2c>
c001764d:	83 ec 14             	sub    esp,0x14
c0017650:	6a 1b                	push   0x1b
c0017652:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017658:	e8 5b fa fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001765d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017662:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001766c:	83 c4 1c             	add    esp,0x1c
c001766f:	c3                   	ret    
c0017670:	e9 3f 02 00 00       	jmp    c00178b4 <picEOI(int)>

c0017675 <HalRestart()>:
c0017675:	c3                   	ret    

c0017676 <HalShutdown()>:
c0017676:	c3                   	ret    

c0017677 <HalSleep()>:
c0017677:	c3                   	ret    

c0017678 <picIoWait()>:
c0017678:	eb 00                	jmp    c001767a <picIoWait()+0x2>
c001767a:	eb 00                	jmp    c001767c <picIoWait()+0x4>
c001767c:	90                   	nop
c001767d:	c3                   	ret    
c001767e:	66 90                	xchg   ax,ax

c0017680 <picDisable()>:
c0017680:	83 ec 10             	sub    esp,0x10
c0017683:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001768a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001768f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017693:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017698:	ee                   	out    dx,al
c0017699:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00176a0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00176a5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00176a9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00176ae:	ee                   	out    dx,al
c00176af:	90                   	nop
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	c3                   	ret    

c00176b4 <picGetIRQReg(int)>:
c00176b4:	83 ec 10             	sub    esp,0x10
c00176b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176bb:	0f b6 c0             	movzx  eax,al
c00176be:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00176c5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00176c9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00176cd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00176d2:	ee                   	out    dx,al
c00176d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176d7:	0f b6 c0             	movzx  eax,al
c00176da:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00176e1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00176e5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00176e9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00176ee:	ee                   	out    dx,al
c00176ef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00176f6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00176fb:	89 c2                	mov    edx,eax
c00176fd:	ec                   	in     al,dx
c00176fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017702:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017706:	0f b6 c0             	movzx  eax,al
c0017709:	c1 e0 08             	shl    eax,0x8
c001770c:	89 c1                	mov    ecx,eax
c001770e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017715:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001771a:	89 c2                	mov    edx,eax
c001771c:	ec                   	in     al,dx
c001771d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017721:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017725:	0f b6 c0             	movzx  eax,al
c0017728:	09 c8                	or     eax,ecx
c001772a:	83 c4 10             	add    esp,0x10
c001772d:	c3                   	ret    
c001772e:	66 90                	xchg   ax,ax

c0017730 <picOpen()>:
c0017730:	83 ec 50             	sub    esp,0x50
c0017733:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001773a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001773f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017743:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017747:	ee                   	out    dx,al
c0017748:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001774f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017754:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017758:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001775c:	ee                   	out    dx,al
c001775d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017765:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001776d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017778:	89 c2                	mov    edx,eax
c001777a:	ec                   	in     al,dx
c001777b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001777f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017783:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017787:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001778e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017792:	89 c2                	mov    edx,eax
c0017794:	ec                   	in     al,dx
c0017795:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017799:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001779d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00177a1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00177a8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00177ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00177b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177b5:	ee                   	out    dx,al
c00177b6:	e8 bd fe ff ff       	call   c0017678 <picIoWait()>
c00177bb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00177c2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00177c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00177cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177cf:	ee                   	out    dx,al
c00177d0:	e8 a3 fe ff ff       	call   c0017678 <picIoWait()>
c00177d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00177d9:	0f b6 c0             	movzx  eax,al
c00177dc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00177e3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00177e7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00177eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ef:	ee                   	out    dx,al
c00177f0:	e8 83 fe ff ff       	call   c0017678 <picIoWait()>
c00177f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00177f9:	0f b6 c0             	movzx  eax,al
c00177fc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017803:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017807:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001780b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001780f:	ee                   	out    dx,al
c0017810:	e8 63 fe ff ff       	call   c0017678 <picIoWait()>
c0017815:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001781c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017821:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017825:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017829:	ee                   	out    dx,al
c001782a:	e8 49 fe ff ff       	call   c0017678 <picIoWait()>
c001782f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017836:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001783b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001783f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017843:	ee                   	out    dx,al
c0017844:	e8 2f fe ff ff       	call   c0017678 <picIoWait()>
c0017849:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017850:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017855:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017859:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001785d:	ee                   	out    dx,al
c001785e:	e8 15 fe ff ff       	call   c0017678 <picIoWait()>
c0017863:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001786a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001786f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017873:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017877:	ee                   	out    dx,al
c0017878:	e8 fb fd ff ff       	call   c0017678 <picIoWait()>
c001787d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017882:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017889:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001788d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017891:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017895:	ee                   	out    dx,al
c0017896:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001789b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00178a2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00178a6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00178aa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00178ae:	ee                   	out    dx,al
c00178af:	90                   	nop
c00178b0:	83 c4 50             	add    esp,0x50
c00178b3:	c3                   	ret    

c00178b4 <picEOI(int)>:
c00178b4:	83 ec 10             	sub    esp,0x10
c00178b7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00178bc:	75 1e                	jne    c00178dc <picEOI(int)+0x28>
c00178be:	6a 0b                	push   0xb
c00178c0:	e8 ef fd ff ff       	call   c00176b4 <picGetIRQReg(int)>
c00178c5:	83 c4 04             	add    esp,0x4
c00178c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00178cd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00178d2:	25 80 00 00 00       	and    eax,0x80
c00178d7:	74 73                	je     c001794c <picEOI(int)+0x98>
c00178d9:	8d 76 00             	lea    esi,[esi+0x0]
c00178dc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00178e1:	75 31                	jne    c0017914 <picEOI(int)+0x60>
c00178e3:	6a 0b                	push   0xb
c00178e5:	e8 ca fd ff ff       	call   c00176b4 <picGetIRQReg(int)>
c00178ea:	83 c4 04             	add    esp,0x4
c00178ed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00178f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f6:	98                   	cwde   
c00178f7:	85 c0                	test   eax,eax
c00178f9:	78 19                	js     c0017914 <picEOI(int)+0x60>
c00178fb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017902:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017907:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001790b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017910:	ee                   	out    dx,al
c0017911:	eb 3d                	jmp    c0017950 <picEOI(int)+0x9c>
c0017913:	90                   	nop
c0017914:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017919:	7e 19                	jle    c0017934 <picEOI(int)+0x80>
c001791b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017922:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017927:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001792b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017930:	ee                   	out    dx,al
c0017931:	8d 76 00             	lea    esi,[esi+0x0]
c0017934:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001793b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017940:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017944:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017949:	ee                   	out    dx,al
c001794a:	eb 04                	jmp    c0017950 <picEOI(int)+0x9c>
c001794c:	90                   	nop
c001794d:	8d 76 00             	lea    esi,[esi+0x0]
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	c3                   	ret    

c0017954 <RTC::open(int, int, void*)>:
c0017954:	31 c0                	xor    eax,eax
c0017956:	c3                   	ret    
c0017957:	90                   	nop

c0017958 <RTC::close(int, int, void*)>:
c0017958:	31 c0                	xor    eax,eax
c001795a:	c3                   	ret    
c001795b:	90                   	nop

c001795c <RTC::timeInSecondsUTC()>:
c001795c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017960:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017966:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001796c:	c3                   	ret    
c001796d:	90                   	nop

c001796e <RTC::timeInDatetimeUTC()>:
c001796e:	53                   	push   ebx
c001796f:	83 ec 14             	sub    esp,0x14
c0017972:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797a:	8b 10                	mov    edx,DWORD PTR [eax]
c001797c:	50                   	push   eax
c001797d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017980:	83 c4 0c             	add    esp,0xc
c0017983:	52                   	push   edx
c0017984:	50                   	push   eax
c0017985:	53                   	push   ebx
c0017986:	e8 2b 44 ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c001798b:	89 d8                	mov    eax,ebx
c001798d:	83 c4 14             	add    esp,0x14
c0017990:	5b                   	pop    ebx
c0017991:	c2 04 00             	ret    0x4

c0017994 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017994:	56                   	push   esi
c0017995:	53                   	push   ebx
c0017996:	83 ec 14             	sub    esp,0x14
c0017999:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001799d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001799f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00179a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179a6:	52                   	push   edx
c00179a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179af:	50                   	push   eax
c00179b0:	e8 01 44 ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c00179b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179c1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00179c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00179c9:	89 f0                	mov    eax,esi
c00179cb:	83 c4 20             	add    esp,0x20
c00179ce:	5b                   	pop    ebx
c00179cf:	5e                   	pop    esi
c00179d0:	ff e0                	jmp    eax

c00179d2 <RTC::~RTC()>:
c00179d2:	83 ec 0c             	sub    esp,0xc
c00179d5:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c00179da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179de:	89 10                	mov    DWORD PTR [eax],edx
c00179e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e4:	83 ec 0c             	sub    esp,0xc
c00179e7:	50                   	push   eax
c00179e8:	e8 5b 41 ff ff       	call   c000bb48 <Clock::~Clock()>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	90                   	nop
c00179f1:	83 c4 0c             	add    esp,0xc
c00179f4:	c3                   	ret    
c00179f5:	90                   	nop

c00179f6 <RTC::~RTC()>:
c00179f6:	83 ec 0c             	sub    esp,0xc
c00179f9:	83 ec 0c             	sub    esp,0xc
c00179fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a00:	e8 cd ff ff ff       	call   c00179d2 <RTC::~RTC()>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	83 ec 08             	sub    esp,0x8
c0017a0b:	68 60 01 00 00       	push   0x160
c0017a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a14:	e8 f3 2d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	83 c4 0c             	add    esp,0xc
c0017a1f:	c3                   	ret    

c0017a20 <RTC::get_update_in_progress_flag()>:
c0017a20:	83 ec 14             	sub    esp,0x14
c0017a23:	6a 0a                	push   0xa
c0017a25:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a2b:	e8 40 f7 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a30:	83 c4 1c             	add    esp,0x1c
c0017a33:	0f b6 c0             	movzx  eax,al
c0017a36:	c1 e8 07             	shr    eax,0x7
c0017a39:	c3                   	ret    

c0017a3a <RTC::completeRTCRefresh()>:
c0017a3a:	55                   	push   ebp
c0017a3b:	57                   	push   edi
c0017a3c:	56                   	push   esi
c0017a3d:	53                   	push   ebx
c0017a3e:	83 ec 3c             	sub    esp,0x3c
c0017a41:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017a47:	83 ec 0c             	sub    esp,0xc
c0017a4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017a4e:	e8 cd ff ff ff       	call   c0017a20 <RTC::get_update_in_progress_flag()>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	84 c0                	test   al,al
c0017a58:	74 0e                	je     c0017a68 <RTC::completeRTCRefresh()+0x2e>
c0017a5a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017a60:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017a66:	73 df                	jae    c0017a47 <RTC::completeRTCRefresh()+0xd>
c0017a68:	51                   	push   ecx
c0017a69:	51                   	push   ecx
c0017a6a:	6a 00                	push   0x0
c0017a6c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a72:	e8 f9 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a77:	5b                   	pop    ebx
c0017a78:	89 c7                	mov    edi,eax
c0017a7a:	5e                   	pop    esi
c0017a7b:	6a 02                	push   0x2
c0017a7d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a83:	e8 e8 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a88:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017a8c:	5d                   	pop    ebp
c0017a8d:	58                   	pop    eax
c0017a8e:	6a 04                	push   0x4
c0017a90:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a96:	e8 d5 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a9b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017a9f:	58                   	pop    eax
c0017aa0:	5a                   	pop    edx
c0017aa1:	6a 07                	push   0x7
c0017aa3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa9:	e8 c2 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017aae:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017ab2:	59                   	pop    ecx
c0017ab3:	5b                   	pop    ebx
c0017ab4:	6a 08                	push   0x8
c0017ab6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017abc:	e8 af f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ac1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017ac5:	5e                   	pop    esi
c0017ac6:	5d                   	pop    ebp
c0017ac7:	6a 09                	push   0x9
c0017ac9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017acf:	e8 9c f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ad4:	0f b6 c0             	movzx  eax,al
c0017ad7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017ae4:	83 ec 0c             	sub    esp,0xc
c0017ae7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017aeb:	e8 30 ff ff ff       	call   c0017a20 <RTC::get_update_in_progress_flag()>
c0017af0:	83 c4 10             	add    esp,0x10
c0017af3:	84 c0                	test   al,al
c0017af5:	74 0e                	je     c0017b05 <RTC::completeRTCRefresh()+0xcb>
c0017af7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017afd:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017b03:	73 df                	jae    c0017ae4 <RTC::completeRTCRefresh()+0xaa>
c0017b05:	51                   	push   ecx
c0017b06:	51                   	push   ecx
c0017b07:	6a 00                	push   0x0
c0017b09:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b0f:	e8 5c f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b14:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017b18:	5b                   	pop    ebx
c0017b19:	5e                   	pop    esi
c0017b1a:	6a 02                	push   0x2
c0017b1c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b22:	e8 49 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b27:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017b2b:	5d                   	pop    ebp
c0017b2c:	58                   	pop    eax
c0017b2d:	6a 04                	push   0x4
c0017b2f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b35:	e8 36 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b3a:	88 c3                	mov    bl,al
c0017b3c:	58                   	pop    eax
c0017b3d:	5a                   	pop    edx
c0017b3e:	6a 07                	push   0x7
c0017b40:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b46:	e8 25 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b4b:	59                   	pop    ecx
c0017b4c:	89 c6                	mov    esi,eax
c0017b4e:	5d                   	pop    ebp
c0017b4f:	6a 08                	push   0x8
c0017b51:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b57:	e8 14 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b5c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017b60:	58                   	pop    eax
c0017b61:	5a                   	pop    edx
c0017b62:	6a 09                	push   0x9
c0017b64:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b6a:	e8 01 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b6f:	89 f9                	mov    ecx,edi
c0017b71:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017b75:	0f b6 e8             	movzx  ebp,al
c0017b78:	83 c4 10             	add    esp,0x10
c0017b7b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017b7f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b84:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017b89:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017b8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b91:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017b95:	0f 94 c0             	sete   al
c0017b98:	0f b6 fb             	movzx  edi,bl
c0017b9b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017b9f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017ba4:	0f 94 c2             	sete   dl
c0017ba7:	21 d0                	and    eax,edx
c0017ba9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017bad:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017bb1:	0f 94 c2             	sete   dl
c0017bb4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017bb8:	21 c2                	and    edx,eax
c0017bba:	89 f0                	mov    eax,esi
c0017bbc:	0f b6 c0             	movzx  eax,al
c0017bbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bc3:	89 f0                	mov    eax,esi
c0017bc5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017bc9:	0f 94 c0             	sete   al
c0017bcc:	21 d0                	and    eax,edx
c0017bce:	31 d2                	xor    edx,edx
c0017bd0:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017bd4:	0f 94 c2             	sete   dl
c0017bd7:	85 c2                	test   edx,eax
c0017bd9:	75 27                	jne    c0017c02 <RTC::completeRTCRefresh()+0x1c8>
c0017bdb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017bdf:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017be3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017be7:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017beb:	89 f0                	mov    eax,esi
c0017bed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017bf1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017bf5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017bf9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017bfd:	e9 dc fe ff ff       	jmp    c0017ade <RTC::completeRTCRefresh()+0xa4>
c0017c02:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017c06:	75 d3                	jne    c0017bdb <RTC::completeRTCRefresh()+0x1a1>
c0017c08:	52                   	push   edx
c0017c09:	52                   	push   edx
c0017c0a:	6a 0b                	push   0xb
c0017c0c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017c12:	e8 59 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	a8 04                	test   al,0x4
c0017c1c:	75 7a                	jne    c0017c98 <RTC::completeRTCRefresh()+0x25e>
c0017c1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c26:	83 e1 0f             	and    ecx,0xf
c0017c29:	c1 ea 04             	shr    edx,0x4
c0017c2c:	c1 ef 04             	shr    edi,0x4
c0017c2f:	6b d2 0a             	imul   edx,edx,0xa
c0017c32:	83 e6 0f             	and    esi,0xf
c0017c35:	01 d1                	add    ecx,edx
c0017c37:	c1 ed 04             	shr    ebp,0x4
c0017c3a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017c3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c46:	c1 ea 04             	shr    edx,0x4
c0017c49:	83 e1 0f             	and    ecx,0xf
c0017c4c:	6b d2 0a             	imul   edx,edx,0xa
c0017c4f:	6b ed 0a             	imul   ebp,ebp,0xa
c0017c52:	01 d1                	add    ecx,edx
c0017c54:	89 fa                	mov    edx,edi
c0017c56:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c5a:	83 e2 07             	and    edx,0x7
c0017c5d:	89 d9                	mov    ecx,ebx
c0017c5f:	6b d2 0a             	imul   edx,edx,0xa
c0017c62:	83 e1 0f             	and    ecx,0xf
c0017c65:	83 e3 80             	and    ebx,0xffffff80
c0017c68:	01 d1                	add    ecx,edx
c0017c6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c6e:	09 cb                	or     ebx,ecx
c0017c70:	c1 ea 04             	shr    edx,0x4
c0017c73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c77:	6b d2 0a             	imul   edx,edx,0xa
c0017c7a:	83 e1 0f             	and    ecx,0xf
c0017c7d:	01 d6                	add    esi,edx
c0017c7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c83:	c1 ea 04             	shr    edx,0x4
c0017c86:	6b d2 0a             	imul   edx,edx,0xa
c0017c89:	01 d1                	add    ecx,edx
c0017c8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c8f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017c93:	83 e2 0f             	and    edx,0xf
c0017c96:	01 d5                	add    ebp,edx
c0017c98:	a8 02                	test   al,0x2
c0017c9a:	75 15                	jne    c0017cb1 <RTC::completeRTCRefresh()+0x277>
c0017c9c:	f6 c3 80             	test   bl,0x80
c0017c9f:	74 10                	je     c0017cb1 <RTC::completeRTCRefresh()+0x277>
c0017ca1:	83 e3 7f             	and    ebx,0x7f
c0017ca4:	b9 18 00 00 00       	mov    ecx,0x18
c0017ca9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017cac:	99                   	cdq    
c0017cad:	f7 f9                	idiv   ecx
c0017caf:	88 d3                	mov    bl,dl
c0017cb1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017cb7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017cbd:	77 06                	ja     c0017cc5 <RTC::completeRTCRefresh()+0x28b>
c0017cbf:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017cc5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017cca:	31 c9                	xor    ecx,ecx
c0017ccc:	c1 e0 10             	shl    eax,0x10
c0017ccf:	89 cd                	mov    ebp,ecx
c0017cd1:	c1 e7 10             	shl    edi,0x10
c0017cd4:	31 d2                	xor    edx,edx
c0017cd6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017cdc:	09 c5                	or     ebp,eax
c0017cde:	89 f0                	mov    eax,esi
c0017ce0:	89 e9                	mov    ecx,ebp
c0017ce2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ce6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017cea:	88 c2                	mov    dl,al
c0017cec:	88 d9                	mov    cl,bl
c0017cee:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017cf2:	0f b7 c2             	movzx  eax,dx
c0017cf5:	09 f8                	or     eax,edi
c0017cf7:	89 c2                	mov    edx,eax
c0017cf9:	50                   	push   eax
c0017cfa:	50                   	push   eax
c0017cfb:	51                   	push   ecx
c0017cfc:	52                   	push   edx
c0017cfd:	e8 35 3f ff ff       	call   c000bc37 <datetimeToSeconds(datetime_t)>
c0017d02:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017d06:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017d0c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017d12:	83 c4 4c             	add    esp,0x4c
c0017d15:	5b                   	pop    ebx
c0017d16:	5e                   	pop    esi
c0017d17:	5f                   	pop    edi
c0017d18:	5d                   	pop    ebp
c0017d19:	c3                   	ret    

c0017d1a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017d1a:	55                   	push   ebp
c0017d1b:	57                   	push   edi
c0017d1c:	56                   	push   esi
c0017d1d:	53                   	push   ebx
c0017d1e:	83 ec 30             	sub    esp,0x30
c0017d21:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017d25:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017d29:	6a 00                	push   0x0
c0017d2b:	6a 00                	push   0x0
c0017d2d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d33:	e8 52 f5 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d38:	83 c4 0c             	add    esp,0xc
c0017d3b:	6a 00                	push   0x0
c0017d3d:	6a 02                	push   0x2
c0017d3f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d45:	e8 40 f5 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d4a:	31 d2                	xor    edx,edx
c0017d4c:	89 f9                	mov    ecx,edi
c0017d4e:	89 f8                	mov    eax,edi
c0017d50:	c1 e9 10             	shr    ecx,0x10
c0017d53:	0f b6 c4             	movzx  eax,ah
c0017d56:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017d5a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017d5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d62:	b9 64 00 00 00       	mov    ecx,0x64
c0017d67:	89 f0                	mov    eax,esi
c0017d69:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017d6d:	89 f0                	mov    eax,esi
c0017d6f:	0f b6 c4             	movzx  eax,ah
c0017d72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d76:	89 f0                	mov    eax,esi
c0017d78:	c1 e8 10             	shr    eax,0x10
c0017d7b:	f7 f1                	div    ecx
c0017d7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017d81:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017d85:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017d89:	59                   	pop    ecx
c0017d8a:	5b                   	pop    ebx
c0017d8b:	89 fb                	mov    ebx,edi
c0017d8d:	6a 0b                	push   0xb
c0017d8f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d95:	e8 d6 f3 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017d9a:	83 c4 10             	add    esp,0x10
c0017d9d:	89 c5                	mov    ebp,eax
c0017d9f:	a8 04                	test   al,0x4
c0017da1:	75 6e                	jne    c0017e11 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017da3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017da7:	31 d2                	xor    edx,edx
c0017da9:	0f b6 c1             	movzx  eax,cl
c0017dac:	b9 0a 00 00 00       	mov    ecx,0xa
c0017db1:	f7 f1                	div    ecx
c0017db3:	c1 e0 04             	shl    eax,0x4
c0017db6:	09 d0                	or     eax,edx
c0017db8:	31 d2                	xor    edx,edx
c0017dba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dbe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017dc3:	f7 f1                	div    ecx
c0017dc5:	c1 e0 04             	shl    eax,0x4
c0017dc8:	09 d0                	or     eax,edx
c0017dca:	31 d2                	xor    edx,edx
c0017dcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dd0:	0f b6 c3             	movzx  eax,bl
c0017dd3:	f7 f1                	div    ecx
c0017dd5:	c1 e0 04             	shl    eax,0x4
c0017dd8:	09 d0                	or     eax,edx
c0017dda:	31 d2                	xor    edx,edx
c0017ddc:	89 c3                	mov    ebx,eax
c0017dde:	89 f0                	mov    eax,esi
c0017de0:	0f b6 c0             	movzx  eax,al
c0017de3:	f7 f1                	div    ecx
c0017de5:	c1 e0 04             	shl    eax,0x4
c0017de8:	09 d0                	or     eax,edx
c0017dea:	31 d2                	xor    edx,edx
c0017dec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017df5:	f7 f1                	div    ecx
c0017df7:	c1 e0 04             	shl    eax,0x4
c0017dfa:	09 d0                	or     eax,edx
c0017dfc:	31 d2                	xor    edx,edx
c0017dfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e06:	f7 f1                	div    ecx
c0017e08:	c1 e0 04             	shl    eax,0x4
c0017e0b:	09 d0                	or     eax,edx
c0017e0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e11:	83 e5 02             	and    ebp,0x2
c0017e14:	75 1e                	jne    c0017e34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e16:	0f b6 c3             	movzx  eax,bl
c0017e19:	83 f8 0b             	cmp    eax,0xb
c0017e1c:	76 10                	jbe    c0017e2e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017e1e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017e21:	88 d3                	mov    bl,dl
c0017e23:	84 d2                	test   dl,dl
c0017e25:	75 02                	jne    c0017e29 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017e27:	b3 0c                	mov    bl,0xc
c0017e29:	83 cb 80             	or     ebx,0xffffff80
c0017e2c:	eb 06                	jmp    c0017e34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e2e:	85 c0                	test   eax,eax
c0017e30:	75 02                	jne    c0017e34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e32:	b3 0c                	mov    bl,0xc
c0017e34:	0f b6 db             	movzx  ebx,bl
c0017e37:	50                   	push   eax
c0017e38:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017e3d:	52                   	push   edx
c0017e3e:	6a 00                	push   0x0
c0017e40:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e46:	e8 3f f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e4b:	83 c4 0c             	add    esp,0xc
c0017e4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017e53:	50                   	push   eax
c0017e54:	6a 02                	push   0x2
c0017e56:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e5c:	e8 29 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e61:	83 c4 0c             	add    esp,0xc
c0017e64:	53                   	push   ebx
c0017e65:	6a 04                	push   0x4
c0017e67:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e6d:	e8 18 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e72:	83 c4 0c             	add    esp,0xc
c0017e75:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017e7a:	52                   	push   edx
c0017e7b:	6a 07                	push   0x7
c0017e7d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e83:	e8 02 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e88:	83 c4 0c             	add    esp,0xc
c0017e8b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017e90:	50                   	push   eax
c0017e91:	6a 08                	push   0x8
c0017e93:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e99:	e8 ec f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e9e:	83 c4 0c             	add    esp,0xc
c0017ea1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ea6:	55                   	push   ebp
c0017ea7:	6a 09                	push   0x9
c0017ea9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017eaf:	e8 d6 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017eb4:	5a                   	pop    edx
c0017eb5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017eb9:	e8 7c fb ff ff       	call   c0017a3a <RTC::completeRTCRefresh()>
c0017ebe:	83 c4 3c             	add    esp,0x3c
c0017ec1:	b0 01                	mov    al,0x1
c0017ec3:	5b                   	pop    ebx
c0017ec4:	5e                   	pop    esi
c0017ec5:	5f                   	pop    edi
c0017ec6:	5d                   	pop    ebp
c0017ec7:	c3                   	ret    

c0017ec8 <rtcIRQHandler(regs*, void*)>:
c0017ec8:	53                   	push   ebx
c0017ec9:	83 ec 10             	sub    esp,0x10
c0017ecc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ed0:	6a 0c                	push   0xc
c0017ed2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ed8:	e8 93 f2 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	a8 80                	test   al,0x80
c0017ee2:	74 24                	je     c0017f08 <rtcIRQHandler(regs*, void*)+0x40>
c0017ee4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017eeb:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017ef2:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017ef9:	75 0d                	jne    c0017f08 <rtcIRQHandler(regs*, void*)+0x40>
c0017efb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017eff:	83 c4 08             	add    esp,0x8
c0017f02:	5b                   	pop    ebx
c0017f03:	e9 32 fb ff ff       	jmp    c0017a3a <RTC::completeRTCRefresh()>
c0017f08:	83 c4 08             	add    esp,0x8
c0017f0b:	5b                   	pop    ebx
c0017f0c:	c3                   	ret    
c0017f0d:	90                   	nop

c0017f0e <RTC::RTC()>:
c0017f0e:	83 ec 1c             	sub    esp,0x1c
c0017f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f15:	83 ec 08             	sub    esp,0x8
c0017f18:	68 ab 1d 02 c0       	push   0xc0021dab
c0017f1d:	50                   	push   eax
c0017f1e:	e8 ef 3b ff ff       	call   c000bb12 <Clock::Clock(char const*)>
c0017f23:	83 c4 10             	add    esp,0x10
c0017f26:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c0017f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2f:	89 10                	mov    DWORD PTR [eax],edx
c0017f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f35:	83 ec 0c             	sub    esp,0xc
c0017f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f3c:	6a 01                	push   0x1
c0017f3e:	68 c8 7e 01 c0       	push   0xc0017ec8
c0017f43:	6a 08                	push   0x8
c0017f45:	50                   	push   eax
c0017f46:	e8 a3 40 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017f4b:	83 c4 20             	add    esp,0x20
c0017f4e:	89 c2                	mov    edx,eax
c0017f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f54:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017f5a:	fa                   	cli    
c0017f5b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f60:	83 c0 01             	add    eax,0x1
c0017f63:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017f68:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017f6d:	83 ec 08             	sub    esp,0x8
c0017f70:	6a 0b                	push   0xb
c0017f72:	50                   	push   eax
c0017f73:	e8 f8 f1 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017f78:	83 c4 10             	add    esp,0x10
c0017f7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f7f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017f84:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017f88:	83 ca 10             	or     edx,0x10
c0017f8b:	0f b6 d2             	movzx  edx,dl
c0017f8e:	83 ec 04             	sub    esp,0x4
c0017f91:	52                   	push   edx
c0017f92:	6a 0b                	push   0xb
c0017f94:	50                   	push   eax
c0017f95:	e8 f0 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f9a:	83 c4 10             	add    esp,0x10
c0017f9d:	83 ec 0c             	sub    esp,0xc
c0017fa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fa4:	e8 91 fa ff ff       	call   c0017a3a <RTC::completeRTCRefresh()>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017fb1:	83 e8 01             	sub    eax,0x1
c0017fb4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017fb9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017fbe:	85 c0                	test   eax,eax
c0017fc0:	75 01                	jne    c0017fc3 <RTC::RTC()+0xb5>
c0017fc2:	fb                   	sti    
c0017fc3:	90                   	nop
c0017fc4:	83 c4 1c             	add    esp,0x1c
c0017fc7:	c3                   	ret    

c0017fc8 <HalConsoleScroll(int, int)>:
c0017fc8:	83 ec 10             	sub    esp,0x10
c0017fcb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017fd3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017fdb:	90                   	nop
c0017fdc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017fe1:	0f 8f e1 00 00 00    	jg     c00180c8 <HalConsoleScroll(int, int)+0x100>
c0017fe7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017fef:	90                   	nop
c0017ff0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017ff8:	0f 8f be 00 00 00    	jg     c00180bc <HalConsoleScroll(int, int)+0xf4>
c0017ffe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018002:	89 d0                	mov    eax,edx
c0018004:	c1 e0 02             	shl    eax,0x2
c0018007:	01 d0                	add    eax,edx
c0018009:	c1 e0 05             	shl    eax,0x5
c001800c:	89 c2                	mov    edx,eax
c001800e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018012:	01 d0                	add    eax,edx
c0018014:	89 c2                	mov    edx,eax
c0018016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001801a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001801d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018021:	89 d0                	mov    eax,edx
c0018023:	c1 e0 02             	shl    eax,0x2
c0018026:	01 d0                	add    eax,edx
c0018028:	c1 e0 05             	shl    eax,0x5
c001802b:	89 c2                	mov    edx,eax
c001802d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018031:	01 d0                	add    eax,edx
c0018033:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001803d:	01 c2                	add    edx,eax
c001803f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018041:	88 02                	mov    BYTE PTR [edx],al
c0018043:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018048:	75 66                	jne    c00180b0 <HalConsoleScroll(int, int)+0xe8>
c001804a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001804e:	83 e0 01             	and    eax,0x1
c0018051:	74 39                	je     c001808c <HalConsoleScroll(int, int)+0xc4>
c0018053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018057:	83 e0 0f             	and    eax,0xf
c001805a:	88 c2                	mov    dl,al
c001805c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018060:	c1 e0 04             	shl    eax,0x4
c0018063:	09 d0                	or     eax,edx
c0018065:	88 c1                	mov    cl,al
c0018067:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001806b:	89 d0                	mov    eax,edx
c001806d:	c1 e0 02             	shl    eax,0x2
c0018070:	01 d0                	add    eax,edx
c0018072:	c1 e0 05             	shl    eax,0x5
c0018075:	89 c2                	mov    edx,eax
c0018077:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001807b:	01 d0                	add    eax,edx
c001807d:	89 c2                	mov    edx,eax
c001807f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018083:	01 d0                	add    eax,edx
c0018085:	88 ca                	mov    dl,cl
c0018087:	88 10                	mov    BYTE PTR [eax],dl
c0018089:	eb 25                	jmp    c00180b0 <HalConsoleScroll(int, int)+0xe8>
c001808b:	90                   	nop
c001808c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018090:	89 d0                	mov    eax,edx
c0018092:	c1 e0 02             	shl    eax,0x2
c0018095:	01 d0                	add    eax,edx
c0018097:	c1 e0 05             	shl    eax,0x5
c001809a:	89 c2                	mov    edx,eax
c001809c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180a0:	01 d0                	add    eax,edx
c00180a2:	89 c2                	mov    edx,eax
c00180a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a8:	01 d0                	add    eax,edx
c00180aa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00180ad:	8d 76 00             	lea    esi,[esi+0x0]
c00180b0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00180b5:	e9 36 ff ff ff       	jmp    c0017ff0 <HalConsoleScroll(int, int)+0x28>
c00180ba:	66 90                	xchg   ax,ax
c00180bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00180c1:	e9 16 ff ff ff       	jmp    c0017fdc <HalConsoleScroll(int, int)+0x14>
c00180c6:	66 90                	xchg   ax,ax
c00180c8:	90                   	nop
c00180c9:	83 c4 10             	add    esp,0x10
c00180cc:	c3                   	ret    
c00180cd:	8d 76 00             	lea    esi,[esi+0x0]

c00180d0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00180d0:	83 ec 14             	sub    esp,0x14
c00180d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180d7:	88 04 24             	mov    BYTE PTR [esp],al
c00180da:	8a 04 24             	mov    al,BYTE PTR [esp]
c00180dd:	0f b6 c0             	movzx  eax,al
c00180e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180e4:	89 d1                	mov    ecx,edx
c00180e6:	83 e1 0f             	and    ecx,0xf
c00180e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180ed:	c1 e2 04             	shl    edx,0x4
c00180f0:	0f b6 d2             	movzx  edx,dl
c00180f3:	09 ca                	or     edx,ecx
c00180f5:	c1 e2 08             	shl    edx,0x8
c00180f8:	09 d0                	or     eax,edx
c00180fa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00180ff:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018107:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810b:	89 d0                	mov    eax,edx
c001810d:	c1 e0 02             	shl    eax,0x2
c0018110:	01 d0                	add    eax,edx
c0018112:	c1 e0 04             	shl    eax,0x4
c0018115:	89 c2                	mov    edx,eax
c0018117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001811b:	01 d0                	add    eax,edx
c001811d:	01 c0                	add    eax,eax
c001811f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018123:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018127:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001812c:	66 89 02             	mov    WORD PTR [edx],ax
c001812f:	90                   	nop
c0018130:	83 c4 14             	add    esp,0x14
c0018133:	c3                   	ret    

c0018134 <HalConsoleCursorUpdate(int, int)>:
c0018134:	83 ec 20             	sub    esp,0x20
c0018137:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813b:	89 c2                	mov    edx,eax
c001813d:	c1 e2 02             	shl    edx,0x2
c0018140:	01 d0                	add    eax,edx
c0018142:	c1 e0 04             	shl    eax,0x4
c0018145:	89 c2                	mov    edx,eax
c0018147:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001814b:	01 d0                	add    eax,edx
c001814d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018152:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018159:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001815e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018166:	ee                   	out    dx,al
c0018167:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001816c:	0f b6 c0             	movzx  eax,al
c001816f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018176:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001817a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001817e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018182:	ee                   	out    dx,al
c0018183:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001818a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001818f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018193:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018197:	ee                   	out    dx,al
c0018198:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001819d:	c1 e8 08             	shr    eax,0x8
c00181a0:	0f b6 c0             	movzx  eax,al
c00181a3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00181aa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00181ae:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00181b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181b6:	ee                   	out    dx,al
c00181b7:	90                   	nop
c00181b8:	83 c4 20             	add    esp,0x20
c00181bb:	c3                   	ret    

c00181bc <FAT::getName()>:
c00181bc:	b8 fc 1d 02 c0       	mov    eax,0xc0021dfc
c00181c1:	c3                   	ret    
c00181c2:	66 90                	xchg   ax,ax

c00181c4 <FAT::tell(void*, unsigned long long*)>:
c00181c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00181c9:	75 09                	jne    c00181d4 <FAT::tell(void*, unsigned long long*)+0x10>
c00181cb:	b8 04 00 00 00       	mov    eax,0x4
c00181d0:	c3                   	ret    
c00181d1:	8d 76 00             	lea    esi,[esi+0x0]
c00181d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181d9:	75 09                	jne    c00181e4 <FAT::tell(void*, unsigned long long*)+0x20>
c00181db:	b8 04 00 00 00       	mov    eax,0x4
c00181e0:	c3                   	ret    
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181eb:	ba 00 00 00 00       	mov    edx,0x0
c00181f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181f4:	89 01                	mov    DWORD PTR [ecx],eax
c00181f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181f9:	b8 00 00 00 00       	mov    eax,0x0
c00181fe:	c3                   	ret    
c00181ff:	90                   	nop

c0018200 <FAT::stat(void*, unsigned long long*)>:
c0018200:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018205:	75 09                	jne    c0018210 <FAT::stat(void*, unsigned long long*)+0x10>
c0018207:	b8 04 00 00 00       	mov    eax,0x4
c001820c:	c3                   	ret    
c001820d:	8d 76 00             	lea    esi,[esi+0x0]
c0018210:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018215:	75 09                	jne    c0018220 <FAT::stat(void*, unsigned long long*)+0x20>
c0018217:	b8 04 00 00 00       	mov    eax,0x4
c001821c:	c3                   	ret    
c001821d:	8d 76 00             	lea    esi,[esi+0x0]
c0018220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018224:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018227:	ba 00 00 00 00       	mov    edx,0x0
c001822c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018230:	89 01                	mov    DWORD PTR [ecx],eax
c0018232:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018235:	b8 00 00 00 00       	mov    eax,0x0
c001823a:	c3                   	ret    
c001823b:	90                   	nop

c001823c <FAT::~FAT()>:
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	ba 48 1e 02 c0       	mov    edx,0xc0021e48
c0018244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018248:	89 10                	mov    DWORD PTR [eax],edx
c001824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824e:	83 ec 0c             	sub    esp,0xc
c0018251:	50                   	push   eax
c0018252:	e8 fd 2c ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	90                   	nop
c001825b:	83 c4 0c             	add    esp,0xc
c001825e:	c3                   	ret    
c001825f:	90                   	nop

c0018260 <FAT::~FAT()>:
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	83 ec 0c             	sub    esp,0xc
c0018266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001826a:	e8 cd ff ff ff       	call   c001823c <FAT::~FAT()>
c001826f:	83 c4 10             	add    esp,0x10
c0018272:	83 ec 08             	sub    esp,0x8
c0018275:	6a 08                	push   0x8
c0018277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001827b:	e8 8c 25 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	83 c4 0c             	add    esp,0xc
c0018286:	c3                   	ret    
c0018287:	90                   	nop

c0018288 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018288:	83 ec 1c             	sub    esp,0x1c
c001828b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018292:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018297:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001829b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182a2:	83 f8 ff             	cmp    eax,0xffffffff
c00182a5:	75 35                	jne    c00182dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00182a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182ab:	88 c2                	mov    dl,al
c00182ad:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182b2:	01 d0                	add    eax,edx
c00182b4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00182b8:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00182be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182c2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182c9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182d2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182d9:	eb 19                	jmp    c00182f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00182db:	90                   	nop
c00182dc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182e0:	88 c2                	mov    dl,al
c00182e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182e6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182ed:	01 d0                	add    eax,edx
c00182ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00182f3:	90                   	nop
c00182f4:	83 ec 04             	sub    esp,0x4
c00182f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182ff:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018303:	50                   	push   eax
c0018304:	e8 c6 cc fe ff       	call   c0004fcf <f_getlabel>
c0018309:	83 c4 10             	add    esp,0x10
c001830c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018315:	75 09                	jne    c0018320 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018317:	b8 00 00 00 00       	mov    eax,0x0
c001831c:	eb 0a                	jmp    c0018328 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001831e:	66 90                	xchg   ax,ax
c0018320:	b8 01 00 00 00       	mov    eax,0x1
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	83 c4 1c             	add    esp,0x1c
c001832b:	c3                   	ret    

c001832c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001832c:	57                   	push   edi
c001832d:	83 ec 58             	sub    esp,0x58
c0018330:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018338:	8d 54 24 10          	lea    edx,[esp+0x10]
c001833c:	b8 00 00 00 00       	mov    eax,0x0
c0018341:	b9 0f 00 00 00       	mov    ecx,0xf
c0018346:	fc                   	cld    
c0018347:	89 d7                	mov    edi,edx
c0018349:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001834b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001834f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018356:	83 f8 ff             	cmp    eax,0xffffffff
c0018359:	75 35                	jne    c0018390 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001835b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001835f:	88 c2                	mov    dl,al
c0018361:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018366:	01 d0                	add    eax,edx
c0018368:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001836c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018372:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018376:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001837d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018382:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018386:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001838d:	eb 19                	jmp    c00183a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001838f:	90                   	nop
c0018390:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018394:	88 c2                	mov    dl,al
c0018396:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001839a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00183a1:	01 d0                	add    eax,edx
c00183a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183a7:	90                   	nop
c00183a8:	83 ec 08             	sub    esp,0x8
c00183ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00183af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183b3:	50                   	push   eax
c00183b4:	e8 87 84 fe ff       	call   c0000840 <strcat>
c00183b9:	83 c4 10             	add    esp,0x10
c00183bc:	83 ec 0c             	sub    esp,0xc
c00183bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183c3:	50                   	push   eax
c00183c4:	e8 57 cd fe ff       	call   c0005120 <f_setlabel>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00183d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00183d5:	75 09                	jne    c00183e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00183d7:	b8 00 00 00 00       	mov    eax,0x0
c00183dc:	eb 0a                	jmp    c00183e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00183de:	66 90                	xchg   ax,ax
c00183e0:	b8 01 00 00 00       	mov    eax,0x1
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	83 c4 58             	add    esp,0x58
c00183eb:	5f                   	pop    edi
c00183ec:	c3                   	ret    
c00183ed:	90                   	nop
c00183ee:	66 90                	xchg   ax,ax

c00183f0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00183f0:	83 ec 2c             	sub    esp,0x2c
c00183f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	68 20 1e 02 c0       	push   0xc0021e20
c0018403:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018407:	e8 44 83 fe ff       	call   c0000750 <strcmp>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	85 c0                	test   eax,eax
c0018411:	0f 94 c0             	sete   al
c0018414:	0f b6 c0             	movzx  eax,al
c0018417:	85 c0                	test   eax,eax
c0018419:	74 0d                	je     c0018428 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001841b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018423:	e9 c0 00 00 00       	jmp    c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018428:	83 ec 08             	sub    esp,0x8
c001842b:	68 12 1e 02 c0       	push   0xc0021e12
c0018430:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018434:	e8 17 83 fe ff       	call   c0000750 <strcmp>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	85 c0                	test   eax,eax
c001843e:	0f 94 c0             	sete   al
c0018441:	0f b6 c0             	movzx  eax,al
c0018444:	85 c0                	test   eax,eax
c0018446:	74 10                	je     c0018458 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018448:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018450:	e9 93 00 00 00       	jmp    c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018455:	8d 76 00             	lea    esi,[esi+0x0]
c0018458:	83 ec 08             	sub    esp,0x8
c001845b:	68 18 1e 02 c0       	push   0xc0021e18
c0018460:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018464:	e8 e7 82 fe ff       	call   c0000750 <strcmp>
c0018469:	83 c4 10             	add    esp,0x10
c001846c:	85 c0                	test   eax,eax
c001846e:	0f 94 c0             	sete   al
c0018471:	0f b6 c0             	movzx  eax,al
c0018474:	85 c0                	test   eax,eax
c0018476:	74 0c                	je     c0018484 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018478:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018480:	eb 66                	jmp    c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018482:	66 90                	xchg   ax,ax
c0018484:	83 ec 08             	sub    esp,0x8
c0018487:	68 7c f7 01 c0       	push   0xc001f77c
c001848c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018490:	e8 bb 82 fe ff       	call   c0000750 <strcmp>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	85 c0                	test   eax,eax
c001849a:	0f 94 c0             	sete   al
c001849d:	0f b6 c0             	movzx  eax,al
c00184a0:	85 c0                	test   eax,eax
c00184a2:	74 0c                	je     c00184b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00184a4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00184ac:	eb 3a                	jmp    c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184ae:	66 90                	xchg   ax,ax
c00184b0:	83 ec 08             	sub    esp,0x8
c00184b3:	68 1e 1e 02 c0       	push   0xc0021e1e
c00184b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184bc:	e8 8f 82 fe ff       	call   c0000750 <strcmp>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	85 c0                	test   eax,eax
c00184c6:	0f 94 c0             	sete   al
c00184c9:	0f b6 c0             	movzx  eax,al
c00184cc:	85 c0                	test   eax,eax
c00184ce:	74 0c                	je     c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00184d0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00184d8:	eb 0e                	jmp    c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184da:	66 90                	xchg   ax,ax
c00184dc:	b8 08 00 00 00       	mov    eax,0x8
c00184e1:	e9 ea 00 00 00       	jmp    c00185d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00184e6:	66 90                	xchg   ax,ax
c00184e8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00184ef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184f8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00184ff:	83 f8 ff             	cmp    eax,0xffffffff
c0018502:	75 34                	jne    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018504:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018508:	88 c2                	mov    dl,al
c001850a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001850f:	01 d0                	add    eax,edx
c0018511:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018515:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001851b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001851f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018526:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001852b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001852f:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018536:	eb 18                	jmp    c0018550 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018538:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001853c:	88 c2                	mov    dl,al
c001853e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018542:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018549:	01 d0                	add    eax,edx
c001854b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001854f:	90                   	nop
c0018550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018554:	88 04 24             	mov    BYTE PTR [esp],al
c0018557:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001855b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001855f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018567:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001856c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018574:	83 ec 0c             	sub    esp,0xc
c0018577:	68 00 20 00 00       	push   0x2000
c001857c:	e8 2d f5 fe ff       	call   c0007aae <malloc>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018588:	68 00 20 00 00       	push   0x2000
c001858d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018591:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018595:	50                   	push   eax
c0018596:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001859a:	50                   	push   eax
c001859b:	e8 7d ce fe ff       	call   c000541d <f_mkfs>
c00185a0:	83 c4 10             	add    esp,0x10
c00185a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00185ac:	75 0a                	jne    c00185b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00185ae:	b8 00 00 00 00       	mov    eax,0x0
c00185b3:	eb 1b                	jmp    c00185d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00185b5:	8d 76 00             	lea    esi,[esi+0x0]
c00185b8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00185bd:	75 09                	jne    c00185c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00185bf:	b8 09 00 00 00       	mov    eax,0x9
c00185c4:	eb 0a                	jmp    c00185d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00185c6:	66 90                	xchg   ax,ax
c00185c8:	b8 01 00 00 00       	mov    eax,0x1
c00185cd:	8d 76 00             	lea    esi,[esi+0x0]
c00185d0:	83 c4 2c             	add    esp,0x2c
c00185d3:	c3                   	ret    

c00185d4 <FAT::tryMount(LogicalDisk*, int)>:
c00185d4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00185da:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00185df:	83 f8 14             	cmp    eax,0x14
c00185e2:	75 18                	jne    c00185fc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 24 1e 02 c0       	push   0xc0021e24
c00185ec:	e8 c8 85 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	b0 00                	mov    al,0x0
c00185f6:	e9 ed 01 00 00       	jmp    c00187e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00185fb:	90                   	nop
c00185fc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018603:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018609:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001860f:	3d 00 02 00 00       	cmp    eax,0x200
c0018614:	74 0a                	je     c0018620 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018616:	b0 00                	mov    al,0x0
c0018618:	e9 cb 01 00 00       	jmp    c00187e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001861d:	8d 76 00             	lea    esi,[esi+0x0]
c0018620:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018628:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001862f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018636:	83 f8 ff             	cmp    eax,0xffffffff
c0018639:	74 09                	je     c0018644 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001863b:	b0 01                	mov    al,0x1
c001863d:	e9 a6 01 00 00       	jmp    c00187e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018642:	66 90                	xchg   ax,ax
c0018644:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001864e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018656:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001865d:	88 c2                	mov    dl,al
c001865f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018664:	01 d0                	add    eax,edx
c0018666:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001866d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018673:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001867a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018681:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018686:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001868d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	68 34 02 00 00       	push   0x234
c001869c:	e8 0d f4 fe ff       	call   c0007aae <malloc>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00186ab:	83 ec 04             	sub    esp,0x4
c00186ae:	6a 00                	push   0x0
c00186b0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00186b7:	50                   	push   eax
c00186b8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00186bf:	e8 34 b5 fe ff       	call   c0003bf8 <f_mount>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00186ce:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00186d6:	74 1c                	je     c00186f4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00186e2:	e8 e7 f3 fe ff       	call   c0007ace <rfree>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	b0 00                	mov    al,0x0
c00186ec:	e9 f7 00 00 00       	jmp    c00187e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00186f1:	8d 76 00             	lea    esi,[esi+0x0]
c00186f4:	83 ec 04             	sub    esp,0x4
c00186f7:	68 00 01 00 00       	push   0x100
c00186fc:	6a 00                	push   0x0
c00186fe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018705:	50                   	push   eax
c0018706:	e8 e5 7d fe ff       	call   c00004f0 <memset>
c001870b:	83 c4 10             	add    esp,0x10
c001870e:	83 ec 08             	sub    esp,0x8
c0018711:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018718:	50                   	push   eax
c0018719:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018720:	50                   	push   eax
c0018721:	e8 1a 81 fe ff       	call   c0000840 <strcat>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	83 ec 08             	sub    esp,0x8
c001872c:	68 32 1e 02 c0       	push   0xc0021e32
c0018731:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018738:	50                   	push   eax
c0018739:	e8 02 81 fe ff       	call   c0000840 <strcat>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	83 ec 04             	sub    esp,0x4
c0018744:	6a 01                	push   0x1
c0018746:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001874d:	50                   	push   eax
c001874e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018752:	50                   	push   eax
c0018753:	e8 02 b5 fe ff       	call   c0003c5a <f_open>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018762:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018769:	85 c0                	test   eax,eax
c001876b:	74 0b                	je     c0018778 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001876d:	78 31                	js     c00187a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001876f:	83 e8 04             	sub    eax,0x4
c0018772:	83 f8 01             	cmp    eax,0x1
c0018775:	77 29                	ja     c00187a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018777:	90                   	nop
c0018778:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018780:	83 ec 0c             	sub    esp,0xc
c0018783:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018787:	50                   	push   eax
c0018788:	e8 9c bc fe ff       	call   c0004429 <f_close>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	90                   	nop
c0018791:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018799:	85 c0                	test   eax,eax
c001879b:	74 43                	je     c00187e0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001879d:	eb 31                	jmp    c00187d0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001879f:	90                   	nop
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00187aa:	e8 1f f3 fe ff       	call   c0007ace <rfree>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	83 ec 04             	sub    esp,0x4
c00187b5:	6a 00                	push   0x0
c00187b7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00187be:	50                   	push   eax
c00187bf:	6a 00                	push   0x0
c00187c1:	e8 32 b4 fe ff       	call   c0003bf8 <f_mount>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	b0 00                	mov    al,0x0
c00187cb:	eb 1b                	jmp    c00187e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00187cd:	8d 76 00             	lea    esi,[esi+0x0]
c00187d0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00187d5:	83 c0 01             	add    eax,0x1
c00187d8:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00187dd:	8d 76 00             	lea    esi,[esi+0x0]
c00187e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00187e7:	90                   	nop
c00187e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00187ee:	c3                   	ret    
c00187ef:	90                   	nop

c00187f0 <FAT::allocateSwapfile(char const*, int)>:
c00187f0:	55                   	push   ebp
c00187f1:	57                   	push   edi
c00187f2:	56                   	push   esi
c00187f3:	53                   	push   ebx
c00187f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00187fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018805:	83 ec 0c             	sub    esp,0xc
c0018808:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001880f:	e8 9a f2 fe ff       	call   c0007aae <malloc>
c0018814:	83 c4 10             	add    esp,0x10
c0018817:	89 c7                	mov    edi,eax
c0018819:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001881e:	83 ec 04             	sub    esp,0x4
c0018821:	50                   	push   eax
c0018822:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018829:	57                   	push   edi
c001882a:	e8 61 29 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001882f:	83 c4 10             	add    esp,0x10
c0018832:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018839:	83 ec 04             	sub    esp,0x4
c001883c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018840:	50                   	push   eax
c0018841:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018845:	50                   	push   eax
c0018846:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001884d:	e8 a6 2c ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001885c:	c1 e0 14             	shl    eax,0x14
c001885f:	89 c7                	mov    edi,eax
c0018861:	89 c5                	mov    ebp,eax
c0018863:	c1 fd 1f             	sar    ebp,0x1f
c0018866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001886a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001886e:	89 f9                	mov    ecx,edi
c0018870:	31 c1                	xor    ecx,eax
c0018872:	89 cb                	mov    ebx,ecx
c0018874:	89 e9                	mov    ecx,ebp
c0018876:	31 d1                	xor    ecx,edx
c0018878:	89 ce                	mov    esi,ecx
c001887a:	89 f0                	mov    eax,esi
c001887c:	09 d8                	or     eax,ebx
c001887e:	0f 84 9c 00 00 00    	je     c0018920 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001888e:	e8 31 2b ff ff       	call   c000b3c4 <File::unlink()>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	83 ec 08             	sub    esp,0x8
c0018899:	6a 12                	push   0x12
c001889b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188a2:	e8 a5 29 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00188b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00188b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00188be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00188c5:	c1 e0 14             	shl    eax,0x14
c00188c8:	83 ec 04             	sub    esp,0x4
c00188cb:	6a 01                	push   0x1
c00188cd:	50                   	push   eax
c00188ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00188d5:	e8 d6 c9 fe ff       	call   c00052b0 <f_expand>
c00188da:	83 c4 10             	add    esp,0x10
c00188dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00188e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00188e6:	83 c0 10             	add    eax,0x10
c00188e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00188eb:	83 ec 0c             	sub    esp,0xc
c00188ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00188f2:	52                   	push   edx
c00188f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00188f7:	52                   	push   edx
c00188f8:	6a 00                	push   0x0
c00188fa:	68 00 04 00 00       	push   0x400
c00188ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018906:	ff d0                	call   eax
c0018908:	83 c4 20             	add    esp,0x20
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018915:	e8 90 29 ff ff       	call   c000b2aa <File::close()>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	8d 76 00             	lea    esi,[esi+0x0]
c0018920:	83 ec 08             	sub    esp,0x8
c0018923:	6a 01                	push   0x1
c0018925:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001892c:	e8 1b 29 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0018931:	83 c4 10             	add    esp,0x10
c0018934:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001893b:	8b 00                	mov    eax,DWORD PTR [eax]
c001893d:	83 c0 0c             	add    eax,0xc
c0018940:	8b 00                	mov    eax,DWORD PTR [eax]
c0018942:	83 ec 0c             	sub    esp,0xc
c0018945:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018949:	52                   	push   edx
c001894a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001894e:	52                   	push   edx
c001894f:	6a 00                	push   0x0
c0018951:	6a 04                	push   0x4
c0018953:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001895a:	ff d0                	call   eax
c001895c:	83 c4 20             	add    esp,0x20
c001895f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018966:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001896c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018973:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001897a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001897d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001898e:	e8 17 29 ff ff       	call   c000b2aa <File::close()>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001899d:	ba 00 00 00 00       	mov    edx,0x0
c00189a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00189a8:	5b                   	pop    ebx
c00189a9:	5e                   	pop    esi
c00189aa:	5f                   	pop    edi
c00189ab:	5d                   	pop    ebp
c00189ac:	c3                   	ret    
c00189ad:	90                   	nop
c00189ae:	66 90                	xchg   ax,ax

c00189b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00189b0:	57                   	push   edi
c00189b1:	56                   	push   esi
c00189b2:	53                   	push   ebx
c00189b3:	81 ec 50 02 00 00    	sub    esp,0x250
c00189b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00189c1:	74 0d                	je     c00189d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00189c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00189cb:	75 0f                	jne    c00189dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00189cd:	8d 76 00             	lea    esi,[esi+0x0]
c00189d0:	b8 04 00 00 00       	mov    eax,0x4
c00189d5:	e9 3a 01 00 00       	jmp    c0018b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00189da:	66 90                	xchg   ax,ax
c00189dc:	83 ec 08             	sub    esp,0x8
c00189df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00189e6:	50                   	push   eax
c00189e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00189ee:	e8 03 bd fe ff       	call   c00046f6 <f_readdir>
c00189f3:	83 c4 10             	add    esp,0x10
c00189f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00189fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018a04:	83 ec 0c             	sub    esp,0xc
c0018a07:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018a0e:	83 c0 16             	add    eax,0x16
c0018a11:	50                   	push   eax
c0018a12:	e8 59 7b fe ff       	call   c0000570 <strlen>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	ba 00 00 00 00       	mov    edx,0x0
c0018a1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018a27:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018a2e:	0f b6 c0             	movzx  eax,al
c0018a31:	83 e0 10             	and    eax,0x10
c0018a34:	74 0a                	je     c0018a40 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018a36:	b8 02 00 00 00       	mov    eax,0x2
c0018a3b:	eb 0b                	jmp    c0018a48 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a40:	b8 01 00 00 00       	mov    eax,0x1
c0018a45:	8d 76 00             	lea    esi,[esi+0x0]
c0018a48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a4c:	83 ec 08             	sub    esp,0x8
c0018a4f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018a56:	83 c0 16             	add    eax,0x16
c0018a59:	50                   	push   eax
c0018a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a5e:	83 c0 10             	add    eax,0x10
c0018a61:	50                   	push   eax
c0018a62:	e8 d9 7b fe ff       	call   c0000640 <strcpy>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018a71:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018a78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a7c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018a83:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018a8a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018a91:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018a98:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018a9f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018aa6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018aad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018ab4:	89 c6                	mov    esi,eax
c0018ab6:	89 d7                	mov    edi,edx
c0018ab8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018aba:	89 c8                	mov    eax,ecx
c0018abc:	89 fa                	mov    edx,edi
c0018abe:	89 f3                	mov    ebx,esi
c0018ac0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018ac7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018ace:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018ad5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018adc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018ae2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018ae9:	0f be c0             	movsx  eax,al
c0018aec:	85 c0                	test   eax,eax
c0018aee:	75 08                	jne    c0018af8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018af0:	b8 07 00 00 00       	mov    eax,0x7
c0018af5:	eb 1d                	jmp    c0018b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018af7:	90                   	nop
c0018af8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018aff:	85 c0                	test   eax,eax
c0018b01:	75 09                	jne    c0018b0c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018b03:	b8 00 00 00 00       	mov    eax,0x0
c0018b08:	eb 0a                	jmp    c0018b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b0a:	66 90                	xchg   ax,ax
c0018b0c:	b8 01 00 00 00       	mov    eax,0x1
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	81 c4 50 02 00 00    	add    esp,0x250
c0018b1a:	5b                   	pop    ebx
c0018b1b:	5e                   	pop    esi
c0018b1c:	5f                   	pop    edi
c0018b1d:	c3                   	ret    
c0018b1e:	66 90                	xchg   ax,ax

c0018b20 <FAT::read(void*, unsigned long, void*, int*)>:
c0018b20:	83 ec 1c             	sub    esp,0x1c
c0018b23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b28:	74 0a                	je     c0018b34 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018b2a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b2f:	75 0b                	jne    c0018b3c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018b31:	8d 76 00             	lea    esi,[esi+0x0]
c0018b34:	b8 04 00 00 00       	mov    eax,0x4
c0018b39:	eb 41                	jmp    c0018b7c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b3b:	90                   	nop
c0018b3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b40:	50                   	push   eax
c0018b41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b4d:	e8 cb b3 fe ff       	call   c0003f1d <f_read>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b5d:	89 c2                	mov    edx,eax
c0018b5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b63:	89 10                	mov    DWORD PTR [eax],edx
c0018b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b69:	85 c0                	test   eax,eax
c0018b6b:	75 07                	jne    c0018b74 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018b6d:	b8 00 00 00 00       	mov    eax,0x0
c0018b72:	eb 08                	jmp    c0018b7c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b74:	b8 01 00 00 00       	mov    eax,0x1
c0018b79:	8d 76 00             	lea    esi,[esi+0x0]
c0018b7c:	83 c4 1c             	add    esp,0x1c
c0018b7f:	c3                   	ret    

c0018b80 <FAT::write(void*, unsigned long, void*, int*)>:
c0018b80:	83 ec 1c             	sub    esp,0x1c
c0018b83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b88:	74 0a                	je     c0018b94 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018b8a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b8f:	75 0b                	jne    c0018b9c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018b91:	8d 76 00             	lea    esi,[esi+0x0]
c0018b94:	b8 04 00 00 00       	mov    eax,0x4
c0018b99:	eb 41                	jmp    c0018bdc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018b9b:	90                   	nop
c0018b9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ba0:	50                   	push   eax
c0018ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ba5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ba9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bad:	e8 6a b5 fe ff       	call   c000411c <f_write>
c0018bb2:	83 c4 10             	add    esp,0x10
c0018bb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bbd:	89 c2                	mov    edx,eax
c0018bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc3:	89 10                	mov    DWORD PTR [eax],edx
c0018bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bc9:	85 c0                	test   eax,eax
c0018bcb:	75 07                	jne    c0018bd4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018bcd:	b8 00 00 00 00       	mov    eax,0x0
c0018bd2:	eb 08                	jmp    c0018bdc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018bd4:	b8 01 00 00 00       	mov    eax,0x1
c0018bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bdc:	83 c4 1c             	add    esp,0x1c
c0018bdf:	c3                   	ret    

c0018be0 <FAT::close(void*)>:
c0018be0:	83 ec 1c             	sub    esp,0x1c
c0018be3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018be8:	75 0a                	jne    c0018bf4 <FAT::close(void*)+0x14>
c0018bea:	b8 04 00 00 00       	mov    eax,0x4
c0018bef:	eb 3f                	jmp    c0018c30 <FAT::close(void*)+0x50>
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	83 ec 0c             	sub    esp,0xc
c0018bf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bfb:	e8 29 b8 fe ff       	call   c0004429 <f_close>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c07:	83 ec 0c             	sub    esp,0xc
c0018c0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c0e:	e8 ab ee fe ff       	call   c0007abe <free>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c1a:	85 c0                	test   eax,eax
c0018c1c:	75 0a                	jne    c0018c28 <FAT::close(void*)+0x48>
c0018c1e:	b8 00 00 00 00       	mov    eax,0x0
c0018c23:	eb 0b                	jmp    c0018c30 <FAT::close(void*)+0x50>
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	b8 01 00 00 00       	mov    eax,0x1
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	83 c4 1c             	add    esp,0x1c
c0018c33:	c3                   	ret    

c0018c34 <FAT::closeDir(void*)>:
c0018c34:	83 ec 1c             	sub    esp,0x1c
c0018c37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c3c:	75 0a                	jne    c0018c48 <FAT::closeDir(void*)+0x14>
c0018c3e:	b8 04 00 00 00       	mov    eax,0x4
c0018c43:	eb 3f                	jmp    c0018c84 <FAT::closeDir(void*)+0x50>
c0018c45:	8d 76 00             	lea    esi,[esi+0x0]
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c4f:	e8 80 ba fe ff       	call   c00046d4 <f_closedir>
c0018c54:	83 c4 10             	add    esp,0x10
c0018c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c5b:	83 ec 0c             	sub    esp,0xc
c0018c5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c62:	e8 57 ee fe ff       	call   c0007abe <free>
c0018c67:	83 c4 10             	add    esp,0x10
c0018c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c6e:	85 c0                	test   eax,eax
c0018c70:	75 0a                	jne    c0018c7c <FAT::closeDir(void*)+0x48>
c0018c72:	b8 00 00 00 00       	mov    eax,0x0
c0018c77:	eb 0b                	jmp    c0018c84 <FAT::closeDir(void*)+0x50>
c0018c79:	8d 76 00             	lea    esi,[esi+0x0]
c0018c7c:	b8 01 00 00 00       	mov    eax,0x1
c0018c81:	8d 76 00             	lea    esi,[esi+0x0]
c0018c84:	83 c4 1c             	add    esp,0x1c
c0018c87:	c3                   	ret    

c0018c88 <FAT::seek(void*, unsigned long long)>:
c0018c88:	83 ec 2c             	sub    esp,0x2c
c0018c8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018ca0:	75 0a                	jne    c0018cac <FAT::seek(void*, unsigned long long)+0x24>
c0018ca2:	b8 04 00 00 00       	mov    eax,0x4
c0018ca7:	eb 33                	jmp    c0018cdc <FAT::seek(void*, unsigned long long)+0x54>
c0018ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb0:	83 ec 08             	sub    esp,0x8
c0018cb3:	50                   	push   eax
c0018cb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018cb8:	e8 9b b7 fe ff       	call   c0004458 <f_lseek>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cc8:	85 c0                	test   eax,eax
c0018cca:	75 08                	jne    c0018cd4 <FAT::seek(void*, unsigned long long)+0x4c>
c0018ccc:	b8 00 00 00 00       	mov    eax,0x0
c0018cd1:	eb 09                	jmp    c0018cdc <FAT::seek(void*, unsigned long long)+0x54>
c0018cd3:	90                   	nop
c0018cd4:	b8 01 00 00 00       	mov    eax,0x1
c0018cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cdc:	83 c4 2c             	add    esp,0x2c
c0018cdf:	c3                   	ret    

c0018ce0 <fatWrapperReadDisk>:
c0018ce0:	53                   	push   ebx
c0018ce1:	83 ec 18             	sub    esp,0x18
c0018ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ce8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cf1:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018cf8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018cfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d00:	ba 00 00 00 00       	mov    edx,0x0
c0018d05:	83 ec 0c             	sub    esp,0xc
c0018d08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d0c:	53                   	push   ebx
c0018d0d:	52                   	push   edx
c0018d0e:	50                   	push   eax
c0018d0f:	51                   	push   ecx
c0018d10:	e8 0f 47 ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d15:	83 c4 20             	add    esp,0x20
c0018d18:	83 c4 18             	add    esp,0x18
c0018d1b:	5b                   	pop    ebx
c0018d1c:	c3                   	ret    
c0018d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0018d20 <fatWrapperWriteDisk>:
c0018d20:	53                   	push   ebx
c0018d21:	83 ec 18             	sub    esp,0x18
c0018d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d31:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018d38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018d3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d40:	ba 00 00 00 00       	mov    edx,0x0
c0018d45:	83 ec 0c             	sub    esp,0xc
c0018d48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d4c:	53                   	push   ebx
c0018d4d:	52                   	push   edx
c0018d4e:	50                   	push   eax
c0018d4f:	51                   	push   ecx
c0018d50:	e8 3b 47 ff ff       	call   c000d490 <LogicalDisk::write(unsigned long long, int, void*)>
c0018d55:	83 c4 20             	add    esp,0x20
c0018d58:	83 c4 18             	add    esp,0x18
c0018d5b:	5b                   	pop    ebx
c0018d5c:	c3                   	ret    
c0018d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0018d60 <fatWrapperIoctl>:
c0018d60:	53                   	push   ebx
c0018d61:	83 ec 28             	sub    esp,0x28
c0018d64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018d6c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018d70:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018d74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018d79:	83 f8 02             	cmp    eax,0x2
c0018d7c:	75 32                	jne    c0018db0 <fatWrapperIoctl+0x50>
c0018d7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d8b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018d92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018da2:	66 89 02             	mov    WORD PTR [edx],ax
c0018da5:	b8 00 00 00 00       	mov    eax,0x0
c0018daa:	e9 c5 00 00 00       	jmp    c0018e74 <fatWrapperIoctl+0x114>
c0018daf:	90                   	nop
c0018db0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018db5:	83 f8 01             	cmp    eax,0x1
c0018db8:	75 6a                	jne    c0018e24 <fatWrapperIoctl+0xc4>
c0018dba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018dc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018dc7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018dce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018dd4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018dda:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018de0:	89 c8                	mov    eax,ecx
c0018de2:	89 da                	mov    edx,ebx
c0018de4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018de8:	c1 e0 0a             	shl    eax,0xa
c0018deb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018df0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018df7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018dfd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018e03:	89 cb                	mov    ebx,ecx
c0018e05:	c1 fb 1f             	sar    ebx,0x1f
c0018e08:	53                   	push   ebx
c0018e09:	51                   	push   ecx
c0018e0a:	52                   	push   edx
c0018e0b:	50                   	push   eax
c0018e0c:	e8 6f 5b 00 00       	call   c001e980 <__udivdi3>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	89 c2                	mov    edx,eax
c0018e16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e1a:	89 10                	mov    DWORD PTR [eax],edx
c0018e1c:	b8 00 00 00 00       	mov    eax,0x0
c0018e21:	eb 51                	jmp    c0018e74 <fatWrapperIoctl+0x114>
c0018e23:	90                   	nop
c0018e24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e29:	85 c0                	test   eax,eax
c0018e2b:	75 07                	jne    c0018e34 <fatWrapperIoctl+0xd4>
c0018e2d:	b8 00 00 00 00       	mov    eax,0x0
c0018e32:	eb 40                	jmp    c0018e74 <fatWrapperIoctl+0x114>
c0018e34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e39:	83 f8 03             	cmp    eax,0x3
c0018e3c:	75 1a                	jne    c0018e58 <fatWrapperIoctl+0xf8>
c0018e3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e4a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018e50:	b8 00 00 00 00       	mov    eax,0x0
c0018e55:	eb 1d                	jmp    c0018e74 <fatWrapperIoctl+0x114>
c0018e57:	90                   	nop
c0018e58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e5d:	83 f8 04             	cmp    eax,0x4
c0018e60:	75 0a                	jne    c0018e6c <fatWrapperIoctl+0x10c>
c0018e62:	b8 00 00 00 00       	mov    eax,0x0
c0018e67:	eb 0b                	jmp    c0018e74 <fatWrapperIoctl+0x114>
c0018e69:	8d 76 00             	lea    esi,[esi+0x0]
c0018e6c:	b8 04 00 00 00       	mov    eax,0x4
c0018e71:	8d 76 00             	lea    esi,[esi+0x0]
c0018e74:	83 c4 28             	add    esp,0x28
c0018e77:	5b                   	pop    ebx
c0018e78:	c3                   	ret    
c0018e79:	90                   	nop
c0018e7a:	66 90                	xchg   ax,ax

c0018e7c <FAT::FAT()>:
c0018e7c:	83 ec 1c             	sub    esp,0x1c
c0018e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e83:	83 ec 0c             	sub    esp,0xc
c0018e86:	50                   	push   eax
c0018e87:	e8 a4 20 ff ff       	call   c000af30 <Filesystem::Filesystem()>
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	ba 48 1e 02 c0       	mov    edx,0xc0021e48
c0018e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e98:	89 10                	mov    DWORD PTR [eax],edx
c0018e9a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ea4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018eac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018eb1:	7f 19                	jg     c0018ecc <FAT::FAT()+0x50>
c0018eb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018eb7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ec2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ec7:	eb e3                	jmp    c0018eac <FAT::FAT()+0x30>
c0018ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ecc:	90                   	nop
c0018ecd:	83 c4 1c             	add    esp,0x1c
c0018ed0:	c3                   	ret    
c0018ed1:	90                   	nop
c0018ed2:	66 90                	xchg   ax,ax

c0018ed4 <FAT::fixFilepath(char*)>:
c0018ed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ed8:	8a 00                	mov    al,BYTE PTR [eax]
c0018eda:	0f be c0             	movsx  eax,al
c0018edd:	83 f8 40             	cmp    eax,0x40
c0018ee0:	7e 2e                	jle    c0018f10 <FAT::fixFilepath(char*)+0x3c>
c0018ee2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0018ee8:	83 e8 41             	sub    eax,0x41
c0018eeb:	88 c2                	mov    dl,al
c0018eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef1:	88 10                	mov    BYTE PTR [eax],dl
c0018ef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef7:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef9:	0f be c0             	movsx  eax,al
c0018efc:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018f03:	83 c0 30             	add    eax,0x30
c0018f06:	88 c2                	mov    dl,al
c0018f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f0c:	88 10                	mov    BYTE PTR [eax],dl
c0018f0e:	66 90                	xchg   ax,ax
c0018f10:	90                   	nop
c0018f11:	c3                   	ret    
c0018f12:	66 90                	xchg   ax,ax

c0018f14 <FAT::open(char const*, void**, FileOpenMode)>:
c0018f14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f22:	74 0c                	je     c0018f30 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018f24:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018f2c:	75 0e                	jne    c0018f3c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018f2e:	66 90                	xchg   ax,ax
c0018f30:	b8 04 00 00 00       	mov    eax,0x4
c0018f35:	e9 46 01 00 00       	jmp    c0019080 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018f3a:	66 90                	xchg   ax,ax
c0018f3c:	83 ec 08             	sub    esp,0x8
c0018f3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f4a:	50                   	push   eax
c0018f4b:	e8 f0 76 fe ff       	call   c0000640 <strcpy>
c0018f50:	83 c4 10             	add    esp,0x10
c0018f53:	83 ec 08             	sub    esp,0x8
c0018f56:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f5a:	50                   	push   eax
c0018f5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f62:	e8 6d ff ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018f72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f79:	83 e0 01             	and    eax,0x1
c0018f7c:	74 12                	je     c0018f90 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018f7e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f85:	83 c8 01             	or     eax,0x1
c0018f88:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f8f:	90                   	nop
c0018f90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f97:	83 e0 04             	and    eax,0x4
c0018f9a:	74 24                	je     c0018fc0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018f9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fa3:	83 c8 30             	or     eax,0x30
c0018fa6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fad:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fb4:	83 c8 02             	or     eax,0x2
c0018fb7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fbe:	66 90                	xchg   ax,ax
c0018fc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fc7:	83 e0 02             	and    eax,0x2
c0018fca:	74 14                	je     c0018fe0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018fcc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fd3:	83 c8 02             	or     eax,0x2
c0018fd6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fe7:	83 e0 08             	and    eax,0x8
c0018fea:	74 14                	je     c0019000 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018fec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ff3:	83 c8 04             	or     eax,0x4
c0018ff6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0019000:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019007:	83 e0 10             	and    eax,0x10
c001900a:	74 14                	je     c0019020 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001900c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019013:	83 c8 08             	or     eax,0x8
c0019016:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001901d:	8d 76 00             	lea    esi,[esi+0x0]
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	68 28 02 00 00       	push   0x228
c0019028:	e8 81 ea fe ff       	call   c0007aae <malloc>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	89 c2                	mov    edx,eax
c0019032:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019039:	89 10                	mov    DWORD PTR [eax],edx
c001903b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019043:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001904a:	8b 00                	mov    eax,DWORD PTR [eax]
c001904c:	83 ec 04             	sub    esp,0x4
c001904f:	52                   	push   edx
c0019050:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019054:	52                   	push   edx
c0019055:	50                   	push   eax
c0019056:	e8 ff ab fe ff       	call   c0003c5a <f_open>
c001905b:	83 c4 10             	add    esp,0x10
c001905e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019065:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001906d:	74 09                	je     c0019078 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001906f:	b8 01 00 00 00       	mov    eax,0x1
c0019074:	eb 0a                	jmp    c0019080 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019076:	66 90                	xchg   ax,ax
c0019078:	b8 00 00 00 00       	mov    eax,0x0
c001907d:	8d 76 00             	lea    esi,[esi+0x0]
c0019080:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019086:	c3                   	ret    
c0019087:	90                   	nop

c0019088 <FAT::openDir(char const*, void**)>:
c0019088:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001908e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019096:	74 0c                	je     c00190a4 <FAT::openDir(char const*, void**)+0x1c>
c0019098:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00190a0:	75 0e                	jne    c00190b0 <FAT::openDir(char const*, void**)+0x28>
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	b8 04 00 00 00       	mov    eax,0x4
c00190a9:	e9 82 00 00 00       	jmp    c0019130 <FAT::openDir(char const*, void**)+0xa8>
c00190ae:	66 90                	xchg   ax,ax
c00190b0:	83 ec 08             	sub    esp,0x8
c00190b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190be:	50                   	push   eax
c00190bf:	e8 7c 75 fe ff       	call   c0000640 <strcpy>
c00190c4:	83 c4 10             	add    esp,0x10
c00190c7:	83 ec 08             	sub    esp,0x8
c00190ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190ce:	50                   	push   eax
c00190cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190d6:	e8 f9 fd ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	83 ec 0c             	sub    esp,0xc
c00190e1:	6a 30                	push   0x30
c00190e3:	e8 c6 e9 fe ff       	call   c0007aae <malloc>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	89 c2                	mov    edx,eax
c00190ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190f4:	89 10                	mov    DWORD PTR [eax],edx
c00190f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00190ff:	83 ec 08             	sub    esp,0x8
c0019102:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019106:	52                   	push   edx
c0019107:	50                   	push   eax
c0019108:	e8 fc b4 fe ff       	call   c0004609 <f_opendir>
c001910d:	83 c4 10             	add    esp,0x10
c0019110:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019117:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001911f:	74 07                	je     c0019128 <FAT::openDir(char const*, void**)+0xa0>
c0019121:	b8 01 00 00 00       	mov    eax,0x1
c0019126:	eb 08                	jmp    c0019130 <FAT::openDir(char const*, void**)+0xa8>
c0019128:	b8 00 00 00 00       	mov    eax,0x0
c001912d:	8d 76 00             	lea    esi,[esi+0x0]
c0019130:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019136:	c3                   	ret    
c0019137:	90                   	nop

c0019138 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019138:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001913e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019146:	75 0c                	jne    c0019154 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019148:	b8 04 00 00 00       	mov    eax,0x4
c001914d:	e9 d6 00 00 00       	jmp    c0019228 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019152:	66 90                	xchg   ax,ax
c0019154:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001915c:	75 0a                	jne    c0019168 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001915e:	b8 04 00 00 00       	mov    eax,0x4
c0019163:	e9 c0 00 00 00       	jmp    c0019228 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019168:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019170:	75 0a                	jne    c001917c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019172:	b8 04 00 00 00       	mov    eax,0x4
c0019177:	e9 ac 00 00 00       	jmp    c0019228 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001917c:	83 ec 08             	sub    esp,0x8
c001917f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019186:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001918d:	50                   	push   eax
c001918e:	e8 ad 74 fe ff       	call   c0000640 <strcpy>
c0019193:	83 c4 10             	add    esp,0x10
c0019196:	83 ec 08             	sub    esp,0x8
c0019199:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191a0:	50                   	push   eax
c00191a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191a8:	e8 27 fd ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191b7:	50                   	push   eax
c00191b8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00191bf:	50                   	push   eax
c00191c0:	e8 c3 b5 fe ff       	call   c0004788 <f_stat>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00191cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00191d6:	85 c0                	test   eax,eax
c00191d8:	74 0a                	je     c00191e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00191da:	83 f8 04             	cmp    eax,0x4
c00191dd:	74 39                	je     c0019218 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00191df:	eb 3f                	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00191e1:	8d 76 00             	lea    esi,[esi+0x0]
c00191e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191e8:	0f b6 c0             	movzx  eax,al
c00191eb:	83 e0 10             	and    eax,0x10
c00191ee:	0f 95 c2             	setne  dl
c00191f1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00191f8:	88 10                	mov    BYTE PTR [eax],dl
c00191fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191fe:	ba 00 00 00 00       	mov    edx,0x0
c0019203:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001920a:	89 01                	mov    DWORD PTR [ecx],eax
c001920c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001920f:	b8 00 00 00 00       	mov    eax,0x0
c0019214:	eb 12                	jmp    c0019228 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019216:	66 90                	xchg   ax,ax
c0019218:	b8 02 00 00 00       	mov    eax,0x2
c001921d:	eb 09                	jmp    c0019228 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001921f:	90                   	nop
c0019220:	b8 01 00 00 00       	mov    eax,0x1
c0019225:	8d 76 00             	lea    esi,[esi+0x0]
c0019228:	81 c4 2c 02 00 00    	add    esp,0x22c
c001922e:	c3                   	ret    
c001922f:	90                   	nop

c0019230 <FAT::unlink(char const*)>:
c0019230:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019236:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001923e:	75 08                	jne    c0019248 <FAT::unlink(char const*)+0x18>
c0019240:	b8 04 00 00 00       	mov    eax,0x4
c0019245:	eb 61                	jmp    c00192a8 <FAT::unlink(char const*)+0x78>
c0019247:	90                   	nop
c0019248:	83 ec 08             	sub    esp,0x8
c001924b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019252:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019256:	50                   	push   eax
c0019257:	e8 e4 73 fe ff       	call   c0000640 <strcpy>
c001925c:	83 c4 10             	add    esp,0x10
c001925f:	83 ec 08             	sub    esp,0x8
c0019262:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019266:	50                   	push   eax
c0019267:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001926e:	e8 61 fc ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c0019273:	83 c4 10             	add    esp,0x10
c0019276:	83 ec 0c             	sub    esp,0xc
c0019279:	8d 44 24 18          	lea    eax,[esp+0x18]
c001927d:	50                   	push   eax
c001927e:	e8 77 b7 fe ff       	call   c00049fa <f_unlink>
c0019283:	83 c4 10             	add    esp,0x10
c0019286:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001928d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019294:	85 c0                	test   eax,eax
c0019296:	75 08                	jne    c00192a0 <FAT::unlink(char const*)+0x70>
c0019298:	b8 00 00 00 00       	mov    eax,0x0
c001929d:	eb 09                	jmp    c00192a8 <FAT::unlink(char const*)+0x78>
c001929f:	90                   	nop
c00192a0:	b8 01 00 00 00       	mov    eax,0x1
c00192a5:	8d 76 00             	lea    esi,[esi+0x0]
c00192a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192ae:	c3                   	ret    
c00192af:	90                   	nop

c00192b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00192b0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00192b6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00192bd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00192c4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00192c8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192cc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00192d4:	75 0a                	jne    c00192e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00192d6:	b8 04 00 00 00       	mov    eax,0x4
c00192db:	e9 7c 01 00 00       	jmp    c001945c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00192e0:	83 ec 08             	sub    esp,0x8
c00192e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00192ea:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192ee:	50                   	push   eax
c00192ef:	e8 4c 73 fe ff       	call   c0000640 <strcpy>
c00192f4:	83 c4 10             	add    esp,0x10
c00192f7:	83 ec 08             	sub    esp,0x8
c00192fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00192fe:	50                   	push   eax
c00192ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019306:	e8 c9 fb ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c001930b:	83 c4 10             	add    esp,0x10
c001930e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019316:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001931e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019323:	83 e0 01             	and    eax,0x1
c0019326:	74 14                	je     c001933c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019328:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001932f:	83 c8 01             	or     eax,0x1
c0019332:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019339:	8d 76 00             	lea    esi,[esi+0x0]
c001933c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019341:	83 e0 02             	and    eax,0x2
c0019344:	74 12                	je     c0019358 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019346:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001934d:	83 c8 20             	or     eax,0x20
c0019350:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019357:	90                   	nop
c0019358:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001935d:	83 e0 04             	and    eax,0x4
c0019360:	74 12                	je     c0019374 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019362:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019369:	83 c8 04             	or     eax,0x4
c001936c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019373:	90                   	nop
c0019374:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019379:	83 e0 08             	and    eax,0x8
c001937c:	74 12                	je     c0019390 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001937e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019385:	83 c8 02             	or     eax,0x2
c0019388:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001938f:	90                   	nop
c0019390:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019395:	83 e0 01             	and    eax,0x1
c0019398:	74 12                	je     c00193ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001939a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193a1:	83 c8 01             	or     eax,0x1
c00193a4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193ab:	90                   	nop
c00193ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193b1:	83 e0 02             	and    eax,0x2
c00193b4:	74 12                	je     c00193c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c00193b6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193bd:	83 c8 20             	or     eax,0x20
c00193c0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193c7:	90                   	nop
c00193c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193cd:	83 e0 04             	and    eax,0x4
c00193d0:	74 12                	je     c00193e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00193d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193d9:	83 c8 04             	or     eax,0x4
c00193dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193e3:	90                   	nop
c00193e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193e9:	83 e0 08             	and    eax,0x8
c00193ec:	74 12                	je     c0019400 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00193ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193f5:	83 c8 02             	or     eax,0x2
c00193f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193ff:	90                   	nop
c0019400:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019407:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001940e:	09 d0                	or     eax,edx
c0019410:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019417:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001941f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019427:	83 ec 04             	sub    esp,0x4
c001942a:	52                   	push   edx
c001942b:	50                   	push   eax
c001942c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019430:	50                   	push   eax
c0019431:	e8 39 ba fe ff       	call   c0004e6f <f_chmod>
c0019436:	83 c4 10             	add    esp,0x10
c0019439:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019440:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019447:	85 c0                	test   eax,eax
c0019449:	75 09                	jne    c0019454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001944b:	b8 00 00 00 00       	mov    eax,0x0
c0019450:	eb 0a                	jmp    c001945c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019452:	66 90                	xchg   ax,ax
c0019454:	b8 01 00 00 00       	mov    eax,0x1
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019462:	c3                   	ret    
c0019463:	90                   	nop

c0019464 <FAT::rename(char const*, char const*)>:
c0019464:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001946a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019472:	74 0c                	je     c0019480 <FAT::rename(char const*, char const*)+0x1c>
c0019474:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001947c:	75 0e                	jne    c001948c <FAT::rename(char const*, char const*)+0x28>
c001947e:	66 90                	xchg   ax,ax
c0019480:	b8 04 00 00 00       	mov    eax,0x4
c0019485:	e9 9e 00 00 00       	jmp    c0019528 <FAT::rename(char const*, char const*)+0xc4>
c001948a:	66 90                	xchg   ax,ax
c001948c:	83 ec 08             	sub    esp,0x8
c001948f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019496:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001949d:	50                   	push   eax
c001949e:	e8 9d 71 fe ff       	call   c0000640 <strcpy>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	83 ec 08             	sub    esp,0x8
c00194a9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00194b0:	50                   	push   eax
c00194b1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00194b8:	e8 17 fa ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	83 ec 08             	sub    esp,0x8
c00194c3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00194ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194ce:	50                   	push   eax
c00194cf:	e8 6c 71 fe ff       	call   c0000640 <strcpy>
c00194d4:	83 c4 10             	add    esp,0x10
c00194d7:	83 ec 08             	sub    esp,0x8
c00194da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194de:	50                   	push   eax
c00194df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00194e6:	e8 e9 f9 ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c00194eb:	83 c4 10             	add    esp,0x10
c00194ee:	83 ec 08             	sub    esp,0x8
c00194f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194f5:	50                   	push   eax
c00194f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194fd:	50                   	push   eax
c00194fe:	e8 b4 b7 fe ff       	call   c0004cb7 <f_rename>
c0019503:	83 c4 10             	add    esp,0x10
c0019506:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001950d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019514:	85 c0                	test   eax,eax
c0019516:	75 08                	jne    c0019520 <FAT::rename(char const*, char const*)+0xbc>
c0019518:	b8 00 00 00 00       	mov    eax,0x0
c001951d:	eb 09                	jmp    c0019528 <FAT::rename(char const*, char const*)+0xc4>
c001951f:	90                   	nop
c0019520:	b8 01 00 00 00       	mov    eax,0x1
c0019525:	8d 76 00             	lea    esi,[esi+0x0]
c0019528:	81 c4 1c 02 00 00    	add    esp,0x21c
c001952e:	c3                   	ret    
c001952f:	90                   	nop

c0019530 <FAT::mkdir(char const*)>:
c0019530:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019536:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001953e:	75 08                	jne    c0019548 <FAT::mkdir(char const*)+0x18>
c0019540:	b8 04 00 00 00       	mov    eax,0x4
c0019545:	eb 61                	jmp    c00195a8 <FAT::mkdir(char const*)+0x78>
c0019547:	90                   	nop
c0019548:	83 ec 08             	sub    esp,0x8
c001954b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019552:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019556:	50                   	push   eax
c0019557:	e8 e4 70 fe ff       	call   c0000640 <strcpy>
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	83 ec 08             	sub    esp,0x8
c0019562:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019566:	50                   	push   eax
c0019567:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001956e:	e8 61 f9 ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c0019573:	83 c4 10             	add    esp,0x10
c0019576:	83 ec 0c             	sub    esp,0xc
c0019579:	8d 44 24 18          	lea    eax,[esp+0x18]
c001957d:	50                   	push   eax
c001957e:	e8 99 b5 fe ff       	call   c0004b1c <f_mkdir>
c0019583:	83 c4 10             	add    esp,0x10
c0019586:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001958d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019594:	85 c0                	test   eax,eax
c0019596:	75 08                	jne    c00195a0 <FAT::mkdir(char const*)+0x70>
c0019598:	b8 00 00 00 00       	mov    eax,0x0
c001959d:	eb 09                	jmp    c00195a8 <FAT::mkdir(char const*)+0x78>
c001959f:	90                   	nop
c00195a0:	b8 01 00 00 00       	mov    eax,0x1
c00195a5:	8d 76 00             	lea    esi,[esi+0x0]
c00195a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00195ae:	c3                   	ret    
c00195af:	90                   	nop

c00195b0 <FAT::exists(char const*)>:
c00195b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00195b6:	83 ec 08             	sub    esp,0x8
c00195b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00195c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195c4:	50                   	push   eax
c00195c5:	e8 76 70 fe ff       	call   c0000640 <strcpy>
c00195ca:	83 c4 10             	add    esp,0x10
c00195cd:	83 ec 08             	sub    esp,0x8
c00195d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00195d4:	50                   	push   eax
c00195d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00195dc:	e8 f3 f8 ff ff       	call   c0018ed4 <FAT::fixFilepath(char*)>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	83 ec 08             	sub    esp,0x8
c00195e7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00195ee:	50                   	push   eax
c00195ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195f3:	50                   	push   eax
c00195f4:	e8 8f b1 fe ff       	call   c0004788 <f_stat>
c00195f9:	83 c4 10             	add    esp,0x10
c00195fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019603:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001960a:	85 c0                	test   eax,eax
c001960c:	75 06                	jne    c0019614 <FAT::exists(char const*)+0x64>
c001960e:	b0 01                	mov    al,0x1
c0019610:	eb 06                	jmp    c0019618 <FAT::exists(char const*)+0x68>
c0019612:	66 90                	xchg   ax,ax
c0019614:	b0 00                	mov    al,0x0
c0019616:	66 90                	xchg   ax,ax
c0019618:	81 c4 2c 02 00 00    	add    esp,0x22c
c001961e:	c3                   	ret    
c001961f:	90                   	nop

c0019620 <isoReadDiscSectorHelper>:
c0019620:	83 ec 2c             	sub    esp,0x2c
c0019623:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019627:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001962b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019630:	83 e8 41             	sub    eax,0x41
c0019633:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001963a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001963e:	ba 00 00 00 00       	mov    edx,0x0
c0019643:	83 ec 0c             	sub    esp,0xc
c0019646:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001964a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001964e:	52                   	push   edx
c001964f:	50                   	push   eax
c0019650:	51                   	push   ecx
c0019651:	e8 ce 3d ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c0019656:	83 c4 20             	add    esp,0x20
c0019659:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001965d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019662:	74 0c                	je     c0019670 <isoReadDiscSectorHelper+0x50>
c0019664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019668:	c1 e0 0b             	shl    eax,0xb
c001966b:	eb 0b                	jmp    c0019678 <isoReadDiscSectorHelper+0x58>
c001966d:	8d 76 00             	lea    esi,[esi+0x0]
c0019670:	b8 00 00 00 00       	mov    eax,0x0
c0019675:	8d 76 00             	lea    esi,[esi+0x0]
c0019678:	83 c4 2c             	add    esp,0x2c
c001967b:	c3                   	ret    

c001967c <iso_kprintf>:
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	83 ec 08             	sub    esp,0x8
c0019682:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019686:	68 f6 1b 02 c0       	push   0xc0021bf6
c001968b:	e8 a9 12 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019690:	83 c4 10             	add    esp,0x10
c0019693:	90                   	nop
c0019694:	83 c4 0c             	add    esp,0xc
c0019697:	c3                   	ret    

c0019698 <iso_kprintfd>:
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	83 ec 08             	sub    esp,0x8
c001969e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a2:	68 5a 05 02 c0       	push   0xc002055a
c00196a7:	e8 8d 12 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	90                   	nop
c00196b0:	83 c4 0c             	add    esp,0xc
c00196b3:	c3                   	ret    

c00196b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00196b4:	b8 08 00 00 00       	mov    eax,0x8
c00196b9:	c3                   	ret    

c00196ba <ISO9660::getName()>:
c00196ba:	b8 a8 1e 02 c0       	mov    eax,0xc0021ea8
c00196bf:	c3                   	ret    

c00196c0 <ISO9660::closeDir(void*)>:
c00196c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00196c6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00196c9:	90                   	nop

c00196ca <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00196ca:	b8 01 00 00 00       	mov    eax,0x1
c00196cf:	c3                   	ret    

c00196d0 <ISO9660::unlink(char const*)>:
c00196d0:	b8 01 00 00 00       	mov    eax,0x1
c00196d5:	c3                   	ret    

c00196d6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00196d6:	b8 03 00 00 00       	mov    eax,0x3
c00196db:	c3                   	ret    

c00196dc <ISO9660::rename(char const*, char const*)>:
c00196dc:	b8 01 00 00 00       	mov    eax,0x1
c00196e1:	c3                   	ret    

c00196e2 <ISO9660::mkdir(char const*)>:
c00196e2:	b8 01 00 00 00       	mov    eax,0x1
c00196e7:	c3                   	ret    

c00196e8 <ISO9660::~ISO9660()>:
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c00196f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f4:	89 10                	mov    DWORD PTR [eax],edx
c00196f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196fa:	83 ec 0c             	sub    esp,0xc
c00196fd:	50                   	push   eax
c00196fe:	e8 51 18 ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	90                   	nop
c0019707:	83 c4 0c             	add    esp,0xc
c001970a:	c3                   	ret    
c001970b:	90                   	nop

c001970c <ISO9660::~ISO9660()>:
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	83 ec 0c             	sub    esp,0xc
c0019712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019716:	e8 cd ff ff ff       	call   c00196e8 <ISO9660::~ISO9660()>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	83 ec 08             	sub    esp,0x8
c0019721:	6a 08                	push   0x8
c0019723:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019727:	e8 e0 10 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001972c:	83 c4 10             	add    esp,0x10
c001972f:	83 c4 0c             	add    esp,0xc
c0019732:	c3                   	ret    
c0019733:	90                   	nop

c0019734 <ISO9660::exists(char const*)>:
c0019734:	83 ec 18             	sub    esp,0x18
c0019737:	68 c3 1e 02 c0       	push   0xc0021ec3
c001973c:	e8 78 74 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0019741:	31 c0                	xor    eax,eax
c0019743:	83 c4 1c             	add    esp,0x1c
c0019746:	c3                   	ret    
c0019747:	90                   	nop

c0019748 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019748:	56                   	push   esi
c0019749:	53                   	push   ebx
c001974a:	53                   	push   ebx
c001974b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001974f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019753:	85 db                	test   ebx,ebx
c0019755:	0f 84 ca 00 00 00    	je     c0019825 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001975b:	85 f6                	test   esi,esi
c001975d:	0f 84 c2 00 00 00    	je     c0019825 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019763:	b8 03 00 00 00       	mov    eax,0x3
c0019768:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001976d:	0f 85 b7 00 00 00    	jne    c001982a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019773:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019775:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001977c:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019782:	74 1b                	je     c001979f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019784:	85 c0                	test   eax,eax
c0019786:	74 10                	je     c0019798 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019788:	83 ec 0c             	sub    esp,0xc
c001978b:	68 e1 1e 02 c0       	push   0xc0021ee1
c0019790:	e8 24 74 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0019795:	83 c4 10             	add    esp,0x10
c0019798:	8a 03                	mov    al,BYTE PTR [ebx]
c001979a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001979f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197a2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197a9:	85 c0                	test   eax,eax
c00197ab:	74 09                	je     c00197b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00197ad:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00197b4:	74 48                	je     c00197fe <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00197b6:	83 ec 0c             	sub    esp,0xc
c00197b9:	68 f1 1e 02 c0       	push   0xc0021ef1
c00197be:	e8 76 11 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00197c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197c6:	83 c4 10             	add    esp,0x10
c00197c9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197d0:	85 c0                	test   eax,eax
c00197d2:	74 17                	je     c00197eb <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00197d4:	83 ec 0c             	sub    esp,0xc
c00197d7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00197de:	68 11 1f 02 c0       	push   0xc0021f11
c00197e3:	e8 51 11 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	83 ec 0c             	sub    esp,0xc
c00197ee:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197f5:	50                   	push   eax
c00197f6:	e8 4b d2 fe ff       	call   c0006a46 <init_percd>
c00197fb:	83 c4 10             	add    esp,0x10
c00197fe:	83 c3 03             	add    ebx,0x3
c0019801:	51                   	push   ecx
c0019802:	51                   	push   ecx
c0019803:	6a 00                	push   0x0
c0019805:	53                   	push   ebx
c0019806:	e8 02 cd fe ff       	call   c000650d <iso_open>
c001980b:	83 c4 10             	add    esp,0x10
c001980e:	89 c2                	mov    edx,eax
c0019810:	b8 01 00 00 00       	mov    eax,0x1
c0019815:	83 fa ff             	cmp    edx,0xffffffff
c0019818:	74 10                	je     c001982a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001981a:	83 c2 32             	add    edx,0x32
c001981d:	31 c0                	xor    eax,eax
c001981f:	01 d2                	add    edx,edx
c0019821:	89 16                	mov    DWORD PTR [esi],edx
c0019823:	eb 05                	jmp    c001982a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019825:	b8 04 00 00 00       	mov    eax,0x4
c001982a:	5a                   	pop    edx
c001982b:	5b                   	pop    ebx
c001982c:	5e                   	pop    esi
c001982d:	c3                   	ret    

c001982e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001982e:	53                   	push   ebx
c001982f:	83 ec 08             	sub    esp,0x8
c0019832:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019836:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001983a:	85 c0                	test   eax,eax
c001983c:	74 2d                	je     c001986b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001983e:	85 db                	test   ebx,ebx
c0019840:	74 29                	je     c001986b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019842:	b9 02 00 00 00       	mov    ecx,0x2
c0019847:	52                   	push   edx
c0019848:	99                   	cdq    
c0019849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001984d:	f7 f9                	idiv   ecx
c001984f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019853:	83 e8 32             	sub    eax,0x32
c0019856:	50                   	push   eax
c0019857:	e8 59 cd fe ff       	call   c00065b5 <iso_read>
c001985c:	83 c4 10             	add    esp,0x10
c001985f:	89 03                	mov    DWORD PTR [ebx],eax
c0019861:	09 d0                	or     eax,edx
c0019863:	0f 94 c0             	sete   al
c0019866:	0f b6 c0             	movzx  eax,al
c0019869:	eb 05                	jmp    c0019870 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001986b:	b8 04 00 00 00       	mov    eax,0x4
c0019870:	83 c4 08             	add    esp,0x8
c0019873:	5b                   	pop    ebx
c0019874:	c3                   	ret    
c0019875:	90                   	nop

c0019876 <ISO9660::seek(void*, unsigned long long)>:
c0019876:	57                   	push   edi
c0019877:	56                   	push   esi
c0019878:	b8 04 00 00 00       	mov    eax,0x4
c001987d:	51                   	push   ecx
c001987e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019882:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019886:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001988a:	85 d2                	test   edx,edx
c001988c:	74 26                	je     c00198b4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001988e:	6a 00                	push   0x0
c0019890:	b9 02 00 00 00       	mov    ecx,0x2
c0019895:	57                   	push   edi
c0019896:	89 d0                	mov    eax,edx
c0019898:	56                   	push   esi
c0019899:	99                   	cdq    
c001989a:	f7 f9                	idiv   ecx
c001989c:	83 e8 32             	sub    eax,0x32
c001989f:	50                   	push   eax
c00198a0:	e8 26 ce fe ff       	call   c00066cb <iso_seek>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	31 f0                	xor    eax,esi
c00198aa:	31 fa                	xor    edx,edi
c00198ac:	09 d0                	or     eax,edx
c00198ae:	0f 95 c0             	setne  al
c00198b1:	0f b6 c0             	movzx  eax,al
c00198b4:	5a                   	pop    edx
c00198b5:	5e                   	pop    esi
c00198b6:	5f                   	pop    edi
c00198b7:	c3                   	ret    

c00198b8 <ISO9660::tell(void*, unsigned long long*)>:
c00198b8:	53                   	push   ebx
c00198b9:	83 ec 08             	sub    esp,0x8
c00198bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198c4:	85 c0                	test   eax,eax
c00198c6:	74 24                	je     c00198ec <ISO9660::tell(void*, unsigned long long*)+0x34>
c00198c8:	85 db                	test   ebx,ebx
c00198ca:	74 20                	je     c00198ec <ISO9660::tell(void*, unsigned long long*)+0x34>
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	b9 02 00 00 00       	mov    ecx,0x2
c00198d4:	99                   	cdq    
c00198d5:	f7 f9                	idiv   ecx
c00198d7:	83 e8 32             	sub    eax,0x32
c00198da:	50                   	push   eax
c00198db:	e8 6f ce fe ff       	call   c000674f <iso_tell>
c00198e0:	83 c4 10             	add    esp,0x10
c00198e3:	89 03                	mov    DWORD PTR [ebx],eax
c00198e5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00198e8:	31 c0                	xor    eax,eax
c00198ea:	eb 05                	jmp    c00198f1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00198ec:	b8 04 00 00 00       	mov    eax,0x4
c00198f1:	83 c4 08             	add    esp,0x8
c00198f4:	5b                   	pop    ebx
c00198f5:	c3                   	ret    

c00198f6 <ISO9660::stat(void*, unsigned long long*)>:
c00198f6:	53                   	push   ebx
c00198f7:	83 ec 14             	sub    esp,0x14
c00198fa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00198fe:	68 35 1f 02 c0       	push   0xc0021f35
c0019903:	e8 31 10 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019908:	83 c4 10             	add    esp,0x10
c001990b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019910:	74 2c                	je     c001993e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019912:	85 db                	test   ebx,ebx
c0019914:	74 28                	je     c001993e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019916:	83 ec 0c             	sub    esp,0xc
c0019919:	b9 02 00 00 00       	mov    ecx,0x2
c001991e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019922:	99                   	cdq    
c0019923:	f7 f9                	idiv   ecx
c0019925:	83 e8 32             	sub    eax,0x32
c0019928:	50                   	push   eax
c0019929:	e8 52 ce fe ff       	call   c0006780 <iso_total>
c001992e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019935:	89 03                	mov    DWORD PTR [ebx],eax
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	31 c0                	xor    eax,eax
c001993c:	eb 05                	jmp    c0019943 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001993e:	b8 04 00 00 00       	mov    eax,0x4
c0019943:	83 c4 08             	add    esp,0x8
c0019946:	5b                   	pop    ebx
c0019947:	c3                   	ret    

c0019948 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019948:	55                   	push   ebp
c0019949:	57                   	push   edi
c001994a:	56                   	push   esi
c001994b:	53                   	push   ebx
c001994c:	83 ec 18             	sub    esp,0x18
c001994f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019953:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019957:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001995b:	68 3d 1f 02 c0       	push   0xc0021f3d
c0019960:	e8 d4 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019965:	83 c4 10             	add    esp,0x10
c0019968:	85 ff                	test   edi,edi
c001996a:	0f 94 c0             	sete   al
c001996d:	85 f6                	test   esi,esi
c001996f:	0f 94 c2             	sete   dl
c0019972:	09 d0                	or     eax,edx
c0019974:	a8 01                	test   al,0x1
c0019976:	0f 85 dd 00 00 00    	jne    c0019a59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001997c:	85 db                	test   ebx,ebx
c001997e:	0f 84 d5 00 00 00    	je     c0019a59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019984:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019987:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001998d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019994:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001999b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001999d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00199a3:	74 1b                	je     c00199c0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00199a5:	85 c0                	test   eax,eax
c00199a7:	74 10                	je     c00199b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00199a9:	83 ec 0c             	sub    esp,0xc
c00199ac:	68 e1 1e 02 c0       	push   0xc0021ee1
c00199b1:	e8 03 72 ff ff       	call   c0010bb9 <KePanic(char const*)>
c00199b6:	83 c4 10             	add    esp,0x10
c00199b9:	8a 03                	mov    al,BYTE PTR [ebx]
c00199bb:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00199c0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00199c3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00199ca:	85 c0                	test   eax,eax
c00199cc:	74 09                	je     c00199d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00199ce:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00199d5:	74 51                	je     c0019a28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	68 45 1f 02 c0       	push   0xc0021f45
c00199df:	e8 55 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00199e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00199f2:	74 21                	je     c0019a15 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	68 65 1f 02 c0       	push   0xc0021f65
c00199fc:	e8 38 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019a01:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a04:	83 c4 10             	add    esp,0x10
c0019a07:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019a0e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019a15:	83 ec 0c             	sub    esp,0xc
c0019a18:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019a1f:	50                   	push   eax
c0019a20:	e8 21 d0 fe ff       	call   c0006a46 <init_percd>
c0019a25:	83 c4 10             	add    esp,0x10
c0019a28:	83 c3 03             	add    ebx,0x3
c0019a2b:	52                   	push   edx
c0019a2c:	52                   	push   edx
c0019a2d:	6a 00                	push   0x0
c0019a2f:	53                   	push   ebx
c0019a30:	e8 d8 ca fe ff       	call   c000650d <iso_open>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	89 c5                	mov    ebp,eax
c0019a3a:	83 f8 ff             	cmp    eax,0xffffffff
c0019a3d:	75 21                	jne    c0019a60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019a3f:	50                   	push   eax
c0019a40:	50                   	push   eax
c0019a41:	6a 01                	push   0x1
c0019a43:	53                   	push   ebx
c0019a44:	e8 c4 ca fe ff       	call   c000650d <iso_open>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	ba 02 00 00 00       	mov    edx,0x2
c0019a51:	40                   	inc    eax
c0019a52:	74 2b                	je     c0019a7f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a54:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019a57:	eb 24                	jmp    c0019a7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019a59:	ba 04 00 00 00       	mov    edx,0x4
c0019a5e:	eb 1f                	jmp    c0019a7f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a60:	83 ec 0c             	sub    esp,0xc
c0019a63:	50                   	push   eax
c0019a64:	e8 17 cd fe ff       	call   c0006780 <iso_total>
c0019a69:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019a70:	89 07                	mov    DWORD PTR [edi],eax
c0019a72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019a75:	e8 1d cb fe ff       	call   c0006597 <iso_close>
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	31 d2                	xor    edx,edx
c0019a7f:	83 c4 0c             	add    esp,0xc
c0019a82:	89 d0                	mov    eax,edx
c0019a84:	5b                   	pop    ebx
c0019a85:	5e                   	pop    esi
c0019a86:	5f                   	pop    edi
c0019a87:	5d                   	pop    ebp
c0019a88:	c3                   	ret    
c0019a89:	90                   	nop

c0019a8a <ISO9660::close(void*)>:
c0019a8a:	83 ec 0c             	sub    esp,0xc
c0019a8d:	b8 04 00 00 00       	mov    eax,0x4
c0019a92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a96:	85 d2                	test   edx,edx
c0019a98:	74 1b                	je     c0019ab5 <ISO9660::close(void*)+0x2b>
c0019a9a:	83 ec 0c             	sub    esp,0xc
c0019a9d:	b9 02 00 00 00       	mov    ecx,0x2
c0019aa2:	89 d0                	mov    eax,edx
c0019aa4:	99                   	cdq    
c0019aa5:	f7 f9                	idiv   ecx
c0019aa7:	83 e8 32             	sub    eax,0x32
c0019aaa:	50                   	push   eax
c0019aab:	e8 e7 ca fe ff       	call   c0006597 <iso_close>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	31 c0                	xor    eax,eax
c0019ab5:	83 c4 0c             	add    esp,0xc
c0019ab8:	c3                   	ret    
c0019ab9:	90                   	nop

c0019aba <ISO9660::openDir(char const*, void**)>:
c0019aba:	56                   	push   esi
c0019abb:	53                   	push   ebx
c0019abc:	50                   	push   eax
c0019abd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ac1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ac5:	85 db                	test   ebx,ebx
c0019ac7:	0f 84 bd 00 00 00    	je     c0019b8a <ISO9660::openDir(char const*, void**)+0xd0>
c0019acd:	85 f6                	test   esi,esi
c0019acf:	0f 84 b5 00 00 00    	je     c0019b8a <ISO9660::openDir(char const*, void**)+0xd0>
c0019ad5:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019ad7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019ade:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019ae4:	74 1b                	je     c0019b01 <ISO9660::openDir(char const*, void**)+0x47>
c0019ae6:	85 c0                	test   eax,eax
c0019ae8:	74 10                	je     c0019afa <ISO9660::openDir(char const*, void**)+0x40>
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	68 e1 1e 02 c0       	push   0xc0021ee1
c0019af2:	e8 c2 70 ff ff       	call   c0010bb9 <KePanic(char const*)>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	8a 03                	mov    al,BYTE PTR [ebx]
c0019afc:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019b01:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b04:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019b0b:	85 c0                	test   eax,eax
c0019b0d:	74 10                	je     c0019b1f <ISO9660::openDir(char const*, void**)+0x65>
c0019b0f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b16:	74 1a                	je     c0019b32 <ISO9660::openDir(char const*, void**)+0x78>
c0019b18:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019b29:	50                   	push   eax
c0019b2a:	e8 17 cf fe ff       	call   c0006a46 <init_percd>
c0019b2f:	83 c4 10             	add    esp,0x10
c0019b32:	83 c3 03             	add    ebx,0x3
c0019b35:	50                   	push   eax
c0019b36:	50                   	push   eax
c0019b37:	6a 01                	push   0x1
c0019b39:	53                   	push   ebx
c0019b3a:	e8 ce c9 fe ff       	call   c000650d <iso_open>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	89 c3                	mov    ebx,eax
c0019b44:	83 f8 ff             	cmp    eax,0xffffffff
c0019b47:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019b4c:	75 1c                	jne    c0019b6a <ISO9660::openDir(char const*, void**)+0xb0>
c0019b4e:	53                   	push   ebx
c0019b4f:	53                   	push   ebx
c0019b50:	68 89 1f 02 c0       	push   0xc0021f89
c0019b55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b5b:	e8 38 ef fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	b8 01 00 00 00       	mov    eax,0x1
c0019b68:	eb 25                	jmp    c0019b8f <ISO9660::openDir(char const*, void**)+0xd5>
c0019b6a:	01 db                	add    ebx,ebx
c0019b6c:	51                   	push   ecx
c0019b6d:	83 c3 65             	add    ebx,0x65
c0019b70:	51                   	push   ecx
c0019b71:	68 9c 1f 02 c0       	push   0xc0021f9c
c0019b76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b7c:	e8 17 ef fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019b81:	89 1e                	mov    DWORD PTR [esi],ebx
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	31 c0                	xor    eax,eax
c0019b88:	eb 05                	jmp    c0019b8f <ISO9660::openDir(char const*, void**)+0xd5>
c0019b8a:	b8 04 00 00 00       	mov    eax,0x4
c0019b8f:	5a                   	pop    edx
c0019b90:	5b                   	pop    ebx
c0019b91:	5e                   	pop    esi
c0019b92:	c3                   	ret    
c0019b93:	90                   	nop

c0019b94 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019b94:	55                   	push   ebp
c0019b95:	57                   	push   edi
c0019b96:	56                   	push   esi
c0019b97:	53                   	push   ebx
c0019b98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b9e:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019ba5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019bac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bb4:	0f 84 e7 00 00 00    	je     c0019ca1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019bba:	85 db                	test   ebx,ebx
c0019bbc:	0f 84 df 00 00 00    	je     c0019ca1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019bc2:	83 ec 0c             	sub    esp,0xc
c0019bc5:	68 af 1f 02 c0       	push   0xc0021faf
c0019bca:	e8 6a 0d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019bcf:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019bd6:	b9 02 00 00 00       	mov    ecx,0x2
c0019bdb:	99                   	cdq    
c0019bdc:	f7 f9                	idiv   ecx
c0019bde:	83 e8 32             	sub    eax,0x32
c0019be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019be4:	e8 e9 cb fe ff       	call   c00067d2 <iso_readdir>
c0019be9:	83 c4 10             	add    esp,0x10
c0019bec:	89 c6                	mov    esi,eax
c0019bee:	85 c0                	test   eax,eax
c0019bf0:	75 37                	jne    c0019c29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019bf2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019bf7:	56                   	push   esi
c0019bf8:	56                   	push   esi
c0019bf9:	68 ba 1f 02 c0       	push   0xc0021fba
c0019bfe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c04:	e8 8f ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019c09:	83 c4 0c             	add    esp,0xc
c0019c0c:	68 10 01 00 00       	push   0x110
c0019c11:	6a 00                	push   0x0
c0019c13:	57                   	push   edi
c0019c14:	e8 d7 68 fe ff       	call   c00004f0 <memset>
c0019c19:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	b8 01 00 00 00       	mov    eax,0x1
c0019c27:	eb 7d                	jmp    c0019ca6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019c29:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019c2f:	8d 68 08             	lea    ebp,[eax+0x8]
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	55                   	push   ebp
c0019c36:	e8 35 69 fe ff       	call   c0000570 <strlen>
c0019c3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019c4e:	75 0a                	jne    c0019c5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019c50:	b8 02 00 00 00       	mov    eax,0x2
c0019c55:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019c58:	74 05                	je     c0019c5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019c5a:	b8 01 00 00 00       	mov    eax,0x1
c0019c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c63:	50                   	push   eax
c0019c64:	50                   	push   eax
c0019c65:	55                   	push   ebp
c0019c66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c6a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019c6e:	50                   	push   eax
c0019c6f:	e8 cc 69 fe ff       	call   c0000640 <strcpy>
c0019c74:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019c7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c7d:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019c83:	5a                   	pop    edx
c0019c84:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019c89:	59                   	pop    ecx
c0019c8a:	68 cd 1f 02 c0       	push   0xc0021fcd
c0019c8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c95:	e8 fe ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019c9a:	83 c4 10             	add    esp,0x10
c0019c9d:	31 c0                	xor    eax,eax
c0019c9f:	eb 05                	jmp    c0019ca6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019ca1:	b8 04 00 00 00       	mov    eax,0x4
c0019ca6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cac:	5b                   	pop    ebx
c0019cad:	5e                   	pop    esi
c0019cae:	5f                   	pop    edi
c0019caf:	5d                   	pop    ebp
c0019cb0:	c3                   	ret    

c0019cb1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019cb1:	57                   	push   edi
c0019cb2:	56                   	push   esi
c0019cb3:	53                   	push   ebx
c0019cb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019cbc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019cc0:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019cc6:	0f be cb             	movsx  ecx,bl
c0019cc9:	75 0b                	jne    c0019cd6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019ccb:	0f be 05 00 2e 02 c0 	movsx  eax,BYTE PTR ds:0xc0022e00
c0019cd2:	39 c8                	cmp    eax,ecx
c0019cd4:	74 47                	je     c0019d1d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019cd6:	83 ec 0c             	sub    esp,0xc
c0019cd9:	31 d2                	xor    edx,edx
c0019cdb:	68 40 83 02 c0       	push   0xc0028340
c0019ce0:	6a 01                	push   0x1
c0019ce2:	52                   	push   edx
c0019ce3:	56                   	push   esi
c0019ce4:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019ceb:	e8 34 37 ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c0019cf0:	83 c4 20             	add    esp,0x20
c0019cf3:	85 c0                	test   eax,eax
c0019cf5:	75 0e                	jne    c0019d05 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019cf7:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019cfd:	88 1d 00 2e 02 c0    	mov    BYTE PTR ds:0xc0022e00,bl
c0019d03:	eb 18                	jmp    c0019d1d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019d05:	50                   	push   eax
c0019d06:	68 00 08 00 00       	push   0x800
c0019d0b:	6a 00                	push   0x0
c0019d0d:	57                   	push   edi
c0019d0e:	e8 dd 67 fe ff       	call   c00004f0 <memset>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	b8 01 00 00 00       	mov    eax,0x1
c0019d1b:	eb 0e                	jmp    c0019d2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019d1d:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019d22:	b9 00 08 00 00       	mov    ecx,0x800
c0019d27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d29:	31 c0                	xor    eax,eax
c0019d2b:	5b                   	pop    ebx
c0019d2c:	5e                   	pop    esi
c0019d2d:	5f                   	pop    edi
c0019d2e:	c3                   	ret    
c0019d2f:	90                   	nop

c0019d30 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019d30:	53                   	push   ebx
c0019d31:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019d37:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019d41:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019d48:	8d 58 41             	lea    ebx,[eax+0x41]
c0019d4b:	0f be db             	movsx  ebx,bl
c0019d4e:	53                   	push   ebx
c0019d4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d53:	50                   	push   eax
c0019d54:	6a 10                	push   0x10
c0019d56:	e8 56 ff ff ff       	call   c0019cb1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	31 d2                	xor    edx,edx
c0019d60:	85 c0                	test   eax,eax
c0019d62:	75 33                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d64:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019d69:	75 2c                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d6b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019d70:	75 25                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d72:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019d77:	75 1e                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d79:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019d7e:	75 17                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d80:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019d85:	75 10                	jne    c0019d97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d87:	83 ec 0c             	sub    esp,0xc
c0019d8a:	53                   	push   ebx
c0019d8b:	e8 b6 cc fe ff       	call   c0006a46 <init_percd>
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	40                   	inc    eax
c0019d94:	0f 95 c2             	setne  dl
c0019d97:	88 d0                	mov    al,dl
c0019d99:	81 c4 08 08 00 00    	add    esp,0x808
c0019d9f:	5b                   	pop    ebx
c0019da0:	c3                   	ret    
c0019da1:	90                   	nop

c0019da2 <ISO9660::ISO9660()>:
c0019da2:	83 ec 0c             	sub    esp,0xc
c0019da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da9:	83 ec 0c             	sub    esp,0xc
c0019dac:	50                   	push   eax
c0019dad:	e8 7e 11 ff ff       	call   c000af30 <Filesystem::Filesystem()>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c0019dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbe:	89 10                	mov    DWORD PTR [eax],edx
c0019dc0:	e8 93 cd fe ff       	call   c0006b58 <fs_iso9660_init>
c0019dc5:	90                   	nop
c0019dc6:	83 c4 0c             	add    esp,0xc
c0019dc9:	c3                   	ret    

c0019dca <SoundCard::beginPlayback()>:
c0019dca:	c7 44 24 04 48 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022048
c0019dd2:	e9 e2 6d ff ff       	jmp    c0010bb9 <KePanic(char const*)>
c0019dd7:	90                   	nop

c0019dd8 <SoundCard::stopPlayback()>:
c0019dd8:	c7 44 24 04 48 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022048
c0019de0:	e9 d4 6d ff ff       	jmp    c0010bb9 <KePanic(char const*)>
c0019de5:	90                   	nop

c0019de6 <SoundCard::SoundCard(char const*)>:
c0019de6:	83 ec 1c             	sub    esp,0x1c
c0019de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ded:	83 ec 08             	sub    esp,0x8
c0019df0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019df4:	50                   	push   eax
c0019df5:	e8 e0 23 ff ff       	call   c000c1da <Device::Device(char const*)>
c0019dfa:	83 c4 10             	add    esp,0x10
c0019dfd:	ba 94 20 02 c0       	mov    edx,0xc0022094
c0019e02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e06:	89 10                	mov    DWORD PTR [eax],edx
c0019e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e0c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e17:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e25:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e33:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019e3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e41:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019e4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e53:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019e58:	7f 1a                	jg     c0019e74 <SoundCard::SoundCard(char const*)+0x8e>
c0019e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e62:	83 c2 54             	add    edx,0x54
c0019e65:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019e6d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019e72:	eb df                	jmp    c0019e53 <SoundCard::SoundCard(char const*)+0x6d>
c0019e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e78:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e7f:	90                   	nop
c0019e80:	83 c4 1c             	add    esp,0x1c
c0019e83:	c3                   	ret    

c0019e84 <SoundCard::~SoundCard()>:
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	ba 94 20 02 c0       	mov    edx,0xc0022094
c0019e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e90:	89 10                	mov    DWORD PTR [eax],edx
c0019e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e96:	83 ec 0c             	sub    esp,0xc
c0019e99:	50                   	push   eax
c0019e9a:	e8 a5 20 ff ff       	call   c000bf44 <Device::~Device()>
c0019e9f:	83 c4 10             	add    esp,0x10
c0019ea2:	90                   	nop
c0019ea3:	83 c4 0c             	add    esp,0xc
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop

c0019ea8 <SoundCard::~SoundCard()>:
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	83 ec 0c             	sub    esp,0xc
c0019eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eb2:	e8 cd ff ff ff       	call   c0019e84 <SoundCard::~SoundCard()>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	83 ec 08             	sub    esp,0x8
c0019ebd:	68 e8 01 00 00       	push   0x1e8
c0019ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec6:	e8 41 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	83 c4 0c             	add    esp,0xc
c0019ed1:	c3                   	ret    

c0019ed2 <SoundCard::configureRates(int, int, int)>:
c0019ed2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ed6:	31 c0                	xor    eax,eax
c0019ed8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019edf:	75 20                	jne    c0019f01 <SoundCard::configureRates(int, int, int)+0x2f>
c0019ee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ee5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eef:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019eff:	b0 01                	mov    al,0x1
c0019f01:	c3                   	ret    

c0019f02 <SoundCard::getSamples16(int, short*)>:
c0019f02:	55                   	push   ebp
c0019f03:	57                   	push   edi
c0019f04:	31 ff                	xor    edi,edi
c0019f06:	56                   	push   esi
c0019f07:	53                   	push   ebx
c0019f08:	31 db                	xor    ebx,ebx
c0019f0a:	83 ec 10             	sub    esp,0x10
c0019f0d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f11:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f15:	8d 04 36             	lea    eax,[esi+esi*1]
c0019f18:	50                   	push   eax
c0019f19:	6a 00                	push   0x0
c0019f1b:	55                   	push   ebp
c0019f1c:	e8 cf 65 fe ff       	call   c00004f0 <memset>
c0019f21:	83 c4 10             	add    esp,0x10
c0019f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f28:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019f2f:	85 c0                	test   eax,eax
c0019f31:	74 1b                	je     c0019f4e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f33:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f37:	75 15                	jne    c0019f4e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f3d:	55                   	push   ebp
c0019f3e:	56                   	push   esi
c0019f3f:	50                   	push   eax
c0019f40:	e8 f3 02 00 00       	call   c001a238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019f45:	83 c4 10             	add    esp,0x10
c0019f48:	39 c7                	cmp    edi,eax
c0019f4a:	7d 02                	jge    c0019f4e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f4c:	89 c7                	mov    edi,eax
c0019f4e:	43                   	inc    ebx
c0019f4f:	83 fb 20             	cmp    ebx,0x20
c0019f52:	75 d0                	jne    c0019f24 <SoundCard::getSamples16(int, short*)+0x22>
c0019f54:	83 c4 0c             	add    esp,0xc
c0019f57:	89 f8                	mov    eax,edi
c0019f59:	5b                   	pop    ebx
c0019f5a:	5e                   	pop    esi
c0019f5b:	5f                   	pop    edi
c0019f5c:	5d                   	pop    ebp
c0019f5d:	c3                   	ret    

c0019f5e <SoundCard::getSamples32(int, int*)>:
c0019f5e:	55                   	push   ebp
c0019f5f:	57                   	push   edi
c0019f60:	31 ff                	xor    edi,edi
c0019f62:	56                   	push   esi
c0019f63:	31 f6                	xor    esi,esi
c0019f65:	53                   	push   ebx
c0019f66:	83 ec 10             	sub    esp,0x10
c0019f69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f6d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019f71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f75:	c1 e0 02             	shl    eax,0x2
c0019f78:	50                   	push   eax
c0019f79:	6a 00                	push   0x0
c0019f7b:	55                   	push   ebp
c0019f7c:	e8 6f 65 fe ff       	call   c00004f0 <memset>
c0019f81:	83 c4 10             	add    esp,0x10
c0019f84:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019f8b:	85 c0                	test   eax,eax
c0019f8d:	74 1b                	je     c0019faa <SoundCard::getSamples32(int, int*)+0x4c>
c0019f8f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f93:	75 15                	jne    c0019faa <SoundCard::getSamples32(int, int*)+0x4c>
c0019f95:	53                   	push   ebx
c0019f96:	55                   	push   ebp
c0019f97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f9b:	50                   	push   eax
c0019f9c:	e8 63 03 00 00       	call   c001a304 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	39 c6                	cmp    esi,eax
c0019fa6:	7d 02                	jge    c0019faa <SoundCard::getSamples32(int, int*)+0x4c>
c0019fa8:	89 c6                	mov    esi,eax
c0019faa:	47                   	inc    edi
c0019fab:	83 ff 20             	cmp    edi,0x20
c0019fae:	75 d4                	jne    c0019f84 <SoundCard::getSamples32(int, int*)+0x26>
c0019fb0:	85 f6                	test   esi,esi
c0019fb2:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019fb9:	75 0f                	jne    c0019fca <SoundCard::getSamples32(int, int*)+0x6c>
c0019fbb:	85 c0                	test   eax,eax
c0019fbd:	74 1b                	je     c0019fda <SoundCard::getSamples32(int, int*)+0x7c>
c0019fbf:	83 ec 0c             	sub    esp,0xc
c0019fc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc4:	53                   	push   ebx
c0019fc5:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019fc8:	eb 0d                	jmp    c0019fd7 <SoundCard::getSamples32(int, int*)+0x79>
c0019fca:	85 c0                	test   eax,eax
c0019fcc:	75 0c                	jne    c0019fda <SoundCard::getSamples32(int, int*)+0x7c>
c0019fce:	83 ec 0c             	sub    esp,0xc
c0019fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fd3:	53                   	push   ebx
c0019fd4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019fd7:	83 c4 10             	add    esp,0x10
c0019fda:	83 c4 0c             	add    esp,0xc
c0019fdd:	89 f0                	mov    eax,esi
c0019fdf:	5b                   	pop    ebx
c0019fe0:	5e                   	pop    esi
c0019fe1:	5f                   	pop    edi
c0019fe2:	5d                   	pop    ebp
c0019fe3:	c3                   	ret    

c0019fe4 <SoundCard::addChannel(SoundPort*)>:
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	31 c0                	xor    eax,eax
c0019fe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fed:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019ff5:	74 1b                	je     c001a012 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019ff7:	40                   	inc    eax
c0019ff8:	83 f8 20             	cmp    eax,0x20
c0019ffb:	75 f0                	jne    c0019fed <SoundCard::addChannel(SoundPort*)+0x9>
c0019ffd:	83 ec 0c             	sub    esp,0xc
c001a000:	68 6d 20 02 c0       	push   0xc002206d
c001a005:	e8 af 6b ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	83 c8 ff             	or     eax,0xffffffff
c001a010:	eb 0b                	jmp    c001a01d <SoundCard::addChannel(SoundPort*)+0x39>
c001a012:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a016:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a01d:	83 c4 0c             	add    esp,0xc
c001a020:	c3                   	ret    
c001a021:	90                   	nop

c001a022 <SoundCard::removeChannel(int)>:
c001a022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a02a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a035:	c3                   	ret    
c001a036:	66 90                	xchg   ax,ax

c001a038 <SoundPort::SoundPort(int, int, int, int)>:
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a056:	89 10                	mov    DWORD PTR [eax],edx
c001a058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a060:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a06b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a06e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a073:	75 13                	jne    c001a088 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a079:	8b 00                	mov    eax,DWORD PTR [eax]
c001a07b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a080:	01 c0                	add    eax,eax
c001a082:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a086:	66 90                	xchg   ax,ax
c001a088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a090:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a097:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a0a5:	c1 e0 02             	shl    eax,0x2
c001a0a8:	83 ec 0c             	sub    esp,0xc
c001a0ab:	50                   	push   eax
c001a0ac:	e8 fd d9 fe ff       	call   c0007aae <malloc>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	89 c2                	mov    edx,eax
c001a0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a0bd:	90                   	nop
c001a0be:	83 c4 0c             	add    esp,0xc
c001a0c1:	c3                   	ret    
c001a0c2:	66 90                	xchg   ax,ax

c001a0c4 <SoundPort::~SoundPort()>:
c001a0c4:	83 ec 0c             	sub    esp,0xc
c001a0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a0ce:	85 c0                	test   eax,eax
c001a0d0:	74 1e                	je     c001a0f0 <SoundPort::~SoundPort()+0x2c>
c001a0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a0d9:	83 ec 0c             	sub    esp,0xc
c001a0dc:	50                   	push   eax
c001a0dd:	e8 dc d9 fe ff       	call   c0007abe <free>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a0f0:	90                   	nop
c001a0f1:	83 c4 0c             	add    esp,0xc
c001a0f4:	c3                   	ret    
c001a0f5:	90                   	nop
c001a0f6:	66 90                	xchg   ax,ax

c001a0f8 <SoundPort::unpause()>:
c001a0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0fc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a100:	c3                   	ret    
c001a101:	90                   	nop
c001a102:	66 90                	xchg   ax,ax

c001a104 <SoundPort::pause()>:
c001a104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a108:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a10c:	c3                   	ret    
c001a10d:	90                   	nop
c001a10e:	66 90                	xchg   ax,ax

c001a110 <SoundPort::getBufferUsed()>:
c001a110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a114:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a117:	c3                   	ret    

c001a118 <SoundPort::getBufferSize()>:
c001a118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a11f:	c3                   	ret    

c001a120 <SoundPort::buffer16(short*, int)>:
c001a120:	55                   	push   ebp
c001a121:	57                   	push   edi
c001a122:	56                   	push   esi
c001a123:	53                   	push   ebx
c001a124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a128:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a12c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a12f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a132:	74 68                	je     c001a19c <SoundPort::buffer16(short*, int)+0x7c>
c001a134:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a138:	85 c9                	test   ecx,ecx
c001a13a:	7e 60                	jle    c001a19c <SoundPort::buffer16(short*, int)+0x7c>
c001a13c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a140:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a143:	c1 e1 0f             	shl    ecx,0xf
c001a146:	8d 70 01             	lea    esi,[eax+0x1]
c001a149:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a14c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a14f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a152:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a155:	74 4d                	je     c001a1a4 <SoundPort::buffer16(short*, int)+0x84>
c001a157:	31 f6                	xor    esi,esi
c001a159:	eb 21                	jmp    c001a17c <SoundPort::buffer16(short*, int)+0x5c>
c001a15b:	90                   	nop
c001a15c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a161:	8d 79 01             	lea    edi,[ecx+0x1]
c001a164:	c1 e3 0f             	shl    ebx,0xf
c001a167:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a16a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a16d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a170:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a173:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a176:	74 1c                	je     c001a194 <SoundPort::buffer16(short*, int)+0x74>
c001a178:	89 c6                	mov    esi,eax
c001a17a:	66 90                	xchg   ax,ax
c001a17c:	8d 46 01             	lea    eax,[esi+0x1]
c001a17f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a183:	75 d7                	jne    c001a15c <SoundPort::buffer16(short*, int)+0x3c>
c001a185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	5b                   	pop    ebx
c001a18d:	5e                   	pop    esi
c001a18e:	5f                   	pop    edi
c001a18f:	5d                   	pop    ebp
c001a190:	c3                   	ret    
c001a191:	8d 76 00             	lea    esi,[esi+0x0]
c001a194:	5b                   	pop    ebx
c001a195:	8d 46 02             	lea    eax,[esi+0x2]
c001a198:	5e                   	pop    esi
c001a199:	5f                   	pop    edi
c001a19a:	5d                   	pop    ebp
c001a19b:	c3                   	ret    
c001a19c:	5b                   	pop    ebx
c001a19d:	31 c0                	xor    eax,eax
c001a19f:	5e                   	pop    esi
c001a1a0:	5f                   	pop    edi
c001a1a1:	5d                   	pop    ebp
c001a1a2:	c3                   	ret    
c001a1a3:	90                   	nop
c001a1a4:	b8 01 00 00 00       	mov    eax,0x1
c001a1a9:	eb e1                	jmp    c001a18c <SoundPort::buffer16(short*, int)+0x6c>
c001a1ab:	90                   	nop

c001a1ac <SoundPort::buffer32(int*, int)>:
c001a1ac:	55                   	push   ebp
c001a1ad:	57                   	push   edi
c001a1ae:	56                   	push   esi
c001a1af:	53                   	push   ebx
c001a1b0:	83 ec 04             	sub    esp,0x4
c001a1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1bb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1be:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a1c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1c5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1c8:	74 5a                	je     c001a224 <SoundPort::buffer32(int*, int)+0x78>
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	7e 56                	jle    c001a224 <SoundPort::buffer32(int*, int)+0x78>
c001a1ce:	8d 71 01             	lea    esi,[ecx+0x1]
c001a1d1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a1d4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a1d7:	8b 37                	mov    esi,DWORD PTR [edi]
c001a1d9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a1dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1df:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1e2:	74 4c                	je     c001a230 <SoundPort::buffer32(int*, int)+0x84>
c001a1e4:	31 f6                	xor    esi,esi
c001a1e6:	eb 1c                	jmp    c001a204 <SoundPort::buffer32(int*, int)+0x58>
c001a1e8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a1eb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a1ee:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a1f1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a1f4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a1f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1fe:	74 18                	je     c001a218 <SoundPort::buffer32(int*, int)+0x6c>
c001a200:	89 de                	mov    esi,ebx
c001a202:	66 90                	xchg   ax,ax
c001a204:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a207:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a20a:	75 dc                	jne    c001a1e8 <SoundPort::buffer32(int*, int)+0x3c>
c001a20c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a20f:	90                   	nop
c001a210:	83 c4 04             	add    esp,0x4
c001a213:	5b                   	pop    ebx
c001a214:	5e                   	pop    esi
c001a215:	5f                   	pop    edi
c001a216:	5d                   	pop    ebp
c001a217:	c3                   	ret    
c001a218:	83 c4 04             	add    esp,0x4
c001a21b:	8d 46 02             	lea    eax,[esi+0x2]
c001a21e:	5b                   	pop    ebx
c001a21f:	5e                   	pop    esi
c001a220:	5f                   	pop    edi
c001a221:	5d                   	pop    ebp
c001a222:	c3                   	ret    
c001a223:	90                   	nop
c001a224:	83 c4 04             	add    esp,0x4
c001a227:	31 c0                	xor    eax,eax
c001a229:	5b                   	pop    ebx
c001a22a:	5e                   	pop    esi
c001a22b:	5f                   	pop    edi
c001a22c:	5d                   	pop    ebp
c001a22d:	c3                   	ret    
c001a22e:	66 90                	xchg   ax,ax
c001a230:	b8 01 00 00 00       	mov    eax,0x1
c001a235:	eb d9                	jmp    c001a210 <SoundPort::buffer32(int*, int)+0x64>
c001a237:	90                   	nop

c001a238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a238:	57                   	push   edi
c001a239:	56                   	push   esi
c001a23a:	53                   	push   ebx
c001a23b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a23f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a243:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a249:	39 03                	cmp    DWORD PTR [ebx],eax
c001a24b:	74 13                	je     c001a260 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a24d:	83 ec 0c             	sub    esp,0xc
c001a250:	68 c0 20 02 c0       	push   0xc00220c0
c001a255:	e8 5f 69 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	8d 76 00             	lea    esi,[esi+0x0]
c001a260:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001a266:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a269:	74 11                	je     c001a27c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001a26b:	83 ec 0c             	sub    esp,0xc
c001a26e:	68 ff 20 02 c0       	push   0xc00220ff
c001a273:	e8 41 69 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	90                   	nop
c001a27c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001a282:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a285:	74 11                	je     c001a298 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001a287:	83 ec 0c             	sub    esp,0xc
c001a28a:	68 ff 20 02 c0       	push   0xc00220ff
c001a28f:	e8 25 69 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	90                   	nop
c001a298:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a29b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001a29f:	7e 07                	jle    c001a2a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001a2a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a8:	85 f6                	test   esi,esi
c001a2aa:	7e 2c                	jle    c001a2d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2b0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001a2b3:	31 c9                	xor    ecx,ecx
c001a2b5:	01 d7                	add    edi,edx
c001a2b7:	90                   	nop
c001a2b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001a2bb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001a2be:	85 c0                	test   eax,eax
c001a2c0:	79 06                	jns    c001a2c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001a2c2:	05 ff 7f 00 00       	add    eax,0x7fff
c001a2c7:	90                   	nop
c001a2c8:	c1 f8 0f             	sar    eax,0xf
c001a2cb:	83 c1 04             	add    ecx,0x4
c001a2ce:	66 01 02             	add    WORD PTR [edx],ax
c001a2d1:	83 c2 02             	add    edx,0x2
c001a2d4:	39 d7                	cmp    edi,edx
c001a2d6:	75 e0                	jne    c001a2b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001a2d8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a2db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2de:	83 ec 04             	sub    esp,0x4
c001a2e1:	29 f0                	sub    eax,esi
c001a2e3:	c1 e0 02             	shl    eax,0x2
c001a2e6:	50                   	push   eax
c001a2e7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a2ea:	50                   	push   eax
c001a2eb:	52                   	push   edx
c001a2ec:	e8 df 60 fe ff       	call   c00003d0 <memmove>
c001a2f1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	29 f0                	sub    eax,esi
c001a2f9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a2fc:	89 f0                	mov    eax,esi
c001a2fe:	5b                   	pop    ebx
c001a2ff:	5e                   	pop    esi
c001a300:	5f                   	pop    edi
c001a301:	c3                   	ret    
c001a302:	66 90                	xchg   ax,ax

c001a304 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a304:	57                   	push   edi
c001a305:	56                   	push   esi
c001a306:	53                   	push   ebx
c001a307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a30b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a30f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a313:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a319:	39 06                	cmp    DWORD PTR [esi],eax
c001a31b:	74 13                	je     c001a330 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a31d:	83 ec 0c             	sub    esp,0xc
c001a320:	68 e0 20 02 c0       	push   0xc00220e0
c001a325:	e8 8f 68 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	8d 76 00             	lea    esi,[esi+0x0]
c001a330:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a336:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a339:	74 11                	je     c001a34c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a33b:	83 ec 0c             	sub    esp,0xc
c001a33e:	68 1b 21 02 c0       	push   0xc002211b
c001a343:	e8 71 68 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	90                   	nop
c001a34c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a352:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a355:	74 11                	je     c001a368 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a357:	83 ec 0c             	sub    esp,0xc
c001a35a:	68 1b 21 02 c0       	push   0xc002211b
c001a35f:	e8 55 68 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	90                   	nop
c001a368:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a36b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a36f:	7e 07                	jle    c001a378 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a371:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a375:	8d 76 00             	lea    esi,[esi+0x0]
c001a378:	85 ff                	test   edi,edi
c001a37a:	7e 1c                	jle    c001a398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a37c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a383:	31 c0                	xor    eax,eax
c001a385:	8d 76 00             	lea    esi,[esi+0x0]
c001a388:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a38b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a38e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a391:	83 c0 04             	add    eax,0x4
c001a394:	39 c1                	cmp    ecx,eax
c001a396:	75 f0                	jne    c001a388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a398:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a39b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a39e:	83 ec 04             	sub    esp,0x4
c001a3a1:	29 f8                	sub    eax,edi
c001a3a3:	c1 e0 02             	shl    eax,0x2
c001a3a6:	50                   	push   eax
c001a3a7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a3aa:	50                   	push   eax
c001a3ab:	52                   	push   edx
c001a3ac:	e8 1f 60 fe ff       	call   c00003d0 <memmove>
c001a3b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	29 f8                	sub    eax,edi
c001a3b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a3bc:	89 f8                	mov    eax,edi
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	5f                   	pop    edi
c001a3c1:	c3                   	ret    

c001a3c2 <PCI::open(int, int, void*)>:
c001a3c2:	83 ec 18             	sub    esp,0x18
c001a3c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a3d3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3d5:	50                   	push   eax
c001a3d6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a3d9:	31 c0                	xor    eax,eax
c001a3db:	83 c4 1c             	add    esp,0x1c
c001a3de:	c3                   	ret    
c001a3df:	90                   	nop

c001a3e0 <PCI::close(int, int, void*)>:
c001a3e0:	31 c0                	xor    eax,eax
c001a3e2:	c3                   	ret    
c001a3e3:	90                   	nop

c001a3e4 <PCI::PCI()>:
c001a3e4:	83 ec 0c             	sub    esp,0xc
c001a3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3eb:	83 ec 08             	sub    esp,0x8
c001a3ee:	68 37 21 02 c0       	push   0xc0022137
c001a3f3:	50                   	push   eax
c001a3f4:	e8 ab 15 ff ff       	call   c000b9a4 <Bus::Bus(char const*)>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c001a401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a405:	89 10                	mov    DWORD PTR [eax],edx
c001a407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a419:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a422:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a428:	0f b6 d0             	movzx  edx,al
c001a42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a440:	0f b6 d0             	movzx  edx,al
c001a443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a447:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a450:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a456:	8d 50 01             	lea    edx,[eax+0x1]
c001a459:	88 d1                	mov    cl,dl
c001a45b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a45f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a465:	0f b6 d0             	movzx  edx,al
c001a468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a470:	83 c9 c0             	or     ecx,0xffffffc0
c001a473:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a477:	90                   	nop
c001a478:	83 c4 0c             	add    esp,0xc
c001a47b:	c3                   	ret    

c001a47c <PCI::readBAR8(unsigned int, int)>:
c001a47c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a484:	f6 c2 01             	test   dl,0x1
c001a487:	74 07                	je     c001a490 <PCI::readBAR8(unsigned int, int)+0x14>
c001a489:	83 e2 fc             	and    edx,0xfffffffc
c001a48c:	01 c2                	add    edx,eax
c001a48e:	ec                   	in     al,dx
c001a48f:	c3                   	ret    
c001a490:	83 e2 f0             	and    edx,0xfffffff0
c001a493:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a496:	c3                   	ret    
c001a497:	90                   	nop

c001a498 <PCI::readBAR16(unsigned int, int)>:
c001a498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a49c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4a0:	f6 c2 01             	test   dl,0x1
c001a4a3:	74 08                	je     c001a4ad <PCI::readBAR16(unsigned int, int)+0x15>
c001a4a5:	83 e2 fc             	and    edx,0xfffffffc
c001a4a8:	01 c2                	add    edx,eax
c001a4aa:	66 ed                	in     ax,dx
c001a4ac:	c3                   	ret    
c001a4ad:	83 e2 f0             	and    edx,0xfffffff0
c001a4b0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a4b4:	c3                   	ret    
c001a4b5:	90                   	nop

c001a4b6 <PCI::readBAR32(unsigned int, int)>:
c001a4b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4be:	f6 c2 01             	test   dl,0x1
c001a4c1:	74 07                	je     c001a4ca <PCI::readBAR32(unsigned int, int)+0x14>
c001a4c3:	83 e2 fc             	and    edx,0xfffffffc
c001a4c6:	01 c2                	add    edx,eax
c001a4c8:	ed                   	in     eax,dx
c001a4c9:	c3                   	ret    
c001a4ca:	83 e2 f0             	and    edx,0xfffffff0
c001a4cd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a4d0:	c3                   	ret    
c001a4d1:	90                   	nop

c001a4d2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a4d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4de:	f6 c2 01             	test   dl,0x1
c001a4e1:	74 07                	je     c001a4ea <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a4e3:	83 e2 fc             	and    edx,0xfffffffc
c001a4e6:	01 ca                	add    edx,ecx
c001a4e8:	ee                   	out    dx,al
c001a4e9:	c3                   	ret    
c001a4ea:	83 e2 f0             	and    edx,0xfffffff0
c001a4ed:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a4f0:	c3                   	ret    
c001a4f1:	90                   	nop

c001a4f2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a4f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4fe:	f6 c2 01             	test   dl,0x1
c001a501:	74 08                	je     c001a50b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a503:	83 e2 fc             	and    edx,0xfffffffc
c001a506:	01 ca                	add    edx,ecx
c001a508:	66 ef                	out    dx,ax
c001a50a:	c3                   	ret    
c001a50b:	83 e2 f0             	and    edx,0xfffffff0
c001a50e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a512:	c3                   	ret    
c001a513:	90                   	nop

c001a514 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a51c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a520:	f6 c2 01             	test   dl,0x1
c001a523:	74 07                	je     c001a52c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a525:	83 e2 fc             	and    edx,0xfffffffc
c001a528:	01 ca                	add    edx,ecx
c001a52a:	ef                   	out    dx,eax
c001a52b:	c3                   	ret    
c001a52c:	83 e2 f0             	and    edx,0xfffffff0
c001a52f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a532:	c3                   	ret    
c001a533:	90                   	nop

c001a534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a534:	55                   	push   ebp
c001a535:	57                   	push   edi
c001a536:	56                   	push   esi
c001a537:	53                   	push   ebx
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a540:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a544:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a548:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a54c:	83 fe 07             	cmp    esi,0x7
c001a54f:	76 10                	jbe    c001a561 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a551:	83 ec 0c             	sub    esp,0xc
c001a554:	68 3f 21 02 c0       	push   0xc002213f
c001a559:	e8 5b 66 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	0f b6 db             	movzx  ebx,bl
c001a564:	83 fb 0f             	cmp    ebx,0xf
c001a567:	76 10                	jbe    c001a579 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	68 6f 21 02 c0       	push   0xc002216f
c001a571:	e8 43 66 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a576:	83 c4 10             	add    esp,0x10
c001a579:	8d 04 36             	lea    eax,[esi+esi*1]
c001a57c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a581:	83 c8 f0             	or     eax,0xfffffff0
c001a584:	ee                   	out    dx,al
c001a585:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a58a:	89 e8                	mov    eax,ebp
c001a58c:	ee                   	out    dx,al
c001a58d:	83 c4 0c             	add    esp,0xc
c001a590:	89 d8                	mov    eax,ebx
c001a592:	89 f9                	mov    ecx,edi
c001a594:	c1 e0 08             	shl    eax,0x8
c001a597:	0f b6 d9             	movzx  ebx,cl
c001a59a:	83 e3 fc             	and    ebx,0xfffffffc
c001a59d:	09 d8                	or     eax,ebx
c001a59f:	5b                   	pop    ebx
c001a5a0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a5a5:	5e                   	pop    esi
c001a5a6:	5f                   	pop    edi
c001a5a7:	5d                   	pop    ebp
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop

c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a5aa:	57                   	push   edi
c001a5ab:	56                   	push   esi
c001a5ac:	53                   	push   ebx
c001a5ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a5bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a5bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a5c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5c7:	83 ff 01             	cmp    edi,0x1
c001a5ca:	75 3f                	jne    c001a60b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a5cc:	89 de                	mov    esi,ebx
c001a5ce:	0f b6 c0             	movzx  eax,al
c001a5d1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a5d7:	c1 e0 10             	shl    eax,0x10
c001a5da:	0f b6 c9             	movzx  ecx,cl
c001a5dd:	09 f0                	or     eax,esi
c001a5df:	c1 e1 08             	shl    ecx,0x8
c001a5e2:	0f b6 d2             	movzx  edx,dl
c001a5e5:	09 c8                	or     eax,ecx
c001a5e7:	c1 e2 0b             	shl    edx,0xb
c001a5ea:	09 d0                	or     eax,edx
c001a5ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a5f1:	0d 00 00 00 80       	or     eax,0x80000000
c001a5f6:	ef                   	out    dx,eax
c001a5f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a5fc:	ed                   	in     eax,dx
c001a5fd:	83 e3 02             	and    ebx,0x2
c001a600:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a607:	d3 e8                	shr    eax,cl
c001a609:	eb 44                	jmp    c001a64f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a60b:	83 ff 02             	cmp    edi,0x2
c001a60e:	75 2d                	jne    c001a63d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a610:	83 ec 0c             	sub    esp,0xc
c001a613:	0f b6 c9             	movzx  ecx,cl
c001a616:	0f b6 d2             	movzx  edx,dl
c001a619:	0f b6 fb             	movzx  edi,bl
c001a61c:	0f b6 c0             	movzx  eax,al
c001a61f:	57                   	push   edi
c001a620:	51                   	push   ecx
c001a621:	52                   	push   edx
c001a622:	50                   	push   eax
c001a623:	56                   	push   esi
c001a624:	e8 0b ff ff ff       	call   c001a534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a629:	89 c2                	mov    edx,eax
c001a62b:	ed                   	in     eax,dx
c001a62c:	83 e3 02             	and    ebx,0x2
c001a62f:	83 c4 20             	add    esp,0x20
c001a632:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a639:	d3 e8                	shr    eax,cl
c001a63b:	eb 12                	jmp    c001a64f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a63d:	83 ec 0c             	sub    esp,0xc
c001a640:	68 9f 21 02 c0       	push   0xc002219f
c001a645:	e8 6f 65 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001a64a:	83 c4 10             	add    esp,0x10
c001a64d:	31 c0                	xor    eax,eax
c001a64f:	5b                   	pop    ebx
c001a650:	5e                   	pop    esi
c001a651:	5f                   	pop    edi
c001a652:	c3                   	ret    
c001a653:	90                   	nop

c001a654 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a654:	83 ec 18             	sub    esp,0x18
c001a657:	6a 00                	push   0x0
c001a659:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a65e:	50                   	push   eax
c001a65f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a664:	50                   	push   eax
c001a665:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a66a:	50                   	push   eax
c001a66b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a66f:	e8 36 ff ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a674:	83 c4 2c             	add    esp,0x2c
c001a677:	c3                   	ret    

c001a678 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a678:	83 ec 18             	sub    esp,0x18
c001a67b:	6a 0e                	push   0xe
c001a67d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a682:	50                   	push   eax
c001a683:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a688:	50                   	push   eax
c001a689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a68e:	50                   	push   eax
c001a68f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a693:	e8 12 ff ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a698:	83 c4 2c             	add    esp,0x2c
c001a69b:	0f b6 c0             	movzx  eax,al
c001a69e:	c3                   	ret    
c001a69f:	90                   	nop

c001a6a0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a6a0:	55                   	push   ebp
c001a6a1:	57                   	push   edi
c001a6a2:	56                   	push   esi
c001a6a3:	53                   	push   ebx
c001a6a4:	83 ec 18             	sub    esp,0x18
c001a6a7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a6ac:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a6b1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a6b6:	6a 0a                	push   0xa
c001a6b8:	56                   	push   esi
c001a6b9:	55                   	push   ebp
c001a6ba:	57                   	push   edi
c001a6bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6bf:	e8 e6 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6c4:	83 c4 14             	add    esp,0x14
c001a6c7:	89 c3                	mov    ebx,eax
c001a6c9:	6a 0a                	push   0xa
c001a6cb:	0f b6 db             	movzx  ebx,bl
c001a6ce:	56                   	push   esi
c001a6cf:	55                   	push   ebp
c001a6d0:	57                   	push   edi
c001a6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6d5:	e8 d0 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6da:	83 c4 2c             	add    esp,0x2c
c001a6dd:	25 00 ff 00 00       	and    eax,0xff00
c001a6e2:	09 d8                	or     eax,ebx
c001a6e4:	5b                   	pop    ebx
c001a6e5:	5e                   	pop    esi
c001a6e6:	5f                   	pop    edi
c001a6e7:	5d                   	pop    ebp
c001a6e8:	c3                   	ret    
c001a6e9:	90                   	nop

c001a6ea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a6ea:	83 ec 18             	sub    esp,0x18
c001a6ed:	6a 08                	push   0x8
c001a6ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6f4:	50                   	push   eax
c001a6f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6fa:	50                   	push   eax
c001a6fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a700:	50                   	push   eax
c001a701:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a705:	e8 a0 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a70a:	83 c4 2c             	add    esp,0x2c
c001a70d:	0f b6 c4             	movzx  eax,ah
c001a710:	c3                   	ret    
c001a711:	90                   	nop

c001a712 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a712:	83 ec 18             	sub    esp,0x18
c001a715:	6a 08                	push   0x8
c001a717:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a71c:	50                   	push   eax
c001a71d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a722:	50                   	push   eax
c001a723:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a728:	50                   	push   eax
c001a729:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a72d:	e8 78 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a732:	83 c4 2c             	add    esp,0x2c
c001a735:	c3                   	ret    

c001a736 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a736:	83 ec 18             	sub    esp,0x18
c001a739:	6a 3c                	push   0x3c
c001a73b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a740:	50                   	push   eax
c001a741:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a746:	50                   	push   eax
c001a747:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a74c:	50                   	push   eax
c001a74d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a751:	e8 54 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a756:	83 c4 2c             	add    esp,0x2c
c001a759:	c3                   	ret    

c001a75a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a75a:	83 ec 18             	sub    esp,0x18
c001a75d:	6a 18                	push   0x18
c001a75f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a764:	50                   	push   eax
c001a765:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a76a:	50                   	push   eax
c001a76b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a770:	50                   	push   eax
c001a771:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a775:	e8 30 fe ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a77a:	83 c4 2c             	add    esp,0x2c
c001a77d:	0f b6 c4             	movzx  eax,ah
c001a780:	c3                   	ret    
c001a781:	90                   	nop

c001a782 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a782:	55                   	push   ebp
c001a783:	57                   	push   edi
c001a784:	56                   	push   esi
c001a785:	53                   	push   ebx
c001a786:	83 ec 28             	sub    esp,0x28
c001a789:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a78d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a792:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a797:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a79c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a7a3:	8d 43 12             	lea    eax,[ebx+0x12]
c001a7a6:	83 c3 10             	add    ebx,0x10
c001a7a9:	0f b6 c0             	movzx  eax,al
c001a7ac:	0f b6 db             	movzx  ebx,bl
c001a7af:	50                   	push   eax
c001a7b0:	51                   	push   ecx
c001a7b1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a7b5:	57                   	push   edi
c001a7b6:	55                   	push   ebp
c001a7b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7bb:	e8 ea fd ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7c0:	83 c4 14             	add    esp,0x14
c001a7c3:	89 c6                	mov    esi,eax
c001a7c5:	53                   	push   ebx
c001a7c6:	c1 e6 10             	shl    esi,0x10
c001a7c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7cd:	51                   	push   ecx
c001a7ce:	57                   	push   edi
c001a7cf:	55                   	push   ebp
c001a7d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7d4:	e8 d1 fd ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7d9:	83 c4 3c             	add    esp,0x3c
c001a7dc:	0f b7 c0             	movzx  eax,ax
c001a7df:	5b                   	pop    ebx
c001a7e0:	09 f0                	or     eax,esi
c001a7e2:	5e                   	pop    esi
c001a7e3:	5f                   	pop    edi
c001a7e4:	5d                   	pop    ebp
c001a7e5:	c3                   	ret    

c001a7e6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a7e6:	55                   	push   ebp
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a7f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a7f5:	89 f5                	mov    ebp,esi
c001a7f7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a7fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a801:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a805:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a809:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a80d:	83 f9 01             	cmp    ecx,0x1
c001a810:	75 5d                	jne    c001a86f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a812:	0f b6 c8             	movzx  ecx,al
c001a815:	0f b6 d2             	movzx  edx,dl
c001a818:	c1 e1 10             	shl    ecx,0x10
c001a81b:	c1 e2 0b             	shl    edx,0xb
c001a81e:	89 f0                	mov    eax,esi
c001a820:	25 fc 00 00 00       	and    eax,0xfc
c001a825:	09 c1                	or     ecx,eax
c001a827:	89 e8                	mov    eax,ebp
c001a829:	0f b6 c0             	movzx  eax,al
c001a82c:	c1 e0 08             	shl    eax,0x8
c001a82f:	09 c1                	or     ecx,eax
c001a831:	09 d1                	or     ecx,edx
c001a833:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a838:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a83e:	89 c8                	mov    eax,ecx
c001a840:	ef                   	out    dx,eax
c001a841:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a846:	ed                   	in     eax,dx
c001a847:	0f b7 db             	movzx  ebx,bx
c001a84a:	83 e6 02             	and    esi,0x2
c001a84d:	74 0a                	je     c001a859 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a84f:	0f b7 d0             	movzx  edx,ax
c001a852:	c1 e3 10             	shl    ebx,0x10
c001a855:	09 d3                	or     ebx,edx
c001a857:	eb 05                	jmp    c001a85e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a859:	66 31 c0             	xor    ax,ax
c001a85c:	09 c3                	or     ebx,eax
c001a85e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a863:	89 c8                	mov    eax,ecx
c001a865:	ef                   	out    dx,eax
c001a866:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a86b:	89 d8                	mov    eax,ebx
c001a86d:	eb 41                	jmp    c001a8b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a86f:	83 f9 02             	cmp    ecx,0x2
c001a872:	75 45                	jne    c001a8b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	0f b6 d2             	movzx  edx,dl
c001a87a:	89 f1                	mov    ecx,esi
c001a87c:	0f b6 c0             	movzx  eax,al
c001a87f:	0f b6 f1             	movzx  esi,cl
c001a882:	89 e9                	mov    ecx,ebp
c001a884:	56                   	push   esi
c001a885:	0f b6 c9             	movzx  ecx,cl
c001a888:	51                   	push   ecx
c001a889:	52                   	push   edx
c001a88a:	50                   	push   eax
c001a88b:	57                   	push   edi
c001a88c:	e8 a3 fc ff ff       	call   c001a534 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a891:	89 c2                	mov    edx,eax
c001a893:	ed                   	in     eax,dx
c001a894:	83 c4 20             	add    esp,0x20
c001a897:	0f b7 db             	movzx  ebx,bx
c001a89a:	f6 c2 02             	test   dl,0x2
c001a89d:	74 0c                	je     c001a8ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a89f:	0f b7 c8             	movzx  ecx,ax
c001a8a2:	89 d8                	mov    eax,ebx
c001a8a4:	c1 e0 10             	shl    eax,0x10
c001a8a7:	09 c8                	or     eax,ecx
c001a8a9:	eb 05                	jmp    c001a8b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a8ab:	66 31 c0             	xor    ax,ax
c001a8ae:	09 d8                	or     eax,ebx
c001a8b0:	ef                   	out    dx,eax
c001a8b1:	83 c4 0c             	add    esp,0xc
c001a8b4:	5b                   	pop    ebx
c001a8b5:	5e                   	pop    esi
c001a8b6:	5f                   	pop    edi
c001a8b7:	5d                   	pop    ebp
c001a8b8:	c3                   	ret    
c001a8b9:	c7 44 24 20 9f 21 02 c0 	mov    DWORD PTR [esp+0x20],0xc002219f
c001a8c1:	83 c4 0c             	add    esp,0xc
c001a8c4:	5b                   	pop    ebx
c001a8c5:	5e                   	pop    esi
c001a8c6:	5f                   	pop    edi
c001a8c7:	5d                   	pop    ebp
c001a8c8:	e9 ec 62 ff ff       	jmp    c0010bb9 <KePanic(char const*)>
c001a8cd:	90                   	nop

c001a8ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a8ce:	55                   	push   ebp
c001a8cf:	57                   	push   edi
c001a8d0:	56                   	push   esi
c001a8d1:	53                   	push   ebx
c001a8d2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a8d8:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a8df:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a8e6:	0f 85 bd 00 00 00    	jne    c001a9a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	68 14 01 00 00       	push   0x114
c001a8f4:	e8 b5 d1 fe ff       	call   c0007aae <malloc>
c001a8f9:	83 c4 0c             	add    esp,0xc
c001a8fc:	89 c3                	mov    ebx,eax
c001a8fe:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a904:	68 a5 21 02 c0       	push   0xc00221a5
c001a909:	50                   	push   eax
c001a90a:	e8 81 08 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001a90f:	83 c4 10             	add    esp,0x10
c001a912:	85 db                	test   ebx,ebx
c001a914:	0f 84 67 02 00 00    	je     c001ab81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a91a:	56                   	push   esi
c001a91b:	56                   	push   esi
c001a91c:	6a 01                	push   0x1
c001a91e:	53                   	push   ebx
c001a91f:	e8 28 09 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	85 c0                	test   eax,eax
c001a929:	0f 85 52 02 00 00    	jne    c001ab81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a92f:	52                   	push   edx
c001a930:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a934:	50                   	push   eax
c001a935:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a939:	50                   	push   eax
c001a93a:	53                   	push   ebx
c001a93b:	e8 b8 0b ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c001a940:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a944:	40                   	inc    eax
c001a945:	89 04 24             	mov    DWORD PTR [esp],eax
c001a948:	e8 61 d1 fe ff       	call   c0007aae <malloc>
c001a94d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a951:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a956:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a95a:	59                   	pop    ecx
c001a95b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a95d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a961:	51                   	push   ecx
c001a962:	50                   	push   eax
c001a963:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a967:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a96b:	53                   	push   ebx
c001a96c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a96f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a973:	83 c4 20             	add    esp,0x20
c001a976:	89 c8                	mov    eax,ecx
c001a978:	99                   	cdq    
c001a979:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a97d:	0f 85 fe 01 00 00    	jne    c001ab81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a983:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a987:	0f 85 f4 01 00 00    	jne    c001ab81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a98d:	83 ec 0c             	sub    esp,0xc
c001a990:	53                   	push   ebx
c001a991:	e8 14 09 ff ff       	call   c000b2aa <File::close()>
c001a996:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a99a:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a9a1:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a9ae:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a9b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9b8:	31 f6                	xor    esi,esi
c001a9ba:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a9c2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a9c9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a9ce:	31 c9                	xor    ecx,ecx
c001a9d0:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a9d8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a9dd:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a9e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9e9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a9f1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a9f5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a9f9:	0f 8e 82 01 00 00    	jle    c001ab81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a9ff:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001aa02:	d4 40                	aam    0x40
c001aa04:	d5 39                	aad    0x39
c001aa06:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa0a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001aa0e:	d4 40                	aam    0x40
c001aa10:	d5 39                	aad    0x39
c001aa12:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001aa16:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001aa1a:	d4 40                	aam    0x40
c001aa1c:	d5 39                	aad    0x39
c001aa1e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa22:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001aa26:	d4 40                	aam    0x40
c001aa28:	d5 39                	aad    0x39
c001aa2a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa2e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001aa32:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001aa36:	3c 56                	cmp    al,0x56
c001aa38:	74 43                	je     c001aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001aa3a:	d4 40                	aam    0x40
c001aa3c:	d5 39                	aad    0x39
c001aa3e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001aa41:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001aa45:	0f b6 c9             	movzx  ecx,cl
c001aa48:	c1 e1 04             	shl    ecx,0x4
c001aa4b:	d4 40                	aam    0x40
c001aa4d:	d5 39                	aad    0x39
c001aa4f:	83 e8 30             	sub    eax,0x30
c001aa52:	0f b6 c0             	movzx  eax,al
c001aa55:	09 c1                	or     ecx,eax
c001aa57:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001aa5b:	c1 e1 04             	shl    ecx,0x4
c001aa5e:	d4 40                	aam    0x40
c001aa60:	d5 39                	aad    0x39
c001aa62:	83 e8 30             	sub    eax,0x30
c001aa65:	0f b6 c0             	movzx  eax,al
c001aa68:	09 c1                	or     ecx,eax
c001aa6a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001aa6e:	c1 e1 04             	shl    ecx,0x4
c001aa71:	d4 40                	aam    0x40
c001aa73:	d5 39                	aad    0x39
c001aa75:	83 e8 30             	sub    eax,0x30
c001aa78:	0f b6 c0             	movzx  eax,al
c001aa7b:	09 c1                	or     ecx,eax
c001aa7d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001aa81:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001aa85:	3c 58                	cmp    al,0x58
c001aa87:	74 47                	je     c001aad0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001aa89:	d4 40                	aam    0x40
c001aa8b:	d5 39                	aad    0x39
c001aa8d:	8d 50 d0             	lea    edx,[eax-0x30]
c001aa90:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001aa94:	0f b6 d2             	movzx  edx,dl
c001aa97:	c1 e2 04             	shl    edx,0x4
c001aa9a:	d4 40                	aam    0x40
c001aa9c:	d5 39                	aad    0x39
c001aa9e:	83 e8 30             	sub    eax,0x30
c001aaa1:	0f b6 c0             	movzx  eax,al
c001aaa4:	09 c2                	or     edx,eax
c001aaa6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001aaaa:	c1 e2 04             	shl    edx,0x4
c001aaad:	d4 40                	aam    0x40
c001aaaf:	d5 39                	aad    0x39
c001aab1:	83 e8 30             	sub    eax,0x30
c001aab4:	0f b6 c0             	movzx  eax,al
c001aab7:	09 c2                	or     edx,eax
c001aab9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001aabd:	c1 e2 04             	shl    edx,0x4
c001aac0:	d4 40                	aam    0x40
c001aac2:	d5 39                	aad    0x39
c001aac4:	83 e8 30             	sub    eax,0x30
c001aac7:	0f b6 c0             	movzx  eax,al
c001aaca:	09 c2                	or     edx,eax
c001aacc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aad0:	83 c6 10             	add    esi,0x10
c001aad3:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001aad7:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001aadb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aadf:	83 fa 0a             	cmp    edx,0xa
c001aae2:	74 0b                	je     c001aaef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001aae4:	47                   	inc    edi
c001aae5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001aae9:	75 19                	jne    c001ab04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001aaeb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001aaef:	31 c0                	xor    eax,eax
c001aaf1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001aaf6:	0f 94 c0             	sete   al
c001aaf9:	01 c6                	add    esi,eax
c001aafb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ab00:	75 0b                	jne    c001ab0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001ab02:	eb 14                	jmp    c001ab18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001ab04:	46                   	inc    esi
c001ab05:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001ab08:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ab0b:	eb ca                	jmp    c001aad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001ab0d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001ab12:	0f 85 dd fe ff ff    	jne    c001a9f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab18:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001ab1d:	74 10                	je     c001ab2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001ab1f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ab24:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ab29:	0f 85 c6 fe ff ff    	jne    c001a9f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab37:	83 e8 30             	sub    eax,0x30
c001ab3a:	83 ef 30             	sub    edi,0x30
c001ab3d:	c1 e0 04             	shl    eax,0x4
c001ab40:	09 f8                	or     eax,edi
c001ab42:	0f b6 c0             	movzx  eax,al
c001ab45:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ab49:	0f 85 a6 fe ff ff    	jne    c001a9f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab53:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ab57:	83 e8 30             	sub    eax,0x30
c001ab5a:	83 ef 30             	sub    edi,0x30
c001ab5d:	c1 e0 04             	shl    eax,0x4
c001ab60:	09 f8                	or     eax,edi
c001ab62:	0f b6 c0             	movzx  eax,al
c001ab65:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ab69:	0f 85 86 fe ff ff    	jne    c001a9f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab6f:	50                   	push   eax
c001ab70:	50                   	push   eax
c001ab71:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ab75:	50                   	push   eax
c001ab76:	55                   	push   ebp
c001ab77:	e8 c4 5a fe ff       	call   c0000640 <strcpy>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	eb 06                	jmp    c001ab87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ab81:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ab85:	31 ed                	xor    ebp,ebp
c001ab87:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ab8d:	89 e8                	mov    eax,ebp
c001ab8f:	5b                   	pop    ebx
c001ab90:	5e                   	pop    esi
c001ab91:	5f                   	pop    edi
c001ab92:	5d                   	pop    ebp
c001ab93:	c3                   	ret    

c001ab94 <PCI::checkBus(unsigned char)>:
c001ab94:	56                   	push   esi
c001ab95:	53                   	push   ebx
c001ab96:	31 db                	xor    ebx,ebx
c001ab98:	51                   	push   ecx
c001ab99:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ab9e:	52                   	push   edx
c001ab9f:	53                   	push   ebx
c001aba0:	43                   	inc    ebx
c001aba1:	56                   	push   esi
c001aba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aba6:	e8 03 03 00 00       	call   c001aeae <PCI::checkDevice(unsigned char, unsigned char)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	83 fb 20             	cmp    ebx,0x20
c001abb1:	75 eb                	jne    c001ab9e <PCI::checkBus(unsigned char)+0xa>
c001abb3:	58                   	pop    eax
c001abb4:	5b                   	pop    ebx
c001abb5:	5e                   	pop    esi
c001abb6:	c3                   	ret    
c001abb7:	90                   	nop

c001abb8 <PCI::foundDevice(PCIDeviceInfo)>:
c001abb8:	55                   	push   ebp
c001abb9:	57                   	push   edi
c001abba:	56                   	push   esi
c001abbb:	53                   	push   ebx
c001abbc:	83 ec 1c             	sub    esp,0x1c
c001abbf:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001abc4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001abc8:	3d ff ff 00 00       	cmp    eax,0xffff
c001abcd:	0f 84 57 01 00 00    	je     c001ad2a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001abd3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001abd8:	66 3d 06 04          	cmp    ax,0x406
c001abdc:	75 2c                	jne    c001ac0a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001abde:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001abe3:	50                   	push   eax
c001abe4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001abe9:	50                   	push   eax
c001abea:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001abef:	50                   	push   eax
c001abf0:	53                   	push   ebx
c001abf1:	e8 64 fb ff ff       	call   c001a75a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001abf6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001abfa:	0f b6 c0             	movzx  eax,al
c001abfd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac01:	83 c4 2c             	add    esp,0x2c
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	5f                   	pop    edi
c001ac07:	5d                   	pop    ebp
c001ac08:	eb 8a                	jmp    c001ab94 <PCI::checkBus(unsigned char)>
c001ac0a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ac0e:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ac14:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ac18:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ac1c:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ac21:	85 d2                	test   edx,edx
c001ac23:	74 36                	je     c001ac5b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ac25:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ac28:	85 c9                	test   ecx,ecx
c001ac2a:	74 2b                	je     c001ac57 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac2c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ac32:	31 ee                	xor    esi,ebp
c001ac34:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ac3a:	75 1b                	jne    c001ac57 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac3c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ac40:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ac46:	75 0f                	jne    c001ac57 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac48:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ac4f:	39 f9                	cmp    ecx,edi
c001ac51:	0f 84 d3 00 00 00    	je     c001ad2a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ac57:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac59:	eb c6                	jmp    c001ac21 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ac5b:	3d 01 06 00 00       	cmp    eax,0x601
c001ac60:	75 19                	jne    c001ac7b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ac62:	83 ec 0c             	sub    esp,0xc
c001ac65:	68 64 01 00 00       	push   0x164
c001ac6a:	e8 3f ce fe ff       	call   c0007aae <malloc>
c001ac6f:	89 c5                	mov    ebp,eax
c001ac71:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac74:	e8 a1 0e 00 00       	call   c001bb1a <SATABus::SATABus()>
c001ac79:	eb 1e                	jmp    c001ac99 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ac7b:	3d 01 01 00 00       	cmp    eax,0x101
c001ac80:	75 62                	jne    c001ace4 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ac82:	83 ec 0c             	sub    esp,0xc
c001ac85:	68 70 02 00 00       	push   0x270
c001ac8a:	e8 1f ce fe ff       	call   c0007aae <malloc>
c001ac8f:	89 c5                	mov    ebp,eax
c001ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac94:	e8 e5 02 00 00       	call   c001af7e <IDE::IDE()>
c001ac99:	5f                   	pop    edi
c001ac9a:	58                   	pop    eax
c001ac9b:	55                   	push   ebp
c001ac9c:	53                   	push   ebx
c001ac9d:	e8 a0 13 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001aca2:	83 ec 1c             	sub    esp,0x1c
c001aca5:	b9 09 00 00 00       	mov    ecx,0x9
c001acaa:	fc                   	cld    
c001acab:	89 e7                	mov    edi,esp
c001acad:	8d 74 24 60          	lea    esi,[esp+0x60]
c001acb1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001acb3:	55                   	push   ebp
c001acb4:	e8 cf 12 ff ff       	call   c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>
c001acb9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001acbc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001acc0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001acc8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001acd0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001acd8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001acdb:	83 c4 4c             	add    esp,0x4c
c001acde:	5b                   	pop    ebx
c001acdf:	5e                   	pop    esi
c001ace0:	5f                   	pop    edi
c001ace1:	5d                   	pop    ebp
c001ace2:	ff e0                	jmp    eax
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	68 58 01 00 00       	push   0x158
c001acec:	e8 bd cd fe ff       	call   c0007aae <malloc>
c001acf1:	89 c5                	mov    ebp,eax
c001acf3:	58                   	pop    eax
c001acf4:	5a                   	pop    edx
c001acf5:	68 be 21 02 c0       	push   0xc00221be
c001acfa:	55                   	push   ebp
c001acfb:	e8 e0 15 ff ff       	call   c000c2e0 <DriverlessDevice::DriverlessDevice(char const*)>
c001ad00:	59                   	pop    ecx
c001ad01:	5e                   	pop    esi
c001ad02:	55                   	push   ebp
c001ad03:	53                   	push   ebx
c001ad04:	e8 39 13 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	b9 09 00 00 00       	mov    ecx,0x9
c001ad11:	fc                   	cld    
c001ad12:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ad16:	89 fe                	mov    esi,edi
c001ad18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad1a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001ad1e:	83 c4 1c             	add    esp,0x1c
c001ad21:	5b                   	pop    ebx
c001ad22:	5e                   	pop    esi
c001ad23:	5f                   	pop    edi
c001ad24:	5d                   	pop    ebp
c001ad25:	e9 5e 12 ff ff       	jmp    c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>
c001ad2a:	83 c4 1c             	add    esp,0x1c
c001ad2d:	5b                   	pop    ebx
c001ad2e:	5e                   	pop    esi
c001ad2f:	5f                   	pop    edi
c001ad30:	5d                   	pop    ebp
c001ad31:	c3                   	ret    

c001ad32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ad32:	55                   	push   ebp
c001ad33:	57                   	push   edi
c001ad34:	56                   	push   esi
c001ad35:	53                   	push   ebx
c001ad36:	83 ec 68             	sub    esp,0x68
c001ad39:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ad3d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad48:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad4f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ad54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad58:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad5f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ad64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad68:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ad6d:	6a 0c                	push   0xc
c001ad6f:	57                   	push   edi
c001ad70:	53                   	push   ebx
c001ad71:	56                   	push   esi
c001ad72:	55                   	push   ebp
c001ad73:	e8 32 f8 ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad78:	83 c4 20             	add    esp,0x20
c001ad7b:	57                   	push   edi
c001ad7c:	53                   	push   ebx
c001ad7d:	56                   	push   esi
c001ad7e:	55                   	push   ebp
c001ad7f:	e8 1c f9 ff ff       	call   c001a6a0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ad84:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ad89:	57                   	push   edi
c001ad8a:	53                   	push   ebx
c001ad8b:	56                   	push   esi
c001ad8c:	55                   	push   ebp
c001ad8d:	e8 a4 f9 ff ff       	call   c001a736 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ad92:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ad96:	83 c4 14             	add    esp,0x14
c001ad99:	6a 3c                	push   0x3c
c001ad9b:	57                   	push   edi
c001ad9c:	53                   	push   ebx
c001ad9d:	56                   	push   esi
c001ad9e:	55                   	push   ebp
c001ad9f:	e8 06 f8 ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ada4:	0f b6 c4             	movzx  eax,ah
c001ada7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001adab:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001adaf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001adb3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001adb8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001adbe:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001adc4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001adc8:	83 c4 20             	add    esp,0x20
c001adcb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001add0:	74 30                	je     c001ae02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001add2:	31 c0                	xor    eax,eax
c001add4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001add8:	7e 28                	jle    c001ae02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001adda:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ade2:	39 cb                	cmp    ebx,ecx
c001ade4:	75 19                	jne    c001adff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ade6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001adee:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001adf2:	75 0b                	jne    c001adff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001adf4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001adfb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001adff:	40                   	inc    eax
c001ae00:	eb d2                	jmp    c001add4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ae02:	31 d2                	xor    edx,edx
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	57                   	push   edi
c001ae08:	53                   	push   ebx
c001ae09:	56                   	push   esi
c001ae0a:	52                   	push   edx
c001ae0b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae0f:	55                   	push   ebp
c001ae10:	e8 6d f9 ff ff       	call   c001a782 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae19:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ae1d:	42                   	inc    edx
c001ae1e:	83 c4 20             	add    esp,0x20
c001ae21:	83 fa 06             	cmp    edx,0x6
c001ae24:	75 de                	jne    c001ae04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ae26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae2e:	c1 e2 08             	shl    edx,0x8
c001ae31:	83 ec 0c             	sub    esp,0xc
c001ae34:	0f b6 c4             	movzx  eax,ah
c001ae37:	09 d0                	or     eax,edx
c001ae39:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ae3e:	6a 02                	push   0x2
c001ae40:	57                   	push   edi
c001ae41:	53                   	push   ebx
c001ae42:	56                   	push   esi
c001ae43:	55                   	push   ebp
c001ae44:	e8 61 f7 ff ff       	call   c001a5aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae49:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ae4e:	83 c4 20             	add    esp,0x20
c001ae51:	57                   	push   edi
c001ae52:	53                   	push   ebx
c001ae53:	56                   	push   esi
c001ae54:	55                   	push   ebp
c001ae55:	e8 90 f8 ff ff       	call   c001a6ea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ae5a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ae5e:	57                   	push   edi
c001ae5f:	53                   	push   ebx
c001ae60:	56                   	push   esi
c001ae61:	55                   	push   ebp
c001ae62:	e8 ed f7 ff ff       	call   c001a654 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ae67:	b9 09 00 00 00       	mov    ecx,0x9
c001ae6c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ae71:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ae75:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ae79:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ae7d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ae81:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ae85:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ae89:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ae8d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ae91:	83 ec 0c             	sub    esp,0xc
c001ae94:	fc                   	cld    
c001ae95:	89 e7                	mov    edi,esp
c001ae97:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ae9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae9d:	55                   	push   ebp
c001ae9e:	e8 15 fd ff ff       	call   c001abb8 <PCI::foundDevice(PCIDeviceInfo)>
c001aea3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aea9:	5b                   	pop    ebx
c001aeaa:	5e                   	pop    esi
c001aeab:	5f                   	pop    edi
c001aeac:	5d                   	pop    ebp
c001aead:	c3                   	ret    

c001aeae <PCI::checkDevice(unsigned char, unsigned char)>:
c001aeae:	55                   	push   ebp
c001aeaf:	57                   	push   edi
c001aeb0:	56                   	push   esi
c001aeb1:	53                   	push   ebx
c001aeb2:	83 ec 0c             	sub    esp,0xc
c001aeb5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aeb9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aebe:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aec3:	6a 00                	push   0x0
c001aec5:	56                   	push   esi
c001aec6:	57                   	push   edi
c001aec7:	55                   	push   ebp
c001aec8:	e8 87 f7 ff ff       	call   c001a654 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aecd:	6a 00                	push   0x0
c001aecf:	56                   	push   esi
c001aed0:	57                   	push   edi
c001aed1:	55                   	push   ebp
c001aed2:	e8 5b fe ff ff       	call   c001ad32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aed7:	83 c4 20             	add    esp,0x20
c001aeda:	6a 00                	push   0x0
c001aedc:	56                   	push   esi
c001aedd:	57                   	push   edi
c001aede:	55                   	push   ebp
c001aedf:	e8 94 f7 ff ff       	call   c001a678 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aee4:	83 c4 10             	add    esp,0x10
c001aee7:	a8 80                	test   al,0x80
c001aee9:	74 2d                	je     c001af18 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aeeb:	bb 01 00 00 00       	mov    ebx,0x1
c001aef0:	53                   	push   ebx
c001aef1:	56                   	push   esi
c001aef2:	57                   	push   edi
c001aef3:	55                   	push   ebp
c001aef4:	e8 5b f7 ff ff       	call   c001a654 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	0f b7 c0             	movzx  eax,ax
c001aeff:	3d ff ff 00 00       	cmp    eax,0xffff
c001af04:	74 0c                	je     c001af12 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001af06:	53                   	push   ebx
c001af07:	56                   	push   esi
c001af08:	57                   	push   edi
c001af09:	55                   	push   ebp
c001af0a:	e8 23 fe ff ff       	call   c001ad32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	43                   	inc    ebx
c001af13:	83 fb 08             	cmp    ebx,0x8
c001af16:	75 d8                	jne    c001aef0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001af18:	83 c4 0c             	add    esp,0xc
c001af1b:	5b                   	pop    ebx
c001af1c:	5e                   	pop    esi
c001af1d:	5f                   	pop    edi
c001af1e:	5d                   	pop    ebp
c001af1f:	c3                   	ret    

c001af20 <PCI::detect()>:
c001af20:	56                   	push   esi
c001af21:	53                   	push   ebx
c001af22:	53                   	push   ebx
c001af23:	31 db                	xor    ebx,ebx
c001af25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af29:	6a 00                	push   0x0
c001af2b:	6a 00                	push   0x0
c001af2d:	6a 00                	push   0x0
c001af2f:	56                   	push   esi
c001af30:	e8 43 f7 ff ff       	call   c001a678 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	a8 80                	test   al,0x80
c001af3a:	75 21                	jne    c001af5d <PCI::detect()+0x3d>
c001af3c:	51                   	push   ecx
c001af3d:	51                   	push   ecx
c001af3e:	6a 00                	push   0x0
c001af40:	56                   	push   esi
c001af41:	e8 4e fc ff ff       	call   c001ab94 <PCI::checkBus(unsigned char)>
c001af46:	83 c4 10             	add    esp,0x10
c001af49:	eb 2a                	jmp    c001af75 <PCI::detect()+0x55>
c001af4b:	52                   	push   edx
c001af4c:	52                   	push   edx
c001af4d:	53                   	push   ebx
c001af4e:	43                   	inc    ebx
c001af4f:	56                   	push   esi
c001af50:	e8 3f fc ff ff       	call   c001ab94 <PCI::checkBus(unsigned char)>
c001af55:	83 c4 10             	add    esp,0x10
c001af58:	83 fb 08             	cmp    ebx,0x8
c001af5b:	74 18                	je     c001af75 <PCI::detect()+0x55>
c001af5d:	53                   	push   ebx
c001af5e:	6a 00                	push   0x0
c001af60:	6a 00                	push   0x0
c001af62:	56                   	push   esi
c001af63:	e8 ec f6 ff ff       	call   c001a654 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af68:	83 c4 10             	add    esp,0x10
c001af6b:	0f b7 c0             	movzx  eax,ax
c001af6e:	3d ff ff 00 00       	cmp    eax,0xffff
c001af73:	74 d6                	je     c001af4b <PCI::detect()+0x2b>
c001af75:	58                   	pop    eax
c001af76:	5b                   	pop    ebx
c001af77:	5e                   	pop    esi
c001af78:	c3                   	ret    
c001af79:	90                   	nop

c001af7a <IDE::close(int, int, void*)>:
c001af7a:	83 c8 ff             	or     eax,0xffffffff
c001af7d:	c3                   	ret    

c001af7e <IDE::IDE()>:
c001af7e:	83 ec 0c             	sub    esp,0xc
c001af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af85:	83 ec 08             	sub    esp,0x8
c001af88:	68 04 22 02 c0       	push   0xc0022204
c001af8d:	50                   	push   eax
c001af8e:	e8 f1 13 ff ff       	call   c000c384 <HardDiskController::HardDiskController(char const*)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	ba 94 22 02 c0       	mov    edx,0xc0022294
c001af9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9f:	89 10                	mov    DWORD PTR [eax],edx
c001afa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001afac:	90                   	nop
c001afad:	83 c4 0c             	add    esp,0xc
c001afb0:	c3                   	ret    
c001afb1:	90                   	nop

c001afb2 <IDE::prepareInterrupt(unsigned char)>:
c001afb2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001afbb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001afc3:	c3                   	ret    

c001afc4 <selectDrive(unsigned char, unsigned char)>:
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop

c001afc6 <IDE::getBase(unsigned char)>:
c001afc6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001afcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afcf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001afd7:	c3                   	ret    

c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001afd8:	55                   	push   ebp
c001afd9:	57                   	push   edi
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	83 ec 1c             	sub    esp,0x1c
c001afdf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001afe3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afe7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001afea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aff2:	80 f9 03             	cmp    cl,0x3
c001aff5:	77 4f                	ja     c001b046 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001aff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001affb:	0f b6 fa             	movzx  edi,dl
c001affe:	0f b6 db             	movzx  ebx,bl
c001b001:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b004:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b009:	80 ca 80             	or     dl,0x80
c001b00c:	52                   	push   edx
c001b00d:	6a 0c                	push   0xc
c001b00f:	57                   	push   edi
c001b010:	56                   	push   esi
c001b011:	e8 c2 ff ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b016:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b01b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b01f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b023:	ee                   	out    dx,al
c001b024:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b029:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b02d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b031:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b035:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b03d:	83 c4 2c             	add    esp,0x2c
c001b040:	5b                   	pop    ebx
c001b041:	5e                   	pop    esi
c001b042:	5f                   	pop    edi
c001b043:	5d                   	pop    ebp
c001b044:	eb 92                	jmp    c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b046:	0f b6 cb             	movzx  ecx,bl
c001b049:	83 f9 07             	cmp    ecx,0x7
c001b04c:	77 12                	ja     c001b060 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b04e:	0f b6 d2             	movzx  edx,dl
c001b051:	0f b6 db             	movzx  ebx,bl
c001b054:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b05c:	01 da                	add    edx,ebx
c001b05e:	eb 2f                	jmp    c001b08f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b060:	83 f9 0d             	cmp    ecx,0xd
c001b063:	77 13                	ja     c001b078 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b065:	0f b6 d2             	movzx  edx,dl
c001b068:	0f b6 db             	movzx  ebx,bl
c001b06b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b072:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b076:	eb 17                	jmp    c001b08f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b078:	83 f9 15             	cmp    ecx,0x15
c001b07b:	77 13                	ja     c001b090 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b07d:	0f b6 d2             	movzx  edx,dl
c001b080:	0f b6 db             	movzx  ebx,bl
c001b083:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b08b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b08f:	ee                   	out    dx,al
c001b090:	83 c4 1c             	add    esp,0x1c
c001b093:	5b                   	pop    ebx
c001b094:	5e                   	pop    esi
c001b095:	5f                   	pop    edi
c001b096:	5d                   	pop    ebp
c001b097:	c3                   	ret    

c001b098 <IDE::read(unsigned char, unsigned char)>:
c001b098:	55                   	push   ebp
c001b099:	57                   	push   edi
c001b09a:	56                   	push   esi
c001b09b:	53                   	push   ebx
c001b09c:	83 ec 1c             	sub    esp,0x1c
c001b09f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b0a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0a7:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b0aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b0ae:	3c 03                	cmp    al,0x3
c001b0b0:	77 40                	ja     c001b0f2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b0b2:	0f b6 f9             	movzx  edi,cl
c001b0b5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b0b8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b0bd:	0c 80                	or     al,0x80
c001b0bf:	50                   	push   eax
c001b0c0:	6a 0c                	push   0xc
c001b0c2:	57                   	push   edi
c001b0c3:	56                   	push   esi
c001b0c4:	e8 0f ff ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0c9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b0ce:	0f b6 d3             	movzx  edx,bl
c001b0d1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b0d5:	ec                   	in     al,dx
c001b0d6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b0da:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b0df:	52                   	push   edx
c001b0e0:	6a 0c                	push   0xc
c001b0e2:	57                   	push   edi
c001b0e3:	56                   	push   esi
c001b0e4:	e8 ef fe ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0e9:	83 c4 20             	add    esp,0x20
c001b0ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b0f0:	eb 4c                	jmp    c001b13e <IDE::read(unsigned char, unsigned char)+0xa6>
c001b0f2:	0f b6 d3             	movzx  edx,bl
c001b0f5:	83 fa 07             	cmp    edx,0x7
c001b0f8:	77 12                	ja     c001b10c <IDE::read(unsigned char, unsigned char)+0x74>
c001b0fa:	0f b6 c9             	movzx  ecx,cl
c001b0fd:	0f b6 d3             	movzx  edx,bl
c001b100:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b108:	01 c2                	add    edx,eax
c001b10a:	eb 31                	jmp    c001b13d <IDE::read(unsigned char, unsigned char)+0xa5>
c001b10c:	83 fa 0d             	cmp    edx,0xd
c001b10f:	77 13                	ja     c001b124 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b111:	0f b6 c9             	movzx  ecx,cl
c001b114:	0f b6 d3             	movzx  edx,bl
c001b117:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b11e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b122:	eb 19                	jmp    c001b13d <IDE::read(unsigned char, unsigned char)+0xa5>
c001b124:	31 c0                	xor    eax,eax
c001b126:	83 fa 15             	cmp    edx,0x15
c001b129:	77 13                	ja     c001b13e <IDE::read(unsigned char, unsigned char)+0xa6>
c001b12b:	0f b6 c9             	movzx  ecx,cl
c001b12e:	0f b6 d3             	movzx  edx,bl
c001b131:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b139:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b13d:	ec                   	in     al,dx
c001b13e:	83 c4 1c             	add    esp,0x1c
c001b141:	5b                   	pop    ebx
c001b142:	5e                   	pop    esi
c001b143:	5f                   	pop    edi
c001b144:	5d                   	pop    ebp
c001b145:	c3                   	ret    

c001b146 <IDE::waitInterrupt(unsigned char)>:
c001b146:	55                   	push   ebp
c001b147:	57                   	push   edi
c001b148:	56                   	push   esi
c001b149:	53                   	push   ebx
c001b14a:	31 db                	xor    ebx,ebx
c001b14c:	83 ec 0c             	sub    esp,0xc
c001b14f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b153:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b158:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b160:	89 e8                	mov    eax,ebp
c001b162:	84 c0                	test   al,al
c001b164:	75 30                	jne    c001b196 <IDE::waitInterrupt(unsigned char)+0x50>
c001b166:	50                   	push   eax
c001b167:	6a 0c                	push   0xc
c001b169:	56                   	push   esi
c001b16a:	57                   	push   edi
c001b16b:	e8 28 ff ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	a8 01                	test   al,0x1
c001b175:	75 27                	jne    c001b19e <IDE::waitInterrupt(unsigned char)+0x58>
c001b177:	f6 c3 04             	test   bl,0x4
c001b17a:	75 12                	jne    c001b18e <IDE::waitInterrupt(unsigned char)+0x48>
c001b17c:	83 fb 32             	cmp    ebx,0x32
c001b17f:	7e 0d                	jle    c001b18e <IDE::waitInterrupt(unsigned char)+0x48>
c001b181:	83 ec 0c             	sub    esp,0xc
c001b184:	6a 64                	push   0x64
c001b186:	e8 21 a5 ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001b18b:	83 c4 10             	add    esp,0x10
c001b18e:	83 fb 3c             	cmp    ebx,0x3c
c001b191:	74 0b                	je     c001b19e <IDE::waitInterrupt(unsigned char)+0x58>
c001b193:	43                   	inc    ebx
c001b194:	eb c2                	jmp    c001b158 <IDE::waitInterrupt(unsigned char)+0x12>
c001b196:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b19e:	83 c4 0c             	add    esp,0xc
c001b1a1:	89 e8                	mov    eax,ebp
c001b1a3:	5b                   	pop    ebx
c001b1a4:	5e                   	pop    esi
c001b1a5:	5f                   	pop    edi
c001b1a6:	5d                   	pop    ebp
c001b1a7:	c3                   	ret    

c001b1a8 <ideChannel0IRQHandler(regs*, void*)>:
c001b1a8:	83 ec 10             	sub    esp,0x10
c001b1ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1af:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b1b6:	6a 07                	push   0x7
c001b1b8:	6a 00                	push   0x0
c001b1ba:	50                   	push   eax
c001b1bb:	e8 d8 fe ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b1c0:	83 c4 1c             	add    esp,0x1c
c001b1c3:	c3                   	ret    

c001b1c4 <ideChannel1IRQHandler(regs*, void*)>:
c001b1c4:	83 ec 10             	sub    esp,0x10
c001b1c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1cb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b1d2:	6a 07                	push   0x7
c001b1d4:	6a 01                	push   0x1
c001b1d6:	50                   	push   eax
c001b1d7:	e8 bc fe ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b1dc:	83 c4 1c             	add    esp,0x1c
c001b1df:	c3                   	ret    

c001b1e0 <IDE::enableIRQs(unsigned char, bool)>:
c001b1e0:	57                   	push   edi
c001b1e1:	b8 02 00 00 00       	mov    eax,0x2
c001b1e6:	56                   	push   esi
c001b1e7:	53                   	push   ebx
c001b1e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b1f0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b1f5:	74 02                	je     c001b1f9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b1f7:	31 c0                	xor    eax,eax
c001b1f9:	0f b6 db             	movzx  ebx,bl
c001b1fc:	bf 04 00 00 00       	mov    edi,0x4
c001b201:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b208:	50                   	push   eax
c001b209:	6a 0c                	push   0xc
c001b20b:	53                   	push   ebx
c001b20c:	56                   	push   esi
c001b20d:	e8 c6 fd ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b212:	83 c4 10             	add    esp,0x10
c001b215:	50                   	push   eax
c001b216:	6a 0c                	push   0xc
c001b218:	53                   	push   ebx
c001b219:	56                   	push   esi
c001b21a:	e8 79 fe ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	4f                   	dec    edi
c001b223:	75 f0                	jne    c001b215 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b225:	5b                   	pop    ebx
c001b226:	5e                   	pop    esi
c001b227:	5f                   	pop    edi
c001b228:	c3                   	ret    
c001b229:	90                   	nop

c001b22a <IDE::open(int, int, void*)>:
c001b22a:	55                   	push   ebp
c001b22b:	57                   	push   edi
c001b22c:	56                   	push   esi
c001b22d:	53                   	push   ebx
c001b22e:	83 ec 1c             	sub    esp,0x1c
c001b231:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b235:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b23e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b247:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b24e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b255:	0f 85 de 02 00 00    	jne    c001b539 <IDE::open(int, int, void*)+0x30f>
c001b25b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b261:	88 04 24             	mov    BYTE PTR [esp],al
c001b264:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b267:	83 e0 7f             	and    eax,0x7f
c001b26a:	83 f8 05             	cmp    eax,0x5
c001b26d:	74 05                	je     c001b274 <IDE::open(int, int, void*)+0x4a>
c001b26f:	83 f8 0f             	cmp    eax,0xf
c001b272:	75 32                	jne    c001b2a6 <IDE::open(int, int, void*)+0x7c>
c001b274:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b27a:	83 e0 fc             	and    eax,0xfffffffc
c001b27d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b284:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b28a:	83 e0 fc             	and    eax,0xfffffffc
c001b28d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b294:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b29a:	83 e0 fc             	and    eax,0xfffffffc
c001b29d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b2a4:	eb 14                	jmp    c001b2ba <IDE::open(int, int, void*)+0x90>
c001b2a6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b2b0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b2ba:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b2c1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b2c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2cc:	89 c6                	mov    esi,eax
c001b2ce:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b2d3:	c1 e6 10             	shl    esi,0x10
c001b2d6:	89 e8                	mov    eax,ebp
c001b2d8:	89 fa                	mov    edx,edi
c001b2da:	c1 e0 0b             	shl    eax,0xb
c001b2dd:	09 f0                	or     eax,esi
c001b2df:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b2e6:	c1 e6 08             	shl    esi,0x8
c001b2e9:	09 c6                	or     esi,eax
c001b2eb:	89 f0                	mov    eax,esi
c001b2ed:	0d 08 00 00 80       	or     eax,0x80000008
c001b2f2:	ef                   	out    dx,eax
c001b2f3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b2f8:	89 ca                	mov    edx,ecx
c001b2fa:	ed                   	in     eax,dx
c001b2fb:	c1 e8 10             	shr    eax,0x10
c001b2fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001b303:	0f 84 f9 00 00 00    	je     c001b402 <IDE::open(int, int, void*)+0x1d8>
c001b309:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b30f:	89 fa                	mov    edx,edi
c001b311:	89 f0                	mov    eax,esi
c001b313:	ef                   	out    dx,eax
c001b314:	b0 fe                	mov    al,0xfe
c001b316:	89 ca                	mov    edx,ecx
c001b318:	ee                   	out    dx,al
c001b319:	89 f0                	mov    eax,esi
c001b31b:	89 fa                	mov    edx,edi
c001b31d:	ef                   	out    dx,eax
c001b31e:	89 ca                	mov    edx,ecx
c001b320:	ed                   	in     eax,dx
c001b321:	3c fe                	cmp    al,0xfe
c001b323:	0f 85 a9 00 00 00    	jne    c001b3d2 <IDE::open(int, int, void*)+0x1a8>
c001b329:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b32f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b336:	74 33                	je     c001b36b <IDE::open(int, int, void*)+0x141>
c001b338:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b33e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b342:	40                   	inc    eax
c001b343:	83 ec 0c             	sub    esp,0xc
c001b346:	0f b6 c0             	movzx  eax,al
c001b349:	50                   	push   eax
c001b34a:	55                   	push   ebp
c001b34b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b34f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b355:	51                   	push   ecx
c001b356:	e8 59 3c ff ff       	call   c000efb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b35b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b360:	83 c4 1c             	add    esp,0x1c
c001b363:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b369:	eb 0a                	jmp    c001b375 <IDE::open(int, int, void*)+0x14b>
c001b36b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b375:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b37c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b383:	c1 e1 10             	shl    ecx,0x10
c001b386:	c1 e0 08             	shl    eax,0x8
c001b389:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b38e:	09 c1                	or     ecx,eax
c001b390:	89 fa                	mov    edx,edi
c001b392:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b399:	c1 e0 0b             	shl    eax,0xb
c001b39c:	09 c1                	or     ecx,eax
c001b39e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b3a4:	89 c8                	mov    eax,ecx
c001b3a6:	ef                   	out    dx,eax
c001b3a7:	be fc 0c 00 00       	mov    esi,0xcfc
c001b3ac:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b3b2:	89 f2                	mov    edx,esi
c001b3b4:	ee                   	out    dx,al
c001b3b5:	89 c8                	mov    eax,ecx
c001b3b7:	89 fa                	mov    edx,edi
c001b3b9:	ef                   	out    dx,eax
c001b3ba:	89 f2                	mov    edx,esi
c001b3bc:	ed                   	in     eax,dx
c001b3bd:	0f b6 c0             	movzx  eax,al
c001b3c0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b3c6:	74 4a                	je     c001b412 <IDE::open(int, int, void*)+0x1e8>
c001b3c8:	83 ec 0c             	sub    esp,0xc
c001b3cb:	68 1c 22 02 c0       	push   0xc002221c
c001b3d0:	eb 38                	jmp    c001b40a <IDE::open(int, int, void*)+0x1e0>
c001b3d2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b3db:	75 1b                	jne    c001b3f8 <IDE::open(int, int, void*)+0x1ce>
c001b3dd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b3e1:	3d 80 00 00 00       	cmp    eax,0x80
c001b3e6:	74 07                	je     c001b3ef <IDE::open(int, int, void*)+0x1c5>
c001b3e8:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b3ed:	75 09                	jne    c001b3f8 <IDE::open(int, int, void*)+0x1ce>
c001b3ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b3f6:	eb 1a                	jmp    c001b412 <IDE::open(int, int, void*)+0x1e8>
c001b3f8:	83 ec 0c             	sub    esp,0xc
c001b3fb:	68 24 22 02 c0       	push   0xc0022224
c001b400:	eb 08                	jmp    c001b40a <IDE::open(int, int, void*)+0x1e0>
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	68 55 22 02 c0       	push   0xc0022255
c001b40a:	e8 aa 57 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b419:	74 1a                	je     c001b435 <IDE::open(int, int, void*)+0x20b>
c001b41b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b421:	83 e0 fc             	and    eax,0xfffffffc
c001b424:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b42b:	83 c0 08             	add    eax,0x8
c001b42e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b435:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b43b:	89 c2                	mov    edx,eax
c001b43d:	83 e2 0f             	and    edx,0xf
c001b440:	83 fa 08             	cmp    edx,0x8
c001b443:	75 0a                	jne    c001b44f <IDE::open(int, int, void*)+0x225>
c001b445:	83 e8 02             	sub    eax,0x2
c001b448:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b44f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b455:	89 c2                	mov    edx,eax
c001b457:	83 e2 0f             	and    edx,0xf
c001b45a:	83 fa 08             	cmp    edx,0x8
c001b45d:	75 0a                	jne    c001b469 <IDE::open(int, int, void*)+0x23f>
c001b45f:	83 e8 02             	sub    eax,0x2
c001b462:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b469:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b470:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b477:	89 d0                	mov    eax,edx
c001b479:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b47c:	8d 7a 01             	lea    edi,[edx+0x1]
c001b47f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b483:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b487:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b48b:	83 e1 3f             	and    ecx,0x3f
c001b48e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b492:	89 f9                	mov    ecx,edi
c001b494:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b49b:	0f b6 c9             	movzx  ecx,cl
c001b49e:	8d 78 02             	lea    edi,[eax+0x2]
c001b4a1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4a4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b4a8:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b4ac:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b4b0:	83 e2 3f             	and    edx,0x3f
c001b4b3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b4b7:	89 f9                	mov    ecx,edi
c001b4b9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b4bf:	0f b6 d1             	movzx  edx,cl
c001b4c2:	8d 78 03             	lea    edi,[eax+0x3]
c001b4c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b4c8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b4cc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b4d0:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b4d4:	83 e1 3f             	and    ecx,0x3f
c001b4d7:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b4db:	89 f9                	mov    ecx,edi
c001b4dd:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b4e3:	0f b6 c9             	movzx  ecx,cl
c001b4e6:	8d 78 04             	lea    edi,[eax+0x4]
c001b4e9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4ec:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b4f0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b4f4:	89 fa                	mov    edx,edi
c001b4f6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b4fc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b500:	83 e2 3f             	and    edx,0x3f
c001b503:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b507:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b50e:	66 85 f6             	test   si,si
c001b511:	74 65                	je     c001b578 <IDE::open(int, int, void*)+0x34e>
c001b513:	89 f9                	mov    ecx,edi
c001b515:	83 c0 05             	add    eax,0x5
c001b518:	0f b6 d1             	movzx  edx,cl
c001b51b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b51e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b522:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b526:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b52c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b530:	83 e0 3f             	and    eax,0x3f
c001b533:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b537:	eb 3f                	jmp    c001b578 <IDE::open(int, int, void*)+0x34e>
c001b539:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b53f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b546:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b54d:	05 06 02 00 00       	add    eax,0x206
c001b552:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b559:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b560:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b567:	05 06 02 00 00       	add    eax,0x206
c001b56c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b573:	e9 bd fe ff ff       	jmp    c001b435 <IDE::open(int, int, void*)+0x20b>
c001b578:	50                   	push   eax
c001b579:	50                   	push   eax
c001b57a:	6a 00                	push   0x0
c001b57c:	53                   	push   ebx
c001b57d:	e8 30 fa ff ff       	call   c001afb2 <IDE::prepareInterrupt(unsigned char)>
c001b582:	5a                   	pop    edx
c001b583:	59                   	pop    ecx
c001b584:	6a 01                	push   0x1
c001b586:	53                   	push   ebx
c001b587:	e8 26 fa ff ff       	call   c001afb2 <IDE::prepareInterrupt(unsigned char)>
c001b58c:	83 c4 0c             	add    esp,0xc
c001b58f:	6a 00                	push   0x0
c001b591:	6a 00                	push   0x0
c001b593:	53                   	push   ebx
c001b594:	e8 47 fc ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	6a 00                	push   0x0
c001b59e:	6a 01                	push   0x1
c001b5a0:	53                   	push   ebx
c001b5a1:	e8 3a fc ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b5b0:	74 34                	je     c001b5e6 <IDE::open(int, int, void*)+0x3bc>
c001b5b2:	83 ec 0c             	sub    esp,0xc
c001b5b5:	53                   	push   ebx
c001b5b6:	6a 01                	push   0x1
c001b5b8:	68 a8 b1 01 c0       	push   0xc001b1a8
c001b5bd:	6a 0e                	push   0xe
c001b5bf:	53                   	push   ebx
c001b5c0:	e8 29 0a ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5c5:	83 c4 14             	add    esp,0x14
c001b5c8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b5ce:	53                   	push   ebx
c001b5cf:	6a 01                	push   0x1
c001b5d1:	68 c4 b1 01 c0       	push   0xc001b1c4
c001b5d6:	6a 0f                	push   0xf
c001b5d8:	53                   	push   ebx
c001b5d9:	e8 10 0a ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5de:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b5e4:	eb 38                	jmp    c001b61e <IDE::open(int, int, void*)+0x3f4>
c001b5e6:	83 ec 0c             	sub    esp,0xc
c001b5e9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b5f3:	53                   	push   ebx
c001b5f4:	6a 00                	push   0x0
c001b5f6:	68 a8 b1 01 c0       	push   0xc001b1a8
c001b5fb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b601:	53                   	push   ebx
c001b602:	e8 e7 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b607:	83 c4 14             	add    esp,0x14
c001b60a:	53                   	push   ebx
c001b60b:	6a 00                	push   0x0
c001b60d:	68 c4 b1 01 c0       	push   0xc001b1c4
c001b612:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b618:	53                   	push   ebx
c001b619:	e8 d0 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b61e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b620:	83 c4 20             	add    esp,0x20
c001b623:	83 ec 0c             	sub    esp,0xc
c001b626:	53                   	push   ebx
c001b627:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b62a:	83 c4 0c             	add    esp,0xc
c001b62d:	6a 07                	push   0x7
c001b62f:	6a 00                	push   0x0
c001b631:	53                   	push   ebx
c001b632:	e8 61 fa ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b637:	83 c4 0c             	add    esp,0xc
c001b63a:	6a 07                	push   0x7
c001b63c:	6a 01                	push   0x1
c001b63e:	53                   	push   ebx
c001b63f:	e8 54 fa ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b644:	83 c4 0c             	add    esp,0xc
c001b647:	6a 01                	push   0x1
c001b649:	6a 00                	push   0x0
c001b64b:	53                   	push   ebx
c001b64c:	e8 8f fb ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001b651:	83 c4 0c             	add    esp,0xc
c001b654:	6a 01                	push   0x1
c001b656:	6a 01                	push   0x1
c001b658:	53                   	push   ebx
c001b659:	e8 82 fb ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001b65e:	83 c4 2c             	add    esp,0x2c
c001b661:	31 c0                	xor    eax,eax
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	5f                   	pop    edi
c001b666:	5d                   	pop    ebp
c001b667:	c3                   	ret    

c001b668 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b668:	55                   	push   ebp
c001b669:	57                   	push   edi
c001b66a:	56                   	push   esi
c001b66b:	53                   	push   ebx
c001b66c:	83 ec 1c             	sub    esp,0x1c
c001b66f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b673:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b677:	8d 42 f8             	lea    eax,[edx-0x8]
c001b67a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b67e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b682:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b686:	3c 03                	cmp    al,0x3
c001b688:	77 5a                	ja     c001b6e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b68a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b68e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b692:	0f b6 db             	movzx  ebx,bl
c001b695:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b698:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b69d:	0c 80                	or     al,0x80
c001b69f:	50                   	push   eax
c001b6a0:	6a 0c                	push   0xc
c001b6a2:	53                   	push   ebx
c001b6a3:	56                   	push   esi
c001b6a4:	e8 2f f9 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6a9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b6ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6b6:	0f b6 d2             	movzx  edx,dl
c001b6b9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b6bd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b6bf:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b6c4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b6c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b6cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b6d0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b6d8:	83 c4 2c             	add    esp,0x2c
c001b6db:	5b                   	pop    ebx
c001b6dc:	5e                   	pop    esi
c001b6dd:	5f                   	pop    edi
c001b6de:	5d                   	pop    ebp
c001b6df:	e9 f4 f8 ff ff       	jmp    c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6e4:	0f b6 c2             	movzx  eax,dl
c001b6e7:	83 f8 07             	cmp    eax,0x7
c001b6ea:	77 12                	ja     c001b6fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b6ec:	0f b6 c2             	movzx  eax,dl
c001b6ef:	0f b6 db             	movzx  ebx,bl
c001b6f2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b6fa:	01 c2                	add    edx,eax
c001b6fc:	eb 2f                	jmp    c001b72d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b6fe:	83 f8 0d             	cmp    eax,0xd
c001b701:	77 13                	ja     c001b716 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b703:	0f b6 db             	movzx  ebx,bl
c001b706:	0f b6 d2             	movzx  edx,dl
c001b709:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b710:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b714:	eb 17                	jmp    c001b72d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b716:	83 f8 15             	cmp    eax,0x15
c001b719:	77 14                	ja     c001b72f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b71b:	0f b6 db             	movzx  ebx,bl
c001b71e:	0f b6 d2             	movzx  edx,dl
c001b721:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b729:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b72d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b72f:	83 c4 1c             	add    esp,0x1c
c001b732:	5b                   	pop    ebx
c001b733:	5e                   	pop    esi
c001b734:	5f                   	pop    edi
c001b735:	5d                   	pop    ebp
c001b736:	c3                   	ret    
c001b737:	90                   	nop

c001b738 <IDE::detect()>:
c001b738:	55                   	push   ebp
c001b739:	57                   	push   edi
c001b73a:	56                   	push   esi
c001b73b:	53                   	push   ebx
c001b73c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b742:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b749:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b750:	0f 85 a4 02 00 00    	jne    c001b9fa <IDE::detect()+0x2c2>
c001b756:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b75d:	31 f6                	xor    esi,esi
c001b75f:	31 ed                	xor    ebp,ebp
c001b761:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b769:	89 e8                	mov    eax,ebp
c001b76b:	c1 e0 06             	shl    eax,0x6
c001b76e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b776:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b77a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b782:	c1 e0 04             	shl    eax,0x4
c001b785:	83 c8 a0             	or     eax,0xffffffa0
c001b788:	0f b6 c0             	movzx  eax,al
c001b78b:	50                   	push   eax
c001b78c:	6a 06                	push   0x6
c001b78e:	56                   	push   esi
c001b78f:	53                   	push   ebx
c001b790:	e8 43 f8 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b795:	83 c4 0c             	add    esp,0xc
c001b798:	6a 0c                	push   0xc
c001b79a:	56                   	push   esi
c001b79b:	53                   	push   ebx
c001b79c:	e8 f7 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7a1:	83 c4 0c             	add    esp,0xc
c001b7a4:	6a 0c                	push   0xc
c001b7a6:	56                   	push   esi
c001b7a7:	53                   	push   ebx
c001b7a8:	e8 eb f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7ad:	83 c4 0c             	add    esp,0xc
c001b7b0:	6a 0c                	push   0xc
c001b7b2:	56                   	push   esi
c001b7b3:	53                   	push   ebx
c001b7b4:	e8 df f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7b9:	83 c4 0c             	add    esp,0xc
c001b7bc:	6a 0c                	push   0xc
c001b7be:	56                   	push   esi
c001b7bf:	53                   	push   ebx
c001b7c0:	e8 d3 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7c5:	68 ec 00 00 00       	push   0xec
c001b7ca:	6a 07                	push   0x7
c001b7cc:	56                   	push   esi
c001b7cd:	53                   	push   ebx
c001b7ce:	e8 05 f8 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7d3:	83 c4 1c             	add    esp,0x1c
c001b7d6:	6a 0c                	push   0xc
c001b7d8:	56                   	push   esi
c001b7d9:	53                   	push   ebx
c001b7da:	e8 b9 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	6a 0c                	push   0xc
c001b7e4:	56                   	push   esi
c001b7e5:	53                   	push   ebx
c001b7e6:	e8 ad f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7eb:	83 c4 0c             	add    esp,0xc
c001b7ee:	6a 0c                	push   0xc
c001b7f0:	56                   	push   esi
c001b7f1:	53                   	push   ebx
c001b7f2:	e8 a1 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b7f7:	83 c4 0c             	add    esp,0xc
c001b7fa:	6a 0c                	push   0xc
c001b7fc:	56                   	push   esi
c001b7fd:	53                   	push   ebx
c001b7fe:	e8 95 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b803:	83 c4 0c             	add    esp,0xc
c001b806:	6a 0c                	push   0xc
c001b808:	56                   	push   esi
c001b809:	53                   	push   ebx
c001b80a:	e8 89 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	84 c0                	test   al,al
c001b814:	0f 84 60 01 00 00    	je     c001b97a <IDE::detect()+0x242>
c001b81a:	31 ff                	xor    edi,edi
c001b81c:	50                   	push   eax
c001b81d:	6a 0c                	push   0xc
c001b81f:	56                   	push   esi
c001b820:	53                   	push   ebx
c001b821:	e8 72 f8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b826:	83 c4 10             	add    esp,0x10
c001b829:	a8 01                	test   al,0x1
c001b82b:	0f 85 6a 01 00 00    	jne    c001b99b <IDE::detect()+0x263>
c001b831:	a8 80                	test   al,0x80
c001b833:	75 04                	jne    c001b839 <IDE::detect()+0x101>
c001b835:	a8 08                	test   al,0x8
c001b837:	75 23                	jne    c001b85c <IDE::detect()+0x124>
c001b839:	47                   	inc    edi
c001b83a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b840:	7e da                	jle    c001b81c <IDE::detect()+0xe4>
c001b842:	83 ec 0c             	sub    esp,0xc
c001b845:	6a 32                	push   0x32
c001b847:	e8 60 9e ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001b84c:	83 c4 10             	add    esp,0x10
c001b84f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b855:	75 c5                	jne    c001b81c <IDE::detect()+0xe4>
c001b857:	e9 3f 01 00 00       	jmp    c001b99b <IDE::detect()+0x263>
c001b85c:	31 c9                	xor    ecx,ecx
c001b85e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b862:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b866:	83 ec 0c             	sub    esp,0xc
c001b869:	68 80 00 00 00       	push   0x80
c001b86e:	57                   	push   edi
c001b86f:	6a 00                	push   0x0
c001b871:	56                   	push   esi
c001b872:	53                   	push   ebx
c001b873:	e8 f0 fd ff ff       	call   c001b668 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b878:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b87d:	89 e8                	mov    eax,ebp
c001b87f:	89 d1                	mov    ecx,edx
c001b881:	c1 e0 06             	shl    eax,0x6
c001b884:	01 d8                	add    eax,ebx
c001b886:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b88d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b894:	89 f2                	mov    edx,esi
c001b896:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b89c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b8a0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b8a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8aa:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b8b1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b8b9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b8c0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b8c8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b8ce:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b8d5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b8db:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b8df:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b8e3:	83 c4 20             	add    esp,0x20
c001b8e6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b8e9:	83 c0 02             	add    eax,0x2
c001b8ec:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b8f2:	83 c7 02             	add    edi,0x2
c001b8f5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b8f8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b8fe:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b902:	75 e2                	jne    c001b8e6 <IDE::detect()+0x1ae>
c001b904:	89 e8                	mov    eax,ebp
c001b906:	c1 e0 06             	shl    eax,0x6
c001b909:	01 d8                	add    eax,ebx
c001b90b:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b912:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b919:	c1 ea 09             	shr    edx,0x9
c001b91c:	83 e2 01             	and    edx,0x1
c001b91f:	80 e1 01             	and    cl,0x1
c001b922:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b928:	75 22                	jne    c001b94c <IDE::detect()+0x214>
c001b92a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b931:	74 46                	je     c001b979 <IDE::detect()+0x241>
c001b933:	83 ec 0c             	sub    esp,0xc
c001b936:	68 7c 01 00 00       	push   0x17c
c001b93b:	e8 6e c1 fe ff       	call   c0007aae <malloc>
c001b940:	89 c7                	mov    edi,eax
c001b942:	89 04 24             	mov    DWORD PTR [esp],eax
c001b945:	e8 1a 05 00 00       	call   c001be64 <ATA::ATA()>
c001b94a:	eb 17                	jmp    c001b963 <IDE::detect()+0x22b>
c001b94c:	83 ec 0c             	sub    esp,0xc
c001b94f:	68 84 01 00 00       	push   0x184
c001b954:	e8 55 c1 fe ff       	call   c0007aae <malloc>
c001b959:	89 c7                	mov    edi,eax
c001b95b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b95e:	e8 45 0e 00 00       	call   c001c7a8 <ATAPI::ATAPI()>
c001b963:	5a                   	pop    edx
c001b964:	59                   	pop    ecx
c001b965:	57                   	push   edi
c001b966:	53                   	push   ebx
c001b967:	e8 d6 06 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001b96c:	8b 07                	mov    eax,DWORD PTR [edi]
c001b96e:	53                   	push   ebx
c001b96f:	55                   	push   ebp
c001b970:	6a 00                	push   0x0
c001b972:	57                   	push   edi
c001b973:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b976:	83 c4 20             	add    esp,0x20
c001b979:	45                   	inc    ebp
c001b97a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b97f:	74 0d                	je     c001b98e <IDE::detect()+0x256>
c001b981:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b989:	e9 db fd ff ff       	jmp    c001b769 <IDE::detect()+0x31>
c001b98e:	4e                   	dec    esi
c001b98f:	74 69                	je     c001b9fa <IDE::detect()+0x2c2>
c001b991:	be 01 00 00 00       	mov    esi,0x1
c001b996:	e9 c6 fd ff ff       	jmp    c001b761 <IDE::detect()+0x29>
c001b99b:	50                   	push   eax
c001b99c:	6a 04                	push   0x4
c001b99e:	56                   	push   esi
c001b99f:	53                   	push   ebx
c001b9a0:	e8 f3 f6 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b9a5:	83 c4 0c             	add    esp,0xc
c001b9a8:	89 c7                	mov    edi,eax
c001b9aa:	6a 05                	push   0x5
c001b9ac:	56                   	push   esi
c001b9ad:	53                   	push   ebx
c001b9ae:	e8 e5 f6 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	89 f9                	mov    ecx,edi
c001b9b8:	0f b6 c0             	movzx  eax,al
c001b9bb:	0f b6 f9             	movzx  edi,cl
c001b9be:	83 ff 14             	cmp    edi,0x14
c001b9c1:	75 07                	jne    c001b9ca <IDE::detect()+0x292>
c001b9c3:	3d eb 00 00 00       	cmp    eax,0xeb
c001b9c8:	eb 0a                	jmp    c001b9d4 <IDE::detect()+0x29c>
c001b9ca:	3d 96 00 00 00       	cmp    eax,0x96
c001b9cf:	75 a9                	jne    c001b97a <IDE::detect()+0x242>
c001b9d1:	83 ff 69             	cmp    edi,0x69
c001b9d4:	75 a4                	jne    c001b97a <IDE::detect()+0x242>
c001b9d6:	68 a1 00 00 00       	push   0xa1
c001b9db:	6a 07                	push   0x7
c001b9dd:	56                   	push   esi
c001b9de:	53                   	push   ebx
c001b9df:	e8 f4 f5 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9e4:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b9eb:	e8 bc 9c ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	b1 01                	mov    cl,0x1
c001b9f5:	e9 64 fe ff ff       	jmp    c001b85e <IDE::detect()+0x126>
c001b9fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba00:	5b                   	pop    ebx
c001ba01:	5e                   	pop    esi
c001ba02:	5f                   	pop    edi
c001ba03:	5d                   	pop    ebp
c001ba04:	c3                   	ret    
c001ba05:	90                   	nop

c001ba06 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ba06:	55                   	push   ebp
c001ba07:	57                   	push   edi
c001ba08:	56                   	push   esi
c001ba09:	53                   	push   ebx
c001ba0a:	83 ec 1c             	sub    esp,0x1c
c001ba0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ba15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ba1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba21:	88 c3                	mov    bl,al
c001ba23:	25 ff 00 00 00       	and    eax,0xff
c001ba28:	0f 84 88 00 00 00    	je     c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	89 c7                	mov    edi,eax
c001ba33:	68 7f 22 02 c0       	push   0xc002227f
c001ba38:	e8 fc ee fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001ba3d:	83 c4 10             	add    esp,0x10
c001ba40:	83 ff 01             	cmp    edi,0x1
c001ba43:	74 6b                	je     c001bab0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ba45:	83 ff 02             	cmp    edi,0x2
c001ba48:	75 58                	jne    c001baa2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ba4a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ba4f:	01 ff                	add    edi,edi
c001ba51:	50                   	push   eax
c001ba52:	09 fe                	or     esi,edi
c001ba54:	6a 01                	push   0x1
c001ba56:	89 f0                	mov    eax,esi
c001ba58:	0f b6 f0             	movzx  esi,al
c001ba5b:	c1 e6 06             	shl    esi,0x6
c001ba5e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ba66:	50                   	push   eax
c001ba67:	55                   	push   ebp
c001ba68:	e8 2b f6 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	a8 01                	test   al,0x1
c001ba72:	74 02                	je     c001ba76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ba74:	b3 07                	mov    bl,0x7
c001ba76:	a8 02                	test   al,0x2
c001ba78:	74 02                	je     c001ba7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ba7a:	b3 03                	mov    bl,0x3
c001ba7c:	a8 04                	test   al,0x4
c001ba7e:	74 02                	je     c001ba82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ba80:	b3 14                	mov    bl,0x14
c001ba82:	a8 08                	test   al,0x8
c001ba84:	74 02                	je     c001ba88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ba86:	b3 03                	mov    bl,0x3
c001ba88:	a8 10                	test   al,0x10
c001ba8a:	74 02                	je     c001ba8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ba8c:	b3 15                	mov    bl,0x15
c001ba8e:	a8 20                	test   al,0x20
c001ba90:	74 02                	je     c001ba94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ba92:	b3 03                	mov    bl,0x3
c001ba94:	a8 40                	test   al,0x40
c001ba96:	74 02                	je     c001ba9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ba98:	b3 16                	mov    bl,0x16
c001ba9a:	a8 80                	test   al,0x80
c001ba9c:	74 18                	je     c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba9e:	b3 0d                	mov    bl,0xd
c001baa0:	eb 14                	jmp    c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baa2:	83 ff 03             	cmp    edi,0x3
c001baa5:	74 0d                	je     c001bab4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001baa7:	83 ff 04             	cmp    edi,0x4
c001baaa:	75 0a                	jne    c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baac:	b3 08                	mov    bl,0x8
c001baae:	eb 06                	jmp    c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bab0:	b3 13                	mov    bl,0x13
c001bab2:	eb 02                	jmp    c001bab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bab4:	b3 17                	mov    bl,0x17
c001bab6:	83 c4 1c             	add    esp,0x1c
c001bab9:	88 d8                	mov    al,bl
c001babb:	5b                   	pop    ebx
c001babc:	5e                   	pop    esi
c001babd:	5f                   	pop    edi
c001babe:	5d                   	pop    ebp
c001babf:	c3                   	ret    

c001bac0 <IDE::polling(unsigned char, unsigned int)>:
c001bac0:	57                   	push   edi
c001bac1:	56                   	push   esi
c001bac2:	53                   	push   ebx
c001bac3:	bb 04 00 00 00       	mov    ebx,0x4
c001bac8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bacc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bad1:	52                   	push   edx
c001bad2:	6a 0c                	push   0xc
c001bad4:	56                   	push   esi
c001bad5:	57                   	push   edi
c001bad6:	e8 bd f5 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001badb:	83 c4 10             	add    esp,0x10
c001bade:	4b                   	dec    ebx
c001badf:	75 f0                	jne    c001bad1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bae1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bae6:	50                   	push   eax
c001bae7:	6a 0c                	push   0xc
c001bae9:	56                   	push   esi
c001baea:	57                   	push   edi
c001baeb:	e8 a8 f5 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001baf0:	83 c4 10             	add    esp,0x10
c001baf3:	a8 01                	test   al,0x1
c001baf5:	75 17                	jne    c001bb0e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001baf7:	a8 20                	test   al,0x20
c001baf9:	75 0f                	jne    c001bb0a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bafb:	4b                   	dec    ebx
c001bafc:	74 10                	je     c001bb0e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bafe:	a8 80                	test   al,0x80
c001bb00:	75 e4                	jne    c001bae6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb02:	a8 08                	test   al,0x8
c001bb04:	74 e0                	je     c001bae6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb06:	31 c0                	xor    eax,eax
c001bb08:	eb 06                	jmp    c001bb10 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb0a:	b0 01                	mov    al,0x1
c001bb0c:	eb 02                	jmp    c001bb10 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb0e:	b0 02                	mov    al,0x2
c001bb10:	5b                   	pop    ebx
c001bb11:	5e                   	pop    esi
c001bb12:	5f                   	pop    edi
c001bb13:	c3                   	ret    

c001bb14 <SATABus::close(int, int, void*)>:
c001bb14:	31 c0                	xor    eax,eax
c001bb16:	c3                   	ret    
c001bb17:	90                   	nop

c001bb18 <SATABus::detect()>:
c001bb18:	c3                   	ret    
c001bb19:	90                   	nop

c001bb1a <SATABus::SATABus()>:
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb21:	83 ec 08             	sub    esp,0x8
c001bb24:	68 b8 22 02 c0       	push   0xc00222b8
c001bb29:	50                   	push   eax
c001bb2a:	e8 55 08 ff ff       	call   c000c384 <HardDiskController::HardDiskController(char const*)>
c001bb2f:	83 c4 10             	add    esp,0x10
c001bb32:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001bb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3b:	89 10                	mov    DWORD PTR [eax],edx
c001bb3d:	83 ec 0c             	sub    esp,0xc
c001bb40:	6a 50                	push   0x50
c001bb42:	e8 3a c3 fe ff       	call   c0007e81 <Phys::allocateContiguousPages(int)>
c001bb47:	83 c4 10             	add    esp,0x10
c001bb4a:	89 c2                	mov    edx,eax
c001bb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb50:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	6a 50                	push   0x50
c001bb5b:	e8 a1 da fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001bb60:	83 c4 10             	add    esp,0x10
c001bb63:	89 c2                	mov    edx,eax
c001bb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb69:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bb6f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001bb74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb78:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bb7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb82:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bb88:	83 ec 0c             	sub    esp,0xc
c001bb8b:	6a 03                	push   0x3
c001bb8d:	6a 50                	push   0x50
c001bb8f:	51                   	push   ecx
c001bb90:	52                   	push   edx
c001bb91:	50                   	push   eax
c001bb92:	e8 77 e3 fe ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bb97:	83 c4 20             	add    esp,0x20
c001bb9a:	90                   	nop
c001bb9b:	83 c4 0c             	add    esp,0xc
c001bb9e:	c3                   	ret    
c001bb9f:	90                   	nop

c001bba0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bba0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bba4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bba7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bbaa:	09 c2                	or     edx,eax
c001bbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bbb6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bbb8:	31 c0                	xor    eax,eax
c001bbba:	c1 e9 08             	shr    ecx,0x8
c001bbbd:	83 e1 0f             	and    ecx,0xf
c001bbc0:	39 c8                	cmp    eax,ecx
c001bbc2:	74 0a                	je     c001bbce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bbc4:	f6 c2 01             	test   dl,0x1
c001bbc7:	74 08                	je     c001bbd1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bbc9:	d1 ea                	shr    edx,1
c001bbcb:	40                   	inc    eax
c001bbcc:	eb f2                	jmp    c001bbc0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bbce:	83 c8 ff             	or     eax,0xffffffff
c001bbd1:	c3                   	ret    

c001bbd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bbd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbd6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bbd9:	89 c2                	mov    edx,eax
c001bbdb:	c1 ea 08             	shr    edx,0x8
c001bbde:	83 e2 0f             	and    edx,0xf
c001bbe1:	4a                   	dec    edx
c001bbe2:	75 32                	jne    c001bc16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bbe4:	83 e0 0f             	and    eax,0xf
c001bbe7:	83 f8 03             	cmp    eax,0x3
c001bbea:	75 2a                	jne    c001bc16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bbec:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bbef:	b8 02 00 00 00       	mov    eax,0x2
c001bbf4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bbfa:	74 1c                	je     c001bc18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bbfc:	b8 04 00 00 00       	mov    eax,0x4
c001bc01:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bc07:	74 0f                	je     c001bc18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	83 fa 03             	cmp    edx,0x3
c001bc0e:	0f 94 c0             	sete   al
c001bc11:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bc15:	c3                   	ret    
c001bc16:	31 c0                	xor    eax,eax
c001bc18:	c3                   	ret    
c001bc19:	90                   	nop

c001bc1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc21:	0f ba e2 0f          	bt     edx,0xf
c001bc25:	72 f7                	jb     c001bc1e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bc27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc2a:	83 ca 10             	or     edx,0x10
c001bc2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc33:	83 ca 01             	or     edx,0x1
c001bc36:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc39:	c3                   	ret    

c001bc3a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc41:	83 e2 fe             	and    edx,0xfffffffe
c001bc44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc4a:	83 e2 ef             	and    edx,0xffffffef
c001bc4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc53:	0f ba e2 0e          	bt     edx,0xe
c001bc57:	72 f7                	jb     c001bc50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc59:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc5c:	0f ba e2 0f          	bt     edx,0xf
c001bc60:	72 ee                	jb     c001bc50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc62:	c3                   	ret    
c001bc63:	90                   	nop

c001bc64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bc64:	55                   	push   ebp
c001bc65:	57                   	push   edi
c001bc66:	56                   	push   esi
c001bc67:	53                   	push   ebx
c001bc68:	83 ec 1c             	sub    esp,0x1c
c001bc6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bc6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bc73:	53                   	push   ebx
c001bc74:	56                   	push   esi
c001bc75:	e8 c0 ff ff ff       	call   c001bc3a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bc7a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bc7e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bc84:	83 ec 0c             	sub    esp,0xc
c001bc87:	c1 e5 0a             	shl    ebp,0xa
c001bc8a:	01 e8                	add    eax,ebp
c001bc8c:	89 03                	mov    DWORD PTR [ebx],eax
c001bc8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc90:	68 00 04 00 00       	push   0x400
c001bc95:	6a 00                	push   0x0
c001bc97:	50                   	push   eax
c001bc98:	e8 53 48 fe ff       	call   c00004f0 <memset>
c001bc9d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001bca3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001bca7:	01 e8                	add    eax,ebp
c001bca9:	83 c4 1c             	add    esp,0x1c
c001bcac:	89 03                	mov    DWORD PTR [ebx],eax
c001bcae:	c1 e2 08             	shl    edx,0x8
c001bcb1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bcb8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001bcbe:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bcc4:	01 f8                	add    eax,edi
c001bcc6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bcc9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bccc:	68 00 01 00 00       	push   0x100
c001bcd1:	6a 00                	push   0x0
c001bcd3:	50                   	push   eax
c001bcd4:	e8 17 48 fe ff       	call   c00004f0 <memset>
c001bcd9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001bcdf:	01 fa                	add    edx,edi
c001bce1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bce5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001bce8:	c1 e7 0d             	shl    edi,0xd
c001bceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bcf2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001bcf8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001bcfe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd02:	31 ff                	xor    edi,edi
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001bd0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd11:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001bd17:	83 c5 20             	add    ebp,0x20
c001bd1a:	01 f8                	add    eax,edi
c001bd1c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd1f:	52                   	push   edx
c001bd20:	68 00 01 00 00       	push   0x100
c001bd25:	6a 00                	push   0x0
c001bd27:	50                   	push   eax
c001bd28:	e8 c3 47 fe ff       	call   c00004f0 <memset>
c001bd2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001bd3a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001bd41:	01 f8                	add    eax,edi
c001bd43:	81 c7 00 01 00 00    	add    edi,0x100
c001bd49:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd4c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001bd52:	75 b3                	jne    c001bd07 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001bd54:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd5b:	50                   	push   eax
c001bd5c:	50                   	push   eax
c001bd5d:	53                   	push   ebx
c001bd5e:	56                   	push   esi
c001bd5f:	e8 b6 fe ff ff       	call   c001bc1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bd64:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd6b:	83 c4 2c             	add    esp,0x2c
c001bd6e:	5b                   	pop    ebx
c001bd6f:	5e                   	pop    esi
c001bd70:	5f                   	pop    edi
c001bd71:	5d                   	pop    ebp
c001bd72:	c3                   	ret    
c001bd73:	90                   	nop

c001bd74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bd74:	55                   	push   ebp
c001bd75:	57                   	push   edi
c001bd76:	56                   	push   esi
c001bd77:	53                   	push   ebx
c001bd78:	31 db                	xor    ebx,ebx
c001bd7a:	83 ec 0c             	sub    esp,0xc
c001bd7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bd85:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bd88:	f7 c7 01 00 00 00    	test   edi,0x1
c001bd8e:	74 7a                	je     c001be0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bd90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bd94:	89 d8                	mov    eax,ebx
c001bd96:	c1 e0 07             	shl    eax,0x7
c001bd99:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bda0:	55                   	push   ebp
c001bda1:	56                   	push   esi
c001bda2:	e8 2b fe ff ff       	call   c001bbd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bda7:	5a                   	pop    edx
c001bda8:	83 f8 01             	cmp    eax,0x1
c001bdab:	59                   	pop    ecx
c001bdac:	75 21                	jne    c001bdcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bdae:	50                   	push   eax
c001bdaf:	53                   	push   ebx
c001bdb0:	55                   	push   ebp
c001bdb1:	56                   	push   esi
c001bdb2:	e8 ad fe ff ff       	call   c001bc64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bdb7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bdbe:	e8 eb bc fe ff       	call   c0007aae <malloc>
c001bdc3:	89 c5                	mov    ebp,eax
c001bdc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdc8:	e8 99 10 00 00       	call   c001ce66 <SATA::SATA()>
c001bdcd:	eb 24                	jmp    c001bdf3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bdcf:	83 f8 04             	cmp    eax,0x4
c001bdd2:	75 36                	jne    c001be0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bdd4:	51                   	push   ecx
c001bdd5:	53                   	push   ebx
c001bdd6:	55                   	push   ebp
c001bdd7:	56                   	push   esi
c001bdd8:	e8 87 fe ff ff       	call   c001bc64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bddd:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bde4:	e8 c5 bc fe ff       	call   c0007aae <malloc>
c001bde9:	89 c5                	mov    ebp,eax
c001bdeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdee:	e8 d5 17 00 00       	call   c001d5c8 <SATAPI::SATAPI()>
c001bdf3:	58                   	pop    eax
c001bdf4:	5a                   	pop    edx
c001bdf5:	55                   	push   ebp
c001bdf6:	56                   	push   esi
c001bdf7:	e8 46 02 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001bdfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bdff:	56                   	push   esi
c001be00:	6a 00                	push   0x0
c001be02:	53                   	push   ebx
c001be03:	55                   	push   ebp
c001be04:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be07:	83 c4 20             	add    esp,0x20
c001be0a:	d1 ef                	shr    edi,1
c001be0c:	43                   	inc    ebx
c001be0d:	83 fb 20             	cmp    ebx,0x20
c001be10:	0f 85 72 ff ff ff    	jne    c001bd88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001be16:	83 c4 0c             	add    esp,0xc
c001be19:	5b                   	pop    ebx
c001be1a:	5e                   	pop    esi
c001be1b:	5f                   	pop    edi
c001be1c:	5d                   	pop    ebp
c001be1d:	c3                   	ret    

c001be1e <SATABus::open(int, int, void*)>:
c001be1e:	83 ec 14             	sub    esp,0x14
c001be21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be25:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001be2b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be31:	52                   	push   edx
c001be32:	50                   	push   eax
c001be33:	e8 3c ff ff ff       	call   c001bd74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001be38:	31 c0                	xor    eax,eax
c001be3a:	83 c4 1c             	add    esp,0x1c
c001be3d:	c3                   	ret    

c001be3e <ATA::close(int, int, void*)>:
c001be3e:	83 ec 0c             	sub    esp,0xc
c001be41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be4b:	85 c0                	test   eax,eax
c001be4d:	74 0c                	je     c001be5b <ATA::close(int, int, void*)+0x1d>
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	8b 10                	mov    edx,DWORD PTR [eax]
c001be54:	50                   	push   eax
c001be55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	31 c0                	xor    eax,eax
c001be5d:	83 c4 0c             	add    esp,0xc
c001be60:	c3                   	ret    
c001be61:	90                   	nop

c001be62 <ATA::powerSaving(PowerSavingLevel)>:
c001be62:	c3                   	ret    
c001be63:	90                   	nop

c001be64 <ATA::ATA()>:
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be6b:	83 ec 04             	sub    esp,0x4
c001be6e:	68 00 02 00 00       	push   0x200
c001be73:	68 b1 23 02 c0       	push   0xc00223b1
c001be78:	50                   	push   eax
c001be79:	e8 90 05 ff ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	ba 24 23 02 c0       	mov    edx,0xc0022324
c001be86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8a:	89 10                	mov    DWORD PTR [eax],edx
c001be8c:	90                   	nop
c001be8d:	83 c4 0c             	add    esp,0xc
c001be90:	c3                   	ret    
c001be91:	90                   	nop

c001be92 <ATA::flush(bool)>:
c001be92:	53                   	push   ebx
c001be93:	83 ec 08             	sub    esp,0x8
c001be96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be9f:	83 f8 01             	cmp    eax,0x1
c001bea2:	19 c0                	sbb    eax,eax
c001bea4:	83 e0 fd             	and    eax,0xfffffffd
c001bea7:	05 ea 00 00 00       	add    eax,0xea
c001beac:	50                   	push   eax
c001bead:	6a 07                	push   0x7
c001beaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beb6:	50                   	push   eax
c001beb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bebd:	e8 16 f1 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bec2:	83 c4 0c             	add    esp,0xc
c001bec5:	6a 00                	push   0x0
c001bec7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bece:	50                   	push   eax
c001becf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bed5:	e8 e6 fb ff ff       	call   c001bac0 <IDE::polling(unsigned char, unsigned int)>
c001beda:	83 c4 18             	add    esp,0x18
c001bedd:	5b                   	pop    ebx
c001bede:	c3                   	ret    
c001bedf:	90                   	nop

c001bee0 <ATA::readyForCommand()>:
c001bee0:	56                   	push   esi
c001bee1:	53                   	push   ebx
c001bee2:	53                   	push   ebx
c001bee3:	31 db                	xor    ebx,ebx
c001bee5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bee9:	51                   	push   ecx
c001beea:	6a 0c                	push   0xc
c001beec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bef3:	50                   	push   eax
c001bef4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001befa:	e8 99 f1 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	a8 88                	test   al,0x88
c001bf04:	74 1f                	je     c001bf25 <ATA::readyForCommand()+0x45>
c001bf06:	43                   	inc    ebx
c001bf07:	83 fb 63             	cmp    ebx,0x63
c001bf0a:	7e dd                	jle    c001bee9 <ATA::readyForCommand()+0x9>
c001bf0c:	83 ec 0c             	sub    esp,0xc
c001bf0f:	6a 0a                	push   0xa
c001bf11:	e8 96 97 ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001bf16:	83 c4 10             	add    esp,0x10
c001bf19:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bf1f:	75 c8                	jne    c001bee9 <ATA::readyForCommand()+0x9>
c001bf21:	31 c0                	xor    eax,eax
c001bf23:	eb 02                	jmp    c001bf27 <ATA::readyForCommand()+0x47>
c001bf25:	b0 01                	mov    al,0x1
c001bf27:	5a                   	pop    edx
c001bf28:	5b                   	pop    ebx
c001bf29:	5e                   	pop    esi
c001bf2a:	c3                   	ret    
c001bf2b:	90                   	nop

c001bf2c <ATA::access(unsigned long long, int, void*, bool)>:
c001bf2c:	55                   	push   ebp
c001bf2d:	57                   	push   edi
c001bf2e:	56                   	push   esi
c001bf2f:	53                   	push   ebx
c001bf30:	83 ec 2c             	sub    esp,0x2c
c001bf33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bf37:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bf3b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bf3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf43:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bf47:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf4b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bf4f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bf55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf59:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf5f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf63:	c1 e0 06             	shl    eax,0x6
c001bf66:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bf6e:	74 5d                	je     c001bfcd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bf70:	89 fa                	mov    edx,edi
c001bf72:	89 f0                	mov    eax,esi
c001bf74:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bf78:	c1 ea 1c             	shr    edx,0x1c
c001bf7b:	89 d1                	mov    ecx,edx
c001bf7d:	09 c1                	or     ecx,eax
c001bf7f:	74 25                	je     c001bfa6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bf81:	31 ed                	xor    ebp,ebp
c001bf83:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bf8a:	89 fa                	mov    edx,edi
c001bf8c:	89 f0                	mov    eax,esi
c001bf8e:	0f ad d0             	shrd   eax,edx,cl
c001bf91:	d3 ea                	shr    edx,cl
c001bf93:	f6 c1 20             	test   cl,0x20
c001bf96:	74 02                	je     c001bf9a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bf98:	89 d0                	mov    eax,edx
c001bf9a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bf9e:	45                   	inc    ebp
c001bf9f:	83 fd 06             	cmp    ebp,0x6
c001bfa2:	75 df                	jne    c001bf83 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bfa4:	eb 76                	jmp    c001c01c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bfa6:	89 f0                	mov    eax,esi
c001bfa8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bfad:	89 fa                	mov    edx,edi
c001bfaf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bfb6:	0f ac d0 10          	shrd   eax,edx,0x10
c001bfba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bfbf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bfc3:	c1 ee 18             	shr    esi,0x18
c001bfc6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bfcb:	eb 56                	jmp    c001c023 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bfcd:	6a 00                	push   0x0
c001bfcf:	6a 3f                	push   0x3f
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	e8 a8 2a 00 00       	call   c001ea80 <__umoddi3>
c001bfd8:	83 c4 10             	add    esp,0x10
c001bfdb:	40                   	inc    eax
c001bfdc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bfe0:	6a 00                	push   0x0
c001bfe2:	68 f0 03 00 00       	push   0x3f0
c001bfe7:	57                   	push   edi
c001bfe8:	56                   	push   esi
c001bfe9:	e8 92 29 00 00       	call   c001e980 <__udivdi3>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bff6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bffd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c002:	6a 00                	push   0x0
c001c004:	6a 3f                	push   0x3f
c001c006:	57                   	push   edi
c001c007:	56                   	push   esi
c001c008:	e8 73 29 00 00       	call   c001e980 <__udivdi3>
c001c00d:	83 c4 10             	add    esp,0x10
c001c010:	83 e0 0f             	and    eax,0xf
c001c013:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c018:	89 c6                	mov    esi,eax
c001c01a:	eb 07                	jmp    c001c023 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c01c:	31 f6                	xor    esi,esi
c001c01e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c023:	bf 01 00 00 00       	mov    edi,0x1
c001c028:	50                   	push   eax
c001c029:	6a 00                	push   0x0
c001c02b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c032:	50                   	push   eax
c001c033:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c037:	e8 a4 f1 ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001c03c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c03f:	e8 9c fe ff ff       	call   c001bee0 <ATA::readyForCommand()>
c001c044:	83 c4 10             	add    esp,0x10
c001c047:	84 c0                	test   al,al
c001c049:	0f 84 69 02 00 00    	je     c001c2b8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c04f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c055:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c05b:	c1 e0 04             	shl    eax,0x4
c001c05e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c065:	09 c6                	or     esi,eax
c001c067:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c06c:	75 05                	jne    c001c073 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c06e:	83 ce a0             	or     esi,0xffffffa0
c001c071:	eb 03                	jmp    c001c076 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c073:	83 ce e0             	or     esi,0xffffffe0
c001c076:	89 f0                	mov    eax,esi
c001c078:	0f b6 f0             	movzx  esi,al
c001c07b:	56                   	push   esi
c001c07c:	6a 06                	push   0x6
c001c07e:	51                   	push   ecx
c001c07f:	52                   	push   edx
c001c080:	e8 53 ef ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	6a 00                	push   0x0
c001c08a:	6a 01                	push   0x1
c001c08c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c093:	50                   	push   eax
c001c094:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c09a:	e8 39 ef ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c0a7:	83 f8 02             	cmp    eax,0x2
c001c0aa:	75 6e                	jne    c001c11a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c0ac:	6a 00                	push   0x0
c001c0ae:	6a 08                	push   0x8
c001c0b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0b7:	50                   	push   eax
c001c0b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0be:	e8 15 ef ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0c3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c0c8:	50                   	push   eax
c001c0c9:	6a 09                	push   0x9
c001c0cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0d2:	50                   	push   eax
c001c0d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0d9:	e8 fa ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0de:	83 c4 20             	add    esp,0x20
c001c0e1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c0e6:	50                   	push   eax
c001c0e7:	6a 0a                	push   0xa
c001c0e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0f0:	50                   	push   eax
c001c0f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0f7:	e8 dc ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0fc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c101:	50                   	push   eax
c001c102:	6a 0b                	push   0xb
c001c104:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c10b:	50                   	push   eax
c001c10c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c112:	e8 c1 ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c117:	83 c4 20             	add    esp,0x20
c001c11a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c11f:	50                   	push   eax
c001c120:	6a 02                	push   0x2
c001c122:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c129:	50                   	push   eax
c001c12a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c130:	e8 a3 ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c135:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c13a:	50                   	push   eax
c001c13b:	6a 03                	push   0x3
c001c13d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c144:	50                   	push   eax
c001c145:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c14b:	e8 88 ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c150:	83 c4 20             	add    esp,0x20
c001c153:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c158:	50                   	push   eax
c001c159:	6a 04                	push   0x4
c001c15b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c162:	50                   	push   eax
c001c163:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c169:	e8 6a ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c16e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c173:	50                   	push   eax
c001c174:	6a 05                	push   0x5
c001c176:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c17d:	50                   	push   eax
c001c17e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c184:	e8 4f ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c189:	83 c4 20             	add    esp,0x20
c001c18c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c191:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c196:	74 11                	je     c001c1a9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c198:	b8 30 00 00 00       	mov    eax,0x30
c001c19d:	83 fa 02             	cmp    edx,0x2
c001c1a0:	75 16                	jne    c001c1b8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c1a2:	b8 34 00 00 00       	mov    eax,0x34
c001c1a7:	eb 0f                	jmp    c001c1b8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c1a9:	b8 20 00 00 00       	mov    eax,0x20
c001c1ae:	83 fa 02             	cmp    edx,0x2
c001c1b1:	75 05                	jne    c001c1b8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c1b3:	b8 24 00 00 00       	mov    eax,0x24
c001c1b8:	50                   	push   eax
c001c1b9:	6a 07                	push   0x7
c001c1bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1c2:	50                   	push   eax
c001c1c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1c9:	e8 0a ee ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1ce:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c1d2:	83 c4 10             	add    esp,0x10
c001c1d5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c1da:	85 f6                	test   esi,esi
c001c1dc:	0f 84 b3 00 00 00    	je     c001c295 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c1e2:	50                   	push   eax
c001c1e3:	6a 01                	push   0x1
c001c1e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1ec:	50                   	push   eax
c001c1ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1f3:	e8 c8 f8 ff ff       	call   c001bac0 <IDE::polling(unsigned char, unsigned int)>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	0f b6 f8             	movzx  edi,al
c001c1fe:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c204:	85 ff                	test   edi,edi
c001c206:	74 1d                	je     c001c225 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c208:	57                   	push   edi
c001c209:	0f b6 d2             	movzx  edx,dl
c001c20c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c213:	50                   	push   eax
c001c214:	52                   	push   edx
c001c215:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c21b:	e8 e6 f7 ff ff       	call   c001ba06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c220:	e9 90 00 00 00       	jmp    c001c2b5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c225:	85 ed                	test   ebp,ebp
c001c227:	74 3b                	je     c001c264 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c229:	31 c9                	xor    ecx,ecx
c001c22b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c22f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c233:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c237:	50                   	push   eax
c001c238:	50                   	push   eax
c001c239:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c240:	50                   	push   eax
c001c241:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c247:	e8 7a ed ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001c24c:	89 c2                	mov    edx,eax
c001c24e:	89 f8                	mov    eax,edi
c001c250:	66 ef                	out    dx,ax
c001c252:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c256:	83 c4 10             	add    esp,0x10
c001c259:	41                   	inc    ecx
c001c25a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c260:	75 c9                	jne    c001c22b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001c262:	eb 23                	jmp    c001c287 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001c264:	0f b6 d2             	movzx  edx,dl
c001c267:	51                   	push   ecx
c001c268:	51                   	push   ecx
c001c269:	52                   	push   edx
c001c26a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c270:	e8 51 ed ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001c275:	b9 00 01 00 00       	mov    ecx,0x100
c001c27a:	89 c2                	mov    edx,eax
c001c27c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c280:	fc                   	cld    
c001c281:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c28f:	4e                   	dec    esi
c001c290:	e9 45 ff ff ff       	jmp    c001c1da <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001c295:	31 ff                	xor    edi,edi
c001c297:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c29c:	74 1a                	je     c001c2b8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c29e:	50                   	push   eax
c001c29f:	50                   	push   eax
c001c2a0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001c2a5:	83 f8 02             	cmp    eax,0x2
c001c2a8:	0f 94 c0             	sete   al
c001c2ab:	0f b6 c0             	movzx  eax,al
c001c2ae:	50                   	push   eax
c001c2af:	53                   	push   ebx
c001c2b0:	e8 dd fb ff ff       	call   c001be92 <ATA::flush(bool)>
c001c2b5:	83 c4 10             	add    esp,0x10
c001c2b8:	83 c4 2c             	add    esp,0x2c
c001c2bb:	89 f8                	mov    eax,edi
c001c2bd:	5b                   	pop    ebx
c001c2be:	5e                   	pop    esi
c001c2bf:	5f                   	pop    edi
c001c2c0:	5d                   	pop    ebp
c001c2c1:	c3                   	ret    

c001c2c2 <ATA::detectCHS()>:
c001c2c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2c6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c2cc:	c1 e0 06             	shl    eax,0x6
c001c2cf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c2d5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c2df:	c7 44 24 04 08 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022308
c001c2e7:	e9 cd 48 ff ff       	jmp    c0010bb9 <KePanic(char const*)>

c001c2ec <ATA::open(int, int, void*)>:
c001c2ec:	53                   	push   ebx
c001c2ed:	83 ec 08             	sub    esp,0x8
c001c2f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2fc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c302:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c308:	c1 e0 06             	shl    eax,0x6
c001c30b:	01 d0                	add    eax,edx
c001c30d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c314:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c31a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c321:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c32b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c331:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c338:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c33f:	75 0c                	jne    c001c34d <ATA::open(int, int, void*)+0x61>
c001c341:	83 ec 0c             	sub    esp,0xc
c001c344:	53                   	push   ebx
c001c345:	e8 78 ff ff ff       	call   c001c2c2 <ATA::detectCHS()>
c001c34a:	83 c4 10             	add    esp,0x10
c001c34d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c353:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c359:	c1 e0 06             	shl    eax,0x6
c001c35c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c363:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c36d:	d1 e8                	shr    eax,1
c001c36f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c375:	6a 04                	push   0x4
c001c377:	6a 0c                	push   0xc
c001c379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c380:	50                   	push   eax
c001c381:	52                   	push   edx
c001c382:	e8 51 ec ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c387:	90                   	nop
c001c388:	90                   	nop
c001c389:	6a 00                	push   0x0
c001c38b:	6a 0c                	push   0xc
c001c38d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c394:	50                   	push   eax
c001c395:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c39b:	e8 38 ec ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3a0:	83 c4 14             	add    esp,0x14
c001c3a3:	53                   	push   ebx
c001c3a4:	e8 cd 00 ff ff       	call   c000c476 <PhysicalDisk::startCache()>
c001c3a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3ac:	e8 09 13 ff ff       	call   c000d6ba <createPartitionsForDisk(PhysicalDisk*)>
c001c3b1:	31 c0                	xor    eax,eax
c001c3b3:	83 c4 18             	add    esp,0x18
c001c3b6:	5b                   	pop    ebx
c001c3b7:	c3                   	ret    

c001c3b8 <combineCharAndColour(char, unsigned char)>:
c001c3b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3bd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c3c3:	c1 e0 08             	shl    eax,0x8
c001c3c6:	09 d0                	or     eax,edx
c001c3c8:	c3                   	ret    

c001c3c9 <combineColours(unsigned char, unsigned char)>:
c001c3c9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3ce:	c1 e0 04             	shl    eax,0x4
c001c3d1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c3d5:	c3                   	ret    

c001c3d6 <ATA::read(unsigned long long, int, void*)>:
c001c3d6:	55                   	push   ebp
c001c3d7:	57                   	push   edi
c001c3d8:	56                   	push   esi
c001c3d9:	be 04 00 00 00       	mov    esi,0x4
c001c3de:	53                   	push   ebx
c001c3df:	83 ec 0c             	sub    esp,0xc
c001c3e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c3e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3ea:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c3ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3f1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c3f5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c3fb:	0f 87 a1 01 00 00    	ja     c001c5a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c401:	be 06 00 00 00       	mov    esi,0x6
c001c406:	85 c9                	test   ecx,ecx
c001c408:	0f 84 94 01 00 00    	je     c001c5a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c40e:	55                   	push   ebp
c001c40f:	55                   	push   ebp
c001c410:	6a 00                	push   0x0
c001c412:	51                   	push   ecx
c001c413:	53                   	push   ebx
c001c414:	52                   	push   edx
c001c415:	50                   	push   eax
c001c416:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c41a:	e8 0d fb ff ff       	call   c001bf2c <ATA::access(unsigned long long, int, void*, bool)>
c001c41f:	83 c4 20             	add    esp,0x20
c001c422:	89 c6                	mov    esi,eax
c001c424:	85 c0                	test   eax,eax
c001c426:	0f 85 71 01 00 00    	jne    c001c59d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c42c:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c432:	89 da                	mov    edx,ebx
c001c434:	50                   	push   eax
c001c435:	bd 10 27 00 00       	mov    ebp,0x2710
c001c43a:	50                   	push   eax
c001c43b:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c441:	6a 0f                	push   0xf
c001c443:	6a 00                	push   0x0
c001c445:	e8 7f ff ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001c44a:	59                   	pop    ecx
c001c44b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c450:	5b                   	pop    ebx
c001c451:	0f b6 d8             	movzx  ebx,al
c001c454:	89 d0                	mov    eax,edx
c001c456:	53                   	push   ebx
c001c457:	99                   	cdq    
c001c458:	f7 fd                	idiv   ebp
c001c45a:	99                   	cdq    
c001c45b:	f7 f9                	idiv   ecx
c001c45d:	83 c2 30             	add    edx,0x30
c001c460:	0f b6 d2             	movzx  edx,dl
c001c463:	52                   	push   edx
c001c464:	e8 4f ff ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c469:	5f                   	pop    edi
c001c46a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c46f:	5a                   	pop    edx
c001c470:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c476:	53                   	push   ebx
c001c477:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c47c:	99                   	cdq    
c001c47d:	f7 ff                	idiv   edi
c001c47f:	99                   	cdq    
c001c480:	f7 f9                	idiv   ecx
c001c482:	8d 42 30             	lea    eax,[edx+0x30]
c001c485:	0f b6 c0             	movzx  eax,al
c001c488:	50                   	push   eax
c001c489:	e8 2a ff ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c48e:	5f                   	pop    edi
c001c48f:	bf 64 00 00 00       	mov    edi,0x64
c001c494:	5a                   	pop    edx
c001c495:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c49b:	53                   	push   ebx
c001c49c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4a1:	99                   	cdq    
c001c4a2:	f7 ff                	idiv   edi
c001c4a4:	99                   	cdq    
c001c4a5:	f7 f9                	idiv   ecx
c001c4a7:	8d 42 30             	lea    eax,[edx+0x30]
c001c4aa:	0f b6 c0             	movzx  eax,al
c001c4ad:	50                   	push   eax
c001c4ae:	e8 05 ff ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c4b3:	5a                   	pop    edx
c001c4b4:	5a                   	pop    edx
c001c4b5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c4bb:	53                   	push   ebx
c001c4bc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4c1:	99                   	cdq    
c001c4c2:	f7 f9                	idiv   ecx
c001c4c4:	99                   	cdq    
c001c4c5:	f7 f9                	idiv   ecx
c001c4c7:	8d 42 30             	lea    eax,[edx+0x30]
c001c4ca:	0f b6 c0             	movzx  eax,al
c001c4cd:	50                   	push   eax
c001c4ce:	e8 e5 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c4d3:	5a                   	pop    edx
c001c4d4:	5a                   	pop    edx
c001c4d5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c4db:	53                   	push   ebx
c001c4dc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4e1:	99                   	cdq    
c001c4e2:	f7 f9                	idiv   ecx
c001c4e4:	83 c2 30             	add    edx,0x30
c001c4e7:	0f b6 d2             	movzx  edx,dl
c001c4ea:	52                   	push   edx
c001c4eb:	e8 c8 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c4f0:	5a                   	pop    edx
c001c4f1:	5a                   	pop    edx
c001c4f2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c4f8:	53                   	push   ebx
c001c4f9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c4fe:	99                   	cdq    
c001c4ff:	f7 fd                	idiv   ebp
c001c501:	99                   	cdq    
c001c502:	f7 f9                	idiv   ecx
c001c504:	8d 42 30             	lea    eax,[edx+0x30]
c001c507:	0f b6 c0             	movzx  eax,al
c001c50a:	50                   	push   eax
c001c50b:	e8 a8 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c510:	5d                   	pop    ebp
c001c511:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c516:	5a                   	pop    edx
c001c517:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c51d:	53                   	push   ebx
c001c51e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c523:	99                   	cdq    
c001c524:	f7 fd                	idiv   ebp
c001c526:	99                   	cdq    
c001c527:	f7 f9                	idiv   ecx
c001c529:	8d 42 30             	lea    eax,[edx+0x30]
c001c52c:	0f b6 c0             	movzx  eax,al
c001c52f:	50                   	push   eax
c001c530:	e8 83 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c535:	5d                   	pop    ebp
c001c536:	5a                   	pop    edx
c001c537:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c53d:	53                   	push   ebx
c001c53e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c543:	99                   	cdq    
c001c544:	f7 ff                	idiv   edi
c001c546:	99                   	cdq    
c001c547:	f7 f9                	idiv   ecx
c001c549:	8d 42 30             	lea    eax,[edx+0x30]
c001c54c:	0f b6 c0             	movzx  eax,al
c001c54f:	50                   	push   eax
c001c550:	e8 63 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c555:	5f                   	pop    edi
c001c556:	5d                   	pop    ebp
c001c557:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c55d:	53                   	push   ebx
c001c55e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c563:	99                   	cdq    
c001c564:	f7 f9                	idiv   ecx
c001c566:	99                   	cdq    
c001c567:	f7 f9                	idiv   ecx
c001c569:	8d 42 30             	lea    eax,[edx+0x30]
c001c56c:	0f b6 c0             	movzx  eax,al
c001c56f:	50                   	push   eax
c001c570:	e8 43 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c575:	5a                   	pop    edx
c001c576:	5f                   	pop    edi
c001c577:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c57d:	53                   	push   ebx
c001c57e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c583:	99                   	cdq    
c001c584:	f7 f9                	idiv   ecx
c001c586:	83 c2 30             	add    edx,0x30
c001c589:	0f b6 d2             	movzx  edx,dl
c001c58c:	52                   	push   edx
c001c58d:	e8 26 fe ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c59b:	eb 05                	jmp    c001c5a2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c59d:	be 01 00 00 00       	mov    esi,0x1
c001c5a2:	83 c4 0c             	add    esp,0xc
c001c5a5:	89 f0                	mov    eax,esi
c001c5a7:	5b                   	pop    ebx
c001c5a8:	5e                   	pop    esi
c001c5a9:	5f                   	pop    edi
c001c5aa:	5d                   	pop    ebp
c001c5ab:	c3                   	ret    

c001c5ac <ATA::write(unsigned long long, int, void*)>:
c001c5ac:	55                   	push   ebp
c001c5ad:	57                   	push   edi
c001c5ae:	56                   	push   esi
c001c5af:	be 04 00 00 00       	mov    esi,0x4
c001c5b4:	53                   	push   ebx
c001c5b5:	83 ec 0c             	sub    esp,0xc
c001c5b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5c0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c5c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5c7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5cb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c5d1:	0f 87 9c 01 00 00    	ja     c001c773 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c5d7:	be 06 00 00 00       	mov    esi,0x6
c001c5dc:	85 c9                	test   ecx,ecx
c001c5de:	0f 84 8f 01 00 00    	je     c001c773 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c5e4:	55                   	push   ebp
c001c5e5:	55                   	push   ebp
c001c5e6:	6a 01                	push   0x1
c001c5e8:	51                   	push   ecx
c001c5e9:	53                   	push   ebx
c001c5ea:	52                   	push   edx
c001c5eb:	50                   	push   eax
c001c5ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5f0:	e8 37 f9 ff ff       	call   c001bf2c <ATA::access(unsigned long long, int, void*, bool)>
c001c5f5:	83 c4 20             	add    esp,0x20
c001c5f8:	89 c6                	mov    esi,eax
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	0f 85 6c 01 00 00    	jne    c001c76e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c602:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c608:	bd 10 27 00 00       	mov    ebp,0x2710
c001c60d:	50                   	push   eax
c001c60e:	50                   	push   eax
c001c60f:	6a 0f                	push   0xf
c001c611:	6a 00                	push   0x0
c001c613:	e8 b1 fd ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001c618:	5a                   	pop    edx
c001c619:	0f b6 d8             	movzx  ebx,al
c001c61c:	59                   	pop    ecx
c001c61d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c622:	53                   	push   ebx
c001c623:	b9 0a 00 00 00       	mov    ecx,0xa
c001c628:	99                   	cdq    
c001c629:	f7 fd                	idiv   ebp
c001c62b:	99                   	cdq    
c001c62c:	f7 f9                	idiv   ecx
c001c62e:	8d 42 30             	lea    eax,[edx+0x30]
c001c631:	0f b6 c0             	movzx  eax,al
c001c634:	50                   	push   eax
c001c635:	e8 7e fd ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c63a:	5f                   	pop    edi
c001c63b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c640:	5a                   	pop    edx
c001c641:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c647:	53                   	push   ebx
c001c648:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c64d:	99                   	cdq    
c001c64e:	f7 ff                	idiv   edi
c001c650:	99                   	cdq    
c001c651:	f7 f9                	idiv   ecx
c001c653:	8d 42 30             	lea    eax,[edx+0x30]
c001c656:	0f b6 c0             	movzx  eax,al
c001c659:	50                   	push   eax
c001c65a:	e8 59 fd ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c65f:	5f                   	pop    edi
c001c660:	bf 64 00 00 00       	mov    edi,0x64
c001c665:	5a                   	pop    edx
c001c666:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c66c:	53                   	push   ebx
c001c66d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c672:	99                   	cdq    
c001c673:	f7 ff                	idiv   edi
c001c675:	99                   	cdq    
c001c676:	f7 f9                	idiv   ecx
c001c678:	8d 42 30             	lea    eax,[edx+0x30]
c001c67b:	0f b6 c0             	movzx  eax,al
c001c67e:	50                   	push   eax
c001c67f:	e8 34 fd ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c684:	5a                   	pop    edx
c001c685:	5a                   	pop    edx
c001c686:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c68c:	53                   	push   ebx
c001c68d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c692:	99                   	cdq    
c001c693:	f7 f9                	idiv   ecx
c001c695:	99                   	cdq    
c001c696:	f7 f9                	idiv   ecx
c001c698:	8d 42 30             	lea    eax,[edx+0x30]
c001c69b:	0f b6 c0             	movzx  eax,al
c001c69e:	50                   	push   eax
c001c69f:	e8 14 fd ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c6a4:	5a                   	pop    edx
c001c6a5:	5a                   	pop    edx
c001c6a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c6ac:	53                   	push   ebx
c001c6ad:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6b2:	99                   	cdq    
c001c6b3:	f7 f9                	idiv   ecx
c001c6b5:	8d 42 30             	lea    eax,[edx+0x30]
c001c6b8:	0f b6 c0             	movzx  eax,al
c001c6bb:	50                   	push   eax
c001c6bc:	e8 f7 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c6c1:	5a                   	pop    edx
c001c6c2:	5a                   	pop    edx
c001c6c3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c6c9:	53                   	push   ebx
c001c6ca:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c6cf:	99                   	cdq    
c001c6d0:	f7 fd                	idiv   ebp
c001c6d2:	99                   	cdq    
c001c6d3:	f7 f9                	idiv   ecx
c001c6d5:	8d 42 30             	lea    eax,[edx+0x30]
c001c6d8:	0f b6 c0             	movzx  eax,al
c001c6db:	50                   	push   eax
c001c6dc:	e8 d7 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c6e1:	5d                   	pop    ebp
c001c6e2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6e7:	5a                   	pop    edx
c001c6e8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c6ee:	53                   	push   ebx
c001c6ef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c6f4:	99                   	cdq    
c001c6f5:	f7 fd                	idiv   ebp
c001c6f7:	99                   	cdq    
c001c6f8:	f7 f9                	idiv   ecx
c001c6fa:	8d 42 30             	lea    eax,[edx+0x30]
c001c6fd:	0f b6 c0             	movzx  eax,al
c001c700:	50                   	push   eax
c001c701:	e8 b2 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c706:	5d                   	pop    ebp
c001c707:	5a                   	pop    edx
c001c708:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c70e:	53                   	push   ebx
c001c70f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c714:	99                   	cdq    
c001c715:	f7 ff                	idiv   edi
c001c717:	99                   	cdq    
c001c718:	f7 f9                	idiv   ecx
c001c71a:	8d 42 30             	lea    eax,[edx+0x30]
c001c71d:	0f b6 c0             	movzx  eax,al
c001c720:	50                   	push   eax
c001c721:	e8 92 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c726:	5f                   	pop    edi
c001c727:	5d                   	pop    ebp
c001c728:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c72e:	53                   	push   ebx
c001c72f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c734:	99                   	cdq    
c001c735:	f7 f9                	idiv   ecx
c001c737:	99                   	cdq    
c001c738:	f7 f9                	idiv   ecx
c001c73a:	8d 42 30             	lea    eax,[edx+0x30]
c001c73d:	0f b6 c0             	movzx  eax,al
c001c740:	50                   	push   eax
c001c741:	e8 72 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c746:	5a                   	pop    edx
c001c747:	5f                   	pop    edi
c001c748:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c74e:	53                   	push   ebx
c001c74f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c754:	99                   	cdq    
c001c755:	f7 f9                	idiv   ecx
c001c757:	83 c2 30             	add    edx,0x30
c001c75a:	0f b6 d2             	movzx  edx,dl
c001c75d:	52                   	push   edx
c001c75e:	e8 55 fc ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c76c:	eb 05                	jmp    c001c773 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c76e:	be 01 00 00 00       	mov    esi,0x1
c001c773:	83 c4 0c             	add    esp,0xc
c001c776:	89 f0                	mov    eax,esi
c001c778:	5b                   	pop    ebx
c001c779:	5e                   	pop    esi
c001c77a:	5f                   	pop    edi
c001c77b:	5d                   	pop    ebp
c001c77c:	c3                   	ret    
c001c77d:	90                   	nop

c001c77e <ATAPI::write(unsigned long long, int, void*)>:
c001c77e:	b8 03 00 00 00       	mov    eax,0x3
c001c783:	c3                   	ret    

c001c784 <ATAPI::close(int, int, void*)>:
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c791:	85 c0                	test   eax,eax
c001c793:	74 0c                	je     c001c7a1 <ATAPI::close(int, int, void*)+0x1d>
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	8b 10                	mov    edx,DWORD PTR [eax]
c001c79a:	50                   	push   eax
c001c79b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c79e:	83 c4 10             	add    esp,0x10
c001c7a1:	31 c0                	xor    eax,eax
c001c7a3:	83 c4 0c             	add    esp,0xc
c001c7a6:	c3                   	ret    
c001c7a7:	90                   	nop

c001c7a8 <ATAPI::ATAPI()>:
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	83 ec 04             	sub    esp,0x4
c001c7b2:	68 00 08 00 00       	push   0x800
c001c7b7:	68 51 24 02 c0       	push   0xc0022451
c001c7bc:	50                   	push   eax
c001c7bd:	e8 4c fc fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7c2:	83 c4 10             	add    esp,0x10
c001c7c5:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c001c7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ce:	89 10                	mov    DWORD PTR [eax],edx
c001c7d0:	90                   	nop
c001c7d1:	83 c4 0c             	add    esp,0xc
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop

c001c7d6 <ATAPI::readyForCommand()>:
c001c7d6:	56                   	push   esi
c001c7d7:	53                   	push   ebx
c001c7d8:	53                   	push   ebx
c001c7d9:	31 db                	xor    ebx,ebx
c001c7db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7df:	51                   	push   ecx
c001c7e0:	6a 0c                	push   0xc
c001c7e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7e9:	50                   	push   eax
c001c7ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f0:	e8 a3 e8 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	a8 88                	test   al,0x88
c001c7fa:	74 25                	je     c001c821 <ATAPI::readyForCommand()+0x4b>
c001c7fc:	43                   	inc    ebx
c001c7fd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c803:	7e da                	jle    c001c7df <ATAPI::readyForCommand()+0x9>
c001c805:	83 ec 0c             	sub    esp,0xc
c001c808:	68 5e 01 00 00       	push   0x15e
c001c80d:	e8 9a 8e ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001c812:	83 c4 10             	add    esp,0x10
c001c815:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c81b:	75 c2                	jne    c001c7df <ATAPI::readyForCommand()+0x9>
c001c81d:	31 c0                	xor    eax,eax
c001c81f:	eb 02                	jmp    c001c823 <ATAPI::readyForCommand()+0x4d>
c001c821:	b0 01                	mov    al,0x1
c001c823:	5a                   	pop    edx
c001c824:	5b                   	pop    ebx
c001c825:	5e                   	pop    esi
c001c826:	c3                   	ret    
c001c827:	90                   	nop

c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	83 ec 20             	sub    esp,0x20
c001c82f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c833:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c837:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c83b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c83f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c843:	6a 01                	push   0x1
c001c845:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c84c:	50                   	push   eax
c001c84d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c853:	e8 88 e9 ff ff       	call   c001b1e0 <IDE::enableIRQs(unsigned char, bool)>
c001c858:	5e                   	pop    esi
c001c859:	58                   	pop    eax
c001c85a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c861:	50                   	push   eax
c001c862:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c868:	e8 45 e7 ff ff       	call   c001afb2 <IDE::prepareInterrupt(unsigned char)>
c001c86d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c870:	e8 61 ff ff ff       	call   c001c7d6 <ATAPI::readyForCommand()>
c001c875:	83 c4 10             	add    esp,0x10
c001c878:	84 c0                	test   al,al
c001c87a:	75 0a                	jne    c001c886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c87c:	bb 01 00 00 00       	mov    ebx,0x1
c001c881:	e9 60 02 00 00       	jmp    c001cae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c886:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c88c:	c1 e0 04             	shl    eax,0x4
c001c88f:	0f b6 c0             	movzx  eax,al
c001c892:	50                   	push   eax
c001c893:	6a 06                	push   0x6
c001c895:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c89c:	50                   	push   eax
c001c89d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a3:	e8 30 e7 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a8:	6a 00                	push   0x0
c001c8aa:	6a 01                	push   0x1
c001c8ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8b3:	50                   	push   eax
c001c8b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8ba:	e8 19 e7 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bf:	83 c4 20             	add    esp,0x20
c001c8c2:	0f b6 c3             	movzx  eax,bl
c001c8c5:	0f b6 df             	movzx  ebx,bh
c001c8c8:	50                   	push   eax
c001c8c9:	6a 04                	push   0x4
c001c8cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d2:	50                   	push   eax
c001c8d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8d9:	e8 fa e6 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8de:	53                   	push   ebx
c001c8df:	6a 05                	push   0x5
c001c8e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8e8:	50                   	push   eax
c001c8e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8ef:	e8 e4 e6 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f4:	83 c4 20             	add    esp,0x20
c001c8f7:	68 a0 00 00 00       	push   0xa0
c001c8fc:	6a 07                	push   0x7
c001c8fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c905:	50                   	push   eax
c001c906:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c90c:	e8 c7 e6 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c911:	83 c4 0c             	add    esp,0xc
c001c914:	6a 01                	push   0x1
c001c916:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c91d:	50                   	push   eax
c001c91e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c924:	e8 97 f1 ff ff       	call   c001bac0 <IDE::polling(unsigned char, unsigned int)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	0f b6 d8             	movzx  ebx,al
c001c92f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c935:	85 db                	test   ebx,ebx
c001c937:	74 20                	je     c001c959 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c939:	53                   	push   ebx
c001c93a:	0f b6 c0             	movzx  eax,al
c001c93d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c944:	52                   	push   edx
c001c945:	50                   	push   eax
c001c946:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c94c:	e8 b5 f0 ff ff       	call   c001ba06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c951:	83 c4 10             	add    esp,0x10
c001c954:	e9 8d 01 00 00       	jmp    c001cae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c959:	0f b6 c0             	movzx  eax,al
c001c95c:	53                   	push   ebx
c001c95d:	53                   	push   ebx
c001c95e:	50                   	push   eax
c001c95f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c965:	e8 5c e6 ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001c96a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c96e:	b9 06 00 00 00       	mov    ecx,0x6
c001c973:	89 c2                	mov    edx,eax
c001c975:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c978:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c984:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c988:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c98e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c995:	85 db                	test   ebx,ebx
c001c997:	0f 84 ec 00 00 00    	je     c001ca89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c99d:	51                   	push   ecx
c001c99e:	51                   	push   ecx
c001c99f:	52                   	push   edx
c001c9a0:	50                   	push   eax
c001c9a1:	e8 a0 e7 ff ff       	call   c001b146 <IDE::waitInterrupt(unsigned char)>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	84 c0                	test   al,al
c001c9ab:	0f 84 cb fe ff ff    	je     c001c87c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c9b1:	56                   	push   esi
c001c9b2:	56                   	push   esi
c001c9b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9ba:	50                   	push   eax
c001c9bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9c1:	e8 ec e5 ff ff       	call   c001afb2 <IDE::prepareInterrupt(unsigned char)>
c001c9c6:	83 c4 0c             	add    esp,0xc
c001c9c9:	6a 04                	push   0x4
c001c9cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9d2:	50                   	push   eax
c001c9d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9d9:	e8 ba e6 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001c9de:	83 c4 0c             	add    esp,0xc
c001c9e1:	89 c6                	mov    esi,eax
c001c9e3:	6a 05                	push   0x5
c001c9e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9ec:	50                   	push   eax
c001c9ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9f3:	e8 a0 e6 ff ff       	call   c001b098 <IDE::read(unsigned char, unsigned char)>
c001c9f8:	89 f1                	mov    ecx,esi
c001c9fa:	0f b6 c0             	movzx  eax,al
c001c9fd:	0f b6 f1             	movzx  esi,cl
c001ca00:	c1 e0 08             	shl    eax,0x8
c001ca03:	09 c6                	or     esi,eax
c001ca05:	d1 fe                	sar    esi,1
c001ca07:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ca13:	74 41                	je     c001ca56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001ca15:	31 c9                	xor    ecx,ecx
c001ca17:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca1d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca24:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ca28:	75 0a                	jne    c001ca34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001ca2a:	01 c9                	add    ecx,ecx
c001ca2c:	01 cd                	add    ebp,ecx
c001ca2e:	4b                   	dec    ebx
c001ca2f:	e9 54 ff ff ff       	jmp    c001c988 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001ca34:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ca39:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca3d:	51                   	push   ecx
c001ca3e:	51                   	push   ecx
c001ca3f:	52                   	push   edx
c001ca40:	50                   	push   eax
c001ca41:	e8 80 e5 ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001ca46:	89 c2                	mov    edx,eax
c001ca48:	89 f0                	mov    eax,esi
c001ca4a:	66 ef                	out    dx,ax
c001ca4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca50:	83 c4 10             	add    esp,0x10
c001ca53:	41                   	inc    ecx
c001ca54:	eb c1                	jmp    c001ca17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001ca56:	31 f6                	xor    esi,esi
c001ca58:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca5e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca65:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ca69:	75 06                	jne    c001ca71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001ca6b:	01 f6                	add    esi,esi
c001ca6d:	01 f5                	add    ebp,esi
c001ca6f:	eb bd                	jmp    c001ca2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001ca71:	51                   	push   ecx
c001ca72:	51                   	push   ecx
c001ca73:	52                   	push   edx
c001ca74:	50                   	push   eax
c001ca75:	e8 4c e5 ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001ca7a:	89 c2                	mov    edx,eax
c001ca7c:	66 ed                	in     ax,dx
c001ca7e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ca83:	83 c4 10             	add    esp,0x10
c001ca86:	46                   	inc    esi
c001ca87:	eb cf                	jmp    c001ca58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001ca89:	51                   	push   ecx
c001ca8a:	51                   	push   ecx
c001ca8b:	52                   	push   edx
c001ca8c:	50                   	push   eax
c001ca8d:	e8 b4 e6 ff ff       	call   c001b146 <IDE::waitInterrupt(unsigned char)>
c001ca92:	83 c4 10             	add    esp,0x10
c001ca95:	84 c0                	test   al,al
c001ca97:	0f 84 df fd ff ff    	je     c001c87c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca9d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001caa2:	52                   	push   edx
c001caa3:	52                   	push   edx
c001caa4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caab:	50                   	push   eax
c001caac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cab2:	e8 fb e4 ff ff       	call   c001afb2 <IDE::prepareInterrupt(unsigned char)>
c001cab7:	83 c4 10             	add    esp,0x10
c001caba:	50                   	push   eax
c001cabb:	50                   	push   eax
c001cabc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cac3:	50                   	push   eax
c001cac4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caca:	e8 f7 e4 ff ff       	call   c001afc6 <IDE::getBase(unsigned char)>
c001cacf:	8d 50 07             	lea    edx,[eax+0x7]
c001cad2:	ec                   	in     al,dx
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	a8 88                	test   al,0x88
c001cad8:	74 0a                	je     c001cae4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001cada:	4b                   	dec    ebx
c001cadb:	75 dd                	jne    c001caba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001cadd:	bb 02 00 00 00       	mov    ebx,0x2
c001cae2:	eb 02                	jmp    c001cae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001cae4:	31 db                	xor    ebx,ebx
c001cae6:	83 c4 1c             	add    esp,0x1c
c001cae9:	89 d8                	mov    eax,ebx
c001caeb:	5b                   	pop    ebx
c001caec:	5e                   	pop    esi
c001caed:	5f                   	pop    edi
c001caee:	5d                   	pop    ebp
c001caef:	c3                   	ret    

c001caf0 <ATAPI::diskRemoved()>:
c001caf0:	53                   	push   ebx
c001caf1:	83 ec 14             	sub    esp,0x14
c001caf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001caf8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001caff:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001cb05:	e8 a0 08 ff ff       	call   c000d3aa <LogicalDisk::unmount()>
c001cb0a:	58                   	pop    eax
c001cb0b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cb11:	e8 76 12 ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c001cb16:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cb1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb20:	83 c4 18             	add    esp,0x18
c001cb23:	5b                   	pop    ebx
c001cb24:	e9 53 12 ff ff       	jmp    c000dd7c <VCache::invalidateReadBuffer()>
c001cb29:	90                   	nop

c001cb2a <ATAPI::eject()>:
c001cb2a:	57                   	push   edi
c001cb2b:	b9 03 00 00 00       	mov    ecx,0x3
c001cb30:	53                   	push   ebx
c001cb31:	83 ec 14             	sub    esp,0x14
c001cb34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb3c:	fc                   	cld    
c001cb3d:	31 c0                	xor    eax,eax
c001cb3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb41:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb46:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb4b:	50                   	push   eax
c001cb4c:	50                   	push   eax
c001cb4d:	6a 00                	push   0x0
c001cb4f:	6a 00                	push   0x0
c001cb51:	6a 00                	push   0x0
c001cb53:	6a 02                	push   0x2
c001cb55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb59:	50                   	push   eax
c001cb5a:	53                   	push   ebx
c001cb5b:	e8 c8 fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb60:	83 c4 14             	add    esp,0x14
c001cb63:	53                   	push   ebx
c001cb64:	e8 87 ff ff ff       	call   c001caf0 <ATAPI::diskRemoved()>
c001cb69:	83 c4 24             	add    esp,0x24
c001cb6c:	31 c0                	xor    eax,eax
c001cb6e:	5b                   	pop    ebx
c001cb6f:	5f                   	pop    edi
c001cb70:	c3                   	ret    
c001cb71:	90                   	nop

c001cb72 <ATAPI::diskInserted()>:
c001cb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb76:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cb7d:	c3                   	ret    

c001cb7e <ATAPI::detectMedia()>:
c001cb7e:	56                   	push   esi
c001cb7f:	53                   	push   ebx
c001cb80:	83 ec 28             	sub    esp,0x28
c001cb83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb87:	6a 0c                	push   0xc
c001cb89:	6a 00                	push   0x0
c001cb8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cb8f:	56                   	push   esi
c001cb90:	e8 5b 39 fe ff       	call   c00004f0 <memset>
c001cb95:	58                   	pop    eax
c001cb96:	5a                   	pop    edx
c001cb97:	6a 00                	push   0x0
c001cb99:	6a 00                	push   0x0
c001cb9b:	6a 00                	push   0x0
c001cb9d:	6a 00                	push   0x0
c001cb9f:	56                   	push   esi
c001cba0:	53                   	push   ebx
c001cba1:	e8 82 fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cba6:	83 c4 1c             	add    esp,0x1c
c001cba9:	6a 0c                	push   0xc
c001cbab:	6a 00                	push   0x0
c001cbad:	56                   	push   esi
c001cbae:	e8 3d 39 fe ff       	call   c00004f0 <memset>
c001cbb3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cbb8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cbbd:	59                   	pop    ecx
c001cbbe:	58                   	pop    eax
c001cbbf:	6a 01                	push   0x1
c001cbc1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbc5:	50                   	push   eax
c001cbc6:	6a 00                	push   0x0
c001cbc8:	6a 12                	push   0x12
c001cbca:	56                   	push   esi
c001cbcb:	53                   	push   ebx
c001cbcc:	e8 57 fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbd1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cbd5:	83 c4 20             	add    esp,0x20
c001cbd8:	83 e0 7f             	and    eax,0x7f
c001cbdb:	83 f8 70             	cmp    eax,0x70
c001cbde:	74 15                	je     c001cbf5 <ATAPI::detectMedia()+0x77>
c001cbe0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbe7:	75 0c                	jne    c001cbf5 <ATAPI::detectMedia()+0x77>
c001cbe9:	83 ec 0c             	sub    esp,0xc
c001cbec:	53                   	push   ebx
c001cbed:	e8 80 ff ff ff       	call   c001cb72 <ATAPI::diskInserted()>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cbf9:	83 e0 0f             	and    eax,0xf
c001cbfc:	83 f8 02             	cmp    eax,0x2
c001cbff:	75 1b                	jne    c001cc1c <ATAPI::detectMedia()+0x9e>
c001cc01:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc06:	75 2d                	jne    c001cc35 <ATAPI::detectMedia()+0xb7>
c001cc08:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc0f:	74 24                	je     c001cc35 <ATAPI::detectMedia()+0xb7>
c001cc11:	83 ec 0c             	sub    esp,0xc
c001cc14:	53                   	push   ebx
c001cc15:	e8 d6 fe ff ff       	call   c001caf0 <ATAPI::diskRemoved()>
c001cc1a:	eb 16                	jmp    c001cc32 <ATAPI::detectMedia()+0xb4>
c001cc1c:	85 c0                	test   eax,eax
c001cc1e:	75 15                	jne    c001cc35 <ATAPI::detectMedia()+0xb7>
c001cc20:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc27:	75 0c                	jne    c001cc35 <ATAPI::detectMedia()+0xb7>
c001cc29:	83 ec 0c             	sub    esp,0xc
c001cc2c:	53                   	push   ebx
c001cc2d:	e8 40 ff ff ff       	call   c001cb72 <ATAPI::diskInserted()>
c001cc32:	83 c4 10             	add    esp,0x10
c001cc35:	83 c4 24             	add    esp,0x24
c001cc38:	5b                   	pop    ebx
c001cc39:	5e                   	pop    esi
c001cc3a:	c3                   	ret    
c001cc3b:	90                   	nop

c001cc3c <ATAPI::open(int, int, void*)>:
c001cc3c:	56                   	push   esi
c001cc3d:	53                   	push   ebx
c001cc3e:	50                   	push   eax
c001cc3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc4b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc51:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc57:	c1 e0 06             	shl    eax,0x6
c001cc5a:	01 d0                	add    eax,edx
c001cc5c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc63:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc69:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cc70:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cc7a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cc80:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cc87:	6a 04                	push   0x4
c001cc89:	6a 0c                	push   0xc
c001cc8b:	51                   	push   ecx
c001cc8c:	52                   	push   edx
c001cc8d:	e8 46 e3 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc92:	90                   	nop
c001cc93:	90                   	nop
c001cc94:	6a 00                	push   0x0
c001cc96:	6a 0c                	push   0xc
c001cc98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc9f:	50                   	push   eax
c001cca0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cca6:	e8 2d e3 ff ff       	call   c001afd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccab:	83 c4 14             	add    esp,0x14
c001ccae:	68 78 01 00 00       	push   0x178
c001ccb3:	e8 f6 ad fe ff       	call   c0007aae <malloc>
c001ccb8:	83 c4 0c             	add    esp,0xc
c001ccbb:	89 c6                	mov    esi,eax
c001ccbd:	6a 00                	push   0x0
c001ccbf:	68 ff ff ff 7f       	push   0x7fffffff
c001ccc4:	6a 00                	push   0x0
c001ccc6:	6a 00                	push   0x0
c001ccc8:	53                   	push   ebx
c001ccc9:	68 03 25 02 c0       	push   0xc0022503
c001ccce:	50                   	push   eax
c001cccf:	e8 14 05 ff ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ccd4:	83 c4 14             	add    esp,0x14
c001ccd7:	56                   	push   esi
c001ccd8:	e8 cb 05 ff ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c001ccdd:	5a                   	pop    edx
c001ccde:	0f be c0             	movsx  eax,al
c001cce1:	59                   	pop    ecx
c001cce2:	50                   	push   eax
c001cce3:	68 54 23 02 c0       	push   0xc0022354
c001cce8:	e8 4c dc fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001cced:	58                   	pop    eax
c001ccee:	5a                   	pop    edx
c001ccef:	56                   	push   esi
c001ccf0:	53                   	push   ebx
c001ccf1:	e8 4c f3 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001ccf6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ccfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccff:	e8 72 f7 fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001cd04:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cd0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd0e:	e8 6b fe ff ff       	call   c001cb7e <ATAPI::detectMedia()>
c001cd13:	83 c4 14             	add    esp,0x14
c001cd16:	31 c0                	xor    eax,eax
c001cd18:	5b                   	pop    ebx
c001cd19:	5e                   	pop    esi
c001cd1a:	c3                   	ret    
c001cd1b:	90                   	nop

c001cd1c <ATAPI::read(unsigned long long, int, void*)>:
c001cd1c:	55                   	push   ebp
c001cd1d:	57                   	push   edi
c001cd1e:	56                   	push   esi
c001cd1f:	53                   	push   ebx
c001cd20:	83 ec 1c             	sub    esp,0x1c
c001cd23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd27:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cd2b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cd2f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd36:	74 3c                	je     c001cd74 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cd38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd3c:	b9 03 00 00 00       	mov    ecx,0x3
c001cd41:	fc                   	cld    
c001cd42:	31 c0                	xor    eax,eax
c001cd44:	0f ce                	bswap  esi
c001cd46:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd48:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cd4d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cd51:	89 e8                	mov    eax,ebp
c001cd53:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cd57:	50                   	push   eax
c001cd58:	50                   	push   eax
c001cd59:	55                   	push   ebp
c001cd5a:	c1 e5 0b             	shl    ebp,0xb
c001cd5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd61:	6a 00                	push   0x0
c001cd63:	55                   	push   ebp
c001cd64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd68:	50                   	push   eax
c001cd69:	53                   	push   ebx
c001cd6a:	e8 b9 fa ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd6f:	83 c4 20             	add    esp,0x20
c001cd72:	eb 1a                	jmp    c001cd8e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	53                   	push   ebx
c001cd78:	e8 01 fe ff ff       	call   c001cb7e <ATAPI::detectMedia()>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd87:	75 af                	jne    c001cd38 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cd89:	b8 02 00 00 00       	mov    eax,0x2
c001cd8e:	83 c4 1c             	add    esp,0x1c
c001cd91:	5b                   	pop    ebx
c001cd92:	5e                   	pop    esi
c001cd93:	5f                   	pop    edi
c001cd94:	5d                   	pop    ebp
c001cd95:	c3                   	ret    

c001cd96 <SATA::close(int, int, void*)>:
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cda3:	85 c0                	test   eax,eax
c001cda5:	74 0c                	je     c001cdb3 <SATA::close(int, int, void*)+0x1d>
c001cda7:	83 ec 0c             	sub    esp,0xc
c001cdaa:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdac:	50                   	push   eax
c001cdad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	31 c0                	xor    eax,eax
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	c3                   	ret    
c001cdb9:	90                   	nop

c001cdba <SATA::powerSaving(PowerSavingLevel)>:
c001cdba:	c3                   	ret    
c001cdbb:	90                   	nop

c001cdbc <SATA::open(int, int, void*)>:
c001cdbc:	56                   	push   esi
c001cdbd:	53                   	push   ebx
c001cdbe:	50                   	push   eax
c001cdbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdc7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdd1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cdd7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cde1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cde5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cdef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cdf5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cdfc:	e8 b1 af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001ce01:	89 c6                	mov    esi,eax
c001ce03:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce09:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce0f:	e8 9e af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001ce14:	39 c6                	cmp    esi,eax
c001ce16:	74 10                	je     c001ce28 <SATA::open(int, int, void*)+0x6c>
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	68 9c 23 02 c0       	push   0xc002239c
c001ce20:	e8 94 3d ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	6a 02                	push   0x2
c001ce2d:	e8 cf c7 fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001ce32:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce38:	6a 03                	push   0x3
c001ce3a:	50                   	push   eax
c001ce3b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ce41:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ce47:	e8 c8 ce fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce4c:	83 c4 14             	add    esp,0x14
c001ce4f:	53                   	push   ebx
c001ce50:	e8 21 f6 fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001ce55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce58:	e8 5d 08 ff ff       	call   c000d6ba <createPartitionsForDisk(PhysicalDisk*)>
c001ce5d:	83 c4 14             	add    esp,0x14
c001ce60:	31 c0                	xor    eax,eax
c001ce62:	5b                   	pop    ebx
c001ce63:	5e                   	pop    esi
c001ce64:	c3                   	ret    
c001ce65:	90                   	nop

c001ce66 <SATA::SATA()>:
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6d:	83 ec 04             	sub    esp,0x4
c001ce70:	68 00 02 00 00       	push   0x200
c001ce75:	68 b0 23 02 c0       	push   0xc00223b0
c001ce7a:	50                   	push   eax
c001ce7b:	e8 8e f5 fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce80:	83 c4 10             	add    esp,0x10
c001ce83:	ba 20 24 02 c0       	mov    edx,0xc0022420
c001ce88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8c:	89 10                	mov    DWORD PTR [eax],edx
c001ce8e:	90                   	nop
c001ce8f:	83 c4 0c             	add    esp,0xc
c001ce92:	c3                   	ret    
c001ce93:	90                   	nop

c001ce94 <SATA::access(unsigned long long, int, void*, bool)>:
c001ce94:	55                   	push   ebp
c001ce95:	57                   	push   edi
c001ce96:	56                   	push   esi
c001ce97:	53                   	push   ebx
c001ce98:	83 ec 2c             	sub    esp,0x2c
c001ce9b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ce9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cea3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cea7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ceab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ceaf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ceb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ceb8:	7e 10                	jle    c001ceca <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ceba:	83 ec 0c             	sub    esp,0xc
c001cebd:	68 c0 23 02 c0       	push   0xc00223c0
c001cec2:	e8 f2 3c ff ff       	call   c0010bb9 <KePanic(char const*)>
c001cec7:	83 c4 10             	add    esp,0x10
c001ceca:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ced0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ced6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cedc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cee0:	89 d0                	mov    eax,edx
c001cee2:	c1 e0 07             	shl    eax,0x7
c001cee5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cee9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cef3:	51                   	push   ecx
c001cef4:	8d 42 02             	lea    eax,[edx+0x2]
c001cef7:	51                   	push   ecx
c001cef8:	c1 e0 07             	shl    eax,0x7
c001cefb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ceff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cf03:	50                   	push   eax
c001cf04:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cf0a:	e8 91 ec ff ff       	call   c001bba0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cf0f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cf1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf1f:	0f 84 57 01 00 00    	je     c001d07c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cf25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cf29:	c1 e0 09             	shl    eax,0x9
c001cf2c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cf31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf35:	74 0e                	je     c001cf45 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cf37:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cf3d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cf41:	89 c1                	mov    ecx,eax
c001cf43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf45:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf4f:	8d 42 02             	lea    eax,[edx+0x2]
c001cf52:	c1 e0 07             	shl    eax,0x7
c001cf55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cf59:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf5b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cf61:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cf67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf6b:	c1 e1 05             	shl    ecx,0x5
c001cf6e:	01 c8                	add    eax,ecx
c001cf70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf74:	83 e1 01             	and    ecx,0x1
c001cf77:	89 ce                	mov    esi,ecx
c001cf79:	8a 08                	mov    cl,BYTE PTR [eax]
c001cf7b:	c1 e6 06             	shl    esi,0x6
c001cf7e:	83 e1 bf             	and    ecx,0xffffffbf
c001cf81:	09 f1                	or     ecx,esi
c001cf83:	88 08                	mov    BYTE PTR [eax],cl
c001cf85:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cf87:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cf8d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cf93:	89 08                	mov    DWORD PTR [eax],ecx
c001cf95:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf9b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cfa1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cfa7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cfaa:	50                   	push   eax
c001cfab:	68 90 00 00 00       	push   0x90
c001cfb0:	6a 00                	push   0x0
c001cfb2:	56                   	push   esi
c001cfb3:	e8 38 35 fe ff       	call   c00004f0 <memset>
c001cfb8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cfbe:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cfc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfc8:	83 c4 10             	add    esp,0x10
c001cfcb:	48                   	dec    eax
c001cfcc:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cfd1:	89 c1                	mov    ecx,eax
c001cfd3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cfd9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cfde:	09 c8                	or     eax,ecx
c001cfe0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cfe6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cfec:	83 c8 80             	or     eax,0xffffff80
c001cfef:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cff5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cff8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cffc:	25 00 7f 00 00       	and    eax,0x7f00
c001d001:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d006:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d00b:	66 89 06             	mov    WORD PTR [esi],ax
c001d00e:	b0 35                	mov    al,0x35
c001d010:	75 02                	jne    c001d014 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d012:	b0 25                	mov    al,0x25
c001d014:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d017:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d01b:	89 e8                	mov    eax,ebp
c001d01d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d021:	c1 e8 10             	shr    eax,0x10
c001d024:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d027:	89 e8                	mov    eax,ebp
c001d029:	c1 e8 18             	shr    eax,0x18
c001d02c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d02f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d033:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d036:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d03a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d03d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d041:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d045:	89 d6                	mov    esi,edx
c001d047:	31 c0                	xor    eax,eax
c001d049:	c1 e6 07             	shl    esi,0x7
c001d04c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d050:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d056:	80 e1 88             	and    cl,0x88
c001d059:	74 0a                	je     c001d065 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d05b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d060:	74 0a                	je     c001d06c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d062:	40                   	inc    eax
c001d063:	eb eb                	jmp    c001d050 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d065:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d06a:	75 17                	jne    c001d083 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	68 f9 23 02 c0       	push   0xc00223f9
c001d074:	e8 c0 d8 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	b8 01 00 00 00       	mov    eax,0x1
c001d081:	eb 5d                	jmp    c001d0e0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d083:	b8 01 00 00 00       	mov    eax,0x1
c001d088:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d08c:	c1 e2 07             	shl    edx,0x7
c001d08f:	d3 e0                	shl    eax,cl
c001d091:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d095:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d09b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d0a1:	85 c8                	test   eax,ecx
c001d0a3:	74 16                	je     c001d0bb <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d0a5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d0ab:	0f ba e1 1e          	bt     ecx,0x1e
c001d0af:	73 ea                	jae    c001d09b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d0b1:	83 ec 0c             	sub    esp,0xc
c001d0b4:	68 07 24 02 c0       	push   0xc0022407
c001d0b9:	eb b9                	jmp    c001d074 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d0bb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d0c1:	0f ba e0 1e          	bt     eax,0x1e
c001d0c5:	72 b5                	jb     c001d07c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d0c7:	31 c0                	xor    eax,eax
c001d0c9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d0ce:	75 10                	jne    c001d0e0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d0d0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d0d6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d0da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d0de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0e0:	83 c4 2c             	add    esp,0x2c
c001d0e3:	5b                   	pop    ebx
c001d0e4:	5e                   	pop    esi
c001d0e5:	5f                   	pop    edi
c001d0e6:	5d                   	pop    ebp
c001d0e7:	c3                   	ret    

c001d0e8 <SATA::read(unsigned long long, int, void*)>:
c001d0e8:	55                   	push   ebp
c001d0e9:	57                   	push   edi
c001d0ea:	56                   	push   esi
c001d0eb:	be 04 00 00 00       	mov    esi,0x4
c001d0f0:	53                   	push   ebx
c001d0f1:	83 ec 0c             	sub    esp,0xc
c001d0f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d0f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0fc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d0ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d103:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d107:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d10d:	0f 87 1a 02 00 00    	ja     c001d32d <SATA::read(unsigned long long, int, void*)+0x245>
c001d113:	be 06 00 00 00       	mov    esi,0x6
c001d118:	85 c9                	test   ecx,ecx
c001d11a:	0f 84 0d 02 00 00    	je     c001d32d <SATA::read(unsigned long long, int, void*)+0x245>
c001d120:	56                   	push   esi
c001d121:	56                   	push   esi
c001d122:	6a 00                	push   0x0
c001d124:	51                   	push   ecx
c001d125:	53                   	push   ebx
c001d126:	52                   	push   edx
c001d127:	50                   	push   eax
c001d128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d12c:	e8 63 fd ff ff       	call   c001ce94 <SATA::access(unsigned long long, int, void*, bool)>
c001d131:	83 c4 20             	add    esp,0x20
c001d134:	89 c6                	mov    esi,eax
c001d136:	85 c0                	test   eax,eax
c001d138:	0f 85 ea 01 00 00    	jne    c001d328 <SATA::read(unsigned long long, int, void*)+0x240>
c001d13e:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001d144:	bb 0a 00 00 00       	mov    ebx,0xa
c001d149:	50                   	push   eax
c001d14a:	50                   	push   eax
c001d14b:	6a 0f                	push   0xf
c001d14d:	6a 00                	push   0x0
c001d14f:	e8 75 f2 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d154:	5a                   	pop    edx
c001d155:	0f b6 c0             	movzx  eax,al
c001d158:	59                   	pop    ecx
c001d159:	b9 10 27 00 00       	mov    ecx,0x2710
c001d15e:	50                   	push   eax
c001d15f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d164:	99                   	cdq    
c001d165:	f7 f9                	idiv   ecx
c001d167:	99                   	cdq    
c001d168:	f7 fb                	idiv   ebx
c001d16a:	8d 42 30             	lea    eax,[edx+0x30]
c001d16d:	0f b6 c0             	movzx  eax,al
c001d170:	50                   	push   eax
c001d171:	e8 42 f2 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d176:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d17c:	5f                   	pop    edi
c001d17d:	5d                   	pop    ebp
c001d17e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d183:	6a 0f                	push   0xf
c001d185:	6a 00                	push   0x0
c001d187:	e8 3d f2 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d18c:	5a                   	pop    edx
c001d18d:	0f b6 c0             	movzx  eax,al
c001d190:	59                   	pop    ecx
c001d191:	50                   	push   eax
c001d192:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d197:	99                   	cdq    
c001d198:	f7 fd                	idiv   ebp
c001d19a:	99                   	cdq    
c001d19b:	f7 fb                	idiv   ebx
c001d19d:	8d 42 30             	lea    eax,[edx+0x30]
c001d1a0:	0f b6 c0             	movzx  eax,al
c001d1a3:	50                   	push   eax
c001d1a4:	e8 0f f2 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d1a9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1af:	5f                   	pop    edi
c001d1b0:	bf 64 00 00 00       	mov    edi,0x64
c001d1b5:	58                   	pop    eax
c001d1b6:	6a 0f                	push   0xf
c001d1b8:	6a 00                	push   0x0
c001d1ba:	e8 0a f2 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d1bf:	5a                   	pop    edx
c001d1c0:	0f b6 c0             	movzx  eax,al
c001d1c3:	59                   	pop    ecx
c001d1c4:	50                   	push   eax
c001d1c5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1ca:	99                   	cdq    
c001d1cb:	f7 ff                	idiv   edi
c001d1cd:	99                   	cdq    
c001d1ce:	f7 fb                	idiv   ebx
c001d1d0:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d3:	0f b6 c0             	movzx  eax,al
c001d1d6:	50                   	push   eax
c001d1d7:	e8 dc f1 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d1dc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d1e2:	58                   	pop    eax
c001d1e3:	5a                   	pop    edx
c001d1e4:	6a 0f                	push   0xf
c001d1e6:	6a 00                	push   0x0
c001d1e8:	e8 dc f1 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d1ed:	59                   	pop    ecx
c001d1ee:	0f b6 c0             	movzx  eax,al
c001d1f1:	5a                   	pop    edx
c001d1f2:	50                   	push   eax
c001d1f3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1f8:	99                   	cdq    
c001d1f9:	f7 fb                	idiv   ebx
c001d1fb:	99                   	cdq    
c001d1fc:	f7 fb                	idiv   ebx
c001d1fe:	8d 42 30             	lea    eax,[edx+0x30]
c001d201:	0f b6 c0             	movzx  eax,al
c001d204:	50                   	push   eax
c001d205:	e8 ae f1 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d20a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d210:	59                   	pop    ecx
c001d211:	58                   	pop    eax
c001d212:	6a 0f                	push   0xf
c001d214:	6a 00                	push   0x0
c001d216:	e8 ae f1 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d21b:	5a                   	pop    edx
c001d21c:	0f b6 c0             	movzx  eax,al
c001d21f:	59                   	pop    ecx
c001d220:	50                   	push   eax
c001d221:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d226:	99                   	cdq    
c001d227:	f7 fb                	idiv   ebx
c001d229:	8d 42 30             	lea    eax,[edx+0x30]
c001d22c:	0f b6 c0             	movzx  eax,al
c001d22f:	50                   	push   eax
c001d230:	e8 83 f1 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d235:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d23b:	58                   	pop    eax
c001d23c:	5a                   	pop    edx
c001d23d:	6a 0f                	push   0xf
c001d23f:	6a 00                	push   0x0
c001d241:	e8 83 f1 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d246:	59                   	pop    ecx
c001d247:	0f b6 c0             	movzx  eax,al
c001d24a:	5a                   	pop    edx
c001d24b:	b9 10 27 00 00       	mov    ecx,0x2710
c001d250:	50                   	push   eax
c001d251:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d256:	99                   	cdq    
c001d257:	f7 f9                	idiv   ecx
c001d259:	99                   	cdq    
c001d25a:	f7 fb                	idiv   ebx
c001d25c:	8d 42 30             	lea    eax,[edx+0x30]
c001d25f:	0f b6 c0             	movzx  eax,al
c001d262:	50                   	push   eax
c001d263:	e8 50 f1 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d268:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d26e:	59                   	pop    ecx
c001d26f:	58                   	pop    eax
c001d270:	6a 0f                	push   0xf
c001d272:	6a 00                	push   0x0
c001d274:	e8 50 f1 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d279:	5a                   	pop    edx
c001d27a:	0f b6 c0             	movzx  eax,al
c001d27d:	59                   	pop    ecx
c001d27e:	50                   	push   eax
c001d27f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d284:	99                   	cdq    
c001d285:	f7 fd                	idiv   ebp
c001d287:	99                   	cdq    
c001d288:	f7 fb                	idiv   ebx
c001d28a:	8d 42 30             	lea    eax,[edx+0x30]
c001d28d:	0f b6 c0             	movzx  eax,al
c001d290:	50                   	push   eax
c001d291:	e8 22 f1 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d296:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d29c:	5d                   	pop    ebp
c001d29d:	58                   	pop    eax
c001d29e:	6a 0f                	push   0xf
c001d2a0:	6a 00                	push   0x0
c001d2a2:	e8 22 f1 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d2a7:	5a                   	pop    edx
c001d2a8:	0f b6 c0             	movzx  eax,al
c001d2ab:	59                   	pop    ecx
c001d2ac:	50                   	push   eax
c001d2ad:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2b2:	99                   	cdq    
c001d2b3:	f7 ff                	idiv   edi
c001d2b5:	99                   	cdq    
c001d2b6:	f7 fb                	idiv   ebx
c001d2b8:	8d 42 30             	lea    eax,[edx+0x30]
c001d2bb:	0f b6 c0             	movzx  eax,al
c001d2be:	50                   	push   eax
c001d2bf:	e8 f4 f0 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d2c4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2ca:	5f                   	pop    edi
c001d2cb:	5d                   	pop    ebp
c001d2cc:	6a 0f                	push   0xf
c001d2ce:	6a 00                	push   0x0
c001d2d0:	e8 f4 f0 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d2d5:	5a                   	pop    edx
c001d2d6:	0f b6 c0             	movzx  eax,al
c001d2d9:	59                   	pop    ecx
c001d2da:	50                   	push   eax
c001d2db:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2e0:	99                   	cdq    
c001d2e1:	f7 fb                	idiv   ebx
c001d2e3:	99                   	cdq    
c001d2e4:	f7 fb                	idiv   ebx
c001d2e6:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e9:	0f b6 c0             	movzx  eax,al
c001d2ec:	50                   	push   eax
c001d2ed:	e8 c6 f0 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d2f2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2f8:	5f                   	pop    edi
c001d2f9:	5d                   	pop    ebp
c001d2fa:	6a 0f                	push   0xf
c001d2fc:	6a 00                	push   0x0
c001d2fe:	e8 c6 f0 ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d303:	5a                   	pop    edx
c001d304:	0f b6 c0             	movzx  eax,al
c001d307:	59                   	pop    ecx
c001d308:	50                   	push   eax
c001d309:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d30e:	99                   	cdq    
c001d30f:	f7 fb                	idiv   ebx
c001d311:	83 c2 30             	add    edx,0x30
c001d314:	0f b6 d2             	movzx  edx,dl
c001d317:	52                   	push   edx
c001d318:	e8 9b f0 ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d326:	eb 05                	jmp    c001d32d <SATA::read(unsigned long long, int, void*)+0x245>
c001d328:	be 01 00 00 00       	mov    esi,0x1
c001d32d:	83 c4 0c             	add    esp,0xc
c001d330:	89 f0                	mov    eax,esi
c001d332:	5b                   	pop    ebx
c001d333:	5e                   	pop    esi
c001d334:	5f                   	pop    edi
c001d335:	5d                   	pop    ebp
c001d336:	c3                   	ret    
c001d337:	90                   	nop

c001d338 <SATA::write(unsigned long long, int, void*)>:
c001d338:	55                   	push   ebp
c001d339:	b8 04 00 00 00       	mov    eax,0x4
c001d33e:	57                   	push   edi
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	83 ec 1c             	sub    esp,0x1c
c001d344:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d348:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d34c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d34f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d353:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d357:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d35d:	0f 87 32 02 00 00    	ja     c001d595 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d363:	b8 06 00 00 00       	mov    eax,0x6
c001d368:	85 ff                	test   edi,edi
c001d36a:	0f 84 25 02 00 00    	je     c001d595 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d370:	89 ee                	mov    esi,ebp
c001d372:	c1 e6 09             	shl    esi,0x9
c001d375:	01 fe                	add    esi,edi
c001d377:	89 c8                	mov    eax,ecx
c001d379:	89 da                	mov    edx,ebx
c001d37b:	83 c0 01             	add    eax,0x1
c001d37e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d382:	83 d2 00             	adc    edx,0x0
c001d385:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d389:	50                   	push   eax
c001d38a:	50                   	push   eax
c001d38b:	6a 01                	push   0x1
c001d38d:	57                   	push   edi
c001d38e:	81 c7 00 02 00 00    	add    edi,0x200
c001d394:	6a 01                	push   0x1
c001d396:	53                   	push   ebx
c001d397:	51                   	push   ecx
c001d398:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d39c:	e8 f3 fa ff ff       	call   c001ce94 <SATA::access(unsigned long long, int, void*, bool)>
c001d3a1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d3a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3a9:	83 c4 20             	add    esp,0x20
c001d3ac:	39 f7                	cmp    edi,esi
c001d3ae:	75 c7                	jne    c001d377 <SATA::write(unsigned long long, int, void*)+0x3f>
c001d3b0:	bb 0a 00 00 00       	mov    ebx,0xa
c001d3b5:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d3bb:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3c0:	50                   	push   eax
c001d3c1:	50                   	push   eax
c001d3c2:	6a 0f                	push   0xf
c001d3c4:	6a 00                	push   0x0
c001d3c6:	e8 fe ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d3cb:	5a                   	pop    edx
c001d3cc:	0f b6 c0             	movzx  eax,al
c001d3cf:	59                   	pop    ecx
c001d3d0:	50                   	push   eax
c001d3d1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d3d6:	99                   	cdq    
c001d3d7:	f7 fd                	idiv   ebp
c001d3d9:	99                   	cdq    
c001d3da:	f7 fb                	idiv   ebx
c001d3dc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3df:	0f b6 c0             	movzx  eax,al
c001d3e2:	50                   	push   eax
c001d3e3:	e8 d0 ef ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d3e8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3ee:	5e                   	pop    esi
c001d3ef:	5f                   	pop    edi
c001d3f0:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3f5:	6a 0f                	push   0xf
c001d3f7:	6a 00                	push   0x0
c001d3f9:	e8 cb ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d3fe:	5a                   	pop    edx
c001d3ff:	0f b6 c0             	movzx  eax,al
c001d402:	59                   	pop    ecx
c001d403:	50                   	push   eax
c001d404:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d409:	99                   	cdq    
c001d40a:	f7 ff                	idiv   edi
c001d40c:	99                   	cdq    
c001d40d:	f7 fb                	idiv   ebx
c001d40f:	8d 42 30             	lea    eax,[edx+0x30]
c001d412:	0f b6 c0             	movzx  eax,al
c001d415:	50                   	push   eax
c001d416:	e8 9d ef ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d41b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d421:	5e                   	pop    esi
c001d422:	be 64 00 00 00       	mov    esi,0x64
c001d427:	58                   	pop    eax
c001d428:	6a 0f                	push   0xf
c001d42a:	6a 00                	push   0x0
c001d42c:	e8 98 ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d431:	5a                   	pop    edx
c001d432:	0f b6 c0             	movzx  eax,al
c001d435:	59                   	pop    ecx
c001d436:	50                   	push   eax
c001d437:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d43c:	99                   	cdq    
c001d43d:	f7 fe                	idiv   esi
c001d43f:	99                   	cdq    
c001d440:	f7 fb                	idiv   ebx
c001d442:	8d 42 30             	lea    eax,[edx+0x30]
c001d445:	0f b6 c0             	movzx  eax,al
c001d448:	50                   	push   eax
c001d449:	e8 6a ef ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d44e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d454:	58                   	pop    eax
c001d455:	5a                   	pop    edx
c001d456:	6a 0f                	push   0xf
c001d458:	6a 00                	push   0x0
c001d45a:	e8 6a ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d45f:	59                   	pop    ecx
c001d460:	0f b6 c0             	movzx  eax,al
c001d463:	5a                   	pop    edx
c001d464:	50                   	push   eax
c001d465:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d46a:	99                   	cdq    
c001d46b:	f7 fb                	idiv   ebx
c001d46d:	99                   	cdq    
c001d46e:	f7 fb                	idiv   ebx
c001d470:	8d 42 30             	lea    eax,[edx+0x30]
c001d473:	0f b6 c0             	movzx  eax,al
c001d476:	50                   	push   eax
c001d477:	e8 3c ef ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d47c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d482:	59                   	pop    ecx
c001d483:	58                   	pop    eax
c001d484:	6a 0f                	push   0xf
c001d486:	6a 00                	push   0x0
c001d488:	e8 3c ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d48d:	5a                   	pop    edx
c001d48e:	0f b6 c0             	movzx  eax,al
c001d491:	59                   	pop    ecx
c001d492:	50                   	push   eax
c001d493:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d498:	99                   	cdq    
c001d499:	f7 fb                	idiv   ebx
c001d49b:	83 c2 30             	add    edx,0x30
c001d49e:	0f b6 d2             	movzx  edx,dl
c001d4a1:	52                   	push   edx
c001d4a2:	e8 11 ef ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d4a7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4ad:	58                   	pop    eax
c001d4ae:	5a                   	pop    edx
c001d4af:	6a 0f                	push   0xf
c001d4b1:	6a 00                	push   0x0
c001d4b3:	e8 11 ef ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d4b8:	59                   	pop    ecx
c001d4b9:	0f b6 c0             	movzx  eax,al
c001d4bc:	5a                   	pop    edx
c001d4bd:	50                   	push   eax
c001d4be:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d4c3:	99                   	cdq    
c001d4c4:	f7 fd                	idiv   ebp
c001d4c6:	99                   	cdq    
c001d4c7:	f7 fb                	idiv   ebx
c001d4c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cc:	0f b6 c0             	movzx  eax,al
c001d4cf:	50                   	push   eax
c001d4d0:	e8 e3 ee ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d4d5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4db:	59                   	pop    ecx
c001d4dc:	5d                   	pop    ebp
c001d4dd:	6a 0f                	push   0xf
c001d4df:	6a 00                	push   0x0
c001d4e1:	e8 e3 ee ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d4e6:	5a                   	pop    edx
c001d4e7:	0f b6 c0             	movzx  eax,al
c001d4ea:	59                   	pop    ecx
c001d4eb:	50                   	push   eax
c001d4ec:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d4f1:	99                   	cdq    
c001d4f2:	f7 ff                	idiv   edi
c001d4f4:	99                   	cdq    
c001d4f5:	f7 fb                	idiv   ebx
c001d4f7:	8d 42 30             	lea    eax,[edx+0x30]
c001d4fa:	0f b6 c0             	movzx  eax,al
c001d4fd:	50                   	push   eax
c001d4fe:	e8 b5 ee ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d503:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d509:	5f                   	pop    edi
c001d50a:	5d                   	pop    ebp
c001d50b:	6a 0f                	push   0xf
c001d50d:	6a 00                	push   0x0
c001d50f:	e8 b5 ee ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d514:	5a                   	pop    edx
c001d515:	0f b6 c0             	movzx  eax,al
c001d518:	59                   	pop    ecx
c001d519:	50                   	push   eax
c001d51a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d51f:	99                   	cdq    
c001d520:	f7 fe                	idiv   esi
c001d522:	99                   	cdq    
c001d523:	f7 fb                	idiv   ebx
c001d525:	8d 42 30             	lea    eax,[edx+0x30]
c001d528:	0f b6 c0             	movzx  eax,al
c001d52b:	50                   	push   eax
c001d52c:	e8 87 ee ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d531:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d537:	5e                   	pop    esi
c001d538:	5f                   	pop    edi
c001d539:	6a 0f                	push   0xf
c001d53b:	6a 00                	push   0x0
c001d53d:	e8 87 ee ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d542:	5d                   	pop    ebp
c001d543:	0f b6 c0             	movzx  eax,al
c001d546:	5a                   	pop    edx
c001d547:	50                   	push   eax
c001d548:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d54d:	99                   	cdq    
c001d54e:	f7 fb                	idiv   ebx
c001d550:	99                   	cdq    
c001d551:	f7 fb                	idiv   ebx
c001d553:	8d 42 30             	lea    eax,[edx+0x30]
c001d556:	0f b6 c0             	movzx  eax,al
c001d559:	50                   	push   eax
c001d55a:	e8 59 ee ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d55f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d565:	59                   	pop    ecx
c001d566:	5e                   	pop    esi
c001d567:	6a 0f                	push   0xf
c001d569:	6a 00                	push   0x0
c001d56b:	e8 59 ee ff ff       	call   c001c3c9 <combineColours(unsigned char, unsigned char)>
c001d570:	5f                   	pop    edi
c001d571:	0f b6 c0             	movzx  eax,al
c001d574:	5d                   	pop    ebp
c001d575:	50                   	push   eax
c001d576:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d57b:	99                   	cdq    
c001d57c:	f7 fb                	idiv   ebx
c001d57e:	83 c2 30             	add    edx,0x30
c001d581:	0f b6 d2             	movzx  edx,dl
c001d584:	52                   	push   edx
c001d585:	e8 2e ee ff ff       	call   c001c3b8 <combineCharAndColour(char, unsigned char)>
c001d58a:	83 c4 10             	add    esp,0x10
c001d58d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d593:	31 c0                	xor    eax,eax
c001d595:	83 c4 1c             	add    esp,0x1c
c001d598:	5b                   	pop    ebx
c001d599:	5e                   	pop    esi
c001d59a:	5f                   	pop    edi
c001d59b:	5d                   	pop    ebp
c001d59c:	c3                   	ret    
c001d59d:	90                   	nop

c001d59e <SATAPI::write(unsigned long long, int, void*)>:
c001d59e:	b8 03 00 00 00       	mov    eax,0x3
c001d5a3:	c3                   	ret    

c001d5a4 <SATAPI::close(int, int, void*)>:
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5b1:	85 c0                	test   eax,eax
c001d5b3:	74 0c                	je     c001d5c1 <SATAPI::close(int, int, void*)+0x1d>
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5ba:	50                   	push   eax
c001d5bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	31 c0                	xor    eax,eax
c001d5c3:	83 c4 0c             	add    esp,0xc
c001d5c6:	c3                   	ret    
c001d5c7:	90                   	nop

c001d5c8 <SATAPI::SATAPI()>:
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cf:	83 ec 04             	sub    esp,0x4
c001d5d2:	68 00 08 00 00       	push   0x800
c001d5d7:	68 50 24 02 c0       	push   0xc0022450
c001d5dc:	50                   	push   eax
c001d5dd:	e8 2c ee fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	ba 44 25 02 c0       	mov    edx,0xc0022544
c001d5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ee:	89 10                	mov    DWORD PTR [eax],edx
c001d5f0:	90                   	nop
c001d5f1:	83 c4 0c             	add    esp,0xc
c001d5f4:	c3                   	ret    
c001d5f5:	90                   	nop

c001d5f6 <SATAPI::diskRemoved()>:
c001d5f6:	c3                   	ret    
c001d5f7:	90                   	nop

c001d5f8 <SATAPI::diskInserted()>:
c001d5f8:	83 ec 18             	sub    esp,0x18
c001d5fb:	68 5c 24 02 c0       	push   0xc002245c
c001d600:	e8 34 d3 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d609:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d610:	83 c4 1c             	add    esp,0x1c
c001d613:	c3                   	ret    

c001d614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	83 ec 34             	sub    esp,0x34
c001d61b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d61f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d623:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d627:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d62b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d62f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d635:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d63b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d63f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d645:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d649:	83 c0 02             	add    eax,0x2
c001d64c:	c1 e0 07             	shl    eax,0x7
c001d64f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d65b:	c1 e0 07             	shl    eax,0x7
c001d65e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d662:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d666:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d670:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d674:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d67a:	e8 21 e5 ff ff       	call   c001bba0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d67f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d683:	83 c4 10             	add    esp,0x10
c001d686:	b8 01 00 00 00       	mov    eax,0x1
c001d68b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d690:	0f 84 53 02 00 00    	je     c001d8e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d696:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d69c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6a2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d6a8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d6ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6b2:	c1 e1 05             	shl    ecx,0x5
c001d6b5:	01 c8                	add    eax,ecx
c001d6b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d6b9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d6bf:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d6c5:	89 08                	mov    DWORD PTR [eax],ecx
c001d6c7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d6cd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d6d3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d6d9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d6dc:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d6df:	50                   	push   eax
c001d6e0:	68 90 00 00 00       	push   0x90
c001d6e5:	6a 00                	push   0x0
c001d6e7:	53                   	push   ebx
c001d6e8:	e8 03 2e fe ff       	call   c00004f0 <memset>
c001d6ed:	b9 0c 00 00 00       	mov    ecx,0xc
c001d6f2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d6f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6f8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d6fe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d702:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d708:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d70c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d710:	48                   	dec    eax
c001d711:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d716:	89 c1                	mov    ecx,eax
c001d718:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d71e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d723:	09 c8                	or     eax,ecx
c001d725:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d72b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d731:	83 c8 80             	or     eax,0xffffff80
c001d734:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d73a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d73d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d741:	25 00 7f 00 00       	and    eax,0x7f00
c001d746:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d74a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d74f:	66 89 03             	mov    WORD PTR [ebx],ax
c001d752:	89 d0                	mov    eax,edx
c001d754:	c1 ea 18             	shr    edx,0x18
c001d757:	c1 e8 10             	shr    eax,0x10
c001d75a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d75d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d760:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d764:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d767:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d76b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d76e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d772:	83 c4 10             	add    esp,0x10
c001d775:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d77d:	31 c0                	xor    eax,eax
c001d77f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d785:	80 e1 88             	and    cl,0x88
c001d788:	74 0a                	je     c001d794 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d78a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d78f:	74 0a                	je     c001d79b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d791:	40                   	inc    eax
c001d792:	eb eb                	jmp    c001d77f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d794:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d799:	75 43                	jne    c001d7de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d79b:	83 ec 0c             	sub    esp,0xc
c001d79e:	68 74 24 02 c0       	push   0xc0022474
c001d7a3:	e8 91 d1 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d7a8:	58                   	pop    eax
c001d7a9:	5a                   	pop    edx
c001d7aa:	68 89 24 02 c0       	push   0xc0022489
c001d7af:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d7b5:	e8 de b2 fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c001d7ba:	59                   	pop    ecx
c001d7bb:	5b                   	pop    ebx
c001d7bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d7c0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d7c6:	e8 6f e4 ff ff       	call   c001bc3a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d7cb:	5e                   	pop    esi
c001d7cc:	5f                   	pop    edi
c001d7cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d7d1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d7d7:	e8 3e e4 ff ff       	call   c001bc1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d7dc:	eb 48                	jmp    c001d826 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d7de:	be 01 00 00 00       	mov    esi,0x1
c001d7e3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d7e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d7eb:	d3 e6                	shl    esi,cl
c001d7ed:	c1 e7 07             	shl    edi,0x7
c001d7f0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d7f6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d7fb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d7ff:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d805:	85 c6                	test   esi,eax
c001d807:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d80d:	0f 84 a3 00 00 00    	je     c001d8b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d813:	0f ba e0 1e          	bt     eax,0x1e
c001d817:	73 1a                	jae    c001d833 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d819:	83 ec 0c             	sub    esp,0xc
c001d81c:	68 9b 24 02 c0       	push   0xc002249b
c001d821:	e8 13 d1 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d826:	83 c4 10             	add    esp,0x10
c001d829:	b8 01 00 00 00       	mov    eax,0x1
c001d82e:	e9 b6 00 00 00       	jmp    c001d8e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d833:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d839:	83 f8 0d             	cmp    eax,0xd
c001d83c:	77 0a                	ja     c001d848 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d83e:	83 ec 0c             	sub    esp,0xc
c001d841:	68 c8 00 00 00       	push   0xc8
c001d846:	eb 28                	jmp    c001d870 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d848:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d84e:	83 f8 0d             	cmp    eax,0xd
c001d851:	77 0a                	ja     c001d85d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d853:	83 ec 0c             	sub    esp,0xc
c001d856:	68 58 02 00 00       	push   0x258
c001d85b:	eb 13                	jmp    c001d870 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d85d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d863:	83 f8 06             	cmp    eax,0x6
c001d866:	77 10                	ja     c001d878 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	68 dc 05 00 00       	push   0x5dc
c001d870:	e8 37 7e ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d87c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d87f:	75 06                	jne    c001d887 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d881:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d885:	74 15                	je     c001d89c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d887:	83 fb 06             	cmp    ebx,0x6
c001d88a:	77 10                	ja     c001d89c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	68 c4 09 00 00       	push   0x9c4
c001d894:	e8 13 7e ff ff       	call   c00156ac <milliTenthSleep(unsigned int)>
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	43                   	inc    ebx
c001d89d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d8a3:	0f 85 56 ff ff ff    	jne    c001d7ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d8a9:	83 ec 0c             	sub    esp,0xc
c001d8ac:	68 ae 24 02 c0       	push   0xc00224ae
c001d8b1:	e9 6b ff ff ff       	jmp    c001d821 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d8b6:	0f ba e0 1e          	bt     eax,0x1e
c001d8ba:	73 0d                	jae    c001d8c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d8bc:	83 ec 0c             	sub    esp,0xc
c001d8bf:	68 c2 24 02 c0       	push   0xc00224c2
c001d8c4:	e9 58 ff ff ff       	jmp    c001d821 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d8c9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d8ce:	74 17                	je     c001d8e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d8d0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d8d5:	74 10                	je     c001d8e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d8d7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d8dd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d8e1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d8e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8e7:	31 c0                	xor    eax,eax
c001d8e9:	83 c4 2c             	add    esp,0x2c
c001d8ec:	5b                   	pop    ebx
c001d8ed:	5e                   	pop    esi
c001d8ee:	5f                   	pop    edi
c001d8ef:	5d                   	pop    ebp
c001d8f0:	c3                   	ret    
c001d8f1:	90                   	nop

c001d8f2 <SATAPI::eject()>:
c001d8f2:	57                   	push   edi
c001d8f3:	b9 03 00 00 00       	mov    ecx,0x3
c001d8f8:	83 ec 18             	sub    esp,0x18
c001d8fb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8ff:	fc                   	cld    
c001d900:	31 c0                	xor    eax,eax
c001d902:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d904:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d909:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d90e:	50                   	push   eax
c001d90f:	6a 00                	push   0x0
c001d911:	6a 00                	push   0x0
c001d913:	6a 00                	push   0x0
c001d915:	6a 00                	push   0x0
c001d917:	6a 02                	push   0x2
c001d919:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d91d:	50                   	push   eax
c001d91e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d922:	e8 ed fc ff ff       	call   c001d614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d927:	31 c0                	xor    eax,eax
c001d929:	83 c4 38             	add    esp,0x38
c001d92c:	5f                   	pop    edi
c001d92d:	c3                   	ret    

c001d92e <SATAPI::detectMedia()>:
c001d92e:	53                   	push   ebx
c001d92f:	83 ec 14             	sub    esp,0x14
c001d932:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d936:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d93c:	e8 4b 04 ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c001d941:	59                   	pop    ecx
c001d942:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d948:	e8 2f 04 ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c001d94d:	c7 04 24 d7 24 02 c0 	mov    DWORD PTR [esp],0xc00224d7
c001d954:	e8 e0 cf fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d959:	83 c4 10             	add    esp,0x10
c001d95c:	31 c0                	xor    eax,eax
c001d95e:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d965:	85 d2                	test   edx,edx
c001d967:	74 0f                	je     c001d978 <SATAPI::detectMedia()+0x4a>
c001d969:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d96f:	75 07                	jne    c001d978 <SATAPI::detectMedia()+0x4a>
c001d971:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d978:	40                   	inc    eax
c001d979:	83 f8 1a             	cmp    eax,0x1a
c001d97c:	75 e0                	jne    c001d95e <SATAPI::detectMedia()+0x30>
c001d97e:	83 c4 08             	add    esp,0x8
c001d981:	5b                   	pop    ebx
c001d982:	c3                   	ret    
c001d983:	90                   	nop

c001d984 <SATAPI::open(int, int, void*)>:
c001d984:	56                   	push   esi
c001d985:	53                   	push   ebx
c001d986:	51                   	push   ecx
c001d987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d98b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d98f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d999:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d99f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9ad:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9b7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d9bd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9c4:	e8 e9 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001d9c9:	89 c6                	mov    esi,eax
c001d9cb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d9d1:	81 c6 00 10 00 00    	add    esi,0x1000
c001d9d7:	e8 d6 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001d9dc:	39 c6                	cmp    esi,eax
c001d9de:	74 10                	je     c001d9f0 <SATAPI::open(int, int, void*)+0x6c>
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	68 ec 24 02 c0       	push   0xc00224ec
c001d9e8:	e8 cc 31 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	6a 02                	push   0x2
c001d9f5:	e8 07 bc fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001d9fa:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001da00:	6a 03                	push   0x3
c001da02:	50                   	push   eax
c001da03:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001da09:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001da0f:	e8 00 c3 fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001da14:	83 c4 14             	add    esp,0x14
c001da17:	68 78 01 00 00       	push   0x178
c001da1c:	e8 8d a0 fe ff       	call   c0007aae <malloc>
c001da21:	83 c4 0c             	add    esp,0xc
c001da24:	89 c6                	mov    esi,eax
c001da26:	6a 00                	push   0x0
c001da28:	68 ff ff ff 7f       	push   0x7fffffff
c001da2d:	6a 00                	push   0x0
c001da2f:	6a 00                	push   0x0
c001da31:	53                   	push   ebx
c001da32:	68 02 25 02 c0       	push   0xc0022502
c001da37:	50                   	push   eax
c001da38:	e8 ab f7 fe ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da3d:	83 c4 14             	add    esp,0x14
c001da40:	56                   	push   esi
c001da41:	e8 62 f8 fe ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c001da46:	5a                   	pop    edx
c001da47:	0f be c0             	movsx  eax,al
c001da4a:	59                   	pop    ecx
c001da4b:	50                   	push   eax
c001da4c:	68 54 23 02 c0       	push   0xc0022354
c001da51:	e8 e3 ce fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001da56:	58                   	pop    eax
c001da57:	5a                   	pop    edx
c001da58:	56                   	push   esi
c001da59:	53                   	push   ebx
c001da5a:	e8 e3 e5 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001da5f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001da65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da68:	e8 09 ea fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001da6d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001da74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da77:	e8 b2 fe ff ff       	call   c001d92e <SATAPI::detectMedia()>
c001da7c:	83 c4 14             	add    esp,0x14
c001da7f:	31 c0                	xor    eax,eax
c001da81:	5b                   	pop    ebx
c001da82:	5e                   	pop    esi
c001da83:	c3                   	ret    

c001da84 <SATAPI::read(unsigned long long, int, void*)>:
c001da84:	57                   	push   edi
c001da85:	56                   	push   esi
c001da86:	53                   	push   ebx
c001da87:	83 ec 30             	sub    esp,0x30
c001da8a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001da8e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001da92:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001da96:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001da9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001daa2:	83 fe 04             	cmp    esi,0x4
c001daa5:	7e 10                	jle    c001dab7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001daa7:	83 ec 0c             	sub    esp,0xc
c001daaa:	68 10 25 02 c0       	push   0xc0022510
c001daaf:	e8 05 31 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001dab4:	83 c4 10             	add    esp,0x10
c001dab7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dabd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dac3:	51                   	push   ecx
c001dac4:	50                   	push   eax
c001dac5:	83 c0 02             	add    eax,0x2
c001dac8:	c1 e0 07             	shl    eax,0x7
c001dacb:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001dad1:	50                   	push   eax
c001dad2:	52                   	push   edx
c001dad3:	e8 8c e1 ff ff       	call   c001bc64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dad8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001dadc:	b9 03 00 00 00       	mov    ecx,0x3
c001dae1:	fc                   	cld    
c001dae2:	31 c0                	xor    eax,eax
c001dae4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dae6:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001daeb:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001daf0:	83 c4 0c             	add    esp,0xc
c001daf3:	6a 00                	push   0x0
c001daf5:	6a 00                	push   0x0
c001daf7:	6a 00                	push   0x0
c001daf9:	6a 00                	push   0x0
c001dafb:	6a 02                	push   0x2
c001dafd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001db01:	50                   	push   eax
c001db02:	53                   	push   ebx
c001db03:	e8 0c fb ff ff       	call   c001d614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db08:	83 c4 20             	add    esp,0x20
c001db0b:	85 c0                	test   eax,eax
c001db0d:	75 44                	jne    c001db53 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001db0f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001db13:	b9 03 00 00 00       	mov    ecx,0x3
c001db18:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db1e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001db23:	0f c8                	bswap  eax
c001db25:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001db29:	89 f0                	mov    eax,esi
c001db2b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001db2f:	50                   	push   eax
c001db30:	56                   	push   esi
c001db31:	c1 e6 0b             	shl    esi,0xb
c001db34:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001db38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db40:	56                   	push   esi
c001db41:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001db45:	50                   	push   eax
c001db46:	53                   	push   ebx
c001db47:	e8 c8 fa ff ff       	call   c001d614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db4c:	83 c4 20             	add    esp,0x20
c001db4f:	85 c0                	test   eax,eax
c001db51:	74 14                	je     c001db67 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001db53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db57:	83 ec 0c             	sub    esp,0xc
c001db5a:	53                   	push   ebx
c001db5b:	e8 ce fd ff ff       	call   c001d92e <SATAPI::detectMedia()>
c001db60:	83 c4 10             	add    esp,0x10
c001db63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db67:	83 c4 30             	add    esp,0x30
c001db6a:	5b                   	pop    ebx
c001db6b:	5e                   	pop    esi
c001db6c:	5f                   	pop    edi
c001db6d:	c3                   	ret    

c001db6e <IOAPIC::close(int, int, void*)>:
c001db6e:	b8 00 00 00 00       	mov    eax,0x0
c001db73:	c3                   	ret    

c001db74 <apicGetBase()>:
c001db74:	55                   	push   ebp
c001db75:	89 e5                	mov    ebp,esp
c001db77:	83 ec 18             	sub    esp,0x18
c001db7a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001db7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db85:	83 e0 08             	and    eax,0x8
c001db88:	0f b6 c0             	movzx  eax,al
c001db8b:	85 c0                	test   eax,eax
c001db8d:	75 07                	jne    c001db96 <apicGetBase()+0x22>
c001db8f:	b8 00 00 00 00       	mov    eax,0x0
c001db94:	eb 21                	jmp    c001dbb7 <apicGetBase()+0x43>
c001db96:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001db9b:	83 ec 08             	sub    esp,0x8
c001db9e:	6a 1b                	push   0x1b
c001dba0:	50                   	push   eax
c001dba1:	e8 12 95 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001dba6:	83 c4 10             	add    esp,0x10
c001dba9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbac:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dbaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbb2:	25 00 00 ff ff       	and    eax,0xffff0000
c001dbb7:	c9                   	leave  
c001dbb8:	c3                   	ret    
c001dbb9:	90                   	nop

c001dbba <IOAPIC::IOAPIC()>:
c001dbba:	83 ec 0c             	sub    esp,0xc
c001dbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc1:	83 ec 08             	sub    esp,0x8
c001dbc4:	68 74 25 02 c0       	push   0xc0022574
c001dbc9:	50                   	push   eax
c001dbca:	e8 0b e6 fe ff       	call   c000c1da <Device::Device(char const*)>
c001dbcf:	83 c4 10             	add    esp,0x10
c001dbd2:	ba 84 25 02 c0       	mov    edx,0xc0022584
c001dbd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdb:	89 10                	mov    DWORD PTR [eax],edx
c001dbdd:	90                   	nop
c001dbde:	83 c4 0c             	add    esp,0xc
c001dbe1:	c3                   	ret    

c001dbe2 <apicOpen()>:
c001dbe2:	55                   	push   ebp
c001dbe3:	89 e5                	mov    ebp,esp
c001dbe5:	53                   	push   ebx
c001dbe6:	83 ec 34             	sub    esp,0x34
c001dbe9:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001dbee:	83 f0 01             	xor    eax,0x1
c001dbf1:	0f b6 c0             	movzx  eax,al
c001dbf4:	85 c0                	test   eax,eax
c001dbf6:	0f 84 a3 00 00 00    	je     c001dc9f <apicOpen()+0xbd>
c001dbfc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dc00:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001dc05:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc09:	0f b6 c0             	movzx  eax,al
c001dc0c:	39 c2                	cmp    edx,eax
c001dc0e:	0f 83 84 00 00 00    	jae    c001dc98 <apicOpen()+0xb6>
c001dc14:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dc1b:	83 ec 0c             	sub    esp,0xc
c001dc1e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dc21:	e8 88 9e fe ff       	call   c0007aae <malloc>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	89 c3                	mov    ebx,eax
c001dc2b:	83 ec 0c             	sub    esp,0xc
c001dc2e:	53                   	push   ebx
c001dc2f:	e8 86 ff ff ff       	call   c001dbba <IOAPIC::IOAPIC()>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dc3a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dc3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc41:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001dc48:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001dc4d:	83 c0 01             	add    eax,0x1
c001dc50:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001dc55:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dc5a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dc60:	83 ec 08             	sub    esp,0x8
c001dc63:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dc66:	50                   	push   eax
c001dc67:	e8 d6 e3 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc72:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc74:	83 c0 08             	add    eax,0x8
c001dc77:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc79:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc7d:	6a 00                	push   0x0
c001dc7f:	6a 00                	push   0x0
c001dc81:	52                   	push   edx
c001dc82:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dc85:	ff d0                	call   eax
c001dc87:	83 c4 10             	add    esp,0x10
c001dc8a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dc8d:	83 c0 01             	add    eax,0x1
c001dc90:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001dc93:	e9 68 ff ff ff       	jmp    c001dc00 <apicOpen()+0x1e>
c001dc98:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001dc9f:	e8 d0 fe ff ff       	call   c001db74 <apicGetBase()>
c001dca4:	05 f0 00 00 00       	add    eax,0xf0
c001dca9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dcac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dcaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcb1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dcb4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dcbb:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dcc2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dcc5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dcc8:	89 10                	mov    DWORD PTR [eax],edx
c001dcca:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dcd1:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001dcd6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dcd9:	7d 7c                	jge    c001dd57 <apicOpen()+0x175>
c001dcdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dcde:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dce5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dceb:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dcf2:	c1 e8 08             	shr    eax,0x8
c001dcf5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001dcf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dcfc:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dd03:	c1 e8 18             	shr    eax,0x18
c001dd06:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001dd09:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001dd0d:	3d ff 00 00 00       	cmp    eax,0xff
c001dd12:	75 3a                	jne    c001dd4e <apicOpen()+0x16c>
c001dd14:	e8 5b fe ff ff       	call   c001db74 <apicGetBase()>
c001dd19:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001dd1d:	83 fa 01             	cmp    edx,0x1
c001dd20:	75 07                	jne    c001dd29 <apicOpen()+0x147>
c001dd22:	ba 60 03 00 00       	mov    edx,0x360
c001dd27:	eb 05                	jmp    c001dd2e <apicOpen()+0x14c>
c001dd29:	ba 50 03 00 00       	mov    edx,0x350
c001dd2e:	01 d0                	add    eax,edx
c001dd30:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dd33:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd36:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd38:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001dd3b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001dd42:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001dd46:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd49:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dd4c:	89 10                	mov    DWORD PTR [eax],edx
c001dd4e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001dd52:	e9 7a ff ff ff       	jmp    c001dcd1 <apicOpen()+0xef>
c001dd57:	90                   	nop
c001dd58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dd5b:	c9                   	leave  
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001dd5e:	55                   	push   ebp
c001dd5f:	89 e5                	mov    ebp,esp
c001dd61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd6a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dd6d:	72 1d                	jb     c001dd8c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dd6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd72:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd7b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dd81:	01 d0                	add    eax,edx
c001dd83:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dd86:	73 04                	jae    c001dd8c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dd88:	b0 01                	mov    al,0x1
c001dd8a:	eb 02                	jmp    c001dd8e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001dd8c:	b0 00                	mov    al,0x0
c001dd8e:	5d                   	pop    ebp
c001dd8f:	c3                   	ret    

c001dd90 <IOAPIC::read(int)>:
c001dd90:	55                   	push   ebp
c001dd91:	89 e5                	mov    ebp,esp
c001dd93:	83 ec 10             	sub    esp,0x10
c001dd96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dd9f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dda2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dda5:	0f b6 d0             	movzx  edx,al
c001dda8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddab:	89 10                	mov    DWORD PTR [eax],edx
c001ddad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddb0:	83 c0 10             	add    eax,0x10
c001ddb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddb5:	c9                   	leave  
c001ddb6:	c3                   	ret    
c001ddb7:	90                   	nop

c001ddb8 <IOAPIC::open(int, int, void*)>:
c001ddb8:	55                   	push   ebp
c001ddb9:	89 e5                	mov    ebp,esp
c001ddbb:	57                   	push   edi
c001ddbc:	56                   	push   esi
c001ddbd:	53                   	push   ebx
c001ddbe:	83 ec 04             	sub    esp,0x4
c001ddc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ddc7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddd6:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001dddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dde0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dde9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddef:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001ddf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddf9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ddff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de02:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001de08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de0b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de11:	0f b6 f0             	movzx  esi,al
c001de14:	89 d0                	mov    eax,edx
c001de16:	ba 00 00 00 00       	mov    edx,0x0
c001de1b:	89 c7                	mov    edi,eax
c001de1d:	83 e7 ff             	and    edi,0xffffffff
c001de20:	89 f9                	mov    ecx,edi
c001de22:	0f b6 da             	movzx  ebx,dl
c001de25:	89 c8                	mov    eax,ecx
c001de27:	89 da                	mov    edx,ebx
c001de29:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001de2c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001de2f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001de33:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001de37:	83 e0 00             	and    eax,0x0
c001de3a:	09 d0                	or     eax,edx
c001de3c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001de40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de49:	8d 50 01             	lea    edx,[eax+0x1]
c001de4c:	88 d1                	mov    cl,dl
c001de4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001de51:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001de57:	0f b6 d0             	movzx  edx,al
c001de5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de5d:	83 c2 08             	add    edx,0x8
c001de60:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001de64:	0f b6 c9             	movzx  ecx,cl
c001de67:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001de6d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001de71:	6a 01                	push   0x1
c001de73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de76:	e8 15 ff ff ff       	call   c001dd90 <IOAPIC::read(int)>
c001de7b:	83 c4 08             	add    esp,0x8
c001de7e:	c1 f8 10             	sar    eax,0x10
c001de81:	0f b6 c0             	movzx  eax,al
c001de84:	8d 50 01             	lea    edx,[eax+0x1]
c001de87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de8a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001de90:	b8 00 00 00 00       	mov    eax,0x0
c001de95:	8d 65 f4             	lea    esp,[ebp-0xc]
c001de98:	5b                   	pop    ebx
c001de99:	5e                   	pop    esi
c001de9a:	5f                   	pop    edi
c001de9b:	5d                   	pop    ebp
c001de9c:	c3                   	ret    
c001de9d:	90                   	nop

c001de9e <IOAPIC::write(int, int)>:
c001de9e:	55                   	push   ebp
c001de9f:	89 e5                	mov    ebp,esp
c001dea1:	83 ec 10             	sub    esp,0x10
c001dea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dea7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dead:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001deb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001deb3:	0f b6 d0             	movzx  edx,al
c001deb6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001deb9:	89 10                	mov    DWORD PTR [eax],edx
c001debb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001debe:	8d 50 10             	lea    edx,[eax+0x10]
c001dec1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dec4:	89 02                	mov    DWORD PTR [edx],eax
c001dec6:	90                   	nop
c001dec7:	c9                   	leave  
c001dec8:	c3                   	ret    
c001dec9:	90                   	nop

c001deca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001deca:	55                   	push   ebp
c001decb:	89 e5                	mov    ebp,esp
c001decd:	53                   	push   ebx
c001dece:	83 ec 2c             	sub    esp,0x2c
c001ded1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ded4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ded7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001deda:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dedd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dee0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dee3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dee6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dee9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001deec:	88 d8                	mov    al,bl
c001deee:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001def1:	88 c8                	mov    al,cl
c001def3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001def6:	88 d0                	mov    al,dl
c001def8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001defb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001deff:	83 c0 08             	add    eax,0x8
c001df02:	01 c0                	add    eax,eax
c001df04:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001df07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df0b:	83 c0 08             	add    eax,0x8
c001df0e:	01 c0                	add    eax,eax
c001df10:	83 c0 01             	add    eax,0x1
c001df13:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001df16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df19:	50                   	push   eax
c001df1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df1d:	e8 6e fe ff ff       	call   c001dd90 <IOAPIC::read(int)>
c001df22:	83 c4 08             	add    esp,0x8
c001df25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001df28:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001df2f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001df32:	c1 e0 18             	shl    eax,0x18
c001df35:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001df38:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df3e:	52                   	push   edx
c001df3f:	50                   	push   eax
c001df40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df43:	e8 56 ff ff ff       	call   c001de9e <IOAPIC::write(int, int)>
c001df48:	83 c4 0c             	add    esp,0xc
c001df4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df4e:	50                   	push   eax
c001df4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df52:	e8 39 fe ff ff       	call   c001dd90 <IOAPIC::read(int)>
c001df57:	83 c4 08             	add    esp,0x8
c001df5a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001df5d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001df64:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001df6b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001df72:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001df76:	85 c0                	test   eax,eax
c001df78:	74 09                	je     c001df83 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001df7a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001df81:	eb 07                	jmp    c001df8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001df83:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001df8a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001df8e:	85 c0                	test   eax,eax
c001df90:	74 09                	je     c001df9b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001df92:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001df99:	eb 07                	jmp    c001dfa2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001df9b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dfa2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dfa9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dfad:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dfb0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dfb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dfb6:	52                   	push   edx
c001dfb7:	50                   	push   eax
c001dfb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfbb:	e8 de fe ff ff       	call   c001de9e <IOAPIC::write(int, int)>
c001dfc0:	83 c4 0c             	add    esp,0xc
c001dfc3:	90                   	nop
c001dfc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dfc7:	c9                   	leave  
c001dfc8:	c3                   	ret    
c001dfc9:	66 90                	xchg   ax,ax
c001dfcb:	90                   	nop

c001dfcc <APICTimer::close(int, int, void*)>:
c001dfcc:	b8 00 00 00 00       	mov    eax,0x0
c001dfd1:	c3                   	ret    
c001dfd2:	66 90                	xchg   ax,ax

c001dfd4 <apicTimerHandler(regs*, void*)>:
c001dfd4:	83 ec 0c             	sub    esp,0xc
c001dfd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfdb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfdd:	b8 10 27 00 00       	mov    eax,0x2710
c001dfe2:	ba 00 00 00 00       	mov    edx,0x0
c001dfe7:	f7 f1                	div    ecx
c001dfe9:	83 ec 0c             	sub    esp,0xc
c001dfec:	50                   	push   eax
c001dfed:	e8 b2 fa fe ff       	call   c000daa4 <timerHandler(unsigned int)>
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	90                   	nop
c001dff6:	83 c4 0c             	add    esp,0xc
c001dff9:	c3                   	ret    
c001dffa:	66 90                	xchg   ax,ax

c001dffc <APICTimer::open(int, int, void*)>:
c001dffc:	83 ec 0c             	sub    esp,0xc
c001dfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e003:	8b 00                	mov    eax,DWORD PTR [eax]
c001e005:	83 c0 24             	add    eax,0x24
c001e008:	8b 00                	mov    eax,DWORD PTR [eax]
c001e00a:	83 ec 08             	sub    esp,0x8
c001e00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e015:	ff d0                	call   eax
c001e017:	83 c4 10             	add    esp,0x10
c001e01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e022:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e030:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e036:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e03a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	51                   	push   ecx
c001e044:	6a 01                	push   0x1
c001e046:	68 d4 df 01 c0       	push   0xc001dfd4
c001e04b:	52                   	push   edx
c001e04c:	50                   	push   eax
c001e04d:	e8 9c df fe ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e052:	83 c4 20             	add    esp,0x20
c001e055:	89 c2                	mov    edx,eax
c001e057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e05b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e061:	b8 00 00 00 00       	mov    eax,0x0
c001e066:	83 c4 0c             	add    esp,0xc
c001e069:	c3                   	ret    
c001e06a:	66 90                	xchg   ax,ax

c001e06c <APICTimer::write(int)>:
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 a8 25 02 c0       	push   0xc00225a8
c001e077:	e8 3d 2b ff ff       	call   c0010bb9 <KePanic(char const*)>
c001e07c:	83 c4 10             	add    esp,0x10
c001e07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e083:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e087:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e08d:	90                   	nop
c001e08e:	83 c4 0c             	add    esp,0xc
c001e091:	c3                   	ret    
c001e092:	66 90                	xchg   ax,ax

c001e094 <APICTimer::APICTimer()>:
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09b:	83 ec 08             	sub    esp,0x8
c001e09e:	68 b8 25 02 c0       	push   0xc00225b8
c001e0a3:	50                   	push   eax
c001e0a4:	e8 2f f9 fe ff       	call   c000d9d8 <Timer::Timer(char const*)>
c001e0a9:	83 c4 10             	add    esp,0x10
c001e0ac:	ba cc 25 02 c0       	mov    edx,0xc00225cc
c001e0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b5:	89 10                	mov    DWORD PTR [eax],edx
c001e0b7:	90                   	nop
c001e0b8:	83 c4 0c             	add    esp,0xc
c001e0bb:	c3                   	ret    

c001e0bc <PIT::write(int)>:
c001e0bc:	83 ec 10             	sub    esp,0x10
c001e0bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0d1:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001e0d6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e0db:	89 c2                	mov    edx,eax
c001e0dd:	c1 fa 1f             	sar    edx,0x1f
c001e0e0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e0e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0e8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e0ef:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e0f4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e0f8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e0fd:	ee                   	out    dx,al
c001e0fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e102:	0f b6 c0             	movzx  eax,al
c001e105:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e10c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e110:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e114:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e119:	ee                   	out    dx,al
c001e11a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e11e:	c1 f8 08             	sar    eax,0x8
c001e121:	0f b6 c0             	movzx  eax,al
c001e124:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e12b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e12f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e133:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e138:	ee                   	out    dx,al
c001e139:	90                   	nop
c001e13a:	83 c4 10             	add    esp,0x10
c001e13d:	c3                   	ret    
c001e13e:	66 90                	xchg   ax,ax

c001e140 <pitHandler(regs*, void*)>:
c001e140:	83 ec 0c             	sub    esp,0xc
c001e143:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001e149:	b8 10 27 00 00       	mov    eax,0x2710
c001e14e:	89 c2                	mov    edx,eax
c001e150:	c1 fa 1f             	sar    edx,0x1f
c001e153:	f7 f9                	idiv   ecx
c001e155:	83 ec 0c             	sub    esp,0xc
c001e158:	50                   	push   eax
c001e159:	e8 46 f9 fe ff       	call   c000daa4 <timerHandler(unsigned int)>
c001e15e:	83 c4 10             	add    esp,0x10
c001e161:	90                   	nop
c001e162:	83 c4 0c             	add    esp,0xc
c001e165:	c3                   	ret    
c001e166:	66 90                	xchg   ax,ax

c001e168 <PIT::open(int, int, void*)>:
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e171:	83 c0 24             	add    eax,0x24
c001e174:	8b 00                	mov    eax,DWORD PTR [eax]
c001e176:	83 ec 08             	sub    esp,0x8
c001e179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e181:	ff d0                	call   eax
c001e183:	83 c4 10             	add    esp,0x10
c001e186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	6a 00                	push   0x0
c001e18f:	6a 01                	push   0x1
c001e191:	68 40 e1 01 c0       	push   0xc001e140
c001e196:	6a 00                	push   0x0
c001e198:	50                   	push   eax
c001e199:	e8 50 de fe ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e19e:	83 c4 20             	add    esp,0x20
c001e1a1:	89 c2                	mov    edx,eax
c001e1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1ad:	b8 00 00 00 00       	mov    eax,0x0
c001e1b2:	83 c4 0c             	add    esp,0xc
c001e1b5:	c3                   	ret    
c001e1b6:	66 90                	xchg   ax,ax

c001e1b8 <PIT::close(int, int, void*)>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cd:	6a 01                	push   0x1
c001e1cf:	68 40 e1 01 c0       	push   0xc001e140
c001e1d4:	6a 00                	push   0x0
c001e1d6:	50                   	push   eax
c001e1d7:	e8 48 de fe ff       	call   c000c024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	b8 00 00 00 00       	mov    eax,0x0
c001e1e4:	83 c4 0c             	add    esp,0xc
c001e1e7:	c3                   	ret    

c001e1e8 <PIT::PIT()>:
c001e1e8:	83 ec 0c             	sub    esp,0xc
c001e1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ef:	83 ec 08             	sub    esp,0x8
c001e1f2:	68 f4 25 02 c0       	push   0xc00225f4
c001e1f7:	50                   	push   eax
c001e1f8:	e8 db f7 fe ff       	call   c000d9d8 <Timer::Timer(char const*)>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	ba 1c 26 02 c0       	mov    edx,0xc002261c
c001e205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e209:	89 10                	mov    DWORD PTR [eax],edx
c001e20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e215:	0f b6 d0             	movzx  edx,al
c001e218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e227:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e22d:	0f b6 d0             	movzx  edx,al
c001e230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e234:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e23d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e243:	8d 50 01             	lea    edx,[eax+0x1]
c001e246:	88 d1                	mov    cl,dl
c001e248:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e24c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e252:	0f b6 d0             	movzx  edx,al
c001e255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e259:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e25d:	83 e1 3f             	and    ecx,0x3f
c001e260:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e264:	90                   	nop
c001e265:	83 c4 0c             	add    esp,0xc
c001e268:	c3                   	ret    
c001e269:	66 90                	xchg   ax,ax
c001e26b:	66 90                	xchg   ax,ax
c001e26d:	66 90                	xchg   ax,ax
c001e26f:	90                   	nop

c001e270 <avxDetect>:
c001e270:	b8 01 00 00 00       	mov    eax,0x1
c001e275:	0f a2                	cpuid  
c001e277:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e27d:	74 15                	je     c001e294 <avxDetect.noAVX>
c001e27f:	b8 01 00 00 00       	mov    eax,0x1
c001e284:	0f a2                	cpuid  
c001e286:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e28c:	74 06                	je     c001e294 <avxDetect.noAVX>
c001e28e:	b8 01 00 00 00       	mov    eax,0x1
c001e293:	c3                   	ret    

c001e294 <avxDetect.noAVX>:
c001e294:	b8 00 00 00 00       	mov    eax,0x0
c001e299:	c3                   	ret    

c001e29a <avxSave>:
c001e29a:	53                   	push   ebx
c001e29b:	52                   	push   edx
c001e29c:	31 c0                	xor    eax,eax
c001e29e:	48                   	dec    eax
c001e29f:	89 c2                	mov    edx,eax
c001e2a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2a5:	0f ae 23             	xsave  [ebx]
c001e2a8:	5a                   	pop    edx
c001e2a9:	5b                   	pop    ebx
c001e2aa:	c3                   	ret    

c001e2ab <avxLoad>:
c001e2ab:	53                   	push   ebx
c001e2ac:	52                   	push   edx
c001e2ad:	31 c0                	xor    eax,eax
c001e2af:	48                   	dec    eax
c001e2b0:	89 c2                	mov    edx,eax
c001e2b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2b6:	0f ae 2b             	xrstor [ebx]
c001e2b9:	5a                   	pop    edx
c001e2ba:	5b                   	pop    ebx
c001e2bb:	c3                   	ret    

c001e2bc <avxInit>:
c001e2bc:	e8 67 03 00 00       	call   c001e628 <sseInit>
c001e2c1:	50                   	push   eax
c001e2c2:	51                   	push   ecx
c001e2c3:	0f 20 e0             	mov    eax,cr4
c001e2c6:	0d 00 00 04 00       	or     eax,0x40000
c001e2cb:	0f 22 e0             	mov    cr4,eax
c001e2ce:	31 c9                	xor    ecx,ecx
c001e2d0:	0f 01 d0             	xgetbv 
c001e2d3:	0d 07 00 00 00       	or     eax,0x7
c001e2d8:	0f 01 d1             	xsetbv 
c001e2db:	59                   	pop    ecx
c001e2dc:	58                   	pop    eax
c001e2dd:	c3                   	ret    

c001e2de <avxClose>:
c001e2de:	c3                   	ret    

c001e2df <wouldSheSayYes>:
c001e2df:	c3                   	ret    
c001e2e0:	49                   	dec    ecx
c001e2e1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e2e5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e2e9:	75 20                	jne    c001e30b <isr0+0xb>
c001e2eb:	4e                   	dec    esi
c001e2ec:	79 61                	jns    c001e34f <isr7+0x3>
c001e2ee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e2f3:	66 90                	xchg   ax,ax
c001e2f5:	66 90                	xchg   ax,ax
c001e2f7:	66 90                	xchg   ax,ax
c001e2f9:	66 90                	xchg   ax,ax
c001e2fb:	66 90                	xchg   ax,ax
c001e2fd:	66 90                	xchg   ax,ax
c001e2ff:	90                   	nop

c001e300 <isr0>:
c001e300:	fa                   	cli    
c001e301:	68 00 00 00 00       	push   0x0
c001e306:	68 00 00 00 00       	push   0x0
c001e30b:	e9 56 01 00 00       	jmp    c001e466 <int_common_stub>

c001e310 <isr1>:
c001e310:	fa                   	cli    
c001e311:	6a 00                	push   0x0
c001e313:	6a 01                	push   0x1
c001e315:	e9 4c 01 00 00       	jmp    c001e466 <int_common_stub>

c001e31a <isr2>:
c001e31a:	fa                   	cli    
c001e31b:	6a 00                	push   0x0
c001e31d:	6a 02                	push   0x2
c001e31f:	e9 42 01 00 00       	jmp    c001e466 <int_common_stub>

c001e324 <isr3>:
c001e324:	fa                   	cli    
c001e325:	6a 00                	push   0x0
c001e327:	6a 03                	push   0x3
c001e329:	e9 38 01 00 00       	jmp    c001e466 <int_common_stub>

c001e32e <isr4>:
c001e32e:	fa                   	cli    
c001e32f:	6a 00                	push   0x0
c001e331:	6a 04                	push   0x4
c001e333:	e9 2e 01 00 00       	jmp    c001e466 <int_common_stub>

c001e338 <isr5>:
c001e338:	fa                   	cli    
c001e339:	6a 00                	push   0x0
c001e33b:	6a 05                	push   0x5
c001e33d:	e9 24 01 00 00       	jmp    c001e466 <int_common_stub>

c001e342 <isr6>:
c001e342:	fa                   	cli    
c001e343:	6a 00                	push   0x0
c001e345:	6a 06                	push   0x6
c001e347:	e9 1a 01 00 00       	jmp    c001e466 <int_common_stub>

c001e34c <isr7>:
c001e34c:	fa                   	cli    
c001e34d:	6a 00                	push   0x0
c001e34f:	6a 07                	push   0x7
c001e351:	e9 10 01 00 00       	jmp    c001e466 <int_common_stub>

c001e356 <isr8>:
c001e356:	fa                   	cli    
c001e357:	6a 08                	push   0x8
c001e359:	e9 08 01 00 00       	jmp    c001e466 <int_common_stub>

c001e35e <isr9>:
c001e35e:	fa                   	cli    
c001e35f:	6a 00                	push   0x0
c001e361:	6a 09                	push   0x9
c001e363:	e9 fe 00 00 00       	jmp    c001e466 <int_common_stub>

c001e368 <isr10>:
c001e368:	fa                   	cli    
c001e369:	6a 0a                	push   0xa
c001e36b:	e9 f6 00 00 00       	jmp    c001e466 <int_common_stub>

c001e370 <isr11>:
c001e370:	fa                   	cli    
c001e371:	6a 0b                	push   0xb
c001e373:	e9 ee 00 00 00       	jmp    c001e466 <int_common_stub>

c001e378 <isr12>:
c001e378:	fa                   	cli    
c001e379:	6a 0c                	push   0xc
c001e37b:	e9 e6 00 00 00       	jmp    c001e466 <int_common_stub>

c001e380 <isr13>:
c001e380:	fa                   	cli    
c001e381:	6a 0d                	push   0xd
c001e383:	53                   	push   ebx
c001e384:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e388:	81 fb 56 e5 01 c0    	cmp    ebx,0xc001e556
c001e38e:	5b                   	pop    ebx
c001e38f:	0f 84 c3 01 00 00    	je     c001e558 <finishSignal2>
c001e395:	e9 cc 00 00 00       	jmp    c001e466 <int_common_stub>

c001e39a <isr14>:
c001e39a:	fa                   	cli    
c001e39b:	6a 0e                	push   0xe
c001e39d:	e9 c4 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3a2 <isr15>:
c001e3a2:	fa                   	cli    
c001e3a3:	6a 00                	push   0x0
c001e3a5:	6a 0f                	push   0xf
c001e3a7:	e9 ba 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3ac <isr16>:
c001e3ac:	fa                   	cli    
c001e3ad:	6a 00                	push   0x0
c001e3af:	6a 10                	push   0x10
c001e3b1:	e9 b0 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3b6 <isr17>:
c001e3b6:	fa                   	cli    
c001e3b7:	6a 00                	push   0x0
c001e3b9:	6a 11                	push   0x11
c001e3bb:	e9 a6 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3c0 <isr18>:
c001e3c0:	fa                   	cli    
c001e3c1:	6a 00                	push   0x0
c001e3c3:	6a 12                	push   0x12
c001e3c5:	e9 9c 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3ca <irq3>:
c001e3ca:	fa                   	cli    
c001e3cb:	6a 00                	push   0x0
c001e3cd:	6a 23                	push   0x23
c001e3cf:	e9 92 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3d4 <irq4>:
c001e3d4:	fa                   	cli    
c001e3d5:	6a 00                	push   0x0
c001e3d7:	6a 24                	push   0x24
c001e3d9:	e9 88 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3de <irq5>:
c001e3de:	fa                   	cli    
c001e3df:	6a 00                	push   0x0
c001e3e1:	6a 25                	push   0x25
c001e3e3:	e9 7e 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3e8 <irq6>:
c001e3e8:	fa                   	cli    
c001e3e9:	6a 00                	push   0x0
c001e3eb:	6a 26                	push   0x26
c001e3ed:	e9 74 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3f2 <irq7>:
c001e3f2:	fa                   	cli    
c001e3f3:	6a 00                	push   0x0
c001e3f5:	6a 27                	push   0x27
c001e3f7:	e9 6a 00 00 00       	jmp    c001e466 <int_common_stub>

c001e3fc <irq8>:
c001e3fc:	fa                   	cli    
c001e3fd:	6a 00                	push   0x0
c001e3ff:	6a 28                	push   0x28
c001e401:	e9 60 00 00 00       	jmp    c001e466 <int_common_stub>

c001e406 <irq9>:
c001e406:	fa                   	cli    
c001e407:	6a 00                	push   0x0
c001e409:	6a 29                	push   0x29
c001e40b:	e9 56 00 00 00       	jmp    c001e466 <int_common_stub>

c001e410 <irq10>:
c001e410:	fa                   	cli    
c001e411:	6a 00                	push   0x0
c001e413:	6a 2a                	push   0x2a
c001e415:	e9 4c 00 00 00       	jmp    c001e466 <int_common_stub>

c001e41a <irq11>:
c001e41a:	fa                   	cli    
c001e41b:	6a 00                	push   0x0
c001e41d:	6a 2b                	push   0x2b
c001e41f:	e9 42 00 00 00       	jmp    c001e466 <int_common_stub>

c001e424 <irq12>:
c001e424:	fa                   	cli    
c001e425:	6a 00                	push   0x0
c001e427:	6a 2c                	push   0x2c
c001e429:	e9 38 00 00 00       	jmp    c001e466 <int_common_stub>

c001e42e <irq13>:
c001e42e:	fa                   	cli    
c001e42f:	6a 00                	push   0x0
c001e431:	6a 2d                	push   0x2d
c001e433:	e9 2e 00 00 00       	jmp    c001e466 <int_common_stub>

c001e438 <irq14>:
c001e438:	fa                   	cli    
c001e439:	6a 00                	push   0x0
c001e43b:	6a 2e                	push   0x2e
c001e43d:	e9 24 00 00 00       	jmp    c001e466 <int_common_stub>

c001e442 <irq15>:
c001e442:	fa                   	cli    
c001e443:	6a 00                	push   0x0
c001e445:	6a 2f                	push   0x2f
c001e447:	e9 1a 00 00 00       	jmp    c001e466 <int_common_stub>

c001e44c <irq1>:
c001e44c:	fa                   	cli    
c001e44d:	6a 00                	push   0x0
c001e44f:	6a 21                	push   0x21
c001e451:	eb 13                	jmp    c001e466 <int_common_stub>

c001e453 <irq2>:
c001e453:	fa                   	cli    
c001e454:	6a 00                	push   0x0
c001e456:	6a 22                	push   0x22
c001e458:	eb 0c                	jmp    c001e466 <int_common_stub>

c001e45a <isr96>:
c001e45a:	6a 00                	push   0x0
c001e45c:	6a 60                	push   0x60
c001e45e:	fb                   	sti    
c001e45f:	eb 37                	jmp    c001e498 <syscall_common_stub>

c001e461 <irq0>:
c001e461:	fa                   	cli    
c001e462:	6a 00                	push   0x0
c001e464:	6a 20                	push   0x20

c001e466 <int_common_stub>:
c001e466:	60                   	pusha  
c001e467:	1e                   	push   ds
c001e468:	06                   	push   es
c001e469:	0f a0                	push   fs
c001e46b:	0f a8                	push   gs
c001e46d:	66 b8 10 00          	mov    ax,0x10
c001e471:	66 8e d8             	mov    ds,ax
c001e474:	66 8e c0             	mov    es,ax
c001e477:	66 8e e0             	mov    fs,ax
c001e47a:	66 8e e8             	mov    gs,ax
c001e47d:	54                   	push   esp
c001e47e:	fc                   	cld    
c001e47f:	e8 68 e0 fe ff       	call   c000c4ec <int_handler>
c001e484:	81 c4 04 00 00 00    	add    esp,0x4
c001e48a:	0f a9                	pop    gs
c001e48c:	0f a1                	pop    fs
c001e48e:	07                   	pop    es
c001e48f:	1f                   	pop    ds
c001e490:	61                   	popa   
c001e491:	81 c4 08 00 00 00    	add    esp,0x8
c001e497:	cf                   	iret   

c001e498 <syscall_common_stub>:
c001e498:	60                   	pusha  
c001e499:	1e                   	push   ds
c001e49a:	06                   	push   es
c001e49b:	0f a0                	push   fs
c001e49d:	0f a8                	push   gs
c001e49f:	66 b8 10 00          	mov    ax,0x10
c001e4a3:	66 8e d8             	mov    ds,ax
c001e4a6:	66 8e c0             	mov    es,ax
c001e4a9:	66 8e e0             	mov    fs,ax
c001e4ac:	66 8e e8             	mov    gs,ax
c001e4af:	54                   	push   esp
c001e4b0:	fc                   	cld    
c001e4b1:	e8 36 e0 fe ff       	call   c000c4ec <int_handler>
c001e4b6:	81 c4 04 00 00 00    	add    esp,0x4
c001e4bc:	0f a9                	pop    gs
c001e4be:	0f a1                	pop    fs
c001e4c0:	07                   	pop    es
c001e4c1:	1f                   	pop    ds
c001e4c2:	e8 07 2d ff ff       	call   c00111ce <KiCheckSignalZ>
c001e4c7:	3d 00 00 00 00       	cmp    eax,0x0
c001e4cc:	0f 84 c0 00 00 00    	je     c001e592 <skipSignals>
c001e4d2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e4d7:	61                   	popa   
c001e4d8:	53                   	push   ebx
c001e4d9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e4df:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e4e2:	5b                   	pop    ebx
c001e4e3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e4e8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e4eb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e4ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e4f1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e4f4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e4f7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e4fa:	81 c4 08 00 00 00    	add    esp,0x8
c001e500:	5e                   	pop    esi
c001e501:	5b                   	pop    ebx
c001e502:	59                   	pop    ecx
c001e503:	5a                   	pop    edx
c001e504:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e507:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e50a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e50d:	52                   	push   edx
c001e50e:	51                   	push   ecx
c001e50f:	53                   	push   ebx
c001e510:	56                   	push   esi
c001e511:	81 ec 08 00 00 00    	sub    esp,0x8
c001e517:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e51a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e51d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e520:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e523:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e526:	60                   	pusha  
c001e527:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e52d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e530:	89 e3                	mov    ebx,esp
c001e532:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e535:	52                   	push   edx
c001e536:	68 56 e5 01 c0       	push   0xc001e556
c001e53b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e53e:	89 dc                	mov    esp,ebx
c001e540:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e543:	68 23 00 00 00       	push   0x23
c001e548:	51                   	push   ecx
c001e549:	68 02 02 00 00       	push   0x202
c001e54e:	68 1b 00 00 00       	push   0x1b
c001e553:	ff 36                	push   DWORD PTR [esi]
c001e555:	cf                   	iret   

c001e556 <finishSignal>:
c001e556:	cd 0f                	int    0xf

c001e558 <finishSignal2>:
c001e558:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e55e:	e8 e8 2c ff ff       	call   c001124b <KiFinishSignalZ>
c001e563:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e569:	68 23 00 00 00       	push   0x23
c001e56e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e571:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e574:	68 1b 00 00 00       	push   0x1b
c001e579:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e57c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e57f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e582:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e585:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e588:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e58b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e58e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e591:	cf                   	iret   

c001e592 <skipSignals>:
c001e592:	61                   	popa   
c001e593:	81 c4 08 00 00 00    	add    esp,0x8
c001e599:	cf                   	iret   
c001e59a:	90                   	nop
c001e59b:	90                   	nop

c001e59c <irq16>:
c001e59c:	fa                   	cli    
c001e59d:	6a 00                	push   0x0
c001e59f:	6a 30                	push   0x30
c001e5a1:	e9 c0 fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5a6 <irq17>:
c001e5a6:	fa                   	cli    
c001e5a7:	6a 00                	push   0x0
c001e5a9:	6a 31                	push   0x31
c001e5ab:	e9 b6 fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5b0 <irq18>:
c001e5b0:	fa                   	cli    
c001e5b1:	6a 00                	push   0x0
c001e5b3:	6a 32                	push   0x32
c001e5b5:	e9 ac fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5ba <irq19>:
c001e5ba:	fa                   	cli    
c001e5bb:	6a 00                	push   0x0
c001e5bd:	6a 33                	push   0x33
c001e5bf:	e9 a2 fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5c4 <irq20>:
c001e5c4:	fa                   	cli    
c001e5c5:	6a 00                	push   0x0
c001e5c7:	6a 34                	push   0x34
c001e5c9:	e9 98 fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5ce <irq21>:
c001e5ce:	fa                   	cli    
c001e5cf:	6a 00                	push   0x0
c001e5d1:	6a 35                	push   0x35
c001e5d3:	e9 8e fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5d8 <irq22>:
c001e5d8:	fa                   	cli    
c001e5d9:	6a 00                	push   0x0
c001e5db:	6a 36                	push   0x36
c001e5dd:	e9 84 fe ff ff       	jmp    c001e466 <int_common_stub>

c001e5e2 <irq23>:
c001e5e2:	fa                   	cli    
c001e5e3:	6a 00                	push   0x0
c001e5e5:	6a 37                	push   0x37
c001e5e7:	e9 7a fe ff ff       	jmp    c001e466 <int_common_stub>
c001e5ec:	66 90                	xchg   ax,ax
c001e5ee:	66 90                	xchg   ax,ax

c001e5f0 <i386GetRDRAND>:
c001e5f0:	b9 64 00 00 00       	mov    ecx,0x64

c001e5f5 <retry>:
c001e5f5:	0f c7 f0             	rdrand eax
c001e5f8:	72 05                	jb     c001e5ff <retry.done>
c001e5fa:	e2 f9                	loop   c001e5f5 <retry>

c001e5fc <retry.fail>:
c001e5fc:	31 c0                	xor    eax,eax
c001e5fe:	c3                   	ret    

c001e5ff <retry.done>:
c001e5ff:	c3                   	ret    

c001e600 <absolutelyNoChanceInHell>:
c001e600:	b8 01 00 00 00       	mov    eax,0x1
c001e605:	0f a2                	cpuid  
c001e607:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e60d:	74 06                	je     c001e615 <sseDetect.noSSE>
c001e60f:	b8 01 00 00 00       	mov    eax,0x1
c001e614:	c3                   	ret    

c001e615 <sseDetect.noSSE>:
c001e615:	31 c0                	xor    eax,eax
c001e617:	c3                   	ret    

c001e618 <sseSave>:
c001e618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e61c:	0f ae 00             	fxsave [eax]
c001e61f:	c3                   	ret    

c001e620 <sseLoad>:
c001e620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e624:	0f ae 08             	fxrstor [eax]
c001e627:	c3                   	ret    

c001e628 <sseInit>:
c001e628:	e8 42 00 00 00       	call   c001e66f <x87Init>
c001e62d:	0f 20 e0             	mov    eax,cr4
c001e630:	66 0d 00 06          	or     ax,0x600
c001e634:	0f 22 e0             	mov    cr4,eax
c001e637:	c3                   	ret    

c001e638 <sseClose>:
c001e638:	c3                   	ret    
c001e639:	66 90                	xchg   ax,ax
c001e63b:	66 90                	xchg   ax,ax
c001e63d:	66 90                	xchg   ax,ax
c001e63f:	90                   	nop

c001e640 <value_37F>:
c001e640:	7f 03                	jg     c001e645 <value_37A+0x1>

c001e642 <value_37E>:
c001e642:	7e 03                	jle    c001e647 <x87Detect+0x1>

c001e644 <value_37A>:
c001e644:	7a 03                	jp     c001e649 <x87Detect+0x3>

c001e646 <x87Detect>:
c001e646:	b8 01 00 00 00       	mov    eax,0x1
c001e64b:	0f a2                	cpuid  
c001e64d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e653:	74 06                	je     c001e65b <x87Detect.nox87>
c001e655:	b8 01 00 00 00       	mov    eax,0x1
c001e65a:	c3                   	ret    

c001e65b <x87Detect.nox87>:
c001e65b:	b8 00 00 00 00       	mov    eax,0x0
c001e660:	c3                   	ret    

c001e661 <x87Save>:
c001e661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e665:	dd 30                	fnsave [eax]
c001e667:	c3                   	ret    

c001e668 <x87Load>:
c001e668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66c:	dd 20                	frstor [eax]
c001e66e:	c3                   	ret    

c001e66f <x87Init>:
c001e66f:	0f 20 c0             	mov    eax,cr0
c001e672:	66 25 fb ff          	and    ax,0xfffb
c001e676:	66 0d 22 00          	or     ax,0x22
c001e67a:	0f 22 c0             	mov    cr0,eax
c001e67d:	db e3                	fninit 
c001e67f:	0f 06                	clts   
c001e681:	d9 2d 44 e6 01 c0    	fldcw  WORD PTR ds:0xc001e644
c001e687:	c3                   	ret    

c001e688 <x87Close>:
c001e688:	c3                   	ret    
c001e689:	66 90                	xchg   ax,ax
c001e68b:	90                   	nop

c001e68c <__do_global_ctors_aux>:
c001e68c:	a1 40 f6 01 c0       	mov    eax,ds:0xc001f640
c001e691:	83 f8 ff             	cmp    eax,0xffffffff
c001e694:	74 1a                	je     c001e6b0 <__do_global_ctors_aux+0x24>
c001e696:	55                   	push   ebp
c001e697:	89 e5                	mov    ebp,esp
c001e699:	53                   	push   ebx
c001e69a:	52                   	push   edx
c001e69b:	bb 40 f6 01 c0       	mov    ebx,0xc001f640
c001e6a0:	ff d0                	call   eax
c001e6a2:	83 eb 04             	sub    ebx,0x4
c001e6a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e6a7:	83 f8 ff             	cmp    eax,0xffffffff
c001e6aa:	75 f4                	jne    c001e6a0 <__do_global_ctors_aux+0x14>
c001e6ac:	58                   	pop    eax
c001e6ad:	5b                   	pop    ebx
c001e6ae:	5d                   	pop    ebp
c001e6af:	c3                   	ret    
c001e6b0:	c3                   	ret    
c001e6b1:	66 90                	xchg   ax,ax
c001e6b3:	90                   	nop

c001e6b4 <__divdi3>:
c001e6b4:	55                   	push   ebp
c001e6b5:	57                   	push   edi
c001e6b6:	56                   	push   esi
c001e6b7:	53                   	push   ebx
c001e6b8:	83 ec 1c             	sub    esp,0x1c
c001e6bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e6bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e6c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e6ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e6d2:	85 db                	test   ebx,ebx
c001e6d4:	0f 88 8e 00 00 00    	js     c001e768 <__divdi3+0xb4>
c001e6da:	89 dd                	mov    ebp,ebx
c001e6dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e6e4:	89 d3                	mov    ebx,edx
c001e6e6:	85 d2                	test   edx,edx
c001e6e8:	79 0d                	jns    c001e6f7 <__divdi3+0x43>
c001e6ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e6ee:	f7 d8                	neg    eax
c001e6f0:	83 d2 00             	adc    edx,0x0
c001e6f3:	f7 da                	neg    edx
c001e6f5:	89 d3                	mov    ebx,edx
c001e6f7:	89 c7                	mov    edi,eax
c001e6f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e6fc:	85 db                	test   ebx,ebx
c001e6fe:	75 48                	jne    c001e748 <__divdi3+0x94>
c001e700:	39 ef                	cmp    edi,ebp
c001e702:	76 24                	jbe    c001e728 <__divdi3+0x74>
c001e704:	89 ea                	mov    edx,ebp
c001e706:	f7 f7                	div    edi
c001e708:	89 c1                	mov    ecx,eax
c001e70a:	31 f6                	xor    esi,esi
c001e70c:	89 c8                	mov    eax,ecx
c001e70e:	89 f2                	mov    edx,esi
c001e710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e714:	85 c9                	test   ecx,ecx
c001e716:	74 07                	je     c001e71f <__divdi3+0x6b>
c001e718:	f7 d8                	neg    eax
c001e71a:	83 d2 00             	adc    edx,0x0
c001e71d:	f7 da                	neg    edx
c001e71f:	83 c4 1c             	add    esp,0x1c
c001e722:	5b                   	pop    ebx
c001e723:	5e                   	pop    esi
c001e724:	5f                   	pop    edi
c001e725:	5d                   	pop    ebp
c001e726:	c3                   	ret    
c001e727:	90                   	nop
c001e728:	85 ff                	test   edi,edi
c001e72a:	75 0b                	jne    c001e737 <__divdi3+0x83>
c001e72c:	b8 01 00 00 00       	mov    eax,0x1
c001e731:	31 d2                	xor    edx,edx
c001e733:	f7 f3                	div    ebx
c001e735:	89 c7                	mov    edi,eax
c001e737:	31 d2                	xor    edx,edx
c001e739:	89 e8                	mov    eax,ebp
c001e73b:	f7 f7                	div    edi
c001e73d:	89 c6                	mov    esi,eax
c001e73f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e742:	f7 f7                	div    edi
c001e744:	89 c1                	mov    ecx,eax
c001e746:	eb c4                	jmp    c001e70c <__divdi3+0x58>
c001e748:	39 eb                	cmp    ebx,ebp
c001e74a:	77 3c                	ja     c001e788 <__divdi3+0xd4>
c001e74c:	0f bd f3             	bsr    esi,ebx
c001e74f:	83 f6 1f             	xor    esi,0x1f
c001e752:	75 40                	jne    c001e794 <__divdi3+0xe0>
c001e754:	39 eb                	cmp    ebx,ebp
c001e756:	72 09                	jb     c001e761 <__divdi3+0xad>
c001e758:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e75b:	0f 87 97 00 00 00    	ja     c001e7f8 <__divdi3+0x144>
c001e761:	b9 01 00 00 00       	mov    ecx,0x1
c001e766:	eb a4                	jmp    c001e70c <__divdi3+0x58>
c001e768:	f7 d9                	neg    ecx
c001e76a:	83 d3 00             	adc    ebx,0x0
c001e76d:	f7 db                	neg    ebx
c001e76f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e772:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e776:	89 dd                	mov    ebp,ebx
c001e778:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e780:	e9 5f ff ff ff       	jmp    c001e6e4 <__divdi3+0x30>
c001e785:	8d 76 00             	lea    esi,[esi+0x0]
c001e788:	31 f6                	xor    esi,esi
c001e78a:	31 c9                	xor    ecx,ecx
c001e78c:	e9 7b ff ff ff       	jmp    c001e70c <__divdi3+0x58>
c001e791:	8d 76 00             	lea    esi,[esi+0x0]
c001e794:	b8 20 00 00 00       	mov    eax,0x20
c001e799:	29 f0                	sub    eax,esi
c001e79b:	89 f1                	mov    ecx,esi
c001e79d:	d3 e3                	shl    ebx,cl
c001e79f:	89 fa                	mov    edx,edi
c001e7a1:	88 c1                	mov    cl,al
c001e7a3:	d3 ea                	shr    edx,cl
c001e7a5:	09 da                	or     edx,ebx
c001e7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7ab:	89 f1                	mov    ecx,esi
c001e7ad:	d3 e7                	shl    edi,cl
c001e7af:	89 eb                	mov    ebx,ebp
c001e7b1:	88 c1                	mov    cl,al
c001e7b3:	d3 eb                	shr    ebx,cl
c001e7b5:	89 f1                	mov    ecx,esi
c001e7b7:	d3 e5                	shl    ebp,cl
c001e7b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e7bc:	88 c1                	mov    cl,al
c001e7be:	d3 ea                	shr    edx,cl
c001e7c0:	09 d5                	or     ebp,edx
c001e7c2:	89 e8                	mov    eax,ebp
c001e7c4:	89 da                	mov    edx,ebx
c001e7c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e7ca:	89 d3                	mov    ebx,edx
c001e7cc:	89 c5                	mov    ebp,eax
c001e7ce:	f7 e7                	mul    edi
c001e7d0:	39 d3                	cmp    ebx,edx
c001e7d2:	72 18                	jb     c001e7ec <__divdi3+0x138>
c001e7d4:	74 0a                	je     c001e7e0 <__divdi3+0x12c>
c001e7d6:	89 e9                	mov    ecx,ebp
c001e7d8:	31 f6                	xor    esi,esi
c001e7da:	e9 2d ff ff ff       	jmp    c001e70c <__divdi3+0x58>
c001e7df:	90                   	nop
c001e7e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e7e3:	89 f1                	mov    ecx,esi
c001e7e5:	d3 e7                	shl    edi,cl
c001e7e7:	39 c7                	cmp    edi,eax
c001e7e9:	73 eb                	jae    c001e7d6 <__divdi3+0x122>
c001e7eb:	90                   	nop
c001e7ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e7ef:	31 f6                	xor    esi,esi
c001e7f1:	e9 16 ff ff ff       	jmp    c001e70c <__divdi3+0x58>
c001e7f6:	66 90                	xchg   ax,ax
c001e7f8:	31 c9                	xor    ecx,ecx
c001e7fa:	e9 0d ff ff ff       	jmp    c001e70c <__divdi3+0x58>
c001e7ff:	90                   	nop

c001e800 <__moddi3>:
c001e800:	55                   	push   ebp
c001e801:	57                   	push   edi
c001e802:	56                   	push   esi
c001e803:	53                   	push   ebx
c001e804:	83 ec 2c             	sub    esp,0x2c
c001e807:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e80b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e80f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e813:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e817:	85 db                	test   ebx,ebx
c001e819:	0f 88 85 00 00 00    	js     c001e8a4 <__moddi3+0xa4>
c001e81f:	89 de                	mov    esi,ebx
c001e821:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e829:	89 d7                	mov    edi,edx
c001e82b:	85 d2                	test   edx,edx
c001e82d:	79 09                	jns    c001e838 <__moddi3+0x38>
c001e82f:	f7 d8                	neg    eax
c001e831:	83 d2 00             	adc    edx,0x0
c001e834:	f7 da                	neg    edx
c001e836:	89 d7                	mov    edi,edx
c001e838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e83c:	89 cd                	mov    ebp,ecx
c001e83e:	85 ff                	test   edi,edi
c001e840:	75 52                	jne    c001e894 <__moddi3+0x94>
c001e842:	89 c3                	mov    ebx,eax
c001e844:	39 f0                	cmp    eax,esi
c001e846:	76 24                	jbe    c001e86c <__moddi3+0x6c>
c001e848:	89 c8                	mov    eax,ecx
c001e84a:	89 f2                	mov    edx,esi
c001e84c:	f7 f3                	div    ebx
c001e84e:	89 d6                	mov    esi,edx
c001e850:	89 f0                	mov    eax,esi
c001e852:	31 d2                	xor    edx,edx
c001e854:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e858:	85 c9                	test   ecx,ecx
c001e85a:	74 07                	je     c001e863 <__moddi3+0x63>
c001e85c:	f7 d8                	neg    eax
c001e85e:	83 d2 00             	adc    edx,0x0
c001e861:	f7 da                	neg    edx
c001e863:	83 c4 2c             	add    esp,0x2c
c001e866:	5b                   	pop    ebx
c001e867:	5e                   	pop    esi
c001e868:	5f                   	pop    edi
c001e869:	5d                   	pop    ebp
c001e86a:	c3                   	ret    
c001e86b:	90                   	nop
c001e86c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e870:	85 db                	test   ebx,ebx
c001e872:	75 0d                	jne    c001e881 <__moddi3+0x81>
c001e874:	b8 01 00 00 00       	mov    eax,0x1
c001e879:	31 d2                	xor    edx,edx
c001e87b:	f7 f7                	div    edi
c001e87d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e881:	89 f0                	mov    eax,esi
c001e883:	31 d2                	xor    edx,edx
c001e885:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e889:	f7 f7                	div    edi
c001e88b:	89 e8                	mov    eax,ebp
c001e88d:	f7 f7                	div    edi
c001e88f:	89 d6                	mov    esi,edx
c001e891:	eb bd                	jmp    c001e850 <__moddi3+0x50>
c001e893:	90                   	nop
c001e894:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e898:	39 f7                	cmp    edi,esi
c001e89a:	76 20                	jbe    c001e8bc <__moddi3+0xbc>
c001e89c:	89 c8                	mov    eax,ecx
c001e89e:	89 f2                	mov    edx,esi
c001e8a0:	eb b2                	jmp    c001e854 <__moddi3+0x54>
c001e8a2:	66 90                	xchg   ax,ax
c001e8a4:	f7 d9                	neg    ecx
c001e8a6:	83 d3 00             	adc    ebx,0x0
c001e8a9:	f7 db                	neg    ebx
c001e8ab:	89 de                	mov    esi,ebx
c001e8ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e8b5:	e9 6f ff ff ff       	jmp    c001e829 <__moddi3+0x29>
c001e8ba:	66 90                	xchg   ax,ax
c001e8bc:	0f bd c7             	bsr    eax,edi
c001e8bf:	83 f0 1f             	xor    eax,0x1f
c001e8c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e8c6:	75 24                	jne    c001e8ec <__moddi3+0xec>
c001e8c8:	39 f7                	cmp    edi,esi
c001e8ca:	72 06                	jb     c001e8d2 <__moddi3+0xd2>
c001e8cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e8d0:	77 0c                	ja     c001e8de <__moddi3+0xde>
c001e8d2:	89 e9                	mov    ecx,ebp
c001e8d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e8d8:	19 fe                	sbb    esi,edi
c001e8da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e8de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8e2:	89 f2                	mov    edx,esi
c001e8e4:	e9 6b ff ff ff       	jmp    c001e854 <__moddi3+0x54>
c001e8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e8ec:	b8 20 00 00 00       	mov    eax,0x20
c001e8f1:	89 c2                	mov    edx,eax
c001e8f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e8f7:	29 da                	sub    edx,ebx
c001e8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e8fd:	88 d9                	mov    cl,bl
c001e8ff:	d3 e7                	shl    edi,cl
c001e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e905:	88 d1                	mov    cl,dl
c001e907:	d3 e8                	shr    eax,cl
c001e909:	09 c7                	or     edi,eax
c001e90b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e90f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e913:	89 d8                	mov    eax,ebx
c001e915:	88 d9                	mov    cl,bl
c001e917:	d3 e7                	shl    edi,cl
c001e919:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e91d:	89 f3                	mov    ebx,esi
c001e91f:	88 d1                	mov    cl,dl
c001e921:	d3 eb                	shr    ebx,cl
c001e923:	89 c7                	mov    edi,eax
c001e925:	88 c1                	mov    cl,al
c001e927:	d3 e6                	shl    esi,cl
c001e929:	89 e8                	mov    eax,ebp
c001e92b:	88 d1                	mov    cl,dl
c001e92d:	d3 e8                	shr    eax,cl
c001e92f:	09 f0                	or     eax,esi
c001e931:	89 f9                	mov    ecx,edi
c001e933:	d3 e5                	shl    ebp,cl
c001e935:	89 da                	mov    edx,ebx
c001e937:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e93b:	89 d3                	mov    ebx,edx
c001e93d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e941:	89 c6                	mov    esi,eax
c001e943:	89 d1                	mov    ecx,edx
c001e945:	39 d3                	cmp    ebx,edx
c001e947:	72 27                	jb     c001e970 <__moddi3+0x170>
c001e949:	74 21                	je     c001e96c <__moddi3+0x16c>
c001e94b:	29 f5                	sub    ebp,esi
c001e94d:	19 cb                	sbb    ebx,ecx
c001e94f:	89 de                	mov    esi,ebx
c001e951:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e955:	d3 e6                	shl    esi,cl
c001e957:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e95b:	89 f9                	mov    ecx,edi
c001e95d:	d3 ed                	shr    ebp,cl
c001e95f:	09 ee                	or     esi,ebp
c001e961:	89 f0                	mov    eax,esi
c001e963:	d3 eb                	shr    ebx,cl
c001e965:	89 da                	mov    edx,ebx
c001e967:	e9 e8 fe ff ff       	jmp    c001e854 <__moddi3+0x54>
c001e96c:	39 c5                	cmp    ebp,eax
c001e96e:	73 db                	jae    c001e94b <__moddi3+0x14b>
c001e970:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e974:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e978:	89 d1                	mov    ecx,edx
c001e97a:	89 c6                	mov    esi,eax
c001e97c:	eb cd                	jmp    c001e94b <__moddi3+0x14b>
c001e97e:	66 90                	xchg   ax,ax

c001e980 <__udivdi3>:
c001e980:	55                   	push   ebp
c001e981:	57                   	push   edi
c001e982:	56                   	push   esi
c001e983:	53                   	push   ebx
c001e984:	83 ec 1c             	sub    esp,0x1c
c001e987:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e98b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e98f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e993:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e997:	85 d2                	test   edx,edx
c001e999:	75 41                	jne    c001e9dc <__udivdi3+0x5c>
c001e99b:	39 f7                	cmp    edi,esi
c001e99d:	76 15                	jbe    c001e9b4 <__udivdi3+0x34>
c001e99f:	89 e8                	mov    eax,ebp
c001e9a1:	89 f2                	mov    edx,esi
c001e9a3:	f7 f7                	div    edi
c001e9a5:	31 db                	xor    ebx,ebx
c001e9a7:	89 da                	mov    edx,ebx
c001e9a9:	83 c4 1c             	add    esp,0x1c
c001e9ac:	5b                   	pop    ebx
c001e9ad:	5e                   	pop    esi
c001e9ae:	5f                   	pop    edi
c001e9af:	5d                   	pop    ebp
c001e9b0:	c3                   	ret    
c001e9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9b4:	89 f9                	mov    ecx,edi
c001e9b6:	85 ff                	test   edi,edi
c001e9b8:	75 0b                	jne    c001e9c5 <__udivdi3+0x45>
c001e9ba:	b8 01 00 00 00       	mov    eax,0x1
c001e9bf:	31 d2                	xor    edx,edx
c001e9c1:	f7 f7                	div    edi
c001e9c3:	89 c1                	mov    ecx,eax
c001e9c5:	31 d2                	xor    edx,edx
c001e9c7:	89 f0                	mov    eax,esi
c001e9c9:	f7 f1                	div    ecx
c001e9cb:	89 c3                	mov    ebx,eax
c001e9cd:	89 e8                	mov    eax,ebp
c001e9cf:	f7 f1                	div    ecx
c001e9d1:	89 da                	mov    edx,ebx
c001e9d3:	83 c4 1c             	add    esp,0x1c
c001e9d6:	5b                   	pop    ebx
c001e9d7:	5e                   	pop    esi
c001e9d8:	5f                   	pop    edi
c001e9d9:	5d                   	pop    ebp
c001e9da:	c3                   	ret    
c001e9db:	90                   	nop
c001e9dc:	39 f2                	cmp    edx,esi
c001e9de:	77 1c                	ja     c001e9fc <__udivdi3+0x7c>
c001e9e0:	0f bd da             	bsr    ebx,edx
c001e9e3:	83 f3 1f             	xor    ebx,0x1f
c001e9e6:	75 24                	jne    c001ea0c <__udivdi3+0x8c>
c001e9e8:	39 f2                	cmp    edx,esi
c001e9ea:	72 08                	jb     c001e9f4 <__udivdi3+0x74>
c001e9ec:	39 ef                	cmp    edi,ebp
c001e9ee:	0f 87 84 00 00 00    	ja     c001ea78 <__udivdi3+0xf8>
c001e9f4:	b8 01 00 00 00       	mov    eax,0x1
c001e9f9:	eb ac                	jmp    c001e9a7 <__udivdi3+0x27>
c001e9fb:	90                   	nop
c001e9fc:	31 db                	xor    ebx,ebx
c001e9fe:	31 c0                	xor    eax,eax
c001ea00:	89 da                	mov    edx,ebx
c001ea02:	83 c4 1c             	add    esp,0x1c
c001ea05:	5b                   	pop    ebx
c001ea06:	5e                   	pop    esi
c001ea07:	5f                   	pop    edi
c001ea08:	5d                   	pop    ebp
c001ea09:	c3                   	ret    
c001ea0a:	66 90                	xchg   ax,ax
c001ea0c:	b8 20 00 00 00       	mov    eax,0x20
c001ea11:	29 d8                	sub    eax,ebx
c001ea13:	88 d9                	mov    cl,bl
c001ea15:	d3 e2                	shl    edx,cl
c001ea17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea1b:	89 fa                	mov    edx,edi
c001ea1d:	88 c1                	mov    cl,al
c001ea1f:	d3 ea                	shr    edx,cl
c001ea21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ea25:	09 d1                	or     ecx,edx
c001ea27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea2b:	88 d9                	mov    cl,bl
c001ea2d:	d3 e7                	shl    edi,cl
c001ea2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ea33:	89 f7                	mov    edi,esi
c001ea35:	88 c1                	mov    cl,al
c001ea37:	d3 ef                	shr    edi,cl
c001ea39:	88 d9                	mov    cl,bl
c001ea3b:	d3 e6                	shl    esi,cl
c001ea3d:	89 ea                	mov    edx,ebp
c001ea3f:	88 c1                	mov    cl,al
c001ea41:	d3 ea                	shr    edx,cl
c001ea43:	09 d6                	or     esi,edx
c001ea45:	89 f0                	mov    eax,esi
c001ea47:	89 fa                	mov    edx,edi
c001ea49:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ea4d:	89 d7                	mov    edi,edx
c001ea4f:	89 c6                	mov    esi,eax
c001ea51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ea55:	39 d7                	cmp    edi,edx
c001ea57:	72 13                	jb     c001ea6c <__udivdi3+0xec>
c001ea59:	74 09                	je     c001ea64 <__udivdi3+0xe4>
c001ea5b:	89 f0                	mov    eax,esi
c001ea5d:	31 db                	xor    ebx,ebx
c001ea5f:	e9 43 ff ff ff       	jmp    c001e9a7 <__udivdi3+0x27>
c001ea64:	88 d9                	mov    cl,bl
c001ea66:	d3 e5                	shl    ebp,cl
c001ea68:	39 c5                	cmp    ebp,eax
c001ea6a:	73 ef                	jae    c001ea5b <__udivdi3+0xdb>
c001ea6c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ea6f:	31 db                	xor    ebx,ebx
c001ea71:	e9 31 ff ff ff       	jmp    c001e9a7 <__udivdi3+0x27>
c001ea76:	66 90                	xchg   ax,ax
c001ea78:	31 c0                	xor    eax,eax
c001ea7a:	e9 28 ff ff ff       	jmp    c001e9a7 <__udivdi3+0x27>
c001ea7f:	90                   	nop

c001ea80 <__umoddi3>:
c001ea80:	55                   	push   ebp
c001ea81:	57                   	push   edi
c001ea82:	56                   	push   esi
c001ea83:	53                   	push   ebx
c001ea84:	83 ec 1c             	sub    esp,0x1c
c001ea87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ea8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ea8f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ea93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ea97:	89 da                	mov    edx,ebx
c001ea99:	85 c0                	test   eax,eax
c001ea9b:	75 37                	jne    c001ead4 <__umoddi3+0x54>
c001ea9d:	39 df                	cmp    edi,ebx
c001ea9f:	76 13                	jbe    c001eab4 <__umoddi3+0x34>
c001eaa1:	89 f0                	mov    eax,esi
c001eaa3:	f7 f7                	div    edi
c001eaa5:	89 d0                	mov    eax,edx
c001eaa7:	31 d2                	xor    edx,edx
c001eaa9:	83 c4 1c             	add    esp,0x1c
c001eaac:	5b                   	pop    ebx
c001eaad:	5e                   	pop    esi
c001eaae:	5f                   	pop    edi
c001eaaf:	5d                   	pop    ebp
c001eab0:	c3                   	ret    
c001eab1:	8d 76 00             	lea    esi,[esi+0x0]
c001eab4:	89 fd                	mov    ebp,edi
c001eab6:	85 ff                	test   edi,edi
c001eab8:	75 0b                	jne    c001eac5 <__umoddi3+0x45>
c001eaba:	b8 01 00 00 00       	mov    eax,0x1
c001eabf:	31 d2                	xor    edx,edx
c001eac1:	f7 f7                	div    edi
c001eac3:	89 c5                	mov    ebp,eax
c001eac5:	89 d8                	mov    eax,ebx
c001eac7:	31 d2                	xor    edx,edx
c001eac9:	f7 f5                	div    ebp
c001eacb:	89 f0                	mov    eax,esi
c001eacd:	f7 f5                	div    ebp
c001eacf:	89 d0                	mov    eax,edx
c001ead1:	eb d4                	jmp    c001eaa7 <__umoddi3+0x27>
c001ead3:	90                   	nop
c001ead4:	89 f1                	mov    ecx,esi
c001ead6:	39 d8                	cmp    eax,ebx
c001ead8:	76 0a                	jbe    c001eae4 <__umoddi3+0x64>
c001eada:	89 f0                	mov    eax,esi
c001eadc:	83 c4 1c             	add    esp,0x1c
c001eadf:	5b                   	pop    ebx
c001eae0:	5e                   	pop    esi
c001eae1:	5f                   	pop    edi
c001eae2:	5d                   	pop    ebp
c001eae3:	c3                   	ret    
c001eae4:	0f bd e8             	bsr    ebp,eax
c001eae7:	83 f5 1f             	xor    ebp,0x1f
c001eaea:	75 1c                	jne    c001eb08 <__umoddi3+0x88>
c001eaec:	39 d8                	cmp    eax,ebx
c001eaee:	72 04                	jb     c001eaf4 <__umoddi3+0x74>
c001eaf0:	39 f7                	cmp    edi,esi
c001eaf2:	77 08                	ja     c001eafc <__umoddi3+0x7c>
c001eaf4:	89 da                	mov    edx,ebx
c001eaf6:	29 fe                	sub    esi,edi
c001eaf8:	19 c2                	sbb    edx,eax
c001eafa:	89 f1                	mov    ecx,esi
c001eafc:	89 c8                	mov    eax,ecx
c001eafe:	83 c4 1c             	add    esp,0x1c
c001eb01:	5b                   	pop    ebx
c001eb02:	5e                   	pop    esi
c001eb03:	5f                   	pop    edi
c001eb04:	5d                   	pop    ebp
c001eb05:	c3                   	ret    
c001eb06:	66 90                	xchg   ax,ax
c001eb08:	ba 20 00 00 00       	mov    edx,0x20
c001eb0d:	29 ea                	sub    edx,ebp
c001eb0f:	89 e9                	mov    ecx,ebp
c001eb11:	d3 e0                	shl    eax,cl
c001eb13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb17:	89 f8                	mov    eax,edi
c001eb19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eb1d:	88 d1                	mov    cl,dl
c001eb1f:	d3 e8                	shr    eax,cl
c001eb21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb25:	09 c1                	or     ecx,eax
c001eb27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eb2b:	89 e9                	mov    ecx,ebp
c001eb2d:	d3 e7                	shl    edi,cl
c001eb2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eb33:	89 d8                	mov    eax,ebx
c001eb35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb39:	88 d1                	mov    cl,dl
c001eb3b:	d3 e8                	shr    eax,cl
c001eb3d:	89 c7                	mov    edi,eax
c001eb3f:	89 e9                	mov    ecx,ebp
c001eb41:	d3 e3                	shl    ebx,cl
c001eb43:	89 f0                	mov    eax,esi
c001eb45:	88 d1                	mov    cl,dl
c001eb47:	d3 e8                	shr    eax,cl
c001eb49:	09 d8                	or     eax,ebx
c001eb4b:	89 e9                	mov    ecx,ebp
c001eb4d:	d3 e6                	shl    esi,cl
c001eb4f:	89 f3                	mov    ebx,esi
c001eb51:	89 fa                	mov    edx,edi
c001eb53:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eb57:	89 d1                	mov    ecx,edx
c001eb59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eb5d:	89 c6                	mov    esi,eax
c001eb5f:	89 d7                	mov    edi,edx
c001eb61:	39 d1                	cmp    ecx,edx
c001eb63:	72 27                	jb     c001eb8c <__umoddi3+0x10c>
c001eb65:	74 21                	je     c001eb88 <__umoddi3+0x108>
c001eb67:	89 ca                	mov    edx,ecx
c001eb69:	29 f3                	sub    ebx,esi
c001eb6b:	19 fa                	sbb    edx,edi
c001eb6d:	89 d0                	mov    eax,edx
c001eb6f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001eb73:	d3 e0                	shl    eax,cl
c001eb75:	89 e9                	mov    ecx,ebp
c001eb77:	d3 eb                	shr    ebx,cl
c001eb79:	09 d8                	or     eax,ebx
c001eb7b:	d3 ea                	shr    edx,cl
c001eb7d:	83 c4 1c             	add    esp,0x1c
c001eb80:	5b                   	pop    ebx
c001eb81:	5e                   	pop    esi
c001eb82:	5f                   	pop    edi
c001eb83:	5d                   	pop    ebp
c001eb84:	c3                   	ret    
c001eb85:	8d 76 00             	lea    esi,[esi+0x0]
c001eb88:	39 c3                	cmp    ebx,eax
c001eb8a:	73 db                	jae    c001eb67 <__umoddi3+0xe7>
c001eb8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eb90:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001eb94:	89 d7                	mov    edi,edx
c001eb96:	89 c6                	mov    esi,eax
c001eb98:	eb cd                	jmp    c001eb67 <__umoddi3+0xe7>

Disassembly of section .init:

c001eb9a <_init>:
c001eb9a:	55                   	push   ebp
c001eb9b:	89 e5                	mov    ebp,esp
c001eb9d:	e8 52 15 fe ff       	call   c00000f4 <frame_dummy>
c001eba2:	e8 e5 fa ff ff       	call   c001e68c <__do_global_ctors_aux>
c001eba7:	5d                   	pop    ebp
c001eba8:	c3                   	ret    

Disassembly of section .fini:

c001eba9 <_fini>:
c001eba9:	55                   	push   ebp
c001ebaa:	89 e5                	mov    ebp,esp
c001ebac:	e8 d3 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ebb1:	5d                   	pop    ebp
c001ebb2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ebb4 <Computer::~Computer()>:
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	ba d4 fe 01 c0       	mov    edx,0xc001fed4
c001ebbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc0:	89 10                	mov    DWORD PTR [eax],edx
c001ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	50                   	push   eax
c001ebca:	e8 75 d3 fe ff       	call   c000bf44 <Device::~Device()>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	90                   	nop
c001ebd3:	83 c4 0c             	add    esp,0xc
c001ebd6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ebd8 <Computer::~Computer()>:
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe2:	e8 cd ff ff ff       	call   c001ebb4 <Computer::~Computer()>
c001ebe7:	83 c4 10             	add    esp,0x10
c001ebea:	83 ec 08             	sub    esp,0x8
c001ebed:	68 70 01 00 00       	push   0x170
c001ebf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebf6:	e8 11 bc fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ebfb:	83 c4 10             	add    esp,0x10
c001ebfe:	83 c4 0c             	add    esp,0xc
c001ec01:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ec02 <idleCommon()>:
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	fa                   	cli    
c001ec06:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001ec0c:	e8 6b 67 ff ff       	call   c001537c <schedule()>
c001ec11:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001ec16:	48                   	dec    eax
c001ec17:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001ec1c:	75 01                	jne    c001ec1f <idleCommon()+0x1d>
c001ec1e:	fb                   	sti    
c001ec1f:	83 c4 0c             	add    esp,0xc
c001ec22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec24 <LinkedList<UnixFile>::~LinkedList()>:
c001ec24:	90                   	nop
c001ec25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec26 <LinkedList<UnixFile>::LinkedList()>:
c001ec26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec66:	90                   	nop
c001ec67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ec68 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec70:	75 10                	jne    c001ec82 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ec72:	83 ec 0c             	sub    esp,0xc
c001ec75:	68 e8 00 02 c0       	push   0xc00200e8
c001ec7a:	e8 3a 1f ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ec7f:	83 c4 10             	add    esp,0x10
c001ec82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec86:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec88:	85 c0                	test   eax,eax
c001ec8a:	74 34                	je     c001ecc0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec93:	85 c0                	test   eax,eax
c001ec95:	74 29                	je     c001ecc0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ec97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eca2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecbe:	eb 65                	jmp    c001ed25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ecc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc6:	85 c0                	test   eax,eax
c001ecc8:	75 4b                	jne    c001ed15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecd1:	85 c0                	test   eax,eax
c001ecd3:	75 40                	jne    c001ed15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ecd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecdd:	89 10                	mov    DWORD PTR [eax],edx
c001ecdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ece7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecff:	85 c0                	test   eax,eax
c001ed01:	74 22                	je     c001ed25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed03:	83 ec 0c             	sub    esp,0xc
c001ed06:	68 0a 01 02 c0       	push   0xc002010a
c001ed0b:	e8 a9 1e ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ed10:	83 c4 10             	add    esp,0x10
c001ed13:	eb 10                	jmp    c001ed25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed15:	83 ec 0c             	sub    esp,0xc
c001ed18:	68 14 01 02 c0       	push   0xc0020114
c001ed1d:	e8 97 1e ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ed22:	83 c4 10             	add    esp,0x10
c001ed25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed36:	90                   	nop
c001ed37:	83 c4 0c             	add    esp,0xc
c001ed3a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ed3c <LinkedList<UnixFile>::getFirstElement()>:
c001ed3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ed44 <LinkedList<UnixFile>::removeFirst()>:
c001ed44:	83 ec 0c             	sub    esp,0xc
c001ed47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	75 12                	jne    c001ed63 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	68 20 01 02 c0       	push   0xc0020120
c001ed59:	e8 5b 1e ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	eb 7e                	jmp    c001ede1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ed63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed6d:	85 c0                	test   eax,eax
c001ed6f:	74 10                	je     c001ed81 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ed71:	83 ec 0c             	sub    esp,0xc
c001ed74:	68 6b 01 02 c0       	push   0xc002016b
c001ed79:	e8 3b 1e ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed8a:	85 c0                	test   eax,eax
c001ed8c:	75 33                	jne    c001edc1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ed8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edaa:	83 f8 01             	cmp    eax,0x1
c001edad:	74 21                	je     c001edd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	68 44 01 02 c0       	push   0xc0020144
c001edb7:	e8 fd 1d ff ff       	call   c0010bb9 <KePanic(char const*)>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	eb 0f                	jmp    c001edd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001edc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001edc7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	89 10                	mov    DWORD PTR [eax],edx
c001edd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edd7:	8d 50 ff             	lea    edx,[eax-0x1]
c001edda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ede1:	83 c4 0c             	add    esp,0xc
c001ede4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ede6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ede6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eded:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001edee <DriverlessDevice::~DriverlessDevice()>:
c001edee:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c001edf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf7:	89 10                	mov    DWORD PTR [eax],edx
c001edf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edfd:	50                   	push   eax
c001edfe:	e8 41 d1 fe ff       	call   c000bf44 <Device::~Device()>
c001ee03:	83 c4 04             	add    esp,0x4
c001ee06:	90                   	nop
c001ee07:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee08 <DriverlessDevice::~DriverlessDevice()>:
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	83 ec 0c             	sub    esp,0xc
c001ee0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee12:	e8 d7 ff ff ff       	call   c001edee <DriverlessDevice::~DriverlessDevice()>
c001ee17:	83 c4 10             	add    esp,0x10
c001ee1a:	83 ec 08             	sub    esp,0x8
c001ee1d:	68 58 01 00 00       	push   0x158
c001ee22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee26:	e8 e1 b9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	83 c4 0c             	add    esp,0xc
c001ee31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee32 <LinkedList<Device>::addElement(Device*)>:
c001ee32:	83 ec 0c             	sub    esp,0xc
c001ee35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee3a:	75 10                	jne    c001ee4c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee3c:	83 ec 0c             	sub    esp,0xc
c001ee3f:	68 e8 00 02 c0       	push   0xc00200e8
c001ee44:	e8 70 1d ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ee49:	83 c4 10             	add    esp,0x10
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee52:	85 c0                	test   eax,eax
c001ee54:	74 3a                	je     c001ee90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee5d:	85 c0                	test   eax,eax
c001ee5f:	74 2f                	je     c001ee90 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee6c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ee72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee84:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ee8e:	eb 68                	jmp    c001eef8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ee90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee96:	85 c0                	test   eax,eax
c001ee98:	75 4e                	jne    c001eee8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eea1:	85 c0                	test   eax,eax
c001eea3:	75 43                	jne    c001eee8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eead:	89 10                	mov    DWORD PTR [eax],edx
c001eeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eec1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eed2:	85 c0                	test   eax,eax
c001eed4:	74 22                	je     c001eef8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	68 0a 01 02 c0       	push   0xc002010a
c001eede:	e8 d6 1c ff ff       	call   c0010bb9 <KePanic(char const*)>
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	eb 10                	jmp    c001eef8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eee8:	83 ec 0c             	sub    esp,0xc
c001eeeb:	68 14 01 02 c0       	push   0xc0020114
c001eef0:	e8 c4 1c ff ff       	call   c0010bb9 <KePanic(char const*)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeff:	8d 50 01             	lea    edx,[eax+0x1]
c001ef02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef09:	90                   	nop
c001ef0a:	83 c4 0c             	add    esp,0xc
c001ef0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef0e <LinkedList<Device>::LinkedList()>:
c001ef0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef4e:	90                   	nop
c001ef4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ef50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef56:	85 c0                	test   eax,eax
c001ef58:	75 0e                	jne    c001ef68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef61:	85 c0                	test   eax,eax
c001ef63:	75 03                	jne    c001ef68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef65:	b0 01                	mov    al,0x1
c001ef67:	c3                   	ret    
c001ef68:	b0 00                	mov    al,0x0
c001ef6a:	90                   	nop
c001ef6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ef6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ef6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ef74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef7d:	85 c0                	test   eax,eax
c001ef7f:	75 17                	jne    c001ef98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ef81:	83 ec 0c             	sub    esp,0xc
c001ef84:	68 20 01 02 c0       	push   0xc0020120
c001ef89:	e8 2b 1c ff ff       	call   c0010bb9 <KePanic(char const*)>
c001ef8e:	83 c4 10             	add    esp,0x10
c001ef91:	e9 96 00 00 00       	jmp    c001f02c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ef96:	66 90                	xchg   ax,ax
c001ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001efa2:	85 c0                	test   eax,eax
c001efa4:	0f 95 c0             	setne  al
c001efa7:	0f b6 c0             	movzx  eax,al
c001efaa:	85 c0                	test   eax,eax
c001efac:	74 12                	je     c001efc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001efae:	83 ec 0c             	sub    esp,0xc
c001efb1:	68 6b 01 02 c0       	push   0xc002016b
c001efb6:	e8 fe 1b ff ff       	call   c0010bb9 <KePanic(char const*)>
c001efbb:	83 c4 10             	add    esp,0x10
c001efbe:	66 90                	xchg   ax,ax
c001efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001efc9:	85 c0                	test   eax,eax
c001efcb:	0f 94 c0             	sete   al
c001efce:	0f b6 c0             	movzx  eax,al
c001efd1:	85 c0                	test   eax,eax
c001efd3:	74 33                	je     c001f008 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001efd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eff1:	83 f8 01             	cmp    eax,0x1
c001eff4:	74 22                	je     c001f018 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001eff6:	83 ec 0c             	sub    esp,0xc
c001eff9:	68 44 01 02 c0       	push   0xc0020144
c001effe:	e8 b6 1b ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f003:	83 c4 10             	add    esp,0x10
c001f006:	eb 10                	jmp    c001f018 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f00e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f015:	89 10                	mov    DWORD PTR [eax],edx
c001f017:	90                   	nop
c001f018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f01f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f029:	8d 76 00             	lea    esi,[esi+0x0]
c001f02c:	83 c4 0c             	add    esp,0xc
c001f02f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f038:	75 12                	jne    c001f04c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	68 e8 00 02 c0       	push   0xc00200e8
c001f042:	e8 72 1b ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	66 90                	xchg   ax,ax
c001f04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f050:	8b 00                	mov    eax,DWORD PTR [eax]
c001f052:	85 c0                	test   eax,eax
c001f054:	74 36                	je     c001f08c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f05d:	85 c0                	test   eax,eax
c001f05f:	74 2b                	je     c001f08c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f065:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f068:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f06c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f077:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f081:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f088:	eb 6a                	jmp    c001f0f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f08a:	66 90                	xchg   ax,ax
c001f08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f090:	8b 00                	mov    eax,DWORD PTR [eax]
c001f092:	85 c0                	test   eax,eax
c001f094:	75 4e                	jne    c001f0e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f09d:	85 c0                	test   eax,eax
c001f09f:	75 43                	jne    c001f0e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a9:	89 10                	mov    DWORD PTR [eax],edx
c001f0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0cb:	85 c0                	test   eax,eax
c001f0cd:	74 25                	je     c001f0f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0cf:	83 ec 0c             	sub    esp,0xc
c001f0d2:	68 0a 01 02 c0       	push   0xc002010a
c001f0d7:	e8 dd 1a ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	eb 13                	jmp    c001f0f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	68 14 01 02 c0       	push   0xc0020114
c001f0ec:	e8 c8 1a ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0fb:	8d 50 01             	lea    edx,[eax+0x1]
c001f0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f102:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f105:	90                   	nop
c001f106:	83 c4 0c             	add    esp,0xc
c001f109:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f10c <ACPI::~ACPI()>:
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	ba a0 11 02 c0       	mov    edx,0xc00211a0
c001f114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f118:	89 10                	mov    DWORD PTR [eax],edx
c001f11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	50                   	push   eax
c001f122:	e8 1d ce fe ff       	call   c000bf44 <Device::~Device()>
c001f127:	83 c4 10             	add    esp,0x10
c001f12a:	90                   	nop
c001f12b:	83 c4 0c             	add    esp,0xc
c001f12e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f130 <ACPI::~ACPI()>:
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	83 ec 0c             	sub    esp,0xc
c001f136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13a:	e8 cd ff ff ff       	call   c001f10c <ACPI::~ACPI()>
c001f13f:	83 c4 10             	add    esp,0x10
c001f142:	83 ec 08             	sub    esp,0x8
c001f145:	68 64 12 00 00       	push   0x1264
c001f14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14e:	e8 b9 b6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f153:	83 c4 10             	add    esp,0x10
c001f156:	83 c4 0c             	add    esp,0xc
c001f159:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f15c <LinkedList<Device>::~LinkedList()>:
c001f15c:	90                   	nop
c001f15d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f160 <LinkedList<Device>::isEmpty()>:
c001f160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f164:	8b 00                	mov    eax,DWORD PTR [eax]
c001f166:	85 c0                	test   eax,eax
c001f168:	75 0e                	jne    c001f178 <LinkedList<Device>::isEmpty()+0x18>
c001f16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f16e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f171:	85 c0                	test   eax,eax
c001f173:	75 03                	jne    c001f178 <LinkedList<Device>::isEmpty()+0x18>
c001f175:	b0 01                	mov    al,0x1
c001f177:	c3                   	ret    
c001f178:	b0 00                	mov    al,0x0
c001f17a:	90                   	nop
c001f17b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f17c <LinkedList<Device>::getFirstElement()>:
c001f17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f180:	8b 00                	mov    eax,DWORD PTR [eax]
c001f182:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f184 <LinkedList<Device>::removeFirst()>:
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f18d:	85 c0                	test   eax,eax
c001f18f:	75 17                	jne    c001f1a8 <LinkedList<Device>::removeFirst()+0x24>
c001f191:	83 ec 0c             	sub    esp,0xc
c001f194:	68 20 01 02 c0       	push   0xc0020120
c001f199:	e8 1b 1a ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f19e:	83 c4 10             	add    esp,0x10
c001f1a1:	e9 92 00 00 00       	jmp    c001f238 <LinkedList<Device>::removeFirst()+0xb4>
c001f1a6:	66 90                	xchg   ax,ax
c001f1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f1b5:	85 c0                	test   eax,eax
c001f1b7:	74 13                	je     c001f1cc <LinkedList<Device>::removeFirst()+0x48>
c001f1b9:	83 ec 0c             	sub    esp,0xc
c001f1bc:	68 6b 01 02 c0       	push   0xc002016b
c001f1c1:	e8 f3 19 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f1c6:	83 c4 10             	add    esp,0x10
c001f1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f1d8:	85 c0                	test   eax,eax
c001f1da:	75 34                	jne    c001f210 <LinkedList<Device>::removeFirst()+0x8c>
c001f1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1f8:	83 f8 01             	cmp    eax,0x1
c001f1fb:	74 27                	je     c001f224 <LinkedList<Device>::removeFirst()+0xa0>
c001f1fd:	83 ec 0c             	sub    esp,0xc
c001f200:	68 44 01 02 c0       	push   0xc0020144
c001f205:	e8 af 19 ff ff       	call   c0010bb9 <KePanic(char const*)>
c001f20a:	83 c4 10             	add    esp,0x10
c001f20d:	eb 15                	jmp    c001f224 <LinkedList<Device>::removeFirst()+0xa0>
c001f20f:	90                   	nop
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	8b 00                	mov    eax,DWORD PTR [eax]
c001f216:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f220:	89 10                	mov    DWORD PTR [eax],edx
c001f222:	66 90                	xchg   ax,ax
c001f224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f228:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f22b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f232:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f235:	8d 76 00             	lea    esi,[esi+0x0]
c001f238:	83 c4 0c             	add    esp,0xc
c001f23b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f23c <CPU::~CPU()>:
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	ba 48 13 02 c0       	mov    edx,0xc0021348
c001f244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f248:	89 10                	mov    DWORD PTR [eax],edx
c001f24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24e:	83 ec 0c             	sub    esp,0xc
c001f251:	50                   	push   eax
c001f252:	e8 ed cc fe ff       	call   c000bf44 <Device::~Device()>
c001f257:	83 c4 10             	add    esp,0x10
c001f25a:	90                   	nop
c001f25b:	83 c4 0c             	add    esp,0xc
c001f25e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f260 <CPU::~CPU()>:
c001f260:	83 ec 0c             	sub    esp,0xc
c001f263:	83 ec 0c             	sub    esp,0xc
c001f266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26a:	e8 cd ff ff ff       	call   c001f23c <CPU::~CPU()>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	83 ec 08             	sub    esp,0x8
c001f275:	68 94 11 00 00       	push   0x1194
c001f27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27e:	e8 89 b5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	83 c4 0c             	add    esp,0xc
c001f289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f290:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f293:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f294 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f294:	90                   	nop
c001f295:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f298 <ThreadControlBlock::ThreadControlBlock()>:
c001f298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f29c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f2a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2a7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2b2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f2b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2bd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f2cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2d3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f2d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2db:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f2df:	90                   	nop
c001f2e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f2e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f2e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f2ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f312:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f31d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f324:	90                   	nop
c001f325:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f326 <PCI::~PCI()>:
c001f326:	83 ec 0c             	sub    esp,0xc
c001f329:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c001f32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f332:	89 10                	mov    DWORD PTR [eax],edx
c001f334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f338:	83 ec 0c             	sub    esp,0xc
c001f33b:	50                   	push   eax
c001f33c:	e8 9b c6 fe ff       	call   c000b9dc <Bus::~Bus()>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	90                   	nop
c001f345:	83 c4 0c             	add    esp,0xc
c001f348:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f34a <PCI::~PCI()>:
c001f34a:	83 ec 0c             	sub    esp,0xc
c001f34d:	83 ec 0c             	sub    esp,0xc
c001f350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f354:	e8 cd ff ff ff       	call   c001f326 <PCI::~PCI()>
c001f359:	83 c4 10             	add    esp,0x10
c001f35c:	83 ec 08             	sub    esp,0x8
c001f35f:	68 5c 01 00 00       	push   0x15c
c001f364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f368:	e8 9f b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f36d:	83 c4 10             	add    esp,0x10
c001f370:	83 c4 0c             	add    esp,0xc
c001f373:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f374 <IDE::~IDE()>:
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	ba 94 22 02 c0       	mov    edx,0xc0022294
c001f37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f380:	89 10                	mov    DWORD PTR [eax],edx
c001f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f386:	83 ec 0c             	sub    esp,0xc
c001f389:	50                   	push   eax
c001f38a:	e8 2d d0 fe ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	90                   	nop
c001f393:	83 c4 0c             	add    esp,0xc
c001f396:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f398 <IDE::~IDE()>:
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	83 ec 0c             	sub    esp,0xc
c001f39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a2:	e8 cd ff ff ff       	call   c001f374 <IDE::~IDE()>
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	83 ec 08             	sub    esp,0x8
c001f3ad:	68 70 02 00 00       	push   0x270
c001f3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b6:	e8 51 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f3bb:	83 c4 10             	add    esp,0x10
c001f3be:	83 c4 0c             	add    esp,0xc
c001f3c1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f3c2 <SATABus::~SATABus()>:
c001f3c2:	83 ec 0c             	sub    esp,0xc
c001f3c5:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001f3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ce:	89 10                	mov    DWORD PTR [eax],edx
c001f3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d4:	83 ec 0c             	sub    esp,0xc
c001f3d7:	50                   	push   eax
c001f3d8:	e8 df cf fe ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	90                   	nop
c001f3e1:	83 c4 0c             	add    esp,0xc
c001f3e4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f3e6 <SATABus::~SATABus()>:
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	83 ec 0c             	sub    esp,0xc
c001f3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f0:	e8 cd ff ff ff       	call   c001f3c2 <SATABus::~SATABus()>
c001f3f5:	83 c4 10             	add    esp,0x10
c001f3f8:	83 ec 08             	sub    esp,0x8
c001f3fb:	68 64 01 00 00       	push   0x164
c001f400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f404:	e8 03 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	83 c4 0c             	add    esp,0xc
c001f40f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f410 <ATA::~ATA()>:
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	ba 24 23 02 c0       	mov    edx,0xc0022324
c001f418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f41c:	89 10                	mov    DWORD PTR [eax],edx
c001f41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	50                   	push   eax
c001f426:	e8 73 d0 fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	90                   	nop
c001f42f:	83 c4 0c             	add    esp,0xc
c001f432:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f434 <ATA::~ATA()>:
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	83 ec 0c             	sub    esp,0xc
c001f43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f43e:	e8 cd ff ff ff       	call   c001f410 <ATA::~ATA()>
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	83 ec 08             	sub    esp,0x8
c001f449:	68 7c 01 00 00       	push   0x17c
c001f44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f452:	e8 b5 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f457:	83 c4 10             	add    esp,0x10
c001f45a:	83 c4 0c             	add    esp,0xc
c001f45d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f45e <ATAPI::~ATAPI()>:
c001f45e:	83 ec 0c             	sub    esp,0xc
c001f461:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c001f466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46a:	89 10                	mov    DWORD PTR [eax],edx
c001f46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f470:	83 ec 0c             	sub    esp,0xc
c001f473:	50                   	push   eax
c001f474:	e8 25 d0 fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f479:	83 c4 10             	add    esp,0x10
c001f47c:	90                   	nop
c001f47d:	83 c4 0c             	add    esp,0xc
c001f480:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f482 <ATAPI::~ATAPI()>:
c001f482:	83 ec 0c             	sub    esp,0xc
c001f485:	83 ec 0c             	sub    esp,0xc
c001f488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f48c:	e8 cd ff ff ff       	call   c001f45e <ATAPI::~ATAPI()>
c001f491:	83 c4 10             	add    esp,0x10
c001f494:	83 ec 08             	sub    esp,0x8
c001f497:	68 84 01 00 00       	push   0x184
c001f49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a0:	e8 67 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f4a5:	83 c4 10             	add    esp,0x10
c001f4a8:	83 c4 0c             	add    esp,0xc
c001f4ab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f4ac <SATA::~SATA()>:
c001f4ac:	83 ec 0c             	sub    esp,0xc
c001f4af:	ba 20 24 02 c0       	mov    edx,0xc0022420
c001f4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b8:	89 10                	mov    DWORD PTR [eax],edx
c001f4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4be:	83 ec 0c             	sub    esp,0xc
c001f4c1:	50                   	push   eax
c001f4c2:	e8 d7 cf fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	90                   	nop
c001f4cb:	83 c4 0c             	add    esp,0xc
c001f4ce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f4d0 <SATA::~SATA()>:
c001f4d0:	83 ec 0c             	sub    esp,0xc
c001f4d3:	83 ec 0c             	sub    esp,0xc
c001f4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4da:	e8 cd ff ff ff       	call   c001f4ac <SATA::~SATA()>
c001f4df:	83 c4 10             	add    esp,0x10
c001f4e2:	83 ec 08             	sub    esp,0x8
c001f4e5:	68 7c 01 00 00       	push   0x17c
c001f4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4ee:	e8 19 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	83 c4 0c             	add    esp,0xc
c001f4f9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f4fa <SATAPI::~SATAPI()>:
c001f4fa:	83 ec 0c             	sub    esp,0xc
c001f4fd:	ba 44 25 02 c0       	mov    edx,0xc0022544
c001f502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f506:	89 10                	mov    DWORD PTR [eax],edx
c001f508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50c:	83 ec 0c             	sub    esp,0xc
c001f50f:	50                   	push   eax
c001f510:	e8 89 cf fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f515:	83 c4 10             	add    esp,0x10
c001f518:	90                   	nop
c001f519:	83 c4 0c             	add    esp,0xc
c001f51c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f51e <SATAPI::~SATAPI()>:
c001f51e:	83 ec 0c             	sub    esp,0xc
c001f521:	83 ec 0c             	sub    esp,0xc
c001f524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f528:	e8 cd ff ff ff       	call   c001f4fa <SATAPI::~SATAPI()>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	83 ec 08             	sub    esp,0x8
c001f533:	68 84 01 00 00       	push   0x184
c001f538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53c:	e8 cb b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f541:	83 c4 10             	add    esp,0x10
c001f544:	83 c4 0c             	add    esp,0xc
c001f547:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f548 <IOAPIC::~IOAPIC()>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	ba 84 25 02 c0       	mov    edx,0xc0022584
c001f550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f554:	89 10                	mov    DWORD PTR [eax],edx
c001f556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55a:	83 ec 0c             	sub    esp,0xc
c001f55d:	50                   	push   eax
c001f55e:	e8 e1 c9 fe ff       	call   c000bf44 <Device::~Device()>
c001f563:	83 c4 10             	add    esp,0x10
c001f566:	90                   	nop
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f56c <IOAPIC::~IOAPIC()>:
c001f56c:	83 ec 0c             	sub    esp,0xc
c001f56f:	83 ec 0c             	sub    esp,0xc
c001f572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f576:	e8 cd ff ff ff       	call   c001f548 <IOAPIC::~IOAPIC()>
c001f57b:	83 c4 10             	add    esp,0x10
c001f57e:	83 ec 08             	sub    esp,0x8
c001f581:	68 68 01 00 00       	push   0x168
c001f586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f58a:	e8 7d b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f58f:	83 c4 10             	add    esp,0x10
c001f592:	83 c4 0c             	add    esp,0xc
c001f595:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f598 <APICTimer::~APICTimer()>:
c001f598:	83 ec 0c             	sub    esp,0xc
c001f59b:	ba cc 25 02 c0       	mov    edx,0xc00225cc
c001f5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a4:	89 10                	mov    DWORD PTR [eax],edx
c001f5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5aa:	83 ec 0c             	sub    esp,0xc
c001f5ad:	50                   	push   eax
c001f5ae:	e8 5d e4 fe ff       	call   c000da10 <Timer::~Timer()>
c001f5b3:	83 c4 10             	add    esp,0x10
c001f5b6:	90                   	nop
c001f5b7:	83 c4 0c             	add    esp,0xc
c001f5ba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f5bc <APICTimer::~APICTimer()>:
c001f5bc:	83 ec 0c             	sub    esp,0xc
c001f5bf:	83 ec 0c             	sub    esp,0xc
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 cd ff ff ff       	call   c001f598 <APICTimer::~APICTimer()>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	83 ec 08             	sub    esp,0x8
c001f5d1:	68 60 01 00 00       	push   0x160
c001f5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5da:	e8 2d b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5df:	83 c4 10             	add    esp,0x10
c001f5e2:	83 c4 0c             	add    esp,0xc
c001f5e5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f5e8 <PIT::~PIT()>:
c001f5e8:	83 ec 0c             	sub    esp,0xc
c001f5eb:	ba 1c 26 02 c0       	mov    edx,0xc002261c
c001f5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f4:	89 10                	mov    DWORD PTR [eax],edx
c001f5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fa:	83 ec 0c             	sub    esp,0xc
c001f5fd:	50                   	push   eax
c001f5fe:	e8 0d e4 fe ff       	call   c000da10 <Timer::~Timer()>
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	90                   	nop
c001f607:	83 c4 0c             	add    esp,0xc
c001f60a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f60c <PIT::~PIT()>:
c001f60c:	83 ec 0c             	sub    esp,0xc
c001f60f:	83 ec 0c             	sub    esp,0xc
c001f612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f616:	e8 cd ff ff ff       	call   c001f5e8 <PIT::~PIT()>
c001f61b:	83 c4 10             	add    esp,0x10
c001f61e:	83 ec 08             	sub    esp,0x8
c001f621:	68 5c 01 00 00       	push   0x15c
c001f626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f62a:	e8 dd b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f62f:	83 c4 10             	add    esp,0x10
c001f632:	83 c4 0c             	add    esp,0xc
c001f635:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 39 14 02 c0       	mov    esi,0xc0021439
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 55 14 02 c0       	mov    esi,0xc0021455
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
