
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b6 f7 00 00       	call   c000f7d6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 70 02 00       	call   c0027068 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c4 7b 02 c0       	mov    ebx,0xc0027bc4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 7b 02 c0    	cmp    ebx,0xc0027bd0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 be 02 c0       	mov    eax,0xc002bef8
c0000049:	3d f8 be 02 c0       	cmp    eax,0xc002bef8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 be 02 c0       	push   0xc002bef8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 be 02 c0       	mov    eax,0xc002bef8
c0000075:	2d f8 be 02 c0       	sub    eax,0xc002bef8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 be 02 c0       	push   0xc002bef8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c528,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 7b 02 c0       	mov    ebx,0xc0027bd8
c00000bb:	81 eb d4 7b 02 c0    	sub    ebx,0xc0027bd4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 7b 02 c0       	mov    esi,0xc0027bd4
c00000ca:	a1 2c c5 02 c0       	mov    eax,ds:0xc002c52c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c c5 02 c0       	mov    ds:0xc002c52c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c c5 02 c0       	mov    eax,ds:0xc002c52c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 be 02 c0       	push   0xc002bef8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c528,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 c5 02 c0       	push   0xc002c530
c000012c:	68 f8 be 02 c0       	push   0xc002bef8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 b4 c5 01 00       	call   c001c904 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 0b 22 01 00       	call   c0012573 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 92 c5 01 00       	call   c001c904 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 e0 c9 01 00       	call   c001cd71 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 8e cf 01 00       	call   c001d328 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 70 c9 02 c0 	lgdtd  ds:0xc002c970
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 9d 3e 01 00       	call   c001442b <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 48 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c548
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 48 c5 02 c0       	mov    ds:0xc002c548,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 48 c5 02 c0       	mov    eax,ds:0xc002c548
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 48 c5 02 c0    	mov    DWORD PTR ds:0xc002c548,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 e0 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd8420],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 e0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8420],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 e0 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd8420],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 e0 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd8420],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 e0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8420],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 60 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c560
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 64 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3a9c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 64 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a9c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 9c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c59c
c0000c10:	c7 42 0c 94 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c594
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 60 c5 02 c0 02 	test   BYTE PTR ds:0xc002c560,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 60 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c560
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 64 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3a9c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 64 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3a9c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 94 c5 02 c0 	lea    edx,[eax*8-0x3ffd3a6c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d a0 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5a0
c0000f92:	81 fb 94 c5 02 c0    	cmp    ebx,0xc002c594
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 94 c5 02 c0       	cmp    eax,0xc002c594
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 90 c5 02 c0    	cmp    DWORD PTR ds:0xc002c590,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 9c c5 02 c0       	mov    ds:0xc002c59c,eax
c0000fce:	a3 a0 c5 02 c0       	mov    ds:0xc002c5a0,eax
c0000fd3:	a3 90 c5 02 c0       	mov    ds:0xc002c590,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 94 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c594
c0000fe1:	c7 40 0c 94 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c594
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 a0 c5 02 c0       	mov    ds:0xc002c5a0,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 94 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c594
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 58 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3aa8]
c0001032:	8b 14 95 60 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3aa0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 60 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3aa0]
c000104d:	8b 14 95 60 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3aa0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 94 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd376c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 94 c5 02 c0 	lea    eax,[eax*8-0x3ffd3a6c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,ecx
c0001107:	89 0d a0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5a0,ecx
c000110d:	c7 41 08 94 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c594
c0001114:	c7 41 0c 94 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c594
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 8c c5 02 c0 	lea    edx,[ecx*8-0x3ffd3a74]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 94 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd376c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 94 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd376c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 8c c5 02 c0 	lea    edx,[eax*4-0x3ffd3a74]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 94 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd376c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,edi
c00011da:	89 3d a0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5a0,edi
c00011e0:	c7 47 08 94 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c594
c00011e7:	c7 47 0c 94 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c594
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 90 c5 02 c0    	mov    DWORD PTR ds:0xc002c590,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 8c c5 02 c0       	mov    eax,ds:0xc002c58c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 60 c5 02 c0       	mov    edx,0xc002c560
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d b4 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8b4
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 b4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8b4,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d b4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8b4,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 bc c8 02 c0    	push   DWORD PTR ds:0xc002c8bc
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 bc c8 02 c0       	mov    eax,ds:0xc002c8bc
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 8c c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c58c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 8c c5 02 c0       	mov    eax,ds:0xc002c58c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 64 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3a9c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 94 c5 02 c0       	mov    eax,0xc002c594
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 8c c8 02 c0       	cmp    eax,0xc002c88c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 c8 c8 02 c0       	mov    eax,ds:0xc002c8c8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 b0 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8b0
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 c4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8c4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 d4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8d4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 e4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd831c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 60 c5 02 c0       	mov    eax,ds:0xc002c560
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 60 c5 02 c0       	mov    ds:0xc002c560,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d a8 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a8,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d ac c8 02 c0    	mov    DWORD PTR ds:0xc002c8ac,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 b4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8b4,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 44 e3 01 00       	jmp    c001fd20 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 75 e3 01 00       	jmp    c001fd67 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 9d e3 01 00       	jmp    c001fdae <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 d8 36 02 00       	call   c00253cc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 00 7e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8200]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 00 7e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8200]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 20 7e 02 c0       	mov    edx,0xc0027e20
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 2c 7e 02 c0       	mov    edx,0xc0027e2c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 00 c9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3700]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 e0 c8 02 c0    	mov    ax,ds:0xc002c8e0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 e0 c8 02 c0    	mov    ds:0xc002c8e0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 d5 24 02 00       	call   c00253cc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 32 7e 02 c0       	mov    eax,0xc0027e32
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 80 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8280]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 3b 7e 02 c0       	mov    eax,0xc0027e3b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 00 7e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8200]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 a0 0e 02 00       	call   c00253cc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 00 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3700]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 00 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3700],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 67 f8 01 00       	call   c00253cc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 4d f8 01 00       	call   c00253cc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 57 7d 02 c0       	mov    eax,0xc0027d57
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 50 7d 02 c0       	mov    eax,0xc0027d50
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 00 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3700]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 40 7d 02 c0       	mov    esi,0xc0027d40
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 90 df 01 00       	call   c00253cc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 20 7e 02 c0       	mov    edx,0xc0027e20
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 30 7d 02 c0       	mov    edx,0xc0027d30
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 42 7e 02 c0       	mov    edx,0xc0027e42
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 4e 7e 02 c0       	mov    edx,0xc0027e4e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 62 7e 02 c0       	mov    edx,0xc0027e62
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 80 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028180
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 80 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028180
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 80 7f 02 c0       	mov    eax,0xc0027f80
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 c0 7e 02 c0       	mov    eax,0xc0027ec0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 80 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8180]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 e4 e8 01 00       	call   c0026e9f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 a7 e8 01 00       	call   c0026e81 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 7b e8 01 00       	call   c0026e9f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 2e df 01 00       	call   c00265a4 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 a8 e9 01 00       	call   c0027030 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 f5 e7 01 00       	call   c0026e9f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 37 e7 01 00       	call   c0026e9f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 04 e7 01 00       	call   c0026e81 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 f1 e5 01 00       	call   c0026e9f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 b9 e5 01 00       	call   c0026e81 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 80 82 02 c0       	mov    eax,0xc0028280
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 c5 e3 01 00       	call   c0026e9f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 8a e3 01 00       	call   c0026e81 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 e0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7920]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 9a e0 01 00       	call   c0026c33 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 18 da 01 00       	call   c00265d0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 d4 e2 01 00       	call   c0026ea3 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 c2 e3 01 00       	call   c0026fc7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 ac d9 01 00       	call   c00265d0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 57 e2 01 00       	call   c0026e9d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 38 e2 01 00       	call   c0026ea1 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 c6 e3 01 00       	call   c0027050 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 78 df 01 00       	call   c0026c33 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 f6 d8 01 00       	call   c00265d0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 b2 e1 01 00       	call   c0026ea3 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 a0 e2 01 00       	call   c0026fc7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 8a d8 01 00       	call   c00265d0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 35 e1 01 00       	call   c0026e9d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 15 e1 01 00       	call   c0026ea1 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 a2 e2 01 00       	call   c0027050 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 50 e0 01 00       	call   c0026e9f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 0e e0 01 00       	call   c0026e81 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 f6 df 01 00       	call   c0026e9f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 68 dd 01 00       	call   c0026c33 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 6a d0 01 00       	call   c0025f53 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 cd d6 01 00       	call   c00265d0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 1f dd 01 00       	call   c0026c33 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 25 d0 01 00       	call   c0025f53 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 f4 dc 01 00       	call   c0026c33 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 44 df 01 00       	call   c0026e9d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 21 d6 01 00       	call   c00265a4 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 9b e0 01 00       	call   c0027030 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 ca de 01 00       	call   c0026e81 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 c5 d5 01 00       	call   c00265a4 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 43 dc 01 00       	call   c0026c33 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 c6 d5 01 00       	call   c00265d0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 18 dc 01 00       	call   c0026c33 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 7f d8 01 00       	call   c00268b4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 fe ce 01 00       	call   c0025f53 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 5e c8 01 00       	call   c00258e8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 35 df 01 00       	call   c0026fc7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 1e d5 01 00       	call   c00265d0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 05 df 01 00       	call   c0026fc7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 77 ce 01 00       	call   c0025f53 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 b0 dd 01 00       	call   c0026ea3 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 98 d7 01 00       	call   c00268b4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 1e ce 01 00       	call   c0025f53 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 04 df 01 00       	call   c0027050 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 de da 01 00       	call   c0026c33 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 35 d4 01 00       	call   c00265a4 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 14 dd 01 00       	call   c0026e9f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 ad cd 01 00       	call   c0025f53 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 d9 d3 01 00       	call   c00265a4 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 73 de 01 00       	call   c0027050 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 2c da 01 00       	call   c0026c33 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 a9 d3 01 00       	call   c00265d0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 fc d9 01 00       	call   c0026c33 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 02 cd 01 00       	call   c0025f53 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 d2 d9 01 00       	call   c0026c33 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 24 dc 01 00       	call   c0026e9f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 fb d2 01 00       	call   c00265a4 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 75 dd 01 00       	call   c0027030 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 a4 db 01 00       	call   c0026e81 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 9e d2 01 00       	call   c00265a4 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 1c d9 01 00       	call   c0026c33 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 9f d2 01 00       	call   c00265d0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 f1 d8 01 00       	call   c0026c33 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 58 d5 01 00       	call   c00268b4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 d7 cb 01 00       	call   c0025f53 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 27 c5 01 00       	call   c00258e8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 fe db 01 00       	call   c0026fc7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 e7 d1 01 00       	call   c00265d0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 ce db 01 00       	call   c0026fc7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 40 cb 01 00       	call   c0025f53 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 79 da 01 00       	call   c0026ea3 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 60 d4 01 00       	call   c00268b4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 df ca 01 00       	call   c0025f53 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 c5 db 01 00       	call   c0027050 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 9f d7 01 00       	call   c0026c33 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 f6 d0 01 00       	call   c00265a4 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 d5 d9 01 00       	call   c0026e9f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 6e ca 01 00       	call   c0025f53 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 9a d0 01 00       	call   c00265a4 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 0f d7 01 00       	call   c0026c33 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 15 ca 01 00       	call   c0025f53 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 40 87 02 c0       	mov    eax,0xc0028740
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 54 87 02 c0       	mov    eax,0xc0028754
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 8a d5 01 00       	call   c0026c33 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 08 cf 01 00       	call   c00265d0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 9a c1 01 00       	call   c00258e8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 71 d8 01 00       	call   c0026fc7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 5a ce 01 00       	call   c00265d0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 3d d8 01 00       	call   c0026fc7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 af c7 01 00       	call   c0025f53 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 0f d8 01 00       	call   c0026fc7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 fe cd 01 00       	call   c00265d0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 67 c7 01 00       	call   c0025f53 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 88 c0 01 00       	call   c00258e8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 5f d7 01 00       	call   c0026fc7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 48 cd 01 00       	call   c00265d0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 2b d7 01 00       	call   c0026fc7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 9d c6 01 00       	call   c0025f53 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 fd d6 01 00       	call   c0026fc7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 ec cc 01 00       	call   c00265d0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 55 c6 01 00       	call   c0025f53 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 33 c6 01 00       	call   c0025f53 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 0f bf 01 00       	call   c00258e8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 e6 d5 01 00       	call   c0026fc7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 cf cb 01 00       	call   c00265d0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 b2 d5 01 00       	call   c0026fc7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 24 c5 01 00       	call   c0025f53 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 84 d5 01 00       	call   c0026fc7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 6d cb 01 00       	call   c00265d0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 d6 c4 01 00       	call   c0025f53 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 36 d5 01 00       	call   c0026fc7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 1f cb 01 00       	call   c00265d0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 88 c4 01 00       	call   c0025f53 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 9d bd 01 00       	call   c00258e8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 74 d4 01 00       	call   c0026fc7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 5d ca 01 00       	call   c00265d0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 44 d4 01 00       	call   c0026fc7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 b6 c3 01 00       	call   c0025f53 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 16 d4 01 00       	call   c0026fc7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 ff c9 01 00       	call   c00265d0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 68 c3 01 00       	call   c0025f53 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 c8 d3 01 00       	call   c0026fc7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 b1 c9 01 00       	call   c00265d0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 1a c3 01 00       	call   c0025f53 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 ee c2 01 00       	call   c0025f53 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 4b c9 01 00       	call   c00265d0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 07 d2 01 00       	call   c0026ea3 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 96 c2 01 00       	call   c0025f53 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 f3 c8 01 00       	call   c00265d0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 af d1 01 00       	call   c0026ea3 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 29 bb 01 00       	call   c00258e8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 00 d2 01 00       	call   c0026fc7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 e9 c7 01 00       	call   c00265d0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 cc d1 01 00       	call   c0026fc7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 3e c1 01 00       	call   c0025f53 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 9e d1 01 00       	call   c0026fc7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 87 c7 01 00       	call   c00265d0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 f0 c0 01 00       	call   c0025f53 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 50 d1 01 00       	call   c0026fc7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 39 c7 01 00       	call   c00265d0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 a2 c0 01 00       	call   c0025f53 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 02 d1 01 00       	call   c0026fc7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 eb c6 01 00       	call   c00265d0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 54 c0 01 00       	call   c0025f53 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 b4 d0 01 00       	call   c0026fc7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 9d c6 01 00       	call   c00265d0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 06 c0 01 00       	call   c0025f53 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 08 b9 01 00       	call   c00258e8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 df cf 01 00       	call   c0026fc7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 c8 c5 01 00       	call   c00265d0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 af cf 01 00       	call   c0026fc7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 21 bf 01 00       	call   c0025f53 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 81 cf 01 00       	call   c0026fc7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 6a c5 01 00       	call   c00265d0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 d3 be 01 00       	call   c0025f53 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 33 cf 01 00       	call   c0026fc7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 1c c5 01 00       	call   c00265d0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 85 be 01 00       	call   c0025f53 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 e5 ce 01 00       	call   c0026fc7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 ce c4 01 00       	call   c00265d0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 37 be 01 00       	call   c0025f53 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 97 ce 01 00       	call   c0026fc7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 80 c4 01 00       	call   c00265d0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 e9 bd 01 00       	call   c0025f53 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 bd bd 01 00       	call   c0025f53 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 1a c4 01 00       	call   c00265d0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 d6 cc 01 00       	call   c0026ea3 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 65 bd 01 00       	call   c0025f53 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 c2 c3 01 00       	call   c00265d0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 7e cc 01 00       	call   c0026ea3 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 0c bd 01 00       	call   c0025f53 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 69 c3 01 00       	call   c00265d0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 25 cc 01 00       	call   c0026ea3 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 b3 bc 01 00       	call   c0025f53 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 10 c3 01 00       	call   c00265d0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 cc cb 01 00       	call   c0026ea3 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 2a b5 01 00       	call   c00258e8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 01 cc 01 00       	call   c0026fc7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 ea c1 01 00       	call   c00265d0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 cd cb 01 00       	call   c0026fc7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 3f bb 01 00       	call   c0025f53 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 9f cb 01 00       	call   c0026fc7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 88 c1 01 00       	call   c00265d0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 f1 ba 01 00       	call   c0025f53 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 51 cb 01 00       	call   c0026fc7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 3a c1 01 00       	call   c00265d0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 a3 ba 01 00       	call   c0025f53 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 03 cb 01 00       	call   c0026fc7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 ec c0 01 00       	call   c00265d0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 55 ba 01 00       	call   c0025f53 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 b5 ca 01 00       	call   c0026fc7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 9e c0 01 00       	call   c00265d0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 07 ba 01 00       	call   c0025f53 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 67 ca 01 00       	call   c0026fc7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 50 c0 01 00       	call   c00265d0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 b6 b9 01 00       	call   c0025f53 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 16 ca 01 00       	call   c0026fc7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 ff bf 01 00       	call   c00265d0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 68 b9 01 00       	call   c0025f53 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 62 b2 01 00       	call   c00258e8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 39 c9 01 00       	call   c0026fc7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 22 bf 01 00       	call   c00265d0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 02 c9 01 00       	call   c0026fc7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 74 b8 01 00       	call   c0025f53 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 d4 c8 01 00       	call   c0026fc7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 bd be 01 00       	call   c00265d0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 26 b8 01 00       	call   c0025f53 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 86 c8 01 00       	call   c0026fc7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 6f be 01 00       	call   c00265d0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 d8 b7 01 00       	call   c0025f53 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 38 c8 01 00       	call   c0026fc7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 21 be 01 00       	call   c00265d0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 8a b7 01 00       	call   c0025f53 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 ea c7 01 00       	call   c0026fc7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 d3 bd 01 00       	call   c00265d0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 3c b7 01 00       	call   c0025f53 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 9c c7 01 00       	call   c0026fc7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 85 bd 01 00       	call   c00265d0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 eb b6 01 00       	call   c0025f53 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 4b c7 01 00       	call   c0026fc7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 34 bd 01 00       	call   c00265d0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 a3 b6 01 00       	call   c0025f53 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 7c b6 01 00       	call   c0025f53 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 da bc 01 00       	call   c00265d0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 96 c5 01 00       	call   c0026ea3 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 25 b6 01 00       	call   c0025f53 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 83 bc 01 00       	call   c00265d0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 3f c5 01 00       	call   c0026ea3 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 cd b5 01 00       	call   c0025f53 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 2b bc 01 00       	call   c00265d0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 e7 c4 01 00       	call   c0026ea3 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 75 b5 01 00       	call   c0025f53 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 d3 bb 01 00       	call   c00265d0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 8f c4 01 00       	call   c0026ea3 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 1d b5 01 00       	call   c0025f53 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 7b bb 01 00       	call   c00265d0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 37 c4 01 00       	call   c0026ea3 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 cb b4 01 00       	call   c0025f53 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 29 bb 01 00       	call   c00265d0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 e5 c3 01 00       	call   c0026ea3 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 f9 ac 01 00       	call   c00258e8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 d0 c3 01 00       	call   c0026fc7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 b9 b9 01 00       	call   c00265d0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 a0 c3 01 00       	call   c0026fc7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 12 b3 01 00       	call   c0025f53 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 84 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd787c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 46 c3 01 00       	call   c0026fc7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 2f b9 01 00       	call   c00265d0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 9a b2 01 00       	call   c0025f53 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 e7 c2 01 00       	call   c0026fc7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 d0 b8 01 00       	call   c00265d0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 3b b2 01 00       	call   c0025f53 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 88 c2 01 00       	call   c0026fc7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 71 b8 01 00       	call   c00265d0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 dc b1 01 00       	call   c0025f53 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 29 c2 01 00       	call   c0026fc7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 12 b8 01 00       	call   c00265d0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 7d b1 01 00       	call   c0025f53 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 ca c1 01 00       	call   c0026fc7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 b3 b7 01 00       	call   c00265d0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 1e b1 01 00       	call   c0025f53 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 6b c1 01 00       	call   c0026fc7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 54 b7 01 00       	call   c00265d0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 bf b0 01 00       	call   c0025f53 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 0c c1 01 00       	call   c0026fc7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 f5 b6 01 00       	call   c00265d0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 60 b0 01 00       	call   c0025f53 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 ad c0 01 00       	call   c0026fc7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 96 b6 01 00       	call   c00265d0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 01 b0 01 00       	call   c0025f53 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 0b a9 01 00       	call   c00258e8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 e2 bf 01 00       	call   c0026fc7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 cb b5 01 00       	call   c00265d0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 b2 bf 01 00       	call   c0026fc7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 24 af 01 00       	call   c0025f53 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 a0 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7860]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 57 bf 01 00       	call   c0026fc7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 40 b5 01 00       	call   c00265d0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 ab ae 01 00       	call   c0025f53 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 f7 be 01 00       	call   c0026fc7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 e0 b4 01 00       	call   c00265d0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 4b ae 01 00       	call   c0025f53 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 97 be 01 00       	call   c0026fc7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 80 b4 01 00       	call   c00265d0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 eb ad 01 00       	call   c0025f53 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 37 be 01 00       	call   c0026fc7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 20 b4 01 00       	call   c00265d0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 8b ad 01 00       	call   c0025f53 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 d7 bd 01 00       	call   c0026fc7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 c0 b3 01 00       	call   c00265d0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 2b ad 01 00       	call   c0025f53 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 77 bd 01 00       	call   c0026fc7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 60 b3 01 00       	call   c00265d0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 cb ac 01 00       	call   c0025f53 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 17 bd 01 00       	call   c0026fc7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 00 b3 01 00       	call   c00265d0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 6b ac 01 00       	call   c0025f53 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 b7 bc 01 00       	call   c0026fc7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 a0 b2 01 00       	call   c00265d0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 0b ac 01 00       	call   c0025f53 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 bc 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7844]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 b0 ab 01 00       	call   c0025f53 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 0d b2 01 00       	call   c00265d0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 c9 ba 01 00       	call   c0026ea3 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 53 ab 01 00       	call   c0025f53 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 b0 b1 01 00       	call   c00265d0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 6c ba 01 00       	call   c0026ea3 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 f6 aa 01 00       	call   c0025f53 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 53 b1 01 00       	call   c00265d0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 0f ba 01 00       	call   c0026ea3 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 99 aa 01 00       	call   c0025f53 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 f6 b0 01 00       	call   c00265d0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 b2 b9 01 00       	call   c0026ea3 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 3c aa 01 00       	call   c0025f53 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 99 b0 01 00       	call   c00265d0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 55 b9 01 00       	call   c0026ea3 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 df a9 01 00       	call   c0025f53 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 3c b0 01 00       	call   c00265d0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 f8 b8 01 00       	call   c0026ea3 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 82 a9 01 00       	call   c0025f53 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 df af 01 00       	call   c00265d0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 9b b8 01 00       	call   c0026ea3 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 25 a9 01 00       	call   c0025f53 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 82 af 01 00       	call   c00265d0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 3e b8 01 00       	call   c0026ea3 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 3a af 01 00       	call   c00265d0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 aa b9 01 00       	jmp    c0027050 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 1c b6 01 00       	call   c0026e9f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 da b5 01 00       	call   c0026e81 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 71 b3 01 00       	call   c0026c33 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 72 a6 01 00       	call   c0025f53 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 41 b3 01 00       	call   c0026c33 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 a8 af 01 00       	call   c00268b4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 47 b5 01 00       	call   c0026e81 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 4a b5 01 00       	call   c0026e9f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 1d b5 01 00       	call   c0026e9f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 16 af 01 00       	call   c00268b4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 98 b6 01 00       	call   c0027050 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 73 b6 01 00       	call   c0027050 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 4d b2 01 00       	call   c0026c33 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 a4 ab 01 00       	call   c00265a4 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 83 b4 01 00       	call   c0026e9f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 1c a5 01 00       	call   c0025f53 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 40 ab 01 00       	call   c00265a4 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 da b5 01 00       	call   c0027050 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 1a ae 01 00       	call   c00268b4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 97 a4 01 00       	call   c0025f53 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 c3 b0 01 00       	call   c0026c33 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 c3 a3 01 00       	call   c0025f53 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 a3 a3 01 00       	call   c0025f53 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 73 b0 01 00       	call   c0026c33 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 c3 b2 01 00       	call   c0026e9d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 a2 a9 01 00       	call   c00265a4 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 1c b4 01 00       	call   c0027030 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 4b b2 01 00       	call   c0026e81 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 49 a9 01 00       	call   c00265a4 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 c7 af 01 00       	call   c0026c33 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 4a a9 01 00       	call   c00265d0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 9c af 01 00       	call   c0026c33 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 03 ac 01 00       	call   c00268b4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 82 a2 01 00       	call   c0025f53 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 4c af 01 00       	call   c0026c33 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 98 b1 01 00       	call   c0026e9f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 8d a8 01 00       	call   c00265d0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 5f a8 01 00       	call   c00265d0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 98 ae 01 00       	call   c0026c33 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 fc aa 01 00       	call   c00268b4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 c4 aa 01 00       	call   c00268b4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 43 a1 01 00       	call   c0025f53 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 28 b2 01 00       	call   c0027050 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 02 ae 01 00       	call   c0026c33 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 59 a7 01 00       	call   c00265a4 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 38 b0 01 00       	call   c0026e9f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 d0 a0 01 00       	call   c0025f53 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 f4 a6 01 00       	call   c00265a4 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 8e b1 01 00       	call   c0027050 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 57 af 01 00       	call   c0026e9f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 15 af 01 00       	call   c0026e81 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 ac ac 01 00       	call   c0026c33 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 ad 9f 01 00       	call   c0025f53 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 7c ac 01 00       	call   c0026c33 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 e3 a8 01 00       	call   c00268b4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 82 ae 01 00       	call   c0026e81 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 85 ae 01 00       	call   c0026e9f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 58 ae 01 00       	call   c0026e9f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 51 a8 01 00       	call   c00268b4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 d3 af 01 00       	call   c0027050 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 ae af 01 00       	call   c0027050 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 88 ab 01 00       	call   c0026c33 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 df a4 01 00       	call   c00265a4 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 be ad 01 00       	call   c0026e9f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 57 9e 01 00       	call   c0025f53 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 7b a4 01 00       	call   c00265a4 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 15 af 01 00       	call   c0027050 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 55 a7 01 00       	call   c00268b4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 d2 9d 01 00       	call   c0025f53 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 fd a9 01 00       	call   c0026c33 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 fd 9c 01 00       	call   c0025f53 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 dd 9c 01 00       	call   c0025f53 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 ad a9 01 00       	call   c0026c33 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 fd ab 01 00       	call   c0026e9d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 db a2 01 00       	call   c00265a4 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 55 ad 01 00       	call   c0027030 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 84 ab 01 00       	call   c0026e81 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 81 a2 01 00       	call   c00265a4 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 ff a8 01 00       	call   c0026c33 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 82 a2 01 00       	call   c00265d0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 d4 a8 01 00       	call   c0026c33 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 3b a5 01 00       	call   c00268b4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 ba 9b 01 00       	call   c0025f53 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 84 a8 01 00       	call   c0026c33 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 d0 aa 01 00       	call   c0026e9f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 c5 a1 01 00       	call   c00265d0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 97 a1 01 00       	call   c00265d0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 ce a7 01 00       	call   c0026c33 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 32 a4 01 00       	call   c00268b4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 ff a3 01 00       	call   c00268b4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 7e 9a 01 00       	call   c0025f53 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 63 ab 01 00       	call   c0027050 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 3d a7 01 00       	call   c0026c33 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 94 a0 01 00       	call   c00265a4 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 73 a9 01 00       	call   c0026e9f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 0b 9a 01 00       	call   c0025f53 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 2f a0 01 00       	call   c00265a4 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 c9 aa 01 00       	call   c0027050 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 92 a8 01 00       	call   c0026e9f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 50 a8 01 00       	call   c0026e81 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 e7 a5 01 00       	call   c0026c33 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 e8 98 01 00       	call   c0025f53 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 b7 a5 01 00       	call   c0026c33 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 1e a2 01 00       	call   c00268b4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 bd a7 01 00       	call   c0026e81 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 c0 a7 01 00       	call   c0026e9f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 93 a7 01 00       	call   c0026e9f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 8c a1 01 00       	call   c00268b4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 0e a9 01 00       	call   c0027050 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 e9 a8 01 00       	call   c0027050 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 c3 a4 01 00       	call   c0026c33 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 1a 9e 01 00       	call   c00265a4 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 f9 a6 01 00       	call   c0026e9f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 92 97 01 00       	call   c0025f53 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 b6 9d 01 00       	call   c00265a4 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 50 a8 01 00       	call   c0027050 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 90 a0 01 00       	call   c00268b4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 0d 97 01 00       	call   c0025f53 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 38 a3 01 00       	call   c0026c33 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 38 96 01 00       	call   c0025f53 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 18 96 01 00       	call   c0025f53 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 e8 a2 01 00       	call   c0026c33 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 38 a5 01 00       	call   c0026e9d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 16 9c 01 00       	call   c00265a4 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 90 a6 01 00       	call   c0027030 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 bf a4 01 00       	call   c0026e81 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 bc 9b 01 00       	call   c00265a4 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 3a a2 01 00       	call   c0026c33 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 bd 9b 01 00       	call   c00265d0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 0f a2 01 00       	call   c0026c33 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 76 9e 01 00       	call   c00268b4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 f5 94 01 00       	call   c0025f53 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 bf a1 01 00       	call   c0026c33 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 0b a4 01 00       	call   c0026e9f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 00 9b 01 00       	call   c00265d0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 d2 9a 01 00       	call   c00265d0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 09 a1 01 00       	call   c0026c33 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 6d 9d 01 00       	call   c00268b4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 3a 9d 01 00       	call   c00268b4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 b9 93 01 00       	call   c0025f53 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 9e a4 01 00       	call   c0027050 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 78 a0 01 00       	call   c0026c33 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 cf 99 01 00       	call   c00265a4 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 ae a2 01 00       	call   c0026e9f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 46 93 01 00       	call   c0025f53 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 6a 99 01 00       	call   c00265a4 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 04 a4 01 00       	call   c0027050 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 cd a1 01 00       	call   c0026e9f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 8b a1 01 00       	call   c0026e81 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 22 9f 01 00       	call   c0026c33 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 23 92 01 00       	call   c0025f53 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 f2 9e 01 00       	call   c0026c33 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 59 9b 01 00       	call   c00268b4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 f8 a0 01 00       	call   c0026e81 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 fb a0 01 00       	call   c0026e9f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 ce a0 01 00       	call   c0026e9f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 c7 9a 01 00       	call   c00268b4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 49 a2 01 00       	call   c0027050 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 24 a2 01 00       	call   c0027050 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 fe 9d 01 00       	call   c0026c33 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 55 97 01 00       	call   c00265a4 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 34 a0 01 00       	call   c0026e9f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 cd 90 01 00       	call   c0025f53 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 f1 96 01 00       	call   c00265a4 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 8b a1 01 00       	call   c0027050 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 cb 99 01 00       	call   c00268b4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 48 90 01 00       	call   c0025f53 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 73 9c 01 00       	call   c0026c33 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 73 8f 01 00       	call   c0025f53 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 53 8f 01 00       	call   c0025f53 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 23 9c 01 00       	call   c0026c33 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 73 9e 01 00       	call   c0026e9d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 51 95 01 00       	call   c00265a4 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 cb 9f 01 00       	call   c0027030 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 fa 9d 01 00       	call   c0026e81 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 f7 94 01 00       	call   c00265a4 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 75 9b 01 00       	call   c0026c33 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 f8 94 01 00       	call   c00265d0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 4a 9b 01 00       	call   c0026c33 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 b1 97 01 00       	call   c00268b4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 30 8e 01 00       	call   c0025f53 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 fa 9a 01 00       	call   c0026c33 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 46 9d 01 00       	call   c0026e9f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 3b 94 01 00       	call   c00265d0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 0d 94 01 00       	call   c00265d0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 44 9a 01 00       	call   c0026c33 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 a8 96 01 00       	call   c00268b4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 75 96 01 00       	call   c00268b4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 f4 8c 01 00       	call   c0025f53 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 d9 9d 01 00       	call   c0027050 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 b3 99 01 00       	call   c0026c33 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 0a 93 01 00       	call   c00265a4 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 e9 9b 01 00       	call   c0026e9f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 81 8c 01 00       	call   c0025f53 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 a5 92 01 00       	call   c00265a4 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 3f 9d 01 00       	call   c0027050 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 05 9b 01 00       	call   c0026e9f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 c3 9a 01 00       	call   c0026e81 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 5a 98 01 00       	call   c0026c33 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 5b 8b 01 00       	call   c0025f53 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 2a 98 01 00       	call   c0026c33 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 91 94 01 00       	call   c00268b4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 30 9a 01 00       	call   c0026e81 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 33 9a 01 00       	call   c0026e9f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 06 9a 01 00       	call   c0026e9f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 ff 93 01 00       	call   c00268b4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 81 9b 01 00       	call   c0027050 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 58 9b 01 00       	call   c0027050 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 32 97 01 00       	call   c0026c33 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 89 90 01 00       	call   c00265a4 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 68 99 01 00       	call   c0026e9f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 01 8a 01 00       	call   c0025f53 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 29 90 01 00       	call   c00265a4 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 c3 9a 01 00       	call   c0027050 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 04 93 01 00       	call   c00268b4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 81 89 01 00       	call   c0025f53 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 ad 95 01 00       	call   c0026c33 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 ad 88 01 00       	call   c0025f53 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 8d 88 01 00       	call   c0025f53 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 5d 95 01 00       	call   c0026c33 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 91 97 01 00       	call   c0026e81 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 88 8e 01 00       	call   c00265a4 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 02 99 01 00       	call   c0027030 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 31 97 01 00       	call   c0026e81 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 2b 8e 01 00       	call   c00265a4 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 a9 94 01 00       	call   c0026c33 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 2c 8e 01 00       	call   c00265d0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 7e 94 01 00       	call   c0026c33 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 e5 90 01 00       	call   c00268b4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 64 87 01 00       	call   c0025f53 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 2e 94 01 00       	call   c0026c33 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 7a 96 01 00       	call   c0026e9f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 6f 8d 01 00       	call   c00265d0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 41 8d 01 00       	call   c00265d0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 85 93 01 00       	call   c0026c33 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 ec 8f 01 00       	call   c00268b4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 d5 8c 01 00       	call   c00265d0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 91 95 01 00       	call   c0026ea3 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 84 8f 01 00       	call   c00268b4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 03 86 01 00       	call   c0025f53 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 e8 96 01 00       	call   c0027050 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 c2 92 01 00       	call   c0026c33 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 19 8c 01 00       	call   c00265a4 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 f8 94 01 00       	call   c0026e9f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 90 85 01 00       	call   c0025f53 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 b8 8b 01 00       	call   c00265a4 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 52 96 01 00       	call   c0027050 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 e4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd781c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 d8 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7828]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 0d 93 01 00       	call   c0026e9f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 cb 92 01 00       	call   c0026e81 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 b7 92 01 00       	call   c0026e9f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 29 90 01 00       	call   c0026c33 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 a7 89 01 00       	call   c00265d0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 f9 8f 01 00       	call   c0026c33 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 ff 82 01 00       	call   c0025f53 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 ce 8f 01 00       	call   c0026c33 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 1e 92 01 00       	call   c0026e9d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 ff 88 01 00       	call   c00265a4 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 79 93 01 00       	call   c0027030 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 a8 91 01 00       	call   c0026e81 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 a7 88 01 00       	call   c00265a4 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 25 8f 01 00       	call   c0026c33 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 a8 88 01 00       	call   c00265d0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 fa 8e 01 00       	call   c0026c33 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 61 8b 01 00       	call   c00268b4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 e0 81 01 00       	call   c0025f53 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 08 8b 01 00       	call   c00268b4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 8e 81 01 00       	call   c0025f53 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 74 92 01 00       	call   c0027050 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 4e 8e 01 00       	call   c0026c33 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 a5 87 01 00       	call   c00265a4 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 84 90 01 00       	call   c0026e9f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 1d 81 01 00       	call   c0025f53 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 49 87 01 00       	call   c00265a4 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 e3 91 01 00       	call   c0027050 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 98 8d 01 00       	call   c0026c33 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 15 87 01 00       	call   c00265d0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 66 8d 01 00       	call   c0026c33 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 6c 80 01 00       	call   c0025f53 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 3c 8d 01 00       	call   c0026c33 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 90 8f 01 00       	call   c0026ea1 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 69 86 01 00       	call   c00265a4 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 e3 90 01 00       	call   c0027030 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 12 8f 01 00       	call   c0026e81 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 10 86 01 00       	call   c00265a4 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 8e 8c 01 00       	call   c0026c33 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 11 86 01 00       	call   c00265d0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 63 8c 01 00       	call   c0026c33 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 ca 88 01 00       	call   c00268b4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 49 7f 01 00       	call   c0025f53 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 65 88 01 00       	call   c00268b4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 e4 7e 01 00       	call   c0025f53 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 ca 8f 01 00       	call   c0027050 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 a4 8b 01 00       	call   c0026c33 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 fb 84 01 00       	call   c00265a4 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 da 8d 01 00       	call   c0026e9f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 73 7e 01 00       	call   c0025f53 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 9f 84 01 00       	call   c00265a4 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 10 8b 01 00       	call   c0026c33 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 16 7e 01 00       	call   c0025f53 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 fe 88 02 c0       	mov    eax,0xc00288fe
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 0f 89 02 c0       	mov    eax,0xc002890f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 37 5a 00 00       	call   c0013cfa <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 46 89 02 c0       	push   0xc0028946
c000e2f9:	50                   	push   eax
c000e2fa:	e8 75 5a 00 00       	call   c0013d74 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c000e46b:	68 4f 89 02 c0       	push   0xc002894f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 fa e6 00 00       	call   c001cb72 <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 e3 e9 00 00       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 ce d6 01 c0       	push   0xc001d6ce
c000e496:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c000e49c:	e8 cf e9 00 00       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c000e4a9:	e8 a1 f5 00 00       	call   c001da4f <Vm::initialise8086()>
c000e4ae:	c6 05 6d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c96d,0x1
c000e4b5:	e8 36 46 00 00       	call   c0012af0 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 a5 b2 00 00       	call   c0019776 <Krnl::loadSystemEnv()>
c000e4d1:	e8 44 d0 00 00       	call   c001b51a <setupSystemCalls()>
c000e4d6:	e8 27 51 00 00       	call   c0013602 <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 eb 57 00 00       	call   c0013cce <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 5c 89 02 c0       	push   0xc002895c
c000e4f2:	e8 d3 e1 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 d9 e3 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 d8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bd8
c000e507:	e8 89 42 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 bb ec 00 00       	call   c001d1d4 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 81 c9 02 c0 04 	test   BYTE PTR ds:0xc002c981,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 1f 6b 01 00       	call   c0025096 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 86 9b 00 00       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 5f 9b 00 00       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 3d 9b 00 00       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 1b 9b 00 00       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 80 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c980,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 29 9a 00 00       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 04 9a 00 00       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 89 69 01 00       	call   c0025050 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 46 69 01 00       	call   c0025030 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 20 9a 00 00       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 7f 89 02 c0       	push   0xc002897f
c000e743:	e8 4d 40 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 92 89 02 c0       	push   0xc0028992
c000e766:	e8 2a 40 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 a3 89 02 c0       	push   0xc00289a3
c000e789:	e8 07 40 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 b4 89 02 c0       	push   0xc00289b4
c000e7ac:	e8 e4 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 c5 89 02 c0       	push   0xc00289c5
c000e7cf:	e8 c1 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 d6 89 02 c0       	push   0xc00289d6
c000e7f2:	e8 9e 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 e7 89 02 c0       	push   0xc00289e7
c000e815:	e8 7b 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 f8 89 02 c0       	push   0xc00289f8
c000e838:	e8 58 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 09 8a 02 c0       	push   0xc0028a09
c000e85b:	e8 35 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 1a 8a 02 c0       	push   0xc0028a1a
c000e87e:	e8 12 3f 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 2b 8a 02 c0       	push   0xc0028a2b
c000e8a1:	e8 ef 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 3c 8a 02 c0       	push   0xc0028a3c
c000e8c4:	e8 cc 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 4d 8a 02 c0       	push   0xc0028a4d
c000e8e7:	e8 a9 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 5e 8a 02 c0       	push   0xc0028a5e
c000e90a:	e8 86 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 6f 8a 02 c0       	push   0xc0028a6f
c000e92d:	e8 63 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 80 8a 02 c0       	push   0xc0028a80
c000e950:	e8 40 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 91 8a 02 c0       	push   0xc0028a91
c000e973:	e8 1d 3e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 a2 8a 02 c0       	push   0xc0028aa2
c000e996:	e8 fa 3d 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 b3 8a 02 c0       	push   0xc0028ab3
c000e9b5:	e8 db 3d 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 7b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a27b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 ca 3d 00 00       	jmp    c0012795 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 c4 8a 02 c0       	push   0xc0028ac4
c000ea9e:	e8 0c ae 00 00       	call   c00198af <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 ca 8a 02 c0       	push   0xc0028aca
c000ead6:	e8 d4 ad 00 00       	call   c00198af <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 80 c9 02 c0 04 	test   BYTE PTR ds:0xc002c980,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 a4 b8 02 c0 	sete   BYTE PTR ds:0xc002b8a4
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 fb 8b 00 00       	call   c0017744 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 2c 50 00 00       	call   c0013b84 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 68 96 00 00       	call   c00181f0 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 ed 4f 00 00       	call   c0013b84 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 43 55 00 00       	call   c00140f6 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 bd 4f 00 00       	call   c0013b84 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 87 e3 00 00       	call   c001cf70 <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 d0 8a 02 c0       	push   0xc0028ad0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 5e 3b 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 e1 8a 02 c0       	push   0xc0028ae1
c000ec54:	e8 56 ac 00 00       	call   c00198af <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ee 8a 02 c0       	push   0xc0028aee
c000ec69:	e8 41 ac 00 00       	call   c00198af <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 f8 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028af8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 2a ac 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 34 8b 02 c0       	push   0xc0028b34
c000ed1a:	e8 76 3a 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 72 c9 02 c0       	mov    ds:0xc002c972,eax
c000ed5b:	66 89 15 70 c9 02 c0 	mov    WORD PTR ds:0xc002c970,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 ce de 00 00       	call   c001cd40 <unlockScheduler()>
c000ee72:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 10 82 01 00       	call   c00270d0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 07 82 01 00       	call   c00270d0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 78 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c978,0x7ff
c000efb7:	a3 7a c9 02 c0       	mov    ds:0xc002c97a,eax
c000efbc:	0f 01 1d 78 c9 02 c0 	lidtd  ds:0xc002c978
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 8c 26 00 00       	call   c0011935 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 bc 2c 00 00       	call   c0011f70 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 04 1e 00 00       	call   c00110d6 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 35 1e 00 00       	call   c0011116 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 8c b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b88c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 50 8b 02 c0       	push   0xc0028b50
c000f388:	e8 08 34 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 8c b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b88c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 82 25 00 00       	call   c0011935 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 8c b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b88c
c000f3bb:	e8 d1 06 00 00       	call   c000fa91 <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 a3 2a 00 00       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 8c b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b88c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 80 8b 02 c0       	push   0xc0028b80
c000f441:	e8 69 a4 00 00       	call   c00198af <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 85 8b 02 c0       	push   0xc0028b85
c000f457:	e8 53 a4 00 00       	call   c00198af <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 d1 d8 00 00       	call   c001cd3e <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 c2 d8 00 00       	call   c001cd40 <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 a6 24 00 00       	call   c0011935 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 d2 2a 00 00       	call   c0011f70 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 8b 24 00 00       	call   c0011935 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 75 27 00 00       	call   c0011c2c <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	57                   	push   edi
c000f57a:	8b 15 a0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8a0
c000f580:	56                   	push   esi
c000f581:	8d b2 a0 00 00 00    	lea    esi,[edx+0xa0]
c000f587:	53                   	push   ebx
c000f588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f590:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f596:	8b bb d8 0f 00 00    	mov    edi,DWORD PTR [ebx+0xfd8]
c000f59c:	c1 e0 04             	shl    eax,0x4
c000f59f:	83 e7 0f             	and    edi,0xf
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	41                   	inc    ecx
c000f5a6:	09 f8                	or     eax,edi
c000f5a8:	83 c2 02             	add    edx,0x2
c000f5ab:	0f b6 79 ff          	movzx  edi,BYTE PTR [ecx-0x1]
c000f5af:	c1 e0 08             	shl    eax,0x8
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5b8:	39 f2                	cmp    edx,esi
c000f5ba:	75 d4                	jne    c000f590 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>
c000f5bc:	5b                   	pop    ebx
c000f5bd:	5e                   	pop    esi
c000f5be:	5f                   	pop    edi
c000f5bf:	c3                   	ret    

c000f5c0 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5c0:	56                   	push   esi
c000f5c1:	53                   	push   ebx
c000f5c2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5c7:	74 38                	je     c000f601 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5c9:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5ce:	b0 0a                	mov    al,0xa
c000f5d0:	89 da                	mov    edx,ebx
c000f5d2:	ee                   	out    dx,al
c000f5d3:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5d8:	89 ca                	mov    edx,ecx
c000f5da:	ec                   	in     al,dx
c000f5db:	b2 0f                	mov    dl,0xf
c000f5dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5e1:	83 e0 c0             	and    eax,0xffffffc0
c000f5e4:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5ea:	09 d0                	or     eax,edx
c000f5ec:	89 ca                	mov    edx,ecx
c000f5ee:	ee                   	out    dx,al
c000f5ef:	b0 0b                	mov    al,0xb
c000f5f1:	89 da                	mov    edx,ebx
c000f5f3:	ee                   	out    dx,al
c000f5f4:	89 ca                	mov    edx,ecx
c000f5f6:	ec                   	in     al,dx
c000f5f7:	83 e0 e0             	and    eax,0xffffffe0
c000f5fa:	83 c8 0f             	or     eax,0xf
c000f5fd:	ee                   	out    dx,al
c000f5fe:	5b                   	pop    ebx
c000f5ff:	5e                   	pop    esi
c000f600:	c3                   	ret    
c000f601:	b0 0a                	mov    al,0xa
c000f603:	ba d4 03 00 00       	mov    edx,0x3d4
c000f608:	ee                   	out    dx,al
c000f609:	b0 20                	mov    al,0x20
c000f60b:	ba d5 03 00 00       	mov    edx,0x3d5
c000f610:	ee                   	out    dx,al
c000f611:	5b                   	pop    ebx
c000f612:	5e                   	pop    esi
c000f613:	c3                   	ret    

c000f614 <hwTextMode_update(VgaText*)>:
c000f614:	c3                   	ret    

c000f615 <hwTextMode_updateCursor(VgaText*)>:
c000f615:	56                   	push   esi
c000f616:	b9 19 00 00 00       	mov    ecx,0x19
c000f61b:	53                   	push   ebx
c000f61c:	be d4 03 00 00       	mov    esi,0x3d4
c000f621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f625:	89 f2                	mov    edx,esi
c000f627:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f62d:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f633:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f636:	c1 e1 04             	shl    ecx,0x4
c000f639:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f63f:	b0 0f                	mov    al,0xf
c000f641:	ee                   	out    dx,al
c000f642:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f647:	88 c8                	mov    al,cl
c000f649:	89 da                	mov    edx,ebx
c000f64b:	ee                   	out    dx,al
c000f64c:	b0 0e                	mov    al,0xe
c000f64e:	89 f2                	mov    edx,esi
c000f650:	ee                   	out    dx,al
c000f651:	89 c8                	mov    eax,ecx
c000f653:	89 da                	mov    edx,ebx
c000f655:	66 c1 e8 08          	shr    ax,0x8
c000f659:	ee                   	out    dx,al
c000f65a:	5b                   	pop    ebx
c000f65b:	5e                   	pop    esi
c000f65c:	c3                   	ret    

c000f65d <hwTextMode_disableBlink(VgaText*, bool)>:
c000f65d:	ba da 03 00 00       	mov    edx,0x3da
c000f662:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f667:	75 18                	jne    c000f681 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f669:	ec                   	in     al,dx
c000f66a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f66f:	b0 30                	mov    al,0x30
c000f671:	89 ca                	mov    edx,ecx
c000f673:	ee                   	out    dx,al
c000f674:	ba c1 03 00 00       	mov    edx,0x3c1
c000f679:	ec                   	in     al,dx
c000f67a:	83 c8 08             	or     eax,0x8
c000f67d:	89 ca                	mov    edx,ecx
c000f67f:	ee                   	out    dx,al
c000f680:	c3                   	ret    
c000f681:	ec                   	in     al,dx
c000f682:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f687:	b0 30                	mov    al,0x30
c000f689:	89 ca                	mov    edx,ecx
c000f68b:	ee                   	out    dx,al
c000f68c:	ba c1 03 00 00       	mov    edx,0x3c1
c000f691:	ec                   	in     al,dx
c000f692:	83 e0 f7             	and    eax,0xfffffff7
c000f695:	89 ca                	mov    edx,ecx
c000f697:	ee                   	out    dx,al
c000f698:	c3                   	ret    

c000f699 <hwTextMode_scrollScreen(VgaText*)>:
c000f699:	55                   	push   ebp
c000f69a:	bd 02 00 00 00       	mov    ebp,0x2
c000f69f:	57                   	push   edi
c000f6a0:	56                   	push   esi
c000f6a1:	53                   	push   ebx
c000f6a2:	83 ec 1c             	sub    esp,0x1c
c000f6a5:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c000f6aa:	05 a0 00 00 00       	add    eax,0xa0
c000f6af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6b7:	31 c0                	xor    eax,eax
c000f6b9:	eb 0b                	jmp    c000f6c6 <hwTextMode_scrollScreen(VgaText*)+0x2d>
c000f6bb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c1:	74 57                	je     c000f71a <hwTextMode_scrollScreen(VgaText*)+0x81>
c000f6c3:	43                   	inc    ebx
c000f6c4:	89 f0                	mov    eax,esi
c000f6c6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6cc:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6d2:	88 13                	mov    BYTE PTR [ebx],dl
c000f6d4:	8d 70 01             	lea    esi,[eax+0x1]
c000f6d7:	83 fd 18             	cmp    ebp,0x18
c000f6da:	75 df                	jne    c000f6bb <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f6dc:	a8 01                	test   al,0x1
c000f6de:	75 13                	jne    c000f6f3 <hwTextMode_scrollScreen(VgaText*)+0x5a>
c000f6e0:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6e3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6e9:	75 d8                	jne    c000f6c3 <hwTextMode_scrollScreen(VgaText*)+0x2a>
c000f6eb:	83 c4 1c             	add    esp,0x1c
c000f6ee:	5b                   	pop    ebx
c000f6ef:	5e                   	pop    esi
c000f6f0:	5f                   	pop    edi
c000f6f1:	5d                   	pop    ebp
c000f6f2:	c3                   	ret    
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6fa:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f701:	50                   	push   eax
c000f702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f706:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f70d:	50                   	push   eax
c000f70e:	e8 c3 0b 00 00       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c000f713:	83 c4 10             	add    esp,0x10
c000f716:	88 07                	mov    BYTE PTR [edi],al
c000f718:	eb c9                	jmp    c000f6e3 <hwTextMode_scrollScreen(VgaText*)+0x4a>
c000f71a:	45                   	inc    ebp
c000f71b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f723:	eb 8e                	jmp    c000f6b3 <hwTextMode_scrollScreen(VgaText*)+0x1a>

c000f725 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f725:	56                   	push   esi
c000f726:	53                   	push   ebx
c000f727:	83 ec 0c             	sub    esp,0xc
c000f72a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f72e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f732:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f737:	50                   	push   eax
c000f738:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f73d:	50                   	push   eax
c000f73e:	e8 93 0b 00 00       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c000f743:	5a                   	pop    edx
c000f744:	0f b6 c0             	movzx  eax,al
c000f747:	59                   	pop    ecx
c000f748:	50                   	push   eax
c000f749:	89 f0                	mov    eax,esi
c000f74b:	0f be f0             	movsx  esi,al
c000f74e:	56                   	push   esi
c000f74f:	e8 3c 0c 00 00       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c000f754:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f758:	ba 19 00 00 00       	mov    edx,0x19
c000f75d:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f763:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f766:	8d 14 92             	lea    edx,[edx+edx*4]
c000f769:	c1 e1 04             	shl    ecx,0x4
c000f76c:	c1 e2 04             	shl    edx,0x4
c000f76f:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f773:	01 ca                	add    edx,ecx
c000f775:	8b 0d a0 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8a0
c000f77b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f77f:	83 c4 14             	add    esp,0x14
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	c3                   	ret    

c000f785 <setupTextMode()>:
c000f785:	c7 05 38 ca 02 c0 5d f6 00 c0 	mov    DWORD PTR ds:0xc002ca38,0xc000f65d
c000f78f:	c7 05 24 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002ca24,0xc000f52e
c000f799:	c7 05 20 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002ca20,0xc000f579
c000f7a3:	c7 05 2c ca 02 c0 99 f6 00 c0 	mov    DWORD PTR ds:0xc002ca2c,0xc000f699
c000f7ad:	c7 05 34 ca 02 c0 c0 f5 00 c0 	mov    DWORD PTR ds:0xc002ca34,0xc000f5c0
c000f7b7:	c7 05 28 ca 02 c0 14 f6 00 c0 	mov    DWORD PTR ds:0xc002ca28,0xc000f614
c000f7c1:	c7 05 30 ca 02 c0 15 f6 00 c0 	mov    DWORD PTR ds:0xc002ca30,0xc000f615
c000f7cb:	c7 05 3c ca 02 c0 25 f7 00 c0 	mov    DWORD PTR ds:0xc002ca3c,0xc000f725
c000f7d5:	c3                   	ret    

c000f7d6 <kernel_main>:
c000f7d6:	57                   	push   edi
c000f7d7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7dc:	56                   	push   esi
c000f7dd:	31 f6                	xor    esi,esi
c000f7df:	53                   	push   ebx
c000f7e0:	83 ec 10             	sub    esp,0x10
c000f7e3:	e8 48 09 00 00       	call   c0010130 <installVgaTextImplementation()>
c000f7e8:	e8 98 ff ff ff       	call   c000f785 <setupTextMode()>
c000f7ed:	89 f0                	mov    eax,esi
c000f7ef:	89 fa                	mov    edx,edi
c000f7f1:	ee                   	out    dx,al
c000f7f2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7f7:	b0 80                	mov    al,0x80
c000f7f9:	89 da                	mov    edx,ebx
c000f7fb:	ee                   	out    dx,al
c000f7fc:	b1 03                	mov    cl,0x3
c000f7fe:	ba f8 03 00 00       	mov    edx,0x3f8
c000f803:	88 c8                	mov    al,cl
c000f805:	ee                   	out    dx,al
c000f806:	89 f0                	mov    eax,esi
c000f808:	89 fa                	mov    edx,edi
c000f80a:	ee                   	out    dx,al
c000f80b:	88 c8                	mov    al,cl
c000f80d:	89 da                	mov    edx,ebx
c000f80f:	ee                   	out    dx,al
c000f810:	b0 c7                	mov    al,0xc7
c000f812:	ba fa 03 00 00       	mov    edx,0x3fa
c000f817:	ee                   	out    dx,al
c000f818:	b0 0b                	mov    al,0xb
c000f81a:	ba fc 03 00 00       	mov    edx,0x3fc
c000f81f:	ee                   	out    dx,al
c000f820:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f825:	83 ec 0c             	sub    esp,0xc
c000f828:	05 ff 0f 00 00       	add    eax,0xfff
c000f82d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f832:	50                   	push   eax
c000f833:	e8 b3 03 00 00       	call   c000fbeb <Phys::physicalMemorySetup(unsigned int)>
c000f838:	e8 79 20 00 00       	call   c00118b6 <Virt::virtualMemorySetup()>
c000f83d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f843:	83 c4 10             	add    esp,0x10
c000f846:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f84c:	75 0e                	jne    c000f85c <kernel_main+0x86>
c000f84e:	89 d8                	mov    eax,ebx
c000f850:	25 48 03 00 00       	and    eax,0x348
c000f855:	3d 00 03 00 00       	cmp    eax,0x300
c000f85a:	74 10                	je     c000f86c <kernel_main+0x96>
c000f85c:	83 ec 0c             	sub    esp,0xc
c000f85f:	68 7c a2 02 c0       	push   0xc002a27c
c000f864:	e8 46 a0 00 00       	call   c00198af <Krnl::panic(char const*)>
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	89 1d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ebx
c000f875:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f879:	53                   	push   ebx
c000f87a:	e8 eb 21 00 00       	call   c0011a6a <VAS::VAS()>
c000f87f:	89 1d e4 ca 02 c0    	mov    DWORD PTR ds:0xc002cae4,ebx
c000f885:	e8 96 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f88a:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f891:	e8 3e fc ff ff       	call   c000f4d4 <malloc>
c000f896:	89 04 24             	mov    DWORD PTR [esp],eax
c000f899:	89 c6                	mov    esi,eax
c000f89b:	e8 4a ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f8a0:	6a 00                	push   0x0
c000f8a2:	89 35 68 c9 02 c0    	mov    DWORD PTR ds:0xc002c968,esi
c000f8a8:	6a 00                	push   0x0
c000f8aa:	6a 00                	push   0x0
c000f8ac:	56                   	push   esi
c000f8ad:	e8 6c f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f8b2:	83 c4 14             	add    esp,0x14
c000f8b5:	53                   	push   ebx
c000f8b6:	e8 49 24 00 00       	call   c0011d04 <VAS::~VAS()>
c000f8bb:	c7 04 24 8c 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b8c
c000f8c2:	e8 e8 9f 00 00       	call   c00198af <Krnl::panic(char const*)>
c000f8c7:	83 c4 20             	add    esp,0x20
c000f8ca:	5b                   	pop    ebx
c000f8cb:	5e                   	pop    esi
c000f8cc:	5f                   	pop    edi
c000f8cd:	c3                   	ret    

c000f8ce <Phys::allocateDMA(unsigned long)>:
c000f8ce:	55                   	push   ebp
c000f8cf:	31 d2                	xor    edx,edx
c000f8d1:	57                   	push   edi
c000f8d2:	31 ed                	xor    ebp,ebp
c000f8d4:	56                   	push   esi
c000f8d5:	31 c9                	xor    ecx,ecx
c000f8d7:	53                   	push   ebx
c000f8d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8dc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8e2:	31 c0                	xor    eax,eax
c000f8e4:	c1 ee 0c             	shr    esi,0xc
c000f8e7:	eb 17                	jmp    c000f900 <Phys::allocateDMA(unsigned long)+0x32>
c000f8e9:	85 c9                	test   ecx,ecx
c000f8eb:	75 04                	jne    c000f8f1 <Phys::allocateDMA(unsigned long)+0x23>
c000f8ed:	89 d5                	mov    ebp,edx
c000f8ef:	89 d0                	mov    eax,edx
c000f8f1:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8f4:	39 de                	cmp    esi,ebx
c000f8f6:	74 20                	je     c000f918 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8f8:	42                   	inc    edx
c000f8f9:	89 d9                	mov    ecx,ebx
c000f8fb:	83 fa 2f             	cmp    edx,0x2f
c000f8fe:	7f 11                	jg     c000f911 <Phys::allocateDMA(unsigned long)+0x43>
c000f900:	80 ba c0 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3640],0x0
c000f907:	74 e0                	je     c000f8e9 <Phys::allocateDMA(unsigned long)+0x1b>
c000f909:	31 c9                	xor    ecx,ecx
c000f90b:	42                   	inc    edx
c000f90c:	83 fa 2f             	cmp    edx,0x2f
c000f90f:	7e ef                	jle    c000f900 <Phys::allocateDMA(unsigned long)+0x32>
c000f911:	5b                   	pop    ebx
c000f912:	31 c0                	xor    eax,eax
c000f914:	5e                   	pop    esi
c000f915:	5f                   	pop    edi
c000f916:	5d                   	pop    ebp
c000f917:	c3                   	ret    
c000f918:	8d 14 30             	lea    edx,[eax+esi*1]
c000f91b:	89 d7                	mov    edi,edx
c000f91d:	4f                   	dec    edi
c000f91e:	79 03                	jns    c000f923 <Phys::allocateDMA(unsigned long)+0x55>
c000f920:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f923:	c1 ff 04             	sar    edi,0x4
c000f926:	89 c2                	mov    edx,eax
c000f928:	c1 fa 04             	sar    edx,0x4
c000f92b:	39 fa                	cmp    edx,edi
c000f92d:	75 2f                	jne    c000f95e <Phys::allocateDMA(unsigned long)+0x90>
c000f92f:	85 db                	test   ebx,ebx
c000f931:	74 1a                	je     c000f94d <Phys::allocateDMA(unsigned long)+0x7f>
c000f933:	be c0 c9 02 c0       	mov    esi,0xc002c9c0
c000f938:	8d 90 c0 c9 02 c0    	lea    edx,[eax-0x3ffd3640]
c000f93e:	f7 d6                	not    esi
c000f940:	29 c6                	sub    esi,eax
c000f942:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f945:	42                   	inc    edx
c000f946:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f949:	39 d9                	cmp    ecx,ebx
c000f94b:	7f f5                	jg     c000f942 <Phys::allocateDMA(unsigned long)+0x74>
c000f94d:	85 ff                	test   edi,edi
c000f94f:	74 13                	je     c000f964 <Phys::allocateDMA(unsigned long)+0x96>
c000f951:	5b                   	pop    ebx
c000f952:	05 50 20 0c 00       	add    eax,0xc2050
c000f957:	5e                   	pop    esi
c000f958:	c1 e0 0c             	shl    eax,0xc
c000f95b:	5f                   	pop    edi
c000f95c:	5d                   	pop    ebp
c000f95d:	c3                   	ret    
c000f95e:	89 ea                	mov    edx,ebp
c000f960:	31 c9                	xor    ecx,ecx
c000f962:	eb a7                	jmp    c000f90b <Phys::allocateDMA(unsigned long)+0x3d>
c000f964:	5b                   	pop    ebx
c000f965:	c1 e0 0c             	shl    eax,0xc
c000f968:	5e                   	pop    esi
c000f969:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f96e:	5f                   	pop    edi
c000f96f:	5d                   	pop    ebp
c000f970:	c3                   	ret    

c000f971 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f975:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f979:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f97f:	c1 e9 0c             	shr    ecx,0xc
c000f982:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f987:	76 25                	jbe    c000f9ae <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f989:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f98e:	c1 e8 0c             	shr    eax,0xc
c000f991:	8d 50 10             	lea    edx,[eax+0x10]
c000f994:	85 c9                	test   ecx,ecx
c000f996:	74 15                	je     c000f9ad <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f998:	8d 82 c0 c9 02 c0    	lea    eax,[edx-0x3ffd3640]
c000f99e:	8d 94 11 c0 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3640]
c000f9a5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9a8:	40                   	inc    eax
c000f9a9:	39 d0                	cmp    eax,edx
c000f9ab:	75 f8                	jne    c000f9a5 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f9ad:	c3                   	ret    
c000f9ae:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9b4:	c1 ea 0c             	shr    edx,0xc
c000f9b7:	eb db                	jmp    c000f994 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9b9 <Phys::setPageState(unsigned long, bool)>:
c000f9b9:	56                   	push   esi
c000f9ba:	ba 01 00 00 00       	mov    edx,0x1
c000f9bf:	53                   	push   ebx
c000f9c0:	8b 35 90 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b890
c000f9c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ce:	89 c8                	mov    eax,ecx
c000f9d0:	83 e1 07             	and    ecx,0x7
c000f9d3:	c1 e8 03             	shr    eax,0x3
c000f9d6:	d3 e3                	shl    ebx,cl
c000f9d8:	01 c6                	add    esi,eax
c000f9da:	d3 e2                	shl    edx,cl
c000f9dc:	f7 d2                	not    edx
c000f9de:	20 16                	and    BYTE PTR [esi],dl
c000f9e0:	03 05 90 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b890
c000f9e6:	08 18                	or     BYTE PTR [eax],bl
c000f9e8:	5b                   	pop    ebx
c000f9e9:	5e                   	pop    esi
c000f9ea:	c3                   	ret    

c000f9eb <Phys::getPageState(unsigned long)>:
c000f9eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9ef:	8b 15 90 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b890
c000f9f5:	89 c8                	mov    eax,ecx
c000f9f7:	83 e1 07             	and    ecx,0x7
c000f9fa:	c1 e8 03             	shr    eax,0x3
c000f9fd:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fa01:	d3 f8                	sar    eax,cl
c000fa03:	83 e0 01             	and    eax,0x1
c000fa06:	c3                   	ret    

c000fa07 <Phys::freePage(unsigned long)>:
c000fa07:	53                   	push   ebx
c000fa08:	83 ec 08             	sub    esp,0x8
c000fa0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa0f:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa15:	76 57                	jbe    c000fa6e <Phys::freePage(unsigned long)+0x67>
c000fa17:	c1 eb 0c             	shr    ebx,0xc
c000fa1a:	53                   	push   ebx
c000fa1b:	e8 cb ff ff ff       	call   c000f9eb <Phys::getPageState(unsigned long)>
c000fa20:	5a                   	pop    edx
c000fa21:	84 c0                	test   al,al
c000fa23:	74 5b                	je     c000fa80 <Phys::freePage(unsigned long)+0x79>
c000fa25:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c000fa2a:	48                   	dec    eax
c000fa2b:	a3 ac c9 02 c0       	mov    ds:0xc002c9ac,eax
c000fa30:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa33:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa36:	c1 e0 02             	shl    eax,0x2
c000fa39:	99                   	cdq    
c000fa3a:	f7 3d b0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9b0
c000fa40:	39 05 a8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a8,eax
c000fa46:	75 13                	jne    c000fa5b <Phys::freePage(unsigned long)+0x54>
c000fa48:	83 ec 08             	sub    esp,0x8
c000fa4b:	6a 00                	push   0x0
c000fa4d:	53                   	push   ebx
c000fa4e:	e8 66 ff ff ff       	call   c000f9b9 <Phys::setPageState(unsigned long, bool)>
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	83 c4 08             	add    esp,0x8
c000fa59:	5b                   	pop    ebx
c000fa5a:	c3                   	ret    
c000fa5b:	83 ec 0c             	sub    esp,0xc
c000fa5e:	a3 a8 c9 02 c0       	mov    ds:0xc002c9a8,eax
c000fa63:	50                   	push   eax
c000fa64:	e8 6f 0a 00 00       	call   c00104d8 <VgaText::updateRAMUsageDisplay(int)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	eb da                	jmp    c000fa48 <Phys::freePage(unsigned long)+0x41>
c000fa6e:	68 00 10 00 00       	push   0x1000
c000fa73:	53                   	push   ebx
c000fa74:	e8 f8 fe ff ff       	call   c000f971 <Phys::freeDMA(unsigned long, unsigned long)>
c000fa79:	59                   	pop    ecx
c000fa7a:	5b                   	pop    ebx
c000fa7b:	83 c4 08             	add    esp,0x8
c000fa7e:	5b                   	pop    ebx
c000fa7f:	c3                   	ret    
c000fa80:	c7 44 24 10 a7 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ba7
c000fa88:	83 c4 08             	add    esp,0x8
c000fa8b:	5b                   	pop    ebx
c000fa8c:	e9 1e 9e 00 00       	jmp    c00198af <Krnl::panic(char const*)>

c000fa91 <Phys::allocatePage()>:
c000fa91:	56                   	push   esi
c000fa92:	53                   	push   ebx
c000fa93:	51                   	push   ecx
c000fa94:	8b 35 a0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9a0
c000fa9a:	89 f3                	mov    ebx,esi
c000fa9c:	eb 0a                	jmp    c000faa8 <Phys::allocatePage()+0x17>
c000fa9e:	89 1d a0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a0,ebx
c000faa4:	39 de                	cmp    esi,ebx
c000faa6:	74 24                	je     c000facc <Phys::allocatePage()+0x3b>
c000faa8:	53                   	push   ebx
c000faa9:	e8 3d ff ff ff       	call   c000f9eb <Phys::getPageState(unsigned long)>
c000faae:	5a                   	pop    edx
c000faaf:	84 c0                	test   al,al
c000fab1:	74 5a                	je     c000fb0d <Phys::allocatePage()+0x7c>
c000fab3:	43                   	inc    ebx
c000fab4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faba:	75 e2                	jne    c000fa9e <Phys::allocatePage()+0xd>
c000fabc:	31 db                	xor    ebx,ebx
c000fabe:	c7 05 a0 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c9a0,0x0
c000fac8:	39 de                	cmp    esi,ebx
c000faca:	75 dc                	jne    c000faa8 <Phys::allocatePage()+0x17>
c000facc:	83 ec 0c             	sub    esp,0xc
c000facf:	68 bd 8b 02 c0       	push   0xc0028bbd
c000fad4:	e8 bc 2c 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000fad9:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fae0:	e8 e9 fd ff ff       	call   c000f8ce <Phys::allocateDMA(unsigned long)>
c000fae5:	83 c4 10             	add    esp,0x10
c000fae8:	85 c0                	test   eax,eax
c000faea:	75 56                	jne    c000fb42 <Phys::allocatePage()+0xb1>
c000faec:	83 ec 0c             	sub    esp,0xc
c000faef:	68 ce 8b 02 c0       	push   0xc0028bce
c000faf4:	e8 b6 9d 00 00       	call   c00198af <Krnl::panic(char const*)>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	8b 1d a0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9a0
c000fb02:	53                   	push   ebx
c000fb03:	e8 e3 fe ff ff       	call   c000f9eb <Phys::getPageState(unsigned long)>
c000fb08:	5a                   	pop    edx
c000fb09:	84 c0                	test   al,al
c000fb0b:	75 a6                	jne    c000fab3 <Phys::allocatePage()+0x22>
c000fb0d:	6a 01                	push   0x1
c000fb0f:	53                   	push   ebx
c000fb10:	e8 a4 fe ff ff       	call   c000f9b9 <Phys::setPageState(unsigned long, bool)>
c000fb15:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c000fb1a:	59                   	pop    ecx
c000fb1b:	40                   	inc    eax
c000fb1c:	5b                   	pop    ebx
c000fb1d:	a3 ac c9 02 c0       	mov    ds:0xc002c9ac,eax
c000fb22:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb25:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb28:	c1 e0 02             	shl    eax,0x2
c000fb2b:	99                   	cdq    
c000fb2c:	f7 3d b0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9b0
c000fb32:	39 05 a8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a8,eax
c000fb38:	75 0c                	jne    c000fb46 <Phys::allocatePage()+0xb5>
c000fb3a:	a1 a0 c9 02 c0       	mov    eax,ds:0xc002c9a0
c000fb3f:	c1 e0 0c             	shl    eax,0xc
c000fb42:	5a                   	pop    edx
c000fb43:	5b                   	pop    ebx
c000fb44:	5e                   	pop    esi
c000fb45:	c3                   	ret    
c000fb46:	83 ec 0c             	sub    esp,0xc
c000fb49:	a3 a8 c9 02 c0       	mov    ds:0xc002c9a8,eax
c000fb4e:	50                   	push   eax
c000fb4f:	e8 84 09 00 00       	call   c00104d8 <VgaText::updateRAMUsageDisplay(int)>
c000fb54:	83 c4 10             	add    esp,0x10
c000fb57:	eb e1                	jmp    c000fb3a <Phys::allocatePage()+0xa9>

c000fb59 <Phys::allocateContiguousPages(int)>:
c000fb59:	57                   	push   edi
c000fb5a:	56                   	push   esi
c000fb5b:	53                   	push   ebx
c000fb5c:	31 db                	xor    ebx,ebx
c000fb5e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb62:	e8 d7 d1 00 00       	call   c001cd3e <lockScheduler()>
c000fb67:	85 db                	test   ebx,ebx
c000fb69:	75 11                	jne    c000fb7c <Phys::allocateContiguousPages(int)+0x23>
c000fb6b:	e8 21 ff ff ff       	call   c000fa91 <Phys::allocatePage()>
c000fb70:	83 ff 01             	cmp    edi,0x1
c000fb73:	89 c6                	mov    esi,eax
c000fb75:	74 21                	je     c000fb98 <Phys::allocateContiguousPages(int)+0x3f>
c000fb77:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7c:	e8 10 ff ff ff       	call   c000fa91 <Phys::allocatePage()>
c000fb81:	89 da                	mov    edx,ebx
c000fb83:	c1 e2 0c             	shl    edx,0xc
c000fb86:	01 f2                	add    edx,esi
c000fb88:	39 c2                	cmp    edx,eax
c000fb8a:	74 17                	je     c000fba3 <Phys::allocateContiguousPages(int)+0x4a>
c000fb8c:	bb 01 00 00 00       	mov    ebx,0x1
c000fb91:	89 c6                	mov    esi,eax
c000fb93:	83 ff 01             	cmp    edi,0x1
c000fb96:	75 e4                	jne    c000fb7c <Phys::allocateContiguousPages(int)+0x23>
c000fb98:	e8 a3 d1 00 00       	call   c001cd40 <unlockScheduler()>
c000fb9d:	89 f0                	mov    eax,esi
c000fb9f:	5b                   	pop    ebx
c000fba0:	5e                   	pop    esi
c000fba1:	5f                   	pop    edi
c000fba2:	c3                   	ret    
c000fba3:	43                   	inc    ebx
c000fba4:	39 fb                	cmp    ebx,edi
c000fba6:	75 bf                	jne    c000fb67 <Phys::allocateContiguousPages(int)+0xe>
c000fba8:	e8 93 d1 00 00       	call   c001cd40 <unlockScheduler()>
c000fbad:	89 f0                	mov    eax,esi
c000fbaf:	5b                   	pop    ebx
c000fbb0:	5e                   	pop    esi
c000fbb1:	5f                   	pop    edi
c000fbb2:	c3                   	ret    

c000fbb3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fbb3:	56                   	push   esi
c000fbb4:	53                   	push   ebx
c000fbb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbb9:	39 1d a4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a4,ebx
c000fbbf:	73 06                	jae    c000fbc7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbc1:	89 1d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebx
c000fbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbcb:	c1 eb 0c             	shr    ebx,0xc
c000fbce:	c1 e8 0c             	shr    eax,0xc
c000fbd1:	39 d8                	cmp    eax,ebx
c000fbd3:	73 13                	jae    c000fbe8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbd5:	6a 00                	push   0x0
c000fbd7:	8d 70 01             	lea    esi,[eax+0x1]
c000fbda:	50                   	push   eax
c000fbdb:	e8 d9 fd ff ff       	call   c000f9b9 <Phys::setPageState(unsigned long, bool)>
c000fbe0:	5a                   	pop    edx
c000fbe1:	89 f0                	mov    eax,esi
c000fbe3:	59                   	pop    ecx
c000fbe4:	39 f3                	cmp    ebx,esi
c000fbe6:	75 ed                	jne    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbe8:	5b                   	pop    ebx
c000fbe9:	5e                   	pop    esi
c000fbea:	c3                   	ret    

c000fbeb <Phys::physicalMemorySetup(unsigned int)>:
c000fbeb:	55                   	push   ebp
c000fbec:	57                   	push   edi
c000fbed:	56                   	push   esi
c000fbee:	53                   	push   ebx
c000fbef:	31 db                	xor    ebx,ebx
c000fbf1:	83 ec 40             	sub    esp,0x40
c000fbf4:	6a 30                	push   0x30
c000fbf6:	6a 00                	push   0x0
c000fbf8:	68 c0 c9 02 c0       	push   0xc002c9c0
c000fbfd:	e8 89 0a ff ff       	call   c000068b <memset>
c000fc02:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fc06:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc0b:	05 00 10 00 00       	add    eax,0x1000
c000fc10:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	83 ec 08             	sub    esp,0x8
c000fc1a:	6a 01                	push   0x1
c000fc1c:	53                   	push   ebx
c000fc1d:	43                   	inc    ebx
c000fc1e:	e8 96 fd ff ff       	call   c000f9b9 <Phys::setPageState(unsigned long, bool)>
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc2c:	75 e9                	jne    c000fc17 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc2e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc35:	66 85 c0             	test   ax,ax
c000fc38:	0f 84 8e 01 00 00    	je     c000fdcc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc42:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc4e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc5f:	eb 15                	jmp    c000fc76 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc65:	83 c3 18             	add    ebx,0x18
c000fc68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc70:	0f 84 66 01 00 00    	je     c000fddc <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc87:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc8c:	01 f0                	add    eax,esi
c000fc8e:	55                   	push   ebp
c000fc8f:	11 fa                	adc    edx,edi
c000fc91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc9d:	56                   	push   esi
c000fc9e:	68 08 8c 02 c0       	push   0xc0028c08
c000fca3:	e8 ed 2a 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000fca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fcac:	83 c4 10             	add    esp,0x10
c000fcaf:	09 f8                	or     eax,edi
c000fcb1:	0f 85 25 01 00 00    	jne    c000fddc <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fcb7:	4d                   	dec    ebp
c000fcb8:	75 a7                	jne    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcba:	ba 00 00 08 00       	mov    edx,0x80000
c000fcbf:	89 c1                	mov    ecx,eax
c000fcc1:	39 f2                	cmp    edx,esi
c000fcc3:	19 f9                	sbb    ecx,edi
c000fcc5:	0f 82 a7 00 00 00    	jb     c000fd72 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fccb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fccf:	89 c1                	mov    ecx,eax
c000fcd1:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcd5:	0f 83 97 00 00 00    	jae    c000fd72 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcdb:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fce0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fce4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce8:	39 fa                	cmp    edx,edi
c000fcea:	19 e8                	sbb    eax,ebp
c000fcec:	0f 82 14 01 00 00    	jb     c000fe06 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcf2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcf6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcfa:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fd00:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd05:	83 d5 ff             	adc    ebp,0xffffffff
c000fd08:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fd0c:	31 c0                	xor    eax,eax
c000fd0e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fd12:	39 fa                	cmp    edx,edi
c000fd14:	89 c1                	mov    ecx,eax
c000fd16:	19 e9                	sbb    ecx,ebp
c000fd18:	0f 83 43 ff ff ff    	jae    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd1e:	be 00 00 08 00       	mov    esi,0x80000
c000fd23:	50                   	push   eax
c000fd24:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd28:	57                   	push   edi
c000fd29:	56                   	push   esi
c000fd2a:	68 2c 8c 02 c0       	push   0xc0028c2c
c000fd2f:	e8 61 2a 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000fd34:	5a                   	pop    edx
c000fd35:	59                   	pop    ecx
c000fd36:	57                   	push   edi
c000fd37:	56                   	push   esi
c000fd38:	e8 76 fe ff ff       	call   c000fbb3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd4c:	03 05 b0 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9b0
c000fd52:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd59:	a3 b0 c9 02 c0       	mov    ds:0xc002c9b0,eax
c000fd5e:	52                   	push   edx
c000fd5f:	50                   	push   eax
c000fd60:	68 ea 8b 02 c0       	push   0xc0028bea
c000fd65:	e8 2b 2a 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c000fd6a:	83 c4 10             	add    esp,0x10
c000fd6d:	e9 ef fe ff ff       	jmp    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd72:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd7e:	39 ea                	cmp    edx,ebp
c000fd80:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd84:	0f 82 d7 fe ff ff    	jb     c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd8a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd8f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd93:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd97:	0f 83 c4 fe ff ff    	jae    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd9d:	39 ee                	cmp    esi,ebp
c000fd9f:	89 f8                	mov    eax,edi
c000fda1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fda5:	0f 83 78 ff ff ff    	jae    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdb3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fdb7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fdbb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdc7:	e9 57 ff ff ff       	jmp    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdcc:	83 ec 0c             	sub    esp,0xc
c000fdcf:	68 dc 8b 02 c0       	push   0xc0028bdc
c000fdd4:	e8 d6 9a 00 00       	call   c00198af <Krnl::panic(char const*)>
c000fdd9:	83 c4 10             	add    esp,0x10
c000fddc:	bb 40 01 00 00       	mov    ebx,0x140
c000fde1:	83 ec 08             	sub    esp,0x8
c000fde4:	6a 00                	push   0x0
c000fde6:	53                   	push   ebx
c000fde7:	43                   	inc    ebx
c000fde8:	e8 cc fb ff ff       	call   c000f9b9 <Phys::setPageState(unsigned long, bool)>
c000fded:	ff 05 b0 c9 02 c0    	inc    DWORD PTR ds:0xc002c9b0
c000fdf3:	83 c4 10             	add    esp,0x10
c000fdf6:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fdfc:	75 e3                	jne    c000fde1 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdfe:	83 c4 3c             	add    esp,0x3c
c000fe01:	5b                   	pop    ebx
c000fe02:	5e                   	pop    esi
c000fe03:	5f                   	pop    edi
c000fe04:	5d                   	pop    ebp
c000fe05:	c3                   	ret    
c000fe06:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fe0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe16:	e9 d7 fe ff ff       	jmp    c000fcf2 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fe1b:	90                   	nop

c000fe1c <Pipe::isAtty()>:
c000fe1c:	31 c0                	xor    eax,eax
c000fe1e:	c3                   	ret    
c000fe1f:	90                   	nop

c000fe20 <Pipe::~Pipe()>:
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	ba 98 8c 02 c0       	mov    edx,0xc0028c98
c000fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2c:	89 10                	mov    DWORD PTR [eax],edx
c000fe2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe32:	83 ec 0c             	sub    esp,0xc
c000fe35:	50                   	push   eax
c000fe36:	e8 09 17 00 00       	call   c0011544 <UnixFile::~UnixFile()>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	90                   	nop
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Pipe::~Pipe()>:
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4e:	e8 cd ff ff ff       	call   c000fe20 <Pipe::~Pipe()>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	83 ec 08             	sub    esp,0x8
c000fe59:	6a 20                	push   0x20
c000fe5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe5f:	e8 51 28 00 00       	call   c00126b5 <operator delete(void*, unsigned long)>
c000fe64:	83 c4 10             	add    esp,0x10
c000fe67:	83 c4 0c             	add    esp,0xc
c000fe6a:	c3                   	ret    
c000fe6b:	90                   	nop

c000fe6c <Pipe::read(unsigned long long, void*, int*)>:
c000fe6c:	55                   	push   ebp
c000fe6d:	57                   	push   edi
c000fe6e:	56                   	push   esi
c000fe6f:	53                   	push   ebx
c000fe70:	83 ec 1c             	sub    esp,0x1c
c000fe73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe7f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe82:	89 c8                	mov    eax,ecx
c000fe84:	99                   	cdq    
c000fe85:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe89:	74 19                	je     c000fea4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe8b:	39 f9                	cmp    ecx,edi
c000fe8d:	89 d1                	mov    ecx,edx
c000fe8f:	19 f1                	sbb    ecx,esi
c000fe91:	73 11                	jae    c000fea4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe93:	e8 a6 ce 00 00       	call   c001cd3e <lockScheduler()>
c000fe98:	e8 dd d1 00 00       	call   c001d07a <schedule()>
c000fe9d:	e8 9e ce 00 00       	call   c001cd40 <unlockScheduler()>
c000fea2:	eb db                	jmp    c000fe7f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fea4:	39 f8                	cmp    eax,edi
c000fea6:	89 d1                	mov    ecx,edx
c000fea8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000feac:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000feb0:	19 f1                	sbb    ecx,esi
c000feb2:	73 08                	jae    c000febc <Pipe::read(unsigned long long, void*, int*)+0x50>
c000feb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000feb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000febc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000febf:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fec2:	29 c6                	sub    esi,eax
c000fec4:	89 f1                	mov    ecx,esi
c000fec6:	c1 f9 1f             	sar    ecx,0x1f
c000fec9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fecd:	89 ca                	mov    edx,ecx
c000fecf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fed3:	19 d1                	sbb    ecx,edx
c000fed5:	73 04                	jae    c000fedb <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fed7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fedb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fedf:	89 fd                	mov    ebp,edi
c000fee1:	29 f5                	sub    ebp,esi
c000fee3:	85 f6                	test   esi,esi
c000fee5:	74 12                	je     c000fef9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fee7:	52                   	push   edx
c000fee8:	56                   	push   esi
c000fee9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000feec:	50                   	push   eax
c000feed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fef1:	e8 5f 07 ff ff       	call   c0000655 <memcpy>
c000fef6:	83 c4 10             	add    esp,0x10
c000fef9:	85 ed                	test   ebp,ebp
c000fefb:	74 12                	je     c000ff0f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fefd:	50                   	push   eax
c000fefe:	55                   	push   ebp
c000feff:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ff02:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ff06:	56                   	push   esi
c000ff07:	e8 49 07 ff ff       	call   c0000655 <memcpy>
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ff12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff15:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff18:	99                   	cdq    
c000ff19:	89 f7                	mov    edi,esi
c000ff1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff23:	c1 ff 1f             	sar    edi,0x1f
c000ff26:	57                   	push   edi
c000ff27:	56                   	push   esi
c000ff28:	52                   	push   edx
c000ff29:	50                   	push   eax
c000ff2a:	e8 9d 55 01 00       	call   c00254cc <__umoddi3>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff35:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff3a:	75 10                	jne    c000ff4c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	68 55 8c 02 c0       	push   0xc0028c55
c000ff44:	e8 66 99 00 00       	call   c00198af <Krnl::panic(char const*)>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff54:	89 10                	mov    DWORD PTR [eax],edx
c000ff56:	83 c4 1c             	add    esp,0x1c
c000ff59:	31 c0                	xor    eax,eax
c000ff5b:	5b                   	pop    ebx
c000ff5c:	5e                   	pop    esi
c000ff5d:	5f                   	pop    edi
c000ff5e:	5d                   	pop    ebp
c000ff5f:	c3                   	ret    

c000ff60 <Pipe::write(unsigned long long, void*, int*)>:
c000ff60:	55                   	push   ebp
c000ff61:	57                   	push   edi
c000ff62:	56                   	push   esi
c000ff63:	53                   	push   ebx
c000ff64:	83 ec 1c             	sub    esp,0x1c
c000ff67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff6b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff73:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff76:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff79:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff80:	89 de                	mov    esi,ebx
c000ff82:	89 df                	mov    edi,ebx
c000ff84:	c1 ff 1f             	sar    edi,0x1f
c000ff87:	01 c6                	add    esi,eax
c000ff89:	89 c8                	mov    eax,ecx
c000ff8b:	11 d7                	adc    edi,edx
c000ff8d:	99                   	cdq    
c000ff8e:	39 f1                	cmp    ecx,esi
c000ff90:	89 d0                	mov    eax,edx
c000ff92:	19 f8                	sbb    eax,edi
c000ff94:	b8 01 00 00 00       	mov    eax,0x1
c000ff99:	0f 82 80 00 00 00    	jb     c001001f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ffa2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ffa5:	01 d8                	add    eax,ebx
c000ffa7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ffab:	99                   	cdq    
c000ffac:	f7 f9                	idiv   ecx
c000ffae:	29 d1                	sub    ecx,edx
c000ffb0:	89 d7                	mov    edi,edx
c000ffb2:	89 c8                	mov    eax,ecx
c000ffb4:	99                   	cdq    
c000ffb5:	39 ce                	cmp    esi,ecx
c000ffb7:	19 d3                	sbb    ebx,edx
c000ffb9:	bb 00 00 00 00       	mov    ebx,0x0
c000ffbe:	72 04                	jb     c000ffc4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffc0:	89 f3                	mov    ebx,esi
c000ffc2:	29 cb                	sub    ebx,ecx
c000ffc4:	89 f1                	mov    ecx,esi
c000ffc6:	29 d9                	sub    ecx,ebx
c000ffc8:	74 1a                	je     c000ffe4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffca:	52                   	push   edx
c000ffcb:	51                   	push   ecx
c000ffcc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffd0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffd4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffd7:	57                   	push   edi
c000ffd8:	e8 78 06 ff ff       	call   c0000655 <memcpy>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffe4:	85 db                	test   ebx,ebx
c000ffe6:	74 12                	je     c000fffa <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffe8:	50                   	push   eax
c000ffe9:	53                   	push   ebx
c000ffea:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffee:	51                   	push   ecx
c000ffef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fff2:	e8 5e 06 ff ff       	call   c0000655 <memcpy>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fffd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010002:	75 10                	jne    c0010014 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	68 71 8c 02 c0       	push   0xc0028c71
c001000c:	e8 9e 98 00 00       	call   c00198af <Krnl::panic(char const*)>
c0010011:	83 c4 10             	add    esp,0x10
c0010014:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010018:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001001b:	89 38                	mov    DWORD PTR [eax],edi
c001001d:	31 c0                	xor    eax,eax
c001001f:	83 c4 1c             	add    esp,0x1c
c0010022:	5b                   	pop    ebx
c0010023:	5e                   	pop    esi
c0010024:	5f                   	pop    edi
c0010025:	5d                   	pop    ebp
c0010026:	c3                   	ret    
c0010027:	90                   	nop

c0010028 <Pipe::Pipe(int)>:
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002f:	83 ec 08             	sub    esp,0x8
c0010032:	6a 00                	push   0x0
c0010034:	50                   	push   eax
c0010035:	e8 28 13 00 00       	call   c0011362 <UnixFile::UnixFile(int)>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	ba 98 8c 02 c0       	mov    edx,0xc0028c98
c0010042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010046:	89 10                	mov    DWORD PTR [eax],edx
c0010048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010050:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010057:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010062:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010069:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001006d:	83 ec 0c             	sub    esp,0xc
c0010070:	50                   	push   eax
c0010071:	e8 5e f4 ff ff       	call   c000f4d4 <malloc>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	89 c2                	mov    edx,eax
c001007b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010086:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001008a:	90                   	nop
c001008b:	83 c4 0c             	add    esp,0xc
c001008e:	c3                   	ret    
c001008f:	90                   	nop

c0010090 <VgaText::isAtty()>:
c0010090:	b0 01                	mov    al,0x1
c0010092:	c3                   	ret    
c0010093:	90                   	nop

c0010094 <VgaText::~VgaText()>:
c0010094:	83 ec 0c             	sub    esp,0xc
c0010097:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c001009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a0:	89 10                	mov    DWORD PTR [eax],edx
c00100a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a6:	83 ec 0c             	sub    esp,0xc
c00100a9:	50                   	push   eax
c00100aa:	e8 95 14 00 00       	call   c0011544 <UnixFile::~UnixFile()>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	90                   	nop
c00100b3:	83 c4 0c             	add    esp,0xc
c00100b6:	c3                   	ret    
c00100b7:	90                   	nop

c00100b8 <VgaText::~VgaText()>:
c00100b8:	83 ec 0c             	sub    esp,0xc
c00100bb:	83 ec 0c             	sub    esp,0xc
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 cd ff ff ff       	call   c0010094 <VgaText::~VgaText()>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	83 ec 08             	sub    esp,0x8
c00100cd:	68 60 12 00 00       	push   0x1260
c00100d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100d6:	e8 da 25 00 00       	call   c00126b5 <operator delete(void*, unsigned long)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	83 c4 0c             	add    esp,0xc
c00100e1:	c3                   	ret    

c00100e2 <VgaText::read(unsigned long long, void*, int*)>:
c00100e2:	83 ec 10             	sub    esp,0x10
c00100e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f1:	e8 d3 58 00 00       	call   c00159c9 <readKeyboard(VgaText*, char*, unsigned long)>
c00100f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100fa:	89 02                	mov    DWORD PTR [edx],eax
c00100fc:	31 c0                	xor    eax,eax
c00100fe:	83 c4 1c             	add    esp,0x1c
c0010101:	c3                   	ret    

c0010102 <setTerminalScrollLock(bool)>:
c0010102:	c3                   	ret    

c0010103 <addToTerminalCycle(VgaText*)>:
c0010103:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c0010109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010d:	85 d2                	test   edx,edx
c001010f:	75 0c                	jne    c001011d <addToTerminalCycle(VgaText*)+0x1a>
c0010111:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010117:	a3 40 ca 02 c0       	mov    ds:0xc002ca40,eax
c001011c:	c3                   	ret    
c001011d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010123:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010129:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001012f:	c3                   	ret    

c0010130 <installVgaTextImplementation()>:
c0010130:	83 ec 10             	sub    esp,0x10
c0010133:	6a 20                	push   0x20
c0010135:	6a 00                	push   0x0
c0010137:	68 20 ca 02 c0       	push   0xc002ca20
c001013c:	e8 4a 05 ff ff       	call   c000068b <memset>
c0010141:	83 c4 1c             	add    esp,0x1c
c0010144:	c3                   	ret    

c0010145 <scrollTerminalScrollLock(int)>:
c0010145:	c3                   	ret    

c0010146 <VgaText::load()>:
c0010146:	53                   	push   ebx
c0010147:	31 c0                	xor    eax,eax
c0010149:	83 ec 58             	sub    esp,0x58
c001014c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010150:	89 e2                	mov    edx,esp
c0010152:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010156:	40                   	inc    eax
c0010157:	83 f8 50             	cmp    eax,0x50
c001015a:	75 f6                	jne    c0010152 <VgaText::load()+0xc>
c001015c:	31 c0                	xor    eax,eax
c001015e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010165:	84 c9                	test   cl,cl
c0010167:	74 06                	je     c001016f <VgaText::load()+0x29>
c0010169:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001016c:	40                   	inc    eax
c001016d:	eb ef                	jmp    c001015e <VgaText::load()+0x18>
c001016f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010175:	85 c0                	test   eax,eax
c0010177:	74 09                	je     c0010182 <VgaText::load()+0x3c>
c0010179:	51                   	push   ecx
c001017a:	51                   	push   ecx
c001017b:	52                   	push   edx
c001017c:	53                   	push   ebx
c001017d:	ff d0                	call   eax
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010188:	85 c0                	test   eax,eax
c001018a:	74 09                	je     c0010195 <VgaText::load()+0x4f>
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	53                   	push   ebx
c0010190:	ff d0                	call   eax
c0010192:	83 c4 10             	add    esp,0x10
c0010195:	83 c4 58             	add    esp,0x58
c0010198:	5b                   	pop    ebx
c0010199:	c3                   	ret    

c001019a <VgaText::updateCursor()>:
c001019a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001019e:	39 05 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,eax
c00101a4:	75 0c                	jne    c00101b2 <VgaText::updateCursor()+0x18>
c00101a6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00101ac:	85 c0                	test   eax,eax
c00101ae:	74 02                	je     c00101b2 <VgaText::updateCursor()+0x18>
c00101b0:	ff e0                	jmp    eax
c00101b2:	c3                   	ret    
c00101b3:	90                   	nop

c00101b4 <VgaText::showCursor(bool)>:
c00101b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bc:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101c2:	c3                   	ret    
c00101c3:	90                   	nop

c00101c4 <VgaText::disableBlink(bool)>:
c00101c4:	56                   	push   esi
c00101c5:	53                   	push   ebx
c00101c6:	51                   	push   ecx
c00101c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101cf:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c00101d5:	75 18                	jne    c00101ef <VgaText::disableBlink(bool)+0x2b>
c00101d7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101dd:	85 c0                	test   eax,eax
c00101df:	74 0e                	je     c00101ef <VgaText::disableBlink(bool)+0x2b>
c00101e1:	89 f1                	mov    ecx,esi
c00101e3:	52                   	push   edx
c00101e4:	52                   	push   edx
c00101e5:	0f b6 d1             	movzx  edx,cl
c00101e8:	52                   	push   edx
c00101e9:	53                   	push   ebx
c00101ea:	ff d0                	call   eax
c00101ec:	83 c4 10             	add    esp,0x10
c00101ef:	89 f0                	mov    eax,esi
c00101f1:	83 f0 01             	xor    eax,0x1
c00101f4:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101fa:	58                   	pop    eax
c00101fb:	5b                   	pop    ebx
c00101fc:	5e                   	pop    esi
c00101fd:	c3                   	ret    

c00101fe <VgaText::doANSI_SGR(int)>:
c00101fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010206:	85 d2                	test   edx,edx
c0010208:	75 14                	jne    c001021e <VgaText::doANSI_SGR(int)+0x20>
c001020a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010210:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010216:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001021c:	eb 65                	jmp    c0010283 <VgaText::doANSI_SGR(int)+0x85>
c001021e:	83 fa 07             	cmp    edx,0x7
c0010221:	75 14                	jne    c0010237 <VgaText::doANSI_SGR(int)+0x39>
c0010223:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010229:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001022f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010235:	eb 4c                	jmp    c0010283 <VgaText::doANSI_SGR(int)+0x85>
c0010237:	83 fa 1b             	cmp    edx,0x1b
c001023a:	74 ce                	je     c001020a <VgaText::doANSI_SGR(int)+0xc>
c001023c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001023f:	83 f9 07             	cmp    ecx,0x7
c0010242:	77 09                	ja     c001024d <VgaText::doANSI_SGR(int)+0x4f>
c0010244:	8b 14 8d c0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4740]
c001024b:	eb 20                	jmp    c001026d <VgaText::doANSI_SGR(int)+0x6f>
c001024d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010250:	83 f9 07             	cmp    ecx,0x7
c0010253:	77 09                	ja     c001025e <VgaText::doANSI_SGR(int)+0x60>
c0010255:	8b 14 8d c0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4740]
c001025c:	eb 25                	jmp    c0010283 <VgaText::doANSI_SGR(int)+0x85>
c001025e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010261:	83 f9 07             	cmp    ecx,0x7
c0010264:	77 0e                	ja     c0010274 <VgaText::doANSI_SGR(int)+0x76>
c0010266:	8b 14 95 78 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4888]
c001026d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010273:	c3                   	ret    
c0010274:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010277:	83 f9 07             	cmp    ecx,0x7
c001027a:	77 0d                	ja     c0010289 <VgaText::doANSI_SGR(int)+0x8b>
c001027c:	8b 14 95 50 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48b0]
c0010283:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010289:	c3                   	ret    

c001028a <VgaText::setDefaultBgColour(VgaColour)>:
c001028a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001028e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010292:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010298:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001029e:	c3                   	ret    
c001029f:	90                   	nop

c00102a0 <VgaText::setDefaultFgColour(VgaColour)>:
c00102a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00102ae:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102b4:	c3                   	ret    
c00102b5:	90                   	nop

c00102b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102b6:	53                   	push   ebx
c00102b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102c3:	51                   	push   ecx
c00102c4:	e8 c1 ff ff ff       	call   c001028a <VgaText::setDefaultBgColour(VgaColour)>
c00102c9:	58                   	pop    eax
c00102ca:	5a                   	pop    edx
c00102cb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102d3:	5b                   	pop    ebx
c00102d4:	eb ca                	jmp    c00102a0 <VgaText::setDefaultFgColour(VgaColour)>

c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00102d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102de:	b0 01                	mov    al,0x1
c00102e0:	80 3d 00 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca00,0x0
c00102e7:	75 0a                	jne    c00102f3 <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c00102e9:	83 e2 0f             	and    edx,0xf
c00102ec:	c1 e1 04             	shl    ecx,0x4
c00102ef:	88 c8                	mov    al,cl
c00102f1:	09 d0                	or     eax,edx
c00102f3:	c3                   	ret    

c00102f4 <VgaText::scrollScreen()>:
c00102f4:	55                   	push   ebp
c00102f5:	57                   	push   edi
c00102f6:	bf 01 00 00 00       	mov    edi,0x1
c00102fb:	56                   	push   esi
c00102fc:	53                   	push   ebx
c00102fd:	83 ec 0c             	sub    esp,0xc
c0010300:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010304:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c001030a:	31 ed                	xor    ebp,ebp
c001030c:	01 de                	add    esi,ebx
c001030e:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c0010311:	83 ff 17             	cmp    edi,0x17
c0010314:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c001031a:	75 28                	jne    c0010344 <VgaText::scrollScreen()+0x50>
c001031c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0010322:	74 1c                	je     c0010340 <VgaText::scrollScreen()+0x4c>
c0010324:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001032b:	50                   	push   eax
c001032c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010333:	50                   	push   eax
c0010334:	e8 9d ff ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010339:	5a                   	pop    edx
c001033a:	59                   	pop    ecx
c001033b:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c001033e:	eb 04                	jmp    c0010344 <VgaText::scrollScreen()+0x50>
c0010340:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010344:	45                   	inc    ebp
c0010345:	46                   	inc    esi
c0010346:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c001034c:	75 c0                	jne    c001030e <VgaText::scrollScreen()+0x1a>
c001034e:	47                   	inc    edi
c001034f:	83 ff 18             	cmp    edi,0x18
c0010352:	75 b0                	jne    c0010304 <VgaText::scrollScreen()+0x10>
c0010354:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c001035a:	75 24                	jne    c0010380 <VgaText::scrollScreen()+0x8c>
c001035c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010363:	74 08                	je     c001036d <VgaText::scrollScreen()+0x79>
c0010365:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001036b:	eb 13                	jmp    c0010380 <VgaText::scrollScreen()+0x8c>
c001036d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010373:	85 c0                	test   eax,eax
c0010375:	74 09                	je     c0010380 <VgaText::scrollScreen()+0x8c>
c0010377:	83 ec 0c             	sub    esp,0xc
c001037a:	53                   	push   ebx
c001037b:	ff d0                	call   eax
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010384:	83 c4 0c             	add    esp,0xc
c0010387:	5b                   	pop    ebx
c0010388:	5e                   	pop    esi
c0010389:	5f                   	pop    edi
c001038a:	5d                   	pop    ebp
c001038b:	e9 0a fe ff ff       	jmp    c001019a <VgaText::updateCursor()>

c0010390 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010390:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010395:	c1 e0 08             	shl    eax,0x8
c0010398:	89 c2                	mov    edx,eax
c001039a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001039f:	09 d0                	or     eax,edx
c00103a1:	c3                   	ret    

c00103a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00103a2:	53                   	push   ebx
c00103a3:	83 ec 08             	sub    esp,0x8
c00103a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103aa:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103af:	50                   	push   eax
c00103b0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103b5:	50                   	push   eax
c00103b6:	e8 1b ff ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00103bb:	5a                   	pop    edx
c00103bc:	0f b6 c0             	movzx  eax,al
c00103bf:	59                   	pop    ecx
c00103c0:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c00103c5:	50                   	push   eax
c00103c6:	51                   	push   ecx
c00103c7:	e8 c4 ff ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c00103cc:	5a                   	pop    edx
c00103cd:	5a                   	pop    edx
c00103ce:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103d4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103d8:	0f b7 d2             	movzx  edx,dx
c00103db:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00103e0:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c00103e6:	75 14                	jne    c00103fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103e8:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c00103ee:	85 c0                	test   eax,eax
c00103f0:	74 0a                	je     c00103fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00103f6:	83 c4 08             	add    esp,0x8
c00103f9:	5b                   	pop    ebx
c00103fa:	ff e0                	jmp    eax
c00103fc:	83 c4 08             	add    esp,0x8
c00103ff:	5b                   	pop    ebx
c0010400:	c3                   	ret    
c0010401:	90                   	nop

c0010402 <VgaText::getCursorX()>:
c0010402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010406:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001040c:	c3                   	ret    
c001040d:	90                   	nop

c001040e <VgaText::getCursorY()>:
c001040e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010412:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010418:	c3                   	ret    
c0010419:	90                   	nop

c001041a <VgaText::setCursor(int, int)>:
c001041a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010422:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001042c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010432:	e9 63 fd ff ff       	jmp    c001019a <VgaText::updateCursor()>
c0010437:	90                   	nop

c0010438 <VgaText::setCursorX(int)>:
c0010438:	83 ec 10             	sub    esp,0x10
c001043b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001043f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010445:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010449:	50                   	push   eax
c001044a:	e8 cb ff ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c001044f:	83 c4 1c             	add    esp,0x1c
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::setCursorY(int)>:
c0010454:	83 ec 10             	sub    esp,0x10
c0010457:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001045b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001045f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010465:	50                   	push   eax
c0010466:	e8 af ff ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c001046b:	83 c4 1c             	add    esp,0x1c
c001046e:	c3                   	ret    
c001046f:	90                   	nop

c0010470 <VgaText::incrementCursor(bool)>:
c0010470:	56                   	push   esi
c0010471:	53                   	push   ebx
c0010472:	51                   	push   ecx
c0010473:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010477:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001047b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010481:	40                   	inc    eax
c0010482:	83 f8 50             	cmp    eax,0x50
c0010485:	74 08                	je     c001048f <VgaText::incrementCursor(bool)+0x1f>
c0010487:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001048d:	eb 33                	jmp    c00104c2 <VgaText::incrementCursor(bool)+0x52>
c001048f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010495:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001049f:	8d 50 01             	lea    edx,[eax+0x1]
c00104a2:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00104a8:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00104ae:	75 12                	jne    c00104c2 <VgaText::incrementCursor(bool)+0x52>
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00104b9:	53                   	push   ebx
c00104ba:	e8 35 fe ff ff       	call   c00102f4 <VgaText::scrollScreen()>
c00104bf:	83 c4 10             	add    esp,0x10
c00104c2:	89 f0                	mov    eax,esi
c00104c4:	84 c0                	test   al,al
c00104c6:	74 0c                	je     c00104d4 <VgaText::incrementCursor(bool)+0x64>
c00104c8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104cc:	5a                   	pop    edx
c00104cd:	5b                   	pop    ebx
c00104ce:	5e                   	pop    esi
c00104cf:	e9 c6 fc ff ff       	jmp    c001019a <VgaText::updateCursor()>
c00104d4:	58                   	pop    eax
c00104d5:	5b                   	pop    ebx
c00104d6:	5e                   	pop    esi
c00104d7:	c3                   	ret    

c00104d8 <VgaText::updateRAMUsageDisplay(int)>:
c00104d8:	56                   	push   esi
c00104d9:	8b 35 a0 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b8a0
c00104df:	53                   	push   ebx
c00104e0:	6a 0f                	push   0xf
c00104e2:	6a 00                	push   0x0
c00104e4:	e8 ed fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00104e9:	5a                   	pop    edx
c00104ea:	0f b6 c0             	movzx  eax,al
c00104ed:	59                   	pop    ecx
c00104ee:	b9 0a 00 00 00       	mov    ecx,0xa
c00104f3:	50                   	push   eax
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	99                   	cdq    
c00104f9:	f7 f9                	idiv   ecx
c00104fb:	89 d3                	mov    ebx,edx
c00104fd:	83 c0 30             	add    eax,0x30
c0010500:	83 c3 30             	add    ebx,0x30
c0010503:	0f be c0             	movsx  eax,al
c0010506:	0f b6 db             	movzx  ebx,bl
c0010509:	50                   	push   eax
c001050a:	e8 81 fe ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c001050f:	5a                   	pop    edx
c0010510:	59                   	pop    ecx
c0010511:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010518:	6a 0f                	push   0xf
c001051a:	6a 00                	push   0x0
c001051c:	e8 b5 fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010521:	5a                   	pop    edx
c0010522:	0f b6 c0             	movzx  eax,al
c0010525:	59                   	pop    ecx
c0010526:	50                   	push   eax
c0010527:	53                   	push   ebx
c0010528:	e8 63 fe ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c001052d:	5b                   	pop    ebx
c001052e:	5a                   	pop    edx
c001052f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010536:	6a 0f                	push   0xf
c0010538:	6a 00                	push   0x0
c001053a:	e8 97 fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c001053f:	59                   	pop    ecx
c0010540:	0f b6 c0             	movzx  eax,al
c0010543:	5b                   	pop    ebx
c0010544:	50                   	push   eax
c0010545:	6a 25                	push   0x25
c0010547:	e8 44 fe ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c001054c:	5a                   	pop    edx
c001054d:	59                   	pop    ecx
c001054e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010555:	5b                   	pop    ebx
c0010556:	5e                   	pop    esi
c0010557:	c3                   	ret    

c0010558 <VgaText::updateDiskUsage()>:
c0010558:	55                   	push   ebp
c0010559:	57                   	push   edi
c001055a:	8b 3d a0 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8a0
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	bb 0a 00 00 00       	mov    ebx,0xa
c0010567:	6a 0f                	push   0xf
c0010569:	6a 00                	push   0x0
c001056b:	e8 66 fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010570:	5a                   	pop    edx
c0010571:	8b 35 a8 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002eca8
c0010577:	59                   	pop    ecx
c0010578:	0f b6 c0             	movzx  eax,al
c001057b:	b9 10 27 00 00       	mov    ecx,0x2710
c0010580:	50                   	push   eax
c0010581:	89 f0                	mov    eax,esi
c0010583:	99                   	cdq    
c0010584:	f7 f9                	idiv   ecx
c0010586:	99                   	cdq    
c0010587:	f7 fb                	idiv   ebx
c0010589:	83 c2 30             	add    edx,0x30
c001058c:	0f b6 d2             	movzx  edx,dl
c001058f:	52                   	push   edx
c0010590:	e8 fb fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c0010595:	5d                   	pop    ebp
c0010596:	5a                   	pop    edx
c0010597:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001059b:	6a 0f                	push   0xf
c001059d:	6a 00                	push   0x0
c001059f:	e8 32 fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00105a4:	59                   	pop    ecx
c00105a5:	0f b6 c0             	movzx  eax,al
c00105a8:	5d                   	pop    ebp
c00105a9:	bd e8 03 00 00       	mov    ebp,0x3e8
c00105ae:	50                   	push   eax
c00105af:	89 f0                	mov    eax,esi
c00105b1:	99                   	cdq    
c00105b2:	f7 fd                	idiv   ebp
c00105b4:	99                   	cdq    
c00105b5:	f7 fb                	idiv   ebx
c00105b7:	8d 42 30             	lea    eax,[edx+0x30]
c00105ba:	0f b6 c0             	movzx  eax,al
c00105bd:	50                   	push   eax
c00105be:	e8 cd fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c3:	5a                   	pop    edx
c00105c4:	59                   	pop    ecx
c00105c5:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00105cc:	6a 0f                	push   0xf
c00105ce:	6a 00                	push   0x0
c00105d0:	e8 01 fd ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d5:	5a                   	pop    edx
c00105d6:	0f b6 c0             	movzx  eax,al
c00105d9:	59                   	pop    ecx
c00105da:	b9 64 00 00 00       	mov    ecx,0x64
c00105df:	50                   	push   eax
c00105e0:	89 f0                	mov    eax,esi
c00105e2:	99                   	cdq    
c00105e3:	f7 f9                	idiv   ecx
c00105e5:	99                   	cdq    
c00105e6:	f7 fb                	idiv   ebx
c00105e8:	8d 42 30             	lea    eax,[edx+0x30]
c00105eb:	0f b6 c0             	movzx  eax,al
c00105ee:	50                   	push   eax
c00105ef:	e8 9c fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f4:	5a                   	pop    edx
c00105f5:	59                   	pop    ecx
c00105f6:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00105fd:	6a 0f                	push   0xf
c00105ff:	6a 00                	push   0x0
c0010601:	e8 d0 fc ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010606:	5a                   	pop    edx
c0010607:	0f b6 c0             	movzx  eax,al
c001060a:	59                   	pop    ecx
c001060b:	50                   	push   eax
c001060c:	89 f0                	mov    eax,esi
c001060e:	99                   	cdq    
c001060f:	f7 fb                	idiv   ebx
c0010611:	89 d6                	mov    esi,edx
c0010613:	99                   	cdq    
c0010614:	f7 fb                	idiv   ebx
c0010616:	8d 42 30             	lea    eax,[edx+0x30]
c0010619:	0f b6 c0             	movzx  eax,al
c001061c:	50                   	push   eax
c001061d:	e8 6e fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c0010622:	5a                   	pop    edx
c0010623:	59                   	pop    ecx
c0010624:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c001062b:	6a 0f                	push   0xf
c001062d:	6a 00                	push   0x0
c001062f:	e8 a2 fc ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010634:	5a                   	pop    edx
c0010635:	0f b6 c0             	movzx  eax,al
c0010638:	59                   	pop    ecx
c0010639:	50                   	push   eax
c001063a:	8d 46 30             	lea    eax,[esi+0x30]
c001063d:	0f b6 f0             	movzx  esi,al
c0010640:	56                   	push   esi
c0010641:	e8 4a fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c0010646:	5e                   	pop    esi
c0010647:	5a                   	pop    edx
c0010648:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001064f:	6a 0f                	push   0xf
c0010651:	6a 00                	push   0x0
c0010653:	e8 7e fc ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010658:	59                   	pop    ecx
c0010659:	0f b6 c0             	movzx  eax,al
c001065c:	5e                   	pop    esi
c001065d:	b9 10 27 00 00       	mov    ecx,0x2710
c0010662:	8b 35 a4 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002eca4
c0010668:	50                   	push   eax
c0010669:	89 f0                	mov    eax,esi
c001066b:	99                   	cdq    
c001066c:	f7 f9                	idiv   ecx
c001066e:	99                   	cdq    
c001066f:	f7 fb                	idiv   ebx
c0010671:	8d 42 30             	lea    eax,[edx+0x30]
c0010674:	0f b6 c0             	movzx  eax,al
c0010677:	50                   	push   eax
c0010678:	e8 13 fd ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c001067d:	5a                   	pop    edx
c001067e:	59                   	pop    ecx
c001067f:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010686:	6a 0f                	push   0xf
c0010688:	6a 00                	push   0x0
c001068a:	e8 47 fc ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c001068f:	5a                   	pop    edx
c0010690:	0f b6 c0             	movzx  eax,al
c0010693:	59                   	pop    ecx
c0010694:	50                   	push   eax
c0010695:	89 f0                	mov    eax,esi
c0010697:	99                   	cdq    
c0010698:	f7 fd                	idiv   ebp
c001069a:	99                   	cdq    
c001069b:	f7 fb                	idiv   ebx
c001069d:	83 c2 30             	add    edx,0x30
c00106a0:	0f b6 d2             	movzx  edx,dl
c00106a3:	52                   	push   edx
c00106a4:	e8 e7 fc ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a9:	5d                   	pop    ebp
c00106aa:	5a                   	pop    edx
c00106ab:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00106b2:	6a 0f                	push   0xf
c00106b4:	6a 00                	push   0x0
c00106b6:	e8 1b fc ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00106bb:	59                   	pop    ecx
c00106bc:	0f b6 c0             	movzx  eax,al
c00106bf:	5d                   	pop    ebp
c00106c0:	b9 64 00 00 00       	mov    ecx,0x64
c00106c5:	50                   	push   eax
c00106c6:	89 f0                	mov    eax,esi
c00106c8:	99                   	cdq    
c00106c9:	f7 f9                	idiv   ecx
c00106cb:	99                   	cdq    
c00106cc:	f7 fb                	idiv   ebx
c00106ce:	83 c2 30             	add    edx,0x30
c00106d1:	0f b6 d2             	movzx  edx,dl
c00106d4:	52                   	push   edx
c00106d5:	e8 b6 fc ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c00106da:	5a                   	pop    edx
c00106db:	59                   	pop    ecx
c00106dc:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00106e3:	6a 0f                	push   0xf
c00106e5:	6a 00                	push   0x0
c00106e7:	e8 ea fb ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ec:	5d                   	pop    ebp
c00106ed:	0f b6 c0             	movzx  eax,al
c00106f0:	5a                   	pop    edx
c00106f1:	50                   	push   eax
c00106f2:	89 f0                	mov    eax,esi
c00106f4:	99                   	cdq    
c00106f5:	f7 fb                	idiv   ebx
c00106f7:	89 d6                	mov    esi,edx
c00106f9:	99                   	cdq    
c00106fa:	f7 fb                	idiv   ebx
c00106fc:	8d 42 30             	lea    eax,[edx+0x30]
c00106ff:	0f b6 c0             	movzx  eax,al
c0010702:	50                   	push   eax
c0010703:	e8 88 fc ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c0010708:	59                   	pop    ecx
c0010709:	5b                   	pop    ebx
c001070a:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010711:	6a 0f                	push   0xf
c0010713:	6a 00                	push   0x0
c0010715:	e8 bc fb ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c001071a:	5d                   	pop    ebp
c001071b:	0f b6 c0             	movzx  eax,al
c001071e:	5a                   	pop    edx
c001071f:	50                   	push   eax
c0010720:	8d 46 30             	lea    eax,[esi+0x30]
c0010723:	0f b6 f0             	movzx  esi,al
c0010726:	56                   	push   esi
c0010727:	e8 64 fc ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c001072c:	59                   	pop    ecx
c001072d:	5b                   	pop    ebx
c001072e:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010735:	5b                   	pop    ebx
c0010736:	5e                   	pop    esi
c0010737:	5f                   	pop    edi
c0010738:	5d                   	pop    ebp
c0010739:	c3                   	ret    

c001073a <VgaText::updateTitle()>:
c001073a:	53                   	push   ebx
c001073b:	31 c0                	xor    eax,eax
c001073d:	83 ec 58             	sub    esp,0x58
c0010740:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010744:	89 e1                	mov    ecx,esp
c0010746:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001074a:	40                   	inc    eax
c001074b:	83 f8 50             	cmp    eax,0x50
c001074e:	75 f6                	jne    c0010746 <VgaText::updateTitle()+0xc>
c0010750:	31 c0                	xor    eax,eax
c0010752:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010759:	84 db                	test   bl,bl
c001075b:	74 06                	je     c0010763 <VgaText::updateTitle()+0x29>
c001075d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010760:	40                   	inc    eax
c0010761:	eb ef                	jmp    c0010752 <VgaText::updateTitle()+0x18>
c0010763:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010769:	85 c0                	test   eax,eax
c001076b:	74 09                	je     c0010776 <VgaText::updateTitle()+0x3c>
c001076d:	53                   	push   ebx
c001076e:	53                   	push   ebx
c001076f:	51                   	push   ecx
c0010770:	52                   	push   edx
c0010771:	ff d0                	call   eax
c0010773:	83 c4 10             	add    esp,0x10
c0010776:	e8 dd fd ff ff       	call   c0010558 <VgaText::updateDiskUsage()>
c001077b:	83 c4 58             	add    esp,0x58
c001077e:	5b                   	pop    ebx
c001077f:	c3                   	ret    

c0010780 <VgaText::setTitleTextColour(VgaColour)>:
c0010780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010784:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010788:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001078e:	eb aa                	jmp    c001073a <VgaText::updateTitle()>

c0010790 <VgaText::setTitleColour(VgaColour)>:
c0010790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010798:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001079e:	eb 9a                	jmp    c001073a <VgaText::updateTitle()>

c00107a0 <VgaText::setTitle(char*)>:
c00107a0:	53                   	push   ebx
c00107a1:	83 ec 10             	sub    esp,0x10
c00107a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ac:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00107b2:	50                   	push   eax
c00107b3:	e8 72 ff fe ff       	call   c000072a <strcpy>
c00107b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107bc:	83 c4 18             	add    esp,0x18
c00107bf:	5b                   	pop    ebx
c00107c0:	e9 75 ff ff ff       	jmp    c001073a <VgaText::updateTitle()>
c00107c5:	90                   	nop

c00107c6 <VgaText::decrementCursor(bool)>:
c00107c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107ce:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107d4:	85 c0                	test   eax,eax
c00107d6:	74 07                	je     c00107df <VgaText::decrementCursor(bool)+0x19>
c00107d8:	48                   	dec    eax
c00107d9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107df:	84 c9                	test   cl,cl
c00107e1:	74 09                	je     c00107ec <VgaText::decrementCursor(bool)+0x26>
c00107e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107e7:	e9 ae f9 ff ff       	jmp    c001019a <VgaText::updateCursor()>
c00107ec:	c3                   	ret    
c00107ed:	90                   	nop

c00107ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00107ee:	53                   	push   ebx
c00107ef:	83 ec 08             	sub    esp,0x8
c00107f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010802:	3c 07                	cmp    al,0x7
c0010804:	75 2a                	jne    c0010830 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010806:	a1 ec ca 02 c0       	mov    eax,ds:0xc002caec
c001080b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010813:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001081b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010827:	83 c4 08             	add    esp,0x8
c001082a:	5b                   	pop    ebx
c001082b:	e9 64 2d 00 00       	jmp    c0013594 <Buzzer::beep(int, int, bool)>
c0010830:	3c 0d                	cmp    al,0xd
c0010832:	75 0c                	jne    c0010840 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010834:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001083e:	eb 3b                	jmp    c001087b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010840:	3c 0a                	cmp    al,0xa
c0010842:	75 40                	jne    c0010884 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010844:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001084a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010854:	8d 50 01             	lea    edx,[eax+0x1]
c0010857:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001085d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010863:	75 12                	jne    c0010877 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001086e:	53                   	push   ebx
c001086f:	e8 80 fa ff ff       	call   c00102f4 <VgaText::scrollScreen()>
c0010874:	83 c4 10             	add    esp,0x10
c0010877:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001087b:	83 c4 08             	add    esp,0x8
c001087e:	5b                   	pop    ebx
c001087f:	e9 16 f9 ff ff       	jmp    c001019a <VgaText::updateCursor()>
c0010884:	3c 08                	cmp    al,0x8
c0010886:	75 31                	jne    c00108b9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010888:	50                   	push   eax
c0010889:	50                   	push   eax
c001088a:	6a 01                	push   0x1
c001088c:	53                   	push   ebx
c001088d:	e8 34 ff ff ff       	call   c00107c6 <VgaText::decrementCursor(bool)>
c0010892:	5a                   	pop    edx
c0010893:	59                   	pop    ecx
c0010894:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001089a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108a0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108a6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108ac:	6a 20                	push   0x20
c00108ae:	53                   	push   ebx
c00108af:	e8 ee fa ff ff       	call   c00103a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108b4:	83 c4 28             	add    esp,0x28
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	83 ec 08             	sub    esp,0x8
c00108bc:	0f be c0             	movsx  eax,al
c00108bf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108c5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108cb:	51                   	push   ecx
c00108cc:	52                   	push   edx
c00108cd:	50                   	push   eax
c00108ce:	53                   	push   ebx
c00108cf:	e8 ce fa ff ff       	call   c00103a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108d4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108d8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108e0:	83 c4 28             	add    esp,0x28
c00108e3:	5b                   	pop    ebx
c00108e4:	e9 87 fb ff ff       	jmp    c0010470 <VgaText::incrementCursor(bool)>
c00108e9:	90                   	nop

c00108ea <VgaText::isShowingCursor()>:
c00108ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ee:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00108f4:	c3                   	ret    
c00108f5:	90                   	nop

c00108f6 <VgaText::isBlinkDisabled()>:
c00108f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fa:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010900:	83 f0 01             	xor    eax,0x1
c0010903:	c3                   	ret    

c0010904 <VgaText::setCursorHeight(int)>:
c0010904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001090c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010912:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010919:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001091d:	e9 92 f8 ff ff       	jmp    c00101b4 <VgaText::showCursor(bool)>

c0010922 <VgaText::getCursorHeight()>:
c0010922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010926:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001092c:	c3                   	ret    

c001092d <setActiveTerminal(VgaText*)>:
c001092d:	53                   	push   ebx
c001092e:	83 ec 08             	sub    esp,0x8
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	85 db                	test   ebx,ebx
c0010937:	75 11                	jne    c001094a <setActiveTerminal(VgaText*)+0x1d>
c0010939:	c7 44 24 10 ac 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028cac
c0010941:	83 c4 08             	add    esp,0x8
c0010944:	5b                   	pop    ebx
c0010945:	e9 65 8f 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c001094a:	50                   	push   eax
c001094b:	50                   	push   eax
c001094c:	53                   	push   ebx
c001094d:	68 ba 8c 02 c0       	push   0xc0028cba
c0010952:	e8 3e 1e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0010957:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c001095c:	83 c4 10             	add    esp,0x10
c001095f:	85 c0                	test   eax,eax
c0010961:	74 0c                	je     c001096f <setActiveTerminal(VgaText*)+0x42>
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	50                   	push   eax
c0010967:	e8 2e f8 ff ff       	call   c001019a <VgaText::updateCursor()>
c001096c:	83 c4 10             	add    esp,0x10
c001096f:	89 1d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,ebx
c0010975:	51                   	push   ecx
c0010976:	51                   	push   ecx
c0010977:	53                   	push   ebx
c0010978:	68 d2 8c 02 c0       	push   0xc0028cd2
c001097d:	e8 13 1e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0010982:	83 c4 0c             	add    esp,0xc
c0010985:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001098b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010991:	53                   	push   ebx
c0010992:	e8 83 fa ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c0010997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001099a:	e8 57 ff ff ff       	call   c00108f6 <VgaText::isBlinkDisabled()>
c001099f:	5a                   	pop    edx
c00109a0:	0f b6 c0             	movzx  eax,al
c00109a3:	59                   	pop    ecx
c00109a4:	50                   	push   eax
c00109a5:	53                   	push   ebx
c00109a6:	e8 19 f8 ff ff       	call   c00101c4 <VgaText::disableBlink(bool)>
c00109ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ae:	e8 6f ff ff ff       	call   c0010922 <VgaText::getCursorHeight()>
c00109b3:	5a                   	pop    edx
c00109b4:	59                   	pop    ecx
c00109b5:	50                   	push   eax
c00109b6:	53                   	push   ebx
c00109b7:	e8 48 ff ff ff       	call   c0010904 <VgaText::setCursorHeight(int)>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109c6:	75 0a                	jne    c00109d2 <setActiveTerminal(VgaText*)+0xa5>
c00109c8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109d6:	83 c4 08             	add    esp,0x8
c00109d9:	5b                   	pop    ebx
c00109da:	e9 67 f7 ff ff       	jmp    c0010146 <VgaText::load()>

c00109df <doTerminalCycle()>:
c00109df:	83 ec 18             	sub    esp,0x18
c00109e2:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c00109e7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00109ed:	50                   	push   eax
c00109ee:	a3 40 ca 02 c0       	mov    ds:0xc002ca40,eax
c00109f3:	e8 35 ff ff ff       	call   c001092d <setActiveTerminal(VgaText*)>
c00109f8:	83 c4 1c             	add    esp,0x1c
c00109fb:	c3                   	ret    

c00109fc <VgaText::doUpdate()>:
c00109fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a00:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a06:	85 c0                	test   eax,eax
c0010a08:	74 02                	je     c0010a0c <VgaText::doUpdate()+0x10>
c0010a0a:	ff e0                	jmp    eax
c0010a0c:	c3                   	ret    
c0010a0d:	90                   	nop

c0010a0e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a0e:	55                   	push   ebp
c0010a0f:	57                   	push   edi
c0010a10:	56                   	push   esi
c0010a11:	53                   	push   ebx
c0010a12:	83 ec 1c             	sub    esp,0x1c
c0010a15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a19:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a1e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a25:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a28:	50                   	push   eax
c0010a29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a2e:	50                   	push   eax
c0010a2f:	e8 a2 f8 ff ff       	call   c00102d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a34:	59                   	pop    ecx
c0010a35:	0f b6 c0             	movzx  eax,al
c0010a38:	5b                   	pop    ebx
c0010a39:	31 c9                	xor    ecx,ecx
c0010a3b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a43:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a51:	0f b7 db             	movzx  ebx,bx
c0010a54:	01 db                	add    ebx,ebx
c0010a56:	01 fb                	add    ebx,edi
c0010a58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a5b:	84 c0                	test   al,al
c0010a5d:	0f 84 38 01 00 00    	je     c0010b9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a63:	3c 0d                	cmp    al,0xd
c0010a65:	75 0f                	jne    c0010a76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a67:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a71:	e9 1f 01 00 00       	jmp    c0010b95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a76:	3c 0a                	cmp    al,0xa
c0010a78:	75 5b                	jne    c0010ad5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a7a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a80:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a8d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010a93:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010a99:	75 12                	jne    c0010aad <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010a9b:	83 ec 0c             	sub    esp,0xc
c0010a9e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010aa4:	55                   	push   ebp
c0010aa5:	e8 4a f8 ff ff       	call   c00102f4 <VgaText::scrollScreen()>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	83 ec 0c             	sub    esp,0xc
c0010ab0:	55                   	push   ebp
c0010ab1:	e8 e4 f6 ff ff       	call   c001019a <VgaText::updateCursor()>
c0010ab6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010abe:	83 c4 10             	add    esp,0x10
c0010ac1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ac7:	31 c9                	xor    ecx,ecx
c0010ac9:	0f b7 db             	movzx  ebx,bx
c0010acc:	01 db                	add    ebx,ebx
c0010ace:	01 fb                	add    ebx,edi
c0010ad0:	e9 c0 00 00 00       	jmp    c0010b95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ad5:	3c 08                	cmp    al,0x8
c0010ad7:	75 4e                	jne    c0010b27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ad9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010add:	53                   	push   ebx
c0010ade:	53                   	push   ebx
c0010adf:	6a 01                	push   0x1
c0010ae1:	55                   	push   ebp
c0010ae2:	e8 df fc ff ff       	call   c00107c6 <VgaText::decrementCursor(bool)>
c0010ae7:	58                   	pop    eax
c0010ae8:	5a                   	pop    edx
c0010ae9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010aef:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010af5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010afb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b01:	6a 20                	push   0x20
c0010b03:	55                   	push   ebp
c0010b04:	e8 99 f8 ff ff       	call   c00103a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b09:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b11:	83 c4 20             	add    esp,0x20
c0010b14:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b1e:	0f b7 db             	movzx  ebx,bx
c0010b21:	01 db                	add    ebx,ebx
c0010b23:	01 fb                	add    ebx,edi
c0010b25:	eb 6e                	jmp    c0010b95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b27:	51                   	push   ecx
c0010b28:	51                   	push   ecx
c0010b29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b2d:	50                   	push   eax
c0010b2e:	e8 5d f8 ff ff       	call   c0010390 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b39:	39 2d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebp
c0010b3f:	75 2a                	jne    c0010b6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b41:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b47:	85 c0                	test   eax,eax
c0010b49:	74 20                	je     c0010b6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b4b:	52                   	push   edx
c0010b4c:	52                   	push   edx
c0010b4d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b53:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b61:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b64:	51                   	push   ecx
c0010b65:	55                   	push   ebp
c0010b66:	ff d0                	call   eax
c0010b68:	83 c4 20             	add    esp,0x20
c0010b6b:	83 c3 02             	add    ebx,0x2
c0010b6e:	50                   	push   eax
c0010b6f:	50                   	push   eax
c0010b70:	6a 00                	push   0x0
c0010b72:	55                   	push   ebp
c0010b73:	e8 f8 f8 ff ff       	call   c0010470 <VgaText::incrementCursor(bool)>
c0010b78:	83 c4 10             	add    esp,0x10
c0010b7b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b82:	75 0f                	jne    c0010b93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b84:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b8c:	0f b7 db             	movzx  ebx,bx
c0010b8f:	01 db                	add    ebx,ebx
c0010b91:	01 fb                	add    ebx,edi
c0010b93:	b1 01                	mov    cl,0x1
c0010b95:	46                   	inc    esi
c0010b96:	e9 bd fe ff ff       	jmp    c0010a58 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010b9b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010b9f:	83 ec 0c             	sub    esp,0xc
c0010ba2:	55                   	push   ebp
c0010ba3:	e8 f2 f5 ff ff       	call   c001019a <VgaText::updateCursor()>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010baf:	84 c9                	test   cl,cl
c0010bb1:	74 0c                	je     c0010bbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010bb3:	83 ec 0c             	sub    esp,0xc
c0010bb6:	55                   	push   ebp
c0010bb7:	e8 40 fe ff ff       	call   c00109fc <VgaText::doUpdate()>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010bc6:	83 c4 1c             	add    esp,0x1c
c0010bc9:	5b                   	pop    ebx
c0010bca:	5e                   	pop    esi
c0010bcb:	5f                   	pop    edi
c0010bcc:	5d                   	pop    ebp
c0010bcd:	c3                   	ret    

c0010bce <VgaText::clearScreen()>:
c0010bce:	57                   	push   edi
c0010bcf:	56                   	push   esi
c0010bd0:	31 f6                	xor    esi,esi
c0010bd2:	53                   	push   ebx
c0010bd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bd7:	52                   	push   edx
c0010bd8:	6a 00                	push   0x0
c0010bda:	6a 00                	push   0x0
c0010bdc:	53                   	push   ebx
c0010bdd:	e8 38 f8 ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c0010be2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010be9:	83 c4 10             	add    esp,0x10
c0010bec:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010bf2:	7e 26                	jle    c0010c1a <VgaText::clearScreen()+0x4c>
c0010bf4:	31 ff                	xor    edi,edi
c0010bf6:	50                   	push   eax
c0010bf7:	50                   	push   eax
c0010bf8:	56                   	push   esi
c0010bf9:	57                   	push   edi
c0010bfa:	47                   	inc    edi
c0010bfb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c01:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c07:	6a 20                	push   0x20
c0010c09:	53                   	push   ebx
c0010c0a:	e8 93 f7 ff ff       	call   c00103a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c0f:	83 c4 20             	add    esp,0x20
c0010c12:	83 ff 50             	cmp    edi,0x50
c0010c15:	75 df                	jne    c0010bf6 <VgaText::clearScreen()+0x28>
c0010c17:	46                   	inc    esi
c0010c18:	eb d2                	jmp    c0010bec <VgaText::clearScreen()+0x1e>
c0010c1a:	83 ec 0c             	sub    esp,0xc
c0010c1d:	53                   	push   ebx
c0010c1e:	e8 d9 fd ff ff       	call   c00109fc <VgaText::doUpdate()>
c0010c23:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	5b                   	pop    ebx
c0010c2e:	5e                   	pop    esi
c0010c2f:	5f                   	pop    edi
c0010c30:	c3                   	ret    
c0010c31:	90                   	nop

c0010c32 <VgaText::putchar(char)>:
c0010c32:	56                   	push   esi
c0010c33:	53                   	push   ebx
c0010c34:	83 ec 14             	sub    esp,0x14
c0010c37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c3f:	3c 5b                	cmp    al,0x5b
c0010c41:	75 21                	jne    c0010c64 <VgaText::putchar(char)+0x32>
c0010c43:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c4a:	74 28                	je     c0010c74 <VgaText::putchar(char)+0x42>
c0010c4c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c55:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c5f:	e9 e2 00 00 00       	jmp    c0010d46 <VgaText::putchar(char)+0x114>
c0010c64:	3c 1b                	cmp    al,0x1b
c0010c66:	75 0c                	jne    c0010c74 <VgaText::putchar(char)+0x42>
c0010c68:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c6f:	e9 d2 00 00 00       	jmp    c0010d46 <VgaText::putchar(char)+0x114>
c0010c74:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c7a:	84 c9                	test   cl,cl
c0010c7c:	0f 84 ab 00 00 00    	je     c0010d2d <VgaText::putchar(char)+0xfb>
c0010c82:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c85:	80 fa 3e             	cmp    dl,0x3e
c0010c88:	0f 87 82 00 00 00    	ja     c0010d10 <VgaText::putchar(char)+0xde>
c0010c8e:	3c 6d                	cmp    al,0x6d
c0010c90:	75 4d                	jne    c0010cdf <VgaText::putchar(char)+0xad>
c0010c92:	31 f6                	xor    esi,esi
c0010c94:	31 d2                	xor    edx,edx
c0010c96:	31 c0                	xor    eax,eax
c0010c98:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010c9e:	7e 30                	jle    c0010cd0 <VgaText::putchar(char)+0x9e>
c0010ca0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010ca8:	80 fa 3b             	cmp    dl,0x3b
c0010cab:	75 17                	jne    c0010cc4 <VgaText::putchar(char)+0x92>
c0010cad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010cb1:	50                   	push   eax
c0010cb2:	53                   	push   ebx
c0010cb3:	e8 46 f5 ff ff       	call   c00101fe <VgaText::doANSI_SGR(int)>
c0010cb8:	59                   	pop    ecx
c0010cb9:	31 d2                	xor    edx,edx
c0010cbb:	58                   	pop    eax
c0010cbc:	31 c0                	xor    eax,eax
c0010cbe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cc2:	eb 09                	jmp    c0010ccd <VgaText::putchar(char)+0x9b>
c0010cc4:	6b c0 0a             	imul   eax,eax,0xa
c0010cc7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010ccb:	88 ca                	mov    dl,cl
c0010ccd:	46                   	inc    esi
c0010cce:	eb c8                	jmp    c0010c98 <VgaText::putchar(char)+0x66>
c0010cd0:	84 d2                	test   dl,dl
c0010cd2:	74 31                	je     c0010d05 <VgaText::putchar(char)+0xd3>
c0010cd4:	50                   	push   eax
c0010cd5:	53                   	push   ebx
c0010cd6:	e8 23 f5 ff ff       	call   c00101fe <VgaText::doANSI_SGR(int)>
c0010cdb:	58                   	pop    eax
c0010cdc:	5a                   	pop    edx
c0010cdd:	eb 26                	jmp    c0010d05 <VgaText::putchar(char)+0xd3>
c0010cdf:	3c 4a                	cmp    al,0x4a
c0010ce1:	75 22                	jne    c0010d05 <VgaText::putchar(char)+0xd3>
c0010ce3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010cea:	75 19                	jne    c0010d05 <VgaText::putchar(char)+0xd3>
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	53                   	push   ebx
c0010cf0:	e8 d9 fe ff ff       	call   c0010bce <VgaText::clearScreen()>
c0010cf5:	83 c4 0c             	add    esp,0xc
c0010cf8:	6a 00                	push   0x0
c0010cfa:	6a 00                	push   0x0
c0010cfc:	53                   	push   ebx
c0010cfd:	e8 18 f7 ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d0e:	eb 36                	jmp    c0010d46 <VgaText::putchar(char)+0x114>
c0010d10:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d16:	83 fa 0e             	cmp    edx,0xe
c0010d19:	7f 2b                	jg     c0010d46 <VgaText::putchar(char)+0x114>
c0010d1b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d1e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d24:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d2b:	eb 19                	jmp    c0010d46 <VgaText::putchar(char)+0x114>
c0010d2d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d33:	0f be c0             	movsx  eax,al
c0010d36:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d3c:	50                   	push   eax
c0010d3d:	53                   	push   ebx
c0010d3e:	e8 ab fa ff ff       	call   c00107ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	83 c4 14             	add    esp,0x14
c0010d49:	5b                   	pop    ebx
c0010d4a:	5e                   	pop    esi
c0010d4b:	c3                   	ret    

c0010d4c <VgaText::puts(char const*)>:
c0010d4c:	53                   	push   ebx
c0010d4d:	83 ec 08             	sub    esp,0x8
c0010d50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d54:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d57:	84 c0                	test   al,al
c0010d59:	74 12                	je     c0010d6d <VgaText::puts(char const*)+0x21>
c0010d5b:	43                   	inc    ebx
c0010d5c:	51                   	push   ecx
c0010d5d:	51                   	push   ecx
c0010d5e:	50                   	push   eax
c0010d5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d63:	e8 ca fe ff ff       	call   c0010c32 <VgaText::putchar(char)>
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	eb e7                	jmp    c0010d54 <VgaText::puts(char const*)+0x8>
c0010d6d:	83 c4 08             	add    esp,0x8
c0010d70:	5b                   	pop    ebx
c0010d71:	c3                   	ret    

c0010d72 <VgaText::putx(unsigned int)>:
c0010d72:	57                   	push   edi
c0010d73:	b9 11 00 00 00       	mov    ecx,0x11
c0010d78:	56                   	push   esi
c0010d79:	be ee 8c 02 c0       	mov    esi,0xc0028cee
c0010d7e:	53                   	push   ebx
c0010d7f:	83 ec 20             	sub    esp,0x20
c0010d82:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d86:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d8a:	fc                   	cld    
c0010d8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d8d:	be 08 00 00 00       	mov    esi,0x8
c0010d92:	50                   	push   eax
c0010d93:	50                   	push   eax
c0010d94:	89 d8                	mov    eax,ebx
c0010d96:	c1 e3 04             	shl    ebx,0x4
c0010d99:	c1 e8 1c             	shr    eax,0x1c
c0010d9c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010da1:	50                   	push   eax
c0010da2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010da6:	e8 87 fe ff ff       	call   c0010c32 <VgaText::putchar(char)>
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	4e                   	dec    esi
c0010daf:	75 e1                	jne    c0010d92 <VgaText::putx(unsigned int)+0x20>
c0010db1:	83 c4 20             	add    esp,0x20
c0010db4:	5b                   	pop    ebx
c0010db5:	5e                   	pop    esi
c0010db6:	5f                   	pop    edi
c0010db7:	c3                   	ret    

c0010db8 <VgaText::VgaText(char const*)>:
c0010db8:	57                   	push   edi
c0010db9:	56                   	push   esi
c0010dba:	53                   	push   ebx
c0010dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbf:	83 ec 08             	sub    esp,0x8
c0010dc2:	6a 00                	push   0x0
c0010dc4:	50                   	push   eax
c0010dc5:	e8 98 05 00 00       	call   c0011362 <UnixFile::UnixFile(int)>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c0010dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd6:	89 10                	mov    DWORD PTR [eax],edx
c0010dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddc:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e03:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e1c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e35:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e3c:	b8 10 04 00 00       	mov    eax,0x410
c0010e41:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e44:	0f b7 c0             	movzx  eax,ax
c0010e47:	83 e0 30             	and    eax,0x30
c0010e4a:	83 f8 30             	cmp    eax,0x30
c0010e4d:	74 16                	je     c0010e65 <VgaText::VgaText(char const*)+0xad>
c0010e4f:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c0010e54:	2d 00 80 00 00       	sub    eax,0x8000
c0010e59:	a3 a0 b8 02 c0       	mov    ds:0xc002b8a0,eax
c0010e5e:	c6 05 00 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca00,0x1
c0010e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e69:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e6f:	bb 20 ca 02 c0       	mov    ebx,0xc002ca20
c0010e74:	b8 08 00 00 00       	mov    eax,0x8
c0010e79:	fc                   	cld    
c0010e7a:	89 d7                	mov    edi,edx
c0010e7c:	89 de                	mov    esi,ebx
c0010e7e:	89 c1                	mov    ecx,eax
c0010e80:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e86:	05 1e 10 00 00       	add    eax,0x101e
c0010e8b:	83 ec 08             	sub    esp,0x8
c0010e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e92:	50                   	push   eax
c0010e93:	e8 92 f8 fe ff       	call   c000072a <strcpy>
c0010e98:	83 c4 10             	add    esp,0x10
c0010e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9f:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ead:	83 c0 0c             	add    eax,0xc
c0010eb0:	83 ec 04             	sub    esp,0x4
c0010eb3:	68 00 0f 00 00       	push   0xf00
c0010eb8:	6a 00                	push   0x0
c0010eba:	50                   	push   eax
c0010ebb:	e8 cb f7 fe ff       	call   c000068b <memset>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	83 ec 04             	sub    esp,0x4
c0010ec6:	6a 00                	push   0x0
c0010ec8:	6a 07                	push   0x7
c0010eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ece:	e8 e3 f3 ff ff       	call   c00102b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ed3:	83 c4 10             	add    esp,0x10
c0010ed6:	83 ec 08             	sub    esp,0x8
c0010ed9:	6a 02                	push   0x2
c0010edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010edf:	e8 20 fa ff ff       	call   c0010904 <VgaText::setCursorHeight(int)>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	83 ec 04             	sub    esp,0x4
c0010eea:	6a 00                	push   0x0
c0010eec:	6a 00                	push   0x0
c0010eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef2:	e8 23 f5 ff ff       	call   c001041a <VgaText::setCursor(int, int)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	83 ec 08             	sub    esp,0x8
c0010efd:	6a 01                	push   0x1
c0010eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f03:	e8 ac f2 ff ff       	call   c00101b4 <VgaText::showCursor(bool)>
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	83 ec 08             	sub    esp,0x8
c0010f0e:	6a 01                	push   0x1
c0010f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f14:	e8 ab f2 ff ff       	call   c00101c4 <VgaText::disableBlink(bool)>
c0010f19:	83 c4 10             	add    esp,0x10
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f23:	e8 a6 fc ff ff       	call   c0010bce <VgaText::clearScreen()>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2f:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3a:	05 9e 10 00 00       	add    eax,0x109e
c0010f3f:	83 ec 04             	sub    esp,0x4
c0010f42:	68 96 00 00 00       	push   0x96
c0010f47:	6a 00                	push   0x0
c0010f49:	50                   	push   eax
c0010f4a:	e8 3c f7 fe ff       	call   c000068b <memset>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f56:	05 34 11 00 00       	add    eax,0x1134
c0010f5b:	83 ec 04             	sub    esp,0x4
c0010f5e:	68 2c 01 00 00       	push   0x12c
c0010f63:	6a 00                	push   0x0
c0010f65:	50                   	push   eax
c0010f66:	e8 20 f7 fe ff       	call   c000068b <memset>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	90                   	nop
c0010f6f:	5b                   	pop    ebx
c0010f70:	5e                   	pop    esi
c0010f71:	5f                   	pop    edi
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <VgaText::receiveKey(unsigned char)>:
c0010f74:	55                   	push   ebp
c0010f75:	57                   	push   edi
c0010f76:	56                   	push   esi
c0010f77:	53                   	push   ebx
c0010f78:	83 ec 1c             	sub    esp,0x1c
c0010f7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f83:	84 db                	test   bl,bl
c0010f85:	0f 84 c9 00 00 00    	je     c0011054 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f8b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f91:	80 fb 08             	cmp    bl,0x8
c0010f94:	75 2c                	jne    c0010fc2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010f96:	83 ec 0c             	sub    esp,0xc
c0010f99:	57                   	push   edi
c0010f9a:	e8 09 f7 fe ff       	call   c00006a8 <strlen>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	85 c0                	test   eax,eax
c0010fa4:	74 41                	je     c0010fe7 <VgaText::receiveKey(unsigned char)+0x73>
c0010fa6:	50                   	push   eax
c0010fa7:	50                   	push   eax
c0010fa8:	6a 08                	push   0x8
c0010faa:	56                   	push   esi
c0010fab:	e8 82 fc ff ff       	call   c0010c32 <VgaText::putchar(char)>
c0010fb0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010fb3:	e8 f0 f6 fe ff       	call   c00006a8 <strlen>
c0010fb8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010fc0:	eb 22                	jmp    c0010fe4 <VgaText::receiveKey(unsigned char)+0x70>
c0010fc2:	0f be c3             	movsx  eax,bl
c0010fc5:	52                   	push   edx
c0010fc6:	52                   	push   edx
c0010fc7:	50                   	push   eax
c0010fc8:	56                   	push   esi
c0010fc9:	e8 64 fc ff ff       	call   c0010c32 <VgaText::putchar(char)>
c0010fce:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fd7:	59                   	pop    ecx
c0010fd8:	5d                   	pop    ebp
c0010fd9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fdd:	50                   	push   eax
c0010fde:	57                   	push   edi
c0010fdf:	e8 fd f7 fe ff       	call   c00007e1 <strcat>
c0010fe4:	83 c4 10             	add    esp,0x10
c0010fe7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fee:	75 05                	jne    c0010ff5 <VgaText::receiveKey(unsigned char)+0x81>
c0010ff0:	80 fb 0a             	cmp    bl,0xa
c0010ff3:	75 53                	jne    c0011048 <VgaText::receiveKey(unsigned char)+0xd4>
c0010ff5:	83 ec 0c             	sub    esp,0xc
c0010ff8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ffe:	53                   	push   ebx
c0010fff:	e8 a4 f6 fe ff       	call   c00006a8 <strlen>
c0011004:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011007:	89 c5                	mov    ebp,eax
c0011009:	e8 9a f6 fe ff       	call   c00006a8 <strlen>
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011015:	3d 2c 01 00 00       	cmp    eax,0x12c
c001101a:	76 10                	jbe    c001102c <VgaText::receiveKey(unsigned char)+0xb8>
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	68 ff 8c 02 c0       	push   0xc0028cff
c0011024:	e8 86 88 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	50                   	push   eax
c001102d:	50                   	push   eax
c001102e:	57                   	push   edi
c001102f:	53                   	push   ebx
c0011030:	e8 ac f7 fe ff       	call   c00007e1 <strcat>
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	68 96 00 00 00       	push   0x96
c001103d:	6a 00                	push   0x0
c001103f:	57                   	push   edi
c0011040:	e8 46 f6 fe ff       	call   c000068b <memset>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	56                   	push   esi
c001104c:	e8 ab f9 ff ff       	call   c00109fc <VgaText::doUpdate()>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	83 c4 1c             	add    esp,0x1c
c0011057:	5b                   	pop    ebx
c0011058:	5e                   	pop    esi
c0011059:	5f                   	pop    edi
c001105a:	5d                   	pop    ebp
c001105b:	c3                   	ret    

c001105c <VgaText::write(unsigned long long, void*, int*)>:
c001105c:	55                   	push   ebp
c001105d:	57                   	push   edi
c001105e:	56                   	push   esi
c001105f:	53                   	push   ebx
c0011060:	83 ec 0c             	sub    esp,0xc
c0011063:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011067:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001106b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001106f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011076:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011079:	39 eb                	cmp    ebx,ebp
c001107b:	74 13                	je     c0011090 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001107d:	43                   	inc    ebx
c001107e:	50                   	push   eax
c001107f:	50                   	push   eax
c0011080:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011084:	50                   	push   eax
c0011085:	56                   	push   esi
c0011086:	e8 a7 fb ff ff       	call   c0010c32 <VgaText::putchar(char)>
c001108b:	83 c4 10             	add    esp,0x10
c001108e:	eb e9                	jmp    c0011079 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001109a:	56                   	push   esi
c001109b:	e8 5c f9 ff ff       	call   c00109fc <VgaText::doUpdate()>
c00110a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00110a4:	89 38                	mov    DWORD PTR [eax],edi
c00110a6:	83 c4 1c             	add    esp,0x1c
c00110a9:	31 c0                	xor    eax,eax
c00110ab:	5b                   	pop    ebx
c00110ac:	5e                   	pop    esi
c00110ad:	5f                   	pop    edi
c00110ae:	5d                   	pop    ebp
c00110af:	c3                   	ret    

c00110b0 <newTerminal(char*)>:
c00110b0:	83 ec 28             	sub    esp,0x28
c00110b3:	68 60 12 00 00       	push   0x1260
c00110b8:	e8 17 e4 ff ff       	call   c000f4d4 <malloc>
c00110bd:	5a                   	pop    edx
c00110be:	59                   	pop    ecx
c00110bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110c3:	50                   	push   eax
c00110c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110c8:	e8 eb fc ff ff       	call   c0010db8 <VgaText::VgaText(char const*)>
c00110cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110d1:	83 c4 2c             	add    esp,0x2c
c00110d4:	c3                   	ret    
c00110d5:	90                   	nop

c00110d6 <TSS::TSS()>:
c00110d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110e1:	90                   	nop
c00110e2:	c3                   	ret    
c00110e3:	90                   	nop

c00110e4 <TSS::setESP(unsigned long)>:
c00110e4:	55                   	push   ebp
c00110e5:	89 e5                	mov    ebp,esp
c00110e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110f3:	90                   	nop
c00110f4:	5d                   	pop    ebp
c00110f5:	c3                   	ret    

c00110f6 <TSS::flush()>:
c00110f6:	55                   	push   ebp
c00110f7:	89 e5                	mov    ebp,esp
c00110f9:	83 ec 10             	sub    esp,0x10
c00110fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011101:	83 c8 03             	or     eax,0x3
c0011104:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011108:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001110c:	66 89 d0             	mov    ax,dx
c001110f:	0f 00 d8             	ltr    ax
c0011112:	90                   	nop
c0011113:	c9                   	leave  
c0011114:	c3                   	ret    
c0011115:	90                   	nop

c0011116 <TSS::setup(unsigned long, unsigned long)>:
c0011116:	55                   	push   ebp
c0011117:	89 e5                	mov    ebp,esp
c0011119:	83 ec 18             	sub    esp,0x18
c001111c:	83 ec 0c             	sub    esp,0xc
c001111f:	6a 68                	push   0x68
c0011121:	e8 ae e3 ff ff       	call   c000f4d4 <malloc>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	89 c2                	mov    edx,eax
c001112b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011137:	83 ec 04             	sub    esp,0x4
c001113a:	6a 68                	push   0x68
c001113c:	6a 00                	push   0x0
c001113e:	50                   	push   eax
c001113f:	e8 47 f5 fe ff       	call   c000068b <memset>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001114a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001114d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011159:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001115f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011165:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011168:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001116b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001116e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011171:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001117d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011189:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001118f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011195:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001119b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001119e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00111a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ad:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00111b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111de:	0f 20 da             	mov    edx,cr3
c00111e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111e7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f0:	83 ec 08             	sub    esp,0x8
c00111f3:	50                   	push   eax
c00111f4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111f7:	50                   	push   eax
c00111f8:	e8 b5 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	83 ec 08             	sub    esp,0x8
c0011203:	6a 68                	push   0x68
c0011205:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011208:	50                   	push   eax
c0011209:	e8 c0 da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c001120e:	83 c4 10             	add    esp,0x10
c0011211:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011215:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011218:	83 e0 0f             	and    eax,0xf
c001121b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001121e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011221:	83 c8 40             	or     eax,0x40
c0011224:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011227:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001122c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011232:	05 78 01 00 00       	add    eax,0x178
c0011237:	83 ec 04             	sub    esp,0x4
c001123a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001123d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011240:	50                   	push   eax
c0011241:	e8 bc da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011246:	83 c4 10             	add    esp,0x10
c0011249:	89 c2                	mov    edx,eax
c001124b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001124e:	89 10                	mov    DWORD PTR [eax],edx
c0011250:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011255:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001125b:	05 78 01 00 00       	add    eax,0x178
c0011260:	83 ec 0c             	sub    esp,0xc
c0011263:	50                   	push   eax
c0011264:	e8 dd da ff ff       	call   c000ed46 <GDT::flush()>
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001126f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011271:	83 ec 08             	sub    esp,0x8
c0011274:	50                   	push   eax
c0011275:	68 68 8d 02 c0       	push   0xc0028d68
c001127a:	e8 16 15 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011285:	8b 00                	mov    eax,DWORD PTR [eax]
c0011287:	c9                   	leave  
c0011288:	c3                   	ret    
c0011289:	90                   	nop

c001128a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001128a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001128e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011295:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001129a:	75 08                	jne    c00112a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001129c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00112a2:	eb 38                	jmp    c00112dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00112a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00112a9:	75 17                	jne    c00112c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00112ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00112bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112c2:	89 c1                	mov    ecx,eax
c00112c4:	83 e1 fd             	and    ecx,0xfffffffd
c00112c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112cd:	74 cd                	je     c001129c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112d4:	83 e0 ef             	and    eax,0xffffffef
c00112d7:	83 f8 08             	cmp    eax,0x8
c00112da:	76 c0                	jbe    c001129c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112dc:	31 c0                	xor    eax,eax
c00112de:	c3                   	ret    
c00112df:	90                   	nop

c00112e0 <ReservedFilename::isAtty()>:
c00112e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112e7:	31 c0                	xor    eax,eax
c00112e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112ef:	74 09                	je     c00112fa <ReservedFilename::isAtty()+0x1a>
c00112f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112f7:	0f 94 c0             	sete   al
c00112fa:	c3                   	ret    
c00112fb:	90                   	nop

c00112fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011300:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011304:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011307:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001130b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011310:	75 08                	jne    c001131a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011312:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011318:	eb 3d                	jmp    c0011357 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001131a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001131f:	75 17                	jne    c0011338 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011326:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011329:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001132f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011331:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011335:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011338:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001133d:	75 04                	jne    c0011343 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001133f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011341:	eb 14                	jmp    c0011357 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011343:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011348:	74 c8                	je     c0011312 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001134a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001134f:	83 e0 ef             	and    eax,0xffffffef
c0011352:	83 f8 08             	cmp    eax,0x8
c0011355:	76 bb                	jbe    c0011312 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011357:	31 c0                	xor    eax,eax
c0011359:	c3                   	ret    

c001135a <UnixFile::getFileDescriptor()>:
c001135a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001135e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011361:	c3                   	ret    

c0011362 <UnixFile::UnixFile(int)>:
c0011362:	53                   	push   ebx
c0011363:	83 ec 28             	sub    esp,0x28
c0011366:	ba 54 8e 02 c0       	mov    edx,0xc0028e54
c001136b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001136f:	89 10                	mov    DWORD PTR [eax],edx
c0011371:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011379:	0f 8f 8c 01 00 00    	jg     c001150b <UnixFile::UnixFile(int)+0x1a9>
c001137f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011384:	8d 50 01             	lea    edx,[eax+0x1]
c0011387:	89 15 00 b9 02 c0    	mov    DWORD PTR ds:0xc002b900,edx
c001138d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011391:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001139b:	68 d8 ca 02 c0       	push   0xc002cad8
c00113a0:	e8 9b 5d 01 00       	call   c0027140 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00113a5:	83 c4 10             	add    esp,0x10
c00113a8:	a0 d4 ca 02 c0       	mov    al,ds:0xc002cad4
c00113ad:	83 f0 01             	xor    eax,0x1
c00113b0:	84 c0                	test   al,al
c00113b2:	0f 84 54 01 00 00    	je     c001150c <UnixFile::UnixFile(int)+0x1aa>
c00113b8:	c6 05 d4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cad4,0x1
c00113bf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ce:	e8 01 e1 ff ff       	call   c000f4d4 <malloc>
c00113d3:	83 c4 10             	add    esp,0x10
c00113d6:	89 c3                	mov    ebx,eax
c00113d8:	83 ec 08             	sub    esp,0x8
c00113db:	68 03 ff ff 0f       	push   0xfffff03
c00113e0:	53                   	push   ebx
c00113e1:	e8 2c 01 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	89 1d cc ca 02 c0    	mov    DWORD PTR ds:0xc002cacc,ebx
c00113ef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113f7:	83 ec 0c             	sub    esp,0xc
c00113fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113fe:	e8 d1 e0 ff ff       	call   c000f4d4 <malloc>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	89 c3                	mov    ebx,eax
c0011408:	83 ec 08             	sub    esp,0x8
c001140b:	68 01 ff ff 0f       	push   0xfffff01
c0011410:	53                   	push   ebx
c0011411:	e8 fc 00 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	89 1d d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,ebx
c001141f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011427:	83 ec 0c             	sub    esp,0xc
c001142a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001142e:	e8 a1 e0 ff ff       	call   c000f4d4 <malloc>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	89 c3                	mov    ebx,eax
c0011438:	83 ec 08             	sub    esp,0x8
c001143b:	68 00 ff ff 0f       	push   0xfffff00
c0011440:	53                   	push   ebx
c0011441:	e8 cc 00 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c0011446:	83 c4 10             	add    esp,0x10
c0011449:	89 1d c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,ebx
c001144f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011457:	83 ec 0c             	sub    esp,0xc
c001145a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001145e:	e8 71 e0 ff ff       	call   c000f4d4 <malloc>
c0011463:	83 c4 10             	add    esp,0x10
c0011466:	89 c3                	mov    ebx,eax
c0011468:	83 ec 08             	sub    esp,0x8
c001146b:	68 02 ff ff 0f       	push   0xfffff02
c0011470:	53                   	push   ebx
c0011471:	e8 9c 00 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	89 1d c8 ca 02 c0    	mov    DWORD PTR ds:0xc002cac8,ebx
c001147f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011487:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001148c:	7f 7e                	jg     c001150c <UnixFile::UnixFile(int)+0x1aa>
c001148e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001149d:	e8 32 e0 ff ff       	call   c000f4d4 <malloc>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	89 c3                	mov    ebx,eax
c00114a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ab:	05 10 ff ff 0f       	add    eax,0xfffff10
c00114b0:	83 ec 08             	sub    esp,0x8
c00114b3:	50                   	push   eax
c00114b4:	53                   	push   ebx
c00114b5:	e8 58 00 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114c1:	89 1c 85 a0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3560],ebx
c00114c8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114d0:	83 ec 0c             	sub    esp,0xc
c00114d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114d7:	e8 f8 df ff ff       	call   c000f4d4 <malloc>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	89 c3                	mov    ebx,eax
c00114e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114ea:	83 ec 08             	sub    esp,0x8
c00114ed:	50                   	push   eax
c00114ee:	53                   	push   ebx
c00114ef:	e8 1e 00 00 00       	call   c0011512 <ReservedFilename::ReservedFilename(int)>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114fb:	89 1c 85 60 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd35a0],ebx
c0011502:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011506:	e9 7c ff ff ff       	jmp    c0011487 <UnixFile::UnixFile(int)+0x125>
c001150b:	90                   	nop
c001150c:	83 c4 28             	add    esp,0x28
c001150f:	5b                   	pop    ebx
c0011510:	c3                   	ret    
c0011511:	90                   	nop

c0011512 <ReservedFilename::ReservedFilename(int)>:
c0011512:	83 ec 0c             	sub    esp,0xc
c0011515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011519:	83 ec 08             	sub    esp,0x8
c001151c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011520:	50                   	push   eax
c0011521:	e8 3c fe ff ff       	call   c0011362 <UnixFile::UnixFile(int)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	ba 70 8e 02 c0       	mov    edx,0xc0028e70
c001152e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011532:	89 10                	mov    DWORD PTR [eax],edx
c0011534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011538:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001153c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001153f:	90                   	nop
c0011540:	83 c4 0c             	add    esp,0xc
c0011543:	c3                   	ret    

c0011544 <UnixFile::~UnixFile()>:
c0011544:	83 ec 1c             	sub    esp,0x1c
c0011547:	ba 54 8e 02 c0       	mov    edx,0xc0028e54
c001154c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011550:	89 10                	mov    DWORD PTR [eax],edx
c0011552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011559:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001155e:	7f 73                	jg     c00115d3 <UnixFile::~UnixFile()+0x8f>
c0011560:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	68 d8 ca 02 c0       	push   0xc002cad8
c0011570:	e8 9f 5c 01 00       	call   c0027214 <LinkedList<UnixFile>::getFirstElement()>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001157c:	83 ec 0c             	sub    esp,0xc
c001157f:	68 d8 ca 02 c0       	push   0xc002cad8
c0011584:	e8 93 5c 01 00       	call   c002721c <LinkedList<UnixFile>::removeFirst()>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011590:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011594:	74 40                	je     c00115d6 <UnixFile::~UnixFile()+0x92>
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001159d:	68 d8 ca 02 c0       	push   0xc002cad8
c00115a2:	e8 99 5b 01 00       	call   c0027140 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ae:	8d 50 01             	lea    edx,[eax+0x1]
c00115b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00115ba:	0f 94 c0             	sete   al
c00115bd:	84 c0                	test   al,al
c00115bf:	74 a7                	je     c0011568 <UnixFile::~UnixFile()+0x24>
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	68 2c 8e 02 c0       	push   0xc0028e2c
c00115c9:	e8 e1 82 00 00       	call   c00198af <Krnl::panic(char const*)>
c00115ce:	83 c4 10             	add    esp,0x10
c00115d1:	eb 95                	jmp    c0011568 <UnixFile::~UnixFile()+0x24>
c00115d3:	90                   	nop
c00115d4:	eb 01                	jmp    c00115d7 <UnixFile::~UnixFile()+0x93>
c00115d6:	90                   	nop
c00115d7:	90                   	nop
c00115d8:	83 c4 1c             	add    esp,0x1c
c00115db:	c3                   	ret    

c00115dc <UnixFile::~UnixFile()>:
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e6:	e8 59 ff ff ff       	call   c0011544 <UnixFile::~UnixFile()>
c00115eb:	83 c4 10             	add    esp,0x10
c00115ee:	83 ec 08             	sub    esp,0x8
c00115f1:	6a 0c                	push   0xc
c00115f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f7:	e8 b9 10 00 00       	call   c00126b5 <operator delete(void*, unsigned long)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	83 c4 0c             	add    esp,0xc
c0011602:	c3                   	ret    
c0011603:	90                   	nop

c0011604 <ReservedFilename::~ReservedFilename()>:
c0011604:	83 ec 0c             	sub    esp,0xc
c0011607:	ba 70 8e 02 c0       	mov    edx,0xc0028e70
c001160c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011610:	89 10                	mov    DWORD PTR [eax],edx
c0011612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011616:	83 ec 0c             	sub    esp,0xc
c0011619:	50                   	push   eax
c001161a:	e8 25 ff ff ff       	call   c0011544 <UnixFile::~UnixFile()>
c001161f:	83 c4 10             	add    esp,0x10
c0011622:	90                   	nop
c0011623:	83 c4 0c             	add    esp,0xc
c0011626:	c3                   	ret    
c0011627:	90                   	nop

c0011628 <ReservedFilename::~ReservedFilename()>:
c0011628:	83 ec 0c             	sub    esp,0xc
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011632:	e8 cd ff ff ff       	call   c0011604 <ReservedFilename::~ReservedFilename()>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	83 ec 08             	sub    esp,0x8
c001163d:	6a 0c                	push   0xc
c001163f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011643:	e8 6d 10 00 00       	call   c00126b5 <operator delete(void*, unsigned long)>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	83 c4 0c             	add    esp,0xc
c001164e:	c3                   	ret    

c001164f <getFromFileDescriptor(int)>:
c001164f:	53                   	push   ebx
c0011650:	83 ec 08             	sub    esp,0x8
c0011653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011657:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001165d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011663:	7f 2c                	jg     c0011691 <getFromFileDescriptor(int)+0x42>
c0011665:	83 ec 0c             	sub    esp,0xc
c0011668:	68 d8 ca 02 c0       	push   0xc002cad8
c001166d:	e8 a2 5b 01 00       	call   c0027214 <LinkedList<UnixFile>::getFirstElement()>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	85 c0                	test   eax,eax
c0011677:	75 04                	jne    c001167d <getFromFileDescriptor(int)+0x2e>
c0011679:	31 c0                	xor    eax,eax
c001167b:	eb 6e                	jmp    c00116eb <getFromFileDescriptor(int)+0x9c>
c001167d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011680:	74 69                	je     c00116eb <getFromFileDescriptor(int)+0x9c>
c0011682:	52                   	push   edx
c0011683:	52                   	push   edx
c0011684:	50                   	push   eax
c0011685:	68 d8 ca 02 c0       	push   0xc002cad8
c001168a:	e8 2f 5c 01 00       	call   c00272be <LinkedList<UnixFile>::getNext(UnixFile*)>
c001168f:	eb e1                	jmp    c0011672 <getFromFileDescriptor(int)+0x23>
c0011691:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0011696:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001169c:	74 4d                	je     c00116eb <getFromFileDescriptor(int)+0x9c>
c001169e:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c00116a3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00116a9:	74 40                	je     c00116eb <getFromFileDescriptor(int)+0x9c>
c00116ab:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c00116b0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00116b6:	74 33                	je     c00116eb <getFromFileDescriptor(int)+0x9c>
c00116b8:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c00116bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116c3:	74 26                	je     c00116eb <getFromFileDescriptor(int)+0x9c>
c00116c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116cb:	83 f8 08             	cmp    eax,0x8
c00116ce:	77 09                	ja     c00116d9 <getFromFileDescriptor(int)+0x8a>
c00116d0:	8b 04 85 a0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3560]
c00116d7:	eb 12                	jmp    c00116eb <getFromFileDescriptor(int)+0x9c>
c00116d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116df:	83 fb 08             	cmp    ebx,0x8
c00116e2:	77 95                	ja     c0011679 <getFromFileDescriptor(int)+0x2a>
c00116e4:	8b 04 9d 60 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd35a0]
c00116eb:	83 c4 08             	add    esp,0x8
c00116ee:	5b                   	pop    ebx
c00116ef:	c3                   	ret    

c00116f0 <__static_initialization_and_destruction_0(int, int)>:
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116f8:	75 34                	jne    c001172e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011702:	75 2a                	jne    c001172e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	68 d8 ca 02 c0       	push   0xc002cad8
c001170c:	e8 d7 59 01 00       	call   c00270e8 <LinkedList<UnixFile>::LinkedList()>
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	83 ec 04             	sub    esp,0x4
c0011717:	68 88 b8 02 c0       	push   0xc002b888
c001171c:	68 d8 ca 02 c0       	push   0xc002cad8
c0011721:	68 e6 70 02 c0       	push   0xc00270e6
c0011726:	e8 04 0f 00 00       	call   c001262f <__cxa_atexit>
c001172b:	83 c4 10             	add    esp,0x10
c001172e:	90                   	nop
c001172f:	83 c4 0c             	add    esp,0xc
c0011732:	c3                   	ret    

c0011733 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011733:	83 ec 0c             	sub    esp,0xc
c0011736:	83 ec 08             	sub    esp,0x8
c0011739:	68 ff ff 00 00       	push   0xffff
c001173e:	6a 01                	push   0x1
c0011740:	e8 ab ff ff ff       	call   c00116f0 <__static_initialization_and_destruction_0(int, int)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	83 c4 0c             	add    esp,0xc
c001174b:	c3                   	ret    

c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001174c:	53                   	push   ebx
c001174d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011751:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011755:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001175b:	89 c8                	mov    eax,ecx
c001175d:	d1 e8                	shr    eax,1
c001175f:	03 05 08 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b908
c0011765:	83 e1 01             	and    ecx,0x1
c0011768:	8a 10                	mov    dl,BYTE PTR [eax]
c001176a:	75 09                	jne    c0011775 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001176c:	83 e2 f0             	and    edx,0xfffffff0
c001176f:	09 da                	or     edx,ebx
c0011771:	88 10                	mov    BYTE PTR [eax],dl
c0011773:	5b                   	pop    ebx
c0011774:	c3                   	ret    
c0011775:	c1 e3 04             	shl    ebx,0x4
c0011778:	83 e2 0f             	and    edx,0xf
c001177b:	09 da                	or     edx,ebx
c001177d:	88 10                	mov    BYTE PTR [eax],dl
c001177f:	5b                   	pop    ebx
c0011780:	c3                   	ret    

c0011781 <Virt::getPageState(unsigned long)>:
c0011781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011785:	8b 0d 08 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b908
c001178b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011791:	89 d0                	mov    eax,edx
c0011793:	d1 e8                	shr    eax,1
c0011795:	83 e2 01             	and    edx,0x1
c0011798:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001179b:	75 04                	jne    c00117a1 <Virt::getPageState(unsigned long)+0x20>
c001179d:	83 e0 0f             	and    eax,0xf
c00117a0:	c3                   	ret    
c00117a1:	c0 e8 04             	shr    al,0x4
c00117a4:	c3                   	ret    

c00117a5 <Virt::allocateKernelVirtualPages(int)>:
c00117a5:	55                   	push   ebp
c00117a6:	31 ed                	xor    ebp,ebp
c00117a8:	57                   	push   edi
c00117a9:	56                   	push   esi
c00117aa:	53                   	push   ebx
c00117ab:	31 db                	xor    ebx,ebx
c00117ad:	83 ec 1c             	sub    esp,0x1c
c00117b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117b4:	8b 3d 04 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b904
c00117ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117bf:	57                   	push   edi
c00117c0:	e8 bc ff ff ff       	call   c0011781 <Virt::getPageState(unsigned long)>
c00117c5:	5a                   	pop    edx
c00117c6:	84 c0                	test   al,al
c00117c8:	75 3a                	jne    c0011804 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117ca:	85 db                	test   ebx,ebx
c00117cc:	75 02                	jne    c00117d0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117ce:	89 fd                	mov    ebp,edi
c00117d0:	43                   	inc    ebx
c00117d1:	39 f3                	cmp    ebx,esi
c00117d3:	74 5a                	je     c001182f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117d5:	47                   	inc    edi
c00117d6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117dc:	76 31                	jbe    c001180f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117de:	c7 05 04 b9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b904,0xc8000
c00117e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117ed:	75 28                	jne    c0011817 <Virt::allocateKernelVirtualPages(int)+0x72>
c00117ef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117f4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117f9:	57                   	push   edi
c00117fa:	e8 82 ff ff ff       	call   c0011781 <Virt::getPageState(unsigned long)>
c00117ff:	5a                   	pop    edx
c0011800:	84 c0                	test   al,al
c0011802:	74 c6                	je     c00117ca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011804:	31 db                	xor    ebx,ebx
c0011806:	47                   	inc    edi
c0011807:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001180d:	77 cf                	ja     c00117de <Virt::allocateKernelVirtualPages(int)+0x39>
c001180f:	89 3d 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,edi
c0011815:	eb a8                	jmp    c00117bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011817:	83 ec 0c             	sub    esp,0xc
c001181a:	68 84 8e 02 c0       	push   0xc0028e84
c001181f:	e8 8b 80 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011824:	8b 3d 04 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b904
c001182a:	83 c4 10             	add    esp,0x10
c001182d:	eb 90                	jmp    c00117bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c001182f:	89 2d 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,ebp
c0011835:	4b                   	dec    ebx
c0011836:	74 5f                	je     c0011897 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011838:	85 f6                	test   esi,esi
c001183a:	74 3d                	je     c0011879 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001183c:	89 e8                	mov    eax,ebp
c001183e:	31 db                	xor    ebx,ebx
c0011840:	8d 7e ff             	lea    edi,[esi-0x1]
c0011843:	eb 14                	jmp    c0011859 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011845:	6a 01                	push   0x1
c0011847:	43                   	inc    ebx
c0011848:	50                   	push   eax
c0011849:	e8 fe fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001184e:	58                   	pop    eax
c001184f:	39 f3                	cmp    ebx,esi
c0011851:	5a                   	pop    edx
c0011852:	74 25                	je     c0011879 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011854:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c0011859:	8d 50 01             	lea    edx,[eax+0x1]
c001185c:	85 db                	test   ebx,ebx
c001185e:	89 15 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,edx
c0011864:	74 20                	je     c0011886 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011866:	39 df                	cmp    edi,ebx
c0011868:	75 db                	jne    c0011845 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001186a:	6a 03                	push   0x3
c001186c:	43                   	inc    ebx
c001186d:	50                   	push   eax
c001186e:	e8 d9 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011873:	59                   	pop    ecx
c0011874:	39 f3                	cmp    ebx,esi
c0011876:	58                   	pop    eax
c0011877:	75 db                	jne    c0011854 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011879:	83 c4 1c             	add    esp,0x1c
c001187c:	89 e8                	mov    eax,ebp
c001187e:	5b                   	pop    ebx
c001187f:	c1 e0 0c             	shl    eax,0xc
c0011882:	5e                   	pop    esi
c0011883:	5f                   	pop    edi
c0011884:	5d                   	pop    ebp
c0011885:	c3                   	ret    
c0011886:	6a 02                	push   0x2
c0011888:	bb 01 00 00 00       	mov    ebx,0x1
c001188d:	50                   	push   eax
c001188e:	e8 b9 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011893:	58                   	pop    eax
c0011894:	5a                   	pop    edx
c0011895:	eb bd                	jmp    c0011854 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011897:	6a 04                	push   0x4
c0011899:	8d 45 01             	lea    eax,[ebp+0x1]
c001189c:	55                   	push   ebp
c001189d:	a3 04 b9 02 c0       	mov    ds:0xc002b904,eax
c00118a2:	e8 a5 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118a7:	59                   	pop    ecx
c00118a8:	89 e8                	mov    eax,ebp
c00118aa:	5b                   	pop    ebx
c00118ab:	c1 e0 0c             	shl    eax,0xc
c00118ae:	83 c4 1c             	add    esp,0x1c
c00118b1:	5b                   	pop    ebx
c00118b2:	5e                   	pop    esi
c00118b3:	5f                   	pop    edi
c00118b4:	5d                   	pop    ebp
c00118b5:	c3                   	ret    

c00118b6 <Virt::virtualMemorySetup()>:
c00118b6:	53                   	push   ebx
c00118b7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	6a 0f                	push   0xf
c00118c1:	53                   	push   ebx
c00118c2:	43                   	inc    ebx
c00118c3:	e8 84 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118c8:	59                   	pop    ecx
c00118c9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118cf:	58                   	pop    eax
c00118d0:	75 ed                	jne    c00118bf <Virt::virtualMemorySetup()+0x9>
c00118d2:	83 ec 08             	sub    esp,0x8
c00118d5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118da:	68 00 00 00 c8       	push   0xc8000000
c00118df:	68 0b 90 02 c0       	push   0xc002900b
c00118e4:	e8 ac 0e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00118e9:	58                   	pop    eax
c00118ea:	5a                   	pop    edx
c00118eb:	68 00 f0 ff ef       	push   0xeffff000
c00118f0:	68 1f 90 02 c0       	push   0xc002901f
c00118f5:	e8 9b 0e 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00118fa:	83 c4 10             	add    esp,0x10
c00118fd:	83 ec 08             	sub    esp,0x8
c0011900:	6a 00                	push   0x0
c0011902:	53                   	push   ebx
c0011903:	43                   	inc    ebx
c0011904:	e8 43 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011912:	75 e9                	jne    c00118fd <Virt::virtualMemorySetup()+0x47>
c0011914:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011919:	83 ec 08             	sub    esp,0x8
c001191c:	6a 0f                	push   0xf
c001191e:	53                   	push   ebx
c001191f:	43                   	inc    ebx
c0011920:	e8 27 fe ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001192e:	75 e9                	jne    c0011919 <Virt::virtualMemorySetup()+0x63>
c0011930:	83 c4 08             	add    esp,0x8
c0011933:	5b                   	pop    ebx
c0011934:	c3                   	ret    

c0011935 <Virt::getAKernelVAS()>:
c0011935:	a1 e4 ca 02 c0       	mov    eax,ds:0xc002cae4
c001193a:	c3                   	ret    

c001193b <Virt::setupPageSwapping(int)>:
c001193b:	57                   	push   edi
c001193c:	56                   	push   esi
c001193d:	53                   	push   ebx
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	68 14 01 00 00       	push   0x114
c0011946:	e8 89 db ff ff       	call   c000f4d4 <malloc>
c001194b:	83 c4 0c             	add    esp,0xc
c001194e:	89 c6                	mov    esi,eax
c0011950:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c0011956:	68 33 90 02 c0       	push   0xc0029033
c001195b:	50                   	push   eax
c001195c:	e8 63 13 00 00       	call   c0012cc4 <File::File(char const*, Process*)>
c0011961:	89 34 24             	mov    DWORD PTR [esp],esi
c0011964:	e8 37 15 00 00       	call   c0012ea0 <File::unlink()>
c0011969:	58                   	pop    eax
c001196a:	5a                   	pop    edx
c001196b:	6a 12                	push   0x12
c001196d:	56                   	push   esi
c001196e:	e8 b5 13 00 00       	call   c0012d28 <File::open(FileOpenMode)>
c0011973:	83 c4 10             	add    esp,0x10
c0011976:	85 c0                	test   eax,eax
c0011978:	0f 85 ca 00 00 00    	jne    c0011a48 <Virt::setupPageSwapping(int)+0x10d>
c001197e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011982:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001198a:	c1 e3 08             	shl    ebx,0x8
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	68 00 00 01 00       	push   0x10000
c0011995:	e8 3a db ff ff       	call   c000f4d4 <malloc>
c001199a:	83 c4 0c             	add    esp,0xc
c001199d:	89 c7                	mov    edi,eax
c001199f:	68 00 00 01 00       	push   0x10000
c00119a4:	6a 00                	push   0x0
c00119a6:	50                   	push   eax
c00119a7:	e8 df ec fe ff       	call   c000068b <memset>
c00119ac:	83 c4 10             	add    esp,0x10
c00119af:	85 db                	test   ebx,ebx
c00119b1:	79 03                	jns    c00119b6 <Virt::setupPageSwapping(int)+0x7b>
c00119b3:	83 c3 0f             	add    ebx,0xf
c00119b6:	c1 fb 04             	sar    ebx,0x4
c00119b9:	4b                   	dec    ebx
c00119ba:	83 fb ff             	cmp    ebx,0xffffffff
c00119bd:	74 4b                	je     c0011a0a <Virt::setupPageSwapping(int)+0xcf>
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00119c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119c8:	52                   	push   edx
c00119c9:	57                   	push   edi
c00119ca:	6a 00                	push   0x0
c00119cc:	68 00 00 01 00       	push   0x10000
c00119d1:	56                   	push   esi
c00119d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119d5:	83 c4 20             	add    esp,0x20
c00119d8:	85 c0                	test   eax,eax
c00119da:	75 59                	jne    c0011a35 <Virt::setupPageSwapping(int)+0xfa>
c00119dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119e0:	3d 00 00 01 00       	cmp    eax,0x10000
c00119e5:	74 d2                	je     c00119b9 <Virt::setupPageSwapping(int)+0x7e>
c00119e7:	83 ec 08             	sub    esp,0x8
c00119ea:	4b                   	dec    ebx
c00119eb:	50                   	push   eax
c00119ec:	68 86 90 02 c0       	push   0xc0029086
c00119f1:	e8 9f 0d 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00119f6:	c7 04 24 8f 90 02 c0 	mov    DWORD PTR [esp],0xc002908f
c00119fd:	e8 ad 7e 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	83 fb ff             	cmp    ebx,0xffffffff
c0011a08:	75 b5                	jne    c00119bf <Virt::setupPageSwapping(int)+0x84>
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	56                   	push   esi
c0011a0e:	e8 73 13 00 00       	call   c0012d86 <File::close()>
c0011a13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a16:	e8 d9 da ff ff       	call   c000f4f4 <rfree>
c0011a1b:	83 c4 10             	add    esp,0x10
c0011a1e:	85 f6                	test   esi,esi
c0011a20:	74 0c                	je     c0011a2e <Virt::setupPageSwapping(int)+0xf3>
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a27:	56                   	push   esi
c0011a28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	5b                   	pop    ebx
c0011a32:	5e                   	pop    esi
c0011a33:	5f                   	pop    edi
c0011a34:	c3                   	ret    
c0011a35:	83 ec 08             	sub    esp,0x8
c0011a38:	50                   	push   eax
c0011a39:	68 6e 90 02 c0       	push   0xc002906e
c0011a3e:	e8 52 0d 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	eb 94                	jmp    c00119dc <Virt::setupPageSwapping(int)+0xa1>
c0011a48:	83 ec 08             	sub    esp,0x8
c0011a4b:	50                   	push   eax
c0011a4c:	68 4a 90 02 c0       	push   0xc002904a
c0011a51:	e8 3f 0d 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0011a56:	c7 04 24 53 90 02 c0 	mov    DWORD PTR [esp],0xc0029053
c0011a5d:	e8 4d 7e 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	e9 14 ff ff ff       	jmp    c001197e <Virt::setupPageSwapping(int)+0x43>

c0011a6a <VAS::VAS()>:
c0011a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a79:	a3 e4 ca 02 c0       	mov    ds:0xc002cae4,eax
c0011a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a82:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a8a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a91:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a98:	90                   	nop
c0011a99:	c3                   	ret    

c0011a9a <VAS::VAS(VAS*)>:
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011aa8:	83 ec 0c             	sub    esp,0xc
c0011aab:	68 a4 8e 02 c0       	push   0xc0028ea4
c0011ab0:	e8 fa 7d 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	90                   	nop
c0011ab9:	83 c4 0c             	add    esp,0xc
c0011abc:	c3                   	ret    
c0011abd:	90                   	nop

c0011abe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011abe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ac2:	89 c2                	mov    edx,eax
c0011ac4:	c1 e8 0a             	shr    eax,0xa
c0011ac7:	c1 ea 16             	shr    edx,0x16
c0011aca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011acf:	19 c9                	sbb    ecx,ecx
c0011ad1:	c1 e2 0c             	shl    edx,0xc
c0011ad4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ada:	25 fc 0f 00 00       	and    eax,0xffc
c0011adf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ae6:	01 d0                	add    eax,edx
c0011ae8:	c3                   	ret    
c0011ae9:	90                   	nop

c0011aea <VAS::getPageTableEntry(unsigned long)>:
c0011aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011aee:	89 ca                	mov    edx,ecx
c0011af0:	c1 e9 0a             	shr    ecx,0xa
c0011af3:	c1 ea 16             	shr    edx,0x16
c0011af6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011afc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011b02:	c1 e0 0c             	shl    eax,0xc
c0011b05:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011b08:	c3                   	ret    

c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011b09:	57                   	push   edi
c0011b0a:	56                   	push   esi
c0011b0b:	be 01 00 00 00       	mov    esi,0x1
c0011b10:	53                   	push   ebx
c0011b11:	83 ec 10             	sub    esp,0x10
c0011b14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b18:	c1 eb 0c             	shr    ebx,0xc
c0011b1b:	eb 3f                	jmp    c0011b5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b1d:	e8 13 fe ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c0011b22:	83 ec 08             	sub    esp,0x8
c0011b25:	57                   	push   edi
c0011b26:	50                   	push   eax
c0011b27:	e8 be ff ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c0011b2c:	83 c4 10             	add    esp,0x10
c0011b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b35:	f6 c4 04             	test   ah,0x4
c0011b38:	75 5f                	jne    c0011b99 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b3a:	80 fa 04             	cmp    dl,0x4
c0011b3d:	74 78                	je     c0011bb7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b3f:	80 fa 02             	cmp    dl,0x2
c0011b42:	0f 84 88 00 00 00    	je     c0011bd0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b48:	80 fa 03             	cmp    dl,0x3
c0011b4b:	0f 84 ad 00 00 00    	je     c0011bfe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b51:	fe ca                	dec    dl
c0011b53:	0f 84 92 00 00 00    	je     c0011beb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b59:	43                   	inc    ebx
c0011b5a:	31 f6                	xor    esi,esi
c0011b5c:	53                   	push   ebx
c0011b5d:	e8 1f fc ff ff       	call   c0011781 <Virt::getPageState(unsigned long)>
c0011b62:	5f                   	pop    edi
c0011b63:	89 df                	mov    edi,ebx
c0011b65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b69:	c1 e7 0c             	shl    edi,0xc
c0011b6c:	84 c0                	test   al,al
c0011b6e:	75 ad                	jne    c0011b1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b70:	83 ec 0c             	sub    esp,0xc
c0011b73:	68 95 90 02 c0       	push   0xc0029095
c0011b78:	e8 32 7d 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011b7d:	e8 b3 fd ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c0011b82:	5a                   	pop    edx
c0011b83:	59                   	pop    ecx
c0011b84:	57                   	push   edi
c0011b85:	50                   	push   eax
c0011b86:	e8 5f ff ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c0011b8b:	83 c4 10             	add    esp,0x10
c0011b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b94:	f6 c4 04             	test   ah,0x4
c0011b97:	74 c0                	je     c0011b59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b99:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ba2:	83 ec 0c             	sub    esp,0xc
c0011ba5:	50                   	push   eax
c0011ba6:	e8 5c de ff ff       	call   c000fa07 <Phys::freePage(unsigned long)>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011bb2:	80 fa 04             	cmp    dl,0x4
c0011bb5:	75 88                	jne    c0011b3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011bb7:	89 f0                	mov    eax,esi
c0011bb9:	84 c0                	test   al,al
c0011bbb:	75 47                	jne    c0011c04 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011bbd:	c7 44 24 20 c8 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ec8
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	5b                   	pop    ebx
c0011bc9:	5e                   	pop    esi
c0011bca:	5f                   	pop    edi
c0011bcb:	e9 df 7c 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c0011bd0:	89 f0                	mov    eax,esi
c0011bd2:	84 c0                	test   al,al
c0011bd4:	75 15                	jne    c0011beb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bd6:	83 ec 0c             	sub    esp,0xc
c0011bd9:	68 b1 90 02 c0       	push   0xc00290b1
c0011bde:	e8 cc 7c 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	e9 6e ff ff ff       	jmp    c0011b59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011beb:	83 ec 08             	sub    esp,0x8
c0011bee:	6a 00                	push   0x0
c0011bf0:	53                   	push   ebx
c0011bf1:	e8 56 fb ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	e9 5b ff ff ff       	jmp    c0011b59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bfe:	89 f0                	mov    eax,esi
c0011c00:	84 c0                	test   al,al
c0011c02:	75 15                	jne    c0011c19 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011c04:	83 ec 08             	sub    esp,0x8
c0011c07:	6a 00                	push   0x0
c0011c09:	53                   	push   ebx
c0011c0a:	e8 3d fb ff ff       	call   c001174c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	83 c4 10             	add    esp,0x10
c0011c15:	5b                   	pop    ebx
c0011c16:	5e                   	pop    esi
c0011c17:	5f                   	pop    edi
c0011c18:	c3                   	ret    
c0011c19:	c7 44 24 20 cd 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc00290cd
c0011c21:	83 c4 10             	add    esp,0x10
c0011c24:	5b                   	pop    ebx
c0011c25:	5e                   	pop    esi
c0011c26:	5f                   	pop    edi
c0011c27:	e9 83 7c 00 00       	jmp    c00198af <Krnl::panic(char const*)>

c0011c2c <VAS::freeAllocatedPages(unsigned long)>:
c0011c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c34:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c38:	74 09                	je     c0011c43 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c3e:	e9 c6 fe ff ff       	jmp    c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c43:	c7 44 24 04 ec 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028eec
c0011c4b:	e9 45 0b 00 00       	jmp    c0012795 <Dbg::kprintf(char const*, ...)>

c0011c50 <VAS::virtualToPhysical(unsigned long)>:
c0011c50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c54:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c58:	e8 8d fe ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c0011c5d:	5a                   	pop    edx
c0011c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c60:	59                   	pop    ecx
c0011c61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c66:	c3                   	ret    
c0011c67:	90                   	nop

c0011c68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c68:	55                   	push   ebp
c0011c69:	57                   	push   edi
c0011c6a:	56                   	push   esi
c0011c6b:	53                   	push   ebx
c0011c6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c70:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c7c:	85 db                	test   ebx,ebx
c0011c7e:	7e 22                	jle    c0011ca2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c80:	c1 e3 0c             	shl    ebx,0xc
c0011c83:	01 f3                	add    ebx,esi
c0011c85:	56                   	push   esi
c0011c86:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c8c:	55                   	push   ebp
c0011c8d:	e8 58 fe ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c0011c92:	5a                   	pop    edx
c0011c93:	59                   	pop    ecx
c0011c94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c96:	21 f9                	and    ecx,edi
c0011c98:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c9c:	39 f3                	cmp    ebx,esi
c0011c9e:	89 08                	mov    DWORD PTR [eax],ecx
c0011ca0:	75 e3                	jne    c0011c85 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011ca2:	5b                   	pop    ebx
c0011ca3:	5e                   	pop    esi
c0011ca4:	5f                   	pop    edi
c0011ca5:	5d                   	pop    ebp
c0011ca6:	c3                   	ret    
c0011ca7:	90                   	nop

c0011ca8 <VAS::setToWriteCombining(unsigned long, int)>:
c0011ca8:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011cad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cb3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011cba:	75 01                	jne    c0011cbd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011cbc:	c3                   	ret    
c0011cbd:	68 80 00 00 00       	push   0x80
c0011cc2:	6a ff                	push   0xffffffff
c0011cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cd0:	e8 93 ff ff ff       	call   c0011c68 <VAS::reflagRange(unsigned long, int, int, int)>
c0011cd5:	83 c4 14             	add    esp,0x14
c0011cd8:	c3                   	ret    
c0011cd9:	90                   	nop

c0011cda <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cea:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011ced:	19 c0                	sbb    eax,eax
c0011cef:	83 ca 03             	or     edx,0x3
c0011cf2:	83 e0 fc             	and    eax,0xfffffffc
c0011cf5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011cfc:	0f 20 d8             	mov    eax,cr3
c0011cff:	0f 22 d8             	mov    cr3,eax
c0011d02:	c3                   	ret    
c0011d03:	90                   	nop

c0011d04 <VAS::~VAS()>:
c0011d04:	83 ec 2c             	sub    esp,0x2c
c0011d07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d0f:	e8 2a b0 00 00       	call   c001cd3e <lockScheduler()>
c0011d14:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d1e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d24:	83 ec 04             	sub    esp,0x4
c0011d27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d2b:	6a 01                	push   0x1
c0011d2d:	50                   	push   eax
c0011d2e:	e8 a7 ff ff ff       	call   c0011cda <VAS::mapOtherVASIn(bool, VAS*)>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d3e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d46:	0f 8f d7 00 00 00    	jg     c0011e23 <VAS::~VAS()+0x11f>
c0011d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d57:	c1 e2 02             	shl    edx,0x2
c0011d5a:	01 d0                	add    eax,edx
c0011d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d66:	83 e0 01             	and    eax,0x1
c0011d69:	0f 84 ab 00 00 00    	je     c0011e1a <VAS::~VAS()+0x116>
c0011d6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d77:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d7f:	7f 75                	jg     c0011df6 <VAS::~VAS()+0xf2>
c0011d81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d85:	c1 e0 0a             	shl    eax,0xa
c0011d88:	89 c2                	mov    edx,eax
c0011d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d8e:	01 d0                	add    eax,edx
c0011d90:	c1 e0 0c             	shl    eax,0xc
c0011d93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d97:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011da1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011da7:	83 ec 04             	sub    esp,0x4
c0011daa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011dae:	6a 01                	push   0x1
c0011db0:	50                   	push   eax
c0011db1:	e8 08 fd ff ff       	call   c0011abe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011db6:	83 c4 10             	add    esp,0x10
c0011db9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dcb:	25 01 04 00 00       	and    eax,0x401
c0011dd0:	3d 01 04 00 00       	cmp    eax,0x401
c0011dd5:	75 19                	jne    c0011df0 <VAS::~VAS()+0xec>
c0011dd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ddb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011de0:	83 ec 0c             	sub    esp,0xc
c0011de3:	50                   	push   eax
c0011de4:	e8 1e dc ff ff       	call   c000fa07 <Phys::freePage(unsigned long)>
c0011de9:	83 c4 10             	add    esp,0x10
c0011dec:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011df0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011df4:	eb 81                	jmp    c0011d77 <VAS::~VAS()+0x73>
c0011df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfa:	25 00 04 00 00       	and    eax,0x400
c0011dff:	74 19                	je     c0011e1a <VAS::~VAS()+0x116>
c0011e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0a:	83 ec 0c             	sub    esp,0xc
c0011e0d:	50                   	push   eax
c0011e0e:	e8 f4 db ff ff       	call   c000fa07 <Phys::freePage(unsigned long)>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e1a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e1e:	e9 1b ff ff ff       	jmp    c0011d3e <VAS::~VAS()+0x3a>
c0011e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e2a:	83 ec 0c             	sub    esp,0xc
c0011e2d:	50                   	push   eax
c0011e2e:	e8 d6 fc ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e33:	83 c4 10             	add    esp,0x10
c0011e36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e3d:	83 ec 0c             	sub    esp,0xc
c0011e40:	50                   	push   eax
c0011e41:	e8 c1 db ff ff       	call   c000fa07 <Phys::freePage(unsigned long)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e51:	c1 e0 02             	shl    eax,0x2
c0011e54:	83 ec 08             	sub    esp,0x8
c0011e57:	50                   	push   eax
c0011e58:	68 10 8f 02 c0       	push   0xc0028f10
c0011e5d:	e8 33 09 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	e8 d6 ae 00 00       	call   c001cd40 <unlockScheduler()>
c0011e6a:	90                   	nop
c0011e6b:	83 c4 2c             	add    esp,0x2c
c0011e6e:	c3                   	ret    
c0011e6f:	90                   	nop

c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e70:	55                   	push   ebp
c0011e71:	57                   	push   edi
c0011e72:	56                   	push   esi
c0011e73:	53                   	push   ebx
c0011e74:	83 ec 1c             	sub    esp,0x1c
c0011e77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e7f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e85:	77 08                	ja     c0011e8f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e87:	0f 20 d8             	mov    eax,cr3
c0011e8a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e8d:	75 47                	jne    c0011ed6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e93:	09 d8                	or     eax,ebx
c0011e95:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e9a:	75 57                	jne    c0011ef3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e9c:	89 de                	mov    esi,ebx
c0011e9e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ea1:	c1 ee 16             	shr    esi,0x16
c0011ea4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011eab:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011eaf:	74 54                	je     c0011f05 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011eb1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eb5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ebb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ebf:	c1 e6 0c             	shl    esi,0xc
c0011ec2:	c1 eb 0a             	shr    ebx,0xa
c0011ec5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ecb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ece:	83 c4 1c             	add    esp,0x1c
c0011ed1:	5b                   	pop    ebx
c0011ed2:	5e                   	pop    esi
c0011ed3:	5f                   	pop    edi
c0011ed4:	5d                   	pop    ebp
c0011ed5:	c3                   	ret    
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	68 30 8f 02 c0       	push   0xc0028f30
c0011ede:	e8 b2 08 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eea:	09 d8                	or     eax,ebx
c0011eec:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ef1:	74 a9                	je     c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ef3:	83 ec 0c             	sub    esp,0xc
c0011ef6:	68 98 8f 02 c0       	push   0xc0028f98
c0011efb:	e8 af 79 00 00       	call   c00198af <Krnl::panic(char const*)>
c0011f00:	83 c4 10             	add    esp,0x10
c0011f03:	eb 97                	jmp    c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f09:	e8 83 db ff ff       	call   c000fa91 <Phys::allocatePage()>
c0011f0e:	89 c5                	mov    ebp,eax
c0011f10:	e8 20 fa ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f1c:	6a 01                	push   0x1
c0011f1e:	e8 82 f8 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c0011f23:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f2a:	6a 01                	push   0x1
c0011f2c:	50                   	push   eax
c0011f2d:	55                   	push   ebp
c0011f2e:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f38:	51                   	push   ecx
c0011f39:	e8 26 02 00 00       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f3e:	83 c4 1c             	add    esp,0x1c
c0011f41:	68 00 10 00 00       	push   0x1000
c0011f46:	6a 00                	push   0x0
c0011f48:	50                   	push   eax
c0011f49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f4d:	e8 39 e7 fe ff       	call   c000068b <memset>
c0011f52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f59:	e8 ab fb ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f62:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f6b:	e9 41 ff ff ff       	jmp    c0011eb1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f70 <VAS::allocatePages(int, int)>:
c0011f70:	55                   	push   ebp
c0011f71:	57                   	push   edi
c0011f72:	56                   	push   esi
c0011f73:	53                   	push   ebx
c0011f74:	83 ec 1c             	sub    esp,0x1c
c0011f77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f7b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011f80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f86:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f8c:	83 e0 01             	and    eax,0x1
c0011f8f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f97:	0f 85 cc 00 00 00    	jne    c0012069 <VAS::allocatePages(int, int)+0xf9>
c0011f9d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011fa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fa4:	85 c0                	test   eax,eax
c0011fa6:	0f 84 a1 00 00 00    	je     c001204d <VAS::allocatePages(int, int)+0xdd>
c0011fac:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011fb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fb4:	c1 e6 0c             	shl    esi,0xc
c0011fb7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011fbb:	85 c0                	test   eax,eax
c0011fbd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011fc0:	7e 33                	jle    c0011ff5 <VAS::allocatePages(int, int)+0x85>
c0011fc2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011fc6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fca:	81 cd 00 04 00 00    	or     ebp,0x400
c0011fd0:	e8 bc da ff ff       	call   c000fa91 <Phys::allocatePage()>
c0011fd5:	55                   	push   ebp
c0011fd6:	53                   	push   ebx
c0011fd7:	50                   	push   eax
c0011fd8:	57                   	push   edi
c0011fd9:	e8 92 fe ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fe6:	74 03                	je     c0011feb <VAS::allocatePages(int, int)+0x7b>
c0011fe8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011feb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ff1:	39 de                	cmp    esi,ebx
c0011ff3:	75 db                	jne    c0011fd0 <VAS::allocatePages(int, int)+0x60>
c0011ff5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ffa:	75 12                	jne    c001200e <VAS::allocatePages(int, int)+0x9e>
c0011ffc:	0f 20 d8             	mov    eax,cr3
c0011fff:	0f 22 d8             	mov    cr3,eax
c0012002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012006:	83 c4 1c             	add    esp,0x1c
c0012009:	5b                   	pop    ebx
c001200a:	5e                   	pop    esi
c001200b:	5f                   	pop    edi
c001200c:	5d                   	pop    ebp
c001200d:	c3                   	ret    
c001200e:	c1 ee 0a             	shr    esi,0xa
c0012011:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012015:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001201b:	c1 eb 0a             	shr    ebx,0xa
c001201e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012024:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001202a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012030:	39 c3                	cmp    ebx,eax
c0012032:	77 ce                	ja     c0012002 <VAS::allocatePages(int, int)+0x92>
c0012034:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012037:	81 c3 00 10 00 00    	add    ebx,0x1000
c001203d:	39 d8                	cmp    eax,ebx
c001203f:	73 f3                	jae    c0012034 <VAS::allocatePages(int, int)+0xc4>
c0012041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012045:	83 c4 1c             	add    esp,0x1c
c0012048:	5b                   	pop    ebx
c0012049:	5e                   	pop    esi
c001204a:	5f                   	pop    edi
c001204b:	5d                   	pop    ebp
c001204c:	c3                   	ret    
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	68 bc 8f 02 c0       	push   0xc0028fbc
c0012055:	e8 55 78 00 00       	call   c00198af <Krnl::panic(char const*)>
c001205a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001205d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	e9 43 ff ff ff       	jmp    c0011fac <VAS::allocatePages(int, int)+0x3c>
c0012069:	83 ec 0c             	sub    esp,0xc
c001206c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012070:	e8 30 f7 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c0012075:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012079:	83 c4 10             	add    esp,0x10
c001207c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012081:	0f 87 9b 00 00 00    	ja     c0012122 <VAS::allocatePages(int, int)+0x1b2>
c0012087:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001208b:	85 d2                	test   edx,edx
c001208d:	7e 3c                	jle    c00120cb <VAS::allocatePages(int, int)+0x15b>
c001208f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012097:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001209b:	c1 e5 0c             	shl    ebp,0xc
c001209e:	81 ce 00 04 00 00    	or     esi,0x400
c00120a4:	01 dd                	add    ebp,ebx
c00120a6:	e8 e6 d9 ff ff       	call   c000fa91 <Phys::allocatePage()>
c00120ab:	56                   	push   esi
c00120ac:	53                   	push   ebx
c00120ad:	50                   	push   eax
c00120ae:	57                   	push   edi
c00120af:	e8 bc fd ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120b4:	83 c4 10             	add    esp,0x10
c00120b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120bc:	74 03                	je     c00120c1 <VAS::allocatePages(int, int)+0x151>
c00120be:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120c7:	39 dd                	cmp    ebp,ebx
c00120c9:	75 db                	jne    c00120a6 <VAS::allocatePages(int, int)+0x136>
c00120cb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120d0:	0f 84 26 ff ff ff    	je     c0011ffc <VAS::allocatePages(int, int)+0x8c>
c00120d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120de:	89 d3                	mov    ebx,edx
c00120e0:	c1 e0 0c             	shl    eax,0xc
c00120e3:	c1 eb 0a             	shr    ebx,0xa
c00120e6:	01 d0                	add    eax,edx
c00120e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120ee:	c1 e8 0a             	shr    eax,0xa
c00120f1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120fc:	2d 00 00 40 00       	sub    eax,0x400000
c0012101:	39 c3                	cmp    ebx,eax
c0012103:	0f 87 f9 fe ff ff    	ja     c0012002 <VAS::allocatePages(int, int)+0x92>
c0012109:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001210c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012112:	39 d8                	cmp    eax,ebx
c0012114:	73 f3                	jae    c0012109 <VAS::allocatePages(int, int)+0x199>
c0012116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001211a:	83 c4 1c             	add    esp,0x1c
c001211d:	5b                   	pop    ebx
c001211e:	5e                   	pop    esi
c001211f:	5f                   	pop    edi
c0012120:	5d                   	pop    ebp
c0012121:	c3                   	ret    
c0012122:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012127:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001212d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012134:	0f 84 4d ff ff ff    	je     c0012087 <VAS::allocatePages(int, int)+0x117>
c001213a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012142:	e9 40 ff ff ff       	jmp    c0012087 <VAS::allocatePages(int, int)+0x117>
c0012147:	90                   	nop

c0012148 <VAS::setCPUSpecific(unsigned long)>:
c0012148:	83 ec 0c             	sub    esp,0xc
c001214b:	6a 05                	push   0x5
c001214d:	68 00 00 40 c2       	push   0xc2400000
c0012152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001215a:	e8 11 fd ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c001215f:	83 c4 1c             	add    esp,0x1c
c0012162:	c3                   	ret    
c0012163:	90                   	nop

c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012164:	55                   	push   ebp
c0012165:	57                   	push   edi
c0012166:	56                   	push   esi
c0012167:	53                   	push   ebx
c0012168:	83 ec 1c             	sub    esp,0x1c
c001216b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012170:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012174:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001217a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001217e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012184:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012188:	83 e0 01             	and    eax,0x1
c001218b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001218f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012193:	85 c0                	test   eax,eax
c0012195:	7e 39                	jle    c00121d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012197:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001219b:	89 f3                	mov    ebx,esi
c001219d:	c1 e0 0c             	shl    eax,0xc
c00121a0:	01 f0                	add    eax,esi
c00121a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121a6:	55                   	push   ebp
c00121a7:	53                   	push   ebx
c00121a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121ac:	29 f0                	sub    eax,esi
c00121ae:	01 d8                	add    eax,ebx
c00121b0:	50                   	push   eax
c00121b1:	57                   	push   edi
c00121b2:	e8 b9 fc ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121b7:	83 c4 10             	add    esp,0x10
c00121ba:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121bf:	74 03                	je     c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121c1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121c4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121ca:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121ce:	75 d6                	jne    c00121a6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121d0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121d5:	75 10                	jne    c00121e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121d7:	0f 20 d8             	mov    eax,cr3
c00121da:	0f 22 d8             	mov    cr3,eax
c00121dd:	83 c4 1c             	add    esp,0x1c
c00121e0:	89 f0                	mov    eax,esi
c00121e2:	5b                   	pop    ebx
c00121e3:	5e                   	pop    esi
c00121e4:	5f                   	pop    edi
c00121e5:	5d                   	pop    ebp
c00121e6:	c3                   	ret    
c00121e7:	89 f3                	mov    ebx,esi
c00121e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121ed:	c1 eb 0a             	shr    ebx,0xa
c00121f0:	c1 e0 0c             	shl    eax,0xc
c00121f3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121f9:	01 f0                	add    eax,esi
c00121fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012201:	c1 e8 0a             	shr    eax,0xa
c0012204:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012209:	2d 00 00 40 00       	sub    eax,0x400000
c001220e:	39 c3                	cmp    ebx,eax
c0012210:	77 cb                	ja     c00121dd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012212:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012215:	81 c3 00 10 00 00    	add    ebx,0x1000
c001221b:	39 d8                	cmp    eax,ebx
c001221d:	73 f3                	jae    c0012212 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001221f:	83 c4 1c             	add    esp,0x1c
c0012222:	89 f0                	mov    eax,esi
c0012224:	5b                   	pop    ebx
c0012225:	5e                   	pop    esi
c0012226:	5f                   	pop    edi
c0012227:	5d                   	pop    ebp
c0012228:	c3                   	ret    
c0012229:	90                   	nop

c001222a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001222a:	55                   	push   ebp
c001222b:	57                   	push   edi
c001222c:	56                   	push   esi
c001222d:	53                   	push   ebx
c001222e:	83 ec 1c             	sub    esp,0x1c
c0012231:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012235:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012239:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001223d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012241:	a9 ff 0f 00 00       	test   eax,0xfff
c0012246:	75 4a                	jne    c0012292 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012248:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001224c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001224f:	c1 eb 16             	shr    ebx,0x16
c0012252:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012259:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001225d:	74 4d                	je     c00122ac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001225f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012263:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012267:	c1 e8 0a             	shr    eax,0xa
c001226a:	80 fa 01             	cmp    dl,0x1
c001226d:	19 d2                	sbb    edx,edx
c001226f:	c1 e3 0c             	shl    ebx,0xc
c0012272:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012276:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001227c:	25 fc 0f 00 00       	and    eax,0xffc
c0012281:	01 d8                	add    eax,ebx
c0012283:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001228a:	83 c4 1c             	add    esp,0x1c
c001228d:	5b                   	pop    ebx
c001228e:	5e                   	pop    esi
c001228f:	5f                   	pop    edi
c0012290:	5d                   	pop    ebp
c0012291:	c3                   	ret    
c0012292:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	68 e8 8f 02 c0       	push   0xc0028fe8
c001229e:	e8 0c 76 00 00       	call   c00198af <Krnl::panic(char const*)>
c00122a3:	83 c4 10             	add    esp,0x10
c00122a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122aa:	eb 9c                	jmp    c0012248 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00122ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122b0:	e8 dc d7 ff ff       	call   c000fa91 <Phys::allocatePage()>
c00122b5:	89 c5                	mov    ebp,eax
c00122b7:	e8 79 f6 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122c3:	6a 01                	push   0x1
c00122c5:	e8 db f4 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c00122ca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122d1:	6a 01                	push   0x1
c00122d3:	50                   	push   eax
c00122d4:	55                   	push   ebp
c00122d5:	81 cd 07 04 00 00    	or     ebp,0x407
c00122db:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122df:	51                   	push   ecx
c00122e0:	e8 7f fe ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122e5:	83 c4 1c             	add    esp,0x1c
c00122e8:	68 00 10 00 00       	push   0x1000
c00122ed:	6a 00                	push   0x0
c00122ef:	50                   	push   eax
c00122f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122f4:	e8 92 e3 fe ff       	call   c000068b <memset>
c00122f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122fd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012300:	e8 04 f8 ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c0012305:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001230e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012312:	e9 48 ff ff ff       	jmp    c001225f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012317:	90                   	nop

c0012318 <VAS::VAS(bool)>:
c0012318:	53                   	push   ebx
c0012319:	83 ec 28             	sub    esp,0x28
c001231c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012320:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012328:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001232f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012333:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012337:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001233a:	e8 52 d7 ff ff       	call   c000fa91 <Phys::allocatePage()>
c001233f:	89 c2                	mov    edx,eax
c0012341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012345:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012348:	e8 e8 f5 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c001234d:	89 c3                	mov    ebx,eax
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	6a 01                	push   0x1
c0012354:	e8 4c f4 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	89 c2                	mov    edx,eax
c001235e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012362:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012365:	83 ec 0c             	sub    esp,0xc
c0012368:	6a 03                	push   0x3
c001236a:	6a 01                	push   0x1
c001236c:	52                   	push   edx
c001236d:	50                   	push   eax
c001236e:	53                   	push   ebx
c001236f:	e8 f0 fd ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012374:	83 c4 20             	add    esp,0x20
c0012377:	89 c2                	mov    edx,eax
c0012379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001237d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012380:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012388:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012390:	7f 1c                	jg     c00123ae <VAS::VAS(bool)+0x96>
c0012392:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012396:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012399:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001239d:	c1 e2 02             	shl    edx,0x2
c00123a0:	01 d0                	add    eax,edx
c00123a2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00123a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123ac:	eb da                	jmp    c0012388 <VAS::VAS(bool)+0x70>
c00123ae:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00123b6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123be:	7f 7a                	jg     c001243a <VAS::VAS(bool)+0x122>
c00123c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123c4:	2d 00 02 00 00       	sub    eax,0x200
c00123c9:	c1 e0 0c             	shl    eax,0xc
c00123cc:	83 c8 03             	or     eax,0x3
c00123cf:	89 c2                	mov    edx,eax
c00123d1:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00123d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123dc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123e2:	83 e0 10             	and    eax,0x10
c00123e5:	84 c0                	test   al,al
c00123e7:	74 07                	je     c00123f0 <VAS::VAS(bool)+0xd8>
c00123e9:	b8 00 01 00 00       	mov    eax,0x100
c00123ee:	eb 05                	jmp    c00123f5 <VAS::VAS(bool)+0xdd>
c00123f0:	b8 00 00 00 00       	mov    eax,0x0
c00123f5:	09 d0                	or     eax,edx
c00123f7:	89 c1                	mov    ecx,eax
c00123f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012400:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012404:	c1 e2 02             	shl    edx,0x2
c0012407:	01 d0                	add    eax,edx
c0012409:	89 ca                	mov    edx,ecx
c001240b:	89 10                	mov    DWORD PTR [eax],edx
c001240d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012411:	2d 40 03 00 00       	sub    eax,0x340
c0012416:	83 f8 7f             	cmp    eax,0x7f
c0012419:	77 16                	ja     c0012431 <VAS::VAS(bool)+0x119>
c001241b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001241f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012422:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012426:	c1 e2 02             	shl    edx,0x2
c0012429:	01 d0                	add    eax,edx
c001242b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012431:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012435:	e9 7c ff ff ff       	jmp    c00123b6 <VAS::VAS(bool)+0x9e>
c001243a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001243f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012445:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001244b:	83 e0 10             	and    eax,0x10
c001244e:	84 c0                	test   al,al
c0012450:	74 07                	je     c0012459 <VAS::VAS(bool)+0x141>
c0012452:	b8 03 41 00 00       	mov    eax,0x4103
c0012457:	eb 05                	jmp    c001245e <VAS::VAS(bool)+0x146>
c0012459:	b8 03 40 00 00       	mov    eax,0x4003
c001245e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012462:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012465:	81 c2 20 0c 00 00    	add    edx,0xc20
c001246b:	89 02                	mov    DWORD PTR [edx],eax
c001246d:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001247e:	83 ec 08             	sub    esp,0x8
c0012481:	50                   	push   eax
c0012482:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012486:	e8 bd fc ff ff       	call   c0012148 <VAS::setCPUSpecific(unsigned long)>
c001248b:	83 c4 10             	add    esp,0x10
c001248e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012492:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012495:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001249a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124a6:	83 e0 10             	and    eax,0x10
c00124a9:	84 c0                	test   al,al
c00124ab:	74 07                	je     c00124b4 <VAS::VAS(bool)+0x19c>
c00124ad:	b8 00 01 00 00       	mov    eax,0x100
c00124b2:	eb 05                	jmp    c00124b9 <VAS::VAS(bool)+0x1a1>
c00124b4:	b8 00 00 00 00       	mov    eax,0x0
c00124b9:	09 c2                	or     edx,eax
c00124bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124c2:	05 fc 0f 00 00       	add    eax,0xffc
c00124c7:	83 ca 03             	or     edx,0x3
c00124ca:	89 10                	mov    DWORD PTR [eax],edx
c00124cc:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00124d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d7:	83 ec 0c             	sub    esp,0xc
c00124da:	50                   	push   eax
c00124db:	e8 90 19 00 00       	call   c0013e70 <Device::getName()>
c00124e0:	83 c4 10             	add    esp,0x10
c00124e3:	83 ec 08             	sub    esp,0x8
c00124e6:	68 e7 90 02 c0       	push   0xc00290e7
c00124eb:	50                   	push   eax
c00124ec:	e8 8a e2 fe ff       	call   c000077b <strcmp>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	85 c0                	test   eax,eax
c00124f6:	0f 94 c0             	sete   al
c00124f9:	84 c0                	test   al,al
c00124fb:	74 70                	je     c001256d <VAS::VAS(bool)+0x255>
c00124fd:	e8 1f a8 00 00       	call   c001cd21 <disableIRQs()>
c0012502:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012507:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001250d:	05 7c 09 00 00       	add    eax,0x97c
c0012512:	83 ec 0c             	sub    esp,0xc
c0012515:	50                   	push   eax
c0012516:	e8 35 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012523:	89 c3                	mov    ebx,eax
c0012525:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001252a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012530:	05 7c 09 00 00       	add    eax,0x97c
c0012535:	83 ec 0c             	sub    esp,0xc
c0012538:	50                   	push   eax
c0012539:	e8 12 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	83 ec 08             	sub    esp,0x8
c0012544:	50                   	push   eax
c0012545:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012549:	e8 9c f5 ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	8b 00                	mov    eax,DWORD PTR [eax]
c0012553:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012558:	6a 11                	push   0x11
c001255a:	53                   	push   ebx
c001255b:	50                   	push   eax
c001255c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012560:	e8 0b f9 ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012565:	83 c4 10             	add    esp,0x10
c0012568:	e8 c2 a7 00 00       	call   c001cd2f <enableIRQs()>
c001256d:	90                   	nop
c001256e:	83 c4 28             	add    esp,0x28
c0012571:	5b                   	pop    ebx
c0012572:	c3                   	ret    

c0012573 <mapVASFirstTime>:
c0012573:	55                   	push   ebp
c0012574:	57                   	push   edi
c0012575:	56                   	push   esi
c0012576:	53                   	push   ebx
c0012577:	83 ec 0c             	sub    esp,0xc
c001257a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001257f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012582:	4a                   	dec    edx
c0012583:	0f 84 8e 00 00 00    	je     c0012617 <mapVASFirstTime+0xa4>
c0012589:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001258c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001258f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012594:	c1 e5 15             	shl    ebp,0x15
c0012597:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001259c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00125a2:	29 eb                	sub    ebx,ebp
c00125a4:	29 ee                	sub    esi,ebp
c00125a6:	e8 e6 d4 ff ff       	call   c000fa91 <Phys::allocatePage()>
c00125ab:	83 ec 0c             	sub    esp,0xc
c00125ae:	68 03 04 00 00       	push   0x403
c00125b3:	6a 01                	push   0x1
c00125b5:	53                   	push   ebx
c00125b6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125bc:	50                   	push   eax
c00125bd:	57                   	push   edi
c00125be:	e8 a1 fb ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125c3:	83 c4 20             	add    esp,0x20
c00125c6:	39 f3                	cmp    ebx,esi
c00125c8:	75 dc                	jne    c00125a6 <mapVASFirstTime+0x33>
c00125ca:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125cf:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125d4:	29 ee                	sub    esi,ebp
c00125d6:	29 e8                	sub    eax,ebp
c00125d8:	89 c5                	mov    ebp,eax
c00125da:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125de:	19 db                	sbb    ebx,ebx
c00125e0:	e8 ac d4 ff ff       	call   c000fa91 <Phys::allocatePage()>
c00125e5:	83 e3 04             	and    ebx,0x4
c00125e8:	83 ec 0c             	sub    esp,0xc
c00125eb:	81 c3 03 04 00 00    	add    ebx,0x403
c00125f1:	53                   	push   ebx
c00125f2:	6a 01                	push   0x1
c00125f4:	56                   	push   esi
c00125f5:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125fb:	50                   	push   eax
c00125fc:	57                   	push   edi
c00125fd:	e8 62 fb ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012602:	83 c4 20             	add    esp,0x20
c0012605:	39 f5                	cmp    ebp,esi
c0012607:	75 d1                	jne    c00125da <mapVASFirstTime+0x67>
c0012609:	0f 20 d8             	mov    eax,cr3
c001260c:	0f 22 d8             	mov    cr3,eax
c001260f:	83 c4 0c             	add    esp,0xc
c0012612:	5b                   	pop    ebx
c0012613:	5e                   	pop    esi
c0012614:	5f                   	pop    edi
c0012615:	5d                   	pop    ebp
c0012616:	c3                   	ret    
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	68 f5 90 02 c0       	push   0xc00290f5
c001261f:	e8 71 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	83 c4 0c             	add    esp,0xc
c001262a:	5b                   	pop    ebx
c001262b:	5e                   	pop    esi
c001262c:	5f                   	pop    edi
c001262d:	5d                   	pop    ebp
c001262e:	c3                   	ret    

c001262f <__cxa_atexit>:
c001262f:	31 c0                	xor    eax,eax
c0012631:	c3                   	ret    

c0012632 <__cxa_finalize>:
c0012632:	c3                   	ret    

c0012633 <__stack_chk_fail>:
c0012633:	55                   	push   ebp
c0012634:	89 e5                	mov    ebp,esp
c0012636:	83 ec 14             	sub    esp,0x14
c0012639:	68 0e 91 02 c0       	push   0xc002910e
c001263e:	e8 52 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0012643:	58                   	pop    eax
c0012644:	5a                   	pop    edx
c0012645:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012648:	68 5e 91 02 c0       	push   0xc002915e
c001264d:	e8 43 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0012652:	59                   	pop    ecx
c0012653:	58                   	pop    eax
c0012654:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012657:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001265a:	68 5e 91 02 c0       	push   0xc002915e
c001265f:	e8 31 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0012664:	5a                   	pop    edx
c0012665:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012668:	59                   	pop    ecx
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001266e:	68 5e 91 02 c0       	push   0xc002915e
c0012673:	e8 1d 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0012678:	5a                   	pop    edx
c0012679:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001267c:	59                   	pop    ecx
c001267d:	8b 00                	mov    eax,DWORD PTR [eax]
c001267f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012681:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012684:	68 5e 91 02 c0       	push   0xc002915e
c0012689:	e8 07 01 00 00       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001268e:	c7 04 24 66 91 02 c0 	mov    DWORD PTR [esp],0xc0029166
c0012695:	e8 15 72 00 00       	call   c00198af <Krnl::panic(char const*)>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	c9                   	leave  
c001269e:	c3                   	ret    

c001269f <__cxa_pure_virtual>:
c001269f:	83 ec 18             	sub    esp,0x18
c00126a2:	68 7e 91 02 c0       	push   0xc002917e
c00126a7:	e8 03 72 00 00       	call   c00198af <Krnl::panic(char const*)>
c00126ac:	83 c4 1c             	add    esp,0x1c
c00126af:	c3                   	ret    

c00126b0 <operator new[](unsigned long)>:
c00126b0:	e9 1f ce ff ff       	jmp    c000f4d4 <malloc>

c00126b5 <operator delete(void*, unsigned long)>:
c00126b5:	e9 3a ce ff ff       	jmp    c000f4f4 <rfree>

c00126ba <operator delete[](void*)>:
c00126ba:	e9 35 ce ff ff       	jmp    c000f4f4 <rfree>

c00126bf <operator delete[](void*, unsigned long)>:
c00126bf:	e9 30 ce ff ff       	jmp    c000f4f4 <rfree>

c00126c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126c4:	57                   	push   edi
c00126c5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126ca:	56                   	push   esi
c00126cb:	be 94 91 02 c0       	mov    esi,0xc0029194
c00126d0:	53                   	push   ebx
c00126d1:	83 ec 40             	sub    esp,0x40
c00126d4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126d8:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126dc:	fc                   	cld    
c00126dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126df:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126e3:	83 f9 3e             	cmp    ecx,0x3e
c00126e6:	7e 05                	jle    c00126ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126e8:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126ed:	89 df                	mov    edi,ebx
c00126ef:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126f3:	eb 02                	jmp    c00126f7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126f5:	89 c7                	mov    edi,eax
c00126f7:	31 d2                	xor    edx,edx
c00126f9:	46                   	inc    esi
c00126fa:	89 f8                	mov    eax,edi
c00126fc:	f7 f1                	div    ecx
c00126fe:	39 cf                	cmp    edi,ecx
c0012700:	73 f3                	jae    c00126f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012702:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012705:	eb 02                	jmp    c0012709 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012707:	89 c3                	mov    ebx,eax
c0012709:	31 d2                	xor    edx,edx
c001270b:	4e                   	dec    esi
c001270c:	89 d8                	mov    eax,ebx
c001270e:	f7 f1                	div    ecx
c0012710:	39 cb                	cmp    ebx,ecx
c0012712:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012716:	88 16                	mov    BYTE PTR [esi],dl
c0012718:	73 ed                	jae    c0012707 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001271a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001271e:	83 c4 40             	add    esp,0x40
c0012721:	5b                   	pop    ebx
c0012722:	5e                   	pop    esi
c0012723:	5f                   	pop    edi
c0012724:	c3                   	ret    

c0012725 <Dbg::logc(char)>:
c0012725:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012729:	ba fd 03 00 00       	mov    edx,0x3fd
c001272e:	ec                   	in     al,dx
c001272f:	a8 20                	test   al,0x20
c0012731:	74 fb                	je     c001272e <Dbg::logc(char)+0x9>
c0012733:	ba f8 03 00 00       	mov    edx,0x3f8
c0012738:	88 c8                	mov    al,cl
c001273a:	ee                   	out    dx,al
c001273b:	c3                   	ret    

c001273c <Dbg::logs(char*)>:
c001273c:	53                   	push   ebx
c001273d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012741:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012744:	84 c0                	test   al,al
c0012746:	74 0f                	je     c0012757 <Dbg::logs(char*)+0x1b>
c0012748:	50                   	push   eax
c0012749:	43                   	inc    ebx
c001274a:	e8 d6 ff ff ff       	call   c0012725 <Dbg::logc(char)>
c001274f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012752:	5a                   	pop    edx
c0012753:	84 c0                	test   al,al
c0012755:	75 f1                	jne    c0012748 <Dbg::logs(char*)+0xc>
c0012757:	5b                   	pop    ebx
c0012758:	c3                   	ret    

c0012759 <Dbg::logWriteInt(unsigned int)>:
c0012759:	83 ec 10             	sub    esp,0x10
c001275c:	6a 0a                	push   0xa
c001275e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012762:	50                   	push   eax
c0012763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012767:	e8 58 ff ff ff       	call   c00126c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001276c:	50                   	push   eax
c001276d:	e8 ca ff ff ff       	call   c001273c <Dbg::logs(char*)>
c0012772:	83 c4 20             	add    esp,0x20
c0012775:	c3                   	ret    

c0012776 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012776:	83 ec 10             	sub    esp,0x10
c0012779:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001277d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012781:	50                   	push   eax
c0012782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012786:	e8 39 ff ff ff       	call   c00126c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001278b:	50                   	push   eax
c001278c:	e8 ab ff ff ff       	call   c001273c <Dbg::logs(char*)>
c0012791:	83 c4 20             	add    esp,0x20
c0012794:	c3                   	ret    

c0012795 <Dbg::kprintf(char const*, ...)>:
c0012795:	55                   	push   ebp
c0012796:	57                   	push   edi
c0012797:	56                   	push   esi
c0012798:	53                   	push   ebx
c0012799:	83 ec 0c             	sub    esp,0xc
c001279c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00127a0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00127a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127ab:	84 c0                	test   al,al
c00127ad:	74 4a                	je     c00127f9 <Dbg::kprintf(char const*, ...)+0x64>
c00127af:	31 db                	xor    ebx,ebx
c00127b1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127b4:	3c 25                	cmp    al,0x25
c00127b6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127b9:	0f 85 e4 00 00 00    	jne    c00128a3 <Dbg::kprintf(char const*, ...)+0x10e>
c00127bf:	83 c3 02             	add    ebx,0x2
c00127c2:	8a 07                	mov    al,BYTE PTR [edi]
c00127c4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127c7:	83 e8 25             	sub    eax,0x25
c00127ca:	3c 53                	cmp    al,0x53
c00127cc:	0f 87 ba 00 00 00    	ja     c001288c <Dbg::kprintf(char const*, ...)+0xf7>
c00127d2:	0f b6 c0             	movzx  eax,al
c00127d5:	ff 24 85 d4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e2c]
c00127dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127e0:	89 c8                	mov    eax,ecx
c00127e2:	83 c1 04             	add    ecx,0x4
c00127e5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127e9:	ff 30                	push   DWORD PTR [eax]
c00127eb:	e8 4c ff ff ff       	call   c001273c <Dbg::logs(char*)>
c00127f0:	58                   	pop    eax
c00127f1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127f5:	84 c0                	test   al,al
c00127f7:	75 b8                	jne    c00127b1 <Dbg::kprintf(char const*, ...)+0x1c>
c00127f9:	83 c4 0c             	add    esp,0xc
c00127fc:	5b                   	pop    ebx
c00127fd:	5e                   	pop    esi
c00127fe:	5f                   	pop    edi
c00127ff:	5d                   	pop    ebp
c0012800:	c3                   	ret    
c0012801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012805:	89 d0                	mov    eax,edx
c0012807:	83 c2 04             	add    edx,0x4
c001280a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001280e:	ff 30                	push   DWORD PTR [eax]
c0012810:	e8 44 ff ff ff       	call   c0012759 <Dbg::logWriteInt(unsigned int)>
c0012815:	58                   	pop    eax
c0012816:	eb d9                	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012818:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001281c:	89 d0                	mov    eax,edx
c001281e:	83 c2 04             	add    edx,0x4
c0012821:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012824:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012828:	50                   	push   eax
c0012829:	e8 f7 fe ff ff       	call   c0012725 <Dbg::logc(char)>
c001282e:	58                   	pop    eax
c001282f:	eb c0                	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012831:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012835:	89 c8                	mov    eax,ecx
c0012837:	83 c1 04             	add    ecx,0x4
c001283a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001283e:	ff 30                	push   DWORD PTR [eax]
c0012840:	e8 14 ff ff ff       	call   c0012759 <Dbg::logWriteInt(unsigned int)>
c0012845:	5f                   	pop    edi
c0012846:	eb a9                	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012848:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001284c:	89 c8                	mov    eax,ecx
c001284e:	83 c1 04             	add    ecx,0x4
c0012851:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012855:	6a 10                	push   0x10
c0012857:	ff 30                	push   DWORD PTR [eax]
c0012859:	e8 18 ff ff ff       	call   c0012776 <Dbg::logWriteIntBase(unsigned int, int)>
c001285e:	59                   	pop    ecx
c001285f:	5f                   	pop    edi
c0012860:	eb 8f                	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012862:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012866:	89 d0                	mov    eax,edx
c0012868:	83 c2 08             	add    edx,0x8
c001286b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001286f:	6a 10                	push   0x10
c0012871:	ff 30                	push   DWORD PTR [eax]
c0012873:	e8 fe fe ff ff       	call   c0012776 <Dbg::logWriteIntBase(unsigned int, int)>
c0012878:	58                   	pop    eax
c0012879:	5a                   	pop    edx
c001287a:	e9 72 ff ff ff       	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c001287f:	6a 25                	push   0x25
c0012881:	e8 9f fe ff ff       	call   c0012725 <Dbg::logc(char)>
c0012886:	58                   	pop    eax
c0012887:	e9 65 ff ff ff       	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c001288c:	6a 25                	push   0x25
c001288e:	e8 92 fe ff ff       	call   c0012725 <Dbg::logc(char)>
c0012893:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012896:	50                   	push   eax
c0012897:	e8 89 fe ff ff       	call   c0012725 <Dbg::logc(char)>
c001289c:	5a                   	pop    edx
c001289d:	59                   	pop    ecx
c001289e:	e9 4e ff ff ff       	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c00128a3:	50                   	push   eax
c00128a4:	89 eb                	mov    ebx,ebp
c00128a6:	e8 7a fe ff ff       	call   c0012725 <Dbg::logc(char)>
c00128ab:	89 fd                	mov    ebp,edi
c00128ad:	58                   	pop    eax
c00128ae:	e9 3e ff ff ff       	jmp    c00127f1 <Dbg::kprintf(char const*, ...)+0x5c>
c00128b3:	90                   	nop

c00128b4 <File::read(unsigned long long, void*, int*)>:
c00128b4:	53                   	push   ebx
c00128b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128bd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128c4:	3c 19                	cmp    al,0x19
c00128c6:	77 35                	ja     c00128fd <File::read(unsigned long long, void*, int*)+0x49>
c00128c8:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c00128cf:	85 c0                	test   eax,eax
c00128d1:	74 2a                	je     c00128fd <File::read(unsigned long long, void*, int*)+0x49>
c00128d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128d9:	85 c0                	test   eax,eax
c00128db:	74 20                	je     c00128fd <File::read(unsigned long long, void*, int*)+0x49>
c00128dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128e1:	74 21                	je     c0012904 <File::read(unsigned long long, void*, int*)+0x50>
c00128e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128e5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128e9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128f7:	5b                   	pop    ebx
c00128f8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128fb:	ff e0                	jmp    eax
c00128fd:	b8 0b 00 00 00       	mov    eax,0xb
c0012902:	eb 05                	jmp    c0012909 <File::read(unsigned long long, void*, int*)+0x55>
c0012904:	b8 05 00 00 00       	mov    eax,0x5
c0012909:	5b                   	pop    ebx
c001290a:	c3                   	ret    
c001290b:	90                   	nop

c001290c <File::write(unsigned long long, void*, int*)>:
c001290c:	53                   	push   ebx
c001290d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012915:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001291c:	3c 19                	cmp    al,0x19
c001291e:	77 35                	ja     c0012955 <File::write(unsigned long long, void*, int*)+0x49>
c0012920:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c0012927:	85 c0                	test   eax,eax
c0012929:	74 2a                	je     c0012955 <File::write(unsigned long long, void*, int*)+0x49>
c001292b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012931:	85 c0                	test   eax,eax
c0012933:	74 20                	je     c0012955 <File::write(unsigned long long, void*, int*)+0x49>
c0012935:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012939:	74 21                	je     c001295c <File::write(unsigned long long, void*, int*)+0x50>
c001293b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001293d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012941:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001294b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001294f:	5b                   	pop    ebx
c0012950:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012953:	ff e0                	jmp    eax
c0012955:	b8 0b 00 00 00       	mov    eax,0xb
c001295a:	eb 05                	jmp    c0012961 <File::write(unsigned long long, void*, int*)+0x55>
c001295c:	b8 05 00 00 00       	mov    eax,0x5
c0012961:	5b                   	pop    ebx
c0012962:	c3                   	ret    
c0012963:	90                   	nop

c0012964 <Directory::read(unsigned long long, void*, int*)>:
c0012964:	53                   	push   ebx
c0012965:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012969:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001296d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012974:	3c 19                	cmp    al,0x19
c0012976:	77 35                	ja     c00129ad <Directory::read(unsigned long long, void*, int*)+0x49>
c0012978:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001297f:	85 c0                	test   eax,eax
c0012981:	74 2a                	je     c00129ad <Directory::read(unsigned long long, void*, int*)+0x49>
c0012983:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012989:	85 c0                	test   eax,eax
c001298b:	74 20                	je     c00129ad <Directory::read(unsigned long long, void*, int*)+0x49>
c001298d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012991:	74 21                	je     c00129b4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012993:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012995:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012999:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001299f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129a7:	5b                   	pop    ebx
c00129a8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129ab:	ff e0                	jmp    eax
c00129ad:	b8 0b 00 00 00       	mov    eax,0xb
c00129b2:	eb 05                	jmp    c00129b9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129b4:	b8 05 00 00 00       	mov    eax,0x5
c00129b9:	5b                   	pop    ebx
c00129ba:	c3                   	ret    
c00129bb:	90                   	nop

c00129bc <Directory::write(unsigned long long, void*, int*)>:
c00129bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129c7:	b8 0b 00 00 00       	mov    eax,0xb
c00129cc:	80 fa 19             	cmp    dl,0x19
c00129cf:	77 18                	ja     c00129e9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129d1:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c00129d8:	85 d2                	test   edx,edx
c00129da:	74 0d                	je     c00129e9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129dc:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129e3:	19 c0                	sbb    eax,eax
c00129e5:	83 e0 0a             	and    eax,0xa
c00129e8:	40                   	inc    eax
c00129e9:	c3                   	ret    

c00129ea <File::isAtty()>:
c00129ea:	31 c0                	xor    eax,eax
c00129ec:	c3                   	ret    
c00129ed:	90                   	nop

c00129ee <Directory::isAtty()>:
c00129ee:	31 c0                	xor    eax,eax
c00129f0:	c3                   	ret    
c00129f1:	90                   	nop

c00129f2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129f2:	b8 0a 00 00 00       	mov    eax,0xa
c00129f7:	c3                   	ret    

c00129f8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129f8:	b8 0a 00 00 00       	mov    eax,0xa
c00129fd:	c3                   	ret    

c00129fe <File::~File()>:
c00129fe:	83 ec 0c             	sub    esp,0xc
c0012a01:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0012a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0a:	89 10                	mov    DWORD PTR [eax],edx
c0012a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	50                   	push   eax
c0012a14:	e8 2b eb ff ff       	call   c0011544 <UnixFile::~UnixFile()>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	90                   	nop
c0012a1d:	83 c4 0c             	add    esp,0xc
c0012a20:	c3                   	ret    
c0012a21:	90                   	nop

c0012a22 <File::~File()>:
c0012a22:	83 ec 0c             	sub    esp,0xc
c0012a25:	83 ec 0c             	sub    esp,0xc
c0012a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a2c:	e8 cd ff ff ff       	call   c00129fe <File::~File()>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	83 ec 08             	sub    esp,0x8
c0012a37:	68 14 01 00 00       	push   0x114
c0012a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a40:	e8 70 fc ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	83 c4 0c             	add    esp,0xc
c0012a4b:	c3                   	ret    

c0012a4c <Directory::~Directory()>:
c0012a4c:	83 ec 0c             	sub    esp,0xc
c0012a4f:	ba ac 93 02 c0       	mov    edx,0xc00293ac
c0012a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a58:	89 10                	mov    DWORD PTR [eax],edx
c0012a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a5e:	83 ec 0c             	sub    esp,0xc
c0012a61:	50                   	push   eax
c0012a62:	e8 dd ea ff ff       	call   c0011544 <UnixFile::~UnixFile()>
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	90                   	nop
c0012a6b:	83 c4 0c             	add    esp,0xc
c0012a6e:	c3                   	ret    
c0012a6f:	90                   	nop

c0012a70 <Directory::~Directory()>:
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	83 ec 0c             	sub    esp,0xc
c0012a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a7a:	e8 cd ff ff ff       	call   c0012a4c <Directory::~Directory()>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	83 ec 08             	sub    esp,0x8
c0012a85:	68 14 01 00 00       	push   0x114
c0012a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a8e:	e8 22 fc ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	83 c4 0c             	add    esp,0xc
c0012a99:	c3                   	ret    

c0012a9a <Filesystem::Filesystem()>:
c0012a9a:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0012a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa3:	89 10                	mov    DWORD PTR [eax],edx
c0012aa5:	8b 15 e8 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cae8
c0012aab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab6:	a3 e8 ca 02 c0       	mov    ds:0xc002cae8,eax
c0012abb:	90                   	nop
c0012abc:	c3                   	ret    
c0012abd:	90                   	nop

c0012abe <Filesystem::~Filesystem()>:
c0012abe:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0012ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ac7:	89 10                	mov    DWORD PTR [eax],edx
c0012ac9:	90                   	nop
c0012aca:	c3                   	ret    
c0012acb:	90                   	nop

c0012acc <Filesystem::~Filesystem()>:
c0012acc:	83 ec 0c             	sub    esp,0xc
c0012acf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ad3:	e8 e6 ff ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c0012ad8:	83 c4 04             	add    esp,0x4
c0012adb:	83 ec 08             	sub    esp,0x8
c0012ade:	6a 08                	push   0x8
c0012ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae4:	e8 cc fb ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	83 c4 0c             	add    esp,0xc
c0012aef:	c3                   	ret    

c0012af0 <initVFS()>:
c0012af0:	83 ec 18             	sub    esp,0x18
c0012af3:	6a 08                	push   0x8
c0012af5:	e8 da c9 ff ff       	call   c000f4d4 <malloc>
c0012afa:	89 04 24             	mov    DWORD PTR [esp],eax
c0012afd:	e8 b0 d3 00 00       	call   c001feb2 <FAT::FAT()>
c0012b02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b09:	e8 c6 c9 ff ff       	call   c000f4d4 <malloc>
c0012b0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b11:	e8 12 e6 00 00       	call   c0021128 <ISO9660::ISO9660()>
c0012b16:	83 c4 1c             	add    esp,0x1c
c0012b19:	c3                   	ret    

c0012b1a <standardiseFiles(char*, char const*, char const*)>:
c0012b1a:	55                   	push   ebp
c0012b1b:	57                   	push   edi
c0012b1c:	56                   	push   esi
c0012b1d:	53                   	push   ebx
c0012b1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b24:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b2b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b32:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b39:	68 00 04 00 00       	push   0x400
c0012b3e:	6a 00                	push   0x0
c0012b40:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b44:	56                   	push   esi
c0012b45:	e8 41 db fe ff       	call   c000068b <memset>
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b51:	75 0b                	jne    c0012b5e <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b53:	50                   	push   eax
c0012b54:	50                   	push   eax
c0012b55:	57                   	push   edi
c0012b56:	56                   	push   esi
c0012b57:	e8 ce db fe ff       	call   c000072a <strcpy>
c0012b5c:	eb 41                	jmp    c0012b9f <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b5e:	8a 07                	mov    al,BYTE PTR [edi]
c0012b60:	3c 5c                	cmp    al,0x5c
c0012b62:	74 04                	je     c0012b68 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b64:	3c 2f                	cmp    al,0x2f
c0012b66:	75 18                	jne    c0012b80 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b68:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b6b:	3c 60                	cmp    al,0x60
c0012b6d:	7e 03                	jle    c0012b72 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b6f:	83 e8 20             	sub    eax,0x20
c0012b72:	88 04 24             	mov    BYTE PTR [esp],al
c0012b75:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b7c:	50                   	push   eax
c0012b7d:	50                   	push   eax
c0012b7e:	eb 18                	jmp    c0012b98 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b80:	50                   	push   eax
c0012b81:	50                   	push   eax
c0012b82:	55                   	push   ebp
c0012b83:	56                   	push   esi
c0012b84:	e8 a1 db fe ff       	call   c000072a <strcpy>
c0012b89:	5a                   	pop    edx
c0012b8a:	59                   	pop    ecx
c0012b8b:	68 a6 a7 02 c0       	push   0xc002a7a6
c0012b90:	56                   	push   esi
c0012b91:	e8 4b dc fe ff       	call   c00007e1 <strcat>
c0012b96:	5d                   	pop    ebp
c0012b97:	58                   	pop    eax
c0012b98:	57                   	push   edi
c0012b99:	56                   	push   esi
c0012b9a:	e8 42 dc fe ff       	call   c00007e1 <strcat>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012ba5:	3c 60                	cmp    al,0x60
c0012ba7:	7e 03                	jle    c0012bac <standardiseFiles(char*, char const*, char const*)+0x92>
c0012ba9:	83 e8 20             	sub    eax,0x20
c0012bac:	88 04 24             	mov    BYTE PTR [esp],al
c0012baf:	88 03                	mov    BYTE PTR [ebx],al
c0012bb1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bb8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bbe:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bc2:	bf 03 00 00 00       	mov    edi,0x3
c0012bc7:	b8 03 00 00 00       	mov    eax,0x3
c0012bcc:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bcf:	84 d2                	test   dl,dl
c0012bd1:	0f 84 91 00 00 00    	je     c0012c68 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bd7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bda:	80 fa 5c             	cmp    dl,0x5c
c0012bdd:	74 05                	je     c0012be4 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012bdf:	80 fa 2f             	cmp    dl,0x2f
c0012be2:	75 12                	jne    c0012bf6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012be4:	89 c5                	mov    ebp,eax
c0012be6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012beb:	74 09                	je     c0012bf6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bed:	40                   	inc    eax
c0012bee:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bf2:	89 cf                	mov    edi,ecx
c0012bf4:	eb d6                	jmp    c0012bcc <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bf6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bfb:	75 5b                	jne    c0012c58 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bfd:	80 fa 2e             	cmp    dl,0x2e
c0012c00:	75 56                	jne    c0012c58 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c02:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c06:	74 19                	je     c0012c21 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012c08:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c0d:	74 53                	je     c0012c62 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c0f:	89 f9                	mov    ecx,edi
c0012c11:	41                   	inc    ecx
c0012c12:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c15:	80 fa 2f             	cmp    dl,0x2f
c0012c18:	74 f7                	je     c0012c11 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c1a:	80 fa 5c             	cmp    dl,0x5c
c0012c1d:	74 f2                	je     c0012c11 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c1f:	eb d1                	jmp    c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c21:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c26:	74 3a                	je     c0012c62 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c28:	83 f8 03             	cmp    eax,0x3
c0012c2b:	74 c5                	je     c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c2d:	41                   	inc    ecx
c0012c2e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c31:	80 fa 2f             	cmp    dl,0x2f
c0012c34:	74 f7                	je     c0012c2d <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c36:	80 fa 5c             	cmp    dl,0x5c
c0012c39:	74 f2                	je     c0012c2d <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c3b:	48                   	dec    eax
c0012c3c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c40:	75 06                	jne    c0012c48 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c42:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c46:	eb f3                	jmp    c0012c3b <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c48:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c4c:	74 07                	je     c0012c55 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c4e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c52:	48                   	dec    eax
c0012c53:	eb f3                	jmp    c0012c48 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c55:	40                   	inc    eax
c0012c56:	eb 9a                	jmp    c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c58:	80 fa 2f             	cmp    dl,0x2f
c0012c5b:	74 95                	je     c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c5d:	80 fa 5c             	cmp    dl,0x5c
c0012c60:	74 90                	je     c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c62:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c65:	40                   	inc    eax
c0012c66:	eb 8a                	jmp    c0012bf2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c68:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c6c:	83 ec 0c             	sub    esp,0xc
c0012c6f:	53                   	push   ebx
c0012c70:	e8 33 da fe ff       	call   c00006a8 <strlen>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c7d:	75 26                	jne    c0012ca5 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c7f:	83 ec 0c             	sub    esp,0xc
c0012c82:	53                   	push   ebx
c0012c83:	e8 20 da fe ff       	call   c00006a8 <strlen>
c0012c88:	83 c4 10             	add    esp,0x10
c0012c8b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c90:	74 26                	je     c0012cb8 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	53                   	push   ebx
c0012c96:	e8 0d da fe ff       	call   c00006a8 <strlen>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ca3:	eb c7                	jmp    c0012c6c <standardiseFiles(char*, char const*, char const*)+0x152>
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	53                   	push   ebx
c0012ca9:	e8 fa d9 fe ff       	call   c00006a8 <strlen>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cb6:	74 c7                	je     c0012c7f <standardiseFiles(char*, char const*, char const*)+0x165>
c0012cb8:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cbe:	5b                   	pop    ebx
c0012cbf:	5e                   	pop    esi
c0012cc0:	5f                   	pop    edi
c0012cc1:	5d                   	pop    ebp
c0012cc2:	c3                   	ret    
c0012cc3:	90                   	nop

c0012cc4 <File::File(char const*, Process*)>:
c0012cc4:	83 ec 0c             	sub    esp,0xc
c0012cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ccb:	83 ec 08             	sub    esp,0x8
c0012cce:	6a 00                	push   0x0
c0012cd0:	50                   	push   eax
c0012cd1:	e8 8c e6 ff ff       	call   c0011362 <UnixFile::UnixFile(int)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0012cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce2:	89 10                	mov    DWORD PTR [eax],edx
c0012ce4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ce8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf2:	83 c0 0d             	add    eax,0xd
c0012cf5:	83 ec 04             	sub    esp,0x4
c0012cf8:	52                   	push   edx
c0012cf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfd:	50                   	push   eax
c0012cfe:	e8 17 fe ff ff       	call   c0012b1a <standardiseFiles(char*, char const*, char const*)>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d0d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d14:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d22:	90                   	nop
c0012d23:	83 c4 0c             	add    esp,0xc
c0012d26:	c3                   	ret    
c0012d27:	90                   	nop

c0012d28 <File::open(FileOpenMode)>:
c0012d28:	53                   	push   ebx
c0012d29:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2e:	83 ec 08             	sub    esp,0x8
c0012d31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d35:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d3c:	80 fa 19             	cmp    dl,0x19
c0012d3f:	77 40                	ja     c0012d81 <File::open(FileOpenMode)+0x59>
c0012d41:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012d48:	85 d2                	test   edx,edx
c0012d4a:	74 35                	je     c0012d81 <File::open(FileOpenMode)+0x59>
c0012d4c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d52:	85 d2                	test   edx,edx
c0012d54:	74 2b                	je     c0012d81 <File::open(FileOpenMode)+0x59>
c0012d56:	b8 06 00 00 00       	mov    eax,0x6
c0012d5b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d5f:	75 20                	jne    c0012d81 <File::open(FileOpenMode)+0x59>
c0012d61:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d63:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d6d:	51                   	push   ecx
c0012d6e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d71:	51                   	push   ecx
c0012d72:	52                   	push   edx
c0012d73:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	85 c0                	test   eax,eax
c0012d7b:	75 04                	jne    c0012d81 <File::open(FileOpenMode)+0x59>
c0012d7d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d81:	83 c4 08             	add    esp,0x8
c0012d84:	5b                   	pop    ebx
c0012d85:	c3                   	ret    

c0012d86 <File::close()>:
c0012d86:	53                   	push   ebx
c0012d87:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8c:	83 ec 08             	sub    esp,0x8
c0012d8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d93:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d9a:	80 fa 19             	cmp    dl,0x19
c0012d9d:	77 41                	ja     c0012de0 <File::close()+0x5a>
c0012d9f:	8b 1c 95 80 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3080]
c0012da6:	85 db                	test   ebx,ebx
c0012da8:	74 36                	je     c0012de0 <File::close()+0x5a>
c0012daa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012db1:	74 2d                	je     c0012de0 <File::close()+0x5a>
c0012db3:	b8 05 00 00 00       	mov    eax,0x5
c0012db8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dbc:	74 22                	je     c0012de0 <File::close()+0x5a>
c0012dbe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dc2:	8b 04 95 80 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3080]
c0012dc9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dcf:	53                   	push   ebx
c0012dd0:	53                   	push   ebx
c0012dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dd3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dd9:	50                   	push   eax
c0012dda:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	83 c4 08             	add    esp,0x8
c0012de3:	5b                   	pop    ebx
c0012de4:	c3                   	ret    
c0012de5:	90                   	nop

c0012de6 <File::seek(unsigned long long)>:
c0012de6:	56                   	push   esi
c0012de7:	53                   	push   ebx
c0012de8:	b8 0b 00 00 00       	mov    eax,0xb
c0012ded:	51                   	push   ecx
c0012dee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012df2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012df6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012dfd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e01:	80 fa 19             	cmp    dl,0x19
c0012e04:	77 31                	ja     c0012e37 <File::seek(unsigned long long)+0x51>
c0012e06:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012e0d:	85 d2                	test   edx,edx
c0012e0f:	74 26                	je     c0012e37 <File::seek(unsigned long long)+0x51>
c0012e11:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e17:	85 d2                	test   edx,edx
c0012e19:	74 1c                	je     c0012e37 <File::seek(unsigned long long)+0x51>
c0012e1b:	b8 05 00 00 00       	mov    eax,0x5
c0012e20:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e24:	74 11                	je     c0012e37 <File::seek(unsigned long long)+0x51>
c0012e26:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e28:	53                   	push   ebx
c0012e29:	51                   	push   ecx
c0012e2a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e30:	52                   	push   edx
c0012e31:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	5a                   	pop    edx
c0012e38:	5b                   	pop    ebx
c0012e39:	5e                   	pop    esi
c0012e3a:	c3                   	ret    
c0012e3b:	90                   	nop

c0012e3c <File::tell(unsigned long long*)>:
c0012e3c:	83 ec 0c             	sub    esp,0xc
c0012e3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e48:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4f:	80 fa 19             	cmp    dl,0x19
c0012e52:	77 34                	ja     c0012e88 <File::tell(unsigned long long*)+0x4c>
c0012e54:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012e5b:	85 d2                	test   edx,edx
c0012e5d:	74 29                	je     c0012e88 <File::tell(unsigned long long*)+0x4c>
c0012e5f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e65:	85 d2                	test   edx,edx
c0012e67:	74 1f                	je     c0012e88 <File::tell(unsigned long long*)+0x4c>
c0012e69:	b8 05 00 00 00       	mov    eax,0x5
c0012e6e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e72:	74 14                	je     c0012e88 <File::tell(unsigned long long*)+0x4c>
c0012e74:	50                   	push   eax
c0012e75:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e7b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e81:	52                   	push   edx
c0012e82:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e85:	83 c4 10             	add    esp,0x10
c0012e88:	83 c4 0c             	add    esp,0xc
c0012e8b:	c3                   	ret    

c0012e8c <File::rewind()>:
c0012e8c:	83 ec 10             	sub    esp,0x10
c0012e8f:	6a 00                	push   0x0
c0012e91:	6a 00                	push   0x0
c0012e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e97:	e8 4a ff ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c0012e9c:	83 c4 1c             	add    esp,0x1c
c0012e9f:	c3                   	ret    

c0012ea0 <File::unlink()>:
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb3:	80 f9 19             	cmp    cl,0x19
c0012eb6:	77 2f                	ja     c0012ee7 <File::unlink()+0x47>
c0012eb8:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012ebf:	85 c9                	test   ecx,ecx
c0012ec1:	74 24                	je     c0012ee7 <File::unlink()+0x47>
c0012ec3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 1a                	je     c0012ee7 <File::unlink()+0x47>
c0012ecd:	b8 06 00 00 00       	mov    eax,0x6
c0012ed2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ed6:	75 0f                	jne    c0012ee7 <File::unlink()+0x47>
c0012ed8:	83 c2 0d             	add    edx,0xd
c0012edb:	50                   	push   eax
c0012edc:	50                   	push   eax
c0012edd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012edf:	52                   	push   edx
c0012ee0:	51                   	push   ecx
c0012ee1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ee4:	83 c4 10             	add    esp,0x10
c0012ee7:	83 c4 0c             	add    esp,0xc
c0012eea:	c3                   	ret    
c0012eeb:	90                   	nop

c0012eec <File::rename(char const*)>:
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ef8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eff:	80 f9 19             	cmp    cl,0x19
c0012f02:	77 32                	ja     c0012f36 <File::rename(char const*)+0x4a>
c0012f04:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012f0b:	85 c9                	test   ecx,ecx
c0012f0d:	74 27                	je     c0012f36 <File::rename(char const*)+0x4a>
c0012f0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f15:	85 c9                	test   ecx,ecx
c0012f17:	74 1d                	je     c0012f36 <File::rename(char const*)+0x4a>
c0012f19:	b8 06 00 00 00       	mov    eax,0x6
c0012f1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f22:	75 12                	jne    c0012f36 <File::rename(char const*)+0x4a>
c0012f24:	83 c2 0d             	add    edx,0xd
c0012f27:	50                   	push   eax
c0012f28:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f2e:	52                   	push   edx
c0012f2f:	51                   	push   ecx
c0012f30:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	83 c4 0c             	add    esp,0xc
c0012f39:	c3                   	ret    

c0012f3a <File::chfatattr(unsigned char, unsigned char)>:
c0012f3a:	57                   	push   edi
c0012f3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f40:	56                   	push   esi
c0012f41:	53                   	push   ebx
c0012f42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f55:	80 f9 19             	cmp    cl,0x19
c0012f58:	77 37                	ja     c0012f91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f5a:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012f61:	85 c9                	test   ecx,ecx
c0012f63:	74 2c                	je     c0012f91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f6b:	85 c9                	test   ecx,ecx
c0012f6d:	74 22                	je     c0012f91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f6f:	b8 06 00 00 00       	mov    eax,0x6
c0012f74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f78:	75 17                	jne    c0012f91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f7a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f7c:	89 f0                	mov    eax,esi
c0012f7e:	83 c2 0d             	add    edx,0xd
c0012f81:	0f b6 f0             	movzx  esi,al
c0012f84:	0f b6 db             	movzx  ebx,bl
c0012f87:	56                   	push   esi
c0012f88:	53                   	push   ebx
c0012f89:	52                   	push   edx
c0012f8a:	51                   	push   ecx
c0012f8b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	5b                   	pop    ebx
c0012f92:	5e                   	pop    esi
c0012f93:	5f                   	pop    edi
c0012f94:	c3                   	ret    
c0012f95:	90                   	nop

c0012f96 <File::exists()>:
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	31 c0                	xor    eax,eax
c0012f9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f9f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fa6:	80 f9 19             	cmp    cl,0x19
c0012fa9:	77 24                	ja     c0012fcf <File::exists()+0x39>
c0012fab:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012fb2:	85 c9                	test   ecx,ecx
c0012fb4:	74 19                	je     c0012fcf <File::exists()+0x39>
c0012fb6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fbc:	85 c9                	test   ecx,ecx
c0012fbe:	74 0f                	je     c0012fcf <File::exists()+0x39>
c0012fc0:	83 c2 0d             	add    edx,0xd
c0012fc3:	50                   	push   eax
c0012fc4:	50                   	push   eax
c0012fc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc7:	52                   	push   edx
c0012fc8:	51                   	push   ecx
c0012fc9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	83 c4 0c             	add    esp,0xc
c0012fd2:	c3                   	ret    
c0012fd3:	90                   	nop

c0012fd4 <File::stat(unsigned long long*, bool*)>:
c0012fd4:	56                   	push   esi
c0012fd5:	53                   	push   ebx
c0012fd6:	50                   	push   eax
c0012fd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fe0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fe4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012feb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fef:	80 f9 19             	cmp    cl,0x19
c0012ff2:	77 3d                	ja     c0013031 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ff4:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012ffb:	85 c9                	test   ecx,ecx
c0012ffd:	74 32                	je     c0013031 <File::stat(unsigned long long*, bool*)+0x5d>
c0012fff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013005:	85 c9                	test   ecx,ecx
c0013007:	74 28                	je     c0013031 <File::stat(unsigned long long*, bool*)+0x5d>
c0013009:	8b 01                	mov    eax,DWORD PTR [ecx]
c001300b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001300f:	74 13                	je     c0013024 <File::stat(unsigned long long*, bool*)+0x50>
c0013011:	83 ec 04             	sub    esp,0x4
c0013014:	56                   	push   esi
c0013015:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001301b:	51                   	push   ecx
c001301c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001301f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013022:	eb 0a                	jmp    c001302e <File::stat(unsigned long long*, bool*)+0x5a>
c0013024:	53                   	push   ebx
c0013025:	83 c2 0d             	add    edx,0xd
c0013028:	56                   	push   esi
c0013029:	52                   	push   edx
c001302a:	51                   	push   ecx
c001302b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	5a                   	pop    edx
c0013032:	5b                   	pop    ebx
c0013033:	5e                   	pop    esi
c0013034:	c3                   	ret    

c0013035 <getcwd(Process*, char*, int)>:
c0013035:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013039:	31 c0                	xor    eax,eax
c001303b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001303e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013042:	7d 15                	jge    c0013059 <getcwd(Process*, char*, int)+0x24>
c0013044:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013048:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001304f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013052:	84 c9                	test   cl,cl
c0013054:	74 06                	je     c001305c <getcwd(Process*, char*, int)+0x27>
c0013056:	40                   	inc    eax
c0013057:	eb e2                	jmp    c001303b <getcwd(Process*, char*, int)+0x6>
c0013059:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001305c:	31 c0                	xor    eax,eax
c001305e:	c3                   	ret    

c001305f <setcwd(Process*, char*)>:
c001305f:	55                   	push   ebp
c0013060:	57                   	push   edi
c0013061:	56                   	push   esi
c0013062:	53                   	push   ebx
c0013063:	81 ec 20 02 00 00    	sub    esp,0x220
c0013069:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013070:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013076:	57                   	push   edi
c0013077:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001307e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013082:	56                   	push   esi
c0013083:	e8 92 fa ff ff       	call   c0012b1a <standardiseFiles(char*, char const*, char const*)>
c0013088:	89 34 24             	mov    DWORD PTR [esp],esi
c001308b:	e8 18 d6 fe ff       	call   c00006a8 <strlen>
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	83 f8 02             	cmp    eax,0x2
c0013096:	77 17                	ja     c00130af <setcwd(Process*, char*)+0x50>
c0013098:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001309d:	83 e8 41             	sub    eax,0x41
c00130a0:	83 f8 19             	cmp    eax,0x19
c00130a3:	76 24                	jbe    c00130c9 <setcwd(Process*, char*)+0x6a>
c00130a5:	b8 03 00 00 00       	mov    eax,0x3
c00130aa:	e9 e0 00 00 00       	jmp    c001318f <setcwd(Process*, char*)+0x130>
c00130af:	83 ec 0c             	sub    esp,0xc
c00130b2:	56                   	push   esi
c00130b3:	e8 f0 d5 fe ff       	call   c00006a8 <strlen>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	83 f8 03             	cmp    eax,0x3
c00130be:	75 34                	jne    c00130f4 <setcwd(Process*, char*)+0x95>
c00130c0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130c5:	75 2d                	jne    c00130f4 <setcwd(Process*, char*)+0x95>
c00130c7:	eb cf                	jmp    c0013098 <setcwd(Process*, char*)+0x39>
c00130c9:	8b 14 85 80 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3080]
c00130d0:	b8 05 00 00 00       	mov    eax,0x5
c00130d5:	85 d2                	test   edx,edx
c00130d7:	0f 84 b2 00 00 00    	je     c001318f <setcwd(Process*, char*)+0x130>
c00130dd:	b8 06 00 00 00       	mov    eax,0x6
c00130e2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130e9:	0f 85 92 00 00 00    	jne    c0013181 <setcwd(Process*, char*)+0x122>
c00130ef:	e9 9b 00 00 00       	jmp    c001318f <setcwd(Process*, char*)+0x130>
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	68 14 01 00 00       	push   0x114
c00130fc:	e8 d3 c3 ff ff       	call   c000f4d4 <malloc>
c0013101:	83 c4 0c             	add    esp,0xc
c0013104:	89 c3                	mov    ebx,eax
c0013106:	55                   	push   ebp
c0013107:	56                   	push   esi
c0013108:	50                   	push   eax
c0013109:	e8 b6 fb ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001310e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013113:	83 c4 0c             	add    esp,0xc
c0013116:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001311a:	50                   	push   eax
c001311b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001311f:	50                   	push   eax
c0013120:	53                   	push   ebx
c0013121:	e8 ae fe ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c0013126:	83 c4 10             	add    esp,0x10
c0013129:	83 f8 02             	cmp    eax,0x2
c001312c:	74 04                	je     c0013132 <setcwd(Process*, char*)+0xd3>
c001312e:	85 c0                	test   eax,eax
c0013130:	74 1c                	je     c001314e <setcwd(Process*, char*)+0xef>
c0013132:	b8 01 00 00 00       	mov    eax,0x1
c0013137:	85 db                	test   ebx,ebx
c0013139:	74 54                	je     c001318f <setcwd(Process*, char*)+0x130>
c001313b:	83 ec 0c             	sub    esp,0xc
c001313e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013140:	53                   	push   ebx
c0013141:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	b8 01 00 00 00       	mov    eax,0x1
c001314c:	eb 41                	jmp    c001318f <setcwd(Process*, char*)+0x130>
c001314e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013153:	75 1c                	jne    c0013171 <setcwd(Process*, char*)+0x112>
c0013155:	b8 02 00 00 00       	mov    eax,0x2
c001315a:	85 db                	test   ebx,ebx
c001315c:	74 31                	je     c001318f <setcwd(Process*, char*)+0x130>
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013163:	53                   	push   ebx
c0013164:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	b8 02 00 00 00       	mov    eax,0x2
c001316f:	eb 1e                	jmp    c001318f <setcwd(Process*, char*)+0x130>
c0013171:	85 db                	test   ebx,ebx
c0013173:	74 0c                	je     c0013181 <setcwd(Process*, char*)+0x122>
c0013175:	83 ec 0c             	sub    esp,0xc
c0013178:	8b 03                	mov    eax,DWORD PTR [ebx]
c001317a:	53                   	push   ebx
c001317b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	50                   	push   eax
c0013182:	50                   	push   eax
c0013183:	56                   	push   esi
c0013184:	57                   	push   edi
c0013185:	e8 a0 d5 fe ff       	call   c000072a <strcpy>
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	31 c0                	xor    eax,eax
c001318f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013195:	5b                   	pop    ebx
c0013196:	5e                   	pop    esi
c0013197:	5f                   	pop    edi
c0013198:	5d                   	pop    ebp
c0013199:	c3                   	ret    

c001319a <Directory::Directory(char const*, Process*)>:
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a1:	83 ec 08             	sub    esp,0x8
c00131a4:	6a 00                	push   0x0
c00131a6:	50                   	push   eax
c00131a7:	e8 b6 e1 ff ff       	call   c0011362 <UnixFile::UnixFile(int)>
c00131ac:	83 c4 10             	add    esp,0x10
c00131af:	ba ac 93 02 c0       	mov    edx,0xc00293ac
c00131b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b8:	89 10                	mov    DWORD PTR [eax],edx
c00131ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c8:	83 c0 0d             	add    eax,0xd
c00131cb:	83 ec 04             	sub    esp,0x4
c00131ce:	52                   	push   edx
c00131cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d3:	50                   	push   eax
c00131d4:	e8 41 f9 ff ff       	call   c0012b1a <standardiseFiles(char*, char const*, char const*)>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131e3:	8d 50 bf             	lea    edx,[eax-0x41]
c00131e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131f8:	90                   	nop
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	c3                   	ret    
c00131fd:	90                   	nop

c00131fe <Directory::open()>:
c00131fe:	53                   	push   ebx
c00131ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013204:	83 ec 08             	sub    esp,0x8
c0013207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001320b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013212:	80 fa 19             	cmp    dl,0x19
c0013215:	77 3d                	ja     c0013254 <Directory::open()+0x56>
c0013217:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c001321e:	85 d2                	test   edx,edx
c0013220:	74 32                	je     c0013254 <Directory::open()+0x56>
c0013222:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013228:	85 d2                	test   edx,edx
c001322a:	74 28                	je     c0013254 <Directory::open()+0x56>
c001322c:	b8 06 00 00 00       	mov    eax,0x6
c0013231:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013235:	75 1d                	jne    c0013254 <Directory::open()+0x56>
c0013237:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001323d:	50                   	push   eax
c001323e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013240:	51                   	push   ecx
c0013241:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013244:	51                   	push   ecx
c0013245:	52                   	push   edx
c0013246:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	85 c0                	test   eax,eax
c001324e:	75 04                	jne    c0013254 <Directory::open()+0x56>
c0013250:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013254:	83 c4 08             	add    esp,0x8
c0013257:	5b                   	pop    ebx
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Directory::close()>:
c001325a:	53                   	push   ebx
c001325b:	b8 0b 00 00 00       	mov    eax,0xb
c0013260:	83 ec 08             	sub    esp,0x8
c0013263:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013267:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001326e:	80 fa 19             	cmp    dl,0x19
c0013271:	77 41                	ja     c00132b4 <Directory::close()+0x5a>
c0013273:	8b 1c 95 80 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3080]
c001327a:	85 db                	test   ebx,ebx
c001327c:	74 36                	je     c00132b4 <Directory::close()+0x5a>
c001327e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013285:	74 2d                	je     c00132b4 <Directory::close()+0x5a>
c0013287:	b8 05 00 00 00       	mov    eax,0x5
c001328c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013290:	74 22                	je     c00132b4 <Directory::close()+0x5a>
c0013292:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013296:	8b 04 95 80 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3080]
c001329d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132a3:	53                   	push   ebx
c00132a4:	53                   	push   ebx
c00132a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00132a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132ad:	50                   	push   eax
c00132ae:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132b1:	83 c4 10             	add    esp,0x10
c00132b4:	83 c4 08             	add    esp,0x8
c00132b7:	5b                   	pop    ebx
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop

c00132ba <Directory::unlink()>:
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	b8 0b 00 00 00       	mov    eax,0xb
c00132c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132cd:	80 f9 19             	cmp    cl,0x19
c00132d0:	77 2f                	ja     c0013301 <Directory::unlink()+0x47>
c00132d2:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c00132d9:	85 c9                	test   ecx,ecx
c00132db:	74 24                	je     c0013301 <Directory::unlink()+0x47>
c00132dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132e3:	85 c9                	test   ecx,ecx
c00132e5:	74 1a                	je     c0013301 <Directory::unlink()+0x47>
c00132e7:	b8 06 00 00 00       	mov    eax,0x6
c00132ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132f0:	75 0f                	jne    c0013301 <Directory::unlink()+0x47>
c00132f2:	83 c2 0d             	add    edx,0xd
c00132f5:	50                   	push   eax
c00132f6:	50                   	push   eax
c00132f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f9:	52                   	push   edx
c00132fa:	51                   	push   ecx
c00132fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	83 c4 0c             	add    esp,0xc
c0013304:	c3                   	ret    
c0013305:	90                   	nop

c0013306 <Directory::rename(char const*)>:
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	b8 0b 00 00 00       	mov    eax,0xb
c001330e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013312:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013319:	80 f9 19             	cmp    cl,0x19
c001331c:	77 32                	ja     c0013350 <Directory::rename(char const*)+0x4a>
c001331e:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0013325:	85 c9                	test   ecx,ecx
c0013327:	74 27                	je     c0013350 <Directory::rename(char const*)+0x4a>
c0013329:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001332f:	85 c9                	test   ecx,ecx
c0013331:	74 1d                	je     c0013350 <Directory::rename(char const*)+0x4a>
c0013333:	b8 06 00 00 00       	mov    eax,0x6
c0013338:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001333c:	75 12                	jne    c0013350 <Directory::rename(char const*)+0x4a>
c001333e:	83 c2 0d             	add    edx,0xd
c0013341:	50                   	push   eax
c0013342:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013344:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013348:	52                   	push   edx
c0013349:	51                   	push   ecx
c001334a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	83 c4 0c             	add    esp,0xc
c0013353:	c3                   	ret    

c0013354 <Directory::exists()>:
c0013354:	83 ec 0c             	sub    esp,0xc
c0013357:	31 c0                	xor    eax,eax
c0013359:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001335d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013364:	80 f9 19             	cmp    cl,0x19
c0013367:	77 24                	ja     c001338d <Directory::exists()+0x39>
c0013369:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0013370:	85 c9                	test   ecx,ecx
c0013372:	74 19                	je     c001338d <Directory::exists()+0x39>
c0013374:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337a:	85 c9                	test   ecx,ecx
c001337c:	74 0f                	je     c001338d <Directory::exists()+0x39>
c001337e:	83 c2 0d             	add    edx,0xd
c0013381:	50                   	push   eax
c0013382:	50                   	push   eax
c0013383:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013385:	52                   	push   edx
c0013386:	51                   	push   ecx
c0013387:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	83 c4 0c             	add    esp,0xc
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <Directory::read(dirent*)>:
c0013392:	83 ec 1c             	sub    esp,0x1c
c0013395:	b8 0b 00 00 00       	mov    eax,0xb
c001339a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001339e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133a5:	80 fa 19             	cmp    dl,0x19
c00133a8:	77 30                	ja     c00133da <Directory::read(dirent*)+0x48>
c00133aa:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c00133b1:	85 d2                	test   edx,edx
c00133b3:	74 25                	je     c00133da <Directory::read(dirent*)+0x48>
c00133b5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133bc:	74 1c                	je     c00133da <Directory::read(dirent*)+0x48>
c00133be:	83 ec 0c             	sub    esp,0xc
c00133c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133c7:	52                   	push   edx
c00133c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133cc:	6a 00                	push   0x0
c00133ce:	68 10 01 00 00       	push   0x110
c00133d3:	51                   	push   ecx
c00133d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133d7:	83 c4 20             	add    esp,0x20
c00133da:	83 c4 1c             	add    esp,0x1c
c00133dd:	c3                   	ret    

c00133de <Directory::create()>:
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	b8 0b 00 00 00       	mov    eax,0xb
c00133e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133f1:	80 f9 19             	cmp    cl,0x19
c00133f4:	77 2f                	ja     c0013425 <Directory::create()+0x47>
c00133f6:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c00133fd:	85 c9                	test   ecx,ecx
c00133ff:	74 24                	je     c0013425 <Directory::create()+0x47>
c0013401:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013407:	85 c9                	test   ecx,ecx
c0013409:	74 1a                	je     c0013425 <Directory::create()+0x47>
c001340b:	b8 06 00 00 00       	mov    eax,0x6
c0013410:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013414:	75 0f                	jne    c0013425 <Directory::create()+0x47>
c0013416:	83 c2 0d             	add    edx,0xd
c0013419:	50                   	push   eax
c001341a:	50                   	push   eax
c001341b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001341d:	52                   	push   edx
c001341e:	51                   	push   ecx
c001341f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	83 c4 0c             	add    esp,0xc
c0013428:	c3                   	ret    
c0013429:	90                   	nop

c001342a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001342a:	b8 0a 00 00 00       	mov    eax,0xa
c001342f:	c3                   	ret    

c0013430 <Bus::Bus(char const*)>:
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013437:	83 ec 08             	sub    esp,0x8
c001343a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343e:	50                   	push   eax
c001343f:	e8 30 09 00 00       	call   c0013d74 <Device::Device(char const*)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c001344c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013450:	89 10                	mov    DWORD PTR [eax],edx
c0013452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013456:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013460:	90                   	nop
c0013461:	83 c4 0c             	add    esp,0xc
c0013464:	c3                   	ret    
c0013465:	90                   	nop

c0013466 <Bus::~Bus()>:
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c001346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013472:	89 10                	mov    DWORD PTR [eax],edx
c0013474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013478:	83 ec 0c             	sub    esp,0xc
c001347b:	50                   	push   eax
c001347c:	e8 d5 05 00 00       	call   c0013a56 <Device::~Device()>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	90                   	nop
c0013485:	83 c4 0c             	add    esp,0xc
c0013488:	c3                   	ret    
c0013489:	90                   	nop

c001348a <Bus::~Bus()>:
c001348a:	83 ec 0c             	sub    esp,0xc
c001348d:	83 ec 0c             	sub    esp,0xc
c0013490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013494:	e8 cd ff ff ff       	call   c0013466 <Bus::~Bus()>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 ec 08             	sub    esp,0x8
c001349f:	68 58 01 00 00       	push   0x158
c00134a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a8:	e8 08 f2 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	83 c4 0c             	add    esp,0xc
c00134b3:	c3                   	ret    

c00134b4 <Buzzer::Buzzer(char const*)>:
c00134b4:	83 ec 0c             	sub    esp,0xc
c00134b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bb:	83 ec 08             	sub    esp,0x8
c00134be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c2:	50                   	push   eax
c00134c3:	e8 ac 08 00 00       	call   c0013d74 <Device::Device(char const*)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	89 10                	mov    DWORD PTR [eax],edx
c00134d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134f2:	90                   	nop
c00134f3:	83 c4 0c             	add    esp,0xc
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <Buzzer::~Buzzer()>:
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c0013500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013504:	89 10                	mov    DWORD PTR [eax],edx
c0013506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350a:	83 ec 0c             	sub    esp,0xc
c001350d:	50                   	push   eax
c001350e:	e8 43 05 00 00       	call   c0013a56 <Device::~Device()>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	90                   	nop
c0013517:	83 c4 0c             	add    esp,0xc
c001351a:	c3                   	ret    
c001351b:	90                   	nop

c001351c <Buzzer::~Buzzer()>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	83 ec 0c             	sub    esp,0xc
c0013522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013526:	e8 cd ff ff ff       	call   c00134f8 <Buzzer::~Buzzer()>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	83 ec 08             	sub    esp,0x8
c0013531:	68 5c 01 00 00       	push   0x15c
c0013536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353a:	e8 76 f1 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	83 c4 0c             	add    esp,0xc
c0013545:	c3                   	ret    

c0013546 <Buzzer::stop()>:
c0013546:	83 ec 14             	sub    esp,0x14
c0013549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001354d:	8b 10                	mov    edx,DWORD PTR [eax]
c001354f:	6a 00                	push   0x0
c0013551:	50                   	push   eax
c0013552:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013555:	83 c4 1c             	add    esp,0x1c
c0013558:	c3                   	ret    

c0013559 <beepThread(void*)>:
c0013559:	53                   	push   ebx
c001355a:	83 ec 08             	sub    esp,0x8
c001355d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013561:	e8 da 97 00 00       	call   c001cd40 <unlockScheduler()>
c0013566:	b8 40 42 0f 00       	mov    eax,0xf4240
c001356b:	52                   	push   edx
c001356c:	52                   	push   edx
c001356d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013573:	52                   	push   edx
c0013574:	50                   	push   eax
c0013575:	e8 14 9d 00 00       	call   c001d28e <nanoSleep(unsigned long long)>
c001357a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001357d:	e8 c4 ff ff ff       	call   c0013546 <Buzzer::stop()>
c0013582:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001358a:	83 c4 18             	add    esp,0x18
c001358d:	5b                   	pop    ebx
c001358e:	e9 41 9c 00 00       	jmp    c001d1d4 <blockTask(TaskState)>
c0013593:	90                   	nop

c0013594 <Buzzer::beep(int, int, bool)>:
c0013594:	57                   	push   edi
c0013595:	56                   	push   esi
c0013596:	53                   	push   ebx
c0013597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001359b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001359f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135a3:	52                   	push   edx
c00135a4:	52                   	push   edx
c00135a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00135a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ab:	56                   	push   esi
c00135ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	89 f8                	mov    eax,edi
c00135b4:	84 c0                	test   al,al
c00135b6:	74 1f                	je     c00135d7 <Buzzer::beep(int, int, bool)+0x43>
c00135b8:	50                   	push   eax
c00135b9:	50                   	push   eax
c00135ba:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135c0:	99                   	cdq    
c00135c1:	52                   	push   edx
c00135c2:	50                   	push   eax
c00135c3:	e8 c6 9c 00 00       	call   c001d28e <nanoSleep(unsigned long long)>
c00135c8:	83 c4 10             	add    esp,0x10
c00135cb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135cf:	5b                   	pop    ebx
c00135d0:	5e                   	pop    esi
c00135d1:	5f                   	pop    edi
c00135d2:	e9 6f ff ff ff       	jmp    c0013546 <Buzzer::stop()>
c00135d7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135dd:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00135e2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135ea:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135ee:	c7 44 24 14 59 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013559
c00135f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135fa:	5b                   	pop    ebx
c00135fb:	5e                   	pop    esi
c00135fc:	5f                   	pop    edi
c00135fd:	e9 6e 98 00 00       	jmp    c001ce70 <Process::createThread(void (*)(void*), void*, int)>

c0013602 <loadClockSettings()>:
c0013602:	c7 05 f4 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002caf4,0xa
c001360c:	c6 05 f1 ca 02 c0 00 	mov    BYTE PTR ds:0xc002caf1,0x0
c0013613:	c6 05 f0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caf0,0x1
c001361a:	c3                   	ret    
c001361b:	90                   	nop

c001361c <Clock::Clock(char const*)>:
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013623:	83 ec 08             	sub    esp,0x8
c0013626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001362a:	50                   	push   eax
c001362b:	e8 44 07 00 00       	call   c0013d74 <Device::Device(char const*)>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	ba 24 94 02 c0       	mov    edx,0xc0029424
c0013638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363c:	89 10                	mov    DWORD PTR [eax],edx
c001363e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013642:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001364c:	90                   	nop
c001364d:	83 c4 0c             	add    esp,0xc
c0013650:	c3                   	ret    
c0013651:	90                   	nop

c0013652 <Clock::~Clock()>:
c0013652:	83 ec 0c             	sub    esp,0xc
c0013655:	ba 24 94 02 c0       	mov    edx,0xc0029424
c001365a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365e:	89 10                	mov    DWORD PTR [eax],edx
c0013660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013664:	83 ec 0c             	sub    esp,0xc
c0013667:	50                   	push   eax
c0013668:	e8 e9 03 00 00       	call   c0013a56 <Device::~Device()>
c001366d:	83 c4 10             	add    esp,0x10
c0013670:	90                   	nop
c0013671:	83 c4 0c             	add    esp,0xc
c0013674:	c3                   	ret    
c0013675:	90                   	nop

c0013676 <Clock::~Clock()>:
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	83 ec 0c             	sub    esp,0xc
c001367c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013680:	e8 cd ff ff ff       	call   c0013652 <Clock::~Clock()>
c0013685:	83 c4 10             	add    esp,0x10
c0013688:	83 ec 08             	sub    esp,0x8
c001368b:	68 58 01 00 00       	push   0x158
c0013690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013694:	e8 1c f0 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0013699:	83 c4 10             	add    esp,0x10
c001369c:	83 c4 0c             	add    esp,0xc
c001369f:	c3                   	ret    

c00136a0 <Clock::timeInSecondsLocal()>:
c00136a0:	53                   	push   ebx
c00136a1:	83 ec 14             	sub    esp,0x14
c00136a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00136aa:	50                   	push   eax
c00136ab:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136ae:	0f b6 0d f0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002caf0
c00136b5:	03 0d f4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002caf4
c00136bb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136c1:	89 cb                	mov    ebx,ecx
c00136c3:	c1 fb 1f             	sar    ebx,0x1f
c00136c6:	01 c8                	add    eax,ecx
c00136c8:	11 da                	adc    edx,ebx
c00136ca:	83 c4 10             	add    esp,0x10
c00136cd:	31 c9                	xor    ecx,ecx
c00136cf:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c00136d6:	74 05                	je     c00136dd <Clock::timeInSecondsLocal()+0x3d>
c00136d8:	b9 08 07 00 00       	mov    ecx,0x708
c00136dd:	31 db                	xor    ebx,ebx
c00136df:	01 c8                	add    eax,ecx
c00136e1:	11 da                	adc    edx,ebx
c00136e3:	83 c4 08             	add    esp,0x8
c00136e6:	5b                   	pop    ebx
c00136e7:	c3                   	ret    

c00136e8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136e8:	57                   	push   edi
c00136e9:	56                   	push   esi
c00136ea:	53                   	push   ebx
c00136eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136f9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136fc:	0f b6 05 f0 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002caf0
c0013703:	03 05 f4 ca 02 c0    	add    eax,DWORD PTR ds:0xc002caf4
c0013709:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001370f:	99                   	cdq    
c0013710:	29 c6                	sub    esi,eax
c0013712:	19 d7                	sbb    edi,edx
c0013714:	89 f0                	mov    eax,esi
c0013716:	89 fa                	mov    edx,edi
c0013718:	31 f6                	xor    esi,esi
c001371a:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c0013721:	74 05                	je     c0013728 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013723:	be 08 07 00 00       	mov    esi,0x708
c0013728:	31 ff                	xor    edi,edi
c001372a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001372e:	29 f0                	sub    eax,esi
c0013730:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013734:	19 fa                	sbb    edx,edi
c0013736:	89 d8                	mov    eax,ebx
c0013738:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001373c:	5b                   	pop    ebx
c001373d:	5e                   	pop    esi
c001373e:	5f                   	pop    edi
c001373f:	ff e0                	jmp    eax

c0013741 <datetimeToSeconds(datetime_t)>:
c0013741:	55                   	push   ebp
c0013742:	57                   	push   edi
c0013743:	56                   	push   esi
c0013744:	53                   	push   ebx
c0013745:	83 ec 14             	sub    esp,0x14
c0013748:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001374c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013750:	89 d3                	mov    ebx,edx
c0013752:	0f b6 c6             	movzx  eax,dh
c0013755:	c1 eb 10             	shr    ebx,0x10
c0013758:	48                   	dec    eax
c0013759:	66 81 eb 6c 07       	sub    bx,0x76c
c001375e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013762:	0f b6 f5             	movzx  esi,ch
c0013765:	89 cf                	mov    edi,ecx
c0013767:	6b f6 3c             	imul   esi,esi,0x3c
c001376a:	c1 ef 10             	shr    edi,0x10
c001376d:	0f b6 c9             	movzx  ecx,cl
c0013770:	89 f8                	mov    eax,edi
c0013772:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013778:	0f b6 f8             	movzx  edi,al
c001377b:	0f b6 d2             	movzx  edx,dl
c001377e:	01 fe                	add    esi,edi
c0013780:	01 f1                	add    ecx,esi
c0013782:	0f b7 f3             	movzx  esi,bx
c0013785:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013789:	c1 f9 1f             	sar    ecx,0x1f
c001378c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013791:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013795:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001379a:	8b 0c 8d 60 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6ba0]
c00137a1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137a5:	76 29                	jbe    c00137d0 <datetimeToSeconds(datetime_t)+0x8f>
c00137a7:	f6 c3 03             	test   bl,0x3
c00137aa:	75 24                	jne    c00137d0 <datetimeToSeconds(datetime_t)+0x8f>
c00137ac:	31 d2                	xor    edx,edx
c00137ae:	bf 64 00 00 00       	mov    edi,0x64
c00137b3:	89 d8                	mov    eax,ebx
c00137b5:	66 f7 f7             	div    di
c00137b8:	66 85 d2             	test   dx,dx
c00137bb:	75 12                	jne    c00137cf <datetimeToSeconds(datetime_t)+0x8e>
c00137bd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137c3:	bf 90 01 00 00       	mov    edi,0x190
c00137c8:	99                   	cdq    
c00137c9:	f7 ff                	idiv   edi
c00137cb:	85 d2                	test   edx,edx
c00137cd:	75 01                	jne    c00137d0 <datetimeToSeconds(datetime_t)+0x8f>
c00137cf:	41                   	inc    ecx
c00137d0:	66 83 fb 46          	cmp    bx,0x46
c00137d4:	76 45                	jbe    c001381b <datetimeToSeconds(datetime_t)+0xda>
c00137d6:	bb 46 00 00 00       	mov    ebx,0x46
c00137db:	bf 64 00 00 00       	mov    edi,0x64
c00137e0:	bd 90 01 00 00       	mov    ebp,0x190
c00137e5:	b8 6d 01 00 00       	mov    eax,0x16d
c00137ea:	f6 c3 03             	test   bl,0x3
c00137ed:	75 23                	jne    c0013812 <datetimeToSeconds(datetime_t)+0xd1>
c00137ef:	89 d8                	mov    eax,ebx
c00137f1:	99                   	cdq    
c00137f2:	f7 ff                	idiv   edi
c00137f4:	b8 6e 01 00 00       	mov    eax,0x16e
c00137f9:	85 d2                	test   edx,edx
c00137fb:	75 15                	jne    c0013812 <datetimeToSeconds(datetime_t)+0xd1>
c00137fd:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013803:	99                   	cdq    
c0013804:	f7 fd                	idiv   ebp
c0013806:	83 fa 01             	cmp    edx,0x1
c0013809:	19 c0                	sbb    eax,eax
c001380b:	f7 d0                	not    eax
c001380d:	05 6e 01 00 00       	add    eax,0x16e
c0013812:	01 c1                	add    ecx,eax
c0013814:	43                   	inc    ebx
c0013815:	39 f3                	cmp    ebx,esi
c0013817:	7c cc                	jl     c00137e5 <datetimeToSeconds(datetime_t)+0xa4>
c0013819:	eb 35                	jmp    c0013850 <datetimeToSeconds(datetime_t)+0x10f>
c001381b:	74 33                	je     c0013850 <datetimeToSeconds(datetime_t)+0x10f>
c001381d:	b8 45 00 00 00       	mov    eax,0x45
c0013822:	89 c2                	mov    edx,eax
c0013824:	83 e2 03             	and    edx,0x3
c0013827:	39 f0                	cmp    eax,esi
c0013829:	7e 0f                	jle    c001383a <datetimeToSeconds(datetime_t)+0xf9>
c001382b:	83 fa 01             	cmp    edx,0x1
c001382e:	19 d2                	sbb    edx,edx
c0013830:	48                   	dec    eax
c0013831:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013838:	eb e8                	jmp    c0013822 <datetimeToSeconds(datetime_t)+0xe1>
c001383a:	b8 6d 01 00 00       	mov    eax,0x16d
c001383f:	85 d2                	test   edx,edx
c0013841:	75 0b                	jne    c001384e <datetimeToSeconds(datetime_t)+0x10d>
c0013843:	66 83 fb 01          	cmp    bx,0x1
c0013847:	19 c0                	sbb    eax,eax
c0013849:	05 6e 01 00 00       	add    eax,0x16e
c001384e:	29 c1                	sub    ecx,eax
c0013850:	b8 80 51 01 00       	mov    eax,0x15180
c0013855:	f7 e9                	imul   ecx
c0013857:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001385b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001385f:	83 c4 14             	add    esp,0x14
c0013862:	5b                   	pop    ebx
c0013863:	5e                   	pop    esi
c0013864:	5f                   	pop    edi
c0013865:	5d                   	pop    ebp
c0013866:	c3                   	ret    
c0013867:	90                   	nop

c0013868 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013868:	57                   	push   edi
c0013869:	56                   	push   esi
c001386a:	53                   	push   ebx
c001386b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001386f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013871:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013874:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001387c:	e8 c0 fe ff ff       	call   c0013741 <datetimeToSeconds(datetime_t)>
c0013881:	59                   	pop    ecx
c0013882:	0f b6 0d f0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002caf0
c0013889:	5b                   	pop    ebx
c001388a:	03 0d f4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002caf4
c0013890:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013896:	89 cb                	mov    ebx,ecx
c0013898:	c1 fb 1f             	sar    ebx,0x1f
c001389b:	29 c8                	sub    eax,ecx
c001389d:	19 da                	sbb    edx,ebx
c001389f:	31 c9                	xor    ecx,ecx
c00138a1:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c00138a8:	74 05                	je     c00138af <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138aa:	b9 08 07 00 00       	mov    ecx,0x708
c00138af:	31 db                	xor    ebx,ebx
c00138b1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138b5:	29 c8                	sub    eax,ecx
c00138b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138bb:	19 da                	sbb    edx,ebx
c00138bd:	89 f8                	mov    eax,edi
c00138bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138c3:	5b                   	pop    ebx
c00138c4:	5e                   	pop    esi
c00138c5:	5f                   	pop    edi
c00138c6:	ff e0                	jmp    eax

c00138c8 <secondsToDatetime(unsigned long long)>:
c00138c8:	55                   	push   ebp
c00138c9:	57                   	push   edi
c00138ca:	56                   	push   esi
c00138cb:	53                   	push   ebx
c00138cc:	83 ec 1c             	sub    esp,0x1c
c00138cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138d7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138db:	6a 00                	push   0x0
c00138dd:	68 80 51 01 00       	push   0x15180
c00138e2:	55                   	push   ebp
c00138e3:	57                   	push   edi
c00138e4:	e8 e3 1a 01 00       	call   c00253cc <__udivdi3>
c00138e9:	83 c4 10             	add    esp,0x10
c00138ec:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138f6:	6a 00                	push   0x0
c00138f8:	68 80 51 01 00       	push   0x15180
c00138fd:	55                   	push   ebp
c00138fe:	57                   	push   edi
c00138ff:	bf 10 0e 00 00       	mov    edi,0xe10
c0013904:	e8 c3 1b 01 00       	call   c00254cc <__umoddi3>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	99                   	cdq    
c001390d:	f7 ff                	idiv   edi
c001390f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013914:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013917:	89 d0                	mov    eax,edx
c0013919:	99                   	cdq    
c001391a:	f7 ff                	idiv   edi
c001391c:	85 db                	test   ebx,ebx
c001391e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013921:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013924:	79 11                	jns    c0013937 <secondsToDatetime(unsigned long long)+0x6f>
c0013926:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001392a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013930:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013935:	eb 07                	jmp    c001393e <secondsToDatetime(unsigned long long)+0x76>
c0013937:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001393c:	89 d8                	mov    eax,ebx
c001393e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013943:	99                   	cdq    
c0013944:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013949:	f7 f9                	idiv   ecx
c001394b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013950:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013954:	31 d2                	xor    edx,edx
c0013956:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001395e:	01 c3                	add    ebx,eax
c0013960:	89 d8                	mov    eax,ebx
c0013962:	f7 f1                	div    ecx
c0013964:	31 d2                	xor    edx,edx
c0013966:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013969:	89 d8                	mov    eax,ebx
c001396b:	f7 f7                	div    edi
c001396d:	31 d2                	xor    edx,edx
c001396f:	29 c1                	sub    ecx,eax
c0013971:	89 d8                	mov    eax,ebx
c0013973:	f7 f5                	div    ebp
c0013975:	bd 6d 01 00 00       	mov    ebp,0x16d
c001397a:	29 c1                	sub    ecx,eax
c001397c:	31 d2                	xor    edx,edx
c001397e:	89 c8                	mov    eax,ecx
c0013980:	f7 f5                	div    ebp
c0013982:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013987:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001398b:	31 d2                	xor    edx,edx
c001398d:	89 c8                	mov    eax,ecx
c001398f:	f7 f5                	div    ebp
c0013991:	31 d2                	xor    edx,edx
c0013993:	01 c3                	add    ebx,eax
c0013995:	89 c8                	mov    eax,ecx
c0013997:	f7 f7                	div    edi
c0013999:	bf 99 00 00 00       	mov    edi,0x99
c001399e:	29 c3                	sub    ebx,eax
c00139a0:	31 d2                	xor    edx,edx
c00139a2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139aa:	29 c3                	sub    ebx,eax
c00139ac:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139af:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139b2:	bb 05 00 00 00       	mov    ebx,0x5
c00139b7:	83 c1 02             	add    ecx,0x2
c00139ba:	89 c8                	mov    eax,ecx
c00139bc:	f7 f7                	div    edi
c00139be:	31 d2                	xor    edx,edx
c00139c0:	89 c7                	mov    edi,eax
c00139c2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139c8:	83 c0 02             	add    eax,0x2
c00139cb:	f7 f3                	div    ebx
c00139cd:	89 eb                	mov    ebx,ebp
c00139cf:	29 c3                	sub    ebx,eax
c00139d1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139d7:	88 1e                	mov    BYTE PTR [esi],bl
c00139d9:	19 c0                	sbb    eax,eax
c00139db:	31 d2                	xor    edx,edx
c00139dd:	83 e0 0c             	and    eax,0xc
c00139e0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139e4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139f0:	83 f9 01             	cmp    ecx,0x1
c00139f3:	0f 96 c2             	setbe  dl
c00139f6:	41                   	inc    ecx
c00139f7:	01 d0                	add    eax,edx
c00139f9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139fc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a00:	83 c4 1c             	add    esp,0x1c
c0013a03:	89 f0                	mov    eax,esi
c0013a05:	5b                   	pop    ebx
c0013a06:	5e                   	pop    esi
c0013a07:	5f                   	pop    edi
c0013a08:	5d                   	pop    ebp
c0013a09:	c2 04 00             	ret    0x4

c0013a0c <Clock::timeInDatetimeLocal()>:
c0013a0c:	53                   	push   ebx
c0013a0d:	83 ec 14             	sub    esp,0x14
c0013a10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a18:	e8 83 fc ff ff       	call   c00136a0 <Clock::timeInSecondsLocal()>
c0013a1d:	83 c4 0c             	add    esp,0xc
c0013a20:	52                   	push   edx
c0013a21:	50                   	push   eax
c0013a22:	53                   	push   ebx
c0013a23:	e8 a0 fe ff ff       	call   c00138c8 <secondsToDatetime(unsigned long long)>
c0013a28:	89 d8                	mov    eax,ebx
c0013a2a:	83 c4 14             	add    esp,0x14
c0013a2d:	5b                   	pop    ebx
c0013a2e:	c2 04 00             	ret    0x4
c0013a31:	90                   	nop

c0013a32 <Device::hibernate()>:
c0013a32:	c3                   	ret    
c0013a33:	90                   	nop

c0013a34 <Device::wake()>:
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <Device::detect()>:
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <Device::disableLegacy()>:
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <Device::powerSaving(PowerSavingLevel)>:
c0013a3a:	c3                   	ret    
c0013a3b:	90                   	nop

c0013a3c <DriverlessDevice::close(int, int, void*)>:
c0013a3c:	31 c0                	xor    eax,eax
c0013a3e:	c3                   	ret    
c0013a3f:	90                   	nop

c0013a40 <DriverlessDevice::detect()>:
c0013a40:	c3                   	ret    
c0013a41:	90                   	nop

c0013a42 <DriverlessDevice::open(int, int, void*)>:
c0013a42:	83 ec 18             	sub    esp,0x18
c0013a45:	68 90 94 02 c0       	push   0xc0029490
c0013a4a:	e8 60 5e 00 00       	call   c00198af <Krnl::panic(char const*)>
c0013a4f:	83 c8 ff             	or     eax,0xffffffff
c0013a52:	83 c4 1c             	add    esp,0x1c
c0013a55:	c3                   	ret    

c0013a56 <Device::~Device()>:
c0013a56:	ba b8 94 02 c0       	mov    edx,0xc00294b8
c0013a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a5f:	89 10                	mov    DWORD PTR [eax],edx
c0013a61:	90                   	nop
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <Device::~Device()>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a6b:	e8 e6 ff ff ff       	call   c0013a56 <Device::~Device()>
c0013a70:	83 c4 04             	add    esp,0x4
c0013a73:	83 ec 08             	sub    esp,0x8
c0013a76:	68 58 01 00 00       	push   0x158
c0013a7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7f:	e8 31 ec ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	83 c4 0c             	add    esp,0xc
c0013a8a:	c3                   	ret    
c0013a8b:	90                   	nop

c0013a8c <Device::findAndLoadDriver()>:
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a8e:	57                   	push   edi
c0013a8f:	b9 09 00 00 00       	mov    ecx,0x9
c0013a94:	56                   	push   esi
c0013a95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a99:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a9d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013aa7:	81 c7 18 01 00 00    	add    edi,0x118
c0013aad:	fc                   	cld    
c0013aae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ab0:	5e                   	pop    esi
c0013ab1:	5f                   	pop    edi
c0013ab2:	c3                   	ret    
c0013ab3:	90                   	nop

c0013ab4 <Device::preOpenACPI(void*, char*, char*)>:
c0013ab4:	56                   	push   esi
c0013ab5:	53                   	push   ebx
c0013ab6:	83 ec 08             	sub    esp,0x8
c0013ab9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ac1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013acb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013acf:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ad5:	6a 1e                	push   0x1e
c0013ad7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013add:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ae1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013ae7:	50                   	push   eax
c0013ae8:	e8 68 cb fe ff       	call   c0000655 <memcpy>
c0013aed:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013af1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013af5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013afd:	83 c4 14             	add    esp,0x14
c0013b00:	5b                   	pop    ebx
c0013b01:	5e                   	pop    esi
c0013b02:	e9 4e cb fe ff       	jmp    c0000655 <memcpy>
c0013b07:	90                   	nop

c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b0c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b11:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b18:	75 0b                	jne    c0013b25 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b1c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b20:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b23:	eb 1e                	jmp    c0013b43 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b25:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0013b2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b30:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b36:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b38:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b40:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b43:	ff e0                	jmp    eax
c0013b45:	90                   	nop

c0013b46 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b4a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b4f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b56:	75 0b                	jne    c0013b63 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b5e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b61:	eb 1e                	jmp    c0013b81 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b63:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0013b68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b6e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b74:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b76:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b7e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b81:	ff e0                	jmp    eax
c0013b83:	90                   	nop

c0013b84 <Device::addChild(Device*)>:
c0013b84:	53                   	push   ebx
c0013b85:	83 ec 08             	sub    esp,0x8
c0013b88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b90:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b96:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b9c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b9e:	85 d2                	test   edx,edx
c0013ba0:	74 04                	je     c0013ba6 <Device::addChild(Device*)+0x22>
c0013ba2:	89 d3                	mov    ebx,edx
c0013ba4:	eb f6                	jmp    c0013b9c <Device::addChild(Device*)+0x18>
c0013ba6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	6a 08                	push   0x8
c0013bae:	e8 21 b9 ff ff       	call   c000f4d4 <malloc>
c0013bb3:	89 03                	mov    DWORD PTR [ebx],eax
c0013bb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bc2:	83 c4 18             	add    esp,0x18
c0013bc5:	5b                   	pop    ebx
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Device::removeAllChildren()>:
c0013bc8:	56                   	push   esi
c0013bc9:	53                   	push   ebx
c0013bca:	52                   	push   edx
c0013bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bd8:	74 17                	je     c0013bf1 <Device::removeAllChildren()+0x29>
c0013bda:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bdd:	85 c0                	test   eax,eax
c0013bdf:	74 0c                	je     c0013bed <Device::removeAllChildren()+0x25>
c0013be1:	83 ec 0c             	sub    esp,0xc
c0013be4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013be6:	50                   	push   eax
c0013be7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bef:	eb e4                	jmp    c0013bd5 <Device::removeAllChildren()+0xd>
c0013bf1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bfd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c0a:	58                   	pop    eax
c0013c0b:	5b                   	pop    ebx
c0013c0c:	5e                   	pop    esi
c0013c0d:	c3                   	ret    

c0013c0e <Device::hibernateAll()>:
c0013c0e:	53                   	push   ebx
c0013c0f:	83 ec 14             	sub    esp,0x14
c0013c12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c18:	53                   	push   ebx
c0013c19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c22:	83 c4 10             	add    esp,0x10
c0013c25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c28:	74 0f                	je     c0013c39 <Device::hibernateAll()+0x2b>
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c30:	e8 d9 ff ff ff       	call   c0013c0e <Device::hibernateAll()>
c0013c35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c37:	eb e9                	jmp    c0013c22 <Device::hibernateAll()+0x14>
c0013c39:	83 c4 08             	add    esp,0x8
c0013c3c:	5b                   	pop    ebx
c0013c3d:	c3                   	ret    

c0013c3e <Device::wakeAll()>:
c0013c3e:	53                   	push   ebx
c0013c3f:	83 ec 14             	sub    esp,0x14
c0013c42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c48:	53                   	push   ebx
c0013c49:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c58:	74 0f                	je     c0013c69 <Device::wakeAll()+0x2b>
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c60:	e8 d9 ff ff ff       	call   c0013c3e <Device::wakeAll()>
c0013c65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c67:	eb e9                	jmp    c0013c52 <Device::wakeAll()+0x14>
c0013c69:	83 c4 08             	add    esp,0x8
c0013c6c:	5b                   	pop    ebx
c0013c6d:	c3                   	ret    

c0013c6e <Device::detectAll()>:
c0013c6e:	53                   	push   ebx
c0013c6f:	83 ec 14             	sub    esp,0x14
c0013c72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c78:	53                   	push   ebx
c0013c79:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c88:	74 0f                	je     c0013c99 <Device::detectAll()+0x2b>
c0013c8a:	83 ec 0c             	sub    esp,0xc
c0013c8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c90:	e8 d9 ff ff ff       	call   c0013c6e <Device::detectAll()>
c0013c95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c97:	eb e9                	jmp    c0013c82 <Device::detectAll()+0x14>
c0013c99:	83 c4 08             	add    esp,0x8
c0013c9c:	5b                   	pop    ebx
c0013c9d:	c3                   	ret    

c0013c9e <Device::disableLegacyAll()>:
c0013c9e:	53                   	push   ebx
c0013c9f:	83 ec 14             	sub    esp,0x14
c0013ca2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca8:	53                   	push   ebx
c0013ca9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cb2:	83 c4 10             	add    esp,0x10
c0013cb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb8:	74 0f                	je     c0013cc9 <Device::disableLegacyAll()+0x2b>
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cc0:	e8 d9 ff ff ff       	call   c0013c9e <Device::disableLegacyAll()>
c0013cc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cc7:	eb e9                	jmp    c0013cb2 <Device::disableLegacyAll()+0x14>
c0013cc9:	83 c4 08             	add    esp,0x8
c0013ccc:	5b                   	pop    ebx
c0013ccd:	c3                   	ret    

c0013cce <Device::loadDriversForAll()>:
c0013cce:	53                   	push   ebx
c0013ccf:	83 ec 08             	sub    esp,0x8
c0013cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cdc:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013cde:	85 db                	test   ebx,ebx
c0013ce0:	74 12                	je     c0013cf4 <Device::loadDriversForAll()+0x26>
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013ce8:	e8 e1 ff ff ff       	call   c0013cce <Device::loadDriversForAll()>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	89 d8                	mov    eax,ebx
c0013cf2:	eb e8                	jmp    c0013cdc <Device::loadDriversForAll()+0xe>
c0013cf4:	83 c4 08             	add    esp,0x8
c0013cf7:	5b                   	pop    ebx
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <Device::closeAll()>:
c0013cfa:	53                   	push   ebx
c0013cfb:	83 ec 08             	sub    esp,0x8
c0013cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d04:	6a 00                	push   0x0
c0013d06:	6a 00                	push   0x0
c0013d08:	6a 00                	push   0x0
c0013d0a:	53                   	push   ebx
c0013d0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d0e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d14:	83 c4 10             	add    esp,0x10
c0013d17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d1a:	74 0f                	je     c0013d2b <Device::closeAll()+0x31>
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d22:	e8 d3 ff ff ff       	call   c0013cfa <Device::closeAll()>
c0013d27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d29:	eb e9                	jmp    c0013d14 <Device::closeAll()+0x1a>
c0013d2b:	83 c4 08             	add    esp,0x8
c0013d2e:	5b                   	pop    ebx
c0013d2f:	c3                   	ret    

c0013d30 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d30:	56                   	push   esi
c0013d31:	53                   	push   ebx
c0013d32:	83 ec 0c             	sub    esp,0xc
c0013d35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d3f:	56                   	push   esi
c0013d40:	53                   	push   ebx
c0013d41:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d4a:	83 c4 10             	add    esp,0x10
c0013d4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d50:	74 0f                	je     c0013d61 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d52:	52                   	push   edx
c0013d53:	52                   	push   edx
c0013d54:	56                   	push   esi
c0013d55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d58:	e8 d3 ff ff ff       	call   c0013d30 <Device::powerSavingAll(PowerSavingLevel)>
c0013d5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d5f:	eb e9                	jmp    c0013d4a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d61:	58                   	pop    eax
c0013d62:	5b                   	pop    ebx
c0013d63:	5e                   	pop    esi
c0013d64:	c3                   	ret    
c0013d65:	90                   	nop

c0013d66 <Device::setName(char const*)>:
c0013d66:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d6e:	e9 b7 c9 fe ff       	jmp    c000072a <strcpy>
c0013d73:	90                   	nop

c0013d74 <Device::Device(char const*)>:
c0013d74:	83 ec 1c             	sub    esp,0x1c
c0013d77:	ba b8 94 02 c0       	mov    edx,0xc00294b8
c0013d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d80:	89 10                	mov    DWORD PTR [eax],edx
c0013d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d86:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dba:	83 ec 08             	sub    esp,0x8
c0013dbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc5:	e8 9c ff ff ff       	call   c0013d66 <Device::setName(char const*)>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013dd5:	83 ec 0c             	sub    esp,0xc
c0013dd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ddc:	e8 f3 b6 ff ff       	call   c000f4d4 <malloc>
c0013de1:	83 c4 10             	add    esp,0x10
c0013de4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013df1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013df5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e20:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e36:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e44:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e52:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e60:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e6a:	90                   	nop
c0013e6b:	83 c4 1c             	add    esp,0x1c
c0013e6e:	c3                   	ret    
c0013e6f:	90                   	nop

c0013e70 <Device::getName()>:
c0013e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e74:	05 d0 00 00 00       	add    eax,0xd0
c0013e79:	c3                   	ret    

c0013e7a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e81:	83 ec 08             	sub    esp,0x8
c0013e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e88:	50                   	push   eax
c0013e89:	e8 e6 fe ff ff       	call   c0013d74 <Device::Device(char const*)>
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	ba e4 94 02 c0       	mov    edx,0xc00294e4
c0013e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9a:	89 10                	mov    DWORD PTR [eax],edx
c0013e9c:	90                   	nop
c0013e9d:	83 c4 0c             	add    esp,0xc
c0013ea0:	c3                   	ret    
c0013ea1:	90                   	nop

c0013ea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ea2:	57                   	push   edi
c0013ea3:	56                   	push   esi
c0013ea4:	53                   	push   ebx
c0013ea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ead:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eb1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013eb7:	75 0c                	jne    c0013ec5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013eb9:	52                   	push   edx
c0013eba:	52                   	push   edx
c0013ebb:	53                   	push   ebx
c0013ebc:	56                   	push   esi
c0013ebd:	e8 48 34 01 00       	call   c002730a <LinkedList<Device>::addElement(Device*)>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ecb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ece:	74 12                	je     c0013ee2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ed0:	50                   	push   eax
c0013ed1:	57                   	push   edi
c0013ed2:	56                   	push   esi
c0013ed3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed6:	e8 c7 ff ff ff       	call   c0013ea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013edb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	eb e9                	jmp    c0013ecb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ee2:	5b                   	pop    ebx
c0013ee3:	5e                   	pop    esi
c0013ee4:	5f                   	pop    edi
c0013ee5:	c3                   	ret    

c0013ee6 <getDevicesOfType(DeviceType)>:
c0013ee6:	53                   	push   ebx
c0013ee7:	83 ec 14             	sub    esp,0x14
c0013eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eee:	53                   	push   ebx
c0013eef:	e8 f2 34 01 00       	call   c00273e6 <LinkedList<Device>::LinkedList()>
c0013ef4:	83 c4 0c             	add    esp,0xc
c0013ef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013efb:	53                   	push   ebx
c0013efc:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c0013f02:	e8 9b ff ff ff       	call   c0013ea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f07:	89 d8                	mov    eax,ebx
c0013f09:	83 c4 18             	add    esp,0x18
c0013f0c:	5b                   	pop    ebx
c0013f0d:	c2 04 00             	ret    0x4

c0013f10 <HardDiskController::HardDiskController(char const*)>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f17:	83 ec 08             	sub    esp,0x8
c0013f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1e:	50                   	push   eax
c0013f1f:	e8 50 fe ff ff       	call   c0013d74 <Device::Device(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	89 10                	mov    DWORD PTR [eax],edx
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f40:	90                   	nop
c0013f41:	83 c4 0c             	add    esp,0xc
c0013f44:	c3                   	ret    
c0013f45:	90                   	nop

c0013f46 <HardDiskController::~HardDiskController()>:
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0013f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f52:	89 10                	mov    DWORD PTR [eax],edx
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	50                   	push   eax
c0013f5c:	e8 f5 fa ff ff       	call   c0013a56 <Device::~Device()>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	90                   	nop
c0013f65:	83 c4 0c             	add    esp,0xc
c0013f68:	c3                   	ret    
c0013f69:	90                   	nop

c0013f6a <HardDiskController::~HardDiskController()>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f74:	e8 cd ff ff ff       	call   c0013f46 <HardDiskController::~HardDiskController()>
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	83 ec 08             	sub    esp,0x8
c0013f7f:	68 58 01 00 00       	push   0x158
c0013f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f88:	e8 28 e7 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	83 c4 0c             	add    esp,0xc
c0013f93:	c3                   	ret    

c0013f94 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9b:	83 ec 08             	sub    esp,0x8
c0013f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fa2:	50                   	push   eax
c0013fa3:	e8 cc fd ff ff       	call   c0013d74 <Device::Device(char const*)>
c0013fa8:	83 c4 10             	add    esp,0x10
c0013fab:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c0013fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb4:	89 10                	mov    DWORD PTR [eax],edx
c0013fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fba:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fe2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ff6:	90                   	nop
c0013ff7:	83 c4 0c             	add    esp,0xc
c0013ffa:	c3                   	ret    
c0013ffb:	90                   	nop

c0013ffc <PhysicalDisk::startCache()>:
c0013ffc:	56                   	push   esi
c0013ffd:	53                   	push   ebx
c0013ffe:	83 ec 10             	sub    esp,0x10
c0014001:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014005:	6a 30                	push   0x30
c0014007:	e8 c8 b4 ff ff       	call   c000f4d4 <malloc>
c001400c:	89 c6                	mov    esi,eax
c001400e:	58                   	pop    eax
c001400f:	5a                   	pop    edx
c0014010:	53                   	push   ebx
c0014011:	56                   	push   esi
c0014012:	e8 dd 25 00 00       	call   c00165f4 <VCache::VCache(PhysicalDisk*)>
c0014017:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001401d:	83 c4 14             	add    esp,0x14
c0014020:	5b                   	pop    ebx
c0014021:	5e                   	pop    esi
c0014022:	c3                   	ret    
c0014023:	90                   	nop

c0014024 <PhysicalDisk::~PhysicalDisk()>:
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c001402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014030:	89 10                	mov    DWORD PTR [eax],edx
c0014032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	50                   	push   eax
c001403a:	e8 17 fa ff ff       	call   c0013a56 <Device::~Device()>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	90                   	nop
c0014043:	83 c4 0c             	add    esp,0xc
c0014046:	c3                   	ret    
c0014047:	90                   	nop

c0014048 <PhysicalDisk::~PhysicalDisk()>:
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	83 ec 0c             	sub    esp,0xc
c001404e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014052:	e8 cd ff ff ff       	call   c0014024 <PhysicalDisk::~PhysicalDisk()>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	83 ec 08             	sub    esp,0x8
c001405d:	68 6c 01 00 00       	push   0x16c
c0014062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014066:	e8 4a e6 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	83 c4 0c             	add    esp,0xc
c0014071:	c3                   	ret    

c0014072 <FPU::FPU(char const*)>:
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014079:	83 ec 08             	sub    esp,0x8
c001407c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014080:	50                   	push   eax
c0014081:	e8 ee fc ff ff       	call   c0013d74 <Device::Device(char const*)>
c0014086:	83 c4 10             	add    esp,0x10
c0014089:	ba 7c 95 02 c0       	mov    edx,0xc002957c
c001408e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014092:	89 10                	mov    DWORD PTR [eax],edx
c0014094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014098:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00140a2:	90                   	nop
c00140a3:	83 c4 0c             	add    esp,0xc
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <FPU::~FPU()>:
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	ba 7c 95 02 c0       	mov    edx,0xc002957c
c00140b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b4:	89 10                	mov    DWORD PTR [eax],edx
c00140b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ba:	83 ec 0c             	sub    esp,0xc
c00140bd:	50                   	push   eax
c00140be:	e8 93 f9 ff ff       	call   c0013a56 <Device::~Device()>
c00140c3:	83 c4 10             	add    esp,0x10
c00140c6:	90                   	nop
c00140c7:	83 c4 0c             	add    esp,0xc
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <FPU::~FPU()>:
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	83 ec 0c             	sub    esp,0xc
c00140d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d6:	e8 cd ff ff ff       	call   c00140a8 <FPU::~FPU()>
c00140db:	83 c4 10             	add    esp,0x10
c00140de:	83 ec 08             	sub    esp,0x8
c00140e1:	68 58 01 00 00       	push   0x158
c00140e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ea:	e8 c6 e5 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	83 c4 0c             	add    esp,0xc
c00140f5:	c3                   	ret    

c00140f6 <setupFPU()>:
c00140f6:	53                   	push   ebx
c00140f7:	83 ec 08             	sub    esp,0x8
c00140fa:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0014100:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014107:	74 19                	je     c0014122 <setupFPU()+0x2c>
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	68 58 01 00 00       	push   0x158
c0014111:	e8 be b3 ff ff       	call   c000f4d4 <malloc>
c0014116:	89 c3                	mov    ebx,eax
c0014118:	89 04 24             	mov    DWORD PTR [esp],eax
c001411b:	e8 30 fe 00 00       	call   c0023f50 <AVX::AVX()>
c0014120:	eb 5b                	jmp    c001417d <setupFPU()+0x87>
c0014122:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014128:	84 c0                	test   al,al
c001412a:	79 19                	jns    c0014145 <setupFPU()+0x4f>
c001412c:	83 ec 0c             	sub    esp,0xc
c001412f:	68 58 01 00 00       	push   0x158
c0014134:	e8 9b b3 ff ff       	call   c000f4d4 <malloc>
c0014139:	89 c3                	mov    ebx,eax
c001413b:	89 04 24             	mov    DWORD PTR [esp],eax
c001413e:	e8 33 ff 00 00       	call   c0024076 <SSE::SSE()>
c0014143:	eb 38                	jmp    c001417d <setupFPU()+0x87>
c0014145:	a8 20                	test   al,0x20
c0014147:	74 19                	je     c0014162 <setupFPU()+0x6c>
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	68 58 01 00 00       	push   0x158
c0014151:	e8 7e b3 ff ff       	call   c000f4d4 <malloc>
c0014156:	89 c3                	mov    ebx,eax
c0014158:	89 04 24             	mov    DWORD PTR [esp],eax
c001415b:	e8 80 fe 00 00       	call   c0023fe0 <MMX::MMX()>
c0014160:	eb 1b                	jmp    c001417d <setupFPU()+0x87>
c0014162:	a8 10                	test   al,0x10
c0014164:	74 1c                	je     c0014182 <setupFPU()+0x8c>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	68 58 01 00 00       	push   0x158
c001416e:	e8 61 b3 ff ff       	call   c000f4d4 <malloc>
c0014173:	89 c3                	mov    ebx,eax
c0014175:	89 04 24             	mov    DWORD PTR [esp],eax
c0014178:	e8 87 ff 00 00       	call   c0024104 <x87::x87()>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	eb 24                	jmp    c00141a6 <setupFPU()+0xb0>
c0014182:	83 e0 ef             	and    eax,0xffffffef
c0014185:	83 ec 0c             	sub    esp,0xc
c0014188:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001418e:	68 68 95 02 c0       	push   0xc0029568
c0014193:	e8 fd e5 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014198:	0f 20 c0             	mov    eax,cr0
c001419b:	83 c8 04             	or     eax,0x4
c001419e:	0f 22 c0             	mov    cr0,eax
c00141a1:	31 db                	xor    ebx,ebx
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	89 d8                	mov    eax,ebx
c00141a8:	83 c4 08             	add    esp,0x8
c00141ab:	5b                   	pop    ebx
c00141ac:	c3                   	ret    
c00141ad:	90                   	nop

c00141ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141b6:	c1 e0 04             	shl    eax,0x4
c00141b9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141bd:	8d 50 10             	lea    edx,[eax+0x10]
c00141c0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141c6:	74 08                	je     c00141d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141c8:	83 c0 04             	add    eax,0x4
c00141cb:	39 d0                	cmp    eax,edx
c00141cd:	75 f1                	jne    c00141c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141cf:	c3                   	ret    
c00141d0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141da:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141e4:	eb e2                	jmp    c00141c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141e6:	57                   	push   edi
c00141e7:	31 c0                	xor    eax,eax
c00141e9:	56                   	push   esi
c00141ea:	53                   	push   ebx
c00141eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141f7:	89 da                	mov    edx,ebx
c00141f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141fd:	c1 e2 04             	shl    edx,0x4
c0014200:	01 ca                	add    edx,ecx
c0014202:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001420a:	74 16                	je     c0014222 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001420c:	40                   	inc    eax
c001420d:	83 f8 04             	cmp    eax,0x4
c0014210:	75 f0                	jne    c0014202 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014212:	c7 44 24 10 ac 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295ac
c001421a:	5b                   	pop    ebx
c001421b:	5e                   	pop    esi
c001421c:	5f                   	pop    edi
c001421d:	e9 8d 56 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c0014222:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014225:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014228:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001422e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014234:	5b                   	pop    ebx
c0014235:	5e                   	pop    esi
c0014236:	5f                   	pop    edi
c0014237:	c3                   	ret    

c0014238 <doubleFault(regs*, void*)>:
c0014238:	55                   	push   ebp
c0014239:	89 e5                	mov    ebp,esp
c001423b:	83 ec 08             	sub    esp,0x8
c001423e:	83 ec 0c             	sub    esp,0xc
c0014241:	68 e7 95 02 c0       	push   0xc00295e7
c0014246:	e8 64 56 00 00       	call   c00198af <Krnl::panic(char const*)>
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	90                   	nop
c001424f:	c9                   	leave  
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014252:	56                   	push   esi
c0014253:	53                   	push   ebx
c0014254:	50                   	push   eax
c0014255:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014259:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001425d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014262:	75 35                	jne    c0014299 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014264:	8d 43 20             	lea    eax,[ebx+0x20]
c0014267:	31 d2                	xor    edx,edx
c0014269:	89 c1                	mov    ecx,eax
c001426b:	c1 e1 04             	shl    ecx,0x4
c001426e:	01 f1                	add    ecx,esi
c0014270:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014278:	74 3e                	je     c00142b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001427a:	42                   	inc    edx
c001427b:	83 fa 04             	cmp    edx,0x4
c001427e:	75 f0                	jne    c0014270 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	68 2c 96 02 c0       	push   0xc002962c
c0014288:	e8 22 56 00 00       	call   c00198af <Krnl::panic(char const*)>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014295:	5a                   	pop    edx
c0014296:	5b                   	pop    ebx
c0014297:	5e                   	pop    esi
c0014298:	c3                   	ret    
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	56                   	push   esi
c001429d:	e8 ce fb ff ff       	call   c0013e70 <Device::getName()>
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142a8:	75 ba                	jne    c0014264 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142aa:	83 fb 0f             	cmp    ebx,0xf
c00142ad:	7f 29                	jg     c00142d8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142af:	0f b6 9b c0 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4440]
c00142b6:	eb ac                	jmp    c0014264 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142b8:	8d 04 82             	lea    eax,[edx+eax*4]
c00142bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142bf:	8d 04 86             	lea    eax,[esi+eax*4]
c00142c2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142cc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142d2:	89 d8                	mov    eax,ebx
c00142d4:	5a                   	pop    edx
c00142d5:	5b                   	pop    ebx
c00142d6:	5e                   	pop    esi
c00142d7:	c3                   	ret    
c00142d8:	83 ec 0c             	sub    esp,0xc
c00142db:	68 f4 95 02 c0       	push   0xc00295f4
c00142e0:	e8 ca 55 00 00       	call   c00198af <Krnl::panic(char const*)>
c00142e5:	83 c4 10             	add    esp,0x10
c00142e8:	e9 77 ff ff ff       	jmp    c0014264 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142ed:	90                   	nop

c00142ee <InterruptController::clearAllHandlers(int, bool)>:
c00142ee:	56                   	push   esi
c00142ef:	53                   	push   ebx
c00142f0:	52                   	push   edx
c00142f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142f9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142fe:	75 61                	jne    c0014361 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014300:	8d 46 20             	lea    eax,[esi+0x20]
c0014303:	c1 e6 04             	shl    esi,0x4
c0014306:	c1 e0 04             	shl    eax,0x4
c0014309:	01 de                	add    esi,ebx
c001430b:	01 d8                	add    eax,ebx
c001430d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014317:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014321:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001432b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014335:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001433f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014349:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014353:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001435d:	58                   	pop    eax
c001435e:	5b                   	pop    ebx
c001435f:	5e                   	pop    esi
c0014360:	c3                   	ret    
c0014361:	83 ec 0c             	sub    esp,0xc
c0014364:	53                   	push   ebx
c0014365:	e8 06 fb ff ff       	call   c0013e70 <Device::getName()>
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014370:	75 8e                	jne    c0014300 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014372:	83 fe 0f             	cmp    esi,0xf
c0014375:	7f 09                	jg     c0014380 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014377:	0f b6 b6 c0 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4440]
c001437e:	eb 80                	jmp    c0014300 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014380:	83 ec 0c             	sub    esp,0xc
c0014383:	68 68 96 02 c0       	push   0xc0029668
c0014388:	e8 22 55 00 00       	call   c00198af <Krnl::panic(char const*)>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	e9 6b ff ff ff       	jmp    c0014300 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014395:	90                   	nop

c0014396 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014396:	56                   	push   esi
c0014397:	53                   	push   ebx
c0014398:	52                   	push   edx
c0014399:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001439d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143a1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143a6:	75 3a                	jne    c00143e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00143a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ac:	8d 50 20             	lea    edx,[eax+0x20]
c00143af:	c1 e2 04             	shl    edx,0x4
c00143b2:	8d 04 16             	lea    eax,[esi+edx*1]
c00143b5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143b9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143bf:	74 0b                	je     c00143cc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143c1:	83 c0 04             	add    eax,0x4
c00143c4:	39 d0                	cmp    eax,edx
c00143c6:	75 f1                	jne    c00143b9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143c8:	58                   	pop    eax
c00143c9:	5b                   	pop    ebx
c00143ca:	5e                   	pop    esi
c00143cb:	c3                   	ret    
c00143cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143d6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143e0:	eb df                	jmp    c00143c1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	56                   	push   esi
c00143e6:	e8 85 fa ff ff       	call   c0013e70 <Device::getName()>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143f1:	75 b5                	jne    c00143a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143f3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143f8:	7f 11                	jg     c001440b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143fe:	0f b6 80 c0 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4440]
c0014405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014409:	eb 9d                	jmp    c00143a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	68 68 96 02 c0       	push   0xc0029668
c0014413:	e8 97 54 00 00       	call   c00198af <Krnl::panic(char const*)>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	eb 8b                	jmp    c00143a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001441d <nmiHandler(regs*, void*)>:
c001441d:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0014422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014426:	e9 f5 a7 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c001442b <int_handler>:
c001442b:	55                   	push   ebp
c001442c:	57                   	push   edi
c001442d:	56                   	push   esi
c001442e:	53                   	push   ebx
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014436:	80 3d a0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4a0,0x0
c001443d:	74 0b                	je     c001444a <int_handler+0x1f>
c001443f:	fa                   	cli    
c0014440:	f4                   	hlt    
c0014441:	80 3d a0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4a0,0x0
c0014448:	75 f5                	jne    c001443f <int_handler+0x14>
c001444a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001444f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014452:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014458:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001445e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014461:	83 f8 17             	cmp    eax,0x17
c0014464:	77 13                	ja     c0014479 <int_handler+0x4e>
c0014466:	83 ec 08             	sub    esp,0x8
c0014469:	8b 17                	mov    edx,DWORD PTR [edi]
c001446b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001446e:	0f b6 c0             	movzx  eax,al
c0014471:	50                   	push   eax
c0014472:	57                   	push   edi
c0014473:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	83 c3 15             	add    ebx,0x15
c001447c:	c1 e3 04             	shl    ebx,0x4
c001447f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014483:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001448a:	31 db                	xor    ebx,ebx
c001448c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014490:	85 c0                	test   eax,eax
c0014492:	74 13                	je     c00144a7 <int_handler+0x7c>
c0014494:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014497:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001449b:	74 1c                	je     c00144b9 <int_handler+0x8e>
c001449d:	83 ec 08             	sub    esp,0x8
c00144a0:	52                   	push   edx
c00144a1:	56                   	push   esi
c00144a2:	ff d0                	call   eax
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	43                   	inc    ebx
c00144a8:	83 fb 04             	cmp    ebx,0x4
c00144ab:	75 df                	jne    c001448c <int_handler+0x61>
c00144ad:	83 c4 0c             	add    esp,0xc
c00144b0:	31 c0                	xor    eax,eax
c00144b2:	5b                   	pop    ebx
c00144b3:	31 d2                	xor    edx,edx
c00144b5:	5e                   	pop    esi
c00144b6:	5f                   	pop    edi
c00144b7:	5d                   	pop    ebp
c00144b8:	c3                   	ret    
c00144b9:	83 ec 08             	sub    esp,0x8
c00144bc:	52                   	push   edx
c00144bd:	56                   	push   esi
c00144be:	ff d0                	call   eax
c00144c0:	83 c4 10             	add    esp,0x10
c00144c3:	83 c4 0c             	add    esp,0xc
c00144c6:	5b                   	pop    ebx
c00144c7:	5e                   	pop    esi
c00144c8:	5f                   	pop    edi
c00144c9:	5d                   	pop    ebp
c00144ca:	c3                   	ret    
c00144cb:	90                   	nop

c00144cc <InterruptController::InterruptController(char const*)>:
c00144cc:	83 ec 1c             	sub    esp,0x1c
c00144cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d3:	83 ec 08             	sub    esp,0x8
c00144d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144da:	50                   	push   eax
c00144db:	e8 94 f8 ff ff       	call   c0013d74 <Device::Device(char const*)>
c00144e0:	83 c4 10             	add    esp,0x10
c00144e3:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c00144e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ec:	89 10                	mov    DWORD PTR [eax],edx
c00144ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014504:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001450c:	7f 5e                	jg     c001456c <InterruptController::InterruptController(char const*)+0xa0>
c001450e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014516:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001451b:	7f 49                	jg     c0014566 <InterruptController::InterruptController(char const*)+0x9a>
c001451d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014525:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001452c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014530:	01 ca                	add    edx,ecx
c0014532:	83 c2 54             	add    edx,0x54
c0014535:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001453d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014545:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001454c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014550:	01 ca                	add    edx,ecx
c0014552:	81 c2 54 04 00 00    	add    edx,0x454
c0014558:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014560:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014564:	eb b0                	jmp    c0014516 <InterruptController::InterruptController(char const*)+0x4a>
c0014566:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001456a:	eb 98                	jmp    c0014504 <InterruptController::InterruptController(char const*)+0x38>
c001456c:	90                   	nop
c001456d:	83 c4 1c             	add    esp,0x1c
c0014570:	c3                   	ret    
c0014571:	90                   	nop

c0014572 <InterruptController::~InterruptController()>:
c0014572:	83 ec 0c             	sub    esp,0xc
c0014575:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c001457a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457e:	89 10                	mov    DWORD PTR [eax],edx
c0014580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	50                   	push   eax
c0014588:	e8 c9 f4 ff ff       	call   c0013a56 <Device::~Device()>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	90                   	nop
c0014591:	83 c4 0c             	add    esp,0xc
c0014594:	c3                   	ret    
c0014595:	90                   	nop

c0014596 <InterruptController::~InterruptController()>:
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	83 ec 0c             	sub    esp,0xc
c001459c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a0:	e8 cd ff ff ff       	call   c0014572 <InterruptController::~InterruptController()>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	83 ec 08             	sub    esp,0x8
c00145ab:	68 58 21 00 00       	push   0x2158
c00145b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b4:	e8 fc e0 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	83 c4 0c             	add    esp,0xc
c00145bf:	c3                   	ret    

c00145c0 <displayDebugInfo(regs*)>:
c00145c0:	55                   	push   ebp
c00145c1:	57                   	push   edi
c00145c2:	56                   	push   esi
c00145c3:	53                   	push   ebx
c00145c4:	83 ec 24             	sub    esp,0x24
c00145c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145cb:	0f 20 c2             	mov    edx,cr0
c00145ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145d2:	0f 20 d7             	mov    edi,cr2
c00145d5:	0f 20 de             	mov    esi,cr3
c00145d8:	0f 20 e5             	mov    ebp,cr4
c00145db:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145de:	68 a2 96 02 c0       	push   0xc00296a2
c00145e3:	e8 ad e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00145e8:	58                   	pop    eax
c00145e9:	5a                   	pop    edx
c00145ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145ed:	68 ad 96 02 c0       	push   0xc00296ad
c00145f2:	e8 9e e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00145f7:	59                   	pop    ecx
c00145f8:	58                   	pop    eax
c00145f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145fc:	68 b8 96 02 c0       	push   0xc00296b8
c0014601:	e8 8f e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014606:	58                   	pop    eax
c0014607:	5a                   	pop    edx
c0014608:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001460b:	68 c3 96 02 c0       	push   0xc00296c3
c0014610:	e8 80 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014615:	59                   	pop    ecx
c0014616:	58                   	pop    eax
c0014617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001461a:	68 ce 96 02 c0       	push   0xc00296ce
c001461f:	e8 71 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014624:	58                   	pop    eax
c0014625:	5a                   	pop    edx
c0014626:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014629:	68 d9 96 02 c0       	push   0xc00296d9
c001462e:	e8 62 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014633:	59                   	pop    ecx
c0014634:	58                   	pop    eax
c0014635:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014638:	68 e4 96 02 c0       	push   0xc00296e4
c001463d:	e8 53 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014642:	58                   	pop    eax
c0014643:	5a                   	pop    edx
c0014644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014647:	68 ef 96 02 c0       	push   0xc00296ef
c001464c:	e8 44 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014651:	59                   	pop    ecx
c0014652:	58                   	pop    eax
c0014653:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014656:	68 fa 96 02 c0       	push   0xc00296fa
c001465b:	e8 35 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014660:	58                   	pop    eax
c0014661:	5a                   	pop    edx
c0014662:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014665:	68 09 97 02 c0       	push   0xc0029709
c001466a:	e8 26 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001466f:	59                   	pop    ecx
c0014670:	58                   	pop    eax
c0014671:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014674:	68 14 97 02 c0       	push   0xc0029714
c0014679:	e8 17 e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001467e:	58                   	pop    eax
c001467f:	5a                   	pop    edx
c0014680:	57                   	push   edi
c0014681:	68 1f 97 02 c0       	push   0xc002971f
c0014686:	e8 0a e1 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001468b:	59                   	pop    ecx
c001468c:	58                   	pop    eax
c001468d:	56                   	push   esi
c001468e:	68 2a 97 02 c0       	push   0xc002972a
c0014693:	e8 fd e0 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014698:	58                   	pop    eax
c0014699:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001469e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a4:	e8 84 c2 ff ff       	call   c001092d <setActiveTerminal(VgaText*)>
c00146a9:	58                   	pop    eax
c00146aa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146ad:	5a                   	pop    edx
c00146ae:	c1 e0 05             	shl    eax,0x5
c00146b1:	05 20 b9 02 c0       	add    eax,0xc002b920
c00146b6:	50                   	push   eax
c00146b7:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c2:	e8 85 c6 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00146c7:	59                   	pop    ecx
c00146c8:	58                   	pop    eax
c00146c9:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146ce:	68 35 97 02 c0       	push   0xc0029735
c00146d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d9:	e8 6e c6 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00146de:	58                   	pop    eax
c00146df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e4:	5a                   	pop    edx
c00146e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146e8:	83 c0 0c             	add    eax,0xc
c00146eb:	50                   	push   eax
c00146ec:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 50 c6 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00146fc:	59                   	pop    ecx
c00146fd:	58                   	pop    eax
c00146fe:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014703:	68 3e 97 02 c0       	push   0xc002973e
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 39 c6 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0014713:	58                   	pop    eax
c0014714:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014719:	5a                   	pop    edx
c001471a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001471d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014723:	e8 4a c6 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014728:	59                   	pop    ecx
c0014729:	58                   	pop    eax
c001472a:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001472f:	68 46 97 02 c0       	push   0xc0029746
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 0d c6 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001473f:	58                   	pop    eax
c0014740:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014745:	5a                   	pop    edx
c0014746:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 1e c6 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	58                   	pop    eax
c0014756:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001475b:	68 4e 97 02 c0       	push   0xc002974e
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 e1 c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001476b:	58                   	pop    eax
c001476c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014771:	5a                   	pop    edx
c0014772:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477b:	e8 f2 c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014787:	68 56 97 02 c0       	push   0xc0029756
c001478c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014792:	e8 b5 c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0014797:	58                   	pop    eax
c0014798:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001479d:	5a                   	pop    edx
c001479e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00147a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a7:	e8 c6 c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c00147ac:	59                   	pop    ecx
c00147ad:	58                   	pop    eax
c00147ae:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147b3:	68 5e 97 02 c0       	push   0xc002975e
c00147b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147be:	e8 89 c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00147c3:	58                   	pop    eax
c00147c4:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147c9:	5a                   	pop    edx
c00147ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d3:	e8 9a c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c00147d8:	59                   	pop    ecx
c00147d9:	58                   	pop    eax
c00147da:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147df:	68 66 97 02 c0       	push   0xc0029766
c00147e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ea:	e8 5d c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00147ef:	58                   	pop    eax
c00147f0:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147f5:	5a                   	pop    edx
c00147f6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 6e c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014804:	59                   	pop    ecx
c0014805:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001480a:	5b                   	pop    ebx
c001480b:	68 6e 97 02 c0       	push   0xc002976e
c0014810:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014816:	e8 31 c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001481b:	58                   	pop    eax
c001481c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014821:	5a                   	pop    edx
c0014822:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014826:	52                   	push   edx
c0014827:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482d:	e8 40 c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014832:	59                   	pop    ecx
c0014833:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014838:	5b                   	pop    ebx
c0014839:	68 77 97 02 c0       	push   0xc0029777
c001483e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014844:	e8 03 c5 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0014849:	58                   	pop    eax
c001484a:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001484f:	5a                   	pop    edx
c0014850:	57                   	push   edi
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 16 c5 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c001485c:	59                   	pop    ecx
c001485d:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014862:	5b                   	pop    ebx
c0014863:	68 7f 97 02 c0       	push   0xc002977f
c0014868:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486e:	e8 d9 c4 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0014873:	5f                   	pop    edi
c0014874:	58                   	pop    eax
c0014875:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001487a:	56                   	push   esi
c001487b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014881:	e8 ec c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014886:	58                   	pop    eax
c0014887:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001488c:	5a                   	pop    edx
c001488d:	68 87 97 02 c0       	push   0xc0029787
c0014892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014898:	e8 af c4 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001489d:	59                   	pop    ecx
c001489e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148a3:	5b                   	pop    ebx
c00148a4:	55                   	push   ebp
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 c2 c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c00148b0:	5e                   	pop    esi
c00148b1:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148b6:	5f                   	pop    edi
c00148b7:	68 8f 97 02 c0       	push   0xc002978f
c00148bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c2:	e8 85 c4 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00148c7:	0f 21 c0             	mov    eax,db0
c00148ca:	5d                   	pop    ebp
c00148cb:	5a                   	pop    edx
c00148cc:	50                   	push   eax
c00148cd:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d8:	e8 95 c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c00148dd:	59                   	pop    ecx
c00148de:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148e3:	5b                   	pop    ebx
c00148e4:	68 98 97 02 c0       	push   0xc0029798
c00148e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ef:	e8 58 c4 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00148f4:	0f 21 c8             	mov    eax,db1
c00148f7:	5e                   	pop    esi
c00148f8:	5f                   	pop    edi
c00148f9:	50                   	push   eax
c00148fa:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014905:	e8 68 c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c001490a:	5d                   	pop    ebp
c001490b:	58                   	pop    eax
c001490c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014911:	68 a0 97 02 c0       	push   0xc00297a0
c0014916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491c:	e8 2b c4 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0014921:	0f 21 d0             	mov    eax,db2
c0014924:	5a                   	pop    edx
c0014925:	59                   	pop    ecx
c0014926:	50                   	push   eax
c0014927:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001492c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014932:	e8 3b c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014937:	5b                   	pop    ebx
c0014938:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001493d:	5e                   	pop    esi
c001493e:	68 a8 97 02 c0       	push   0xc00297a8
c0014943:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014949:	e8 fe c3 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001494e:	0f 21 d8             	mov    eax,db3
c0014951:	5f                   	pop    edi
c0014952:	5d                   	pop    ebp
c0014953:	50                   	push   eax
c0014954:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495f:	e8 0e c4 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014964:	58                   	pop    eax
c0014965:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001496a:	5a                   	pop    edx
c001496b:	68 b0 97 02 c0       	push   0xc00297b0
c0014970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014976:	e8 d1 c3 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001497b:	0f 21 f0             	mov    eax,db6
c001497e:	59                   	pop    ecx
c001497f:	5b                   	pop    ebx
c0014980:	50                   	push   eax
c0014981:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014986:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498c:	e8 e1 c3 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0014991:	5e                   	pop    esi
c0014992:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014997:	5f                   	pop    edi
c0014998:	68 b8 97 02 c0       	push   0xc00297b8
c001499d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a3:	e8 a4 c3 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00149a8:	0f 21 f8             	mov    eax,db7
c00149ab:	5d                   	pop    ebp
c00149ac:	5a                   	pop    edx
c00149ad:	50                   	push   eax
c00149ae:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00149b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b9:	e8 b4 c3 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c00149be:	fa                   	cli    
c00149bf:	f4                   	hlt    
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	eb fe                	jmp    c00149c3 <displayDebugInfo(regs*)+0x403>

c00149c5 <x87EmulHandler(regs*, void*)>:
c00149c5:	53                   	push   ebx
c00149c6:	83 ec 14             	sub    esp,0x14
c00149c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149cd:	53                   	push   ebx
c00149ce:	e8 ff 9f 00 00       	call   c001e9d2 <Vm::x87Handler(regs*)>
c00149d3:	83 c4 10             	add    esp,0x10
c00149d6:	84 c0                	test   al,al
c00149d8:	74 05                	je     c00149df <x87EmulHandler(regs*, void*)+0x1a>
c00149da:	83 c4 08             	add    esp,0x8
c00149dd:	5b                   	pop    ebx
c00149de:	c3                   	ret    
c00149df:	83 ec 0c             	sub    esp,0xc
c00149e2:	68 c0 97 02 c0       	push   0xc00297c0
c00149e7:	e8 a9 dd ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00149ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ef:	e8 cc fb ff ff       	call   c00145c0 <displayDebugInfo(regs*)>

c00149f4 <gpFault(regs*, void*)>:
c00149f4:	53                   	push   ebx
c00149f5:	83 ec 14             	sub    esp,0x14
c00149f8:	c7 05 10 cb 02 c0 4f dd 01 c0 	mov    DWORD PTR ds:0xc002cb10,0xc001dd4f
c0014a02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a06:	53                   	push   ebx
c0014a07:	e8 43 93 00 00       	call   c001dd4f <Vm::faultHandler(regs*)>
c0014a0c:	83 c4 10             	add    esp,0x10
c0014a0f:	84 c0                	test   al,al
c0014a11:	74 05                	je     c0014a18 <gpFault(regs*, void*)+0x24>
c0014a13:	83 c4 08             	add    esp,0x8
c0014a16:	5b                   	pop    ebx
c0014a17:	c3                   	ret    
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	68 d6 97 02 c0       	push   0xc00297d6
c0014a20:	e8 70 dd ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014a25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a28:	e8 93 fb ff ff       	call   c00145c0 <displayDebugInfo(regs*)>

c0014a2d <pgFault(regs*, void*)>:
c0014a2d:	83 ec 18             	sub    esp,0x18
c0014a30:	68 f1 97 02 c0       	push   0xc00297f1
c0014a35:	e8 5b dd ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014a3a:	58                   	pop    eax
c0014a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a3f:	e8 7c fb ff ff       	call   c00145c0 <displayDebugInfo(regs*)>

c0014a44 <otherISRHandler(regs*, void*)>:
c0014a44:	53                   	push   ebx
c0014a45:	83 ec 0c             	sub    esp,0xc
c0014a48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a4c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a4f:	50                   	push   eax
c0014a50:	50                   	push   eax
c0014a51:	68 fe 97 02 c0       	push   0xc00297fe
c0014a56:	e8 3a dd ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a5e:	e8 5d fb ff ff       	call   c00145c0 <displayDebugInfo(regs*)>

c0014a63 <opcodeFault(regs*, void*)>:
c0014a63:	55                   	push   ebp
c0014a64:	89 e5                	mov    ebp,esp
c0014a66:	56                   	push   esi
c0014a67:	53                   	push   ebx
c0014a68:	83 ec 40             	sub    esp,0x40
c0014a6b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0014a70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a76:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a7c:	84 c0                	test   al,al
c0014a7e:	74 24                	je     c0014aa4 <opcodeFault(regs*, void*)+0x41>
c0014a80:	83 ec 0c             	sub    esp,0xc
c0014a83:	68 1c 98 02 c0       	push   0xc002981c
c0014a88:	e8 08 dd ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a96:	8d 50 19             	lea    edx,[eax+0x19]
c0014a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a9f:	e9 77 05 00 00       	jmp    c001501b <opcodeFault(regs*, void*)+0x5b8>
c0014aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aaa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014aad:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ab1:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014abb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac3:	3c f0                	cmp    al,0xf0
c0014ac5:	75 17                	jne    c0014ade <opcodeFault(regs*, void*)+0x7b>
c0014ac7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014acd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad0:	8d 50 01             	lea    edx,[eax+0x1]
c0014ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ad9:	e9 da 00 00 00       	jmp    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014ade:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae3:	3c f2                	cmp    al,0xf2
c0014ae5:	74 09                	je     c0014af0 <opcodeFault(regs*, void*)+0x8d>
c0014ae7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aea:	8a 00                	mov    al,BYTE PTR [eax]
c0014aec:	3c f3                	cmp    al,0xf3
c0014aee:	75 1b                	jne    c0014b0b <opcodeFault(regs*, void*)+0xa8>
c0014af0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014af4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afd:	8d 50 01             	lea    edx,[eax+0x1]
c0014b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b06:	e9 ad 00 00 00       	jmp    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014b0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b10:	3c 66                	cmp    al,0x66
c0014b12:	75 1f                	jne    c0014b33 <opcodeFault(regs*, void*)+0xd0>
c0014b14:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b18:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b25:	8d 50 01             	lea    edx,[eax+0x1]
c0014b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b2e:	e9 85 00 00 00       	jmp    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014b33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b36:	8a 00                	mov    al,BYTE PTR [eax]
c0014b38:	3c 67                	cmp    al,0x67
c0014b3a:	75 18                	jne    c0014b54 <opcodeFault(regs*, void*)+0xf1>
c0014b3c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b40:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b49:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b52:	eb 64                	jmp    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b57:	8a 00                	mov    al,BYTE PTR [eax]
c0014b59:	3c 2e                	cmp    al,0x2e
c0014b5b:	74 09                	je     c0014b66 <opcodeFault(regs*, void*)+0x103>
c0014b5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b60:	8a 00                	mov    al,BYTE PTR [eax]
c0014b62:	3c 3e                	cmp    al,0x3e
c0014b64:	75 18                	jne    c0014b7e <opcodeFault(regs*, void*)+0x11b>
c0014b66:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b6a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b73:	8d 50 01             	lea    edx,[eax+0x1]
c0014b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b7c:	eb 3a                	jmp    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014b7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b81:	8a 00                	mov    al,BYTE PTR [eax]
c0014b83:	3c 36                	cmp    al,0x36
c0014b85:	74 1b                	je     c0014ba2 <opcodeFault(regs*, void*)+0x13f>
c0014b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8c:	3c 26                	cmp    al,0x26
c0014b8e:	74 12                	je     c0014ba2 <opcodeFault(regs*, void*)+0x13f>
c0014b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b93:	8a 00                	mov    al,BYTE PTR [eax]
c0014b95:	3c 64                	cmp    al,0x64
c0014b97:	74 09                	je     c0014ba2 <opcodeFault(regs*, void*)+0x13f>
c0014b99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9e:	3c 65                	cmp    al,0x65
c0014ba0:	75 16                	jne    c0014bb8 <opcodeFault(regs*, void*)+0x155>
c0014ba2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ba6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014baf:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbd:	3c 0f                	cmp    al,0xf
c0014bbf:	0f 85 ad 00 00 00    	jne    c0014c72 <opcodeFault(regs*, void*)+0x20f>
c0014bc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc8:	40                   	inc    eax
c0014bc9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bcb:	3c c2                	cmp    al,0xc2
c0014bcd:	74 0e                	je     c0014bdd <opcodeFault(regs*, void*)+0x17a>
c0014bcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd2:	40                   	inc    eax
c0014bd3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd5:	3c c3                	cmp    al,0xc3
c0014bd7:	0f 85 95 00 00 00    	jne    c0014c72 <opcodeFault(regs*, void*)+0x20f>
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	68 3f 98 02 c0       	push   0xc002983f
c0014be5:	e8 ab db ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014bea:	83 c4 10             	add    esp,0x10
c0014bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bfc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c02:	8a 00                	mov    al,BYTE PTR [eax]
c0014c04:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0a:	88 10                	mov    BYTE PTR [eax],dl
c0014c0c:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c0f:	50                   	push   eax
c0014c10:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c13:	50                   	push   eax
c0014c14:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c17:	50                   	push   eax
c0014c18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c1b:	e8 c0 44 00 00       	call   c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c29:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c2c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c2f:	01 d0                	add    eax,edx
c0014c31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c37:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c3a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c3d:	48                   	dec    eax
c0014c3e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c44:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4d:	83 ec 04             	sub    esp,0x4
c0014c50:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c53:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c56:	50                   	push   eax
c0014c57:	e8 0d b5 fe ff       	call   c0000169 <voodooXADD>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c65:	01 c2                	add    edx,eax
c0014c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c6d:	e9 a9 03 00 00       	jmp    c001501b <opcodeFault(regs*, void*)+0x5b8>
c0014c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c75:	8a 00                	mov    al,BYTE PTR [eax]
c0014c77:	3c 0f                	cmp    al,0xf
c0014c79:	0f 85 8b 01 00 00    	jne    c0014e0a <opcodeFault(regs*, void*)+0x3a7>
c0014c7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c82:	40                   	inc    eax
c0014c83:	8a 00                	mov    al,BYTE PTR [eax]
c0014c85:	3c c7                	cmp    al,0xc7
c0014c87:	0f 86 7d 01 00 00    	jbe    c0014e0a <opcodeFault(regs*, void*)+0x3a7>
c0014c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c90:	40                   	inc    eax
c0014c91:	8a 00                	mov    al,BYTE PTR [eax]
c0014c93:	3c cf                	cmp    al,0xcf
c0014c95:	0f 87 6f 01 00 00    	ja     c0014e0a <opcodeFault(regs*, void*)+0x3a7>
c0014c9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9e:	40                   	inc    eax
c0014c9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca1:	83 c0 38             	add    eax,0x38
c0014ca4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014ca7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cab:	75 0b                	jne    c0014cb8 <opcodeFault(regs*, void*)+0x255>
c0014cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014cb3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cb6:	eb 75                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014cb8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cbc:	75 0b                	jne    c0014cc9 <opcodeFault(regs*, void*)+0x266>
c0014cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014cc4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cc7:	eb 64                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014cc9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ccd:	75 0b                	jne    c0014cda <opcodeFault(regs*, void*)+0x277>
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd8:	eb 53                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014cda:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cde:	75 0b                	jne    c0014ceb <opcodeFault(regs*, void*)+0x288>
c0014ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ce6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce9:	eb 42                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014ceb:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cef:	75 0b                	jne    c0014cfc <opcodeFault(regs*, void*)+0x299>
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014cf7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cfa:	eb 31                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014cfc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d00:	75 0b                	jne    c0014d0d <opcodeFault(regs*, void*)+0x2aa>
c0014d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d05:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d0b:	eb 20                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014d0d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d11:	75 0b                	jne    c0014d1e <opcodeFault(regs*, void*)+0x2bb>
c0014d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d16:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d1c:	eb 0f                	jmp    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014d1e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d22:	75 09                	jne    c0014d2d <opcodeFault(regs*, void*)+0x2ca>
c0014d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d27:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d2d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d31:	74 10                	je     c0014d43 <opcodeFault(regs*, void*)+0x2e0>
c0014d33:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d3a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d41:	eb 2d                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x30d>
c0014d43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d46:	c1 e0 18             	shl    eax,0x18
c0014d49:	89 c2                	mov    edx,eax
c0014d4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d4e:	c1 e0 08             	shl    eax,0x8
c0014d51:	25 00 00 ff 00       	and    eax,0xff0000
c0014d56:	09 c2                	or     edx,eax
c0014d58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d5b:	c1 e8 08             	shr    eax,0x8
c0014d5e:	25 00 ff 00 00       	and    eax,0xff00
c0014d63:	09 c2                	or     edx,eax
c0014d65:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d68:	c1 e8 18             	shr    eax,0x18
c0014d6b:	09 d0                	or     eax,edx
c0014d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d70:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d74:	75 0b                	jne    c0014d81 <opcodeFault(regs*, void*)+0x31e>
c0014d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d7f:	eb 75                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014d81:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d85:	75 0b                	jne    c0014d92 <opcodeFault(regs*, void*)+0x32f>
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d8d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d90:	eb 64                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014d92:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d96:	75 0b                	jne    c0014da3 <opcodeFault(regs*, void*)+0x340>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d9e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014da1:	eb 53                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014da3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014da7:	75 0b                	jne    c0014db4 <opcodeFault(regs*, void*)+0x351>
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014daf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014db2:	eb 42                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014db4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014db8:	75 0b                	jne    c0014dc5 <opcodeFault(regs*, void*)+0x362>
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dc0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014dc3:	eb 31                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014dc5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dc9:	75 0b                	jne    c0014dd6 <opcodeFault(regs*, void*)+0x373>
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dd1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014dd4:	eb 20                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014dd6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dda:	75 0b                	jne    c0014de7 <opcodeFault(regs*, void*)+0x384>
c0014ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014de2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014de5:	eb 0f                	jmp    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014de7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014deb:	75 09                	jne    c0014df6 <opcodeFault(regs*, void*)+0x393>
c0014ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014df3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dfc:	8d 50 02             	lea    edx,[eax+0x2]
c0014dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e05:	e9 11 02 00 00       	jmp    c001501b <opcodeFault(regs*, void*)+0x5b8>
c0014e0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0f:	3c 0f                	cmp    al,0xf
c0014e11:	0f 85 76 01 00 00    	jne    c0014f8d <opcodeFault(regs*, void*)+0x52a>
c0014e17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1a:	40                   	inc    eax
c0014e1b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1d:	3c c7                	cmp    al,0xc7
c0014e1f:	0f 85 68 01 00 00    	jne    c0014f8d <opcodeFault(regs*, void*)+0x52a>
c0014e25:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0014e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e34:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e37:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e3a:	50                   	push   eax
c0014e3b:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e3e:	50                   	push   eax
c0014e3f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e42:	50                   	push   eax
c0014e43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e46:	e8 95 42 00 00       	call   c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e51:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e54:	83 f0 01             	xor    eax,0x1
c0014e57:	84 c0                	test   al,al
c0014e59:	0f 84 2e 01 00 00    	je     c0014f8d <opcodeFault(regs*, void*)+0x52a>
c0014e5f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e62:	3c 01                	cmp    al,0x1
c0014e64:	0f 85 23 01 00 00    	jne    c0014f8d <opcodeFault(regs*, void*)+0x52a>
c0014e6a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e6d:	83 f0 01             	xor    eax,0x1
c0014e70:	84 c0                	test   al,al
c0014e72:	0f 84 15 01 00 00    	je     c0014f8d <opcodeFault(regs*, void*)+0x52a>
c0014e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e7e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e81:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e88:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e8b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e8e:	89 c2                	mov    edx,eax
c0014e90:	b8 00 00 00 00       	mov    eax,0x0
c0014e95:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e98:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ea1:	ba 00 00 00 00       	mov    edx,0x0
c0014ea6:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014ea9:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014eb2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014eb5:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ebc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ebf:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ec2:	89 c2                	mov    edx,eax
c0014ec4:	b8 00 00 00 00       	mov    eax,0x0
c0014ec9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ecc:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ed5:	ba 00 00 00 00       	mov    edx,0x0
c0014eda:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014edd:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014ee0:	e8 59 7e 00 00       	call   c001cd3e <lockScheduler()>
c0014ee5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ee8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014eeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eed:	89 c1                	mov    ecx,eax
c0014eef:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ef2:	89 cb                	mov    ebx,ecx
c0014ef4:	89 d0                	mov    eax,edx
c0014ef6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ef9:	89 c6                	mov    esi,eax
c0014efb:	89 f0                	mov    eax,esi
c0014efd:	09 d8                	or     eax,ebx
c0014eff:	85 c0                	test   eax,eax
c0014f01:	75 21                	jne    c0014f24 <opcodeFault(regs*, void*)+0x4c1>
c0014f03:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f06:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f09:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f0c:	89 01                	mov    DWORD PTR [ecx],eax
c0014f0e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f17:	83 c8 40             	or     eax,0x40
c0014f1a:	89 c2                	mov    edx,eax
c0014f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f22:	eb 3e                	jmp    c0014f62 <opcodeFault(regs*, void*)+0x4ff>
c0014f24:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f2c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f2f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f32:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f38:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f3b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f3e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f41:	89 d0                	mov    eax,edx
c0014f43:	31 d2                	xor    edx,edx
c0014f45:	89 c3                	mov    ebx,eax
c0014f47:	89 d6                	mov    esi,edx
c0014f49:	89 da                	mov    edx,ebx
c0014f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f57:	83 e0 bf             	and    eax,0xffffffbf
c0014f5a:	89 c2                	mov    edx,eax
c0014f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f62:	e8 d9 7d 00 00       	call   c001cd40 <unlockScheduler()>
c0014f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f70:	01 c2                	add    edx,eax
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f78:	83 ec 0c             	sub    esp,0xc
c0014f7b:	68 4e 98 02 c0       	push   0xc002984e
c0014f80:	e8 10 d8 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	e9 8e 00 00 00       	jmp    c001501b <opcodeFault(regs*, void*)+0x5b8>
c0014f8d:	83 ec 0c             	sub    esp,0xc
c0014f90:	68 61 98 02 c0       	push   0xc0029861
c0014f95:	e8 fb d7 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa9:	c1 e0 04             	shl    eax,0x4
c0014fac:	01 d0                	add    eax,edx
c0014fae:	83 c0 03             	add    eax,0x3
c0014fb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb3:	0f b6 d8             	movzx  ebx,al
c0014fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fc2:	c1 e0 04             	shl    eax,0x4
c0014fc5:	01 d0                	add    eax,edx
c0014fc7:	83 c0 02             	add    eax,0x2
c0014fca:	8a 00                	mov    al,BYTE PTR [eax]
c0014fcc:	0f b6 c8             	movzx  ecx,al
c0014fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fdb:	c1 e0 04             	shl    eax,0x4
c0014fde:	01 d0                	add    eax,edx
c0014fe0:	40                   	inc    eax
c0014fe1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe3:	0f b6 d0             	movzx  edx,al
c0014fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ff2:	c1 e0 04             	shl    eax,0x4
c0014ff5:	01 f0                	add    eax,esi
c0014ff7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff9:	0f b6 c0             	movzx  eax,al
c0014ffc:	83 ec 0c             	sub    esp,0xc
c0014fff:	53                   	push   ebx
c0015000:	51                   	push   ecx
c0015001:	52                   	push   edx
c0015002:	50                   	push   eax
c0015003:	68 74 98 02 c0       	push   0xc0029874
c0015008:	e8 88 d7 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001500d:	83 c4 20             	add    esp,0x20
c0015010:	83 ec 0c             	sub    esp,0xc
c0015013:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015016:	e8 a5 f5 ff ff       	call   c00145c0 <displayDebugInfo(regs*)>
c001501b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001501e:	5b                   	pop    ebx
c001501f:	5e                   	pop    esi
c0015020:	5d                   	pop    ebp
c0015021:	c3                   	ret    

c0015022 <displayProgramFault(char const*)>:
c0015022:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015027:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001502a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015030:	85 c0                	test   eax,eax
c0015032:	74 15                	je     c0015049 <displayProgramFault(char const*)+0x27>
c0015034:	83 ec 0c             	sub    esp,0xc
c0015037:	6a 04                	push   0x4
c0015039:	6a 0f                	push   0xf
c001503b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001503f:	50                   	push   eax
c0015040:	e8 c9 b9 ff ff       	call   c0010a0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015045:	83 c4 1c             	add    esp,0x1c
c0015048:	c3                   	ret    
c0015049:	c3                   	ret    

c001504a <setupInterruptController()>:
c001504a:	55                   	push   ebp
c001504b:	89 e5                	mov    ebp,esp
c001504d:	53                   	push   ebx
c001504e:	83 ec 24             	sub    esp,0x24
c0015051:	b8 00 00 00 00       	mov    eax,0x0
c0015056:	85 c0                	test   eax,eax
c0015058:	0f 95 c0             	setne  al
c001505b:	84 c0                	test   al,al
c001505d:	74 5b                	je     c00150ba <setupInterruptController()+0x70>
c001505f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015066:	83 ec 0c             	sub    esp,0xc
c0015069:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001506c:	e8 63 a4 ff ff       	call   c000f4d4 <malloc>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	89 c3                	mov    ebx,eax
c0015076:	83 ec 0c             	sub    esp,0xc
c0015079:	53                   	push   ebx
c001507a:	e8 c3 f2 00 00       	call   c0024342 <APIC::APIC()>
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015085:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015088:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001508b:	8b 00                	mov    eax,DWORD PTR [eax]
c001508d:	83 c0 08             	add    eax,0x8
c0015090:	8b 00                	mov    eax,DWORD PTR [eax]
c0015092:	6a 00                	push   0x0
c0015094:	6a 00                	push   0x0
c0015096:	6a 00                	push   0x0
c0015098:	52                   	push   edx
c0015099:	ff d0                	call   eax
c001509b:	83 c4 10             	add    esp,0x10
c001509e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00150a3:	83 ec 08             	sub    esp,0x8
c00150a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150a9:	50                   	push   eax
c00150aa:	e8 d5 ea ff ff       	call   c0013b84 <Device::addChild(Device*)>
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150b5:	e9 52 03 00 00       	jmp    c001540c <setupInterruptController()+0x3c2>
c00150ba:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00150bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150c5:	83 e0 01             	and    eax,0x1
c00150c8:	84 c0                	test   al,al
c00150ca:	0f 95 c0             	setne  al
c00150cd:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150d0:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150d7:	83 ec 0c             	sub    esp,0xc
c00150da:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150dd:	e8 f2 a3 ff ff       	call   c000f4d4 <malloc>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	89 c3                	mov    ebx,eax
c00150e7:	83 ec 0c             	sub    esp,0xc
c00150ea:	53                   	push   ebx
c00150eb:	e8 aa f7 00 00       	call   c002489a <PIC::PIC()>
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fe:	83 c0 08             	add    eax,0x8
c0015101:	8b 00                	mov    eax,DWORD PTR [eax]
c0015103:	6a 00                	push   0x0
c0015105:	6a 00                	push   0x0
c0015107:	6a 00                	push   0x0
c0015109:	52                   	push   edx
c001510a:	ff d0                	call   eax
c001510c:	83 c4 10             	add    esp,0x10
c001510f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015113:	74 73                	je     c0015188 <setupInterruptController()+0x13e>
c0015115:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015118:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511b:	8b 00                	mov    eax,DWORD PTR [eax]
c001511d:	83 c0 0c             	add    eax,0xc
c0015120:	8b 00                	mov    eax,DWORD PTR [eax]
c0015122:	6a 00                	push   0x0
c0015124:	6a 00                	push   0x0
c0015126:	6a 00                	push   0x0
c0015128:	52                   	push   edx
c0015129:	ff d0                	call   eax
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015132:	74 15                	je     c0015149 <setupInterruptController()+0xff>
c0015134:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015137:	8b 00                	mov    eax,DWORD PTR [eax]
c0015139:	83 c0 04             	add    eax,0x4
c001513c:	8b 00                	mov    eax,DWORD PTR [eax]
c001513e:	83 ec 0c             	sub    esp,0xc
c0015141:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015144:	ff d0                	call   eax
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015150:	83 ec 0c             	sub    esp,0xc
c0015153:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015156:	e8 79 a3 ff ff       	call   c000f4d4 <malloc>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	89 c3                	mov    ebx,eax
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	53                   	push   ebx
c0015164:	e8 d9 f1 00 00       	call   c0024342 <APIC::APIC()>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001516f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015172:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015175:	8b 00                	mov    eax,DWORD PTR [eax]
c0015177:	83 c0 08             	add    eax,0x8
c001517a:	8b 00                	mov    eax,DWORD PTR [eax]
c001517c:	6a 00                	push   0x0
c001517e:	6a 00                	push   0x0
c0015180:	6a 00                	push   0x0
c0015182:	52                   	push   edx
c0015183:	ff d0                	call   eax
c0015185:	83 c4 10             	add    esp,0x10
c0015188:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001518d:	83 ec 08             	sub    esp,0x8
c0015190:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015193:	50                   	push   eax
c0015194:	e8 eb e9 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519f:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a1:	83 c0 24             	add    eax,0x24
c00151a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a6:	6a 00                	push   0x0
c00151a8:	68 44 4a 01 c0       	push   0xc0014a44
c00151ad:	6a 00                	push   0x0
c00151af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b2:	ff d0                	call   eax
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bc:	83 c0 24             	add    eax,0x24
c00151bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c1:	6a 00                	push   0x0
c00151c3:	68 44 4a 01 c0       	push   0xc0014a44
c00151c8:	6a 01                	push   0x1
c00151ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cd:	ff d0                	call   eax
c00151cf:	83 c4 10             	add    esp,0x10
c00151d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d7:	83 c0 24             	add    eax,0x24
c00151da:	8b 00                	mov    eax,DWORD PTR [eax]
c00151dc:	6a 00                	push   0x0
c00151de:	68 1d 44 01 c0       	push   0xc001441d
c00151e3:	6a 02                	push   0x2
c00151e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e8:	ff d0                	call   eax
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f2:	83 c0 24             	add    eax,0x24
c00151f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f7:	6a 00                	push   0x0
c00151f9:	68 44 4a 01 c0       	push   0xc0014a44
c00151fe:	6a 03                	push   0x3
c0015200:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015203:	ff d0                	call   eax
c0015205:	83 c4 10             	add    esp,0x10
c0015208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520b:	8b 00                	mov    eax,DWORD PTR [eax]
c001520d:	83 c0 24             	add    eax,0x24
c0015210:	8b 00                	mov    eax,DWORD PTR [eax]
c0015212:	6a 00                	push   0x0
c0015214:	68 44 4a 01 c0       	push   0xc0014a44
c0015219:	6a 04                	push   0x4
c001521b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521e:	ff d0                	call   eax
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015226:	8b 00                	mov    eax,DWORD PTR [eax]
c0015228:	83 c0 24             	add    eax,0x24
c001522b:	8b 00                	mov    eax,DWORD PTR [eax]
c001522d:	6a 00                	push   0x0
c001522f:	68 44 4a 01 c0       	push   0xc0014a44
c0015234:	6a 05                	push   0x5
c0015236:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015239:	ff d0                	call   eax
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015241:	8b 00                	mov    eax,DWORD PTR [eax]
c0015243:	83 c0 24             	add    eax,0x24
c0015246:	8b 00                	mov    eax,DWORD PTR [eax]
c0015248:	6a 00                	push   0x0
c001524a:	68 63 4a 01 c0       	push   0xc0014a63
c001524f:	6a 06                	push   0x6
c0015251:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015254:	ff d0                	call   eax
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525c:	8b 00                	mov    eax,DWORD PTR [eax]
c001525e:	83 c0 24             	add    eax,0x24
c0015261:	8b 00                	mov    eax,DWORD PTR [eax]
c0015263:	6a 00                	push   0x0
c0015265:	68 c5 49 01 c0       	push   0xc00149c5
c001526a:	6a 07                	push   0x7
c001526c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526f:	ff d0                	call   eax
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015277:	8b 00                	mov    eax,DWORD PTR [eax]
c0015279:	83 c0 24             	add    eax,0x24
c001527c:	8b 00                	mov    eax,DWORD PTR [eax]
c001527e:	6a 00                	push   0x0
c0015280:	68 38 42 01 c0       	push   0xc0014238
c0015285:	6a 08                	push   0x8
c0015287:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001528a:	ff d0                	call   eax
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015292:	8b 00                	mov    eax,DWORD PTR [eax]
c0015294:	83 c0 24             	add    eax,0x24
c0015297:	8b 00                	mov    eax,DWORD PTR [eax]
c0015299:	6a 00                	push   0x0
c001529b:	68 44 4a 01 c0       	push   0xc0014a44
c00152a0:	6a 09                	push   0x9
c00152a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a5:	ff d0                	call   eax
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	83 c0 24             	add    eax,0x24
c00152b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b4:	6a 00                	push   0x0
c00152b6:	68 44 4a 01 c0       	push   0xc0014a44
c00152bb:	6a 0a                	push   0xa
c00152bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c0:	ff d0                	call   eax
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ca:	83 c0 24             	add    eax,0x24
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	6a 00                	push   0x0
c00152d1:	68 44 4a 01 c0       	push   0xc0014a44
c00152d6:	6a 0b                	push   0xb
c00152d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152db:	ff d0                	call   eax
c00152dd:	83 c4 10             	add    esp,0x10
c00152e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e5:	83 c0 24             	add    eax,0x24
c00152e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ea:	6a 00                	push   0x0
c00152ec:	68 44 4a 01 c0       	push   0xc0014a44
c00152f1:	6a 0c                	push   0xc
c00152f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f6:	ff d0                	call   eax
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015300:	83 c0 24             	add    eax,0x24
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	6a 00                	push   0x0
c0015307:	68 f4 49 01 c0       	push   0xc00149f4
c001530c:	6a 0d                	push   0xd
c001530e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015311:	ff d0                	call   eax
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015319:	8b 00                	mov    eax,DWORD PTR [eax]
c001531b:	83 c0 24             	add    eax,0x24
c001531e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015320:	6a 00                	push   0x0
c0015322:	68 2d 4a 01 c0       	push   0xc0014a2d
c0015327:	6a 0e                	push   0xe
c0015329:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532c:	ff d0                	call   eax
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015334:	8b 00                	mov    eax,DWORD PTR [eax]
c0015336:	83 c0 24             	add    eax,0x24
c0015339:	8b 00                	mov    eax,DWORD PTR [eax]
c001533b:	6a 00                	push   0x0
c001533d:	68 44 4a 01 c0       	push   0xc0014a44
c0015342:	6a 0f                	push   0xf
c0015344:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015347:	ff d0                	call   eax
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015351:	83 c0 24             	add    eax,0x24
c0015354:	8b 00                	mov    eax,DWORD PTR [eax]
c0015356:	6a 00                	push   0x0
c0015358:	68 44 4a 01 c0       	push   0xc0014a44
c001535d:	6a 10                	push   0x10
c001535f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015362:	ff d0                	call   eax
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536a:	8b 00                	mov    eax,DWORD PTR [eax]
c001536c:	83 c0 24             	add    eax,0x24
c001536f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015371:	6a 00                	push   0x0
c0015373:	68 44 4a 01 c0       	push   0xc0014a44
c0015378:	6a 11                	push   0x11
c001537a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537d:	ff d0                	call   eax
c001537f:	83 c4 10             	add    esp,0x10
c0015382:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015385:	8b 00                	mov    eax,DWORD PTR [eax]
c0015387:	83 c0 24             	add    eax,0x24
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	6a 00                	push   0x0
c001538e:	68 44 4a 01 c0       	push   0xc0014a44
c0015393:	6a 12                	push   0x12
c0015395:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015398:	ff d0                	call   eax
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a2:	83 c0 24             	add    eax,0x24
c00153a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a7:	6a 00                	push   0x0
c00153a9:	68 44 4a 01 c0       	push   0xc0014a44
c00153ae:	6a 13                	push   0x13
c00153b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b3:	ff d0                	call   eax
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bd:	83 c0 24             	add    eax,0x24
c00153c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c2:	6a 00                	push   0x0
c00153c4:	68 44 4a 01 c0       	push   0xc0014a44
c00153c9:	6a 14                	push   0x14
c00153cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ce:	ff d0                	call   eax
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d8:	83 c0 24             	add    eax,0x24
c00153db:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dd:	6a 00                	push   0x0
c00153df:	68 44 4a 01 c0       	push   0xc0014a44
c00153e4:	6a 1e                	push   0x1e
c00153e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e9:	ff d0                	call   eax
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f3:	83 c0 24             	add    eax,0x24
c00153f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f8:	6a 00                	push   0x0
c00153fa:	68 d3 b6 01 c0       	push   0xc001b6d3
c00153ff:	6a 60                	push   0x60
c0015401:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015404:	ff d0                	call   eax
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001540f:	c9                   	leave  
c0015410:	c3                   	ret    
c0015411:	90                   	nop

c0015412 <InterruptController::convertLegacyIRQNumber(int)>:
c0015412:	55                   	push   ebp
c0015413:	89 e5                	mov    ebp,esp
c0015415:	83 ec 08             	sub    esp,0x8
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	83 ec 0c             	sub    esp,0xc
c001541e:	50                   	push   eax
c001541f:	e8 4c ea ff ff       	call   c0013e70 <Device::getName()>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8a 00                	mov    al,BYTE PTR [eax]
c0015429:	3c 41                	cmp    al,0x41
c001542b:	0f 94 c0             	sete   al
c001542e:	84 c0                	test   al,al
c0015430:	74 28                	je     c001545a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015432:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015436:	7f 12                	jg     c001544a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015438:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001543b:	05 c0 bb 02 c0       	add    eax,0xc002bbc0
c0015440:	8a 00                	mov    al,BYTE PTR [eax]
c0015442:	0f b6 c0             	movzx  eax,al
c0015445:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015448:	eb 10                	jmp    c001545a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001544a:	83 ec 0c             	sub    esp,0xc
c001544d:	68 f4 95 02 c0       	push   0xc00295f4
c0015452:	e8 58 44 00 00       	call   c00198af <Krnl::panic(char const*)>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001545d:	c9                   	leave  
c001545e:	c3                   	ret    
c001545f:	90                   	nop

c0015460 <startGUI(void*)>:
c0015460:	55                   	push   ebp
c0015461:	89 e5                	mov    ebp,esp
c0015463:	53                   	push   ebx
c0015464:	83 ec 04             	sub    esp,0x4
c0015467:	e8 d4 78 00 00       	call   c001cd40 <unlockScheduler()>
c001546c:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0015472:	83 ec 08             	sub    esp,0x8
c0015475:	6a 01                	push   0x1
c0015477:	68 dc 98 02 c0       	push   0xc00298dc
c001547c:	e8 49 72 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	53                   	push   ebx
c0015488:	50                   	push   eax
c0015489:	e8 4b 74 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0015497:	83 ec 08             	sub    esp,0x8
c001549a:	6a 01                	push   0x1
c001549c:	68 f6 98 02 c0       	push   0xc00298f6
c00154a1:	e8 24 72 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	83 ec 08             	sub    esp,0x8
c00154ac:	53                   	push   ebx
c00154ad:	50                   	push   eax
c00154ae:	e8 26 74 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	90                   	nop
c00154b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154ba:	c9                   	leave  
c00154bb:	c3                   	ret    

c00154bc <startGUIVESA(void*)>:
c00154bc:	55                   	push   ebp
c00154bd:	89 e5                	mov    ebp,esp
c00154bf:	53                   	push   ebx
c00154c0:	83 ec 04             	sub    esp,0x4
c00154c3:	e8 78 78 00 00       	call   c001cd40 <unlockScheduler()>
c00154c8:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c00154ce:	83 ec 08             	sub    esp,0x8
c00154d1:	6a 01                	push   0x1
c00154d3:	68 10 99 02 c0       	push   0xc0029910
c00154d8:	e8 ed 71 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	83 ec 08             	sub    esp,0x8
c00154e3:	53                   	push   ebx
c00154e4:	50                   	push   eax
c00154e5:	e8 ef 73 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c00154ea:	83 c4 10             	add    esp,0x10
c00154ed:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c00154f3:	83 ec 08             	sub    esp,0x8
c00154f6:	6a 01                	push   0x1
c00154f8:	68 f6 98 02 c0       	push   0xc00298f6
c00154fd:	e8 c8 71 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	83 ec 08             	sub    esp,0x8
c0015508:	53                   	push   ebx
c0015509:	50                   	push   eax
c001550a:	e8 ca 73 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c001550f:	83 c4 10             	add    esp,0x10
c0015512:	90                   	nop
c0015513:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015516:	c9                   	leave  
c0015517:	c3                   	ret    

c0015518 <sendKeyToTerminal(unsigned char)>:
c0015518:	55                   	push   ebp
c0015519:	89 e5                	mov    ebp,esp
c001551b:	83 ec 28             	sub    esp,0x28
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015524:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c0015529:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001552d:	83 ec 08             	sub    esp,0x8
c0015530:	52                   	push   edx
c0015531:	50                   	push   eax
c0015532:	e8 3d ba ff ff       	call   c0010f74 <VgaText::receiveKey(unsigned char)>
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001553e:	75 41                	jne    c0015581 <sendKeyToTerminal(unsigned char)+0x69>
c0015540:	e8 20 78 00 00       	call   c001cd65 <lockStuff()>
c0015545:	a1 20 cb 02 c0       	mov    eax,ds:0xc002cb20
c001554a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001554d:	c7 05 20 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb20,0x0
c0015557:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001555b:	74 1f                	je     c001557c <sendKeyToTerminal(unsigned char)+0x64>
c001555d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015560:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015563:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015566:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015569:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015572:	e8 df 7d 00 00       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	eb db                	jmp    c0015557 <sendKeyToTerminal(unsigned char)+0x3f>
c001557c:	e8 7e 7b 00 00       	call   c001d0ff <unlockStuff()>
c0015581:	90                   	nop
c0015582:	c9                   	leave  
c0015583:	c3                   	ret    

c0015584 <sendKeyboardToken(KeyboardToken)>:
c0015584:	55                   	push   ebp
c0015585:	89 e5                	mov    ebp,esp
c0015587:	83 ec 18             	sub    esp,0x18
c001558a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	0f b7 c0             	movzx  eax,ax
c0015593:	83 f2 01             	xor    edx,0x1
c0015596:	88 90 40 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34c0],dl
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	66 3d 03 02          	cmp    ax,0x203
c00155a3:	75 07                	jne    c00155ac <sendKeyboardToken(KeyboardToken)+0x28>
c00155a5:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c00155aa:	84 c0                	test   al,al
c00155ac:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155b0:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155b3:	a0 48 cf 02 c0       	mov    al,ds:0xc002cf48
c00155b8:	38 c2                	cmp    dl,al
c00155ba:	74 1c                	je     c00155d8 <sendKeyboardToken(KeyboardToken)+0x54>
c00155bc:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155bf:	a2 48 cf 02 c0       	mov    ds:0xc002cf48,al
c00155c4:	a0 48 cf 02 c0       	mov    al,ds:0xc002cf48
c00155c9:	0f b6 c0             	movzx  eax,al
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	50                   	push   eax
c00155d0:	e8 2d ab ff ff       	call   c0010102 <setTerminalScrollLock(bool)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155db:	84 c0                	test   al,al
c00155dd:	0f 84 ae 00 00 00    	je     c0015691 <sendKeyboardToken(KeyboardToken)+0x10d>
c00155e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e6:	66 3d 10 03          	cmp    ax,0x310
c00155ea:	75 06                	jne    c00155f2 <sendKeyboardToken(KeyboardToken)+0x6e>
c00155ec:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f5:	66 3d 11 03          	cmp    ax,0x311
c00155f9:	75 06                	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0x7d>
c00155fb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015604:	66 3d 12 03          	cmp    ax,0x312
c0015608:	75 06                	jne    c0015610 <sendKeyboardToken(KeyboardToken)+0x8c>
c001560a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	66 3d 13 03          	cmp    ax,0x313
c0015617:	75 06                	jne    c001561f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015619:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	66 3d 14 03          	cmp    ax,0x314
c0015626:	75 06                	jne    c001562e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015628:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	66 3d 15 03          	cmp    ax,0x315
c0015635:	75 06                	jne    c001563d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015637:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001563d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015640:	66 3d 16 03          	cmp    ax,0x316
c0015644:	75 06                	jne    c001564c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015646:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	66 3d 17 03          	cmp    ax,0x317
c0015653:	75 06                	jne    c001565b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015655:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	66 3d 18 03          	cmp    ax,0x318
c0015662:	75 06                	jne    c001566a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015664:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001566a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566d:	66 3d 19 03          	cmp    ax,0x319
c0015671:	75 06                	jne    c0015679 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015673:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567c:	66 3d 1a 03          	cmp    ax,0x31a
c0015680:	0f 85 c9 00 00 00    	jne    c001574f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015686:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001568c:	e9 be 00 00 00       	jmp    c001574f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	66 3d 10 03          	cmp    ax,0x310
c0015698:	75 0a                	jne    c00156a4 <sendKeyboardToken(KeyboardToken)+0x120>
c001569a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00156a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	66 3d 11 03          	cmp    ax,0x311
c00156ab:	75 0a                	jne    c00156b7 <sendKeyboardToken(KeyboardToken)+0x133>
c00156ad:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ba:	66 3d 12 03          	cmp    ax,0x312
c00156be:	75 0a                	jne    c00156ca <sendKeyboardToken(KeyboardToken)+0x146>
c00156c0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	66 3d 13 03          	cmp    ax,0x313
c00156d1:	75 0a                	jne    c00156dd <sendKeyboardToken(KeyboardToken)+0x159>
c00156d3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	66 3d 14 03          	cmp    ax,0x314
c00156e4:	75 0a                	jne    c00156f0 <sendKeyboardToken(KeyboardToken)+0x16c>
c00156e6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	66 3d 15 03          	cmp    ax,0x315
c00156f7:	75 0a                	jne    c0015703 <sendKeyboardToken(KeyboardToken)+0x17f>
c00156f9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	66 3d 16 03          	cmp    ax,0x316
c001570a:	75 0a                	jne    c0015716 <sendKeyboardToken(KeyboardToken)+0x192>
c001570c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015712:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	66 3d 17 03          	cmp    ax,0x317
c001571d:	75 0a                	jne    c0015729 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001571f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015725:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	66 3d 18 03          	cmp    ax,0x318
c0015730:	75 0a                	jne    c001573c <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015732:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015738:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	66 3d 19 03          	cmp    ax,0x319
c0015743:	75 0a                	jne    c001574f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015745:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001574b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001574f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015752:	66 3d 00 02          	cmp    ax,0x200
c0015756:	75 2c                	jne    c0015784 <sendKeyboardToken(KeyboardToken)+0x200>
c0015758:	a0 40 cf 02 c0       	mov    al,ds:0xc002cf40
c001575d:	83 f0 01             	xor    eax,0x1
c0015760:	84 c0                	test   al,al
c0015762:	74 20                	je     c0015784 <sendKeyboardToken(KeyboardToken)+0x200>
c0015764:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0015769:	6a 01                	push   0x1
c001576b:	6a 00                	push   0x0
c001576d:	68 60 54 01 c0       	push   0xc0015460
c0015772:	50                   	push   eax
c0015773:	e8 f8 76 00 00       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	c6 05 40 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf40,0x1
c0015782:	eb 33                	jmp    c00157b7 <sendKeyboardToken(KeyboardToken)+0x233>
c0015784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015787:	66 3d 01 02          	cmp    ax,0x201
c001578b:	75 2a                	jne    c00157b7 <sendKeyboardToken(KeyboardToken)+0x233>
c001578d:	a0 40 cf 02 c0       	mov    al,ds:0xc002cf40
c0015792:	83 f0 01             	xor    eax,0x1
c0015795:	84 c0                	test   al,al
c0015797:	74 1e                	je     c00157b7 <sendKeyboardToken(KeyboardToken)+0x233>
c0015799:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001579e:	6a 01                	push   0x1
c00157a0:	6a 00                	push   0x0
c00157a2:	68 bc 54 01 c0       	push   0xc00154bc
c00157a7:	50                   	push   eax
c00157a8:	e8 c3 76 00 00       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	c6 05 40 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf40,0x1
c00157b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ba:	66 3d 1d 03          	cmp    ax,0x31d
c00157be:	75 06                	jne    c00157c6 <sendKeyboardToken(KeyboardToken)+0x242>
c00157c0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	66 3d 1c 03          	cmp    ax,0x31c
c00157cd:	75 06                	jne    c00157d5 <sendKeyboardToken(KeyboardToken)+0x251>
c00157cf:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	66 3d 1b 03          	cmp    ax,0x31b
c00157dc:	75 06                	jne    c00157e4 <sendKeyboardToken(KeyboardToken)+0x260>
c00157de:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	66 3d 1e 03          	cmp    ax,0x31e
c00157eb:	75 06                	jne    c00157f3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00157ed:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	66 3d 1f 03          	cmp    ax,0x31f
c00157fa:	75 06                	jne    c0015802 <sendKeyboardToken(KeyboardToken)+0x27e>
c00157fc:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	66 3d 1a 03          	cmp    ax,0x31a
c0015809:	75 06                	jne    c0015811 <sendKeyboardToken(KeyboardToken)+0x28d>
c001580b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015811:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015815:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015818:	83 f0 01             	xor    eax,0x1
c001581b:	84 c0                	test   al,al
c001581d:	74 77                	je     c0015896 <sendKeyboardToken(KeyboardToken)+0x312>
c001581f:	a0 41 cc 02 c0       	mov    al,ds:0xc002cc41
c0015824:	84 c0                	test   al,al
c0015826:	74 41                	je     c0015869 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015828:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001582c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015830:	74 2b                	je     c001585d <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015832:	8b 15 44 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf44
c0015838:	89 d0                	mov    eax,edx
c001583a:	c1 e0 02             	shl    eax,0x2
c001583d:	01 d0                	add    eax,edx
c001583f:	01 c0                	add    eax,eax
c0015841:	a3 44 cf 02 c0       	mov    ds:0xc002cf44,eax
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	0f b7 c0             	movzx  eax,ax
c001584c:	8d 50 d0             	lea    edx,[eax-0x30]
c001584f:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c0015854:	01 d0                	add    eax,edx
c0015856:	a3 44 cf 02 c0       	mov    ds:0xc002cf44,eax
c001585b:	eb 6d                	jmp    c00158ca <sendKeyboardToken(KeyboardToken)+0x346>
c001585d:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c0015867:	eb 61                	jmp    c00158ca <sendKeyboardToken(KeyboardToken)+0x346>
c0015869:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c001586e:	85 c0                	test   eax,eax
c0015870:	74 18                	je     c001588a <sendKeyboardToken(KeyboardToken)+0x306>
c0015872:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c0015877:	0f b6 c0             	movzx  eax,al
c001587a:	83 ec 0c             	sub    esp,0xc
c001587d:	50                   	push   eax
c001587e:	e8 95 fc ff ff       	call   c0015518 <sendKeyToTerminal(unsigned char)>
c0015883:	83 c4 10             	add    esp,0x10
c0015886:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001588a:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c0015894:	eb 34                	jmp    c00158ca <sendKeyboardToken(KeyboardToken)+0x346>
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	66 3d 01 01          	cmp    ax,0x101
c001589d:	75 2b                	jne    c00158ca <sendKeyboardToken(KeyboardToken)+0x346>
c001589f:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c00158a4:	85 c0                	test   eax,eax
c00158a6:	74 18                	je     c00158c0 <sendKeyboardToken(KeyboardToken)+0x33c>
c00158a8:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c00158ad:	0f b6 c0             	movzx  eax,al
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	50                   	push   eax
c00158b4:	e8 5f fc ff ff       	call   c0015518 <sendKeyToTerminal(unsigned char)>
c00158b9:	83 c4 10             	add    esp,0x10
c00158bc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158c0:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c00158ca:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158cd:	83 f0 01             	xor    eax,0x1
c00158d0:	84 c0                	test   al,al
c00158d2:	74 4c                	je     c0015920 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158d4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158d7:	83 f0 01             	xor    eax,0x1
c00158da:	84 c0                	test   al,al
c00158dc:	74 42                	je     c0015920 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158de:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c00158e3:	83 f0 01             	xor    eax,0x1
c00158e6:	84 c0                	test   al,al
c00158e8:	74 36                	je     c0015920 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ed:	66 83 f8 1f          	cmp    ax,0x1f
c00158f1:	76 09                	jbe    c00158fc <sendKeyboardToken(KeyboardToken)+0x378>
c00158f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f6:	66 83 f8 7e          	cmp    ax,0x7e
c00158fa:	76 12                	jbe    c001590e <sendKeyboardToken(KeyboardToken)+0x38a>
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	66 83 f8 0a          	cmp    ax,0xa
c0015903:	74 09                	je     c001590e <sendKeyboardToken(KeyboardToken)+0x38a>
c0015905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015908:	66 83 f8 08          	cmp    ax,0x8
c001590c:	75 12                	jne    c0015920 <sendKeyboardToken(KeyboardToken)+0x39c>
c001590e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015911:	0f b6 c0             	movzx  eax,al
c0015914:	83 ec 0c             	sub    esp,0xc
c0015917:	50                   	push   eax
c0015918:	e8 fb fb ff ff       	call   c0015518 <sendKeyToTerminal(unsigned char)>
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015923:	83 f0 01             	xor    eax,0x1
c0015926:	84 c0                	test   al,al
c0015928:	74 4f                	je     c0015979 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001592a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001592d:	83 f0 01             	xor    eax,0x1
c0015930:	84 c0                	test   al,al
c0015932:	74 45                	je     c0015979 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015934:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c0015939:	84 c0                	test   al,al
c001593b:	74 3c                	je     c0015979 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001593d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015940:	66 83 f8 3f          	cmp    ax,0x3f
c0015944:	76 33                	jbe    c0015979 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015949:	66 83 f8 7f          	cmp    ax,0x7f
c001594d:	77 2a                	ja     c0015979 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001594f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015952:	88 c2                	mov    dl,al
c0015954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015957:	66 83 f8 5f          	cmp    ax,0x5f
c001595b:	76 04                	jbe    c0015961 <sendKeyboardToken(KeyboardToken)+0x3dd>
c001595d:	b0 20                	mov    al,0x20
c001595f:	eb 02                	jmp    c0015963 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015961:	b0 00                	mov    al,0x0
c0015963:	29 c2                	sub    edx,eax
c0015965:	88 d0                	mov    al,dl
c0015967:	83 e8 40             	sub    eax,0x40
c001596a:	0f b6 c0             	movzx  eax,al
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	50                   	push   eax
c0015971:	e8 a2 fb ff ff       	call   c0015518 <sendKeyToTerminal(unsigned char)>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597c:	66 3d 00 03          	cmp    ax,0x300
c0015980:	75 0f                	jne    c0015991 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015982:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015985:	83 f0 01             	xor    eax,0x1
c0015988:	84 c0                	test   al,al
c001598a:	74 05                	je     c0015991 <sendKeyboardToken(KeyboardToken)+0x40d>
c001598c:	e8 4e b0 ff ff       	call   c00109df <doTerminalCycle()>
c0015991:	90                   	nop
c0015992:	c9                   	leave  
c0015993:	c3                   	ret    

c0015994 <clearInternalKeybuffer(VgaText*)>:
c0015994:	55                   	push   ebp
c0015995:	89 e5                	mov    ebp,esp
c0015997:	83 ec 08             	sub    esp,0x8
c001599a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599d:	05 34 11 00 00       	add    eax,0x1134
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	50                   	push   eax
c00159a6:	e8 fd ac fe ff       	call   c00006a8 <strlen>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159b1:	81 c2 34 11 00 00    	add    edx,0x1134
c00159b7:	83 ec 04             	sub    esp,0x4
c00159ba:	50                   	push   eax
c00159bb:	6a 00                	push   0x0
c00159bd:	52                   	push   edx
c00159be:	e8 c8 ac fe ff       	call   c000068b <memset>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	90                   	nop
c00159c7:	c9                   	leave  
c00159c8:	c3                   	ret    

c00159c9 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159c9:	55                   	push   ebp
c00159ca:	89 e5                	mov    ebp,esp
c00159cc:	83 ec 18             	sub    esp,0x18
c00159cf:	fb                   	sti    
c00159d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159d7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159db:	0f 84 8a 00 00 00    	je     c0015a6b <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00159e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e4:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159ea:	84 c0                	test   al,al
c00159ec:	75 11                	jne    c00159ff <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159ee:	e8 4b 73 00 00       	call   c001cd3e <lockScheduler()>
c00159f3:	e8 82 76 00 00       	call   c001d07a <schedule()>
c00159f8:	e8 43 73 00 00       	call   c001cd40 <unlockScheduler()>
c00159fd:	eb e2                	jmp    c00159e1 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a02:	8d 50 01             	lea    edx,[eax+0x1]
c0015a05:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a0b:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015a11:	88 10                	mov    BYTE PTR [eax],dl
c0015a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a16:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a1c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a22:	05 34 11 00 00       	add    eax,0x1134
c0015a27:	83 ec 0c             	sub    esp,0xc
c0015a2a:	50                   	push   eax
c0015a2b:	e8 78 ac fe ff       	call   c00006a8 <strlen>
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a36:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a3c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a42:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a48:	83 ec 04             	sub    esp,0x4
c0015a4b:	50                   	push   eax
c0015a4c:	51                   	push   ecx
c0015a4d:	52                   	push   edx
c0015a4e:	e8 ca ab fe ff       	call   c000061d <memmove>
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a59:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a5c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a60:	0f 85 71 ff ff ff    	jne    c00159d7 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a69:	eb 03                	jmp    c0015a6e <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6e:	c9                   	leave  
c0015a6f:	c3                   	ret    

c0015a70 <Keyboard::Keyboard(char const*)>:
c0015a70:	83 ec 0c             	sub    esp,0xc
c0015a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a77:	83 ec 08             	sub    esp,0x8
c0015a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a7e:	50                   	push   eax
c0015a7f:	e8 f0 e2 ff ff       	call   c0013d74 <Device::Device(char const*)>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	ba 34 99 02 c0       	mov    edx,0xc0029934
c0015a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a90:	89 10                	mov    DWORD PTR [eax],edx
c0015a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a96:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015aa0:	c6 05 24 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb24,0x1
c0015aa7:	90                   	nop
c0015aa8:	83 c4 0c             	add    esp,0xc
c0015aab:	c3                   	ret    

c0015aac <Keyboard::~Keyboard()>:
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	ba 34 99 02 c0       	mov    edx,0xc0029934
c0015ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab8:	89 10                	mov    DWORD PTR [eax],edx
c0015aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015abe:	83 ec 0c             	sub    esp,0xc
c0015ac1:	50                   	push   eax
c0015ac2:	e8 8f df ff ff       	call   c0013a56 <Device::~Device()>
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	90                   	nop
c0015acb:	83 c4 0c             	add    esp,0xc
c0015ace:	c3                   	ret    
c0015acf:	90                   	nop

c0015ad0 <Keyboard::~Keyboard()>:
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ada:	e8 cd ff ff ff       	call   c0015aac <Keyboard::~Keyboard()>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	83 ec 08             	sub    esp,0x8
c0015ae5:	68 5c 01 00 00       	push   0x15c
c0015aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aee:	e8 c2 cb ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	83 c4 0c             	add    esp,0xc
c0015af9:	c3                   	ret    

c0015afa <LogicalDisk::close(int, int, void*)>:
c0015afa:	83 c8 ff             	or     eax,0xffffffff
c0015afd:	c3                   	ret    

c0015afe <LogicalDisk::~LogicalDisk()>:
c0015afe:	83 ec 0c             	sub    esp,0xc
c0015b01:	ba e4 99 02 c0       	mov    edx,0xc00299e4
c0015b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b0a:	89 10                	mov    DWORD PTR [eax],edx
c0015b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	50                   	push   eax
c0015b14:	e8 3d df ff ff       	call   c0013a56 <Device::~Device()>
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	90                   	nop
c0015b1d:	83 c4 0c             	add    esp,0xc
c0015b20:	c3                   	ret    
c0015b21:	90                   	nop

c0015b22 <LogicalDisk::~LogicalDisk()>:
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	83 ec 0c             	sub    esp,0xc
c0015b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b2c:	e8 cd ff ff ff       	call   c0015afe <LogicalDisk::~LogicalDisk()>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	83 ec 08             	sub    esp,0x8
c0015b37:	68 74 01 00 00       	push   0x174
c0015b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b40:	e8 70 cb ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	83 c4 0c             	add    esp,0xc
c0015b4b:	c3                   	ret    

c0015b4c <LogicalDisk::open(int, int, void*)>:
c0015b4c:	83 ec 18             	sub    esp,0x18
c0015b4f:	68 60 99 02 c0       	push   0xc0029960
c0015b54:	e8 56 3d 00 00       	call   c00198af <Krnl::panic(char const*)>
c0015b59:	83 c8 ff             	or     eax,0xffffffff
c0015b5c:	83 c4 1c             	add    esp,0x1c
c0015b5f:	c3                   	ret    

c0015b60 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b60:	53                   	push   ebx
c0015b61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b6d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b73:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b79:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b7f:	77 10                	ja     c0015b91 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b81:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b87:	89 d3                	mov    ebx,edx
c0015b89:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b8f:	72 05                	jb     c0015b96 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b91:	83 c8 ff             	or     eax,0xffffffff
c0015b94:	89 c2                	mov    edx,eax
c0015b96:	5b                   	pop    ebx
c0015b97:	c3                   	ret    

c0015b98 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b98:	56                   	push   esi
c0015b99:	83 c8 ff             	or     eax,0xffffffff
c0015b9c:	53                   	push   ebx
c0015b9d:	89 c2                	mov    edx,eax
c0015b9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015ba3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bb1:	77 27                	ja     c0015bda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bb3:	89 d8                	mov    eax,ebx
c0015bb5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015bbb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015bc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bc6:	89 c2                	mov    edx,eax
c0015bc8:	73 10                	jae    c0015bda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bca:	89 c8                	mov    eax,ecx
c0015bcc:	89 da                	mov    edx,ebx
c0015bce:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bd4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bda:	5b                   	pop    ebx
c0015bdb:	5e                   	pop    esi
c0015bdc:	c3                   	ret    
c0015bdd:	90                   	nop

c0015bde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015bde:	83 ec 1c             	sub    esp,0x1c
c0015be1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015be5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015be9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015bfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c04:	83 ec 08             	sub    esp,0x8
c0015c07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0b:	50                   	push   eax
c0015c0c:	e8 63 e1 ff ff       	call   c0013d74 <Device::Device(char const*)>
c0015c11:	83 c4 10             	add    esp,0x10
c0015c14:	ba e4 99 02 c0       	mov    edx,0xc00299e4
c0015c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1d:	89 10                	mov    DWORD PTR [eax],edx
c0015c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c23:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c39:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c43:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c4f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c55:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c5b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c66:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c6c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c7a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c84:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c8e:	90                   	nop
c0015c8f:	83 c4 1c             	add    esp,0x1c
c0015c92:	c3                   	ret    
c0015c93:	90                   	nop

c0015c94 <LogicalDisk::assignDriveLetter()>:
c0015c94:	55                   	push   ebp
c0015c95:	57                   	push   edi
c0015c96:	56                   	push   esi
c0015c97:	53                   	push   ebx
c0015c98:	83 ec 14             	sub    esp,0x14
c0015c9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c9f:	8b 3d 60 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf60
c0015ca5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015cab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015caf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015cb5:	8b 3d 64 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf64
c0015cbb:	3c 01                	cmp    al,0x1
c0015cbd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015cc1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015cc5:	19 c0                	sbb    eax,eax
c0015cc7:	83 e0 02             	and    eax,0x2
c0015cca:	83 c0 41             	add    eax,0x41
c0015ccd:	0f be e8             	movsx  ebp,al
c0015cd0:	3c 43                	cmp    al,0x43
c0015cd2:	75 10                	jne    c0015ce4 <LogicalDisk::assignDriveLetter()+0x50>
c0015cd4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cdb:	75 5d                	jne    c0015d3a <LogicalDisk::assignDriveLetter()+0xa6>
c0015cdd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ce2:	75 56                	jne    c0015d3a <LogicalDisk::assignDriveLetter()+0xa6>
c0015ce4:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ce7:	ba 01 00 00 00       	mov    edx,0x1
c0015cec:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015cf0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015cf4:	d3 e2                	shl    edx,cl
c0015cf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cfa:	89 d7                	mov    edi,edx
c0015cfc:	89 d6                	mov    esi,edx
c0015cfe:	c1 ff 1f             	sar    edi,0x1f
c0015d01:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d05:	21 f9                	and    ecx,edi
c0015d07:	09 d1                	or     ecx,edx
c0015d09:	75 2f                	jne    c0015d3a <LogicalDisk::assignDriveLetter()+0xa6>
c0015d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d13:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d19:	09 f2                	or     edx,esi
c0015d1b:	89 15 60 cf 02 c0    	mov    DWORD PTR ds:0xc002cf60,edx
c0015d21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d25:	09 fa                	or     edx,edi
c0015d27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d2b:	89 15 64 cf 02 c0    	mov    DWORD PTR ds:0xc002cf64,edx
c0015d31:	89 1c bd 80 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3080],ebx
c0015d38:	eb 08                	jmp    c0015d42 <LogicalDisk::assignDriveLetter()+0xae>
c0015d3a:	45                   	inc    ebp
c0015d3b:	40                   	inc    eax
c0015d3c:	3c 5b                	cmp    al,0x5b
c0015d3e:	75 90                	jne    c0015cd0 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d40:	31 c0                	xor    eax,eax
c0015d42:	83 c4 14             	add    esp,0x14
c0015d45:	5b                   	pop    ebx
c0015d46:	5e                   	pop    esi
c0015d47:	5f                   	pop    edi
c0015d48:	5d                   	pop    ebp
c0015d49:	c3                   	ret    

c0015d4a <LogicalDisk::mount()>:
c0015d4a:	56                   	push   esi
c0015d4b:	53                   	push   ebx
c0015d4c:	51                   	push   ecx
c0015d4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d51:	8b 1d e8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cae8
c0015d57:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d61:	85 db                	test   ebx,ebx
c0015d63:	74 50                	je     c0015db5 <LogicalDisk::mount()+0x6b>
c0015d65:	e8 bf 6f 00 00       	call   c001cd29 <getIRQNestingLevel()>
c0015d6a:	52                   	push   edx
c0015d6b:	52                   	push   edx
c0015d6c:	50                   	push   eax
c0015d6d:	68 84 99 02 c0       	push   0xc0029984
c0015d72:	e8 1e ca ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0015d77:	83 c4 0c             	add    esp,0xc
c0015d7a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d83:	83 e8 41             	sub    eax,0x41
c0015d86:	50                   	push   eax
c0015d87:	56                   	push   esi
c0015d88:	53                   	push   ebx
c0015d89:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	84 c0                	test   al,al
c0015d91:	74 08                	je     c0015d9b <LogicalDisk::mount()+0x51>
c0015d93:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d99:	eb 1c                	jmp    c0015db7 <LogicalDisk::mount()+0x6d>
c0015d9b:	e8 89 6f 00 00       	call   c001cd29 <getIRQNestingLevel()>
c0015da0:	51                   	push   ecx
c0015da1:	51                   	push   ecx
c0015da2:	50                   	push   eax
c0015da3:	68 9f 99 02 c0       	push   0xc002999f
c0015da8:	e8 e8 c9 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0015dad:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	eb ac                	jmp    c0015d61 <LogicalDisk::mount()+0x17>
c0015db5:	31 c0                	xor    eax,eax
c0015db7:	5a                   	pop    edx
c0015db8:	5b                   	pop    ebx
c0015db9:	5e                   	pop    esi
c0015dba:	c3                   	ret    
c0015dbb:	90                   	nop

c0015dbc <LogicalDisk::unmount()>:
c0015dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dca:	c3                   	ret    
c0015dcb:	90                   	nop

c0015dcc <LogicalDisk::unassignDriveLetter()>:
c0015dcc:	57                   	push   edi
c0015dcd:	56                   	push   esi
c0015dce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dd2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dd9:	84 c9                	test   cl,cl
c0015ddb:	75 0f                	jne    c0015dec <LogicalDisk::unassignDriveLetter()+0x20>
c0015ddd:	c7 44 24 0c ba 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc00299ba
c0015de5:	5e                   	pop    esi
c0015de6:	5f                   	pop    edi
c0015de7:	e9 c3 3a 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c0015dec:	83 e9 41             	sub    ecx,0x41
c0015def:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015df6:	b8 01 00 00 00       	mov    eax,0x1
c0015dfb:	c7 04 8d 80 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3080],0x0
c0015e06:	d3 e0                	shl    eax,cl
c0015e08:	89 c7                	mov    edi,eax
c0015e0a:	f7 d0                	not    eax
c0015e0c:	c1 ff 1f             	sar    edi,0x1f
c0015e0f:	21 05 60 cf 02 c0    	and    DWORD PTR ds:0xc002cf60,eax
c0015e15:	89 fe                	mov    esi,edi
c0015e17:	f7 d6                	not    esi
c0015e19:	21 35 64 cf 02 c0    	and    DWORD PTR ds:0xc002cf64,esi
c0015e1f:	5e                   	pop    esi
c0015e20:	5f                   	pop    edi
c0015e21:	c3                   	ret    

c0015e22 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e22:	57                   	push   edi
c0015e23:	56                   	push   esi
c0015e24:	53                   	push   ebx
c0015e25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e2d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e35:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e3b:	77 41                	ja     c0015e7e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e3d:	99                   	cdq    
c0015e3e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e44:	01 c8                	add    eax,ecx
c0015e46:	11 da                	adc    edx,ebx
c0015e48:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e4e:	19 d7                	sbb    edi,edx
c0015e50:	72 33                	jb     c0015e85 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e52:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e58:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e62:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e66:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e76:	5b                   	pop    ebx
c0015e77:	5e                   	pop    esi
c0015e78:	5f                   	pop    edi
c0015e79:	e9 f8 09 00 00       	jmp    c0016876 <VCache::read(unsigned long long, int, void*)>
c0015e7e:	b8 05 00 00 00       	mov    eax,0x5
c0015e83:	eb 05                	jmp    c0015e8a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e85:	b8 07 00 00 00       	mov    eax,0x7
c0015e8a:	5b                   	pop    ebx
c0015e8b:	5e                   	pop    esi
c0015e8c:	5f                   	pop    edi
c0015e8d:	c3                   	ret    

c0015e8e <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e8e:	57                   	push   edi
c0015e8f:	56                   	push   esi
c0015e90:	53                   	push   ebx
c0015e91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ea1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ea7:	77 41                	ja     c0015eea <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ea9:	99                   	cdq    
c0015eaa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015eb0:	01 c8                	add    eax,ecx
c0015eb2:	11 da                	adc    edx,ebx
c0015eb4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015eba:	19 d7                	sbb    edi,edx
c0015ebc:	72 33                	jb     c0015ef1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ebe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ec4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015eca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ece:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ed2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ed8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ede:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ee2:	5b                   	pop    ebx
c0015ee3:	5e                   	pop    esi
c0015ee4:	5f                   	pop    edi
c0015ee5:	e9 a8 08 00 00       	jmp    c0016792 <VCache::write(unsigned long long, int, void*)>
c0015eea:	b8 05 00 00 00       	mov    eax,0x5
c0015eef:	eb 05                	jmp    c0015ef6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ef1:	b8 07 00 00 00       	mov    eax,0x7
c0015ef6:	5b                   	pop    ebx
c0015ef7:	5e                   	pop    esi
c0015ef8:	5f                   	pop    edi
c0015ef9:	c3                   	ret    

c0015efa <Mouse::Mouse(char const*)>:
c0015efa:	83 ec 0c             	sub    esp,0xc
c0015efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f01:	83 ec 08             	sub    esp,0x8
c0015f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f08:	50                   	push   eax
c0015f09:	e8 66 de ff ff       	call   c0013d74 <Device::Device(char const*)>
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0015f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f1a:	89 10                	mov    DWORD PTR [eax],edx
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f2a:	90                   	nop
c0015f2b:	83 c4 0c             	add    esp,0xc
c0015f2e:	c3                   	ret    
c0015f2f:	90                   	nop

c0015f30 <Mouse::~Mouse()>:
c0015f30:	83 ec 0c             	sub    esp,0xc
c0015f33:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0015f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3c:	89 10                	mov    DWORD PTR [eax],edx
c0015f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f42:	83 ec 0c             	sub    esp,0xc
c0015f45:	50                   	push   eax
c0015f46:	e8 0b db ff ff       	call   c0013a56 <Device::~Device()>
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	90                   	nop
c0015f4f:	83 c4 0c             	add    esp,0xc
c0015f52:	c3                   	ret    
c0015f53:	90                   	nop

c0015f54 <Mouse::~Mouse()>:
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	83 ec 0c             	sub    esp,0xc
c0015f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f5e:	e8 cd ff ff ff       	call   c0015f30 <Mouse::~Mouse()>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	83 ec 08             	sub    esp,0x8
c0015f69:	68 58 01 00 00       	push   0x158
c0015f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f72:	e8 3e c7 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	83 c4 0c             	add    esp,0xc
c0015f7d:	c3                   	ret    

c0015f7e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f7e:	55                   	push   ebp
c0015f7f:	57                   	push   edi
c0015f80:	56                   	push   esi
c0015f81:	53                   	push   ebx
c0015f82:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f88:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f8f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f96:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f9d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fa4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fa8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fac:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fb3:	e8 b8 de ff ff       	call   c0013e70 <Device::getName()>
c0015fb8:	5a                   	pop    edx
c0015fb9:	59                   	pop    ecx
c0015fba:	50                   	push   eax
c0015fbb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fbf:	55                   	push   ebp
c0015fc0:	e8 65 a7 fe ff       	call   c000072a <strcpy>
c0015fc5:	5b                   	pop    ebx
c0015fc6:	58                   	pop    eax
c0015fc7:	68 34 9a 02 c0       	push   0xc0029a34
c0015fcc:	55                   	push   ebp
c0015fcd:	e8 0f a8 fe ff       	call   c00007e1 <strcat>
c0015fd2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fd9:	e8 f6 94 ff ff       	call   c000f4d4 <malloc>
c0015fde:	83 c4 0c             	add    esp,0xc
c0015fe1:	89 c3                	mov    ebx,eax
c0015fe3:	57                   	push   edi
c0015fe4:	56                   	push   esi
c0015fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fed:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015ff4:	55                   	push   ebp
c0015ff5:	50                   	push   eax
c0015ff6:	e8 e3 fb ff ff       	call   c0015bde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015ffb:	83 c4 14             	add    esp,0x14
c0015ffe:	53                   	push   ebx
c0015fff:	e8 90 fc ff ff       	call   c0015c94 <LogicalDisk::assignDriveLetter()>
c0016004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016007:	e8 3e fd ff ff       	call   c0015d4a <LogicalDisk::mount()>
c001600c:	58                   	pop    eax
c001600d:	5a                   	pop    edx
c001600e:	53                   	push   ebx
c001600f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016016:	e8 69 db ff ff       	call   c0013b84 <Device::addChild(Device*)>
c001601b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016021:	5b                   	pop    ebx
c0016022:	5e                   	pop    esi
c0016023:	5f                   	pop    edi
c0016024:	5d                   	pop    ebp
c0016025:	c3                   	ret    

c0016026 <createPartitionsForDisk(PhysicalDisk*)>:
c0016026:	55                   	push   ebp
c0016027:	57                   	push   edi
c0016028:	56                   	push   esi
c0016029:	53                   	push   ebx
c001602a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016030:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016037:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001603d:	3d 00 02 00 00       	cmp    eax,0x200
c0016042:	74 27                	je     c001606b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016044:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001604a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016050:	83 ec 10             	sub    esp,0x10
c0016053:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016057:	99                   	cdq    
c0016058:	c1 e6 0a             	shl    esi,0xa
c001605b:	52                   	push   edx
c001605c:	89 fd                	mov    ebp,edi
c001605e:	50                   	push   eax
c001605f:	55                   	push   ebp
c0016060:	56                   	push   esi
c0016061:	e8 66 f3 00 00       	call   c00253cc <__udivdi3>
c0016066:	e9 b1 00 00 00       	jmp    c001611c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001606b:	83 ec 0c             	sub    esp,0xc
c001606e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016070:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016074:	56                   	push   esi
c0016075:	6a 01                	push   0x1
c0016077:	6a 00                	push   0x0
c0016079:	6a 00                	push   0x0
c001607b:	53                   	push   ebx
c001607c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001607f:	83 c4 20             	add    esp,0x20
c0016082:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001608a:	75 0a                	jne    c0016096 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001608c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016094:	74 2c                	je     c00160c2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016096:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001609c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160a2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160a8:	83 ec 10             	sub    esp,0x10
c00160ab:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160af:	89 f7                	mov    edi,esi
c00160b1:	c1 e0 0a             	shl    eax,0xa
c00160b4:	c1 ff 1f             	sar    edi,0x1f
c00160b7:	57                   	push   edi
c00160b8:	56                   	push   esi
c00160b9:	52                   	push   edx
c00160ba:	50                   	push   eax
c00160bb:	e8 0c f3 00 00       	call   c00253cc <__udivdi3>
c00160c0:	eb 5a                	jmp    c001611c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160c2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160c9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160d0:	83 e1 7f             	and    ecx,0x7f
c00160d3:	83 e0 7f             	and    eax,0x7f
c00160d6:	01 c1                	add    ecx,eax
c00160d8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160df:	83 e0 7f             	and    eax,0x7f
c00160e2:	01 c1                	add    ecx,eax
c00160e4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160eb:	83 e0 7f             	and    eax,0x7f
c00160ee:	00 c1                	add    cl,al
c00160f0:	74 41                	je     c0016133 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016104:	83 ec 10             	sub    esp,0x10
c0016107:	0f a4 c2 0a          	shld   edx,eax,0xa
c001610b:	89 f7                	mov    edi,esi
c001610d:	c1 e0 0a             	shl    eax,0xa
c0016110:	c1 ff 1f             	sar    edi,0x1f
c0016113:	57                   	push   edi
c0016114:	56                   	push   esi
c0016115:	52                   	push   edx
c0016116:	50                   	push   eax
c0016117:	e8 b0 f2 00 00       	call   c00253cc <__udivdi3>
c001611c:	83 c4 14             	add    esp,0x14
c001611f:	52                   	push   edx
c0016120:	50                   	push   eax
c0016121:	6a 00                	push   0x0
c0016123:	6a 00                	push   0x0
c0016125:	53                   	push   ebx
c0016126:	e8 53 fe ff ff       	call   c0015f7e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001612b:	83 c4 20             	add    esp,0x20
c001612e:	e9 79 01 00 00       	jmp    c00162ac <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016133:	89 f0                	mov    eax,esi
c0016135:	31 f6                	xor    esi,esi
c0016137:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001613e:	75 02                	jne    c0016142 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016140:	89 f1                	mov    ecx,esi
c0016142:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016149:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016150:	c1 e2 08             	shl    edx,0x8
c0016153:	c1 e7 10             	shl    edi,0x10
c0016156:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001615e:	09 fa                	or     edx,edi
c0016160:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016168:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001616f:	83 c0 10             	add    eax,0x10
c0016172:	09 fa                	or     edx,edi
c0016174:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001617b:	c1 e7 18             	shl    edi,0x18
c001617e:	09 fa                	or     edx,edi
c0016180:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016187:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001618b:	c1 e7 10             	shl    edi,0x10
c001618e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016195:	c1 e2 08             	shl    edx,0x8
c0016198:	09 fa                	or     edx,edi
c001619a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161a1:	09 fa                	or     edx,edi
c00161a3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161aa:	c1 e7 18             	shl    edi,0x18
c00161ad:	09 fa                	or     edx,edi
c00161af:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161b3:	46                   	inc    esi
c00161b4:	83 fe 04             	cmp    esi,0x4
c00161b7:	0f 85 7a ff ff ff    	jne    c0016137 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c1:	83 f0 01             	xor    eax,0x1
c00161c4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161c8:	75 57                	jne    c0016221 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161ce:	83 f0 01             	xor    eax,0x1
c00161d1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161d5:	75 4a                	jne    c0016221 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161db:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161e3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161f1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161f7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016201:	89 f7                	mov    edi,esi
c0016203:	c1 e0 0a             	shl    eax,0xa
c0016206:	c1 ff 1f             	sar    edi,0x1f
c0016209:	57                   	push   edi
c001620a:	56                   	push   esi
c001620b:	52                   	push   edx
c001620c:	50                   	push   eax
c001620d:	e8 ba f1 00 00       	call   c00253cc <__udivdi3>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016219:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001621d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016221:	84 c9                	test   cl,cl
c0016223:	74 53                	je     c0016278 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016225:	0f b6 c9             	movzx  ecx,cl
c0016228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001622c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016230:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016234:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016238:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001623c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016240:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016244:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001624c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016254:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016258:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001625c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016260:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016264:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016268:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001626c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016270:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016274:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016278:	31 ed                	xor    ebp,ebp
c001627a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001627e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016282:	89 f8                	mov    eax,edi
c0016284:	09 f0                	or     eax,esi
c0016286:	74 1e                	je     c00162a6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016288:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001628c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016290:	89 d1                	mov    ecx,edx
c0016292:	09 c1                	or     ecx,eax
c0016294:	74 10                	je     c00162a6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	57                   	push   edi
c001629a:	56                   	push   esi
c001629b:	52                   	push   edx
c001629c:	50                   	push   eax
c001629d:	53                   	push   ebx
c001629e:	e8 db fc ff ff       	call   c0015f7e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162a3:	83 c4 20             	add    esp,0x20
c00162a6:	45                   	inc    ebp
c00162a7:	83 fd 04             	cmp    ebp,0x4
c00162aa:	75 ce                	jne    c001627a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162ac:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162b2:	5b                   	pop    ebx
c00162b3:	5e                   	pop    esi
c00162b4:	5f                   	pop    edi
c00162b5:	5d                   	pop    ebp
c00162b6:	c3                   	ret    
c00162b7:	90                   	nop

c00162b8 <Serial::Serial(char const*)>:
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bf:	83 ec 08             	sub    esp,0x8
c00162c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c6:	50                   	push   eax
c00162c7:	e8 a8 da ff ff       	call   c0013d74 <Device::Device(char const*)>
c00162cc:	83 c4 10             	add    esp,0x10
c00162cf:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c00162d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d8:	89 10                	mov    DWORD PTR [eax],edx
c00162da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162de:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162e8:	90                   	nop
c00162e9:	83 c4 0c             	add    esp,0xc
c00162ec:	c3                   	ret    
c00162ed:	90                   	nop

c00162ee <Serial::~Serial()>:
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c00162f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fa:	89 10                	mov    DWORD PTR [eax],edx
c00162fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016300:	83 ec 0c             	sub    esp,0xc
c0016303:	50                   	push   eax
c0016304:	e8 4d d7 ff ff       	call   c0013a56 <Device::~Device()>
c0016309:	83 c4 10             	add    esp,0x10
c001630c:	90                   	nop
c001630d:	83 c4 0c             	add    esp,0xc
c0016310:	c3                   	ret    
c0016311:	90                   	nop

c0016312 <Serial::~Serial()>:
c0016312:	83 ec 0c             	sub    esp,0xc
c0016315:	83 ec 0c             	sub    esp,0xc
c0016318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631c:	e8 cd ff ff ff       	call   c00162ee <Serial::~Serial()>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	83 ec 08             	sub    esp,0x8
c0016327:	68 58 01 00 00       	push   0x158
c001632c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016330:	e8 80 c3 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	83 c4 0c             	add    esp,0xc
c001633b:	c3                   	ret    

c001633c <Timer::Timer(char const*)>:
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016343:	83 ec 08             	sub    esp,0x8
c0016346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634a:	50                   	push   eax
c001634b:	e8 24 da ff ff       	call   c0013d74 <Device::Device(char const*)>
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	ba 8c 9a 02 c0       	mov    edx,0xc0029a8c
c0016358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635c:	89 10                	mov    DWORD PTR [eax],edx
c001635e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016362:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001636c:	90                   	nop
c001636d:	83 c4 0c             	add    esp,0xc
c0016370:	c3                   	ret    
c0016371:	90                   	nop

c0016372 <Timer::~Timer()>:
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	ba 8c 9a 02 c0       	mov    edx,0xc0029a8c
c001637a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637e:	89 10                	mov    DWORD PTR [eax],edx
c0016380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	50                   	push   eax
c0016388:	e8 c9 d6 ff ff       	call   c0013a56 <Device::~Device()>
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	90                   	nop
c0016391:	83 c4 0c             	add    esp,0xc
c0016394:	c3                   	ret    
c0016395:	90                   	nop

c0016396 <Timer::~Timer()>:
c0016396:	83 ec 0c             	sub    esp,0xc
c0016399:	83 ec 0c             	sub    esp,0xc
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 cd ff ff ff       	call   c0016372 <Timer::~Timer()>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 ec 08             	sub    esp,0x8
c00163ab:	68 5c 01 00 00       	push   0x15c
c00163b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b4:	e8 fc c2 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	83 c4 0c             	add    esp,0xc
c00163bf:	c3                   	ret    

c00163c0 <Timer::read()>:
c00163c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163ca:	c3                   	ret    

c00163cb <timerHandler(unsigned long long)>:
c00163cb:	55                   	push   ebp
c00163cc:	57                   	push   edi
c00163cd:	56                   	push   esi
c00163ce:	53                   	push   ebx
c00163cf:	83 ec 0c             	sub    esp,0xc
c00163d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163d6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163da:	01 35 f0 cf 02 c0    	add    DWORD PTR ds:0xc002cff0,esi
c00163e0:	11 3d f4 cf 02 c0    	adc    DWORD PTR ds:0xc002cff4,edi
c00163e6:	80 3d 6d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c96d,0x0
c00163ed:	0f 84 07 01 00 00    	je     c00164fa <timerHandler(unsigned long long)+0x12f>
c00163f3:	e8 6d 69 00 00       	call   c001cd65 <lockStuff()>
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	68 9c de 02 c0       	push   0xc002de9c
c0016400:	e8 39 10 01 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016405:	c7 04 24 9c de 02 c0 	mov    DWORD PTR [esp],0xc002de9c
c001640c:	89 c3                	mov    ebx,eax
c001640e:	e8 33 10 01 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	84 c0                	test   al,al
c0016418:	74 60                	je     c001647a <timerHandler(unsigned long long)+0xaf>
c001641a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016420:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016423:	85 c0                	test   eax,eax
c0016425:	0f 85 91 00 00 00    	jne    c00164bc <timerHandler(unsigned long long)+0xf1>
c001642b:	e9 be 00 00 00       	jmp    c00164ee <timerHandler(unsigned long long)+0x123>
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	55                   	push   ebp
c0016434:	e8 1d 6f 00 00       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	39 eb                	cmp    ebx,ebp
c001643e:	75 12                	jne    c0016452 <timerHandler(unsigned long long)+0x87>
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	68 9c de 02 c0       	push   0xc002de9c
c0016448:	e8 f1 0f 01 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001644d:	89 c3                	mov    ebx,eax
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	68 9c de 02 c0       	push   0xc002de9c
c001645a:	e8 e7 0f 01 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	84 c0                	test   al,al
c0016464:	75 b4                	jne    c001641a <timerHandler(unsigned long long)+0x4f>
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	68 9c de 02 c0       	push   0xc002de9c
c001646e:	e8 cb 0f 01 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	39 d8                	cmp    eax,ebx
c0016478:	74 a0                	je     c001641a <timerHandler(unsigned long long)+0x4f>
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	68 9c de 02 c0       	push   0xc002de9c
c0016482:	e8 b7 0f 01 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016487:	c7 04 24 9c de 02 c0 	mov    DWORD PTR [esp],0xc002de9c
c001648e:	89 c5                	mov    ebp,eax
c0016490:	e8 cd 0f 01 00       	call   c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016495:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001649e:	39 15 f0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cff0,edx
c00164a4:	a1 f4 cf 02 c0       	mov    eax,ds:0xc002cff4
c00164a9:	19 c8                	sbb    eax,ecx
c00164ab:	73 83                	jae    c0016430 <timerHandler(unsigned long long)+0x65>
c00164ad:	50                   	push   eax
c00164ae:	50                   	push   eax
c00164af:	55                   	push   ebp
c00164b0:	68 9c de 02 c0       	push   0xc002de9c
c00164b5:	e8 56 10 01 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164ba:	eb 93                	jmp    c001644f <timerHandler(unsigned long long)+0x84>
c00164bc:	80 3d 6c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c96c,0x0
c00164c3:	74 29                	je     c00164ee <timerHandler(unsigned long long)+0x123>
c00164c5:	39 c6                	cmp    esi,eax
c00164c7:	bb 00 00 00 00       	mov    ebx,0x0
c00164cc:	19 df                	sbb    edi,ebx
c00164ce:	72 19                	jb     c00164e9 <timerHandler(unsigned long long)+0x11e>
c00164d0:	e8 69 68 00 00       	call   c001cd3e <lockScheduler()>
c00164d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164da:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164dd:	e8 98 6b 00 00       	call   c001d07a <schedule()>
c00164e2:	e8 59 68 00 00       	call   c001cd40 <unlockScheduler()>
c00164e7:	eb 05                	jmp    c00164ee <timerHandler(unsigned long long)+0x123>
c00164e9:	29 f0                	sub    eax,esi
c00164eb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	5f                   	pop    edi
c00164f4:	5d                   	pop    ebp
c00164f5:	e9 05 6c 00 00       	jmp    c001d0ff <unlockStuff()>
c00164fa:	83 c4 0c             	add    esp,0xc
c00164fd:	5b                   	pop    ebx
c00164fe:	5e                   	pop    esi
c00164ff:	5f                   	pop    edi
c0016500:	5d                   	pop    ebp
c0016501:	c3                   	ret    

c0016502 <setupTimer(int)>:
c0016502:	57                   	push   edi
c0016503:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016508:	56                   	push   esi
c0016509:	53                   	push   ebx
c001650a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001650e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001651d:	e8 4e d9 ff ff       	call   c0013e70 <Device::getName()>
c0016522:	83 c4 10             	add    esp,0x10
c0016525:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016528:	0f 85 8d 00 00 00    	jne    c00165bb <setupTimer(int)+0xb9>
c001652e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016533:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001653a:	74 7f                	je     c00165bb <setupTimer(int)+0xb9>
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	68 5c 01 00 00       	push   0x15c
c0016544:	e8 8b 8f ff ff       	call   c000f4d4 <malloc>
c0016549:	89 04 24             	mov    DWORD PTR [esp],eax
c001654c:	89 c3                	mov    ebx,eax
c001654e:	e8 51 ea 00 00       	call   c0024fa4 <PIT::PIT()>
c0016553:	59                   	pop    ecx
c0016554:	5f                   	pop    edi
c0016555:	53                   	push   ebx
c0016556:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c001655c:	e8 23 d6 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0016561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016563:	6a 00                	push   0x0
c0016565:	6a 00                	push   0x0
c0016567:	56                   	push   esi
c0016568:	53                   	push   ebx
c0016569:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001656c:	83 c4 14             	add    esp,0x14
c001656f:	68 60 01 00 00       	push   0x160
c0016574:	e8 5b 8f ff ff       	call   c000f4d4 <malloc>
c0016579:	89 04 24             	mov    DWORD PTR [esp],eax
c001657c:	89 c7                	mov    edi,eax
c001657e:	e8 d1 e8 00 00       	call   c0024e54 <APICTimer::APICTimer()>
c0016583:	6a 00                	push   0x0
c0016585:	6a 00                	push   0x0
c0016587:	56                   	push   esi
c0016588:	57                   	push   edi
c0016589:	e8 c8 e7 00 00       	call   c0024d56 <APICTimer::open(int, int, void*)>
c001658e:	83 c4 20             	add    esp,0x20
c0016591:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016593:	6a 00                	push   0x0
c0016595:	6a 00                	push   0x0
c0016597:	6a 00                	push   0x0
c0016599:	53                   	push   ebx
c001659a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001659d:	58                   	pop    eax
c001659e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00165a3:	5a                   	pop    edx
c00165a4:	57                   	push   edi
c00165a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165ab:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165b1:	e8 ce d5 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c00165b6:	83 c4 10             	add    esp,0x10
c00165b9:	eb 33                	jmp    c00165ee <setupTimer(int)+0xec>
c00165bb:	83 ec 0c             	sub    esp,0xc
c00165be:	68 5c 01 00 00       	push   0x15c
c00165c3:	e8 0c 8f ff ff       	call   c000f4d4 <malloc>
c00165c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00165cb:	89 c3                	mov    ebx,eax
c00165cd:	e8 d2 e9 00 00       	call   c0024fa4 <PIT::PIT()>
c00165d2:	58                   	pop    eax
c00165d3:	5a                   	pop    edx
c00165d4:	53                   	push   ebx
c00165d5:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c00165db:	e8 a4 d5 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c00165e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165e2:	6a 00                	push   0x0
c00165e4:	6a 00                	push   0x0
c00165e6:	56                   	push   esi
c00165e7:	53                   	push   ebx
c00165e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165eb:	83 c4 20             	add    esp,0x20
c00165ee:	89 d8                	mov    eax,ebx
c00165f0:	5b                   	pop    ebx
c00165f1:	5e                   	pop    esi
c00165f2:	5f                   	pop    edi
c00165f3:	c3                   	ret    

c00165f4 <VCache::VCache(PhysicalDisk*)>:
c00165f4:	53                   	push   ebx
c00165f5:	83 ec 18             	sub    esp,0x18
c00165f8:	ba bc 9a 02 c0       	mov    edx,0xc0029abc
c00165fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016601:	89 10                	mov    DWORD PTR [eax],edx
c0016603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016607:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001660e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016612:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016624:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001662b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016636:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001663d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016641:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016650:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001665f:	e8 70 8e ff ff       	call   c000f4d4 <malloc>
c0016664:	83 c4 10             	add    esp,0x10
c0016667:	89 c3                	mov    ebx,eax
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	53                   	push   ebx
c001666d:	e8 ec 67 00 00       	call   c001ce5e <Mutex::Mutex()>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016679:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001667c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016680:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016684:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016696:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001669c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00166a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166a7:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00166ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166b7:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00166ba:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c1:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166cf:	c1 e0 06             	shl    eax,0x6
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	50                   	push   eax
c00166d6:	e8 f9 8d ff ff       	call   c000f4d4 <malloc>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	89 c2                	mov    edx,eax
c00166e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166e7:	90                   	nop
c00166e8:	83 c4 18             	add    esp,0x18
c00166eb:	5b                   	pop    ebx
c00166ec:	c3                   	ret    
c00166ed:	90                   	nop

c00166ee <VCache::writeWriteBuffer()>:
c00166ee:	53                   	push   ebx
c00166ef:	83 ec 14             	sub    esp,0x14
c00166f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00166fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016701:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016704:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016707:	50                   	push   eax
c0016708:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001670b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016712:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016719:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001671d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016724:	83 c4 28             	add    esp,0x28
c0016727:	5b                   	pop    ebx
c0016728:	c3                   	ret    
c0016729:	90                   	nop

c001672a <VCache::~VCache()>:
c001672a:	83 ec 0c             	sub    esp,0xc
c001672d:	ba bc 9a 02 c0       	mov    edx,0xc0029abc
c0016732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016736:	89 10                	mov    DWORD PTR [eax],edx
c0016738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001673f:	84 c0                	test   al,al
c0016741:	74 0f                	je     c0016752 <VCache::~VCache()+0x28>
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001674a:	e8 9f ff ff ff       	call   c00166ee <VCache::writeWriteBuffer()>
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016756:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	50                   	push   eax
c001675d:	e8 82 8d ff ff       	call   c000f4e4 <free>
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	90                   	nop
c0016766:	83 c4 0c             	add    esp,0xc
c0016769:	c3                   	ret    

c001676a <VCache::~VCache()>:
c001676a:	83 ec 0c             	sub    esp,0xc
c001676d:	83 ec 0c             	sub    esp,0xc
c0016770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016774:	e8 b1 ff ff ff       	call   c001672a <VCache::~VCache()>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	6a 30                	push   0x30
c0016781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016785:	e8 2b bf ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	83 c4 0c             	add    esp,0xc
c0016790:	c3                   	ret    
c0016791:	90                   	nop

c0016792 <VCache::write(unsigned long long, int, void*)>:
c0016792:	55                   	push   ebp
c0016793:	57                   	push   edi
c0016794:	56                   	push   esi
c0016795:	53                   	push   ebx
c0016796:	83 ec 28             	sub    esp,0x28
c0016799:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001679d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00167a1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00167a5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00167a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167ac:	e8 0f 6b 00 00       	call   c001d2c0 <Semaphore::acquire()>
c00167b1:	83 c4 10             	add    esp,0x10
c00167b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167b8:	74 66                	je     c0016820 <VCache::write(unsigned long long, int, void*)+0x8e>
c00167ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167bd:	99                   	cdq    
c00167be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167c8:	89 c1                	mov    ecx,eax
c00167ca:	89 d0                	mov    eax,edx
c00167cc:	31 f1                	xor    ecx,esi
c00167ce:	31 f8                	xor    eax,edi
c00167d0:	89 ca                	mov    edx,ecx
c00167d2:	09 c2                	or     edx,eax
c00167d4:	75 3e                	jne    c0016814 <VCache::write(unsigned long long, int, void*)+0x82>
c00167d6:	83 fd 01             	cmp    ebp,0x1
c00167d9:	75 39                	jne    c0016814 <VCache::write(unsigned long long, int, void*)+0x82>
c00167db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167e4:	51                   	push   ecx
c00167e5:	50                   	push   eax
c00167e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167ee:	0f af c8             	imul   ecx,eax
c00167f1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167f4:	51                   	push   ecx
c00167f5:	e8 5b 9e fe ff       	call   c0000655 <memcpy>
c00167fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	40                   	inc    eax
c0016801:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016804:	83 f8 40             	cmp    eax,0x40
c0016807:	75 57                	jne    c0016860 <VCache::write(unsigned long long, int, void*)+0xce>
c0016809:	83 ec 0c             	sub    esp,0xc
c001680c:	53                   	push   ebx
c001680d:	e8 dc fe ff ff       	call   c00166ee <VCache::writeWriteBuffer()>
c0016812:	eb 34                	jmp    c0016848 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	53                   	push   ebx
c0016818:	e8 d1 fe ff ff       	call   c00166ee <VCache::writeWriteBuffer()>
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016823:	83 fd 3f             	cmp    ebp,0x3f
c0016826:	7f 25                	jg     c001684d <VCache::write(unsigned long long, int, void*)+0xbb>
c0016828:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001682b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001682e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016831:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016835:	52                   	push   edx
c0016836:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001683c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016840:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016843:	e8 0d 9e fe ff       	call   c0000655 <memcpy>
c0016848:	83 c4 10             	add    esp,0x10
c001684b:	eb 13                	jmp    c0016860 <VCache::write(unsigned long long, int, void*)+0xce>
c001684d:	83 ec 0c             	sub    esp,0xc
c0016850:	8b 10                	mov    edx,DWORD PTR [eax]
c0016852:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016856:	55                   	push   ebp
c0016857:	57                   	push   edi
c0016858:	56                   	push   esi
c0016859:	50                   	push   eax
c001685a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001685d:	83 c4 20             	add    esp,0x20
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016866:	e8 03 70 00 00       	call   c001d86e <Semaphore::release()>
c001686b:	83 c4 2c             	add    esp,0x2c
c001686e:	31 c0                	xor    eax,eax
c0016870:	5b                   	pop    ebx
c0016871:	5e                   	pop    esi
c0016872:	5f                   	pop    edi
c0016873:	5d                   	pop    ebp
c0016874:	c3                   	ret    
c0016875:	90                   	nop

c0016876 <VCache::read(unsigned long long, int, void*)>:
c0016876:	57                   	push   edi
c0016877:	56                   	push   esi
c0016878:	53                   	push   ebx
c0016879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001687d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016881:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016885:	83 ec 0c             	sub    esp,0xc
c0016888:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001688b:	e8 30 6a 00 00       	call   c001d2c0 <Semaphore::acquire()>
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016897:	74 0c                	je     c00168a5 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016899:	83 ec 0c             	sub    esp,0xc
c001689c:	53                   	push   ebx
c001689d:	e8 4c fe ff ff       	call   c00166ee <VCache::writeWriteBuffer()>
c00168a2:	83 c4 10             	add    esp,0x10
c00168a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00168ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168b5:	57                   	push   edi
c00168b6:	56                   	push   esi
c00168b7:	50                   	push   eax
c00168b8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168bb:	83 c4 14             	add    esp,0x14
c00168be:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168c1:	e8 a8 6f 00 00       	call   c001d86e <Semaphore::release()>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	31 c0                	xor    eax,eax
c00168cb:	5b                   	pop    ebx
c00168cc:	5e                   	pop    esi
c00168cd:	5f                   	pop    edi
c00168ce:	c3                   	ret    
c00168cf:	90                   	nop

c00168d0 <Video::putrect(int, int, int, int, unsigned int)>:
c00168d0:	55                   	push   ebp
c00168d1:	57                   	push   edi
c00168d2:	56                   	push   esi
c00168d3:	53                   	push   ebx
c00168d4:	83 ec 1c             	sub    esp,0x1c
c00168d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00168e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168ef:	01 df                	add    edi,ebx
c00168f1:	39 fb                	cmp    ebx,edi
c00168f3:	7d 1f                	jge    c0016914 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168fd:	7d 12                	jge    c0016911 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0016901:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016905:	53                   	push   ebx
c0016906:	55                   	push   ebp
c0016907:	45                   	inc    ebp
c0016908:	56                   	push   esi
c0016909:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001690c:	83 c4 10             	add    esp,0x10
c001690f:	eb e8                	jmp    c00168f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016911:	43                   	inc    ebx
c0016912:	eb dd                	jmp    c00168f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016914:	83 c4 1c             	add    esp,0x1c
c0016917:	5b                   	pop    ebx
c0016918:	5e                   	pop    esi
c0016919:	5f                   	pop    edi
c001691a:	5d                   	pop    ebp
c001691b:	c3                   	ret    

c001691c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001691c:	55                   	push   ebp
c001691d:	57                   	push   edi
c001691e:	31 ff                	xor    edi,edi
c0016920:	56                   	push   esi
c0016921:	53                   	push   ebx
c0016922:	83 ec 1c             	sub    esp,0x1c
c0016925:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016929:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001692d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016934:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016939:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001693d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016941:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016945:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016948:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001694c:	01 f9                	add    ecx,edi
c001694e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016952:	7d 2f                	jge    c0016983 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016954:	31 f6                	xor    esi,esi
c0016956:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001695a:	01 f2                	add    edx,esi
c001695c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016960:	7d 1a                	jge    c001697c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016962:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016965:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016968:	46                   	inc    esi
c0016969:	51                   	push   ecx
c001696a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001696e:	52                   	push   edx
c001696f:	55                   	push   ebp
c0016970:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001697a:	eb da                	jmp    c0016956 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001697c:	47                   	inc    edi
c001697d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016981:	eb c5                	jmp    c0016948 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016983:	83 c4 1c             	add    esp,0x1c
c0016986:	5b                   	pop    ebx
c0016987:	5e                   	pop    esi
c0016988:	5f                   	pop    edi
c0016989:	5d                   	pop    ebp
c001698a:	c3                   	ret    
c001698b:	90                   	nop

c001698c <Video::blit(unsigned int*, int, int, int, int)>:
c001698c:	55                   	push   ebp
c001698d:	57                   	push   edi
c001698e:	56                   	push   esi
c001698f:	53                   	push   ebx
c0016990:	83 ec 1c             	sub    esp,0x1c
c0016993:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016997:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001699b:	85 c0                	test   eax,eax
c001699d:	79 02                	jns    c00169a1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001699f:	31 c0                	xor    eax,eax
c00169a1:	c1 e0 02             	shl    eax,0x2
c00169a4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169b0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00169b4:	39 d8                	cmp    eax,ebx
c00169b6:	7e 49                	jle    c0016a01 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169b8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169be:	7c 41                	jl     c0016a01 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169c0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169cc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169d0:	39 f9                	cmp    ecx,edi
c00169d2:	7e 22                	jle    c00169f6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169d4:	83 c5 04             	add    ebp,0x4
c00169d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169dd:	7c 14                	jl     c00169f3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00169df:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169e1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169ec:	56                   	push   esi
c00169ed:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	47                   	inc    edi
c00169f4:	eb d2                	jmp    c00169c8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169fa:	43                   	inc    ebx
c00169fb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169ff:	eb ab                	jmp    c00169ac <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016a01:	83 c4 1c             	add    esp,0x1c
c0016a04:	5b                   	pop    ebx
c0016a05:	5e                   	pop    esi
c0016a06:	5f                   	pop    edi
c0016a07:	5d                   	pop    ebp
c0016a08:	c3                   	ret    
c0016a09:	90                   	nop

c0016a0a <Video::clearScreen(unsigned int)>:
c0016a0a:	57                   	push   edi
c0016a0b:	56                   	push   esi
c0016a0c:	53                   	push   ebx
c0016a0d:	31 db                	xor    ebx,ebx
c0016a0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a13:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a19:	7e 1f                	jle    c0016a3a <Video::clearScreen(unsigned int)+0x30>
c0016a1b:	31 ff                	xor    edi,edi
c0016a1d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a23:	7e 12                	jle    c0016a37 <Video::clearScreen(unsigned int)+0x2d>
c0016a25:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a2b:	53                   	push   ebx
c0016a2c:	57                   	push   edi
c0016a2d:	47                   	inc    edi
c0016a2e:	56                   	push   esi
c0016a2f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	eb e6                	jmp    c0016a1d <Video::clearScreen(unsigned int)+0x13>
c0016a37:	43                   	inc    ebx
c0016a38:	eb d9                	jmp    c0016a13 <Video::clearScreen(unsigned int)+0x9>
c0016a3a:	5b                   	pop    ebx
c0016a3b:	5e                   	pop    esi
c0016a3c:	5f                   	pop    edi
c0016a3d:	c3                   	ret    

c0016a3e <Video::putpixel(int, int, unsigned int)>:
c0016a3e:	c7 44 24 04 c4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029ac4
c0016a46:	e9 64 2e 00 00       	jmp    c00198af <Krnl::panic(char const*)>
c0016a4b:	90                   	nop

c0016a4c <Video::Video(char const*)>:
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a53:	83 ec 08             	sub    esp,0x8
c0016a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a5a:	50                   	push   eax
c0016a5b:	e8 14 d3 ff ff       	call   c0013d74 <Device::Device(char const*)>
c0016a60:	83 c4 10             	add    esp,0x10
c0016a63:	ba 48 9b 02 c0       	mov    edx,0xc0029b48
c0016a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6c:	89 10                	mov    DWORD PTR [eax],edx
c0016a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a72:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a7c:	90                   	nop
c0016a7d:	83 c4 0c             	add    esp,0xc
c0016a80:	c3                   	ret    
c0016a81:	90                   	nop

c0016a82 <Video::~Video()>:
c0016a82:	83 ec 0c             	sub    esp,0xc
c0016a85:	ba 48 9b 02 c0       	mov    edx,0xc0029b48
c0016a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8e:	89 10                	mov    DWORD PTR [eax],edx
c0016a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	50                   	push   eax
c0016a98:	e8 b9 cf ff ff       	call   c0013a56 <Device::~Device()>
c0016a9d:	83 c4 10             	add    esp,0x10
c0016aa0:	90                   	nop
c0016aa1:	83 c4 0c             	add    esp,0xc
c0016aa4:	c3                   	ret    
c0016aa5:	90                   	nop

c0016aa6 <Video::~Video()>:
c0016aa6:	83 ec 0c             	sub    esp,0xc
c0016aa9:	83 ec 0c             	sub    esp,0xc
c0016aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab0:	e8 cd ff ff ff       	call   c0016a82 <Video::~Video()>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	83 ec 08             	sub    esp,0x8
c0016abb:	68 64 01 00 00       	push   0x164
c0016ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ac4:	e8 ec bb ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	83 c4 0c             	add    esp,0xc
c0016acf:	c3                   	ret    

c0016ad0 <Video::isMonochrome()>:
c0016ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ad4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ada:	c3                   	ret    
c0016adb:	90                   	nop

c0016adc <Video::getWidth()>:
c0016adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ae0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ae6:	c3                   	ret    
c0016ae7:	90                   	nop

c0016ae8 <Video::getHeight()>:
c0016ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016aec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016af2:	c3                   	ret    
c0016af3:	90                   	nop

c0016af4 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016af4:	55                   	push   ebp
c0016af5:	57                   	push   edi
c0016af6:	56                   	push   esi
c0016af7:	53                   	push   ebx
c0016af8:	83 ec 2c             	sub    esp,0x2c
c0016afb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016aff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b03:	83 f8 01             	cmp    eax,0x1
c0016b06:	19 c9                	sbb    ecx,ecx
c0016b08:	31 db                	xor    ebx,ebx
c0016b0a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016b0e:	89 cd                	mov    ebp,ecx
c0016b10:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016b18:	f7 d5                	not    ebp
c0016b1a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b20:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b24:	01 d8                	add    eax,ebx
c0016b26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b2a:	56                   	push   esi
c0016b2b:	e8 b8 ff ff ff       	call   c0016ae8 <Video::getHeight()>
c0016b30:	59                   	pop    ecx
c0016b31:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b35:	7e 70                	jle    c0016ba7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b37:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b3b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b3f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b4a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b55:	89 f8                	mov    eax,edi
c0016b57:	83 c0 20             	add    eax,0x20
c0016b5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b5e:	56                   	push   esi
c0016b5f:	e8 78 ff ff ff       	call   c0016adc <Video::getWidth()>
c0016b64:	5a                   	pop    edx
c0016b65:	39 c7                	cmp    edi,eax
c0016b67:	7d 34                	jge    c0016b9d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b69:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b6e:	74 05                	je     c0016b75 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b70:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b72:	55                   	push   ebp
c0016b73:	eb 0d                	jmp    c0016b82 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b75:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b7a:	74 12                	je     c0016b8e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b82:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b86:	57                   	push   edi
c0016b87:	56                   	push   esi
c0016b88:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b8b:	83 c4 10             	add    esp,0x10
c0016b8e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b92:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b96:	47                   	inc    edi
c0016b97:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b9b:	75 c1                	jne    c0016b5e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b9d:	43                   	inc    ebx
c0016b9e:	83 fb 20             	cmp    ebx,0x20
c0016ba1:	0f 85 79 ff ff ff    	jne    c0016b20 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ba7:	83 c4 2c             	add    esp,0x2c
c0016baa:	5b                   	pop    ebx
c0016bab:	5e                   	pop    esi
c0016bac:	5f                   	pop    edi
c0016bad:	5d                   	pop    ebp
c0016bae:	c3                   	ret    
c0016baf:	90                   	nop

c0016bb0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016bb0:	55                   	push   ebp
c0016bb1:	57                   	push   edi
c0016bb2:	56                   	push   esi
c0016bb3:	53                   	push   ebx
c0016bb4:	83 ec 28             	sub    esp,0x28
c0016bb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016bbb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016bbf:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016bc3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016bc7:	c1 e7 08             	shl    edi,0x8
c0016bca:	01 c7                	add    edi,eax
c0016bcc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bd0:	c1 e0 08             	shl    eax,0x8
c0016bd3:	01 d0                	add    eax,edx
c0016bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bdd:	0f af c7             	imul   eax,edi
c0016be0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016be7:	50                   	push   eax
c0016be8:	e8 e7 88 ff ff       	call   c000f4d4 <malloc>
c0016bed:	83 c4 10             	add    esp,0x10
c0016bf0:	89 c5                	mov    ebp,eax
c0016bf2:	85 c0                	test   eax,eax
c0016bf4:	75 15                	jne    c0016c0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	68 e5 9a 02 c0       	push   0xc0029ae5
c0016bfe:	e8 92 bb ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	e9 1c 01 00 00       	jmp    c0016d27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c0b:	be 12 00 00 00       	mov    esi,0x12
c0016c10:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c14:	74 11                	je     c0016c27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016c16:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016c1a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c1e:	c1 fe 03             	sar    esi,0x3
c0016c21:	0f af f0             	imul   esi,eax
c0016c24:	83 c6 12             	add    esi,0x12
c0016c27:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c2b:	74 04                	je     c0016c31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c2d:	85 ff                	test   edi,edi
c0016c2f:	75 12                	jne    c0016c43 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c31:	83 ec 0c             	sub    esp,0xc
c0016c34:	68 fc 9a 02 c0       	push   0xc0029afc
c0016c39:	e8 57 bb ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0016c3e:	e9 ce 00 00 00       	jmp    c0016d11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c43:	52                   	push   edx
c0016c44:	52                   	push   edx
c0016c45:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c49:	50                   	push   eax
c0016c4a:	68 11 9b 02 c0       	push   0xc0029b11
c0016c4f:	e8 41 bb ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0016c54:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	80 fa 02             	cmp    dl,0x2
c0016c5e:	0f 85 98 00 00 00    	jne    c0016cfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c64:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c69:	75 10                	jne    c0016c7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c6b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c6f:	75 0a                	jne    c0016c7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c71:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c74:	83 e8 18             	sub    eax,0x18
c0016c77:	a8 f7                	test   al,0xf7
c0016c79:	74 0a                	je     c0016c85 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c7b:	83 ec 0c             	sub    esp,0xc
c0016c7e:	68 1e 9b 02 c0       	push   0xc0029b1e
c0016c83:	eb 7f                	jmp    c0016d04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ca1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016ca5:	75 0c                	jne    c0016cb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016ca7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016cac:	c1 e0 18             	shl    eax,0x18
c0016caf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cb3:	41                   	inc    ecx
c0016cb4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016cb9:	c1 e2 10             	shl    edx,0x10
c0016cbc:	89 d0                	mov    eax,edx
c0016cbe:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016cc3:	c1 e2 08             	shl    edx,0x8
c0016cc6:	09 c2                	or     edx,eax
c0016cc8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016ccc:	09 c2                	or     edx,eax
c0016cce:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cd2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cd6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cda:	c1 f8 03             	sar    eax,0x3
c0016cdd:	01 c6                	add    esi,eax
c0016cdf:	89 c8                	mov    eax,ecx
c0016ce1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016ce5:	39 c7                	cmp    edi,eax
c0016ce7:	7f b0                	jg     c0016c99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ce9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016ced:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cf1:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016cf4:	7e 22                	jle    c0016d18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016cf6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016cfa:	eb 99                	jmp    c0016c95 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016cfc:	50                   	push   eax
c0016cfd:	50                   	push   eax
c0016cfe:	52                   	push   edx
c0016cff:	68 2c 9b 02 c0       	push   0xc0029b2c
c0016d04:	e8 8c ba ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0016d09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d0c:	e8 d3 87 ff ff       	call   c000f4e4 <free>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	31 ed                	xor    ebp,ebp
c0016d16:	eb 0f                	jmp    c0016d27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d1c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d1f:	89 38                	mov    DWORD PTR [eax],edi
c0016d21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d25:	89 08                	mov    DWORD PTR [eax],ecx
c0016d27:	83 c4 1c             	add    esp,0x1c
c0016d2a:	89 e8                	mov    eax,ebp
c0016d2c:	5b                   	pop    ebx
c0016d2d:	5e                   	pop    esi
c0016d2e:	5f                   	pop    edi
c0016d2f:	5d                   	pop    ebp
c0016d30:	c3                   	ret    
c0016d31:	90                   	nop

c0016d32 <Video::putTGA(int, int, unsigned char*, int)>:
c0016d32:	55                   	push   ebp
c0016d33:	57                   	push   edi
c0016d34:	56                   	push   esi
c0016d35:	53                   	push   ebx
c0016d36:	83 ec 28             	sub    esp,0x28
c0016d39:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d41:	50                   	push   eax
c0016d42:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d46:	50                   	push   eax
c0016d47:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d4b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d4f:	56                   	push   esi
c0016d50:	e8 5b fe ff ff       	call   c0016bb0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d55:	83 c4 20             	add    esp,0x20
c0016d58:	85 c0                	test   eax,eax
c0016d5a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d5e:	74 35                	je     c0016d95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d60:	89 c7                	mov    edi,eax
c0016d62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d66:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d6a:	39 d8                	cmp    eax,ebx
c0016d6c:	7e 27                	jle    c0016d95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d7a:	39 e8                	cmp    eax,ebp
c0016d7c:	7e 14                	jle    c0016d92 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d80:	83 c7 04             	add    edi,0x4
c0016d83:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d86:	53                   	push   ebx
c0016d87:	55                   	push   ebp
c0016d88:	45                   	inc    ebp
c0016d89:	56                   	push   esi
c0016d8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	eb e0                	jmp    c0016d72 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d92:	43                   	inc    ebx
c0016d93:	eb cd                	jmp    c0016d62 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d95:	83 c4 1c             	add    esp,0x1c
c0016d98:	5b                   	pop    ebx
c0016d99:	5e                   	pop    esi
c0016d9a:	5f                   	pop    edi
c0016d9b:	5d                   	pop    ebp
c0016d9c:	c3                   	ret    
c0016d9d:	90                   	nop

c0016d9e <ACPI::close(int, int, void*)>:
c0016d9e:	83 ec 1c             	sub    esp,0x1c
c0016da1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016da9:	74 0a                	je     c0016db5 <ACPI::close(int, int, void*)+0x17>
c0016dab:	b8 00 00 00 00       	mov    eax,0x0
c0016db0:	e9 9a 00 00 00       	jmp    c0016e4f <ACPI::close(int, int, void*)+0xb1>
c0016db5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dba:	75 37                	jne    c0016df3 <ACPI::close(int, int, void*)+0x55>
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	68 88 9b 02 c0       	push   0xc0029b88
c0016dc4:	e8 cc b9 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	a1 08 d0 02 c0       	mov    eax,ds:0xc002d008
c0016dd1:	85 c0                	test   eax,eax
c0016dd3:	74 07                	je     c0016ddc <ACPI::close(int, int, void*)+0x3e>
c0016dd5:	a1 08 d0 02 c0       	mov    eax,ds:0xc002d008
c0016dda:	ff d0                	call   eax
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	68 5c 9c 02 c0       	push   0xc0029c5c
c0016de4:	e8 c6 2a 00 00       	call   c00198af <Krnl::panic(char const*)>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016df1:	eb 5c                	jmp    c0016e4f <ACPI::close(int, int, void*)+0xb1>
c0016df3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016df8:	75 50                	jne    c0016e4a <ACPI::close(int, int, void*)+0xac>
c0016dfa:	a1 04 d0 02 c0       	mov    eax,ds:0xc002d004
c0016dff:	85 c0                	test   eax,eax
c0016e01:	74 07                	je     c0016e0a <ACPI::close(int, int, void*)+0x6c>
c0016e03:	a1 04 d0 02 c0       	mov    eax,ds:0xc002d004
c0016e08:	ff d0                	call   eax
c0016e0a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016e0f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016e14:	83 e0 02             	and    eax,0x2
c0016e17:	74 1c                	je     c0016e35 <ACPI::close(int, int, void*)+0x97>
c0016e19:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e24:	89 c2                	mov    edx,eax
c0016e26:	ec                   	in     al,dx
c0016e27:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e2b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e33:	eb da                	jmp    c0016e0f <ACPI::close(int, int, void*)+0x71>
c0016e35:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e3c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e41:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e49:	ee                   	out    dx,al
c0016e4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e4f:	83 c4 1c             	add    esp,0x1c
c0016e52:	c3                   	ret    

c0016e53 <findRSDP()>:
c0016e53:	83 ec 1c             	sub    esp,0x1c
c0016e56:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016e5b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e61:	83 e0 04             	and    eax,0x4
c0016e64:	84 c0                	test   al,al
c0016e66:	75 07                	jne    c0016e6f <findRSDP()+0x1c>
c0016e68:	b8 00 00 00 00       	mov    eax,0x0
c0016e6d:	eb 6a                	jmp    c0016ed9 <findRSDP()+0x86>
c0016e6f:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0016e74:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e79:	7f 1b                	jg     c0016e96 <findRSDP()+0x43>
c0016e7b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016e80:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e86:	83 e2 fb             	and    edx,0xfffffffb
c0016e89:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e8f:	b8 00 00 00 00       	mov    eax,0x0
c0016e94:	eb 43                	jmp    c0016ed9 <findRSDP()+0x86>
c0016e96:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e9e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016ea6:	77 2c                	ja     c0016ed4 <findRSDP()+0x81>
c0016ea8:	83 ec 04             	sub    esp,0x4
c0016eab:	6a 08                	push   0x8
c0016ead:	68 95 9b 02 c0       	push   0xc0029b95
c0016eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eb6:	e8 37 97 fe ff       	call   c00005f2 <memcmp>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	85 c0                	test   eax,eax
c0016ec0:	0f 94 c0             	sete   al
c0016ec3:	84 c0                	test   al,al
c0016ec5:	74 06                	je     c0016ecd <findRSDP()+0x7a>
c0016ec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ecb:	eb 0c                	jmp    c0016ed9 <findRSDP()+0x86>
c0016ecd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016ed2:	eb ca                	jmp    c0016e9e <findRSDP()+0x4b>
c0016ed4:	b8 00 00 00 00       	mov    eax,0x0
c0016ed9:	83 c4 1c             	add    esp,0x1c
c0016edc:	c3                   	ret    

c0016edd <loadACPITables(unsigned char*)>:
c0016edd:	56                   	push   esi
c0016ede:	53                   	push   ebx
c0016edf:	83 ec 44             	sub    esp,0x44
c0016ee2:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016ee7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016eed:	83 e0 04             	and    eax,0x4
c0016ef0:	84 c0                	test   al,al
c0016ef2:	0f 84 05 02 00 00    	je     c00170fd <loadACPITables(unsigned char*)+0x220>
c0016ef8:	a0 20 d2 02 c0       	mov    al,ds:0xc002d220
c0016efd:	84 c0                	test   al,al
c0016eff:	74 75                	je     c0016f76 <loadACPITables(unsigned char*)+0x99>
c0016f01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f10:	83 e8 24             	sub    eax,0x24
c0016f13:	c1 e8 03             	shr    eax,0x3
c0016f16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f1a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f26:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f2a:	0f 8d b2 00 00 00    	jge    c0016fe2 <loadACPITables(unsigned char*)+0x105>
c0016f30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f34:	83 c0 24             	add    eax,0x24
c0016f37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f3f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f47:	c1 e0 03             	shl    eax,0x3
c0016f4a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f52:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f55:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f57:	89 c1                	mov    ecx,eax
c0016f59:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0016f61:	89 15 0c d0 02 c0    	mov    DWORD PTR ds:0xc002d00c,edx
c0016f67:	89 ca                	mov    edx,ecx
c0016f69:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c0016f70:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f74:	eb ac                	jmp    c0016f22 <loadACPITables(unsigned char*)+0x45>
c0016f76:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f85:	83 e8 24             	sub    eax,0x24
c0016f88:	c1 e8 02             	shr    eax,0x2
c0016f8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f8f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f9b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f9f:	7d 41                	jge    c0016fe2 <loadACPITables(unsigned char*)+0x105>
c0016fa1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fa5:	83 c0 24             	add    eax,0x24
c0016fa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb8:	c1 e0 02             	shl    eax,0x2
c0016fbb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fc5:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016fca:	8d 50 01             	lea    edx,[eax+0x1]
c0016fcd:	89 15 0c d0 02 c0    	mov    DWORD PTR ds:0xc002d00c,edx
c0016fd3:	89 ca                	mov    edx,ecx
c0016fd5:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c0016fdc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016fe0:	eb b5                	jmp    c0016f97 <loadACPITables(unsigned char*)+0xba>
c0016fe2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fea:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016fef:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016ff3:	0f 8d 05 01 00 00    	jge    c00170fe <loadACPITables(unsigned char*)+0x221>
c0016ff9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ffd:	8b 04 c5 24 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fdc]
c0017004:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017014:	25 ff 0f 00 00       	and    eax,0xfff
c0017019:	89 c6                	mov    esi,eax
c001701b:	e8 15 a9 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c0017020:	89 c3                	mov    ebx,eax
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	6a 01                	push   0x1
c0017027:	e8 79 a7 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c001702c:	83 c4 10             	add    esp,0x10
c001702f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017033:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017039:	83 ec 0c             	sub    esp,0xc
c001703c:	6a 01                	push   0x1
c001703e:	6a 01                	push   0x1
c0017040:	50                   	push   eax
c0017041:	52                   	push   edx
c0017042:	53                   	push   ebx
c0017043:	e8 1c b1 ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017048:	83 c4 20             	add    esp,0x20
c001704b:	09 f0                	or     eax,esi
c001704d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017051:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017055:	c1 e0 03             	shl    eax,0x3
c0017058:	05 20 d0 02 c0       	add    eax,0xc002d020
c001705d:	83 ec 04             	sub    esp,0x4
c0017060:	6a 04                	push   0x4
c0017062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017066:	50                   	push   eax
c0017067:	e8 e9 95 fe ff       	call   c0000655 <memcpy>
c001706c:	83 c4 10             	add    esp,0x10
c001706f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017073:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017076:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001707a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001707e:	05 00 10 00 00       	add    eax,0x1000
c0017083:	c1 e8 0c             	shr    eax,0xc
c0017086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017095:	25 ff 0f 00 00       	and    eax,0xfff
c001709a:	89 c6                	mov    esi,eax
c001709c:	e8 94 a8 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c00170a1:	89 c3                	mov    ebx,eax
c00170a3:	83 ec 0c             	sub    esp,0xc
c00170a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170aa:	e8 f6 a6 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170b6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170bc:	83 ec 0c             	sub    esp,0xc
c00170bf:	6a 01                	push   0x1
c00170c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170c5:	50                   	push   eax
c00170c6:	52                   	push   edx
c00170c7:	53                   	push   ebx
c00170c8:	e8 97 b0 ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170cd:	83 c4 20             	add    esp,0x20
c00170d0:	09 f0                	or     eax,esi
c00170d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170d6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170d9:	83 ec 0c             	sub    esp,0xc
c00170dc:	50                   	push   eax
c00170dd:	e8 27 aa ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170ed:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c00170f4:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170f8:	e9 ed fe ff ff       	jmp    c0016fea <loadACPITables(unsigned char*)+0x10d>
c00170fd:	90                   	nop
c00170fe:	83 c4 44             	add    esp,0x44
c0017101:	5b                   	pop    ebx
c0017102:	5e                   	pop    esi
c0017103:	c3                   	ret    

c0017104 <findRSDT(unsigned char*)>:
c0017104:	56                   	push   esi
c0017105:	53                   	push   ebx
c0017106:	83 ec 44             	sub    esp,0x44
c0017109:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001710e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017114:	83 e0 04             	and    eax,0x4
c0017117:	84 c0                	test   al,al
c0017119:	75 0a                	jne    c0017125 <findRSDT(unsigned char*)+0x21>
c001711b:	b8 00 00 00 00       	mov    eax,0x0
c0017120:	e9 f7 00 00 00       	jmp    c001721c <findRSDT(unsigned char*)+0x118>
c0017125:	83 ec 04             	sub    esp,0x4
c0017128:	6a 24                	push   0x24
c001712a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001712e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017132:	50                   	push   eax
c0017133:	e8 1d 95 fe ff       	call   c0000655 <memcpy>
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001713f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017143:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001714b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001714f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017153:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001715b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001715f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017163:	25 ff 0f 00 00       	and    eax,0xfff
c0017168:	89 c6                	mov    esi,eax
c001716a:	e8 c6 a7 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c001716f:	89 c3                	mov    ebx,eax
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	6a 02                	push   0x2
c0017176:	e8 2a a6 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017182:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	6a 01                	push   0x1
c001718d:	6a 02                	push   0x2
c001718f:	50                   	push   eax
c0017190:	52                   	push   edx
c0017191:	53                   	push   ebx
c0017192:	e8 cd af ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017197:	83 c4 20             	add    esp,0x20
c001719a:	09 f0                	or     eax,esi
c001719c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171a4:	25 ff 0f 00 00       	and    eax,0xfff
c00171a9:	89 c6                	mov    esi,eax
c00171ab:	e8 85 a7 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c00171b0:	89 c3                	mov    ebx,eax
c00171b2:	83 ec 0c             	sub    esp,0xc
c00171b5:	6a 02                	push   0x2
c00171b7:	e8 e9 a5 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171c3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171c9:	83 ec 0c             	sub    esp,0xc
c00171cc:	6a 01                	push   0x1
c00171ce:	6a 02                	push   0x2
c00171d0:	50                   	push   eax
c00171d1:	52                   	push   edx
c00171d2:	53                   	push   ebx
c00171d3:	e8 8c af ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171d8:	83 c4 20             	add    esp,0x20
c00171db:	09 f0                	or     eax,esi
c00171dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171e1:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171e6:	75 11                	jne    c00171f9 <findRSDT(unsigned char*)+0xf5>
c00171e8:	c6 05 20 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d220,0x0
c00171ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171f7:	eb 1f                	jmp    c0017218 <findRSDT(unsigned char*)+0x114>
c00171f9:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171fe:	75 11                	jne    c0017211 <findRSDT(unsigned char*)+0x10d>
c0017200:	c6 05 20 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d220,0x1
c0017207:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001720b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001720f:	eb 07                	jmp    c0017218 <findRSDT(unsigned char*)+0x114>
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	eb 04                	jmp    c001721c <findRSDT(unsigned char*)+0x118>
c0017218:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001721c:	83 c4 44             	add    esp,0x44
c001721f:	5b                   	pop    ebx
c0017220:	5e                   	pop    esi
c0017221:	c3                   	ret    

c0017222 <findDataTable(unsigned char*, char*)>:
c0017222:	83 ec 1c             	sub    esp,0x1c
c0017225:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001722a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017230:	83 e0 04             	and    eax,0x4
c0017233:	84 c0                	test   al,al
c0017235:	75 07                	jne    c001723e <findDataTable(unsigned char*, char*)+0x1c>
c0017237:	b8 00 00 00 00       	mov    eax,0x0
c001723c:	eb 7c                	jmp    c00172ba <findDataTable(unsigned char*, char*)+0x98>
c001723e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017246:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c001724b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001724f:	7d 3a                	jge    c001728b <findDataTable(unsigned char*, char*)+0x69>
c0017251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017255:	c1 e0 03             	shl    eax,0x3
c0017258:	05 20 d0 02 c0       	add    eax,0xc002d020
c001725d:	83 ec 04             	sub    esp,0x4
c0017260:	6a 04                	push   0x4
c0017262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017266:	50                   	push   eax
c0017267:	e8 86 93 fe ff       	call   c00005f2 <memcmp>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	85 c0                	test   eax,eax
c0017271:	0f 94 c0             	sete   al
c0017274:	84 c0                	test   al,al
c0017276:	74 0d                	je     c0017285 <findDataTable(unsigned char*, char*)+0x63>
c0017278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001727c:	8b 04 c5 24 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fdc]
c0017283:	eb 35                	jmp    c00172ba <findDataTable(unsigned char*, char*)+0x98>
c0017285:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017289:	eb bb                	jmp    c0017246 <findDataTable(unsigned char*, char*)+0x24>
c001728b:	a0 20 d2 02 c0       	mov    al,ds:0xc002d220
c0017290:	84 c0                	test   al,al
c0017292:	74 07                	je     c001729b <findDataTable(unsigned char*, char*)+0x79>
c0017294:	b8 58 00 00 00       	mov    eax,0x58
c0017299:	eb 05                	jmp    c00172a0 <findDataTable(unsigned char*, char*)+0x7e>
c001729b:	b8 52 00 00 00       	mov    eax,0x52
c00172a0:	83 ec 04             	sub    esp,0x4
c00172a3:	50                   	push   eax
c00172a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172a8:	68 80 9c 02 c0       	push   0xc0029c80
c00172ad:	e8 e3 b4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	b8 00 00 00 00       	mov    eax,0x0
c00172ba:	83 c4 1c             	add    esp,0x1c
c00172bd:	c3                   	ret    

c00172be <scanMADT()>:
c00172be:	53                   	push   ebx
c00172bf:	83 ec 38             	sub    esp,0x38
c00172c2:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00172c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172cd:	83 e0 04             	and    eax,0x4
c00172d0:	84 c0                	test   al,al
c00172d2:	0f 84 63 04 00 00    	je     c001773b <scanMADT()+0x47d>
c00172d8:	e8 76 fb ff ff       	call   c0016e53 <findRSDP()>
c00172dd:	a3 2c d2 02 c0       	mov    ds:0xc002d22c,eax
c00172e2:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c00172e7:	85 c0                	test   eax,eax
c00172e9:	75 19                	jne    c0017304 <scanMADT()+0x46>
c00172eb:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00172f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172f6:	83 e2 fb             	and    edx,0xfffffffb
c00172f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172ff:	e9 3b 04 00 00       	jmp    c001773f <scanMADT()+0x481>
c0017304:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c0017309:	83 ec 0c             	sub    esp,0xc
c001730c:	50                   	push   eax
c001730d:	e8 f2 fd ff ff       	call   c0017104 <findRSDT(unsigned char*)>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	a3 28 d2 02 c0       	mov    ds:0xc002d228,eax
c001731a:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c001731f:	85 c0                	test   eax,eax
c0017321:	75 19                	jne    c001733c <scanMADT()+0x7e>
c0017323:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017328:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001732e:	83 e2 fb             	and    edx,0xfffffffb
c0017331:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017337:	e9 03 04 00 00       	jmp    c001773f <scanMADT()+0x481>
c001733c:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	50                   	push   eax
c0017345:	e8 93 fb ff ff       	call   c0016edd <loadACPITables(unsigned char*)>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017352:	83 ec 08             	sub    esp,0x8
c0017355:	68 9e 9b 02 c0       	push   0xc0029b9e
c001735a:	50                   	push   eax
c001735b:	e8 c2 fe ff ff       	call   c0017222 <findDataTable(unsigned char*, char*)>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017367:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001736c:	75 19                	jne    c0017387 <scanMADT()+0xc9>
c001736e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017373:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017379:	83 e2 fe             	and    edx,0xfffffffe
c001737c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017382:	e9 b8 03 00 00       	jmp    c001773f <scanMADT()+0x481>
c0017387:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001738f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017393:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017396:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001739a:	0f 87 9f 03 00 00    	ja     c001773f <scanMADT()+0x481>
c00173a0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00173a8:	0f 87 91 03 00 00    	ja     c001773f <scanMADT()+0x481>
c00173ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173ba:	8d 50 01             	lea    edx,[eax+0x1]
c00173bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173c9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d1:	8d 50 01             	lea    edx,[eax+0x1]
c00173d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173dc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173e0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173e4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173e9:	0f 86 4f 03 00 00    	jbe    c001773e <scanMADT()+0x480>
c00173ef:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173f4:	75 57                	jne    c001744d <scanMADT()+0x18f>
c00173f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173fa:	8d 50 01             	lea    edx,[eax+0x1]
c00173fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017401:	8a 15 20 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d420
c0017407:	0f b6 d2             	movzx  edx,dl
c001740a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001740e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017412:	88 82 60 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2ba0],al
c0017418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001741c:	8d 50 01             	lea    edx,[eax+0x1]
c001741f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017423:	8a 15 20 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d420
c0017429:	8d 4a 01             	lea    ecx,[edx+0x1]
c001742c:	88 0d 20 d4 02 c0    	mov    BYTE PTR ds:0xc002d420,cl
c0017432:	0f b6 d2             	movzx  edx,dl
c0017435:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017439:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001743d:	88 82 40 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2bc0],al
c0017443:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017448:	e9 da 02 00 00       	jmp    c0017727 <scanMADT()+0x469>
c001744d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017452:	0f 85 14 01 00 00    	jne    c001756c <scanMADT()+0x2ae>
c0017458:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001745c:	8d 50 01             	lea    edx,[eax+0x1]
c001745f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017463:	8a 15 e0 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d2e0
c0017469:	0f b6 d2             	movzx  edx,dl
c001746c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017470:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017474:	88 82 00 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2d00],al
c001747a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001747e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017486:	01 d0                	add    eax,edx
c0017488:	83 c0 2c             	add    eax,0x2c
c001748b:	8a 00                	mov    al,BYTE PTR [eax]
c001748d:	0f b6 d0             	movzx  edx,al
c0017490:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017494:	8d 48 01             	lea    ecx,[eax+0x1]
c0017497:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001749b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001749f:	0f b6 c0             	movzx  eax,al
c00174a2:	c1 e0 08             	shl    eax,0x8
c00174a5:	89 d1                	mov    ecx,edx
c00174a7:	09 c1                	or     ecx,eax
c00174a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ad:	8d 50 02             	lea    edx,[eax+0x2]
c00174b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174b4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174b8:	0f b6 c0             	movzx  eax,al
c00174bb:	c1 e0 10             	shl    eax,0x10
c00174be:	09 c1                	or     ecx,eax
c00174c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c4:	8d 50 03             	lea    edx,[eax+0x3]
c00174c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174cf:	0f b6 c0             	movzx  eax,al
c00174d2:	c1 e0 18             	shl    eax,0x18
c00174d5:	09 c1                	or     ecx,eax
c00174d7:	89 ca                	mov    edx,ecx
c00174d9:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c00174de:	0f b6 c0             	movzx  eax,al
c00174e1:	89 14 85 20 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ce0],edx
c00174e8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f5:	01 d0                	add    eax,edx
c00174f7:	83 c0 2c             	add    eax,0x2c
c00174fa:	8a 00                	mov    al,BYTE PTR [eax]
c00174fc:	0f b6 d0             	movzx  edx,al
c00174ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017503:	8d 48 01             	lea    ecx,[eax+0x1]
c0017506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001750a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001750e:	0f b6 c0             	movzx  eax,al
c0017511:	c1 e0 08             	shl    eax,0x8
c0017514:	89 d1                	mov    ecx,edx
c0017516:	09 c1                	or     ecx,eax
c0017518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001751c:	8d 50 02             	lea    edx,[eax+0x2]
c001751f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017523:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017527:	0f b6 c0             	movzx  eax,al
c001752a:	c1 e0 10             	shl    eax,0x10
c001752d:	09 c1                	or     ecx,eax
c001752f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017533:	8d 50 03             	lea    edx,[eax+0x3]
c0017536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001753a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001753e:	0f b6 c0             	movzx  eax,al
c0017541:	c1 e0 18             	shl    eax,0x18
c0017544:	09 c1                	or     ecx,eax
c0017546:	89 ca                	mov    edx,ecx
c0017548:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c001754d:	0f b6 c0             	movzx  eax,al
c0017550:	89 14 85 a0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c60],edx
c0017557:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001755c:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c0017561:	40                   	inc    eax
c0017562:	a2 e0 d2 02 c0       	mov    ds:0xc002d2e0,al
c0017567:	e9 bb 01 00 00       	jmp    c0017727 <scanMADT()+0x469>
c001756c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017571:	0f 85 e9 00 00 00    	jne    c0017660 <scanMADT()+0x3a2>
c0017577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757b:	8d 50 01             	lea    edx,[eax+0x1]
c001757e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017582:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017586:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001758a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001758e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017592:	8d 50 01             	lea    edx,[eax+0x1]
c0017595:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001759d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175a1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00175a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ad:	01 d0                	add    eax,edx
c00175af:	83 c0 2c             	add    eax,0x2c
c00175b2:	8a 00                	mov    al,BYTE PTR [eax]
c00175b4:	0f b6 d0             	movzx  edx,al
c00175b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00175be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175c6:	0f b6 c0             	movzx  eax,al
c00175c9:	c1 e0 08             	shl    eax,0x8
c00175cc:	89 d1                	mov    ecx,edx
c00175ce:	09 c1                	or     ecx,eax
c00175d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d4:	8d 50 02             	lea    edx,[eax+0x2]
c00175d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175db:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175df:	0f b6 c0             	movzx  eax,al
c00175e2:	c1 e0 10             	shl    eax,0x10
c00175e5:	09 c1                	or     ecx,eax
c00175e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175eb:	8d 50 03             	lea    edx,[eax+0x3]
c00175ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175f6:	0f b6 c0             	movzx  eax,al
c00175f9:	c1 e0 18             	shl    eax,0x18
c00175fc:	09 c8                	or     eax,ecx
c00175fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017602:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017607:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001760b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001760f:	01 d0                	add    eax,edx
c0017611:	83 c0 2c             	add    eax,0x2c
c0017614:	8a 00                	mov    al,BYTE PTR [eax]
c0017616:	0f b6 c0             	movzx  eax,al
c0017619:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001761d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017620:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017624:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017628:	0f b6 d2             	movzx  edx,dl
c001762b:	c1 e2 08             	shl    edx,0x8
c001762e:	09 d0                	or     eax,edx
c0017630:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017635:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001763a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001763f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017643:	88 90 c0 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4440],dl
c0017649:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001764e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017653:	66 89 84 12 c0 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2d40],ax
c001765b:	e9 c7 00 00 00       	jmp    c0017727 <scanMADT()+0x469>
c0017660:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017665:	0f 85 b0 00 00 00    	jne    c001771b <scanMADT()+0x45d>
c001766b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001766f:	8d 50 01             	lea    edx,[eax+0x1]
c0017672:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017676:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001767a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001767e:	0f b6 c0             	movzx  eax,al
c0017681:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017685:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017689:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001768d:	01 d0                	add    eax,edx
c001768f:	83 c0 2c             	add    eax,0x2c
c0017692:	8a 00                	mov    al,BYTE PTR [eax]
c0017694:	0f b6 d0             	movzx  edx,al
c0017697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769b:	8d 48 01             	lea    ecx,[eax+0x1]
c001769e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176a6:	0f b6 c0             	movzx  eax,al
c00176a9:	c1 e0 08             	shl    eax,0x8
c00176ac:	09 d0                	or     eax,edx
c00176ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176b2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176bb:	8d 50 01             	lea    edx,[eax+0x1]
c00176be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176ca:	0f b6 c0             	movzx  eax,al
c00176cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176d5:	c1 e0 08             	shl    eax,0x8
c00176d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176dc:	89 c1                	mov    ecx,eax
c00176de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176e2:	c1 e0 18             	shl    eax,0x18
c00176e5:	89 c3                	mov    ebx,eax
c00176e7:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c00176ec:	8d 50 01             	lea    edx,[eax+0x1]
c00176ef:	89 15 30 d2 02 c0    	mov    DWORD PTR ds:0xc002d230,edx
c00176f5:	09 d9                	or     ecx,ebx
c00176f7:	89 ca                	mov    edx,ecx
c00176f9:	89 14 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],edx
c0017700:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001770c:	68 b0 9c 02 c0       	push   0xc0029cb0
c0017711:	e8 7f b0 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0017716:	83 c4 10             	add    esp,0x10
c0017719:	eb 0c                	jmp    c0017727 <scanMADT()+0x469>
c001771b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017720:	75 05                	jne    c0017727 <scanMADT()+0x469>
c0017722:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017727:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001772c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017730:	01 d0                	add    eax,edx
c0017732:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017736:	e9 54 fc ff ff       	jmp    c001738f <scanMADT()+0xd1>
c001773b:	90                   	nop
c001773c:	eb 01                	jmp    c001773f <scanMADT()+0x481>
c001773e:	90                   	nop
c001773f:	83 c4 38             	add    esp,0x38
c0017742:	5b                   	pop    ebx
c0017743:	c3                   	ret    

c0017744 <ACPI::ACPI()>:
c0017744:	83 ec 0c             	sub    esp,0xc
c0017747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	68 a3 9b 02 c0       	push   0xc0029ba3
c0017753:	50                   	push   eax
c0017754:	e8 1b c6 ff ff       	call   c0013d74 <Device::Device(char const*)>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	ba 88 9d 02 c0       	mov    edx,0xc0029d88
c0017761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017765:	89 10                	mov    DWORD PTR [eax],edx
c0017767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017776:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017784:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001778e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017792:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017799:	e8 20 fb ff ff       	call   c00172be <scanMADT()>
c001779e:	90                   	nop
c001779f:	83 c4 0c             	add    esp,0xc
c00177a2:	c3                   	ret    
c00177a3:	90                   	nop

c00177a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00177a4:	83 ec 2c             	sub    esp,0x2c
c00177a7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00177ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177af:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177b3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177b7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177bc:	88 d0                	mov    al,dl
c00177be:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177c7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177d3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177d9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177dd:	0f 8d 97 00 00 00    	jge    c001787a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00177e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177eb:	83 c2 2a             	add    edx,0x2a
c00177ee:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177f2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177f7:	75 78                	jne    c0017871 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017801:	83 c2 2a             	add    edx,0x2a
c0017804:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017808:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001780c:	75 63                	jne    c0017871 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001780e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017813:	74 3a                	je     c001784f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017815:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001781d:	83 c2 2a             	add    edx,0x2a
c0017820:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017828:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001782b:	39 c2                	cmp    edx,eax
c001782d:	74 10                	je     c001783f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001782f:	83 ec 0c             	sub    esp,0xc
c0017832:	68 ec 9c 02 c0       	push   0xc0029cec
c0017837:	e8 73 20 00 00       	call   c00198af <Krnl::panic(char const*)>
c001783c:	83 c4 10             	add    esp,0x10
c001783f:	83 ec 0c             	sub    esp,0xc
c0017842:	68 a8 9b 02 c0       	push   0xc0029ba8
c0017847:	e8 63 20 00 00       	call   c00198af <Krnl::panic(char const*)>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017853:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017857:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001785b:	83 c2 2a             	add    edx,0x2a
c001785e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017862:	8b 02                	mov    eax,DWORD PTR [edx]
c0017864:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017867:	89 01                	mov    DWORD PTR [ecx],eax
c0017869:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001786c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017871:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017875:	e9 55 ff ff ff       	jmp    c00177cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001787a:	90                   	nop
c001787b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001787f:	83 c4 2c             	add    esp,0x2c
c0017882:	c2 04 00             	ret    0x4
c0017885:	90                   	nop

c0017886 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017886:	56                   	push   esi
c0017887:	53                   	push   ebx
c0017888:	83 ec 14             	sub    esp,0x14
c001788b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001788f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017897:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001789c:	88 c8                	mov    al,cl
c001789e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00178a2:	88 d0                	mov    al,dl
c00178a4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00178a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ac:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00178b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b6:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178bc:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178c1:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178c6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178cb:	83 ec 04             	sub    esp,0x4
c00178ce:	56                   	push   esi
c00178cf:	53                   	push   ebx
c00178d0:	51                   	push   ecx
c00178d1:	52                   	push   edx
c00178d2:	50                   	push   eax
c00178d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178d7:	68 1c 9d 02 c0       	push   0xc0029d1c
c00178dc:	e8 b4 ae ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00178e1:	83 c4 20             	add    esp,0x20
c00178e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017901:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017907:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001790b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001790e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017912:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017921:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017925:	8d 48 01             	lea    ecx,[eax+0x1]
c0017928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792c:	83 c2 2a             	add    edx,0x2a
c001792f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017937:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001793d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017941:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017944:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017948:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001794c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017950:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017956:	8d 50 01             	lea    edx,[eax+0x1]
c0017959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017967:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001796d:	3d 00 08 00 00       	cmp    eax,0x800
c0017972:	75 10                	jne    c0017984 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	68 b7 9b 02 c0       	push   0xc0029bb7
c001797c:	e8 2e 1f 00 00       	call   c00198af <Krnl::panic(char const*)>
c0017981:	83 c4 10             	add    esp,0x10
c0017984:	90                   	nop
c0017985:	83 c4 14             	add    esp,0x14
c0017988:	5b                   	pop    ebx
c0017989:	5e                   	pop    esi
c001798a:	c3                   	ret    
c001798b:	90                   	nop

c001798c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001798c:	b8 00 00 00 00       	mov    eax,0x0
c0017991:	c3                   	ret    

c0017992 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017992:	83 ec 1c             	sub    esp,0x1c
c0017995:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017999:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001799c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179a0:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00179a5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179aa:	83 ec 08             	sub    esp,0x8
c00179ad:	52                   	push   edx
c00179ae:	50                   	push   eax
c00179af:	e8 38 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00179b4:	83 c4 10             	add    esp,0x10
c00179b7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00179bb:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00179c0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179c5:	83 ec 04             	sub    esp,0x4
c00179c8:	6a 01                	push   0x1
c00179ca:	52                   	push   edx
c00179cb:	50                   	push   eax
c00179cc:	e8 31 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	90                   	nop
c00179d5:	83 c4 1c             	add    esp,0x1c
c00179d8:	c3                   	ret    
c00179d9:	90                   	nop

c00179da <ACPI::open(int, int, void*)>:
c00179da:	53                   	push   ebx
c00179db:	83 ec 28             	sub    esp,0x28
c00179de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179e2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179ed:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179f3:	84 c0                	test   al,al
c00179f5:	74 67                	je     c0017a5e <ACPI::open(int, int, void*)+0x84>
c00179f7:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179ff:	83 ec 0c             	sub    esp,0xc
c0017a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a06:	e8 c9 7a ff ff       	call   c000f4d4 <malloc>
c0017a0b:	83 c4 10             	add    esp,0x10
c0017a0e:	89 c3                	mov    ebx,eax
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	53                   	push   ebx
c0017a14:	e8 47 9e 00 00       	call   c0021860 <PCI::PCI()>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a24:	83 ec 08             	sub    esp,0x8
c0017a27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a2b:	50                   	push   eax
c0017a2c:	e8 53 c1 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a3a:	83 c0 08             	add    eax,0x8
c0017a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a3f:	6a 00                	push   0x0
c0017a41:	6a 00                	push   0x0
c0017a43:	6a 00                	push   0x0
c0017a45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a49:	ff d0                	call   eax
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	83 ec 0c             	sub    esp,0xc
c0017a51:	68 d4 9b 02 c0       	push   0xc0029bd4
c0017a56:	e8 3a ad ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	83 ec 0c             	sub    esp,0xc
c0017a61:	68 df 9b 02 c0       	push   0xc0029bdf
c0017a66:	e8 9f 41 00 00       	call   c001bc0a <Thr::loadKernelSymbolTable(char const*)>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017a74:	83 ec 08             	sub    esp,0x8
c0017a77:	6a 01                	push   0x1
c0017a79:	68 fd 9b 02 c0       	push   0xc0029bfd
c0017a7e:	e8 47 4c 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	83 ec 08             	sub    esp,0x8
c0017a89:	53                   	push   ebx
c0017a8a:	50                   	push   eax
c0017a8b:	e8 49 4e 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017a99:	83 ec 08             	sub    esp,0x8
c0017a9c:	6a 01                	push   0x1
c0017a9e:	68 1a 9c 02 c0       	push   0xc0029c1a
c0017aa3:	e8 22 4c 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	83 ec 08             	sub    esp,0x8
c0017aae:	53                   	push   ebx
c0017aaf:	50                   	push   eax
c0017ab0:	e8 24 4e 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c0017ab5:	83 c4 10             	add    esp,0x10
c0017ab8:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017abd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ac3:	83 e0 04             	and    eax,0x4
c0017ac6:	84 c0                	test   al,al
c0017ac8:	0f 84 d6 00 00 00    	je     c0017ba4 <ACPI::open(int, int, void*)+0x1ca>
c0017ace:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017ad6:	83 ec 0c             	sub    esp,0xc
c0017ad9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017add:	e8 f2 79 ff ff       	call   c000f4d4 <malloc>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	89 c3                	mov    ebx,eax
c0017ae7:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0017aec:	83 ec 04             	sub    esp,0x4
c0017aef:	50                   	push   eax
c0017af0:	68 37 9c 02 c0       	push   0xc0029c37
c0017af5:	53                   	push   ebx
c0017af6:	e8 c9 b1 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017b02:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b07:	74 17                	je     c0017b20 <ACPI::open(int, int, void*)+0x146>
c0017b09:	83 ec 0c             	sub    esp,0xc
c0017b0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b10:	e8 81 b4 ff ff       	call   c0012f96 <File::exists()>
c0017b15:	83 c4 10             	add    esp,0x10
c0017b18:	84 c0                	test   al,al
c0017b1a:	74 04                	je     c0017b20 <ACPI::open(int, int, void*)+0x146>
c0017b1c:	b0 01                	mov    al,0x1
c0017b1e:	eb 02                	jmp    c0017b22 <ACPI::open(int, int, void*)+0x148>
c0017b20:	b0 00                	mov    al,0x0
c0017b22:	84 c0                	test   al,al
c0017b24:	74 25                	je     c0017b4b <ACPI::open(int, int, void*)+0x171>
c0017b26:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017b2c:	83 ec 08             	sub    esp,0x8
c0017b2f:	6a 01                	push   0x1
c0017b31:	68 37 9c 02 c0       	push   0xc0029c37
c0017b36:	e8 8f 4b 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c0017b3b:	83 c4 10             	add    esp,0x10
c0017b3e:	83 ec 08             	sub    esp,0x8
c0017b41:	53                   	push   ebx
c0017b42:	50                   	push   eax
c0017b43:	e8 91 4d 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c0017b48:	83 c4 10             	add    esp,0x10
c0017b4b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b50:	74 1e                	je     c0017b70 <ACPI::open(int, int, void*)+0x196>
c0017b52:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b57:	74 17                	je     c0017b70 <ACPI::open(int, int, void*)+0x196>
c0017b59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b5f:	83 c0 08             	add    eax,0x8
c0017b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b64:	83 ec 0c             	sub    esp,0xc
c0017b67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b6b:	ff d0                	call   eax
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	68 54 9c 02 c0       	push   0xc0029c54
c0017b7d:	50                   	push   eax
c0017b7e:	e8 9f f6 ff ff       	call   c0017222 <findDataTable(unsigned char*, char*)>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b8a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b8f:	74 13                	je     c0017ba4 <ACPI::open(int, int, void*)+0x1ca>
c0017b91:	83 ec 08             	sub    esp,0x8
c0017b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b9c:	e8 f1 fd ff ff       	call   c0017992 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	b8 00 00 00 00       	mov    eax,0x0
c0017ba9:	83 c4 28             	add    esp,0x28
c0017bac:	5b                   	pop    ebx
c0017bad:	c3                   	ret    

c0017bae <ACPI::sleep()>:
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c0017bb6:	85 c0                	test   eax,eax
c0017bb8:	74 07                	je     c0017bc1 <ACPI::sleep()+0x13>
c0017bba:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c0017bbf:	ff d0                	call   eax
c0017bc1:	90                   	nop
c0017bc2:	83 c4 0c             	add    esp,0xc
c0017bc5:	c3                   	ret    

c0017bc6 <CPU::close(int, int, void*)>:
c0017bc6:	31 c0                	xor    eax,eax
c0017bc8:	c3                   	ret    
c0017bc9:	90                   	nop

c0017bca <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bca:	55                   	push   ebp
c0017bcb:	57                   	push   edi
c0017bcc:	56                   	push   esi
c0017bcd:	53                   	push   ebx
c0017bce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bd6:	89 ce                	mov    esi,ecx
c0017bd8:	89 d5                	mov    ebp,edx
c0017bda:	80 f9 04             	cmp    cl,0x4
c0017bdd:	75 28                	jne    c0017c07 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017bdf:	8d 42 f9             	lea    eax,[edx-0x7]
c0017be2:	3c 03                	cmp    al,0x3
c0017be4:	0f 86 63 01 00 00    	jbe    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bea:	80 fa 03             	cmp    dl,0x3
c0017bed:	0f 84 5a 01 00 00    	je     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bf3:	8d 7a f2             	lea    edi,[edx-0xe]
c0017bf6:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017bfb:	89 fb                	mov    ebx,edi
c0017bfd:	80 fb 01             	cmp    bl,0x1
c0017c00:	77 4e                	ja     c0017c50 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017c02:	e9 52 01 00 00       	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c07:	80 f9 05             	cmp    cl,0x5
c0017c0a:	75 4d                	jne    c0017c59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017c0c:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c11:	80 fa 03             	cmp    dl,0x3
c0017c14:	0f 86 3f 01 00 00    	jbe    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c1a:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c1d:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017c22:	89 fb                	mov    ebx,edi
c0017c24:	80 fb 01             	cmp    bl,0x1
c0017c27:	0f 86 2c 01 00 00    	jbe    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2d:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c32:	80 fa 08             	cmp    dl,0x8
c0017c35:	0f 84 1e 01 00 00    	je     c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3b:	89 d7                	mov    edi,edx
c0017c3d:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017c42:	83 e7 fb             	and    edi,0xfffffffb
c0017c45:	89 fb                	mov    ebx,edi
c0017c47:	80 fb 09             	cmp    bl,0x9
c0017c4a:	0f 84 09 01 00 00    	je     c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c50:	31 c0                	xor    eax,eax
c0017c52:	89 eb                	mov    ebx,ebp
c0017c54:	0f b6 fb             	movzx  edi,bl
c0017c57:	eb 30                	jmp    c0017c89 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c59:	31 c0                	xor    eax,eax
c0017c5b:	80 f9 06             	cmp    cl,0x6
c0017c5e:	75 f2                	jne    c0017c52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c60:	80 fa 0a             	cmp    dl,0xa
c0017c63:	77 ed                	ja     c0017c52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c65:	bf de 05 00 00       	mov    edi,0x5de
c0017c6a:	0f a3 d7             	bt     edi,edx
c0017c6d:	73 e3                	jae    c0017c52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c6f:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017c74:	e9 e0 00 00 00       	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c79:	39 c7                	cmp    edi,eax
c0017c7b:	0f 84 d3 00 00 00    	je     c0017d54 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c81:	40                   	inc    eax
c0017c82:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c87:	74 09                	je     c0017c92 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c89:	89 f3                	mov    ebx,esi
c0017c8b:	80 fb 0f             	cmp    bl,0xf
c0017c8e:	75 f1                	jne    c0017c81 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c90:	eb e7                	jmp    c0017c79 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c92:	80 f9 10             	cmp    cl,0x10
c0017c95:	75 14                	jne    c0017cab <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c97:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c9a:	83 e0 fb             	and    eax,0xfffffffb
c0017c9d:	3c 02                	cmp    al,0x2
c0017c9f:	76 34                	jbe    c0017cd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017ca1:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017ca6:	80 fa 02             	cmp    dl,0x2
c0017ca9:	eb 24                	jmp    c0017ccf <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017cab:	80 f9 11             	cmp    cl,0x11
c0017cae:	75 13                	jne    c0017cc3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017cb0:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017cb5:	80 fa 03             	cmp    dl,0x3
c0017cb8:	0f 85 9b 00 00 00    	jne    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cbe:	e9 91 00 00 00       	jmp    c0017d54 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017cc3:	80 f9 12             	cmp    cl,0x12
c0017cc6:	75 14                	jne    c0017cdc <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cc8:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017ccd:	fe ca                	dec    dl
c0017ccf:	0f 85 84 00 00 00    	jne    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd5:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017cda:	eb 7d                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cdc:	80 f9 14             	cmp    cl,0x14
c0017cdf:	75 12                	jne    c0017cf3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017ce1:	4a                   	dec    edx
c0017ce2:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017ce7:	80 fa 01             	cmp    dl,0x1
c0017cea:	77 6d                	ja     c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cec:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017cf1:	eb 66                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf3:	80 f9 15             	cmp    cl,0x15
c0017cf6:	75 31                	jne    c0017d29 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017cf8:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017cfd:	80 fa 01             	cmp    dl,0x1
c0017d00:	74 57                	je     c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d02:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017d07:	80 fa 13             	cmp    dl,0x13
c0017d0a:	76 0c                	jbe    c0017d18 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017d0c:	80 fa 30             	cmp    dl,0x30
c0017d0f:	75 48                	jne    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d11:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017d16:	eb 41                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d18:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d1d:	0f a3 d1             	bt     ecx,edx
c0017d20:	73 37                	jae    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d22:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017d27:	eb 30                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d29:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017d2e:	80 f9 16             	cmp    cl,0x16
c0017d31:	75 26                	jne    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d33:	b8 50 be 02 c0       	mov    eax,0xc002be50
c0017d38:	84 d2                	test   dl,dl
c0017d3a:	74 1d                	je     c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d3c:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017d41:	80 fa 30             	cmp    dl,0x30
c0017d44:	75 13                	jne    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d46:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017d4b:	eb 0c                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d4d:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017d52:	eb 05                	jmp    c0017d59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d54:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017d59:	5b                   	pop    ebx
c0017d5a:	5e                   	pop    esi
c0017d5b:	5f                   	pop    edi
c0017d5c:	5d                   	pop    ebp
c0017d5d:	c3                   	ret    

c0017d5e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d5e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d66:	80 f9 04             	cmp    cl,0x4
c0017d69:	75 6b                	jne    c0017dd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d6b:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d70:	80 fa 01             	cmp    dl,0x1
c0017d73:	0f 86 92 02 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d79:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017d7e:	80 fa 02             	cmp    dl,0x2
c0017d81:	0f 84 84 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d87:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d8c:	80 fa 03             	cmp    dl,0x3
c0017d8f:	0f 84 76 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d95:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017d9a:	80 fa 04             	cmp    dl,0x4
c0017d9d:	0f 84 68 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da3:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017da8:	80 fa 05             	cmp    dl,0x5
c0017dab:	0f 84 5a 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db1:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017db6:	80 fa 07             	cmp    dl,0x7
c0017db9:	0f 84 4c 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dbf:	83 ea 08             	sub    edx,0x8
c0017dc2:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017dc7:	80 fa 01             	cmp    dl,0x1
c0017dca:	0f 87 3b 02 00 00    	ja     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd0:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017dd5:	c3                   	ret    
c0017dd6:	80 f9 05             	cmp    cl,0x5
c0017dd9:	75 45                	jne    c0017e20 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017ddb:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017dde:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017de3:	80 f9 02             	cmp    cl,0x2
c0017de6:	0f 86 1f 02 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dec:	80 fa 04             	cmp    dl,0x4
c0017def:	0f 84 f3 01 00 00    	je     c0017fe8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017df5:	80 fa 07             	cmp    dl,0x7
c0017df8:	0f 84 0d 02 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dfe:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e03:	80 fa 08             	cmp    dl,0x8
c0017e06:	0f 84 ff 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e0c:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017e11:	80 fa 09             	cmp    dl,0x9
c0017e14:	0f 85 f1 01 00 00    	jne    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1a:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e1f:	c3                   	ret    
c0017e20:	80 f9 06             	cmp    cl,0x6
c0017e23:	0f 85 85 01 00 00    	jne    c0017fae <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e29:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e2e:	80 fa 01             	cmp    dl,0x1
c0017e31:	0f 84 d4 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e37:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e3a:	3c 01                	cmp    al,0x1
c0017e3c:	0f 86 ac 01 00 00    	jbe    c0017fee <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e42:	80 fa 03             	cmp    dl,0x3
c0017e45:	0f 84 a3 01 00 00    	je     c0017fee <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e4b:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e4e:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e53:	80 f9 01             	cmp    cl,0x1
c0017e56:	0f 86 af 01 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5c:	80 fa 09             	cmp    dl,0x9
c0017e5f:	0f 84 8f 01 00 00    	je     c0017ff4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e65:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e68:	80 f9 01             	cmp    cl,0x1
c0017e6b:	0f 86 9a 01 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e71:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e76:	80 fa 0d             	cmp    dl,0xd
c0017e79:	0f 84 8c 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7f:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017e84:	80 fa 0e             	cmp    dl,0xe
c0017e87:	0f 84 7e 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e8d:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017e92:	80 fa 0f             	cmp    dl,0xf
c0017e95:	0f 84 70 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9b:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017ea0:	80 fa 15             	cmp    dl,0x15
c0017ea3:	0f 84 62 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ea9:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017eac:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017eb1:	80 f9 01             	cmp    cl,0x1
c0017eb4:	0f 86 51 01 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eba:	80 fa 1a             	cmp    dl,0x1a
c0017ebd:	0f 84 37 01 00 00    	je     c0017ffa <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017ec3:	80 fa 1c             	cmp    dl,0x1c
c0017ec6:	0f 84 34 01 00 00    	je     c0018000 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017ecc:	80 fa 1d             	cmp    dl,0x1d
c0017ecf:	0f 84 36 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed5:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017eda:	80 fa 25             	cmp    dl,0x25
c0017edd:	0f 84 28 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee3:	8d 4a da             	lea    ecx,[edx-0x26]
c0017ee6:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017eeb:	80 f9 01             	cmp    cl,0x1
c0017eee:	0f 86 17 01 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef4:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017ef9:	80 fa 2a             	cmp    dl,0x2a
c0017efc:	0f 84 09 01 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f02:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f07:	80 fa 2c             	cmp    dl,0x2c
c0017f0a:	0f 84 fb 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f10:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f15:	80 fa 2d             	cmp    dl,0x2d
c0017f18:	0f 84 ed 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f1e:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f23:	80 fa 2e             	cmp    dl,0x2e
c0017f26:	0f 84 df 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f2c:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f31:	80 fa 2f             	cmp    dl,0x2f
c0017f34:	0f 84 d1 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3a:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f3d:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017f42:	80 f9 01             	cmp    cl,0x1
c0017f45:	0f 86 c0 00 00 00    	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4b:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f50:	80 fa 37             	cmp    dl,0x37
c0017f53:	0f 84 b2 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f59:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f5e:	80 fa 3a             	cmp    dl,0x3a
c0017f61:	0f 84 a4 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f67:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017f6c:	80 fa 3c             	cmp    dl,0x3c
c0017f6f:	0f 84 96 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f75:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017f7a:	80 fa 3d             	cmp    dl,0x3d
c0017f7d:	0f 84 88 00 00 00    	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f83:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f88:	80 fa 3e             	cmp    dl,0x3e
c0017f8b:	74 7e                	je     c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8d:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f90:	3c 01                	cmp    al,0x1
c0017f92:	76 72                	jbe    c0018006 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f94:	80 fa 3f             	cmp    dl,0x3f
c0017f97:	74 6d                	je     c0018006 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f99:	80 fa 4a             	cmp    dl,0x4a
c0017f9c:	74 0a                	je     c0017fa8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f9e:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017fa3:	80 fa 4d             	cmp    dl,0x4d
c0017fa6:	75 63                	jne    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa8:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017fad:	c3                   	ret    
c0017fae:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017fb3:	80 f9 0b             	cmp    cl,0xb
c0017fb6:	75 0a                	jne    c0017fc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017fb8:	fe ca                	dec    dl
c0017fba:	75 4f                	jne    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fbc:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017fc1:	c3                   	ret    
c0017fc2:	80 f9 0f             	cmp    cl,0xf
c0017fc5:	75 44                	jne    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fc7:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017fcc:	80 fa 02             	cmp    dl,0x2
c0017fcf:	76 3a                	jbe    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fd1:	8d 42 fd             	lea    eax,[edx-0x3]
c0017fd4:	3c 01                	cmp    al,0x1
c0017fd6:	76 0a                	jbe    c0017fe2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017fd8:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017fdd:	80 fa 06             	cmp    dl,0x6
c0017fe0:	75 29                	jne    c001800b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fe2:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017fe7:	c3                   	ret    
c0017fe8:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017fed:	c3                   	ret    
c0017fee:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017ff3:	c3                   	ret    
c0017ff4:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017ff9:	c3                   	ret    
c0017ffa:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017fff:	c3                   	ret    
c0018000:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0018005:	c3                   	ret    
c0018006:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c001800b:	c3                   	ret    

c001800c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001800c:	60                   	pusha  
c001800d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018019:	9c                   	pushf  
c001801a:	fa                   	cli    
c001801b:	0f 09                	wbinvd 
c001801d:	0f 30                	wrmsr  
c001801f:	9d                   	popf   
c0018020:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018024:	89 02                	mov    DWORD PTR [edx],eax
c0018026:	61                   	popa   
c0018027:	c3                   	ret    

c0018028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018028:	60                   	pusha  
c0018029:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001802d:	9c                   	pushf  
c001802e:	fa                   	cli    
c001802f:	0f 09                	wbinvd 
c0018031:	31 c0                	xor    eax,eax
c0018033:	31 d2                	xor    edx,edx
c0018035:	0f 32                	rdmsr  
c0018037:	9d                   	popf   
c0018038:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001803c:	89 02                	mov    DWORD PTR [edx],eax
c001803e:	61                   	popa   
c001803f:	c3                   	ret    

c0018040 <CPU::AMD_K6_writeback(int, int, int)>:
c0018040:	56                   	push   esi
c0018041:	53                   	push   ebx
c0018042:	83 ec 10             	sub    esp,0x10
c0018045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018049:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001804e:	75 5d                	jne    c00180ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018050:	83 f8 08             	cmp    eax,0x8
c0018053:	75 09                	jne    c001805e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018055:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001805a:	7e 13                	jle    c001806f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001805c:	eb 30                	jmp    c001808e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001805e:	83 f8 06             	cmp    eax,0x6
c0018061:	7c 4a                	jl     c00180ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018063:	83 f8 07             	cmp    eax,0x7
c0018066:	7e 07                	jle    c001806f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018068:	83 f8 09             	cmp    eax,0x9
c001806b:	74 21                	je     c001808e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001806d:	eb 3e                	jmp    c00180ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001806f:	89 e6                	mov    esi,esp
c0018071:	8b 1d a4 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9a4
c0018077:	56                   	push   esi
c0018078:	c1 eb 15             	shr    ebx,0x15
c001807b:	68 82 00 00 c0       	push   0xc0000082
c0018080:	83 e3 7e             	and    ebx,0x7e
c0018083:	e8 a0 ff ff ff       	call   c0018028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018088:	56                   	push   esi
c0018089:	6a 00                	push   0x0
c001808b:	53                   	push   ebx
c001808c:	eb 12                	jmp    c00180a0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001808e:	89 e3                	mov    ebx,esp
c0018090:	53                   	push   ebx
c0018091:	68 82 00 00 c0       	push   0xc0000082
c0018096:	e8 8d ff ff ff       	call   c0018028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001809b:	53                   	push   ebx
c001809c:	6a 00                	push   0x0
c001809e:	6a 00                	push   0x0
c00180a0:	68 82 00 00 c0       	push   0xc0000082
c00180a5:	e8 62 ff ff ff       	call   c001800c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00180aa:	83 c4 18             	add    esp,0x18
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	5b                   	pop    ebx
c00180b1:	5e                   	pop    esi
c00180b2:	c3                   	ret    
c00180b3:	90                   	nop

c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00180b4:	55                   	push   ebp
c00180b5:	57                   	push   edi
c00180b6:	56                   	push   esi
c00180b7:	53                   	push   ebx
c00180b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180c0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180c4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180c8:	39 05 80 be 02 c0    	cmp    DWORD PTR ds:0xc002be80,eax
c00180ce:	75 23                	jne    c00180f3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180d0:	a1 8c d4 02 c0       	mov    eax,ds:0xc002d48c
c00180d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180d9:	89 06                	mov    DWORD PTR [esi],eax
c00180db:	a1 88 d4 02 c0       	mov    eax,ds:0xc002d488
c00180e0:	89 07                	mov    DWORD PTR [edi],eax
c00180e2:	a1 84 d4 02 c0       	mov    eax,ds:0xc002d484
c00180e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180ea:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c00180ef:	89 02                	mov    DWORD PTR [edx],eax
c00180f1:	eb 3f                	jmp    c0018132 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180f3:	31 c9                	xor    ecx,ecx
c00180f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180f9:	0f a2                	cpuid  
c00180fb:	89 06                	mov    DWORD PTR [esi],eax
c00180fd:	89 1f                	mov    DWORD PTR [edi],ebx
c00180ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018103:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018106:	89 10                	mov    DWORD PTR [eax],edx
c0018108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001810c:	a3 80 be 02 c0       	mov    ds:0xc002be80,eax
c0018111:	8b 06                	mov    eax,DWORD PTR [esi]
c0018113:	a3 8c d4 02 c0       	mov    ds:0xc002d48c,eax
c0018118:	8b 07                	mov    eax,DWORD PTR [edi]
c001811a:	a3 88 d4 02 c0       	mov    ds:0xc002d488,eax
c001811f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018122:	a3 84 d4 02 c0       	mov    ds:0xc002d484,eax
c0018127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001812b:	8b 00                	mov    eax,DWORD PTR [eax]
c001812d:	a3 80 d4 02 c0       	mov    ds:0xc002d480,eax
c0018132:	5b                   	pop    ebx
c0018133:	5e                   	pop    esi
c0018134:	5f                   	pop    edi
c0018135:	5d                   	pop    ebp
c0018136:	c3                   	ret    
c0018137:	90                   	nop

c0018138 <CPU::cpuidCheckEDX(unsigned int)>:
c0018138:	83 ec 10             	sub    esp,0x10
c001813b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001813f:	50                   	push   eax
c0018140:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018144:	50                   	push   eax
c0018145:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018149:	50                   	push   eax
c001814a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001814e:	50                   	push   eax
c001814f:	6a 01                	push   0x1
c0018151:	e8 5e ff ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018156:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001815e:	0f 95 c0             	setne  al
c0018161:	83 c4 24             	add    esp,0x24
c0018164:	c3                   	ret    
c0018165:	90                   	nop

c0018166 <CPU::cpuidCheckECX(unsigned int)>:
c0018166:	83 ec 10             	sub    esp,0x10
c0018169:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001816d:	50                   	push   eax
c001816e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018172:	50                   	push   eax
c0018173:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018177:	50                   	push   eax
c0018178:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817c:	50                   	push   eax
c001817d:	6a 01                	push   0x1
c001817f:	e8 30 ff ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018188:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001818c:	0f 95 c0             	setne  al
c001818f:	83 c4 24             	add    esp,0x24
c0018192:	c3                   	ret    
c0018193:	90                   	nop

c0018194 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018194:	83 ec 10             	sub    esp,0x10
c0018197:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001819b:	50                   	push   eax
c001819c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a0:	50                   	push   eax
c00181a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a5:	50                   	push   eax
c00181a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181aa:	50                   	push   eax
c00181ab:	6a 07                	push   0x7
c00181ad:	e8 02 ff ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00181ba:	0f 95 c0             	setne  al
c00181bd:	83 c4 24             	add    esp,0x24
c00181c0:	c3                   	ret    
c00181c1:	90                   	nop

c00181c2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181c2:	83 ec 10             	sub    esp,0x10
c00181c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c9:	50                   	push   eax
c00181ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181ce:	50                   	push   eax
c00181cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d3:	50                   	push   eax
c00181d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d8:	50                   	push   eax
c00181d9:	6a 07                	push   0x7
c00181db:	e8 d4 fe ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181e8:	0f 95 c0             	setne  al
c00181eb:	83 c4 24             	add    esp,0x24
c00181ee:	c3                   	ret    
c00181ef:	90                   	nop

c00181f0 <CPU::CPU()>:
c00181f0:	83 ec 0c             	sub    esp,0xc
c00181f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f7:	83 ec 08             	sub    esp,0x8
c00181fa:	68 9e a0 02 c0       	push   0xc002a09e
c00181ff:	50                   	push   eax
c0018200:	e8 6f bb ff ff       	call   c0013d74 <Device::Device(char const*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c001820d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018211:	89 10                	mov    DWORD PTR [eax],edx
c0018213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018217:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018225:	05 78 01 00 00       	add    eax,0x178
c001822a:	83 ec 0c             	sub    esp,0xc
c001822d:	50                   	push   eax
c001822e:	e8 b9 6a ff ff       	call   c000ecec <GDT::GDT()>
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823a:	05 7c 09 00 00       	add    eax,0x97c
c001823f:	83 ec 0c             	sub    esp,0xc
c0018242:	50                   	push   eax
c0018243:	e8 06 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824f:	05 7c 11 00 00       	add    eax,0x117c
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	50                   	push   eax
c0018258:	e8 79 8e ff ff       	call   c00110d6 <TSS::TSS()>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018264:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001826b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018279:	90                   	nop
c001827a:	83 c4 0c             	add    esp,0xc
c001827d:	c3                   	ret    

c001827e <CPU::displayFeatures()>:
c001827e:	53                   	push   ebx
c001827f:	83 ec 10             	sub    esp,0x10
c0018282:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018286:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001828c:	68 ac 9d 02 c0       	push   0xc0029dac
c0018291:	e8 ff a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018296:	59                   	pop    ecx
c0018297:	58                   	pop    eax
c0018298:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001829e:	50                   	push   eax
c001829f:	68 bd 9d 02 c0       	push   0xc0029dbd
c00182a4:	e8 ec a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00182a9:	58                   	pop    eax
c00182aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182b0:	5a                   	pop    edx
c00182b1:	c1 e8 0e             	shr    eax,0xe
c00182b4:	0f b6 c0             	movzx  eax,al
c00182b7:	50                   	push   eax
c00182b8:	68 ce 9d 02 c0       	push   0xc0029dce
c00182bd:	e8 d3 a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00182c2:	59                   	pop    ecx
c00182c3:	58                   	pop    eax
c00182c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ca:	66 c1 e8 06          	shr    ax,0x6
c00182ce:	0f b6 c0             	movzx  eax,al
c00182d1:	50                   	push   eax
c00182d2:	68 df 9d 02 c0       	push   0xc0029ddf
c00182d7:	e8 b9 a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00182dc:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c00182e3:	e8 ad a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00182f0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182f7:	74 05                	je     c00182fe <CPU::displayFeatures()+0x80>
c00182f9:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00182fe:	52                   	push   edx
c00182ff:	52                   	push   edx
c0018300:	50                   	push   eax
c0018301:	68 f0 9d 02 c0       	push   0xc0029df0
c0018306:	e8 8a a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018313:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001831a:	78 05                	js     c0018321 <CPU::displayFeatures()+0xa3>
c001831c:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018321:	51                   	push   ecx
c0018322:	51                   	push   ecx
c0018323:	50                   	push   eax
c0018324:	68 07 9e 02 c0       	push   0xc0029e07
c0018329:	e8 67 a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018336:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001833d:	75 05                	jne    c0018344 <CPU::displayFeatures()+0xc6>
c001833f:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018344:	52                   	push   edx
c0018345:	52                   	push   edx
c0018346:	50                   	push   eax
c0018347:	68 1e 9e 02 c0       	push   0xc0029e1e
c001834c:	e8 44 a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018359:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018360:	75 05                	jne    c0018367 <CPU::displayFeatures()+0xe9>
c0018362:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018367:	51                   	push   ecx
c0018368:	51                   	push   ecx
c0018369:	50                   	push   eax
c001836a:	68 35 9e 02 c0       	push   0xc0029e35
c001836f:	e8 21 a4 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001837c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018383:	75 05                	jne    c001838a <CPU::displayFeatures()+0x10c>
c0018385:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001838a:	52                   	push   edx
c001838b:	52                   	push   edx
c001838c:	50                   	push   eax
c001838d:	68 4c 9e 02 c0       	push   0xc0029e4c
c0018392:	e8 fe a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001839f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00183a6:	75 05                	jne    c00183ad <CPU::displayFeatures()+0x12f>
c00183a8:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183ad:	51                   	push   ecx
c00183ae:	51                   	push   ecx
c00183af:	50                   	push   eax
c00183b0:	68 63 9e 02 c0       	push   0xc0029e63
c00183b5:	e8 db a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00183c2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183c9:	75 05                	jne    c00183d0 <CPU::displayFeatures()+0x152>
c00183cb:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183d0:	52                   	push   edx
c00183d1:	52                   	push   edx
c00183d2:	50                   	push   eax
c00183d3:	68 7a 9e 02 c0       	push   0xc0029e7a
c00183d8:	e8 b8 a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00183dd:	83 c4 10             	add    esp,0x10
c00183e0:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00183e5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183ec:	75 05                	jne    c00183f3 <CPU::displayFeatures()+0x175>
c00183ee:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183f3:	51                   	push   ecx
c00183f4:	51                   	push   ecx
c00183f5:	50                   	push   eax
c00183f6:	68 91 9e 02 c0       	push   0xc0029e91
c00183fb:	e8 95 a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018408:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001840f:	75 05                	jne    c0018416 <CPU::displayFeatures()+0x198>
c0018411:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018416:	52                   	push   edx
c0018417:	52                   	push   edx
c0018418:	50                   	push   eax
c0018419:	68 a8 9e 02 c0       	push   0xc0029ea8
c001841e:	e8 72 a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001842b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018432:	75 05                	jne    c0018439 <CPU::displayFeatures()+0x1bb>
c0018434:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018439:	51                   	push   ecx
c001843a:	51                   	push   ecx
c001843b:	50                   	push   eax
c001843c:	68 bf 9e 02 c0       	push   0xc0029ebf
c0018441:	e8 4f a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001844e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018455:	75 05                	jne    c001845c <CPU::displayFeatures()+0x1de>
c0018457:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001845c:	52                   	push   edx
c001845d:	52                   	push   edx
c001845e:	50                   	push   eax
c001845f:	68 d6 9e 02 c0       	push   0xc0029ed6
c0018464:	e8 2c a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0018469:	83 c4 10             	add    esp,0x10
c001846c:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018471:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018478:	75 05                	jne    c001847f <CPU::displayFeatures()+0x201>
c001847a:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001847f:	51                   	push   ecx
c0018480:	51                   	push   ecx
c0018481:	50                   	push   eax
c0018482:	68 ed 9e 02 c0       	push   0xc0029eed
c0018487:	e8 09 a3 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018494:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001849b:	75 05                	jne    c00184a2 <CPU::displayFeatures()+0x224>
c001849d:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00184a2:	52                   	push   edx
c00184a3:	52                   	push   edx
c00184a4:	50                   	push   eax
c00184a5:	68 04 9f 02 c0       	push   0xc0029f04
c00184aa:	e8 e6 a2 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00184b7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184be:	78 05                	js     c00184c5 <CPU::displayFeatures()+0x247>
c00184c0:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00184c5:	51                   	push   ecx
c00184c6:	51                   	push   ecx
c00184c7:	50                   	push   eax
c00184c8:	68 1b 9f 02 c0       	push   0xc0029f1b
c00184cd:	e8 c3 a2 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00184da:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00184e1:	75 05                	jne    c00184e8 <CPU::displayFeatures()+0x26a>
c00184e3:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00184e8:	52                   	push   edx
c00184e9:	52                   	push   edx
c00184ea:	50                   	push   eax
c00184eb:	68 32 9f 02 c0       	push   0xc0029f32
c00184f0:	e8 a0 a2 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00184f5:	83 c4 18             	add    esp,0x18
c00184f8:	5b                   	pop    ebx
c00184f9:	c3                   	ret    

c00184fa <CPU::detectFeatures()>:
c00184fa:	55                   	push   ebp
c00184fb:	57                   	push   edi
c00184fc:	56                   	push   esi
c00184fd:	53                   	push   ebx
c00184fe:	83 ec 50             	sub    esp,0x50
c0018501:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018505:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001850f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018516:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001851c:	6a 0d                	push   0xd
c001851e:	6a 00                	push   0x0
c0018520:	57                   	push   edi
c0018521:	e8 65 81 fe ff       	call   c000068b <memset>
c0018526:	83 c4 10             	add    esp,0x10
c0018529:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001852e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018535:	0f 84 20 09 00 00    	je     c0018e5b <CPU::detectFeatures()+0x961>
c001853b:	83 ec 0c             	sub    esp,0xc
c001853e:	6a 10                	push   0x10
c0018540:	e8 f3 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c0018545:	83 e0 01             	and    eax,0x1
c0018548:	8d 14 00             	lea    edx,[eax+eax*1]
c001854b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018551:	83 e0 fd             	and    eax,0xfffffffd
c0018554:	09 d0                	or     eax,edx
c0018556:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001855c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018563:	e8 d0 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c0018568:	83 e0 01             	and    eax,0x1
c001856b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018572:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018578:	83 e0 fb             	and    eax,0xfffffffb
c001857b:	09 d0                	or     eax,edx
c001857d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018583:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001858a:	e8 a9 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c001858f:	83 e0 01             	and    eax,0x1
c0018592:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018599:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001859f:	83 e0 f7             	and    eax,0xfffffff7
c00185a2:	09 d0                	or     eax,edx
c00185a4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185aa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00185b1:	e8 82 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c00185b6:	83 e0 01             	and    eax,0x1
c00185b9:	c1 e0 04             	shl    eax,0x4
c00185bc:	88 c2                	mov    dl,al
c00185be:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185c4:	83 e0 ef             	and    eax,0xffffffef
c00185c7:	09 d0                	or     eax,edx
c00185c9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185cf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185d6:	e8 5d fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c00185db:	83 e0 01             	and    eax,0x1
c00185de:	c1 e0 05             	shl    eax,0x5
c00185e1:	88 c2                	mov    dl,al
c00185e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185e9:	83 e0 df             	and    eax,0xffffffdf
c00185ec:	09 d0                	or     eax,edx
c00185ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185fb:	e8 38 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c0018600:	83 e0 01             	and    eax,0x1
c0018603:	8d 14 00             	lea    edx,[eax+eax*1]
c0018606:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001860c:	83 e0 fd             	and    eax,0xfffffffd
c001860f:	09 d0                	or     eax,edx
c0018611:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018617:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001861e:	e8 15 fb ff ff       	call   c0018138 <CPU::cpuidCheckEDX(unsigned int)>
c0018623:	83 e0 01             	and    eax,0x1
c0018626:	c1 e0 06             	shl    eax,0x6
c0018629:	88 c2                	mov    dl,al
c001862b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018631:	83 e0 bf             	and    eax,0xffffffbf
c0018634:	09 d0                	or     eax,edx
c0018636:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001863c:	58                   	pop    eax
c001863d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018641:	56                   	push   esi
c0018642:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018646:	55                   	push   ebp
c0018647:	8d 44 24 28          	lea    eax,[esp+0x28]
c001864b:	50                   	push   eax
c001864c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018650:	52                   	push   edx
c0018651:	6a 00                	push   0x0
c0018653:	e8 5c fa ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018658:	83 c4 1c             	add    esp,0x1c
c001865b:	6a 04                	push   0x4
c001865d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018661:	50                   	push   eax
c0018662:	57                   	push   edi
c0018663:	e8 ed 7f fe ff       	call   c0000655 <memcpy>
c0018668:	83 c4 0c             	add    esp,0xc
c001866b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018671:	6a 04                	push   0x4
c0018673:	56                   	push   esi
c0018674:	50                   	push   eax
c0018675:	e8 db 7f fe ff       	call   c0000655 <memcpy>
c001867a:	83 c4 0c             	add    esp,0xc
c001867d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018683:	6a 04                	push   0x4
c0018685:	55                   	push   ebp
c0018686:	50                   	push   eax
c0018687:	e8 c9 7f fe ff       	call   c0000655 <memcpy>
c001868c:	58                   	pop    eax
c001868d:	5a                   	pop    edx
c001868e:	68 49 9f 02 c0       	push   0xc0029f49
c0018693:	57                   	push   edi
c0018694:	e8 e2 80 fe ff       	call   c000077b <strcmp>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	85 c0                	test   eax,eax
c001869e:	75 0f                	jne    c00186af <CPU::detectFeatures()+0x1b5>
c00186a0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00186aa:	e9 22 02 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c00186af:	50                   	push   eax
c00186b0:	50                   	push   eax
c00186b1:	68 56 9f 02 c0       	push   0xc0029f56
c00186b6:	57                   	push   edi
c00186b7:	e8 bf 80 fe ff       	call   c000077b <strcmp>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	85 c0                	test   eax,eax
c00186c1:	74 dd                	je     c00186a0 <CPU::detectFeatures()+0x1a6>
c00186c3:	51                   	push   ecx
c00186c4:	51                   	push   ecx
c00186c5:	68 63 9f 02 c0       	push   0xc0029f63
c00186ca:	57                   	push   edi
c00186cb:	e8 ab 80 fe ff       	call   c000077b <strcmp>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	85 c0                	test   eax,eax
c00186d5:	74 2a                	je     c0018701 <CPU::detectFeatures()+0x207>
c00186d7:	52                   	push   edx
c00186d8:	52                   	push   edx
c00186d9:	68 70 9f 02 c0       	push   0xc0029f70
c00186de:	57                   	push   edi
c00186df:	e8 97 80 fe ff       	call   c000077b <strcmp>
c00186e4:	83 c4 10             	add    esp,0x10
c00186e7:	85 c0                	test   eax,eax
c00186e9:	74 16                	je     c0018701 <CPU::detectFeatures()+0x207>
c00186eb:	50                   	push   eax
c00186ec:	50                   	push   eax
c00186ed:	68 7d 9f 02 c0       	push   0xc0029f7d
c00186f2:	57                   	push   edi
c00186f3:	e8 83 80 fe ff       	call   c000077b <strcmp>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	85 c0                	test   eax,eax
c00186fd:	74 48                	je     c0018747 <CPU::detectFeatures()+0x24d>
c00186ff:	eb 0f                	jmp    c0018710 <CPU::detectFeatures()+0x216>
c0018701:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001870b:	e9 c1 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018710:	50                   	push   eax
c0018711:	50                   	push   eax
c0018712:	68 8a 9f 02 c0       	push   0xc0029f8a
c0018717:	57                   	push   edi
c0018718:	e8 5e 80 fe ff       	call   c000077b <strcmp>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	85 c0                	test   eax,eax
c0018722:	74 23                	je     c0018747 <CPU::detectFeatures()+0x24d>
c0018724:	50                   	push   eax
c0018725:	50                   	push   eax
c0018726:	68 97 9f 02 c0       	push   0xc0029f97
c001872b:	57                   	push   edi
c001872c:	e8 4a 80 fe ff       	call   c000077b <strcmp>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	85 c0                	test   eax,eax
c0018736:	75 1e                	jne    c0018756 <CPU::detectFeatures()+0x25c>
c0018738:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018742:	e9 8a 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018747:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018751:	e9 7b 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018756:	50                   	push   eax
c0018757:	50                   	push   eax
c0018758:	68 a4 9f 02 c0       	push   0xc0029fa4
c001875d:	57                   	push   edi
c001875e:	e8 18 80 fe ff       	call   c000077b <strcmp>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	85 c0                	test   eax,eax
c0018768:	75 0f                	jne    c0018779 <CPU::detectFeatures()+0x27f>
c001876a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018774:	e9 58 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018779:	50                   	push   eax
c001877a:	50                   	push   eax
c001877b:	68 63 9f 02 c0       	push   0xc0029f63
c0018780:	57                   	push   edi
c0018781:	e8 f5 7f fe ff       	call   c000077b <strcmp>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	85 c0                	test   eax,eax
c001878b:	75 0f                	jne    c001879c <CPU::detectFeatures()+0x2a2>
c001878d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018797:	e9 35 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c001879c:	50                   	push   eax
c001879d:	50                   	push   eax
c001879e:	68 b1 9f 02 c0       	push   0xc0029fb1
c00187a3:	57                   	push   edi
c00187a4:	e8 d2 7f fe ff       	call   c000077b <strcmp>
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	85 c0                	test   eax,eax
c00187ae:	75 0f                	jne    c00187bf <CPU::detectFeatures()+0x2c5>
c00187b0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00187ba:	e9 12 01 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c00187bf:	51                   	push   ecx
c00187c0:	51                   	push   ecx
c00187c1:	68 be 9f 02 c0       	push   0xc0029fbe
c00187c6:	57                   	push   edi
c00187c7:	e8 af 7f fe ff       	call   c000077b <strcmp>
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	85 c0                	test   eax,eax
c00187d1:	75 0f                	jne    c00187e2 <CPU::detectFeatures()+0x2e8>
c00187d3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187dd:	e9 ef 00 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c00187e2:	52                   	push   edx
c00187e3:	52                   	push   edx
c00187e4:	68 cb 9f 02 c0       	push   0xc0029fcb
c00187e9:	57                   	push   edi
c00187ea:	e8 8c 7f fe ff       	call   c000077b <strcmp>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	85 c0                	test   eax,eax
c00187f4:	75 0f                	jne    c0018805 <CPU::detectFeatures()+0x30b>
c00187f6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018800:	e9 cc 00 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018805:	50                   	push   eax
c0018806:	50                   	push   eax
c0018807:	68 d8 9f 02 c0       	push   0xc0029fd8
c001880c:	57                   	push   edi
c001880d:	e8 69 7f fe ff       	call   c000077b <strcmp>
c0018812:	83 c4 10             	add    esp,0x10
c0018815:	85 c0                	test   eax,eax
c0018817:	75 0f                	jne    c0018828 <CPU::detectFeatures()+0x32e>
c0018819:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018823:	e9 a9 00 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c0018828:	50                   	push   eax
c0018829:	50                   	push   eax
c001882a:	68 e5 9f 02 c0       	push   0xc0029fe5
c001882f:	57                   	push   edi
c0018830:	e8 46 7f fe ff       	call   c000077b <strcmp>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	85 c0                	test   eax,eax
c001883a:	75 0f                	jne    c001884b <CPU::detectFeatures()+0x351>
c001883c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018846:	e9 86 00 00 00       	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c001884b:	50                   	push   eax
c001884c:	50                   	push   eax
c001884d:	68 f2 9f 02 c0       	push   0xc0029ff2
c0018852:	57                   	push   edi
c0018853:	e8 23 7f fe ff       	call   c000077b <strcmp>
c0018858:	83 c4 10             	add    esp,0x10
c001885b:	85 c0                	test   eax,eax
c001885d:	75 0c                	jne    c001886b <CPU::detectFeatures()+0x371>
c001885f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018869:	eb 66                	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c001886b:	50                   	push   eax
c001886c:	50                   	push   eax
c001886d:	68 ff 9f 02 c0       	push   0xc0029fff
c0018872:	57                   	push   edi
c0018873:	e8 03 7f fe ff       	call   c000077b <strcmp>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	85 c0                	test   eax,eax
c001887d:	75 0c                	jne    c001888b <CPU::detectFeatures()+0x391>
c001887f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018889:	eb 46                	jmp    c00188d1 <CPU::detectFeatures()+0x3d7>
c001888b:	50                   	push   eax
c001888c:	50                   	push   eax
c001888d:	68 0c a0 02 c0       	push   0xc002a00c
c0018892:	57                   	push   edi
c0018893:	e8 e3 7e fe ff       	call   c000077b <strcmp>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	85 c0                	test   eax,eax
c001889d:	74 e0                	je     c001887f <CPU::detectFeatures()+0x385>
c001889f:	50                   	push   eax
c00188a0:	50                   	push   eax
c00188a1:	68 19 a0 02 c0       	push   0xc002a019
c00188a6:	57                   	push   edi
c00188a7:	e8 cf 7e fe ff       	call   c000077b <strcmp>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	85 c0                	test   eax,eax
c00188b1:	74 cc                	je     c001887f <CPU::detectFeatures()+0x385>
c00188b3:	51                   	push   ecx
c00188b4:	51                   	push   ecx
c00188b5:	68 26 a0 02 c0       	push   0xc002a026
c00188ba:	57                   	push   edi
c00188bb:	e8 bb 7e fe ff       	call   c000077b <strcmp>
c00188c0:	83 c4 10             	add    esp,0x10
c00188c3:	85 c0                	test   eax,eax
c00188c5:	74 b8                	je     c001887f <CPU::detectFeatures()+0x385>
c00188c7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188d1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188d6:	0f 86 be 00 00 00    	jbe    c001899a <CPU::detectFeatures()+0x4a0>
c00188dc:	83 ec 0c             	sub    esp,0xc
c00188df:	68 80 00 00 00       	push   0x80
c00188e4:	e8 ab f8 ff ff       	call   c0018194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188e9:	83 e0 01             	and    eax,0x1
c00188ec:	c1 e0 06             	shl    eax,0x6
c00188ef:	88 c2                	mov    dl,al
c00188f1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188f7:	83 e0 bf             	and    eax,0xffffffbf
c00188fa:	09 d0                	or     eax,edx
c00188fc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018902:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018909:	e8 86 f8 ff ff       	call   c0018194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001890e:	83 e0 01             	and    eax,0x1
c0018911:	c1 e0 04             	shl    eax,0x4
c0018914:	88 c2                	mov    dl,al
c0018916:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001891c:	83 e0 ef             	and    eax,0xffffffef
c001891f:	09 d0                	or     eax,edx
c0018921:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018927:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001892e:	e8 61 f8 ff ff       	call   c0018194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018933:	c1 e0 07             	shl    eax,0x7
c0018936:	88 c2                	mov    dl,al
c0018938:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001893e:	83 e0 7f             	and    eax,0x7f
c0018941:	09 d0                	or     eax,edx
c0018943:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018949:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018950:	e8 6d f8 ff ff       	call   c00181c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018955:	83 e0 01             	and    eax,0x1
c0018958:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001895f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018965:	83 e0 f7             	and    eax,0xfffffff7
c0018968:	09 d0                	or     eax,edx
c001896a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018970:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018977:	e8 46 f8 ff ff       	call   c00181c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001897c:	83 c4 10             	add    esp,0x10
c001897f:	83 e0 01             	and    eax,0x1
c0018982:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018989:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001898f:	83 e0 fb             	and    eax,0xfffffffb
c0018992:	09 d0                	or     eax,edx
c0018994:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001899a:	83 ec 0c             	sub    esp,0xc
c001899d:	56                   	push   esi
c001899e:	55                   	push   ebp
c001899f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00189a3:	57                   	push   edi
c00189a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189a8:	50                   	push   eax
c00189a9:	6a 01                	push   0x1
c00189ab:	e8 04 f7 ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00189b4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189ba:	88 ca                	mov    dl,cl
c00189bc:	83 e0 f0             	and    eax,0xfffffff0
c00189bf:	83 e2 0f             	and    edx,0xf
c00189c2:	09 d0                	or     eax,edx
c00189c4:	88 ca                	mov    dl,cl
c00189c6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189cc:	c0 ea 04             	shr    dl,0x4
c00189cf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189d3:	0f b6 c2             	movzx  eax,dl
c00189d6:	83 c4 20             	add    esp,0x20
c00189d9:	c1 e0 06             	shl    eax,0x6
c00189dc:	89 c5                	mov    ebp,eax
c00189de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189e4:	66 25 3f c0          	and    ax,0xc03f
c00189e8:	09 e8                	or     eax,ebp
c00189ea:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189f1:	89 c8                	mov    eax,ecx
c00189f3:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189f9:	c1 e8 08             	shr    eax,0x8
c00189fc:	83 e2 3f             	and    edx,0x3f
c00189ff:	83 e0 0f             	and    eax,0xf
c0018a02:	89 c5                	mov    ebp,eax
c0018a04:	c1 e5 06             	shl    ebp,0x6
c0018a07:	09 d5                	or     ebp,edx
c0018a09:	89 ea                	mov    edx,ebp
c0018a0b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018a11:	88 c2                	mov    dl,al
c0018a13:	c0 ea 02             	shr    dl,0x2
c0018a16:	89 d5                	mov    ebp,edx
c0018a18:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a1e:	83 e2 c0             	and    edx,0xffffffc0
c0018a21:	09 d5                	or     ebp,edx
c0018a23:	89 ea                	mov    edx,ebp
c0018a25:	89 cd                	mov    ebp,ecx
c0018a27:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a2d:	c1 ed 0c             	shr    ebp,0xc
c0018a30:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a36:	83 e5 03             	and    ebp,0x3
c0018a39:	83 e2 cf             	and    edx,0xffffffcf
c0018a3c:	c1 e5 04             	shl    ebp,0x4
c0018a3f:	09 d5                	or     ebp,edx
c0018a41:	3c 06                	cmp    al,0x6
c0018a43:	89 ea                	mov    edx,ebp
c0018a45:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a4b:	74 04                	je     c0018a51 <CPU::detectFeatures()+0x557>
c0018a4d:	3c 0f                	cmp    al,0xf
c0018a4f:	75 5c                	jne    c0018aad <CPU::detectFeatures()+0x5b3>
c0018a51:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a55:	89 cd                	mov    ebp,ecx
c0018a57:	c1 ed 10             	shr    ebp,0x10
c0018a5a:	c1 e5 04             	shl    ebp,0x4
c0018a5d:	09 ea                	or     edx,ebp
c0018a5f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a65:	0f b6 d2             	movzx  edx,dl
c0018a68:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a6d:	c1 e2 06             	shl    edx,0x6
c0018a70:	09 ea                	or     edx,ebp
c0018a72:	3c 0f                	cmp    al,0xf
c0018a74:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a7b:	75 30                	jne    c0018aad <CPU::detectFeatures()+0x5b3>
c0018a7d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a83:	c1 e9 14             	shr    ecx,0x14
c0018a86:	83 e0 3f             	and    eax,0x3f
c0018a89:	83 c1 0f             	add    ecx,0xf
c0018a8c:	88 ca                	mov    dl,cl
c0018a8e:	c0 e9 02             	shr    cl,0x2
c0018a91:	c1 e2 06             	shl    edx,0x6
c0018a94:	09 d0                	or     eax,edx
c0018a96:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a9c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018aa2:	83 e0 c0             	and    eax,0xffffffc0
c0018aa5:	09 c1                	or     ecx,eax
c0018aa7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018aad:	83 ec 0c             	sub    esp,0xc
c0018ab0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ab7:	56                   	push   esi
c0018ab8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018abc:	50                   	push   eax
c0018abd:	57                   	push   edi
c0018abe:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ac2:	55                   	push   ebp
c0018ac3:	68 00 00 00 80       	push   0x80000000
c0018ac8:	e8 e7 f5 ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018acd:	83 c4 20             	add    esp,0x20
c0018ad0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018ad8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018adc:	76 1e                	jbe    c0018afc <CPU::detectFeatures()+0x602>
c0018ade:	83 ec 0c             	sub    esp,0xc
c0018ae1:	56                   	push   esi
c0018ae2:	50                   	push   eax
c0018ae3:	57                   	push   edi
c0018ae4:	55                   	push   ebp
c0018ae5:	68 01 00 00 80       	push   0x80000001
c0018aea:	e8 c5 f5 ff ff       	call   c00180b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aef:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018af9:	83 c4 20             	add    esp,0x20
c0018afc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018b02:	83 f8 01             	cmp    eax,0x1
c0018b05:	75 6f                	jne    c0018b76 <CPU::detectFeatures()+0x67c>
c0018b07:	51                   	push   ecx
c0018b08:	51                   	push   ecx
c0018b09:	68 32 a0 02 c0       	push   0xc002a032
c0018b0e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b12:	56                   	push   esi
c0018b13:	e8 12 7c fe ff       	call   c000072a <strcpy>
c0018b18:	5f                   	pop    edi
c0018b19:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b1f:	5d                   	pop    ebp
c0018b20:	66 c1 e8 06          	shr    ax,0x6
c0018b24:	0f b6 c0             	movzx  eax,al
c0018b27:	50                   	push   eax
c0018b28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b2e:	c1 e8 0e             	shr    eax,0xe
c0018b31:	0f b6 c0             	movzx  eax,al
c0018b34:	50                   	push   eax
c0018b35:	e8 24 f2 ff ff       	call   c0017d5e <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b3a:	5a                   	pop    edx
c0018b3b:	59                   	pop    ecx
c0018b3c:	50                   	push   eax
c0018b3d:	56                   	push   esi
c0018b3e:	e8 9e 7c fe ff       	call   c00007e1 <strcat>
c0018b43:	5f                   	pop    edi
c0018b44:	5d                   	pop    ebp
c0018b45:	56                   	push   esi
c0018b46:	53                   	push   ebx
c0018b47:	e8 1a b2 ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018b4c:	58                   	pop    eax
c0018b4d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b53:	5a                   	pop    edx
c0018b54:	68 39 a0 02 c0       	push   0xc002a039
c0018b59:	50                   	push   eax
c0018b5a:	e8 1c 7c fe ff       	call   c000077b <strcmp>
c0018b5f:	83 c4 10             	add    esp,0x10
c0018b62:	85 c0                	test   eax,eax
c0018b64:	0f 85 71 03 00 00    	jne    c0018edb <CPU::detectFeatures()+0x9e1>
c0018b6a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b71:	e9 65 03 00 00       	jmp    c0018edb <CPU::detectFeatures()+0x9e1>
c0018b76:	83 f8 02             	cmp    eax,0x2
c0018b79:	0f 85 b5 00 00 00    	jne    c0018c34 <CPU::detectFeatures()+0x73a>
c0018b7f:	57                   	push   edi
c0018b80:	57                   	push   edi
c0018b81:	68 4b a0 02 c0       	push   0xc002a04b
c0018b86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b8a:	56                   	push   esi
c0018b8b:	e8 9a 7b fe ff       	call   c000072a <strcpy>
c0018b90:	5d                   	pop    ebp
c0018b91:	58                   	pop    eax
c0018b92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b98:	66 c1 e8 06          	shr    ax,0x6
c0018b9c:	0f b6 c0             	movzx  eax,al
c0018b9f:	50                   	push   eax
c0018ba0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ba6:	c1 e8 0e             	shr    eax,0xe
c0018ba9:	0f b6 c0             	movzx  eax,al
c0018bac:	50                   	push   eax
c0018bad:	e8 18 f0 ff ff       	call   c0017bca <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018bb2:	5a                   	pop    edx
c0018bb3:	59                   	pop    ecx
c0018bb4:	50                   	push   eax
c0018bb5:	56                   	push   esi
c0018bb6:	e8 26 7c fe ff       	call   c00007e1 <strcat>
c0018bbb:	5f                   	pop    edi
c0018bbc:	5d                   	pop    ebp
c0018bbd:	56                   	push   esi
c0018bbe:	53                   	push   ebx
c0018bbf:	e8 a2 b1 ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018bc4:	58                   	pop    eax
c0018bc5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018bcb:	5a                   	pop    edx
c0018bcc:	68 50 a0 02 c0       	push   0xc002a050
c0018bd1:	50                   	push   eax
c0018bd2:	e8 a4 7b fe ff       	call   c000077b <strcmp>
c0018bd7:	83 c4 10             	add    esp,0x10
c0018bda:	85 c0                	test   eax,eax
c0018bdc:	75 20                	jne    c0018bfe <CPU::detectFeatures()+0x704>
c0018bde:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0018be4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018bea:	a8 01                	test   al,0x1
c0018bec:	74 10                	je     c0018bfe <CPU::detectFeatures()+0x704>
c0018bee:	83 e0 fe             	and    eax,0xfffffffe
c0018bf1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018bf7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018bfe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c04:	c1 e8 0e             	shr    eax,0xe
c0018c07:	3c 05                	cmp    al,0x5
c0018c09:	0f 85 cc 02 00 00    	jne    c0018edb <CPU::detectFeatures()+0x9e1>
c0018c0f:	56                   	push   esi
c0018c10:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c16:	83 e0 0f             	and    eax,0xf
c0018c19:	50                   	push   eax
c0018c1a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c20:	66 c1 e8 06          	shr    ax,0x6
c0018c24:	0f b6 c0             	movzx  eax,al
c0018c27:	50                   	push   eax
c0018c28:	6a 05                	push   0x5
c0018c2a:	e8 11 f4 ff ff       	call   c0018040 <CPU::AMD_K6_writeback(int, int, int)>
c0018c2f:	e9 1f 02 00 00       	jmp    c0018e53 <CPU::detectFeatures()+0x959>
c0018c34:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c37:	83 fa 01             	cmp    edx,0x1
c0018c3a:	76 09                	jbe    c0018c45 <CPU::detectFeatures()+0x74b>
c0018c3c:	83 f8 06             	cmp    eax,0x6
c0018c3f:	0f 85 91 01 00 00    	jne    c0018dd6 <CPU::detectFeatures()+0x8dc>
c0018c45:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c4b:	c1 ea 0e             	shr    edx,0xe
c0018c4e:	80 fa 05             	cmp    dl,0x5
c0018c51:	75 7b                	jne    c0018cce <CPU::detectFeatures()+0x7d4>
c0018c53:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c59:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c5e:	66 81 fa 00 01       	cmp    dx,0x100
c0018c63:	75 0c                	jne    c0018c71 <CPU::detectFeatures()+0x777>
c0018c65:	51                   	push   ecx
c0018c66:	51                   	push   ecx
c0018c67:	68 57 a0 02 c0       	push   0xc002a057
c0018c6c:	e9 dc 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018c71:	66 81 fa 00 02       	cmp    dx,0x200
c0018c76:	75 0c                	jne    c0018c84 <CPU::detectFeatures()+0x78a>
c0018c78:	52                   	push   edx
c0018c79:	52                   	push   edx
c0018c7a:	68 6a a0 02 c0       	push   0xc002a06a
c0018c7f:	e9 c9 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018c84:	66 81 fa 40 02       	cmp    dx,0x240
c0018c89:	75 0c                	jne    c0018c97 <CPU::detectFeatures()+0x79d>
c0018c8b:	50                   	push   eax
c0018c8c:	50                   	push   eax
c0018c8d:	68 7c a0 02 c0       	push   0xc002a07c
c0018c92:	e9 b6 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018c97:	83 f8 06             	cmp    eax,0x6
c0018c9a:	75 0c                	jne    c0018ca8 <CPU::detectFeatures()+0x7ae>
c0018c9c:	50                   	push   eax
c0018c9d:	50                   	push   eax
c0018c9e:	68 8e a0 02 c0       	push   0xc002a08e
c0018ca3:	e9 a5 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018ca8:	83 f8 04             	cmp    eax,0x4
c0018cab:	75 0c                	jne    c0018cb9 <CPU::detectFeatures()+0x7bf>
c0018cad:	50                   	push   eax
c0018cae:	50                   	push   eax
c0018caf:	68 9a a0 02 c0       	push   0xc002a09a
c0018cb4:	e9 94 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018cb9:	83 f8 03             	cmp    eax,0x3
c0018cbc:	0f 85 19 02 00 00    	jne    c0018edb <CPU::detectFeatures()+0x9e1>
c0018cc2:	50                   	push   eax
c0018cc3:	50                   	push   eax
c0018cc4:	68 a2 a0 02 c0       	push   0xc002a0a2
c0018cc9:	e9 7f 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018cce:	80 fa 06             	cmp    dl,0x6
c0018cd1:	0f 85 db 00 00 00    	jne    c0018db2 <CPU::detectFeatures()+0x8b8>
c0018cd7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cdd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ce2:	66 81 fa 80 01       	cmp    dx,0x180
c0018ce7:	75 0c                	jne    c0018cf5 <CPU::detectFeatures()+0x7fb>
c0018ce9:	50                   	push   eax
c0018cea:	50                   	push   eax
c0018ceb:	68 ad a0 02 c0       	push   0xc002a0ad
c0018cf0:	e9 58 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018cf5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018cfb:	66 f7 c1 80 ff       	test   cx,0xff80
c0018d00:	75 0c                	jne    c0018d0e <CPU::detectFeatures()+0x814>
c0018d02:	50                   	push   eax
c0018d03:	50                   	push   eax
c0018d04:	68 bd a0 02 c0       	push   0xc002a0bd
c0018d09:	e9 3f 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018d0e:	66 81 fa 40 02       	cmp    dx,0x240
c0018d13:	75 0c                	jne    c0018d21 <CPU::detectFeatures()+0x827>
c0018d15:	55                   	push   ebp
c0018d16:	55                   	push   ebp
c0018d17:	68 c4 a0 02 c0       	push   0xc002a0c4
c0018d1c:	e9 2c 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018d21:	66 81 fa 80 02       	cmp    dx,0x280
c0018d26:	75 0c                	jne    c0018d34 <CPU::detectFeatures()+0x83a>
c0018d28:	57                   	push   edi
c0018d29:	57                   	push   edi
c0018d2a:	68 cd a0 02 c0       	push   0xc002a0cd
c0018d2f:	e9 19 01 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018d34:	66 81 fa 40 03       	cmp    dx,0x340
c0018d39:	74 ed                	je     c0018d28 <CPU::detectFeatures()+0x82e>
c0018d3b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d40:	75 0c                	jne    c0018d4e <CPU::detectFeatures()+0x854>
c0018d42:	56                   	push   esi
c0018d43:	56                   	push   esi
c0018d44:	68 d4 a0 02 c0       	push   0xc002a0d4
c0018d49:	e9 ff 00 00 00       	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018d4e:	83 f8 06             	cmp    eax,0x6
c0018d51:	0f 84 45 ff ff ff    	je     c0018c9c <CPU::detectFeatures()+0x7a2>
c0018d57:	83 f8 04             	cmp    eax,0x4
c0018d5a:	0f 84 4d ff ff ff    	je     c0018cad <CPU::detectFeatures()+0x7b3>
c0018d60:	83 f8 03             	cmp    eax,0x3
c0018d63:	0f 85 72 01 00 00    	jne    c0018edb <CPU::detectFeatures()+0x9e1>
c0018d69:	51                   	push   ecx
c0018d6a:	51                   	push   ecx
c0018d6b:	68 dd a0 02 c0       	push   0xc002a0dd
c0018d70:	53                   	push   ebx
c0018d71:	e8 f0 af ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018d76:	b1 c1                	mov    cl,0xc1
c0018d78:	88 c8                	mov    al,cl
c0018d7a:	e6 22                	out    0x22,al
c0018d7c:	e4 23                	in     al,0x23
c0018d7e:	88 c2                	mov    dl,al
c0018d80:	88 c8                	mov    al,cl
c0018d82:	e6 22                	out    0x22,al
c0018d84:	88 d0                	mov    al,dl
c0018d86:	83 c8 10             	or     eax,0x10
c0018d89:	e6 23                	out    0x23,al
c0018d8b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d92:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d95:	89 d0                	mov    eax,edx
c0018d97:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d9d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018da1:	40                   	inc    eax
c0018da2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018da8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018dad:	e9 a1 00 00 00       	jmp    c0018e53 <CPU::detectFeatures()+0x959>
c0018db2:	83 f8 06             	cmp    eax,0x6
c0018db5:	0f 84 e1 fe ff ff    	je     c0018c9c <CPU::detectFeatures()+0x7a2>
c0018dbb:	83 f8 04             	cmp    eax,0x4
c0018dbe:	0f 84 e9 fe ff ff    	je     c0018cad <CPU::detectFeatures()+0x7b3>
c0018dc4:	83 f8 03             	cmp    eax,0x3
c0018dc7:	0f 85 0e 01 00 00    	jne    c0018edb <CPU::detectFeatures()+0x9e1>
c0018dcd:	52                   	push   edx
c0018dce:	52                   	push   edx
c0018dcf:	68 e8 a0 02 c0       	push   0xc002a0e8
c0018dd4:	eb 77                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018dd6:	83 f8 07             	cmp    eax,0x7
c0018dd9:	75 09                	jne    c0018de4 <CPU::detectFeatures()+0x8ea>
c0018ddb:	50                   	push   eax
c0018ddc:	50                   	push   eax
c0018ddd:	68 f2 a0 02 c0       	push   0xc002a0f2
c0018de2:	eb 69                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018de4:	83 f8 0a             	cmp    eax,0xa
c0018de7:	75 09                	jne    c0018df2 <CPU::detectFeatures()+0x8f8>
c0018de9:	50                   	push   eax
c0018dea:	50                   	push   eax
c0018deb:	68 fd a0 02 c0       	push   0xc002a0fd
c0018df0:	eb 5b                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018df2:	83 f8 0b             	cmp    eax,0xb
c0018df5:	75 09                	jne    c0018e00 <CPU::detectFeatures()+0x906>
c0018df7:	50                   	push   eax
c0018df8:	50                   	push   eax
c0018df9:	68 05 a1 02 c0       	push   0xc002a105
c0018dfe:	eb 4d                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e00:	83 f8 08             	cmp    eax,0x8
c0018e03:	75 09                	jne    c0018e0e <CPU::detectFeatures()+0x914>
c0018e05:	50                   	push   eax
c0018e06:	50                   	push   eax
c0018e07:	68 0e a1 02 c0       	push   0xc002a10e
c0018e0c:	eb 3f                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e0e:	83 f8 09             	cmp    eax,0x9
c0018e11:	75 09                	jne    c0018e1c <CPU::detectFeatures()+0x922>
c0018e13:	50                   	push   eax
c0018e14:	50                   	push   eax
c0018e15:	68 16 a1 02 c0       	push   0xc002a116
c0018e1a:	eb 31                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e1c:	83 f8 05             	cmp    eax,0x5
c0018e1f:	75 09                	jne    c0018e2a <CPU::detectFeatures()+0x930>
c0018e21:	50                   	push   eax
c0018e22:	50                   	push   eax
c0018e23:	68 1e a1 02 c0       	push   0xc002a11e
c0018e28:	eb 23                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e2a:	83 f8 0c             	cmp    eax,0xc
c0018e2d:	75 09                	jne    c0018e38 <CPU::detectFeatures()+0x93e>
c0018e2f:	55                   	push   ebp
c0018e30:	55                   	push   ebp
c0018e31:	68 2c a1 02 c0       	push   0xc002a12c
c0018e36:	eb 15                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e38:	83 f8 0d             	cmp    eax,0xd
c0018e3b:	75 09                	jne    c0018e46 <CPU::detectFeatures()+0x94c>
c0018e3d:	57                   	push   edi
c0018e3e:	57                   	push   edi
c0018e3f:	68 37 a1 02 c0       	push   0xc002a137
c0018e44:	eb 07                	jmp    c0018e4d <CPU::detectFeatures()+0x953>
c0018e46:	56                   	push   esi
c0018e47:	56                   	push   esi
c0018e48:	68 4b a1 02 c0       	push   0xc002a14b
c0018e4d:	53                   	push   ebx
c0018e4e:	e8 13 af ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018e53:	83 c4 10             	add    esp,0x10
c0018e56:	e9 80 00 00 00       	jmp    c0018edb <CPU::detectFeatures()+0x9e1>
c0018e5b:	51                   	push   ecx
c0018e5c:	51                   	push   ecx
c0018e5d:	68 97 9f 02 c0       	push   0xc0029f97
c0018e62:	57                   	push   edi
c0018e63:	e8 c2 78 fe ff       	call   c000072a <strcpy>
c0018e68:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e72:	e8 ec 73 fe ff       	call   c0000263 <is486>
c0018e77:	83 c4 10             	add    esp,0x10
c0018e7a:	85 c0                	test   eax,eax
c0018e7c:	74 2b                	je     c0018ea9 <CPU::detectFeatures()+0x9af>
c0018e7e:	52                   	push   edx
c0018e7f:	52                   	push   edx
c0018e80:	68 57 a1 02 c0       	push   0xc002a157
c0018e85:	53                   	push   ebx
c0018e86:	e8 db ae ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018e8b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e92:	0f 20 c0             	mov    eax,cr0
c0018e95:	83 e0 14             	and    eax,0x14
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	83 f8 04             	cmp    eax,0x4
c0018e9e:	75 1f                	jne    c0018ebf <CPU::detectFeatures()+0x9c5>
c0018ea0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018ea7:	eb 32                	jmp    c0018edb <CPU::detectFeatures()+0x9e1>
c0018ea9:	50                   	push   eax
c0018eaa:	50                   	push   eax
c0018eab:	68 62 a1 02 c0       	push   0xc002a162
c0018eb0:	53                   	push   ebx
c0018eb1:	e8 b0 ae ff ff       	call   c0013d66 <Device::setName(char const*)>
c0018eb6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018ebd:	eb d3                	jmp    c0018e92 <CPU::detectFeatures()+0x998>
c0018ebf:	e8 7a 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018ec4:	83 e0 01             	and    eax,0x1
c0018ec7:	8d 14 00             	lea    edx,[eax+eax*1]
c0018eca:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ed0:	83 e0 fd             	and    eax,0xfffffffd
c0018ed3:	09 d0                	or     eax,edx
c0018ed5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018edb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018ee2:	83 c4 4c             	add    esp,0x4c
c0018ee5:	5b                   	pop    ebx
c0018ee6:	5e                   	pop    esi
c0018ee7:	5f                   	pop    edi
c0018ee8:	5d                   	pop    ebp
c0018ee9:	c3                   	ret    

c0018eea <CPU::setupSMEP()>:
c0018eea:	0f 20 e0             	mov    eax,cr4
c0018eed:	0d 00 00 10 00       	or     eax,0x100000
c0018ef2:	0f 22 e0             	mov    cr4,eax
c0018ef5:	c3                   	ret    

c0018ef6 <CPU::setupUMIP()>:
c0018ef6:	0f 20 e0             	mov    eax,cr4
c0018ef9:	80 cc 08             	or     ah,0x8
c0018efc:	0f 22 e0             	mov    cr4,eax
c0018eff:	c3                   	ret    

c0018f00 <CPU::setupTSC()>:
c0018f00:	0f 20 e0             	mov    eax,cr4
c0018f03:	83 c8 04             	or     eax,0x4
c0018f06:	0f 22 e0             	mov    cr4,eax
c0018f09:	c3                   	ret    

c0018f0a <CPU::setupLargePages()>:
c0018f0a:	0f 20 e0             	mov    eax,cr4
c0018f0d:	83 c8 10             	or     eax,0x10
c0018f10:	0f 22 e0             	mov    cr4,eax
c0018f13:	c3                   	ret    

c0018f14 <CPU::setupPAT()>:
c0018f14:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0018f19:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f20:	74 2c                	je     c0018f4e <CPU::setupPAT()+0x3a>
c0018f22:	53                   	push   ebx
c0018f23:	83 ec 10             	sub    esp,0x10
c0018f26:	68 77 02 00 00       	push   0x277
c0018f2b:	50                   	push   eax
c0018f2c:	e8 4b 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f31:	83 e2 f8             	and    edx,0xfffffff8
c0018f34:	83 ca 01             	or     edx,0x1
c0018f37:	52                   	push   edx
c0018f38:	50                   	push   eax
c0018f39:	68 77 02 00 00       	push   0x277
c0018f3e:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c0018f44:	e8 5f 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f49:	83 c4 28             	add    esp,0x28
c0018f4c:	5b                   	pop    ebx
c0018f4d:	c3                   	ret    
c0018f4e:	c3                   	ret    
c0018f4f:	90                   	nop

c0018f50 <CPU::setupMTRR()>:
c0018f50:	c3                   	ret    
c0018f51:	90                   	nop

c0018f52 <CPU::setupGlobalPages()>:
c0018f52:	0f 20 e0             	mov    eax,cr4
c0018f55:	0c 80                	or     al,0x80
c0018f57:	0f 22 e0             	mov    cr4,eax
c0018f5a:	c3                   	ret    
c0018f5b:	90                   	nop

c0018f5c <CPU::allowUsermodeDataAccess()>:
c0018f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f60:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f67:	74 03                	je     c0018f6c <CPU::allowUsermodeDataAccess()+0x10>
c0018f69:	0f 01 cb             	stac   
c0018f6c:	c3                   	ret    
c0018f6d:	90                   	nop

c0018f6e <CPU::prohibitUsermodeDataAccess()>:
c0018f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f72:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f79:	74 03                	je     c0018f7e <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f7b:	0f 01 ca             	clac   
c0018f7e:	c3                   	ret    
c0018f7f:	90                   	nop

c0018f80 <CPU::setupSMAP()>:
c0018f80:	0f 20 e0             	mov    eax,cr4
c0018f83:	0d 00 00 20 00       	or     eax,0x200000
c0018f88:	0f 22 e0             	mov    cr4,eax
c0018f8b:	eb e1                	jmp    c0018f6e <CPU::prohibitUsermodeDataAccess()>
c0018f8d:	90                   	nop

c0018f8e <CPU::setupFeatures()>:
c0018f8e:	83 ec 0c             	sub    esp,0xc
c0018f91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f95:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f9c:	74 07                	je     c0018fa5 <CPU::setupFeatures()+0x17>
c0018f9e:	52                   	push   edx
c0018f9f:	e8 46 ff ff ff       	call   c0018eea <CPU::setupSMEP()>
c0018fa4:	58                   	pop    eax
c0018fa5:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018fac:	74 07                	je     c0018fb5 <CPU::setupFeatures()+0x27>
c0018fae:	52                   	push   edx
c0018faf:	e8 cc ff ff ff       	call   c0018f80 <CPU::setupSMAP()>
c0018fb4:	58                   	pop    eax
c0018fb5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fbc:	74 07                	je     c0018fc5 <CPU::setupFeatures()+0x37>
c0018fbe:	52                   	push   edx
c0018fbf:	e8 32 ff ff ff       	call   c0018ef6 <CPU::setupUMIP()>
c0018fc4:	58                   	pop    eax
c0018fc5:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fcc:	74 07                	je     c0018fd5 <CPU::setupFeatures()+0x47>
c0018fce:	52                   	push   edx
c0018fcf:	e8 2c ff ff ff       	call   c0018f00 <CPU::setupTSC()>
c0018fd4:	58                   	pop    eax
c0018fd5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018fdc:	74 07                	je     c0018fe5 <CPU::setupFeatures()+0x57>
c0018fde:	52                   	push   edx
c0018fdf:	e8 26 ff ff ff       	call   c0018f0a <CPU::setupLargePages()>
c0018fe4:	59                   	pop    ecx
c0018fe5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fec:	74 07                	je     c0018ff5 <CPU::setupFeatures()+0x67>
c0018fee:	52                   	push   edx
c0018fef:	e8 5e ff ff ff       	call   c0018f52 <CPU::setupGlobalPages()>
c0018ff4:	58                   	pop    eax
c0018ff5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018ffc:	74 0c                	je     c001900a <CPU::setupFeatures()+0x7c>
c0018ffe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019002:	83 c4 0c             	add    esp,0xc
c0019005:	e9 0a ff ff ff       	jmp    c0018f14 <CPU::setupPAT()>
c001900a:	83 c4 0c             	add    esp,0xc
c001900d:	c3                   	ret    

c001900e <CPU::open(int, int, void*)>:
c001900e:	57                   	push   edi
c001900f:	56                   	push   esi
c0019010:	53                   	push   ebx
c0019011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019015:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019019:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001901f:	83 ec 0c             	sub    esp,0xc
c0019022:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019028:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001902e:	50                   	push   eax
c001902f:	e8 34 5d ff ff       	call   c000ed68 <GDT::setup()>
c0019034:	83 c4 0c             	add    esp,0xc
c0019037:	6a 00                	push   0x0
c0019039:	68 ef be ad de       	push   0xdeadbeef
c001903e:	57                   	push   edi
c001903f:	e8 d2 80 ff ff       	call   c0011116 <TSS::setup(unsigned long, unsigned long)>
c0019044:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019047:	e8 aa 80 ff ff       	call   c00110f6 <TSS::flush()>
c001904c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019052:	89 04 24             	mov    DWORD PTR [esp],eax
c0019055:	e8 6a 5f ff ff       	call   c000efc4 <IDT::setup()>
c001905a:	b8 00 04 00 00       	mov    eax,0x400
c001905f:	0f 23 f8             	mov    db7,eax
c0019062:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001906c:	e8 20 6a ff ff       	call   c000fa91 <Phys::allocatePage()>
c0019071:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019077:	89 30                	mov    DWORD PTR [eax],esi
c0019079:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001907f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019082:	58                   	pop    eax
c0019083:	5a                   	pop    edx
c0019084:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001908a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001908e:	e8 b5 90 ff ff       	call   c0012148 <VAS::setCPUSpecific(unsigned long)>
c0019093:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019096:	e8 5f f4 ff ff       	call   c00184fa <CPU::detectFeatures()>
c001909b:	e8 aa bf ff ff       	call   c001504a <setupInterruptController()>
c00190a0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00190a6:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c00190ab:	83 e0 10             	and    eax,0x10
c00190ae:	83 f8 01             	cmp    eax,0x1
c00190b1:	19 c0                	sbb    eax,eax
c00190b3:	83 e0 46             	and    eax,0x46
c00190b6:	83 c0 1e             	add    eax,0x1e
c00190b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00190bc:	e8 41 d4 ff ff       	call   c0016502 <setupTimer(int)>
c00190c1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190ca:	e8 bf fe ff ff       	call   c0018f8e <CPU::setupFeatures()>
c00190cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190d2:	e8 a7 f1 ff ff       	call   c001827e <CPU::displayFeatures()>
c00190d7:	83 c4 10             	add    esp,0x10
c00190da:	31 c0                	xor    eax,eax
c00190dc:	5b                   	pop    ebx
c00190dd:	5e                   	pop    esi
c00190de:	5f                   	pop    edi
c00190df:	c3                   	ret    

c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00190e0:	57                   	push   edi
c00190e1:	56                   	push   esi
c00190e2:	53                   	push   ebx
c00190e3:	51                   	push   ecx
c00190e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190e8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190eb:	0f 02 c0             	lar    eax,ax
c00190ee:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190f5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190f8:	88 ca                	mov    dl,cl
c00190fa:	c0 ea 06             	shr    dl,0x6
c00190fd:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019101:	89 ca                	mov    edx,ecx
c0019103:	66 c1 ea 03          	shr    dx,0x3
c0019107:	83 e2 07             	and    edx,0x7
c001910a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001910f:	88 17                	mov    BYTE PTR [edi],dl
c0019111:	0f 84 a6 01 00 00    	je     c00192bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019117:	83 e1 07             	and    ecx,0x7
c001911a:	80 f9 04             	cmp    cl,0x4
c001911d:	0f 84 98 00 00 00    	je     c00191bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019123:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019128:	0f 95 c0             	setne  al
c001912b:	80 f9 05             	cmp    cl,0x5
c001912e:	0f 95 c2             	setne  dl
c0019131:	08 c2                	or     dl,al
c0019133:	74 79                	je     c00191ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019135:	84 c9                	test   cl,cl
c0019137:	75 05                	jne    c001913e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019139:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001913c:	eb 3c                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001913e:	80 f9 01             	cmp    cl,0x1
c0019141:	75 05                	jne    c0019148 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019143:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019146:	eb 32                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019148:	80 f9 02             	cmp    cl,0x2
c001914b:	75 05                	jne    c0019152 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001914d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019150:	eb 28                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019152:	31 c0                	xor    eax,eax
c0019154:	80 f9 03             	cmp    cl,0x3
c0019157:	75 05                	jne    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019159:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001915c:	eb 1c                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001915e:	80 f9 05             	cmp    cl,0x5
c0019161:	75 05                	jne    c0019168 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019163:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019166:	eb 12                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019168:	80 f9 06             	cmp    cl,0x6
c001916b:	75 05                	jne    c0019172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001916d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019170:	eb 08                	jmp    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019172:	80 f9 07             	cmp    cl,0x7
c0019175:	75 03                	jne    c001917a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019177:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001917a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001917f:	75 10                	jne    c0019191 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019181:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019185:	b9 03 00 00 00       	mov    ecx,0x3
c001918a:	01 d0                	add    eax,edx
c001918c:	e9 37 01 00 00       	jmp    c00192c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019191:	b9 02 00 00 00       	mov    ecx,0x2
c0019196:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001919b:	0f 85 27 01 00 00    	jne    c00192c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191a1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00191a4:	b9 06 00 00 00       	mov    ecx,0x6
c00191a9:	e9 1a 01 00 00       	jmp    c00192c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191ae:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00191b1:	b9 06 00 00 00       	mov    ecx,0x6
c00191b6:	e9 0f 01 00 00       	jmp    c00192ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191bb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191be:	88 ca                	mov    dl,cl
c00191c0:	c0 ea 06             	shr    dl,0x6
c00191c3:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191c7:	89 ca                	mov    edx,ecx
c00191c9:	66 c1 ea 03          	shr    dx,0x3
c00191cd:	83 e2 07             	and    edx,0x7
c00191d0:	80 e1 07             	and    cl,0x7
c00191d3:	75 05                	jne    c00191da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191d5:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191d8:	eb 4c                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191da:	80 f9 01             	cmp    cl,0x1
c00191dd:	75 05                	jne    c00191e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00191df:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00191e2:	eb 42                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191e4:	80 f9 02             	cmp    cl,0x2
c00191e7:	75 05                	jne    c00191ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191e9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191ec:	eb 38                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191ee:	80 f9 03             	cmp    cl,0x3
c00191f1:	75 05                	jne    c00191f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191f3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191f6:	eb 2e                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191f8:	80 f9 04             	cmp    cl,0x4
c00191fb:	75 12                	jne    c001920f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191fd:	f6 c4 60             	test   ah,0x60
c0019200:	75 08                	jne    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019202:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019205:	8d 78 14             	lea    edi,[eax+0x14]
c0019208:	eb 1c                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001920a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001920d:	eb 17                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001920f:	80 f9 05             	cmp    cl,0x5
c0019212:	75 05                	jne    c0019219 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019214:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019217:	eb 0d                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019219:	80 f9 06             	cmp    cl,0x6
c001921c:	75 05                	jne    c0019223 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001921e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019221:	eb 03                	jmp    c0019226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019223:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019226:	84 d2                	test   dl,dl
c0019228:	75 05                	jne    c001922f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001922a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001922d:	eb 3c                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001922f:	80 fa 01             	cmp    dl,0x1
c0019232:	75 05                	jne    c0019239 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019234:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019237:	eb 32                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019239:	80 fa 02             	cmp    dl,0x2
c001923c:	75 05                	jne    c0019243 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001923e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019241:	eb 28                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019243:	80 fa 03             	cmp    dl,0x3
c0019246:	75 05                	jne    c001924d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019248:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001924b:	eb 1e                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001924d:	31 c0                	xor    eax,eax
c001924f:	80 fa 04             	cmp    dl,0x4
c0019252:	74 17                	je     c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019254:	80 fa 05             	cmp    dl,0x5
c0019257:	75 05                	jne    c001925e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019259:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001925c:	eb 0d                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001925e:	80 fa 06             	cmp    dl,0x6
c0019261:	75 05                	jne    c0019268 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019263:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019266:	eb 03                	jmp    c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019268:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001926b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019270:	0f 94 c2             	sete   dl
c0019273:	80 f9 05             	cmp    cl,0x5
c0019276:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001927a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001927f:	d3 e0                	shl    eax,cl
c0019281:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019285:	74 0a                	je     c0019291 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019287:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001928a:	b9 07 00 00 00       	mov    ecx,0x7
c001928f:	eb 37                	jmp    c00192c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019291:	01 f8                	add    eax,edi
c0019293:	b9 03 00 00 00       	mov    ecx,0x3
c0019298:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001929d:	74 2b                	je     c00192ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001929f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00192a4:	75 0d                	jne    c00192b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00192a6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00192aa:	01 c8                	add    eax,ecx
c00192ac:	b9 04 00 00 00       	mov    ecx,0x4
c00192b1:	eb 17                	jmp    c00192ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192b3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192b6:	b9 07 00 00 00       	mov    ecx,0x7
c00192bb:	eb 0d                	jmp    c00192ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192bd:	b9 02 00 00 00       	mov    ecx,0x2
c00192c2:	b2 01                	mov    dl,0x1
c00192c4:	31 c0                	xor    eax,eax
c00192c6:	eb 02                	jmp    c00192ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192c8:	31 d2                	xor    edx,edx
c00192ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192ce:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192d4:	88 11                	mov    BYTE PTR [ecx],dl
c00192d6:	5a                   	pop    edx
c00192d7:	5b                   	pop    ebx
c00192d8:	5e                   	pop    esi
c00192d9:	5f                   	pop    edi
c00192da:	c3                   	ret    
c00192db:	90                   	nop

c00192dc <EnvVarContainer::getEnv(char const*)>:
c00192dc:	57                   	push   edi
c00192dd:	56                   	push   esi
c00192de:	53                   	push   ebx
c00192df:	31 db                	xor    ebx,ebx
c00192e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192e5:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192e7:	7e 2b                	jle    c0019314 <EnvVarContainer::getEnv(char const*)+0x38>
c00192e9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192f0:	50                   	push   eax
c00192f1:	50                   	push   eax
c00192f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192fc:	e8 7a 74 fe ff       	call   c000077b <strcmp>
c0019301:	83 c4 10             	add    esp,0x10
c0019304:	85 c0                	test   eax,eax
c0019306:	75 09                	jne    c0019311 <EnvVarContainer::getEnv(char const*)+0x35>
c0019308:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001930b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001930f:	eb 05                	jmp    c0019316 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019311:	43                   	inc    ebx
c0019312:	eb d1                	jmp    c00192e5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019314:	31 c0                	xor    eax,eax
c0019316:	5b                   	pop    ebx
c0019317:	5e                   	pop    esi
c0019318:	5f                   	pop    edi
c0019319:	c3                   	ret    

c001931a <EnvVarContainer::setEnv(char const*, char const*)>:
c001931a:	57                   	push   edi
c001931b:	56                   	push   esi
c001931c:	53                   	push   ebx
c001931d:	83 ec 1c             	sub    esp,0x1c
c0019320:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019324:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019328:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001932c:	57                   	push   edi
c001932d:	e8 76 73 fe ff       	call   c00006a8 <strlen>
c0019332:	40                   	inc    eax
c0019333:	89 04 24             	mov    DWORD PTR [esp],eax
c0019336:	e8 99 61 ff ff       	call   c000f4d4 <malloc>
c001933b:	89 34 24             	mov    DWORD PTR [esp],esi
c001933e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019342:	e8 61 73 fe ff       	call   c00006a8 <strlen>
c0019347:	40                   	inc    eax
c0019348:	89 04 24             	mov    DWORD PTR [esp],eax
c001934b:	e8 84 61 ff ff       	call   c000f4d4 <malloc>
c0019350:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019353:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019357:	e8 4c 73 fe ff       	call   c00006a8 <strlen>
c001935c:	83 c4 0c             	add    esp,0xc
c001935f:	40                   	inc    eax
c0019360:	50                   	push   eax
c0019361:	6a 00                	push   0x0
c0019363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019367:	e8 1f 73 fe ff       	call   c000068b <memset>
c001936c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001936f:	e8 34 73 fe ff       	call   c00006a8 <strlen>
c0019374:	83 c4 0c             	add    esp,0xc
c0019377:	40                   	inc    eax
c0019378:	50                   	push   eax
c0019379:	57                   	push   edi
c001937a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001937e:	e8 d2 72 fe ff       	call   c0000655 <memcpy>
c0019383:	89 34 24             	mov    DWORD PTR [esp],esi
c0019386:	e8 1d 73 fe ff       	call   c00006a8 <strlen>
c001938b:	83 c4 0c             	add    esp,0xc
c001938e:	40                   	inc    eax
c001938f:	50                   	push   eax
c0019390:	6a 00                	push   0x0
c0019392:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019396:	e8 f0 72 fe ff       	call   c000068b <memset>
c001939b:	89 34 24             	mov    DWORD PTR [esp],esi
c001939e:	e8 05 73 fe ff       	call   c00006a8 <strlen>
c00193a3:	83 c4 0c             	add    esp,0xc
c00193a6:	40                   	inc    eax
c00193a7:	50                   	push   eax
c00193a8:	56                   	push   esi
c00193a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193ad:	e8 a3 72 fe ff       	call   c0000655 <memcpy>
c00193b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193b4:	40                   	inc    eax
c00193b5:	89 03                	mov    DWORD PTR [ebx],eax
c00193b7:	c1 e0 03             	shl    eax,0x3
c00193ba:	5a                   	pop    edx
c00193bb:	59                   	pop    ecx
c00193bc:	50                   	push   eax
c00193bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193c0:	e8 fb 60 ff ff       	call   c000f4c0 <realloc>
c00193c5:	83 c4 0c             	add    esp,0xc
c00193c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193cb:	6a 08                	push   0x8
c00193cd:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193d1:	52                   	push   edx
c00193d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193d4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193d8:	50                   	push   eax
c00193d9:	e8 77 72 fe ff       	call   c0000655 <memcpy>
c00193de:	83 c4 20             	add    esp,0x20
c00193e1:	5b                   	pop    ebx
c00193e2:	5e                   	pop    esi
c00193e3:	5f                   	pop    edi
c00193e4:	c3                   	ret    
c00193e5:	90                   	nop

c00193e6 <EnvVarContainer::deleteEnv(char const*)>:
c00193e6:	c3                   	ret    
c00193e7:	90                   	nop

c00193e8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193e8:	55                   	push   ebp
c00193e9:	57                   	push   edi
c00193ea:	56                   	push   esi
c00193eb:	53                   	push   ebx
c00193ec:	81 ec 38 01 00 00    	sub    esp,0x138
c00193f2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193f9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019400:	68 14 01 00 00       	push   0x114
c0019405:	e8 ca 60 ff ff       	call   c000f4d4 <malloc>
c001940a:	83 c4 0c             	add    esp,0xc
c001940d:	89 c7                	mov    edi,eax
c001940f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019412:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019419:	50                   	push   eax
c001941a:	e8 a5 98 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001941f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019422:	e8 6f 9b ff ff       	call   c0012f96 <File::exists()>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	84 c0                	test   al,al
c001942c:	75 31                	jne    c001945f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001942e:	51                   	push   ecx
c001942f:	51                   	push   ecx
c0019430:	6a 12                	push   0x12
c0019432:	57                   	push   edi
c0019433:	e8 f0 98 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c0019438:	8b 07                	mov    eax,DWORD PTR [edi]
c001943a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001943d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019440:	e8 63 72 fe ff       	call   c00006a8 <strlen>
c0019445:	5a                   	pop    edx
c0019446:	31 d2                	xor    edx,edx
c0019448:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001944c:	51                   	push   ecx
c001944d:	55                   	push   ebp
c001944e:	52                   	push   edx
c001944f:	50                   	push   eax
c0019450:	57                   	push   edi
c0019451:	ff d3                	call   ebx
c0019453:	83 c4 14             	add    esp,0x14
c0019456:	57                   	push   edi
c0019457:	e8 2a 99 ff ff       	call   c0012d86 <File::close()>
c001945c:	83 c4 10             	add    esp,0x10
c001945f:	31 db                	xor    ebx,ebx
c0019461:	50                   	push   eax
c0019462:	31 ed                	xor    ebp,ebp
c0019464:	68 00 01 00 00       	push   0x100
c0019469:	6a 00                	push   0x0
c001946b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001946f:	50                   	push   eax
c0019470:	e8 16 72 fe ff       	call   c000068b <memset>
c0019475:	58                   	pop    eax
c0019476:	5a                   	pop    edx
c0019477:	6a 01                	push   0x1
c0019479:	57                   	push   edi
c001947a:	e8 a9 98 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001947f:	83 c4 10             	add    esp,0x10
c0019482:	83 ec 0c             	sub    esp,0xc
c0019485:	8b 07                	mov    eax,DWORD PTR [edi]
c0019487:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001948b:	51                   	push   ecx
c001948c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019490:	52                   	push   edx
c0019491:	6a 00                	push   0x0
c0019493:	6a 01                	push   0x1
c0019495:	57                   	push   edi
c0019496:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019499:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001949d:	83 c4 20             	add    esp,0x20
c00194a0:	3c 0d                	cmp    al,0xd
c00194a2:	0f 84 12 01 00 00    	je     c00195ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194a8:	85 db                	test   ebx,ebx
c00194aa:	0f 84 fd 00 00 00    	je     c00195ad <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194b0:	3c 0a                	cmp    al,0xa
c00194b2:	74 13                	je     c00194c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194b9:	74 0c                	je     c00194c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194bb:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194c1:	0f 8e e6 00 00 00    	jle    c00195ad <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194c7:	83 ec 0c             	sub    esp,0xc
c00194ca:	8d 53 01             	lea    edx,[ebx+0x1]
c00194cd:	29 dd                	sub    ebp,ebx
c00194cf:	52                   	push   edx
c00194d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194d4:	e8 fb 5f ff ff       	call   c000f4d4 <malloc>
c00194d9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00194e3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194e7:	e8 e8 5f ff ff       	call   c000f4d4 <malloc>
c00194ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194f0:	83 c4 0c             	add    esp,0xc
c00194f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194f7:	52                   	push   edx
c00194f8:	6a 00                	push   0x0
c00194fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194fe:	e8 88 71 fe ff       	call   c000068b <memset>
c0019503:	83 c4 0c             	add    esp,0xc
c0019506:	53                   	push   ebx
c0019507:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001950b:	55                   	push   ebp
c001950c:	01 eb                	add    ebx,ebp
c001950e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019512:	e8 3e 71 fe ff       	call   c0000655 <memcpy>
c0019517:	83 c4 0c             	add    esp,0xc
c001951a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001951e:	51                   	push   ecx
c001951f:	6a 00                	push   0x0
c0019521:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019525:	e8 61 71 fe ff       	call   c000068b <memset>
c001952a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001952d:	e8 76 71 fe ff       	call   c00006a8 <strlen>
c0019532:	83 c4 0c             	add    esp,0xc
c0019535:	50                   	push   eax
c0019536:	53                   	push   ebx
c0019537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001953b:	e8 15 71 fe ff       	call   c0000655 <memcpy>
c0019540:	5b                   	pop    ebx
c0019541:	58                   	pop    eax
c0019542:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019546:	68 9c a1 02 c0       	push   0xc002a19c
c001954b:	e8 45 92 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019550:	8b 06                	mov    eax,DWORD PTR [esi]
c0019552:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019555:	40                   	inc    eax
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	89 06                	mov    DWORD PTR [esi],eax
c001955b:	85 d2                	test   edx,edx
c001955d:	75 0c                	jne    c001956b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	6a 08                	push   0x8
c0019564:	e8 6b 5f ff ff       	call   c000f4d4 <malloc>
c0019569:	eb 0c                	jmp    c0019577 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001956b:	c1 e0 03             	shl    eax,0x3
c001956e:	51                   	push   ecx
c001956f:	51                   	push   ecx
c0019570:	50                   	push   eax
c0019571:	52                   	push   edx
c0019572:	e8 49 5f ff ff       	call   c000f4c0 <realloc>
c0019577:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001957a:	83 c4 10             	add    esp,0x10
c001957d:	31 db                	xor    ebx,ebx
c001957f:	52                   	push   edx
c0019580:	6a 08                	push   0x8
c0019582:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019586:	50                   	push   eax
c0019587:	8b 16                	mov    edx,DWORD PTR [esi]
c0019589:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001958c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019590:	50                   	push   eax
c0019591:	e8 bf 70 fe ff       	call   c0000655 <memcpy>
c0019596:	83 c4 0c             	add    esp,0xc
c0019599:	68 00 01 00 00       	push   0x100
c001959e:	6a 00                	push   0x0
c00195a0:	55                   	push   ebp
c00195a1:	31 ed                	xor    ebp,ebp
c00195a3:	e8 e3 70 fe ff       	call   c000068b <memset>
c00195a8:	83 c4 10             	add    esp,0x10
c00195ab:	eb 0d                	jmp    c00195ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195ad:	3c 3d                	cmp    al,0x3d
c00195af:	74 07                	je     c00195b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00195b1:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00195b5:	45                   	inc    ebp
c00195b6:	eb 02                	jmp    c00195ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195b8:	89 eb                	mov    ebx,ebp
c00195ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195bf:	0f 85 bd fe ff ff    	jne    c0019482 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195c5:	50                   	push   eax
c00195c6:	50                   	push   eax
c00195c7:	ff 36                	push   DWORD PTR [esi]
c00195c9:	68 aa a1 02 c0       	push   0xc002a1aa
c00195ce:	e8 c2 91 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00195d3:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195d9:	5b                   	pop    ebx
c00195da:	5e                   	pop    esi
c00195db:	5f                   	pop    edi
c00195dc:	5d                   	pop    ebp
c00195dd:	c3                   	ret    

c00195de <EnvVarContainer::__loadSystem()>:
c00195de:	83 ec 10             	sub    esp,0x10
c00195e1:	68 a0 be 02 c0       	push   0xc002bea0
c00195e6:	68 d5 a1 02 c0       	push   0xc002a1d5
c00195eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195ef:	e8 f4 fd ff ff       	call   c00193e8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00195f4:	83 c4 1c             	add    esp,0x1c
c00195f7:	c3                   	ret    

c00195f8 <EnvVarContainer::__loadUser()>:
c00195f8:	c3                   	ret    
c00195f9:	90                   	nop

c00195fa <EnvVarContainer::EnvVarContainer(Process*)>:
c00195fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001960c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001960f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019613:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001961a:	90                   	nop
c001961b:	c3                   	ret    

c001961c <EnvVarContainer::~EnvVarContainer()>:
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019623:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019626:	85 c0                	test   eax,eax
c0019628:	74 1d                	je     c0019647 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019630:	85 c0                	test   eax,eax
c0019632:	74 13                	je     c0019647 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001963b:	83 ec 0c             	sub    esp,0xc
c001963e:	50                   	push   eax
c001963f:	e8 a0 5e ff ff       	call   c000f4e4 <free>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	90                   	nop
c0019648:	83 c4 0c             	add    esp,0xc
c001964b:	c3                   	ret    

c001964c <Krnl::getEnv(Process*, char const*)>:
c001964c:	53                   	push   ebx
c001964d:	83 ec 08             	sub    esp,0x8
c0019650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019654:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019658:	39 05 b4 de 02 c0    	cmp    DWORD PTR ds:0xc002deb4,eax
c001965e:	74 04                	je     c0019664 <Krnl::getEnv(Process*, char const*)+0x18>
c0019660:	85 c0                	test   eax,eax
c0019662:	75 0b                	jne    c001966f <Krnl::getEnv(Process*, char const*)+0x23>
c0019664:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c0019669:	85 c0                	test   eax,eax
c001966b:	75 19                	jne    c0019686 <Krnl::getEnv(Process*, char const*)+0x3a>
c001966d:	eb 27                	jmp    c0019696 <Krnl::getEnv(Process*, char const*)+0x4a>
c001966f:	52                   	push   edx
c0019670:	52                   	push   edx
c0019671:	53                   	push   ebx
c0019672:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019678:	e8 5f fc ff ff       	call   c00192dc <EnvVarContainer::getEnv(char const*)>
c001967d:	83 c4 10             	add    esp,0x10
c0019680:	85 c0                	test   eax,eax
c0019682:	75 28                	jne    c00196ac <Krnl::getEnv(Process*, char const*)+0x60>
c0019684:	eb de                	jmp    c0019664 <Krnl::getEnv(Process*, char const*)+0x18>
c0019686:	52                   	push   edx
c0019687:	52                   	push   edx
c0019688:	53                   	push   ebx
c0019689:	50                   	push   eax
c001968a:	e8 4d fc ff ff       	call   c00192dc <EnvVarContainer::getEnv(char const*)>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	85 c0                	test   eax,eax
c0019694:	75 16                	jne    c00196ac <Krnl::getEnv(Process*, char const*)+0x60>
c0019696:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001969a:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c001969f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00196a3:	83 c4 08             	add    esp,0x8
c00196a6:	5b                   	pop    ebx
c00196a7:	e9 30 fc ff ff       	jmp    c00192dc <EnvVarContainer::getEnv(char const*)>
c00196ac:	83 c4 08             	add    esp,0x8
c00196af:	5b                   	pop    ebx
c00196b0:	c3                   	ret    

c00196b1 <Krnl::setEnvSystem(char const*, char const*)>:
c00196b1:	83 ec 10             	sub    esp,0x10
c00196b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196bc:	ff 35 94 d4 02 c0    	push   DWORD PTR ds:0xc002d494
c00196c2:	e8 53 fc ff ff       	call   c001931a <EnvVarContainer::setEnv(char const*, char const*)>
c00196c7:	83 c4 1c             	add    esp,0x1c
c00196ca:	c3                   	ret    

c00196cb <Krnl::setEnvUser(char const*, char const*)>:
c00196cb:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c00196d0:	85 c0                	test   eax,eax
c00196d2:	74 15                	je     c00196e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196d4:	83 ec 10             	sub    esp,0x10
c00196d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196df:	50                   	push   eax
c00196e0:	e8 35 fc ff ff       	call   c001931a <EnvVarContainer::setEnv(char const*, char const*)>
c00196e5:	83 c4 1c             	add    esp,0x1c
c00196e8:	c3                   	ret    
c00196e9:	c3                   	ret    

c00196ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196ee:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196f8:	e9 1d fc ff ff       	jmp    c001931a <EnvVarContainer::setEnv(char const*, char const*)>

c00196fd <Krnl::deleteEnvSystem(char const*)>:
c00196fd:	c3                   	ret    

c00196fe <Krnl::deleteEnvUser(char const*)>:
c00196fe:	c3                   	ret    

c00196ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196ff:	c3                   	ret    

c0019700 <Krnl::newProcessEnv(Process*)>:
c0019700:	83 ec 28             	sub    esp,0x28
c0019703:	6a 0c                	push   0xc
c0019705:	e8 ca 5d ff ff       	call   c000f4d4 <malloc>
c001970a:	5a                   	pop    edx
c001970b:	59                   	pop    ecx
c001970c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019710:	50                   	push   eax
c0019711:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019715:	e8 e0 fe ff ff       	call   c00195fa <EnvVarContainer::EnvVarContainer(Process*)>
c001971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001971e:	83 c4 2c             	add    esp,0x2c
c0019721:	c3                   	ret    

c0019722 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019722:	56                   	push   esi
c0019723:	53                   	push   ebx
c0019724:	83 ec 10             	sub    esp,0x10
c0019727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001972b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019731:	6a 0c                	push   0xc
c0019733:	e8 9c 5d ff ff       	call   c000f4d4 <malloc>
c0019738:	89 c3                	mov    ebx,eax
c001973a:	58                   	pop    eax
c001973b:	5a                   	pop    edx
c001973c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019740:	53                   	push   ebx
c0019741:	e8 b4 fe ff ff       	call   c00195fa <EnvVarContainer::EnvVarContainer(Process*)>
c0019746:	8b 06                	mov    eax,DWORD PTR [esi]
c0019748:	89 03                	mov    DWORD PTR [ebx],eax
c001974a:	c1 e0 03             	shl    eax,0x3
c001974d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019750:	e8 7f 5d ff ff       	call   c000f4d4 <malloc>
c0019755:	83 c4 0c             	add    esp,0xc
c0019758:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001975b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001975d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019764:	52                   	push   edx
c0019765:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019768:	50                   	push   eax
c0019769:	e8 e7 6e fe ff       	call   c0000655 <memcpy>
c001976e:	89 d8                	mov    eax,ebx
c0019770:	83 c4 14             	add    esp,0x14
c0019773:	5b                   	pop    ebx
c0019774:	5e                   	pop    esi
c0019775:	c3                   	ret    

c0019776 <Krnl::loadSystemEnv()>:
c0019776:	53                   	push   ebx
c0019777:	83 ec 14             	sub    esp,0x14
c001977a:	6a 0c                	push   0xc
c001977c:	e8 53 5d ff ff       	call   c000f4d4 <malloc>
c0019781:	89 c3                	mov    ebx,eax
c0019783:	58                   	pop    eax
c0019784:	5a                   	pop    edx
c0019785:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001978b:	53                   	push   ebx
c001978c:	e8 69 fe ff ff       	call   c00195fa <EnvVarContainer::EnvVarContainer(Process*)>
c0019791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019794:	89 1d 94 d4 02 c0    	mov    DWORD PTR ds:0xc002d494,ebx
c001979a:	e8 3f fe ff ff       	call   c00195de <EnvVarContainer::__loadSystem()>
c001979f:	83 c4 18             	add    esp,0x18
c00197a2:	5b                   	pop    ebx
c00197a3:	c3                   	ret    

c00197a4 <Krnl::loadUserEnv()>:
c00197a4:	53                   	push   ebx
c00197a5:	83 ec 14             	sub    esp,0x14
c00197a8:	6a 0c                	push   0xc
c00197aa:	e8 25 5d ff ff       	call   c000f4d4 <malloc>
c00197af:	89 c3                	mov    ebx,eax
c00197b1:	58                   	pop    eax
c00197b2:	5a                   	pop    edx
c00197b3:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c00197b9:	53                   	push   ebx
c00197ba:	e8 3b fe ff ff       	call   c00195fa <EnvVarContainer::EnvVarContainer(Process*)>
c00197bf:	89 1d 90 d4 02 c0    	mov    DWORD PTR ds:0xc002d490,ebx
c00197c5:	83 c4 18             	add    esp,0x18
c00197c8:	5b                   	pop    ebx
c00197c9:	c3                   	ret    

c00197ca <Krnl::flushEnv()>:
c00197ca:	c3                   	ret    

c00197cb <Krnl::getProcessTotalEnvCount(Process*)>:
c00197cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197cf:	8b 15 90 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d490
c00197d5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197db:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c00197e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00197e2:	03 01                	add    eax,DWORD PTR [ecx]
c00197e4:	85 d2                	test   edx,edx
c00197e6:	74 02                	je     c00197ea <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197e8:	03 02                	add    eax,DWORD PTR [edx]
c00197ea:	c3                   	ret    

c00197eb <Krnl::getProcessEnvPair(Process*, int)>:
c00197eb:	57                   	push   edi
c00197ec:	8b 0d 90 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d490
c00197f2:	56                   	push   esi
c00197f3:	85 c9                	test   ecx,ecx
c00197f5:	53                   	push   ebx
c00197f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197fe:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019804:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019808:	8b 02                	mov    eax,DWORD PTR [edx]
c001980a:	75 47                	jne    c0019853 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001980c:	39 c3                	cmp    ebx,eax
c001980e:	7c 47                	jl     c0019857 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019810:	8b 15 94 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d494
c0019816:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019818:	01 c1                	add    ecx,eax
c001981a:	39 d9                	cmp    ecx,ebx
c001981c:	7e 6c                	jle    c001988a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001981e:	51                   	push   ecx
c001981f:	89 d9                	mov    ecx,ebx
c0019821:	29 c1                	sub    ecx,eax
c0019823:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019826:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001982a:	53                   	push   ebx
c001982b:	68 f7 a1 02 c0       	push   0xc002a1f7
c0019830:	e8 60 8f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019835:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001983b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001983d:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c0019842:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019845:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019849:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001984c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001984f:	89 06                	mov    DWORD PTR [esi],eax
c0019851:	eb 51                	jmp    c00198a4 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019853:	39 c3                	cmp    ebx,eax
c0019855:	7d 05                	jge    c001985c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019857:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001985a:	eb 20                	jmp    c001987c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001985c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001985e:	8d 14 07             	lea    edx,[edi+eax*1]
c0019861:	39 da                	cmp    edx,ebx
c0019863:	7e 04                	jle    c0019869 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019865:	29 c3                	sub    ebx,eax
c0019867:	eb 10                	jmp    c0019879 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019869:	8b 0d 94 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d494
c001986f:	03 11                	add    edx,DWORD PTR [ecx]
c0019871:	39 da                	cmp    edx,ebx
c0019873:	7e 15                	jle    c001988a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019875:	29 c3                	sub    ebx,eax
c0019877:	29 fb                	sub    ebx,edi
c0019879:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001987c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019880:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019883:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019886:	89 06                	mov    DWORD PTR [esi],eax
c0019888:	eb 1d                	jmp    c00198a7 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001988a:	83 ec 0c             	sub    esp,0xc
c001988d:	68 0b a2 02 c0       	push   0xc002a20b
c0019892:	e8 18 00 00 00       	call   c00198af <Krnl::panic(char const*)>
c0019897:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001989d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	89 f0                	mov    eax,esi
c00198a9:	5b                   	pop    ebx
c00198aa:	5e                   	pop    esi
c00198ab:	5f                   	pop    edi
c00198ac:	c2 04 00             	ret    0x4

c00198af <Krnl::panic(char const*)>:
c00198af:	55                   	push   ebp
c00198b0:	89 e5                	mov    ebp,esp
c00198b2:	53                   	push   ebx
c00198b3:	50                   	push   eax
c00198b4:	a1 9c d4 02 c0       	mov    eax,ds:0xc002d49c
c00198b9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198bc:	85 c0                	test   eax,eax
c00198be:	74 02                	je     c00198c2 <Krnl::panic(char const*)+0x13>
c00198c0:	ff d0                	call   eax
c00198c2:	fa                   	cli    
c00198c3:	c6 05 a0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a0,0x1
c00198ca:	83 ec 08             	sub    esp,0x8
c00198cd:	c6 05 a4 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b8a4,0x0
c00198d4:	53                   	push   ebx
c00198d5:	68 25 a2 02 c0       	push   0xc002a225
c00198da:	e8 b6 8e ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00198df:	58                   	pop    eax
c00198e0:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00198e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198eb:	e8 3d 70 ff ff       	call   c001092d <setActiveTerminal(VgaText*)>
c00198f0:	83 c4 0c             	add    esp,0xc
c00198f3:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00198f8:	6a 01                	push   0x1
c00198fa:	6a 0f                	push   0xf
c00198fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019902:	e8 af 69 ff ff       	call   c00102b6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019907:	5a                   	pop    edx
c0019908:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001990d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019913:	e8 b6 72 ff ff       	call   c0010bce <VgaText::clearScreen()>
c0019918:	59                   	pop    ecx
c0019919:	58                   	pop    eax
c001991a:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001991f:	68 3e a2 02 c0       	push   0xc002a23e
c0019924:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001992a:	e8 1d 74 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001992f:	58                   	pop    eax
c0019930:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019935:	5a                   	pop    edx
c0019936:	68 e4 a2 02 c0       	push   0xc002a2e4
c001993b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019941:	e8 06 74 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019946:	59                   	pop    ecx
c0019947:	58                   	pop    eax
c0019948:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001994d:	68 5a a2 02 c0       	push   0xc002a25a
c0019952:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019958:	e8 ef 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001995d:	58                   	pop    eax
c001995e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019963:	5a                   	pop    edx
c0019964:	53                   	push   ebx
c0019965:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001996b:	e8 dc 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019970:	59                   	pop    ecx
c0019971:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019976:	5b                   	pop    ebx
c0019977:	68 7a a2 02 c0       	push   0xc002a27a
c001997c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019982:	e8 c5 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019987:	58                   	pop    eax
c0019988:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001998d:	5a                   	pop    edx
c001998e:	68 20 a3 02 c0       	push   0xc002a320
c0019993:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019999:	e8 ae 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c001999e:	59                   	pop    ecx
c001999f:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199a4:	5b                   	pop    ebx
c00199a5:	68 5a a2 02 c0       	push   0xc002a25a
c00199aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199b0:	e8 97 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00199b5:	58                   	pop    eax
c00199b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199bb:	5a                   	pop    edx
c00199bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199bf:	83 c0 0c             	add    eax,0xc
c00199c2:	50                   	push   eax
c00199c3:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ce:	e8 79 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00199d3:	59                   	pop    ecx
c00199d4:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199d9:	5b                   	pop    ebx
c00199da:	68 79 a2 02 c0       	push   0xc002a279
c00199df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199e5:	e8 62 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c00199ea:	58                   	pop    eax
c00199eb:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199f0:	5a                   	pop    edx
c00199f1:	68 4c a3 02 c0       	push   0xc002a34c
c00199f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199fc:	e8 4b 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019a01:	59                   	pop    ecx
c0019a02:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a07:	5b                   	pop    ebx
c0019a08:	68 8c a3 02 c0       	push   0xc002a38c
c0019a0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a13:	e8 34 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019a18:	58                   	pop    eax
c0019a19:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a1e:	5a                   	pop    edx
c0019a1f:	68 65 a2 02 c0       	push   0xc002a265
c0019a24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a2a:	e8 1d 73 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019a2f:	59                   	pop    ecx
c0019a30:	5b                   	pop    ebx
c0019a31:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a34:	68 7d a2 02 c0       	push   0xc002a27d
c0019a39:	e8 57 8d ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019a3e:	58                   	pop    eax
c0019a3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a42:	5a                   	pop    edx
c0019a43:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a46:	68 86 a2 02 c0       	push   0xc002a286
c0019a4b:	e8 45 8d ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019a50:	59                   	pop    ecx
c0019a51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a54:	5b                   	pop    ebx
c0019a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a57:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a5a:	68 8f a2 02 c0       	push   0xc002a28f
c0019a5f:	e8 31 8d ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019a64:	58                   	pop    eax
c0019a65:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a6a:	5a                   	pop    edx
c0019a6b:	68 d0 a3 02 c0       	push   0xc002a3d0
c0019a70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a76:	e8 d1 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019a7b:	59                   	pop    ecx
c0019a7c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a81:	5b                   	pop    ebx
c0019a82:	68 98 a2 02 c0       	push   0xc002a298
c0019a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a8d:	e8 ba 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019a92:	0f 20 c0             	mov    eax,cr0
c0019a95:	5a                   	pop    edx
c0019a96:	59                   	pop    ecx
c0019a97:	50                   	push   eax
c0019a98:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aa3:	e8 ca 72 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019aa8:	5b                   	pop    ebx
c0019aa9:	58                   	pop    eax
c0019aaa:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019aaf:	68 a2 a2 02 c0       	push   0xc002a2a2
c0019ab4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aba:	e8 8d 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019abf:	0f 20 d0             	mov    eax,cr2
c0019ac2:	5a                   	pop    edx
c0019ac3:	59                   	pop    ecx
c0019ac4:	50                   	push   eax
c0019ac5:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019aca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ad0:	e8 9d 72 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019ad5:	5b                   	pop    ebx
c0019ad6:	58                   	pop    eax
c0019ad7:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019adc:	68 ac a2 02 c0       	push   0xc002a2ac
c0019ae1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae7:	e8 60 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019aec:	0f 20 d8             	mov    eax,cr3
c0019aef:	5a                   	pop    edx
c0019af0:	59                   	pop    ecx
c0019af1:	50                   	push   eax
c0019af2:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019af7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019afd:	e8 70 72 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019b02:	5b                   	pop    ebx
c0019b03:	58                   	pop    eax
c0019b04:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b09:	68 bf a2 02 c0       	push   0xc002a2bf
c0019b0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b14:	e8 33 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019b19:	0f 20 e0             	mov    eax,cr4
c0019b1c:	5a                   	pop    edx
c0019b1d:	59                   	pop    ecx
c0019b1e:	50                   	push   eax
c0019b1f:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b2a:	e8 43 72 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019b2f:	5b                   	pop    ebx
c0019b30:	58                   	pop    eax
c0019b31:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b36:	68 c9 a2 02 c0       	push   0xc002a2c9
c0019b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b41:	e8 06 72 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019b46:	5a                   	pop    edx
c0019b47:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b4c:	59                   	pop    ecx
c0019b4d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b56:	50                   	push   eax
c0019b57:	e8 16 72 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019b5c:	5b                   	pop    ebx
c0019b5d:	58                   	pop    eax
c0019b5e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b63:	68 e0 a2 02 c0       	push   0xc002a2e0
c0019b68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b6e:	e8 d9 71 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019b73:	5a                   	pop    edx
c0019b74:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b79:	59                   	pop    ecx
c0019b7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b83:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b86:	50                   	push   eax
c0019b87:	e8 e6 71 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019b8c:	5b                   	pop    ebx
c0019b8d:	58                   	pop    eax
c0019b8e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b93:	68 e0 a2 02 c0       	push   0xc002a2e0
c0019b98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b9e:	e8 a9 71 ff ff       	call   c0010d4c <VgaText::puts(char const*)>
c0019ba3:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019ba8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019bab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019bb1:	8b 12                	mov    edx,DWORD PTR [edx]
c0019bb3:	59                   	pop    ecx
c0019bb4:	5b                   	pop    ebx
c0019bb5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019bb8:	50                   	push   eax
c0019bb9:	e8 b4 71 ff ff       	call   c0010d72 <VgaText::putx(unsigned int)>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	b2 fe                	mov    dl,0xfe
c0019bc3:	e4 60                	in     al,0x60
c0019bc5:	3c 1c                	cmp    al,0x1c
c0019bc7:	74 04                	je     c0019bcd <Krnl::panic(char const*)+0x31e>
c0019bc9:	3c 5a                	cmp    al,0x5a
c0019bcb:	75 f6                	jne    c0019bc3 <Krnl::panic(char const*)+0x314>
c0019bcd:	e4 64                	in     al,0x64
c0019bcf:	a8 02                	test   al,0x2
c0019bd1:	75 fa                	jne    c0019bcd <Krnl::panic(char const*)+0x31e>
c0019bd3:	88 d0                	mov    al,dl
c0019bd5:	e6 64                	out    0x64,al
c0019bd7:	fa                   	cli    
c0019bd8:	f4                   	hlt    
c0019bd9:	eb e8                	jmp    c0019bc3 <Krnl::panic(char const*)+0x314>

c0019bdb <Net::switchEndian16(unsigned short)>:
c0019bdb:	83 ec 04             	sub    esp,0x4
c0019bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019be2:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019be6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bea:	c1 f8 08             	sar    eax,0x8
c0019bed:	89 c2                	mov    edx,eax
c0019bef:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bf3:	c1 e0 08             	shl    eax,0x8
c0019bf6:	09 d0                	or     eax,edx
c0019bf8:	83 c4 04             	add    esp,0x4
c0019bfb:	c3                   	ret    

c0019bfc <Net::switchEndian32(unsigned int)>:
c0019bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c00:	c1 e8 18             	shr    eax,0x18
c0019c03:	89 c2                	mov    edx,eax
c0019c05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c09:	c1 e0 08             	shl    eax,0x8
c0019c0c:	25 00 00 ff 00       	and    eax,0xff0000
c0019c11:	09 c2                	or     edx,eax
c0019c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c17:	c1 e8 08             	shr    eax,0x8
c0019c1a:	25 00 ff 00 00       	and    eax,0xff00
c0019c1f:	09 c2                	or     edx,eax
c0019c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c25:	c1 e0 18             	shl    eax,0x18
c0019c28:	09 d0                	or     eax,edx
c0019c2a:	c3                   	ret    

c0019c2b <Net::crc32Calc(unsigned char*, int)>:
c0019c2b:	83 ec 10             	sub    esp,0x10
c0019c2e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c33:	75 07                	jne    c0019c3c <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c35:	b8 00 00 00 00       	mov    eax,0x0
c0019c3a:	eb 7c                	jmp    c0019cb8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c41:	7f 07                	jg     c0019c4a <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c43:	b8 00 00 00 00       	mov    eax,0x0
c0019c48:	eb 6e                	jmp    c0019cb8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c4a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c5e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c62:	7d 4e                	jge    c0019cb2 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c6c:	01 d0                	add    eax,edx
c0019c6e:	8a 00                	mov    al,BYTE PTR [eax]
c0019c70:	0f b6 c0             	movzx  eax,al
c0019c73:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c7f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c84:	7f 26                	jg     c0019cac <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8a:	83 e0 01             	and    eax,0x1
c0019c8d:	74 0d                	je     c0019c9c <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c93:	d1 e8                	shr    eax,1
c0019c95:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c9a:	eb 06                	jmp    c0019ca2 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca0:	d1 e8                	shr    eax,1
c0019ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019caa:	eb d3                	jmp    c0019c7f <Net::crc32Calc(unsigned char*, int)+0x54>
c0019cac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019cb0:	eb a8                	jmp    c0019c5a <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb6:	f7 d0                	not    eax
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	c3                   	ret    

c0019cbc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019cbc:	83 ec 1c             	sub    esp,0x1c
c0019cbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cc7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ccf:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cd4:	7f 14                	jg     c0019cea <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cda:	8d 50 01             	lea    edx,[eax+0x1]
c0019cdd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ce1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019ce4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ce8:	eb e5                	jmp    c0019ccf <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019cea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cee:	8d 50 01             	lea    edx,[eax+0x1]
c0019cf1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cf5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019cf8:	83 ec 04             	sub    esp,0x4
c0019cfb:	6a 06                	push   0x6
c0019cfd:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019d01:	50                   	push   eax
c0019d02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d06:	e8 4a 69 fe ff       	call   c0000655 <memcpy>
c0019d0b:	83 c4 10             	add    esp,0x10
c0019d0e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d13:	83 ec 04             	sub    esp,0x4
c0019d16:	6a 06                	push   0x6
c0019d18:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d1c:	50                   	push   eax
c0019d1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d21:	e8 2f 69 fe ff       	call   c0000655 <memcpy>
c0019d26:	83 c4 10             	add    esp,0x10
c0019d29:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d32:	0f b7 c0             	movzx  eax,ax
c0019d35:	c1 f8 08             	sar    eax,0x8
c0019d38:	89 c1                	mov    ecx,eax
c0019d3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d3e:	8d 50 01             	lea    edx,[eax+0x1]
c0019d41:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d45:	88 ca                	mov    dl,cl
c0019d47:	88 10                	mov    BYTE PTR [eax],dl
c0019d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d51:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d54:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d58:	88 10                	mov    BYTE PTR [eax],dl
c0019d5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d62:	83 ec 04             	sub    esp,0x4
c0019d65:	52                   	push   edx
c0019d66:	50                   	push   eax
c0019d67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d6b:	e8 e5 68 fe ff       	call   c0000655 <memcpy>
c0019d70:	83 c4 10             	add    esp,0x10
c0019d73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d77:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d7f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d83:	83 ec 08             	sub    esp,0x8
c0019d86:	50                   	push   eax
c0019d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d8b:	e8 9b fe ff ff       	call   c0019c2b <Net::crc32Calc(unsigned char*, int)>
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d9b:	c1 e8 18             	shr    eax,0x18
c0019d9e:	89 c1                	mov    ecx,eax
c0019da0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019da4:	8d 50 01             	lea    edx,[eax+0x1]
c0019da7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dab:	88 ca                	mov    dl,cl
c0019dad:	88 10                	mov    BYTE PTR [eax],dl
c0019daf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019db3:	c1 e8 10             	shr    eax,0x10
c0019db6:	89 c1                	mov    ecx,eax
c0019db8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dbc:	8d 50 01             	lea    edx,[eax+0x1]
c0019dbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dc3:	88 ca                	mov    dl,cl
c0019dc5:	88 10                	mov    BYTE PTR [eax],dl
c0019dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dcb:	c1 e8 08             	shr    eax,0x8
c0019dce:	89 c1                	mov    ecx,eax
c0019dd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd4:	8d 50 01             	lea    edx,[eax+0x1]
c0019dd7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ddb:	88 ca                	mov    dl,cl
c0019ddd:	88 10                	mov    BYTE PTR [eax],dl
c0019ddf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019de3:	8d 50 01             	lea    edx,[eax+0x1]
c0019de6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019dee:	88 10                	mov    BYTE PTR [eax],dl
c0019df0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019df4:	83 c4 1c             	add    esp,0x1c
c0019df7:	c3                   	ret    

c0019df8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019df8:	83 ec 2c             	sub    esp,0x2c
c0019dfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e03:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019e08:	83 ec 04             	sub    esp,0x4
c0019e0b:	6a 06                	push   0x6
c0019e0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e15:	83 c0 0e             	add    eax,0xe
c0019e18:	50                   	push   eax
c0019e19:	e8 37 68 fe ff       	call   c0000655 <memcpy>
c0019e1e:	83 c4 10             	add    esp,0x10
c0019e21:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e26:	83 ec 04             	sub    esp,0x4
c0019e29:	6a 06                	push   0x6
c0019e2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e33:	83 c0 08             	add    eax,0x8
c0019e36:	50                   	push   eax
c0019e37:	e8 19 68 fe ff       	call   c0000655 <memcpy>
c0019e3c:	83 c4 10             	add    esp,0x10
c0019e3f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e48:	8d 50 01             	lea    edx,[eax+0x1]
c0019e4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e4f:	8a 00                	mov    al,BYTE PTR [eax]
c0019e51:	0f b6 c0             	movzx  eax,al
c0019e54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e5d:	8d 50 01             	lea    edx,[eax+0x1]
c0019e60:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e64:	8a 00                	mov    al,BYTE PTR [eax]
c0019e66:	0f b6 c0             	movzx  eax,al
c0019e69:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e6e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e73:	c1 e0 08             	shl    eax,0x8
c0019e76:	89 c2                	mov    edx,eax
c0019e78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e7c:	09 d0                	or     eax,edx
c0019e7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e82:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e86:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e8b:	75 3a                	jne    c0019ec7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e91:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e94:	66 3d dc 05          	cmp    ax,0x5dc
c0019e98:	77 10                	ja     c0019eaa <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ea1:	0f b7 c0             	movzx  eax,ax
c0019ea4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019ea8:	eb 1d                	jmp    c0019ec7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019eaa:	83 ec 0c             	sub    esp,0xc
c0019ead:	68 f8 a3 02 c0       	push   0xc002a3f8
c0019eb2:	e8 de 88 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ebe:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019ec2:	e9 c0 00 00 00       	jmp    c0019f87 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ec7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ecb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ed1:	83 ec 04             	sub    esp,0x4
c0019ed4:	52                   	push   edx
c0019ed5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ed9:	50                   	push   eax
c0019eda:	e8 76 67 fe ff       	call   c0000655 <memcpy>
c0019edf:	83 c4 10             	add    esp,0x10
c0019ee2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ee6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019eea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019eee:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ef5:	8a 00                	mov    al,BYTE PTR [eax]
c0019ef7:	0f b6 c0             	movzx  eax,al
c0019efa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019efe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f02:	8d 50 01             	lea    edx,[eax+0x1]
c0019f05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f09:	8a 00                	mov    al,BYTE PTR [eax]
c0019f0b:	0f b6 c0             	movzx  eax,al
c0019f0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f16:	8d 50 01             	lea    edx,[eax+0x1]
c0019f19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0019f1f:	0f b6 c0             	movzx  eax,al
c0019f22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f2a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f31:	8a 00                	mov    al,BYTE PTR [eax]
c0019f33:	0f b6 c0             	movzx  eax,al
c0019f36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f3e:	c1 e0 18             	shl    eax,0x18
c0019f41:	89 c2                	mov    edx,eax
c0019f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f47:	c1 e0 10             	shl    eax,0x10
c0019f4a:	09 c2                	or     edx,eax
c0019f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f50:	c1 e0 08             	shl    eax,0x8
c0019f53:	09 d0                	or     eax,edx
c0019f55:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f61:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f65:	83 e8 04             	sub    eax,0x4
c0019f68:	83 ec 08             	sub    esp,0x8
c0019f6b:	50                   	push   eax
c0019f6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f70:	e8 b6 fc ff ff       	call   c0019c2b <Net::crc32Calc(unsigned char*, int)>
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f7c:	0f 94 c2             	sete   dl
c0019f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f83:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f86:	90                   	nop
c0019f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f8b:	83 c4 2c             	add    esp,0x2c
c0019f8e:	c2 04 00             	ret    0x4

c0019f91 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f91:	55                   	push   ebp
c0019f92:	57                   	push   edi
c0019f93:	56                   	push   esi
c0019f94:	53                   	push   ebx
c0019f95:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f9b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019fa2:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019fa4:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019fa7:	80 fb 40             	cmp    bl,0x40
c0019faa:	75 1b                	jne    c0019fc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019fac:	8a 16                	mov    dl,BYTE PTR [esi]
c0019fae:	84 d2                	test   dl,dl
c0019fb0:	0f 84 f1 00 00 00    	je     c001a0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fb6:	8d 46 01             	lea    eax,[esi+0x1]
c0019fb9:	80 fa 3a             	cmp    dl,0x3a
c0019fbc:	74 04                	je     c0019fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019fbe:	89 c6                	mov    esi,eax
c0019fc0:	eb ea                	jmp    c0019fac <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fc2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019fc5:	89 c6                	mov    esi,eax
c0019fc7:	50                   	push   eax
c0019fc8:	6a 40                	push   0x40
c0019fca:	6a 00                	push   0x0
c0019fcc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fd0:	50                   	push   eax
c0019fd1:	e8 b5 66 fe ff       	call   c000068b <memset>
c0019fd6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fdd:	31 c0                	xor    eax,eax
c0019fdf:	83 c4 10             	add    esp,0x10
c0019fe2:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fe4:	84 c9                	test   cl,cl
c0019fe6:	0f 84 bb 00 00 00    	je     c001a0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fec:	3d c7 00 00 00       	cmp    eax,0xc7
c0019ff1:	0f 8f b0 00 00 00    	jg     c001a0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ff7:	80 f9 0a             	cmp    cl,0xa
c0019ffa:	0f 85 98 00 00 00    	jne    c001a098 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a000:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a005:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a009:	a8 df                	test   al,0xdf
c001a00b:	0f 94 c1             	sete   cl
c001a00e:	3c 23                	cmp    al,0x23
c001a010:	0f 94 c2             	sete   dl
c001a013:	08 d1                	or     cl,dl
c001a015:	75 4a                	jne    c001a061 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a017:	8d 50 f7             	lea    edx,[eax-0x9]
c001a01a:	80 fa 01             	cmp    dl,0x1
c001a01d:	76 42                	jbe    c001a061 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a01f:	3c 5b                	cmp    al,0x5b
c001a021:	75 42                	jne    c001a065 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a023:	80 fb 40             	cmp    bl,0x40
c001a026:	75 39                	jne    c001a061 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a02f:	52                   	push   edx
c001a030:	e8 73 66 fe ff       	call   c00006a8 <strlen>
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	83 f8 3f             	cmp    eax,0x3f
c001a03b:	77 6a                	ja     c001a0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a03d:	50                   	push   eax
c001a03e:	50                   	push   eax
c001a03f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a043:	52                   	push   edx
c001a044:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a048:	52                   	push   edx
c001a049:	e8 dc 66 fe ff       	call   c000072a <strcpy>
c001a04e:	58                   	pop    eax
c001a04f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a053:	52                   	push   edx
c001a054:	e8 4f 66 fe ff       	call   c00006a8 <strlen>
c001a059:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a05e:	83 c4 10             	add    esp,0x10
c001a061:	31 d2                	xor    edx,edx
c001a063:	eb 3a                	jmp    c001a09f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a065:	80 fb 40             	cmp    bl,0x40
c001a068:	74 06                	je     c001a070 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a06a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a06e:	eb 20                	jmp    c001a090 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a070:	50                   	push   eax
c001a071:	50                   	push   eax
c001a072:	55                   	push   ebp
c001a073:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a077:	50                   	push   eax
c001a078:	e8 fe 66 fe ff       	call   c000077b <strcmp>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	85 c0                	test   eax,eax
c001a082:	75 dd                	jne    c001a061 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a084:	eb e4                	jmp    c001a06a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a086:	8d 50 01             	lea    edx,[eax+0x1]
c001a089:	80 f9 3d             	cmp    cl,0x3d
c001a08c:	74 1d                	je     c001a0ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a08e:	89 d0                	mov    eax,edx
c001a090:	8a 08                	mov    cl,BYTE PTR [eax]
c001a092:	84 c9                	test   cl,cl
c001a094:	75 f0                	jne    c001a086 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a096:	eb 0f                	jmp    c001a0a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a098:	8d 50 01             	lea    edx,[eax+0x1]
c001a09b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a09f:	47                   	inc    edi
c001a0a0:	89 d0                	mov    eax,edx
c001a0a2:	e9 3b ff ff ff       	jmp    c0019fe2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a0a7:	31 c0                	xor    eax,eax
c001a0a9:	eb 33                	jmp    c001a0de <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a0ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a0b2:	50                   	push   eax
c001a0b3:	50                   	push   eax
c001a0b4:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a0b8:	50                   	push   eax
c001a0b9:	56                   	push   esi
c001a0ba:	e8 bc 66 fe ff       	call   c000077b <strcmp>
c001a0bf:	83 c4 10             	add    esp,0x10
c001a0c2:	85 c0                	test   eax,eax
c001a0c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0c8:	75 97                	jne    c001a061 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0ca:	51                   	push   ecx
c001a0cb:	51                   	push   ecx
c001a0cc:	52                   	push   edx
c001a0cd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0d4:	e8 51 66 fe ff       	call   c000072a <strcpy>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	b0 01                	mov    al,0x1
c001a0de:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0e4:	5b                   	pop    ebx
c001a0e5:	5e                   	pop    esi
c001a0e6:	5f                   	pop    edi
c001a0e7:	5d                   	pop    ebp
c001a0e8:	c3                   	ret    

c001a0e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0e9:	57                   	push   edi
c001a0ea:	56                   	push   esi
c001a0eb:	53                   	push   ebx
c001a0ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0f2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0f9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a100:	53                   	push   ebx
c001a101:	e8 a2 65 fe ff       	call   c00006a8 <strlen>
c001a106:	89 34 24             	mov    DWORD PTR [esp],esi
c001a109:	89 c7                	mov    edi,eax
c001a10b:	e8 98 65 fe ff       	call   c00006a8 <strlen>
c001a110:	83 c4 10             	add    esp,0x10
c001a113:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a117:	3d ff 00 00 00       	cmp    eax,0xff
c001a11c:	0f 87 d3 00 00 00    	ja     c001a1f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a122:	57                   	push   edi
c001a123:	57                   	push   edi
c001a124:	56                   	push   esi
c001a125:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a129:	56                   	push   esi
c001a12a:	e8 fb 65 fe ff       	call   c000072a <strcpy>
c001a12f:	58                   	pop    eax
c001a130:	5a                   	pop    edx
c001a131:	68 a6 a7 02 c0       	push   0xc002a7a6
c001a136:	56                   	push   esi
c001a137:	e8 a5 66 fe ff       	call   c00007e1 <strcat>
c001a13c:	59                   	pop    ecx
c001a13d:	5f                   	pop    edi
c001a13e:	53                   	push   ebx
c001a13f:	56                   	push   esi
c001a140:	e8 9c 66 fe ff       	call   c00007e1 <strcat>
c001a145:	58                   	pop    eax
c001a146:	5a                   	pop    edx
c001a147:	68 44 a4 02 c0       	push   0xc002a444
c001a14c:	56                   	push   esi
c001a14d:	e8 8f 66 fe ff       	call   c00007e1 <strcat>
c001a152:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a159:	e8 76 53 ff ff       	call   c000f4d4 <malloc>
c001a15e:	83 c4 0c             	add    esp,0xc
c001a161:	89 c3                	mov    ebx,eax
c001a163:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001a169:	56                   	push   esi
c001a16a:	50                   	push   eax
c001a16b:	e8 54 8b ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001a170:	83 c4 10             	add    esp,0x10
c001a173:	85 db                	test   ebx,ebx
c001a175:	74 7e                	je     c001a1f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a177:	51                   	push   ecx
c001a178:	51                   	push   ecx
c001a179:	6a 01                	push   0x1
c001a17b:	53                   	push   ebx
c001a17c:	e8 a7 8b ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	85 c0                	test   eax,eax
c001a186:	74 08                	je     c001a190 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a188:	83 ec 0c             	sub    esp,0xc
c001a18b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a18d:	53                   	push   ebx
c001a18e:	eb 5f                	jmp    c001a1ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a190:	52                   	push   edx
c001a191:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a195:	50                   	push   eax
c001a196:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a19a:	50                   	push   eax
c001a19b:	53                   	push   ebx
c001a19c:	e8 33 8e ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c001a1a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1a5:	83 c4 10             	add    esp,0x10
c001a1a8:	89 c1                	mov    ecx,eax
c001a1aa:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a1ae:	74 31                	je     c001a1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1b0:	83 ec 0c             	sub    esp,0xc
c001a1b3:	50                   	push   eax
c001a1b4:	e8 1b 53 ff ff       	call   c000f4d4 <malloc>
c001a1b9:	89 c6                	mov    esi,eax
c001a1bb:	58                   	pop    eax
c001a1bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1be:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1c2:	52                   	push   edx
c001a1c3:	56                   	push   esi
c001a1c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1cc:	53                   	push   ebx
c001a1cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1d0:	83 c4 20             	add    esp,0x20
c001a1d3:	85 c0                	test   eax,eax
c001a1d5:	75 0a                	jne    c001a1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1db:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a1df:	74 18                	je     c001a1f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a1e1:	83 ec 0c             	sub    esp,0xc
c001a1e4:	53                   	push   ebx
c001a1e5:	e8 9c 8b ff ff       	call   c0012d86 <File::close()>
c001a1ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	31 c0                	xor    eax,eax
c001a1f7:	eb 3b                	jmp    c001a234 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1f9:	83 ec 0c             	sub    esp,0xc
c001a1fc:	53                   	push   ebx
c001a1fd:	e8 84 8b ff ff       	call   c0012d86 <File::close()>
c001a202:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a207:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a20a:	83 c4 0c             	add    esp,0xc
c001a20d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a214:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a21b:	56                   	push   esi
c001a21c:	e8 70 fd ff ff       	call   c0019f91 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a221:	89 34 24             	mov    DWORD PTR [esp],esi
c001a224:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a228:	e8 b7 52 ff ff       	call   c000f4e4 <free>
c001a22d:	83 c4 10             	add    esp,0x10
c001a230:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a234:	81 c4 20 01 00 00    	add    esp,0x120
c001a23a:	5b                   	pop    ebx
c001a23b:	5e                   	pop    esi
c001a23c:	5f                   	pop    edi
c001a23d:	c3                   	ret    

c001a23e <Reg::getLine(char*, char*, char*)>:
c001a23e:	57                   	push   edi
c001a23f:	56                   	push   esi
c001a240:	53                   	push   ebx
c001a241:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a245:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a249:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a24d:	57                   	push   edi
c001a24e:	56                   	push   esi
c001a24f:	53                   	push   ebx
c001a250:	68 49 a4 02 c0       	push   0xc002a449
c001a255:	e8 8f fe ff ff       	call   c001a0e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	84 c0                	test   al,al
c001a25f:	75 10                	jne    c001a271 <Reg::getLine(char*, char*, char*)+0x33>
c001a261:	57                   	push   edi
c001a262:	56                   	push   esi
c001a263:	53                   	push   ebx
c001a264:	68 6e a4 02 c0       	push   0xc002a46e
c001a269:	e8 7b fe ff ff       	call   c001a0e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	5b                   	pop    ebx
c001a272:	5e                   	pop    esi
c001a273:	5f                   	pop    edi
c001a274:	c3                   	ret    

c001a275 <Reg::readInt(char*, char*, int*)>:
c001a275:	55                   	push   ebp
c001a276:	57                   	push   edi
c001a277:	56                   	push   esi
c001a278:	53                   	push   ebx
c001a279:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a27f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a283:	57                   	push   edi
c001a284:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a28b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a292:	e8 a7 ff ff ff       	call   c001a23e <Reg::getLine(char*, char*, char*)>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	84 c0                	test   al,al
c001a29c:	0f 84 b3 00 00 00    	je     c001a355 <Reg::readInt(char*, char*, int*)+0xe0>
c001a2a2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a2a6:	80 fa 2b             	cmp    dl,0x2b
c001a2a9:	74 0c                	je     c001a2b7 <Reg::readInt(char*, char*, int*)+0x42>
c001a2ab:	80 fa 2d             	cmp    dl,0x2d
c001a2ae:	75 0e                	jne    c001a2be <Reg::readInt(char*, char*, int*)+0x49>
c001a2b0:	ba 01 00 00 00       	mov    edx,0x1
c001a2b5:	eb 0b                	jmp    c001a2c2 <Reg::readInt(char*, char*, int*)+0x4d>
c001a2b7:	ba 01 00 00 00       	mov    edx,0x1
c001a2bc:	eb 02                	jmp    c001a2c0 <Reg::readInt(char*, char*, int*)+0x4b>
c001a2be:	31 d2                	xor    edx,edx
c001a2c0:	31 c0                	xor    eax,eax
c001a2c2:	be 0a 00 00 00       	mov    esi,0xa
c001a2c7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2cc:	75 20                	jne    c001a2ee <Reg::readInt(char*, char*, int*)+0x79>
c001a2ce:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2d2:	80 f9 78             	cmp    cl,0x78
c001a2d5:	75 0a                	jne    c001a2e1 <Reg::readInt(char*, char*, int*)+0x6c>
c001a2d7:	83 c2 02             	add    edx,0x2
c001a2da:	be 10 00 00 00       	mov    esi,0x10
c001a2df:	eb 0d                	jmp    c001a2ee <Reg::readInt(char*, char*, int*)+0x79>
c001a2e1:	80 f9 62             	cmp    cl,0x62
c001a2e4:	75 08                	jne    c001a2ee <Reg::readInt(char*, char*, int*)+0x79>
c001a2e6:	83 c2 02             	add    edx,0x2
c001a2e9:	be 02 00 00 00       	mov    esi,0x2
c001a2ee:	01 d7                	add    edi,edx
c001a2f0:	31 d2                	xor    edx,edx
c001a2f2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2f4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2f8:	80 fb 0d             	cmp    bl,0xd
c001a2fb:	0f 94 c3             	sete   bl
c001a2fe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a303:	0f 94 c1             	sete   cl
c001a306:	08 cb                	or     bl,cl
c001a308:	75 3a                	jne    c001a344 <Reg::readInt(char*, char*, int*)+0xcf>
c001a30a:	0f af d6             	imul   edx,esi
c001a30d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a312:	83 fe 10             	cmp    esi,0x10
c001a315:	75 26                	jne    c001a33d <Reg::readInt(char*, char*, int*)+0xc8>
c001a317:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a31b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a31e:	89 e9                	mov    ecx,ebp
c001a320:	80 f9 05             	cmp    cl,0x5
c001a323:	77 06                	ja     c001a32b <Reg::readInt(char*, char*, int*)+0xb6>
c001a325:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a329:	eb 16                	jmp    c001a341 <Reg::readInt(char*, char*, int*)+0xcc>
c001a32b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a32f:	83 e9 61             	sub    ecx,0x61
c001a332:	80 f9 05             	cmp    cl,0x5
c001a335:	77 06                	ja     c001a33d <Reg::readInt(char*, char*, int*)+0xc8>
c001a337:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a33b:	eb 04                	jmp    c001a341 <Reg::readInt(char*, char*, int*)+0xcc>
c001a33d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a341:	47                   	inc    edi
c001a342:	eb ae                	jmp    c001a2f2 <Reg::readInt(char*, char*, int*)+0x7d>
c001a344:	84 c0                	test   al,al
c001a346:	74 02                	je     c001a34a <Reg::readInt(char*, char*, int*)+0xd5>
c001a348:	f7 da                	neg    edx
c001a34a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a351:	89 10                	mov    DWORD PTR [eax],edx
c001a353:	88 d8                	mov    al,bl
c001a355:	81 c4 ec 00 00 00    	add    esp,0xec
c001a35b:	5b                   	pop    ebx
c001a35c:	5e                   	pop    esi
c001a35d:	5f                   	pop    edi
c001a35e:	5d                   	pop    ebp
c001a35f:	c3                   	ret    

c001a360 <Reg::readString(char*, char*, char*, int)>:
c001a360:	57                   	push   edi
c001a361:	56                   	push   esi
c001a362:	53                   	push   ebx
c001a363:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a369:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a370:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a374:	57                   	push   edi
c001a375:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a37c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a383:	e8 b6 fe ff ff       	call   c001a23e <Reg::getLine(char*, char*, char*)>
c001a388:	83 c4 10             	add    esp,0x10
c001a38b:	89 c6                	mov    esi,eax
c001a38d:	84 c0                	test   al,al
c001a38f:	74 44                	je     c001a3d5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a391:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a398:	31 c0                	xor    eax,eax
c001a39a:	4a                   	dec    edx
c001a39b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a39e:	84 c9                	test   cl,cl
c001a3a0:	74 0f                	je     c001a3b1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a3a2:	39 c2                	cmp    edx,eax
c001a3a4:	7e 0b                	jle    c001a3b1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a3a6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a3a9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a3ae:	40                   	inc    eax
c001a3af:	eb ea                	jmp    c001a39b <Reg::readString(char*, char*, char*, int)+0x3b>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	53                   	push   ebx
c001a3b5:	e8 ee 62 fe ff       	call   c00006a8 <strlen>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3c2:	75 11                	jne    c001a3d5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	53                   	push   ebx
c001a3c8:	e8 db 62 fe ff       	call   c00006a8 <strlen>
c001a3cd:	83 c4 10             	add    esp,0x10
c001a3d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3d5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3db:	89 f0                	mov    eax,esi
c001a3dd:	5b                   	pop    ebx
c001a3de:	5e                   	pop    esi
c001a3df:	5f                   	pop    edi
c001a3e0:	c3                   	ret    

c001a3e1 <Reg::readBool(char*, char*, bool*)>:
c001a3e1:	83 ec 20             	sub    esp,0x20
c001a3e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3e8:	50                   	push   eax
c001a3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f1:	e8 7f fe ff ff       	call   c001a275 <Reg::readInt(char*, char*, int*)>
c001a3f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3ff:	0f 95 02             	setne  BYTE PTR [edx]
c001a402:	83 c4 2c             	add    esp,0x2c
c001a405:	c3                   	ret    

c001a406 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a406:	53                   	push   ebx
c001a407:	83 ec 1c             	sub    esp,0x1c
c001a40a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a40e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a412:	50                   	push   eax
c001a413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a41b:	e8 c1 ff ff ff       	call   c001a3e1 <Reg::readBool(char*, char*, bool*)>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	84 c0                	test   al,al
c001a425:	74 04                	je     c001a42b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a427:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a42b:	88 d8                	mov    al,bl
c001a42d:	83 c4 18             	add    esp,0x18
c001a430:	5b                   	pop    ebx
c001a431:	c3                   	ret    

c001a432 <Reg::readIntWithDefault(char*, char*, int)>:
c001a432:	53                   	push   ebx
c001a433:	83 ec 1c             	sub    esp,0x1c
c001a436:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a43a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a43e:	50                   	push   eax
c001a43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a447:	e8 29 fe ff ff       	call   c001a275 <Reg::readInt(char*, char*, int*)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	84 c0                	test   al,al
c001a451:	74 04                	je     c001a457 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a453:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a457:	89 d8                	mov    eax,ebx
c001a459:	83 c4 18             	add    esp,0x18
c001a45c:	5b                   	pop    ebx
c001a45d:	c3                   	ret    

c001a45e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a45e:	57                   	push   edi
c001a45f:	56                   	push   esi
c001a460:	53                   	push   ebx
c001a461:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a465:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a469:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a46d:	56                   	push   esi
c001a46e:	53                   	push   ebx
c001a46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a477:	e8 e4 fe ff ff       	call   c001a360 <Reg::readString(char*, char*, char*, int)>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	84 c0                	test   al,al
c001a481:	75 1b                	jne    c001a49e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a483:	50                   	push   eax
c001a484:	56                   	push   esi
c001a485:	4e                   	dec    esi
c001a486:	6a 00                	push   0x0
c001a488:	53                   	push   ebx
c001a489:	e8 fd 61 fe ff       	call   c000068b <memset>
c001a48e:	83 c4 0c             	add    esp,0xc
c001a491:	56                   	push   esi
c001a492:	57                   	push   edi
c001a493:	53                   	push   ebx
c001a494:	89 fb                	mov    ebx,edi
c001a496:	e8 ba 61 fe ff       	call   c0000655 <memcpy>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	89 d8                	mov    eax,ebx
c001a4a0:	5b                   	pop    ebx
c001a4a1:	5e                   	pop    esi
c001a4a2:	5f                   	pop    edi
c001a4a3:	c3                   	ret    

c001a4a4 <Sys::exit(regs*)>:
c001a4a4:	83 ec 18             	sub    esp,0x18
c001a4a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4ab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4ae:	e8 ce 32 00 00       	call   c001d781 <terminateTask(int)>
c001a4b3:	83 c8 ff             	or     eax,0xffffffff
c001a4b6:	83 c4 1c             	add    esp,0x1c
c001a4b9:	89 c2                	mov    edx,eax
c001a4bb:	c3                   	ret    

c001a4bc <Sys::getCwd(regs*)>:
c001a4bc:	83 ec 10             	sub    esp,0x10
c001a4bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4c3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4d1:	e8 5f 8b ff ff       	call   c0013035 <getcwd(Process*, char*, int)>
c001a4d6:	83 c4 1c             	add    esp,0x1c
c001a4d9:	99                   	cdq    
c001a4da:	c3                   	ret    

c001a4db <Sys::getPID(regs*)>:
c001a4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4e5:	99                   	cdq    
c001a4e6:	c3                   	ret    

c001a4e7 <Sys::loadDLL(regs*)>:
c001a4e7:	56                   	push   esi
c001a4e8:	53                   	push   ebx
c001a4e9:	31 d2                	xor    edx,edx
c001a4eb:	51                   	push   ecx
c001a4ec:	b8 01 00 00 00       	mov    eax,0x1
c001a4f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4f5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4f9:	0f 84 8c 00 00 00    	je     c001a58b <Sys::loadDLL(regs*)+0xa4>
c001a4ff:	83 ec 0c             	sub    esp,0xc
c001a502:	68 14 01 00 00       	push   0x114
c001a507:	e8 c8 4f ff ff       	call   c000f4d4 <malloc>
c001a50c:	83 c4 0c             	add    esp,0xc
c001a50f:	89 c3                	mov    ebx,eax
c001a511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a516:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a519:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a51c:	53                   	push   ebx
c001a51d:	e8 a2 87 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	31 d2                	xor    edx,edx
c001a527:	b8 02 00 00 00       	mov    eax,0x2
c001a52c:	85 db                	test   ebx,ebx
c001a52e:	74 5b                	je     c001a58b <Sys::loadDLL(regs*)+0xa4>
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	53                   	push   ebx
c001a534:	e8 5d 8a ff ff       	call   c0012f96 <File::exists()>
c001a539:	83 c4 10             	add    esp,0x10
c001a53c:	84 c0                	test   al,al
c001a53e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a540:	75 11                	jne    c001a553 <Sys::loadDLL(regs*)+0x6c>
c001a542:	83 ec 0c             	sub    esp,0xc
c001a545:	53                   	push   ebx
c001a546:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	b8 03 00 00 00       	mov    eax,0x3
c001a551:	eb 36                	jmp    c001a589 <Sys::loadDLL(regs*)+0xa2>
c001a553:	83 ec 0c             	sub    esp,0xc
c001a556:	53                   	push   ebx
c001a557:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a55a:	58                   	pop    eax
c001a55b:	5a                   	pop    edx
c001a55c:	6a 00                	push   0x0
c001a55e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a561:	e8 64 21 00 00       	call   c001c6ca <Thr::loadDLL(char const*, bool)>
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	89 c1                	mov    ecx,eax
c001a56b:	31 d2                	xor    edx,edx
c001a56d:	b8 04 00 00 00       	mov    eax,0x4
c001a572:	85 c9                	test   ecx,ecx
c001a574:	74 15                	je     c001a58b <Sys::loadDLL(regs*)+0xa4>
c001a576:	53                   	push   ebx
c001a577:	53                   	push   ebx
c001a578:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c001a57e:	51                   	push   ecx
c001a57f:	e8 55 23 00 00       	call   c001c8d9 <Thr::executeDLL(unsigned long, void*)>
c001a584:	83 c4 10             	add    esp,0x10
c001a587:	31 c0                	xor    eax,eax
c001a589:	31 d2                	xor    edx,edx
c001a58b:	59                   	pop    ecx
c001a58c:	5b                   	pop    ebx
c001a58d:	5e                   	pop    esi
c001a58e:	c3                   	ret    

c001a58f <Sys::read(regs*)>:
c001a58f:	57                   	push   edi
c001a590:	56                   	push   esi
c001a591:	53                   	push   ebx
c001a592:	83 ec 10             	sub    esp,0x10
c001a595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a599:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a59c:	83 f8 02             	cmp    eax,0x2
c001a59f:	77 10                	ja     c001a5b1 <Sys::read(regs*)+0x22>
c001a5a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5a9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a5af:	eb 0e                	jmp    c001a5bf <Sys::read(regs*)+0x30>
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	50                   	push   eax
c001a5b5:	e8 95 70 ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	89 c1                	mov    ecx,eax
c001a5bf:	83 c8 ff             	or     eax,0xffffffff
c001a5c2:	85 c9                	test   ecx,ecx
c001a5c4:	89 c2                	mov    edx,eax
c001a5c6:	74 28                	je     c001a5f0 <Sys::read(regs*)+0x61>
c001a5c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5d0:	31 ff                	xor    edi,edi
c001a5d2:	83 ec 0c             	sub    esp,0xc
c001a5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5db:	52                   	push   edx
c001a5dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5df:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5e2:	57                   	push   edi
c001a5e3:	56                   	push   esi
c001a5e4:	51                   	push   ecx
c001a5e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5ec:	83 c4 20             	add    esp,0x20
c001a5ef:	99                   	cdq    
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	5b                   	pop    ebx
c001a5f4:	5e                   	pop    esi
c001a5f5:	5f                   	pop    edi
c001a5f6:	c3                   	ret    

c001a5f7 <Sys::sbrk(regs*)>:
c001a5f7:	56                   	push   esi
c001a5f8:	53                   	push   ebx
c001a5f9:	50                   	push   eax
c001a5fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a603:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a606:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a609:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a60f:	85 db                	test   ebx,ebx
c001a611:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a614:	74 02                	je     c001a618 <Sys::sbrk(regs*)+0x21>
c001a616:	79 06                	jns    c001a61e <Sys::sbrk(regs*)+0x27>
c001a618:	89 f0                	mov    eax,esi
c001a61a:	31 d2                	xor    edx,edx
c001a61c:	eb 2a                	jmp    c001a648 <Sys::sbrk(regs*)+0x51>
c001a61e:	83 c8 ff             	or     eax,0xffffffff
c001a621:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a627:	89 c2                	mov    edx,eax
c001a629:	77 1d                	ja     c001a648 <Sys::sbrk(regs*)+0x51>
c001a62b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a631:	50                   	push   eax
c001a632:	c1 ea 0c             	shr    edx,0xc
c001a635:	68 07 04 00 00       	push   0x407
c001a63a:	52                   	push   edx
c001a63b:	51                   	push   ecx
c001a63c:	e8 2f 79 ff ff       	call   c0011f70 <VAS::allocatePages(int, int)>
c001a641:	89 f0                	mov    eax,esi
c001a643:	31 d2                	xor    edx,edx
c001a645:	83 c4 10             	add    esp,0x10
c001a648:	59                   	pop    ecx
c001a649:	5b                   	pop    ebx
c001a64a:	5e                   	pop    esi
c001a64b:	c3                   	ret    

c001a64c <Sys::setCwd(regs*)>:
c001a64c:	83 ec 14             	sub    esp,0x14
c001a64f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a653:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a65b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a65e:	e8 fc 89 ff ff       	call   c001305f <setcwd(Process*, char*)>
c001a663:	83 c4 1c             	add    esp,0x1c
c001a666:	99                   	cdq    
c001a667:	c3                   	ret    

c001a668 <Sys::write(regs*)>:
c001a668:	57                   	push   edi
c001a669:	56                   	push   esi
c001a66a:	53                   	push   ebx
c001a66b:	83 ec 10             	sub    esp,0x10
c001a66e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a672:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a675:	83 f8 02             	cmp    eax,0x2
c001a678:	77 10                	ja     c001a68a <Sys::write(regs*)+0x22>
c001a67a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a67f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a682:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a688:	eb 0e                	jmp    c001a698 <Sys::write(regs*)+0x30>
c001a68a:	83 ec 0c             	sub    esp,0xc
c001a68d:	50                   	push   eax
c001a68e:	e8 bc 6f ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	89 c1                	mov    ecx,eax
c001a698:	83 c8 ff             	or     eax,0xffffffff
c001a69b:	85 c9                	test   ecx,ecx
c001a69d:	89 c2                	mov    edx,eax
c001a69f:	74 28                	je     c001a6c9 <Sys::write(regs*)+0x61>
c001a6a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6a9:	31 ff                	xor    edi,edi
c001a6ab:	83 ec 0c             	sub    esp,0xc
c001a6ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6b0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a6b4:	52                   	push   edx
c001a6b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a6b8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a6bb:	57                   	push   edi
c001a6bc:	56                   	push   esi
c001a6bd:	51                   	push   ecx
c001a6be:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6c5:	83 c4 20             	add    esp,0x20
c001a6c8:	99                   	cdq    
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	5b                   	pop    ebx
c001a6cd:	5e                   	pop    esi
c001a6ce:	5f                   	pop    edi
c001a6cf:	c3                   	ret    

c001a6d0 <Sys::yield(regs*)>:
c001a6d0:	57                   	push   edi
c001a6d1:	56                   	push   esi
c001a6d2:	53                   	push   ebx
c001a6d3:	e8 66 26 00 00       	call   c001cd3e <lockScheduler()>
c001a6d8:	e8 9d 29 00 00       	call   c001d07a <schedule()>
c001a6dd:	e8 5e 26 00 00       	call   c001cd40 <unlockScheduler()>
c001a6e2:	8b 35 f0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cff0
c001a6e8:	8b 3d f4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cff4
c001a6ee:	89 f0                	mov    eax,esi
c001a6f0:	89 fb                	mov    ebx,edi
c001a6f2:	89 f1                	mov    ecx,esi
c001a6f4:	c1 e0 07             	shl    eax,0x7
c001a6f7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a6fb:	25 80 30 0f 00       	and    eax,0xf3080
c001a700:	c1 eb 17             	shr    ebx,0x17
c001a703:	31 c8                	xor    eax,ecx
c001a705:	89 da                	mov    edx,ebx
c001a707:	5b                   	pop    ebx
c001a708:	5e                   	pop    esi
c001a709:	5f                   	pop    edi
c001a70a:	c3                   	ret    

c001a70b <sysCallSeekDir(regs*)>:
c001a70b:	31 c0                	xor    eax,eax
c001a70d:	31 d2                	xor    edx,edx
c001a70f:	c3                   	ret    

c001a710 <sysCallTellDir(regs*)>:
c001a710:	31 c0                	xor    eax,eax
c001a712:	31 d2                	xor    edx,edx
c001a714:	c3                   	ret    

c001a715 <sysCallVerify(regs*)>:
c001a715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a719:	31 d2                	xor    edx,edx
c001a71b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a71e:	c3                   	ret    

c001a71f <sysCallGetArgc(regs*)>:
c001a71f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a727:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a72d:	99                   	cdq    
c001a72e:	c3                   	ret    

c001a72f <sysFormatDisk(regs*)>:
c001a72f:	56                   	push   esi
c001a730:	53                   	push   ebx
c001a731:	53                   	push   ebx
c001a732:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a736:	8b 1d e8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cae8
c001a73c:	eb 25                	jmp    c001a763 <sysFormatDisk(regs*)+0x34>
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a744:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a746:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a749:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a74c:	50                   	push   eax
c001a74d:	ff 34 85 80 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd3080]
c001a754:	53                   	push   ebx
c001a755:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a758:	83 c4 20             	add    esp,0x20
c001a75b:	83 f8 08             	cmp    eax,0x8
c001a75e:	75 12                	jne    c001a772 <sysFormatDisk(regs*)+0x43>
c001a760:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a763:	85 db                	test   ebx,ebx
c001a765:	75 d7                	jne    c001a73e <sysFormatDisk(regs*)+0xf>
c001a767:	59                   	pop    ecx
c001a768:	b8 03 00 00 00       	mov    eax,0x3
c001a76d:	31 d2                	xor    edx,edx
c001a76f:	5b                   	pop    ebx
c001a770:	5e                   	pop    esi
c001a771:	c3                   	ret    
c001a772:	85 c0                	test   eax,eax
c001a774:	74 1b                	je     c001a791 <sysFormatDisk(regs*)+0x62>
c001a776:	83 f8 09             	cmp    eax,0x9
c001a779:	74 0b                	je     c001a786 <sysFormatDisk(regs*)+0x57>
c001a77b:	59                   	pop    ecx
c001a77c:	b8 02 00 00 00       	mov    eax,0x2
c001a781:	31 d2                	xor    edx,edx
c001a783:	5b                   	pop    ebx
c001a784:	5e                   	pop    esi
c001a785:	c3                   	ret    
c001a786:	59                   	pop    ecx
c001a787:	b8 01 00 00 00       	mov    eax,0x1
c001a78c:	31 d2                	xor    edx,edx
c001a78e:	5b                   	pop    ebx
c001a78f:	5e                   	pop    esi
c001a790:	c3                   	ret    
c001a791:	59                   	pop    ecx
c001a792:	31 c0                	xor    eax,eax
c001a794:	31 d2                	xor    edx,edx
c001a796:	5b                   	pop    ebx
c001a797:	5e                   	pop    esi
c001a798:	c3                   	ret    

c001a799 <sysSetDiskVolumeLabel(regs*)>:
c001a799:	56                   	push   esi
c001a79a:	53                   	push   ebx
c001a79b:	53                   	push   ebx
c001a79c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a7a3:	83 f8 19             	cmp    eax,0x19
c001a7a6:	77 29                	ja     c001a7d1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7a8:	8b 0c 85 80 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3080]
c001a7af:	85 c9                	test   ecx,ecx
c001a7b1:	74 1e                	je     c001a7d1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7b3:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a7b6:	85 d2                	test   edx,edx
c001a7b8:	74 17                	je     c001a7d1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7ba:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a7c0:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a7c2:	52                   	push   edx
c001a7c3:	50                   	push   eax
c001a7c4:	51                   	push   ecx
c001a7c5:	53                   	push   ebx
c001a7c6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	99                   	cdq    
c001a7cd:	59                   	pop    ecx
c001a7ce:	5b                   	pop    ebx
c001a7cf:	5e                   	pop    esi
c001a7d0:	c3                   	ret    
c001a7d1:	59                   	pop    ecx
c001a7d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a7d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7dc:	5b                   	pop    ebx
c001a7dd:	5e                   	pop    esi
c001a7de:	c3                   	ret    

c001a7df <sysGetDiskVolumeLabel(regs*)>:
c001a7df:	57                   	push   edi
c001a7e0:	56                   	push   esi
c001a7e1:	53                   	push   ebx
c001a7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a7e9:	83 fa 19             	cmp    edx,0x19
c001a7ec:	77 34                	ja     c001a822 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7ee:	8b 0c 95 80 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3080]
c001a7f5:	85 c9                	test   ecx,ecx
c001a7f7:	74 29                	je     c001a822 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7f9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a7fc:	85 db                	test   ebx,ebx
c001a7fe:	74 22                	je     c001a822 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a800:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a803:	85 c0                	test   eax,eax
c001a805:	74 1b                	je     c001a822 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a807:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a80d:	83 ec 0c             	sub    esp,0xc
c001a810:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a812:	50                   	push   eax
c001a813:	53                   	push   ebx
c001a814:	52                   	push   edx
c001a815:	51                   	push   ecx
c001a816:	56                   	push   esi
c001a817:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a81a:	83 c4 20             	add    esp,0x20
c001a81d:	99                   	cdq    
c001a81e:	5b                   	pop    ebx
c001a81f:	5e                   	pop    esi
c001a820:	5f                   	pop    edi
c001a821:	c3                   	ret    
c001a822:	5b                   	pop    ebx
c001a823:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a828:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a82d:	5e                   	pop    esi
c001a82e:	5f                   	pop    edi
c001a82f:	c3                   	ret    

c001a830 <sysShutdown(regs*)>:
c001a830:	83 ec 0c             	sub    esp,0xc
c001a833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a837:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a83a:	85 c0                	test   eax,eax
c001a83c:	74 18                	je     c001a856 <sysShutdown(regs*)+0x26>
c001a83e:	83 f8 01             	cmp    eax,0x1
c001a841:	74 38                	je     c001a87b <sysShutdown(regs*)+0x4b>
c001a843:	83 f8 02             	cmp    eax,0x2
c001a846:	74 24                	je     c001a86c <sysShutdown(regs*)+0x3c>
c001a848:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a84d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a852:	83 c4 0c             	add    esp,0xc
c001a855:	c3                   	ret    
c001a856:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001a85b:	8b 10                	mov    edx,DWORD PTR [eax]
c001a85d:	6a 00                	push   0x0
c001a85f:	6a 00                	push   0x0
c001a861:	6a 00                	push   0x0
c001a863:	50                   	push   eax
c001a864:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a867:	83 c4 10             	add    esp,0x10
c001a86a:	eb dc                	jmp    c001a848 <sysShutdown(regs*)+0x18>
c001a86c:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001a871:	8b 10                	mov    edx,DWORD PTR [eax]
c001a873:	6a 00                	push   0x0
c001a875:	6a 00                	push   0x0
c001a877:	6a 01                	push   0x1
c001a879:	eb e8                	jmp    c001a863 <sysShutdown(regs*)+0x33>
c001a87b:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c001a880:	85 c0                	test   eax,eax
c001a882:	74 02                	je     c001a886 <sysShutdown(regs*)+0x56>
c001a884:	ff d0                	call   eax
c001a886:	31 c0                	xor    eax,eax
c001a888:	31 d2                	xor    edx,edx
c001a88a:	83 c4 0c             	add    esp,0xc
c001a88d:	c3                   	ret    

c001a88e <sysCallRealpath(regs*)>:
c001a88e:	83 ec 0c             	sub    esp,0xc
c001a891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a895:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a898:	85 d2                	test   edx,edx
c001a89a:	74 07                	je     c001a8a3 <sysCallRealpath(regs*)+0x15>
c001a89c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a89f:	85 c0                	test   eax,eax
c001a8a1:	75 0b                	jne    c001a8ae <sysCallRealpath(regs*)+0x20>
c001a8a3:	b8 01 00 00 00       	mov    eax,0x1
c001a8a8:	31 d2                	xor    edx,edx
c001a8aa:	83 c4 0c             	add    esp,0xc
c001a8ad:	c3                   	ret    
c001a8ae:	51                   	push   ecx
c001a8af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a8b5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a8b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a8be:	51                   	push   ecx
c001a8bf:	52                   	push   edx
c001a8c0:	50                   	push   eax
c001a8c1:	e8 54 82 ff ff       	call   c0012b1a <standardiseFiles(char*, char const*, char const*)>
c001a8c6:	83 c4 10             	add    esp,0x10
c001a8c9:	31 c0                	xor    eax,eax
c001a8cb:	31 d2                	xor    edx,edx
c001a8cd:	83 c4 0c             	add    esp,0xc
c001a8d0:	c3                   	ret    

c001a8d1 <sysCallReadDir(regs*)>:
c001a8d1:	53                   	push   ebx
c001a8d2:	83 ec 18             	sub    esp,0x18
c001a8d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a8dc:	83 f8 02             	cmp    eax,0x2
c001a8df:	76 53                	jbe    c001a934 <sysCallReadDir(regs*)+0x63>
c001a8e1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8e4:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a8ea:	77 4f                	ja     c001a93b <sysCallReadDir(regs*)+0x6a>
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	50                   	push   eax
c001a8f0:	e8 5a 6d ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001a8f5:	83 c4 10             	add    esp,0x10
c001a8f8:	85 c0                	test   eax,eax
c001a8fa:	74 50                	je     c001a94c <sysCallReadDir(regs*)+0x7b>
c001a8fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a904:	83 ec 0c             	sub    esp,0xc
c001a907:	8b 10                	mov    edx,DWORD PTR [eax]
c001a909:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a90d:	51                   	push   ecx
c001a90e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a911:	6a 00                	push   0x0
c001a913:	68 10 01 00 00       	push   0x110
c001a918:	50                   	push   eax
c001a919:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a91c:	83 c4 20             	add    esp,0x20
c001a91f:	85 c0                	test   eax,eax
c001a921:	74 38                	je     c001a95b <sysCallReadDir(regs*)+0x8a>
c001a923:	83 f8 07             	cmp    eax,0x7
c001a926:	74 0c                	je     c001a934 <sysCallReadDir(regs*)+0x63>
c001a928:	b8 02 00 00 00       	mov    eax,0x2
c001a92d:	31 d2                	xor    edx,edx
c001a92f:	83 c4 18             	add    esp,0x18
c001a932:	5b                   	pop    ebx
c001a933:	c3                   	ret    
c001a934:	b8 01 00 00 00       	mov    eax,0x1
c001a939:	eb f2                	jmp    c001a92d <sysCallReadDir(regs*)+0x5c>
c001a93b:	83 ec 08             	sub    esp,0x8
c001a93e:	52                   	push   edx
c001a93f:	68 8c a4 02 c0       	push   0xc002a48c
c001a944:	e8 4c 7e ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001a949:	83 c4 10             	add    esp,0x10
c001a94c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a951:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a956:	83 c4 18             	add    esp,0x18
c001a959:	5b                   	pop    ebx
c001a95a:	c3                   	ret    
c001a95b:	31 c0                	xor    eax,eax
c001a95d:	eb ce                	jmp    c001a92d <sysCallReadDir(regs*)+0x5c>

c001a95f <sysCallIsATTY(regs*)>:
c001a95f:	83 ec 0c             	sub    esp,0xc
c001a962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a966:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a969:	83 f8 02             	cmp    eax,0x2
c001a96c:	76 07                	jbe    c001a975 <sysCallIsATTY(regs*)+0x16>
c001a96e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a973:	75 26                	jne    c001a99b <sysCallIsATTY(regs*)+0x3c>
c001a975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a97a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a97d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a983:	85 c0                	test   eax,eax
c001a985:	74 24                	je     c001a9ab <sysCallIsATTY(regs*)+0x4c>
c001a987:	83 ec 0c             	sub    esp,0xc
c001a98a:	8b 10                	mov    edx,DWORD PTR [eax]
c001a98c:	50                   	push   eax
c001a98d:	ff 12                	call   DWORD PTR [edx]
c001a98f:	31 d2                	xor    edx,edx
c001a991:	0f b6 c0             	movzx  eax,al
c001a994:	83 c4 10             	add    esp,0x10
c001a997:	83 c4 0c             	add    esp,0xc
c001a99a:	c3                   	ret    
c001a99b:	83 ec 0c             	sub    esp,0xc
c001a99e:	50                   	push   eax
c001a99f:	e8 ab 6c ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	85 c0                	test   eax,eax
c001a9a9:	75 dc                	jne    c001a987 <sysCallIsATTY(regs*)+0x28>
c001a9ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9b5:	83 c4 0c             	add    esp,0xc
c001a9b8:	c3                   	ret    

c001a9b9 <sysCallSeek(regs*)>:
c001a9b9:	53                   	push   ebx
c001a9ba:	83 ec 08             	sub    esp,0x8
c001a9bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9c4:	83 f8 02             	cmp    eax,0x2
c001a9c7:	76 4a                	jbe    c001aa13 <sysCallSeek(regs*)+0x5a>
c001a9c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9ce:	77 32                	ja     c001aa02 <sysCallSeek(regs*)+0x49>
c001a9d0:	83 ec 0c             	sub    esp,0xc
c001a9d3:	50                   	push   eax
c001a9d4:	e8 76 6c ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001a9d9:	83 c4 0c             	add    esp,0xc
c001a9dc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a9df:	31 db                	xor    ebx,ebx
c001a9e1:	53                   	push   ebx
c001a9e2:	51                   	push   ecx
c001a9e3:	50                   	push   eax
c001a9e4:	e8 fd 83 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001a9e9:	83 c4 10             	add    esp,0x10
c001a9ec:	85 c0                	test   eax,eax
c001a9ee:	0f 95 c0             	setne  al
c001a9f1:	31 d2                	xor    edx,edx
c001a9f3:	0f b6 c0             	movzx  eax,al
c001a9f6:	f7 d8                	neg    eax
c001a9f8:	83 d2 00             	adc    edx,0x0
c001a9fb:	83 c4 08             	add    esp,0x8
c001a9fe:	f7 da                	neg    edx
c001aa00:	5b                   	pop    ebx
c001aa01:	c3                   	ret    
c001aa02:	83 ec 08             	sub    esp,0x8
c001aa05:	50                   	push   eax
c001aa06:	68 fb a4 02 c0       	push   0xc002a4fb
c001aa0b:	e8 85 7d ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001aa10:	83 c4 10             	add    esp,0x10
c001aa13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa1d:	83 c4 08             	add    esp,0x8
c001aa20:	5b                   	pop    ebx
c001aa21:	c3                   	ret    

c001aa22 <sysCallTell(regs*)>:
c001aa22:	53                   	push   ebx
c001aa23:	83 ec 08             	sub    esp,0x8
c001aa26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa2d:	83 f8 02             	cmp    eax,0x2
c001aa30:	76 5e                	jbe    c001aa90 <sysCallTell(regs*)+0x6e>
c001aa32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa37:	77 2d                	ja     c001aa66 <sysCallTell(regs*)+0x44>
c001aa39:	83 ec 0c             	sub    esp,0xc
c001aa3c:	50                   	push   eax
c001aa3d:	e8 0d 6c ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001aa42:	5a                   	pop    edx
c001aa43:	59                   	pop    ecx
c001aa44:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa47:	50                   	push   eax
c001aa48:	e8 ef 83 ff ff       	call   c0012e3c <File::tell(unsigned long long*)>
c001aa4d:	83 c4 10             	add    esp,0x10
c001aa50:	85 c0                	test   eax,eax
c001aa52:	0f 95 c0             	setne  al
c001aa55:	31 d2                	xor    edx,edx
c001aa57:	0f b6 c0             	movzx  eax,al
c001aa5a:	f7 d8                	neg    eax
c001aa5c:	83 d2 00             	adc    edx,0x0
c001aa5f:	83 c4 08             	add    esp,0x8
c001aa62:	f7 da                	neg    edx
c001aa64:	5b                   	pop    ebx
c001aa65:	c3                   	ret    
c001aa66:	83 ec 08             	sub    esp,0x8
c001aa69:	50                   	push   eax
c001aa6a:	68 15 a5 02 c0       	push   0xc002a515
c001aa6f:	e8 21 7d ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001aa74:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa87:	31 d2                	xor    edx,edx
c001aa89:	31 c0                	xor    eax,eax
c001aa8b:	83 c4 08             	add    esp,0x8
c001aa8e:	5b                   	pop    ebx
c001aa8f:	c3                   	ret    
c001aa90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa95:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa9a:	83 c4 08             	add    esp,0x8
c001aa9d:	5b                   	pop    ebx
c001aa9e:	c3                   	ret    

c001aa9f <sysCallSize(regs*)>:
c001aa9f:	53                   	push   ebx
c001aaa0:	83 ec 18             	sub    esp,0x18
c001aaa3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aaa7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aaaa:	83 f8 02             	cmp    eax,0x2
c001aaad:	76 64                	jbe    c001ab13 <sysCallSize(regs*)+0x74>
c001aaaf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aab4:	77 33                	ja     c001aae9 <sysCallSize(regs*)+0x4a>
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	50                   	push   eax
c001aaba:	e8 90 6b ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001aabf:	83 c4 0c             	add    esp,0xc
c001aac2:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aac6:	52                   	push   edx
c001aac7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aaca:	50                   	push   eax
c001aacb:	e8 04 85 ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	85 c0                	test   eax,eax
c001aad5:	0f 95 c0             	setne  al
c001aad8:	31 d2                	xor    edx,edx
c001aada:	0f b6 c0             	movzx  eax,al
c001aadd:	f7 d8                	neg    eax
c001aadf:	83 d2 00             	adc    edx,0x0
c001aae2:	83 c4 18             	add    esp,0x18
c001aae5:	f7 da                	neg    edx
c001aae7:	5b                   	pop    ebx
c001aae8:	c3                   	ret    
c001aae9:	83 ec 08             	sub    esp,0x8
c001aaec:	50                   	push   eax
c001aaed:	68 2f a5 02 c0       	push   0xc002a52f
c001aaf2:	e8 9e 7c ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001aaf7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab0a:	31 d2                	xor    edx,edx
c001ab0c:	31 c0                	xor    eax,eax
c001ab0e:	83 c4 18             	add    esp,0x18
c001ab11:	5b                   	pop    ebx
c001ab12:	c3                   	ret    
c001ab13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab1d:	83 c4 18             	add    esp,0x18
c001ab20:	5b                   	pop    ebx
c001ab21:	c3                   	ret    

c001ab22 <sysCallSizeFromFilename(regs*)>:
c001ab22:	57                   	push   edi
c001ab23:	56                   	push   esi
c001ab24:	53                   	push   ebx
c001ab25:	83 ec 20             	sub    esp,0x20
c001ab28:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab2c:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ab2f:	83 fb 02             	cmp    ebx,0x2
c001ab32:	0f 86 99 00 00 00    	jbe    c001abd1 <sysCallSizeFromFilename(regs*)+0xaf>
c001ab38:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ab3e:	77 65                	ja     c001aba5 <sysCallSizeFromFilename(regs*)+0x83>
c001ab40:	83 ec 0c             	sub    esp,0xc
c001ab43:	68 14 01 00 00       	push   0x114
c001ab48:	e8 87 49 ff ff       	call   c000f4d4 <malloc>
c001ab4d:	83 c4 0c             	add    esp,0xc
c001ab50:	89 c6                	mov    esi,eax
c001ab52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab57:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab5a:	53                   	push   ebx
c001ab5b:	56                   	push   esi
c001ab5c:	e8 63 81 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001ab61:	83 c4 0c             	add    esp,0xc
c001ab64:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab68:	50                   	push   eax
c001ab69:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab6c:	56                   	push   esi
c001ab6d:	e8 62 84 ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	85 f6                	test   esi,esi
c001ab77:	74 14                	je     c001ab8d <sysCallSizeFromFilename(regs*)+0x6b>
c001ab79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab7d:	8b 16                	mov    edx,DWORD PTR [esi]
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	56                   	push   esi
c001ab83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab86:	83 c4 10             	add    esp,0x10
c001ab89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab8d:	85 c0                	test   eax,eax
c001ab8f:	0f 95 c0             	setne  al
c001ab92:	31 d2                	xor    edx,edx
c001ab94:	0f b6 c0             	movzx  eax,al
c001ab97:	f7 d8                	neg    eax
c001ab99:	83 d2 00             	adc    edx,0x0
c001ab9c:	83 c4 20             	add    esp,0x20
c001ab9f:	f7 da                	neg    edx
c001aba1:	5b                   	pop    ebx
c001aba2:	5e                   	pop    esi
c001aba3:	5f                   	pop    edi
c001aba4:	c3                   	ret    
c001aba5:	83 ec 08             	sub    esp,0x8
c001aba8:	53                   	push   ebx
c001aba9:	68 2f a5 02 c0       	push   0xc002a52f
c001abae:	e8 e2 7b ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001abb3:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001abbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001abc6:	31 d2                	xor    edx,edx
c001abc8:	83 c4 20             	add    esp,0x20
c001abcb:	31 c0                	xor    eax,eax
c001abcd:	5b                   	pop    ebx
c001abce:	5e                   	pop    esi
c001abcf:	5f                   	pop    edi
c001abd0:	c3                   	ret    
c001abd1:	83 c4 20             	add    esp,0x20
c001abd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abd9:	5b                   	pop    ebx
c001abda:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abdf:	5e                   	pop    esi
c001abe0:	5f                   	pop    edi
c001abe1:	c3                   	ret    

c001abe2 <sysCallClose(regs*)>:
c001abe2:	53                   	push   ebx
c001abe3:	83 ec 08             	sub    esp,0x8
c001abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abed:	83 f8 02             	cmp    eax,0x2
c001abf0:	76 50                	jbe    c001ac42 <sysCallClose(regs*)+0x60>
c001abf2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001abf7:	74 58                	je     c001ac51 <sysCallClose(regs*)+0x6f>
c001abf9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abfe:	74 60                	je     c001ac60 <sysCallClose(regs*)+0x7e>
c001ac00:	77 2f                	ja     c001ac31 <sysCallClose(regs*)+0x4f>
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	50                   	push   eax
c001ac06:	e8 44 6a ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001ac0b:	89 c3                	mov    ebx,eax
c001ac0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac10:	e8 71 81 ff ff       	call   c0012d86 <File::close()>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	85 db                	test   ebx,ebx
c001ac1a:	74 0c                	je     c001ac28 <sysCallClose(regs*)+0x46>
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac21:	53                   	push   ebx
c001ac22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	31 c0                	xor    eax,eax
c001ac2a:	31 d2                	xor    edx,edx
c001ac2c:	83 c4 08             	add    esp,0x8
c001ac2f:	5b                   	pop    ebx
c001ac30:	c3                   	ret    
c001ac31:	83 ec 08             	sub    esp,0x8
c001ac34:	50                   	push   eax
c001ac35:	68 b0 a4 02 c0       	push   0xc002a4b0
c001ac3a:	e8 56 7b ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac47:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac4c:	83 c4 08             	add    esp,0x8
c001ac4f:	5b                   	pop    ebx
c001ac50:	c3                   	ret    
c001ac51:	83 ec 0c             	sub    esp,0xc
c001ac54:	68 4a a5 02 c0       	push   0xc002a54a
c001ac59:	e8 37 7b ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001ac5e:	eb c5                	jmp    c001ac25 <sysCallClose(regs*)+0x43>
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	68 58 a5 02 c0       	push   0xc002a558
c001ac68:	eb ef                	jmp    c001ac59 <sysCallClose(regs*)+0x77>

c001ac6a <sysCallOpenDir(regs*)>:
c001ac6a:	56                   	push   esi
c001ac6b:	53                   	push   ebx
c001ac6c:	53                   	push   ebx
c001ac6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac71:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ac74:	85 f6                	test   esi,esi
c001ac76:	74 59                	je     c001acd1 <sysCallOpenDir(regs*)+0x67>
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	68 14 01 00 00       	push   0x114
c001ac80:	e8 4f 48 ff ff       	call   c000f4d4 <malloc>
c001ac85:	83 c4 0c             	add    esp,0xc
c001ac88:	89 c6                	mov    esi,eax
c001ac8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac8f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac95:	56                   	push   esi
c001ac96:	e8 ff 84 ff ff       	call   c001319a <Directory::Directory(char const*, Process*)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	85 f6                	test   esi,esi
c001aca0:	74 2f                	je     c001acd1 <sysCallOpenDir(regs*)+0x67>
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	56                   	push   esi
c001aca6:	e8 53 85 ff ff       	call   c00131fe <Directory::open()>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	85 c0                	test   eax,eax
c001acb0:	75 1f                	jne    c001acd1 <sysCallOpenDir(regs*)+0x67>
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	56                   	push   esi
c001acb6:	e8 9f 66 ff ff       	call   c001135a <UnixFile::getFileDescriptor()>
c001acbb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	89 02                	mov    DWORD PTR [edx],eax
c001acc3:	c1 f8 1f             	sar    eax,0x1f
c001acc6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001acc9:	31 c0                	xor    eax,eax
c001accb:	59                   	pop    ecx
c001accc:	31 d2                	xor    edx,edx
c001acce:	5b                   	pop    ebx
c001accf:	5e                   	pop    esi
c001acd0:	c3                   	ret    
c001acd1:	59                   	pop    ecx
c001acd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acdc:	5b                   	pop    ebx
c001acdd:	5e                   	pop    esi
c001acde:	c3                   	ret    

c001acdf <sysCallCloseDir(regs*)>:
c001acdf:	53                   	push   ebx
c001ace0:	83 ec 08             	sub    esp,0x8
c001ace3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acea:	83 f8 02             	cmp    eax,0x2
c001aced:	76 47                	jbe    c001ad36 <sysCallCloseDir(regs*)+0x57>
c001acef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001acf4:	77 2f                	ja     c001ad25 <sysCallCloseDir(regs*)+0x46>
c001acf6:	83 ec 0c             	sub    esp,0xc
c001acf9:	50                   	push   eax
c001acfa:	e8 50 69 ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001acff:	89 c3                	mov    ebx,eax
c001ad01:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad04:	e8 51 85 ff ff       	call   c001325a <Directory::close()>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	85 db                	test   ebx,ebx
c001ad0e:	74 0c                	je     c001ad1c <sysCallCloseDir(regs*)+0x3d>
c001ad10:	83 ec 0c             	sub    esp,0xc
c001ad13:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad15:	53                   	push   ebx
c001ad16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	31 c0                	xor    eax,eax
c001ad1e:	31 d2                	xor    edx,edx
c001ad20:	83 c4 08             	add    esp,0x8
c001ad23:	5b                   	pop    ebx
c001ad24:	c3                   	ret    
c001ad25:	83 ec 08             	sub    esp,0x8
c001ad28:	50                   	push   eax
c001ad29:	68 d8 a4 02 c0       	push   0xc002a4d8
c001ad2e:	e8 62 7a ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad40:	83 c4 08             	add    esp,0x8
c001ad43:	5b                   	pop    ebx
c001ad44:	c3                   	ret    

c001ad45 <sysCallMakeDir(regs*)>:
c001ad45:	56                   	push   esi
c001ad46:	53                   	push   ebx
c001ad47:	83 ec 10             	sub    esp,0x10
c001ad4a:	68 14 01 00 00       	push   0x114
c001ad4f:	e8 80 47 ff ff       	call   c000f4d4 <malloc>
c001ad54:	83 c4 0c             	add    esp,0xc
c001ad57:	89 c3                	mov    ebx,eax
c001ad59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad5e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad65:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad68:	53                   	push   ebx
c001ad69:	e8 2c 84 ff ff       	call   c001319a <Directory::Directory(char const*, Process*)>
c001ad6e:	83 c4 10             	add    esp,0x10
c001ad71:	85 db                	test   ebx,ebx
c001ad73:	74 32                	je     c001ada7 <sysCallMakeDir(regs*)+0x62>
c001ad75:	83 ec 0c             	sub    esp,0xc
c001ad78:	53                   	push   ebx
c001ad79:	e8 60 86 ff ff       	call   c00133de <Directory::create()>
c001ad7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad81:	89 c6                	mov    esi,eax
c001ad83:	e8 d2 84 ff ff       	call   c001325a <Directory::close()>
c001ad88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad90:	83 c4 10             	add    esp,0x10
c001ad93:	31 c0                	xor    eax,eax
c001ad95:	59                   	pop    ecx
c001ad96:	85 f6                	test   esi,esi
c001ad98:	5b                   	pop    ebx
c001ad99:	0f 95 c0             	setne  al
c001ad9c:	5e                   	pop    esi
c001ad9d:	31 d2                	xor    edx,edx
c001ad9f:	f7 d8                	neg    eax
c001ada1:	83 d2 00             	adc    edx,0x0
c001ada4:	f7 da                	neg    edx
c001ada6:	c3                   	ret    
c001ada7:	59                   	pop    ecx
c001ada8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adb2:	5b                   	pop    ebx
c001adb3:	5e                   	pop    esi
c001adb4:	c3                   	ret    

c001adb5 <sysCallWait(regs*)>:
c001adb5:	83 ec 10             	sub    esp,0x10
c001adb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adbc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001adbf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adc2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adc5:	e8 2b 24 00 00       	call   c001d1f5 <waitTask(int, int*, int)>
c001adca:	83 c4 1c             	add    esp,0x1c
c001adcd:	99                   	cdq    
c001adce:	c3                   	ret    

c001adcf <sysCallNotImpl(regs*)>:
c001adcf:	83 ec 18             	sub    esp,0x18
c001add2:	68 66 a5 02 c0       	push   0xc002a566
c001add7:	e8 d3 ea ff ff       	call   c00198af <Krnl::panic(char const*)>
c001addc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ade1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ade6:	83 c4 1c             	add    esp,0x1c
c001ade9:	c3                   	ret    

c001adea <sysPanic(regs*)>:
c001adea:	83 ec 18             	sub    esp,0x18
c001aded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adf1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adf4:	e8 b6 ea ff ff       	call   c00198af <Krnl::panic(char const*)>
c001adf9:	c7 04 24 80 a5 02 c0 	mov    DWORD PTR [esp],0xc002a580
c001ae00:	e8 aa ea ff ff       	call   c00198af <Krnl::panic(char const*)>
c001ae05:	b8 01 00 00 00       	mov    eax,0x1
c001ae0a:	31 d2                	xor    edx,edx
c001ae0c:	83 c4 1c             	add    esp,0x1c
c001ae0f:	c3                   	ret    

c001ae10 <sysCallRmdir(regs*)>:
c001ae10:	56                   	push   esi
c001ae11:	53                   	push   ebx
c001ae12:	83 ec 20             	sub    esp,0x20
c001ae15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae19:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae1c:	68 14 01 00 00       	push   0x114
c001ae21:	e8 ae 46 ff ff       	call   c000f4d4 <malloc>
c001ae26:	83 c4 0c             	add    esp,0xc
c001ae29:	89 c3                	mov    ebx,eax
c001ae2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae30:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae33:	56                   	push   esi
c001ae34:	53                   	push   ebx
c001ae35:	e8 8a 7e ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001ae3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3d:	e8 5e 80 ff ff       	call   c0012ea0 <File::unlink()>
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	85 db                	test   ebx,ebx
c001ae47:	74 14                	je     c001ae5d <sysCallRmdir(regs*)+0x4d>
c001ae49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae4f:	83 ec 0c             	sub    esp,0xc
c001ae52:	53                   	push   ebx
c001ae53:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae5d:	85 c0                	test   eax,eax
c001ae5f:	0f 95 c0             	setne  al
c001ae62:	31 d2                	xor    edx,edx
c001ae64:	0f b6 c0             	movzx  eax,al
c001ae67:	f7 d8                	neg    eax
c001ae69:	83 d2 00             	adc    edx,0x0
c001ae6c:	83 c4 14             	add    esp,0x14
c001ae6f:	f7 da                	neg    edx
c001ae71:	5b                   	pop    ebx
c001ae72:	5e                   	pop    esi
c001ae73:	c3                   	ret    

c001ae74 <sysCallUnlink(regs*)>:
c001ae74:	56                   	push   esi
c001ae75:	53                   	push   ebx
c001ae76:	83 ec 20             	sub    esp,0x20
c001ae79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae7d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae80:	68 14 01 00 00       	push   0x114
c001ae85:	e8 4a 46 ff ff       	call   c000f4d4 <malloc>
c001ae8a:	83 c4 0c             	add    esp,0xc
c001ae8d:	89 c3                	mov    ebx,eax
c001ae8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae94:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae97:	56                   	push   esi
c001ae98:	53                   	push   ebx
c001ae99:	e8 26 7e ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001ae9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aea1:	e8 fa 7f ff ff       	call   c0012ea0 <File::unlink()>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	85 db                	test   ebx,ebx
c001aeab:	74 14                	je     c001aec1 <sysCallUnlink(regs*)+0x4d>
c001aead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aeb3:	83 ec 0c             	sub    esp,0xc
c001aeb6:	53                   	push   ebx
c001aeb7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec1:	85 c0                	test   eax,eax
c001aec3:	0f 95 c0             	setne  al
c001aec6:	31 d2                	xor    edx,edx
c001aec8:	0f b6 c0             	movzx  eax,al
c001aecb:	f7 d8                	neg    eax
c001aecd:	83 d2 00             	adc    edx,0x0
c001aed0:	83 c4 14             	add    esp,0x14
c001aed3:	f7 da                	neg    edx
c001aed5:	5b                   	pop    ebx
c001aed6:	5e                   	pop    esi
c001aed7:	c3                   	ret    

c001aed8 <sysCallGetArgv(regs*)>:
c001aed8:	83 ec 0c             	sub    esp,0xc
c001aedb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aedf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aee2:	85 c0                	test   eax,eax
c001aee4:	78 2b                	js     c001af11 <sysCallGetArgv(regs*)+0x39>
c001aee6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aeec:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aeef:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aef5:	7d 1a                	jge    c001af11 <sysCallGetArgv(regs*)+0x39>
c001aef7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aefe:	85 c0                	test   eax,eax
c001af00:	74 17                	je     c001af19 <sysCallGetArgv(regs*)+0x41>
c001af02:	83 ec 08             	sub    esp,0x8
c001af05:	50                   	push   eax
c001af06:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001af09:	e8 1c 58 fe ff       	call   c000072a <strcpy>
c001af0e:	83 c4 10             	add    esp,0x10
c001af11:	31 c0                	xor    eax,eax
c001af13:	31 d2                	xor    edx,edx
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	c3                   	ret    
c001af19:	b8 01 00 00 00       	mov    eax,0x1
c001af1e:	31 d2                	xor    edx,edx
c001af20:	83 c4 0c             	add    esp,0xc
c001af23:	c3                   	ret    

c001af24 <sysCallTTYName(regs*)>:
c001af24:	56                   	push   esi
c001af25:	53                   	push   ebx
c001af26:	53                   	push   ebx
c001af27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af2b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001af2e:	85 c0                	test   eax,eax
c001af30:	74 5f                	je     c001af91 <sysCallTTYName(regs*)+0x6d>
c001af32:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af35:	83 f8 02             	cmp    eax,0x2
c001af38:	77 3e                	ja     c001af78 <sysCallTTYName(regs*)+0x54>
c001af3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af3f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af42:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af48:	85 db                	test   ebx,ebx
c001af4a:	74 45                	je     c001af91 <sysCallTTYName(regs*)+0x6d>
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af51:	53                   	push   ebx
c001af52:	ff 10                	call   DWORD PTR [eax]
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	84 c0                	test   al,al
c001af59:	74 41                	je     c001af9c <sysCallTTYName(regs*)+0x78>
c001af5b:	83 ec 08             	sub    esp,0x8
c001af5e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af64:	53                   	push   ebx
c001af65:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af68:	e8 bd 57 fe ff       	call   c000072a <strcpy>
c001af6d:	83 c4 10             	add    esp,0x10
c001af70:	31 c0                	xor    eax,eax
c001af72:	59                   	pop    ecx
c001af73:	31 d2                	xor    edx,edx
c001af75:	5b                   	pop    ebx
c001af76:	5e                   	pop    esi
c001af77:	c3                   	ret    
c001af78:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af7d:	74 bb                	je     c001af3a <sysCallTTYName(regs*)+0x16>
c001af7f:	83 ec 0c             	sub    esp,0xc
c001af82:	50                   	push   eax
c001af83:	e8 c7 66 ff ff       	call   c001164f <getFromFileDescriptor(int)>
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	89 c3                	mov    ebx,eax
c001af8d:	85 db                	test   ebx,ebx
c001af8f:	75 bb                	jne    c001af4c <sysCallTTYName(regs*)+0x28>
c001af91:	59                   	pop    ecx
c001af92:	b8 01 00 00 00       	mov    eax,0x1
c001af97:	31 d2                	xor    edx,edx
c001af99:	5b                   	pop    ebx
c001af9a:	5e                   	pop    esi
c001af9b:	c3                   	ret    
c001af9c:	59                   	pop    ecx
c001af9d:	b8 02 00 00 00       	mov    eax,0x2
c001afa2:	31 d2                	xor    edx,edx
c001afa4:	5b                   	pop    ebx
c001afa5:	5e                   	pop    esi
c001afa6:	c3                   	ret    

c001afa7 <sysCallUSleep(regs*)>:
c001afa7:	83 ec 14             	sub    esp,0x14
c001afaa:	b8 e8 03 00 00       	mov    eax,0x3e8
c001afaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afb3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001afba:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001afbd:	01 ca                	add    edx,ecx
c001afbf:	52                   	push   edx
c001afc0:	50                   	push   eax
c001afc1:	e8 c8 22 00 00       	call   c001d28e <nanoSleep(unsigned long long)>
c001afc6:	31 c0                	xor    eax,eax
c001afc8:	31 d2                	xor    edx,edx
c001afca:	83 c4 1c             	add    esp,0x1c
c001afcd:	c3                   	ret    

c001afce <sysCallSpawn(regs*)>:
c001afce:	56                   	push   esi
c001afcf:	53                   	push   ebx
c001afd0:	53                   	push   ebx
c001afd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afd5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001afd8:	85 f6                	test   esi,esi
c001afda:	75 08                	jne    c001afe4 <sysCallSpawn(regs*)+0x16>
c001afdc:	59                   	pop    ecx
c001afdd:	31 c0                	xor    eax,eax
c001afdf:	31 d2                	xor    edx,edx
c001afe1:	5b                   	pop    ebx
c001afe2:	5e                   	pop    esi
c001afe3:	c3                   	ret    
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	68 3f 07 00 00       	push   0x73f
c001afec:	e8 e3 44 ff ff       	call   c000f4d4 <malloc>
c001aff1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aff4:	89 c6                	mov    esi,eax
c001aff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001affb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001affe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b001:	56                   	push   esi
c001b002:	e8 87 19 00 00       	call   c001c98e <Process::Process(char const*, Process*, char**)>
c001b007:	83 c4 20             	add    esp,0x20
c001b00a:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b011:	75 c9                	jne    c001afdc <sysCallSpawn(regs*)+0xe>
c001b013:	83 ec 0c             	sub    esp,0xc
c001b016:	56                   	push   esi
c001b017:	e8 38 1f 00 00       	call   c001cf54 <Process::createUserThread()>
c001b01c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b01e:	83 c4 10             	add    esp,0x10
c001b021:	99                   	cdq    
c001b022:	59                   	pop    ecx
c001b023:	5b                   	pop    ebx
c001b024:	5e                   	pop    esi
c001b025:	c3                   	ret    

c001b026 <sysCallGetEnv(regs*)>:
c001b026:	57                   	push   edi
c001b027:	56                   	push   esi
c001b028:	53                   	push   ebx
c001b029:	83 ec 1c             	sub    esp,0x1c
c001b02c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b035:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b038:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b03b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b03e:	e8 88 e7 ff ff       	call   c00197cb <Krnl::getProcessTotalEnvCount(Process*)>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	39 c7                	cmp    edi,eax
c001b048:	7c 14                	jl     c001b05e <sysCallGetEnv(regs*)+0x38>
c001b04a:	85 f6                	test   esi,esi
c001b04c:	75 0b                	jne    c001b059 <sysCallGetEnv(regs*)+0x33>
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	31 c0                	xor    eax,eax
c001b053:	5b                   	pop    ebx
c001b054:	31 d2                	xor    edx,edx
c001b056:	5e                   	pop    esi
c001b057:	5f                   	pop    edi
c001b058:	c3                   	ret    
c001b059:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b05c:	eb f0                	jmp    c001b04e <sysCallGetEnv(regs*)+0x28>
c001b05e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b062:	52                   	push   edx
c001b063:	57                   	push   edi
c001b064:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b06a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b06d:	50                   	push   eax
c001b06e:	e8 78 e7 ff ff       	call   c00197eb <Krnl::getProcessEnvPair(Process*, int)>
c001b073:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b076:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b07a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b07e:	83 c4 0c             	add    esp,0xc
c001b081:	85 c9                	test   ecx,ecx
c001b083:	75 23                	jne    c001b0a8 <sysCallGetEnv(regs*)+0x82>
c001b085:	83 ec 0c             	sub    esp,0xc
c001b088:	50                   	push   eax
c001b089:	e8 1a 56 fe ff       	call   c00006a8 <strlen>
c001b08e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b091:	89 c3                	mov    ebx,eax
c001b093:	e8 10 56 fe ff       	call   c00006a8 <strlen>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b09f:	83 c4 10             	add    esp,0x10
c001b0a2:	31 d2                	xor    edx,edx
c001b0a4:	5b                   	pop    ebx
c001b0a5:	5e                   	pop    esi
c001b0a6:	5f                   	pop    edi
c001b0a7:	c3                   	ret    
c001b0a8:	83 ec 08             	sub    esp,0x8
c001b0ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0ae:	50                   	push   eax
c001b0af:	56                   	push   esi
c001b0b0:	e8 75 56 fe ff       	call   c000072a <strcpy>
c001b0b5:	58                   	pop    eax
c001b0b6:	5a                   	pop    edx
c001b0b7:	68 8f a5 02 c0       	push   0xc002a58f
c001b0bc:	56                   	push   esi
c001b0bd:	e8 1f 57 fe ff       	call   c00007e1 <strcat>
c001b0c2:	59                   	pop    ecx
c001b0c3:	5b                   	pop    ebx
c001b0c4:	57                   	push   edi
c001b0c5:	56                   	push   esi
c001b0c6:	e8 16 57 fe ff       	call   c00007e1 <strcat>
c001b0cb:	83 c4 10             	add    esp,0x10
c001b0ce:	e9 7b ff ff ff       	jmp    c001b04e <sysCallGetEnv(regs*)+0x28>

c001b0d3 <sysAppSettings(regs*)>:
c001b0d3:	53                   	push   ebx
c001b0d4:	83 ec 08             	sub    esp,0x8
c001b0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0de:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b0e4:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b0e9:	66 3d c0 09          	cmp    ax,0x9c0
c001b0ed:	75 2f                	jne    c001b11e <sysAppSettings(regs*)+0x4b>
c001b0ef:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b0f5:	83 e0 1f             	and    eax,0x1f
c001b0f8:	3c 01                	cmp    al,0x1
c001b0fa:	74 2e                	je     c001b12a <sysAppSettings(regs*)+0x57>
c001b0fc:	3c 07                	cmp    al,0x7
c001b0fe:	0f 84 bd 00 00 00    	je     c001b1c1 <sysAppSettings(regs*)+0xee>
c001b104:	84 c0                	test   al,al
c001b106:	0f 84 dc 00 00 00    	je     c001b1e8 <sysAppSettings(regs*)+0x115>
c001b10c:	3c 08                	cmp    al,0x8
c001b10e:	74 6d                	je     c001b17d <sysAppSettings(regs*)+0xaa>
c001b110:	0f b6 c0             	movzx  eax,al
c001b113:	83 c4 08             	add    esp,0x8
c001b116:	05 e8 03 00 00       	add    eax,0x3e8
c001b11b:	5b                   	pop    ebx
c001b11c:	99                   	cdq    
c001b11d:	c3                   	ret    
c001b11e:	b8 01 00 00 00       	mov    eax,0x1
c001b123:	31 d2                	xor    edx,edx
c001b125:	83 c4 08             	add    esp,0x8
c001b128:	5b                   	pop    ebx
c001b129:	c3                   	ret    
c001b12a:	51                   	push   ecx
c001b12b:	68 00 01 00 00       	push   0x100
c001b130:	6a 00                	push   0x0
c001b132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b137:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b13a:	83 c0 0c             	add    eax,0xc
c001b13d:	50                   	push   eax
c001b13e:	e8 48 55 fe ff       	call   c000068b <memset>
c001b143:	83 c4 0c             	add    esp,0xc
c001b146:	68 ff 00 00 00       	push   0xff
c001b14b:	53                   	push   ebx
c001b14c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b151:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b154:	83 c0 0c             	add    eax,0xc
c001b157:	50                   	push   eax
c001b158:	e8 f8 54 fe ff       	call   c0000655 <memcpy>
c001b15d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b162:	5b                   	pop    ebx
c001b163:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b166:	5a                   	pop    edx
c001b167:	8d 50 0c             	lea    edx,[eax+0xc]
c001b16a:	52                   	push   edx
c001b16b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b171:	e8 2a 56 ff ff       	call   c00107a0 <VgaText::setTitle(char*)>
c001b176:	83 c4 10             	add    esp,0x10
c001b179:	31 c0                	xor    eax,eax
c001b17b:	eb a6                	jmp    c001b123 <sysAppSettings(regs*)+0x50>
c001b17d:	83 ec 08             	sub    esp,0x8
c001b180:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b186:	83 e0 0f             	and    eax,0xf
c001b189:	50                   	push   eax
c001b18a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b198:	e8 f3 55 ff ff       	call   c0010790 <VgaText::setTitleColour(VgaColour)>
c001b19d:	58                   	pop    eax
c001b19e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b1a4:	5a                   	pop    edx
c001b1a5:	c1 e8 04             	shr    eax,0x4
c001b1a8:	83 e0 0f             	and    eax,0xf
c001b1ab:	50                   	push   eax
c001b1ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1ba:	e8 c1 55 ff ff       	call   c0010780 <VgaText::setTitleTextColour(VgaColour)>
c001b1bf:	eb b5                	jmp    c001b176 <sysAppSettings(regs*)+0xa3>
c001b1c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1c9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b1cf:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b1d5:	c0 e8 06             	shr    al,0x6
c001b1d8:	83 e0 01             	and    eax,0x1
c001b1db:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b1e1:	31 c0                	xor    eax,eax
c001b1e3:	e9 3b ff ff ff       	jmp    c001b123 <sysAppSettings(regs*)+0x50>
c001b1e8:	b8 02 00 00 00       	mov    eax,0x2
c001b1ed:	e9 31 ff ff ff       	jmp    c001b123 <sysAppSettings(regs*)+0x50>

c001b1f2 <sysSetFatAttrib(regs*)>:
c001b1f2:	57                   	push   edi
c001b1f3:	56                   	push   esi
c001b1f4:	53                   	push   ebx
c001b1f5:	83 ec 1c             	sub    esp,0x1c
c001b1f8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1fc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b1ff:	68 14 01 00 00       	push   0x114
c001b204:	e8 cb 42 ff ff       	call   c000f4d4 <malloc>
c001b209:	83 c4 0c             	add    esp,0xc
c001b20c:	89 c3                	mov    ebx,eax
c001b20e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b213:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b216:	57                   	push   edi
c001b217:	53                   	push   ebx
c001b218:	e8 a7 7a ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001b21d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b220:	83 c4 0c             	add    esp,0xc
c001b223:	0f b6 d4             	movzx  edx,ah
c001b226:	0f b6 c0             	movzx  eax,al
c001b229:	52                   	push   edx
c001b22a:	50                   	push   eax
c001b22b:	53                   	push   ebx
c001b22c:	e8 09 7d ff ff       	call   c0012f3a <File::chfatattr(unsigned char, unsigned char)>
c001b231:	83 c4 10             	add    esp,0x10
c001b234:	85 db                	test   ebx,ebx
c001b236:	74 14                	je     c001b24c <sysSetFatAttrib(regs*)+0x5a>
c001b238:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b23c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	53                   	push   ebx
c001b242:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b245:	83 c4 10             	add    esp,0x10
c001b248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b24c:	85 c0                	test   eax,eax
c001b24e:	0f 95 c0             	setne  al
c001b251:	31 d2                	xor    edx,edx
c001b253:	0f b6 c0             	movzx  eax,al
c001b256:	f7 d8                	neg    eax
c001b258:	83 d2 00             	adc    edx,0x0
c001b25b:	83 c4 10             	add    esp,0x10
c001b25e:	f7 da                	neg    edx
c001b260:	5b                   	pop    ebx
c001b261:	5e                   	pop    esi
c001b262:	5f                   	pop    edi
c001b263:	c3                   	ret    

c001b264 <sysPipe(regs*)>:
c001b264:	57                   	push   edi
c001b265:	56                   	push   esi
c001b266:	53                   	push   ebx
c001b267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b271:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b274:	6a 20                	push   0x20
c001b276:	e8 59 42 ff ff       	call   c000f4d4 <malloc>
c001b27b:	89 c3                	mov    ebx,eax
c001b27d:	58                   	pop    eax
c001b27e:	5a                   	pop    edx
c001b27f:	68 00 50 00 00       	push   0x5000
c001b284:	53                   	push   ebx
c001b285:	e8 9e 4d ff ff       	call   c0010028 <Pipe::Pipe(int)>
c001b28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b28d:	e8 c8 60 ff ff       	call   c001135a <UnixFile::getFileDescriptor()>
c001b292:	89 07                	mov    DWORD PTR [edi],eax
c001b294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b297:	e8 be 60 ff ff       	call   c001135a <UnixFile::getFileDescriptor()>
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	89 06                	mov    DWORD PTR [esi],eax
c001b2a1:	31 d2                	xor    edx,edx
c001b2a3:	5b                   	pop    ebx
c001b2a4:	31 c0                	xor    eax,eax
c001b2a6:	5e                   	pop    esi
c001b2a7:	5f                   	pop    edi
c001b2a8:	c3                   	ret    

c001b2a9 <sysGetUnixTime(regs*)>:
c001b2a9:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001b2ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2b8:	e9 e3 83 ff ff       	jmp    c00136a0 <Clock::timeInSecondsLocal()>

c001b2bd <string_ends_with(char const*, char const*)>:
c001b2bd:	57                   	push   edi
c001b2be:	56                   	push   esi
c001b2bf:	53                   	push   ebx
c001b2c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2c4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2c8:	83 ec 0c             	sub    esp,0xc
c001b2cb:	53                   	push   ebx
c001b2cc:	e8 d7 53 fe ff       	call   c00006a8 <strlen>
c001b2d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2d4:	89 c6                	mov    esi,eax
c001b2d6:	e8 cd 53 fe ff       	call   c00006a8 <strlen>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	39 c6                	cmp    esi,eax
c001b2e0:	7d 06                	jge    c001b2e8 <string_ends_with(char const*, char const*)+0x2b>
c001b2e2:	5b                   	pop    ebx
c001b2e3:	31 c0                	xor    eax,eax
c001b2e5:	5e                   	pop    esi
c001b2e6:	5f                   	pop    edi
c001b2e7:	c3                   	ret    
c001b2e8:	83 ec 08             	sub    esp,0x8
c001b2eb:	29 c6                	sub    esi,eax
c001b2ed:	57                   	push   edi
c001b2ee:	01 f3                	add    ebx,esi
c001b2f0:	53                   	push   ebx
c001b2f1:	e8 85 54 fe ff       	call   c000077b <strcmp>
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	85 c0                	test   eax,eax
c001b2fb:	5b                   	pop    ebx
c001b2fc:	0f 94 c0             	sete   al
c001b2ff:	5e                   	pop    esi
c001b300:	0f b6 c0             	movzx  eax,al
c001b303:	5f                   	pop    edi
c001b304:	c3                   	ret    

c001b305 <sysCallOpen(regs*)>:
c001b305:	56                   	push   esi
c001b306:	53                   	push   ebx
c001b307:	81 ec 04 01 00 00    	sub    esp,0x104
c001b30d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b314:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b317:	85 c9                	test   ecx,ecx
c001b319:	0f 84 b3 00 00 00    	je     c001b3d2 <sysCallOpen(regs*)+0xcd>
c001b31f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b322:	85 c0                	test   eax,eax
c001b324:	0f 84 a8 00 00 00    	je     c001b3d2 <sysCallOpen(regs*)+0xcd>
c001b32a:	52                   	push   edx
c001b32b:	68 91 a5 02 c0       	push   0xc002a591
c001b330:	50                   	push   eax
c001b331:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b335:	56                   	push   esi
c001b336:	e8 df 77 ff ff       	call   c0012b1a <standardiseFiles(char*, char const*, char const*)>
c001b33b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b33e:	e8 65 53 fe ff       	call   c00006a8 <strlen>
c001b343:	83 c4 10             	add    esp,0x10
c001b346:	48                   	dec    eax
c001b347:	74 1d                	je     c001b366 <sysCallOpen(regs*)+0x61>
c001b349:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b34c:	eb 0f                	jmp    c001b35d <sysCallOpen(regs*)+0x58>
c001b34e:	80 fa 3a             	cmp    dl,0x3a
c001b351:	74 0f                	je     c001b362 <sysCallOpen(regs*)+0x5d>
c001b353:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b357:	48                   	dec    eax
c001b358:	74 0c                	je     c001b366 <sysCallOpen(regs*)+0x61>
c001b35a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b35d:	80 fa 2e             	cmp    dl,0x2e
c001b360:	75 ec                	jne    c001b34e <sysCallOpen(regs*)+0x49>
c001b362:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b366:	83 ec 08             	sub    esp,0x8
c001b369:	68 95 a5 02 c0       	push   0xc002a595
c001b36e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b371:	e8 47 ff ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b376:	83 c4 10             	add    esp,0x10
c001b379:	85 c0                	test   eax,eax
c001b37b:	75 17                	jne    c001b394 <sysCallOpen(regs*)+0x8f>
c001b37d:	83 ec 08             	sub    esp,0x8
c001b380:	68 b6 a5 02 c0       	push   0xc002a5b6
c001b385:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b388:	e8 30 ff ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b38d:	83 c4 10             	add    esp,0x10
c001b390:	85 c0                	test   eax,eax
c001b392:	74 51                	je     c001b3e5 <sysCallOpen(regs*)+0xe0>
c001b394:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b397:	83 ec 08             	sub    esp,0x8
c001b39a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b3a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3aa:	ff 30                	push   DWORD PTR [eax]
c001b3ac:	68 9a a5 02 c0       	push   0xc002a59a
c001b3b1:	e8 df 73 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001b3b6:	c7 04 24 a9 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5a9
c001b3bd:	e8 d3 73 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001b3c2:	83 c4 10             	add    esp,0x10
c001b3c5:	81 c4 04 01 00 00    	add    esp,0x104
c001b3cb:	31 c0                	xor    eax,eax
c001b3cd:	31 d2                	xor    edx,edx
c001b3cf:	5b                   	pop    ebx
c001b3d0:	5e                   	pop    esi
c001b3d1:	c3                   	ret    
c001b3d2:	81 c4 04 01 00 00    	add    esp,0x104
c001b3d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3e2:	5b                   	pop    ebx
c001b3e3:	5e                   	pop    esi
c001b3e4:	c3                   	ret    
c001b3e5:	83 ec 08             	sub    esp,0x8
c001b3e8:	68 96 a5 02 c0       	push   0xc002a596
c001b3ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f0:	e8 86 53 fe ff       	call   c000077b <strcmp>
c001b3f5:	83 c4 10             	add    esp,0x10
c001b3f8:	85 c0                	test   eax,eax
c001b3fa:	74 98                	je     c001b394 <sysCallOpen(regs*)+0x8f>
c001b3fc:	83 ec 08             	sub    esp,0x8
c001b3ff:	68 95 a5 02 c0       	push   0xc002a595
c001b404:	56                   	push   esi
c001b405:	e8 b3 fe ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b40a:	83 c4 10             	add    esp,0x10
c001b40d:	85 c0                	test   eax,eax
c001b40f:	75 83                	jne    c001b394 <sysCallOpen(regs*)+0x8f>
c001b411:	83 ec 08             	sub    esp,0x8
c001b414:	68 bb a5 02 c0       	push   0xc002a5bb
c001b419:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b41c:	e8 9c fe ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	85 c0                	test   eax,eax
c001b426:	0f 85 d9 00 00 00    	jne    c001b505 <sysCallOpen(regs*)+0x200>
c001b42c:	83 ec 08             	sub    esp,0x8
c001b42f:	68 c0 a5 02 c0       	push   0xc002a5c0
c001b434:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b437:	e8 81 fe ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	85 c0                	test   eax,eax
c001b441:	0f 85 be 00 00 00    	jne    c001b505 <sysCallOpen(regs*)+0x200>
c001b447:	83 ec 08             	sub    esp,0x8
c001b44a:	68 bc a5 02 c0       	push   0xc002a5bc
c001b44f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b452:	e8 24 53 fe ff       	call   c000077b <strcmp>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	85 c0                	test   eax,eax
c001b45c:	0f 84 a3 00 00 00    	je     c001b505 <sysCallOpen(regs*)+0x200>
c001b462:	83 ec 08             	sub    esp,0x8
c001b465:	68 bb a5 02 c0       	push   0xc002a5bb
c001b46a:	56                   	push   esi
c001b46b:	e8 4d fe ff ff       	call   c001b2bd <string_ends_with(char const*, char const*)>
c001b470:	83 c4 10             	add    esp,0x10
c001b473:	85 c0                	test   eax,eax
c001b475:	0f 85 8a 00 00 00    	jne    c001b505 <sysCallOpen(regs*)+0x200>
c001b47b:	83 ec 0c             	sub    esp,0xc
c001b47e:	68 14 01 00 00       	push   0x114
c001b483:	e8 4c 40 ff ff       	call   c000f4d4 <malloc>
c001b488:	83 c4 0c             	add    esp,0xc
c001b48b:	89 c6                	mov    esi,eax
c001b48d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b492:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b495:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b498:	56                   	push   esi
c001b499:	e8 26 78 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	85 f6                	test   esi,esi
c001b4a3:	0f 84 29 ff ff ff    	je     c001b3d2 <sysCallOpen(regs*)+0xcd>
c001b4a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b4ac:	0f b6 c2             	movzx  eax,dl
c001b4af:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b4b2:	89 d0                	mov    eax,edx
c001b4b4:	83 e0 01             	and    eax,0x1
c001b4b7:	f6 c2 02             	test   dl,0x2
c001b4ba:	74 03                	je     c001b4bf <sysCallOpen(regs*)+0x1ba>
c001b4bc:	83 c8 02             	or     eax,0x2
c001b4bf:	f6 c2 04             	test   dl,0x4
c001b4c2:	74 03                	je     c001b4c7 <sysCallOpen(regs*)+0x1c2>
c001b4c4:	83 c8 04             	or     eax,0x4
c001b4c7:	f6 c2 08             	test   dl,0x8
c001b4ca:	74 03                	je     c001b4cf <sysCallOpen(regs*)+0x1ca>
c001b4cc:	83 c8 0a             	or     eax,0xa
c001b4cf:	83 e2 10             	and    edx,0x10
c001b4d2:	74 03                	je     c001b4d7 <sysCallOpen(regs*)+0x1d2>
c001b4d4:	83 c8 12             	or     eax,0x12
c001b4d7:	83 ec 08             	sub    esp,0x8
c001b4da:	50                   	push   eax
c001b4db:	56                   	push   esi
c001b4dc:	e8 47 78 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	85 c0                	test   eax,eax
c001b4e6:	0f 85 e6 fe ff ff    	jne    c001b3d2 <sysCallOpen(regs*)+0xcd>
c001b4ec:	83 ec 0c             	sub    esp,0xc
c001b4ef:	56                   	push   esi
c001b4f0:	e8 65 5e ff ff       	call   c001135a <UnixFile::getFileDescriptor()>
c001b4f5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4f8:	89 02                	mov    DWORD PTR [edx],eax
c001b4fa:	c1 f8 1f             	sar    eax,0x1f
c001b4fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b500:	e9 bd fe ff ff       	jmp    c001b3c2 <sysCallOpen(regs*)+0xbd>
c001b505:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b508:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b50e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b515:	e9 ab fe ff ff       	jmp    c001b3c5 <sysCallOpen(regs*)+0xc0>

c001b51a <setupSystemCalls()>:
c001b51a:	c7 05 c0 d4 02 c0 d0 a6 01 c0 	mov    DWORD PTR ds:0xc002d4c0,0xc001a6d0
c001b524:	c7 05 c4 d4 02 c0 a4 a4 01 c0 	mov    DWORD PTR ds:0xc002d4c4,0xc001a4a4
c001b52e:	c7 05 c8 d4 02 c0 f7 a5 01 c0 	mov    DWORD PTR ds:0xc002d4c8,0xc001a5f7
c001b538:	c7 05 cc d4 02 c0 68 a6 01 c0 	mov    DWORD PTR ds:0xc002d4cc,0xc001a668
c001b542:	c7 05 d0 d4 02 c0 8f a5 01 c0 	mov    DWORD PTR ds:0xc002d4d0,0xc001a58f
c001b54c:	c7 05 d4 d4 02 c0 db a4 01 c0 	mov    DWORD PTR ds:0xc002d4d4,0xc001a4db
c001b556:	c7 05 d8 d4 02 c0 bc a4 01 c0 	mov    DWORD PTR ds:0xc002d4d8,0xc001a4bc
c001b560:	c7 05 dc d4 02 c0 4c a6 01 c0 	mov    DWORD PTR ds:0xc002d4dc,0xc001a64c
c001b56a:	c7 05 e4 d4 02 c0 e2 ab 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001abe2
c001b574:	c7 05 e0 d4 02 c0 05 b3 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001b305
c001b57e:	c7 05 e8 d4 02 c0 6a ac 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001ac6a
c001b588:	c7 05 ec d4 02 c0 d1 a8 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a8d1
c001b592:	c7 05 f0 d4 02 c0 0b a7 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001a70b
c001b59c:	c7 05 f4 d4 02 c0 10 a7 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001a710
c001b5a6:	c7 05 f8 d4 02 c0 45 ad 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001ad45
c001b5b0:	c7 05 fc d4 02 c0 df ac 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001acdf
c001b5ba:	c7 05 00 d5 02 c0 b9 a9 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001a9b9
c001b5c4:	c7 05 04 d5 02 c0 22 aa 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001aa22
c001b5ce:	c7 05 08 d5 02 c0 9f aa 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001aa9f
c001b5d8:	c7 05 0c d5 02 c0 15 a7 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a715
c001b5e2:	c7 05 10 d5 02 c0 b5 ad 01 c0 	mov    DWORD PTR ds:0xc002d510,0xc001adb5
c001b5ec:	c7 05 14 d5 02 c0 cf ad 01 c0 	mov    DWORD PTR ds:0xc002d514,0xc001adcf
c001b5f6:	c7 05 18 d5 02 c0 cf ad 01 c0 	mov    DWORD PTR ds:0xc002d518,0xc001adcf
c001b600:	c7 05 1c d5 02 c0 10 ae 01 c0 	mov    DWORD PTR ds:0xc002d51c,0xc001ae10
c001b60a:	c7 05 20 d5 02 c0 74 ae 01 c0 	mov    DWORD PTR ds:0xc002d520,0xc001ae74
c001b614:	c7 05 24 d5 02 c0 1f a7 01 c0 	mov    DWORD PTR ds:0xc002d524,0xc001a71f
c001b61e:	c7 05 28 d5 02 c0 d8 ae 01 c0 	mov    DWORD PTR ds:0xc002d528,0xc001aed8
c001b628:	c7 05 2c d5 02 c0 8e a8 01 c0 	mov    DWORD PTR ds:0xc002d52c,0xc001a88e
c001b632:	c7 05 30 d5 02 c0 24 af 01 c0 	mov    DWORD PTR ds:0xc002d530,0xc001af24
c001b63c:	c7 05 34 d5 02 c0 5f a9 01 c0 	mov    DWORD PTR ds:0xc002d534,0xc001a95f
c001b646:	c7 05 38 d5 02 c0 a7 af 01 c0 	mov    DWORD PTR ds:0xc002d538,0xc001afa7
c001b650:	c7 05 3c d5 02 c0 22 ab 01 c0 	mov    DWORD PTR ds:0xc002d53c,0xc001ab22
c001b65a:	c7 05 40 d5 02 c0 ce af 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001afce
c001b664:	c7 05 44 d5 02 c0 26 b0 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001b026
c001b66e:	c7 05 48 d5 02 c0 d3 b0 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001b0d3
c001b678:	c7 05 4c d5 02 c0 2f a7 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a72f
c001b682:	c7 05 50 d5 02 c0 99 a7 01 c0 	mov    DWORD PTR ds:0xc002d550,0xc001a799
c001b68c:	c7 05 54 d5 02 c0 df a7 01 c0 	mov    DWORD PTR ds:0xc002d554,0xc001a7df
c001b696:	c7 05 58 d5 02 c0 f2 b1 01 c0 	mov    DWORD PTR ds:0xc002d558,0xc001b1f2
c001b6a0:	c7 05 5c d5 02 c0 ea ad 01 c0 	mov    DWORD PTR ds:0xc002d55c,0xc001adea
c001b6aa:	c7 05 60 d5 02 c0 30 a8 01 c0 	mov    DWORD PTR ds:0xc002d560,0xc001a830
c001b6b4:	c7 05 64 d5 02 c0 64 b2 01 c0 	mov    DWORD PTR ds:0xc002d564,0xc001b264
c001b6be:	c7 05 68 d5 02 c0 a9 b2 01 c0 	mov    DWORD PTR ds:0xc002d568,0xc001b2a9
c001b6c8:	c7 05 6c d5 02 c0 e7 a4 01 c0 	mov    DWORD PTR ds:0xc002d56c,0xc001a4e7
c001b6d2:	c3                   	ret    

c001b6d3 <systemCall(regs*, void*)>:
c001b6d3:	53                   	push   ebx
c001b6d4:	83 ec 08             	sub    esp,0x8
c001b6d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6db:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b6de:	83 f8 7f             	cmp    eax,0x7f
c001b6e1:	77 16                	ja     c001b6f9 <systemCall(regs*, void*)+0x26>
c001b6e3:	8b 14 85 c0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b40]
c001b6ea:	85 d2                	test   edx,edx
c001b6ec:	74 0b                	je     c001b6f9 <systemCall(regs*, void*)+0x26>
c001b6ee:	83 ec 0c             	sub    esp,0xc
c001b6f1:	53                   	push   ebx
c001b6f2:	ff d2                	call   edx
c001b6f4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b6f7:	eb 0d                	jmp    c001b706 <systemCall(regs*, void*)+0x33>
c001b6f9:	52                   	push   edx
c001b6fa:	52                   	push   edx
c001b6fb:	50                   	push   eax
c001b6fc:	68 c5 a5 02 c0       	push   0xc002a5c5
c001b701:	e8 8f 70 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b70e:	31 d2                	xor    edx,edx
c001b710:	83 c4 08             	add    esp,0x8
c001b713:	5b                   	pop    ebx
c001b714:	c3                   	ret    

c001b715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b715:	55                   	push   ebp
c001b716:	89 e5                	mov    ebp,esp
c001b718:	57                   	push   edi
c001b719:	56                   	push   esi
c001b71a:	53                   	push   ebx
c001b71b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b721:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b724:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b727:	85 c0                	test   eax,eax
c001b729:	0f 95 c1             	setne  cl
c001b72c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b730:	0f 94 c2             	sete   dl
c001b733:	84 d1                	test   cl,dl
c001b735:	74 26                	je     c001b75d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b737:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b73e:	74 1d                	je     c001b75d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b740:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b743:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b749:	89 d6                	mov    esi,edx
c001b74b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b751:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b757:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b75a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b75d:	83 ec 0c             	sub    esp,0xc
c001b760:	05 ff 0f 00 00       	add    eax,0xfff
c001b765:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b768:	6a 01                	push   0x1
c001b76a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b770:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b776:	e8 2a 60 ff ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	89 c6                	mov    esi,eax
c001b780:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b786:	0f 86 21 01 00 00    	jbe    c001b8ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b78c:	c1 eb 0c             	shr    ebx,0xc
c001b78f:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b799:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b79f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b7a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7a5:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b7ab:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b7ae:	29 d8                	sub    eax,ebx
c001b7b0:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b7b6:	0f 83 f4 00 00 00    	jae    c001b8b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b7c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b7c8:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7cd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b7cf:	52                   	push   edx
c001b7d0:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b7d6:	52                   	push   edx
c001b7d7:	76 05                	jbe    c001b7de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b7d9:	b8 00 10 00 00       	mov    eax,0x1000
c001b7de:	31 d2                	xor    edx,edx
c001b7e0:	52                   	push   edx
c001b7e1:	50                   	push   eax
c001b7e2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b7e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7e8:	83 c4 20             	add    esp,0x20
c001b7eb:	85 c0                	test   eax,eax
c001b7ed:	74 1f                	je     c001b80e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b7ef:	51                   	push   ecx
c001b7f0:	51                   	push   ecx
c001b7f1:	50                   	push   eax
c001b7f2:	68 d9 a5 02 c0       	push   0xc002a5d9
c001b7f7:	e8 99 6f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001b7fc:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7ff:	e8 05 63 ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c001b804:	83 c4 10             	add    esp,0x10
c001b807:	31 c0                	xor    eax,eax
c001b809:	e9 7c 01 00 00       	jmp    c001b98a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b80e:	e8 2b 15 00 00       	call   c001cd3e <lockScheduler()>
c001b813:	e8 79 42 ff ff       	call   c000fa91 <Phys::allocatePage()>
c001b818:	6a 07                	push   0x7
c001b81a:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b820:	56                   	push   esi
c001b821:	50                   	push   eax
c001b822:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b828:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b82b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b831:	e8 3a 66 ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b836:	83 c4 0c             	add    esp,0xc
c001b839:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b83f:	6a 00                	push   0x0
c001b841:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b847:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b84a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b850:	e8 85 64 ff ff       	call   c0011cda <VAS::mapOtherVASIn(bool, VAS*)>
c001b855:	58                   	pop    eax
c001b856:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b85c:	5a                   	pop    edx
c001b85d:	68 07 04 00 00       	push   0x407
c001b862:	53                   	push   ebx
c001b863:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b869:	50                   	push   eax
c001b86a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b870:	6a 00                	push   0x0
c001b872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b877:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b87a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b880:	e8 a5 69 ff ff       	call   c001222a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b885:	83 c4 1c             	add    esp,0x1c
c001b888:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b88e:	68 00 10 00 00       	push   0x1000
c001b893:	50                   	push   eax
c001b894:	56                   	push   esi
c001b895:	e8 bb 4d fe ff       	call   c0000655 <memcpy>
c001b89a:	e8 a1 14 00 00       	call   c001cd40 <unlockScheduler()>
c001b89f:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	e9 f5 fe ff ff       	jmp    c001b7a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b8ad:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b8b0:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b8ba:	0f 86 bc 00 00 00    	jbe    c001b97c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b8c0:	e8 79 14 00 00       	call   c001cd3e <lockScheduler()>
c001b8c5:	51                   	push   ecx
c001b8c6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8cc:	6a 00                	push   0x0
c001b8ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8dc:	e8 f9 63 ff ff       	call   c0011cda <VAS::mapOtherVASIn(bool, VAS*)>
c001b8e1:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	c1 e8 0c             	shr    eax,0xc
c001b8ed:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b8f7:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b8fd:	e8 8f 41 ff ff       	call   c000fa91 <Phys::allocatePage()>
c001b902:	6a 07                	push   0x7
c001b904:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b90a:	56                   	push   esi
c001b90b:	50                   	push   eax
c001b90c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b912:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b915:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b91b:	e8 50 65 ff ff       	call   c0011e70 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b920:	58                   	pop    eax
c001b921:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b927:	5a                   	pop    edx
c001b928:	68 07 04 00 00       	push   0x407
c001b92d:	53                   	push   ebx
c001b92e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b934:	50                   	push   eax
c001b935:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b93b:	6a 00                	push   0x0
c001b93d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b945:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b94b:	e8 da 68 ff ff       	call   c001222a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b950:	83 c4 1c             	add    esp,0x1c
c001b953:	68 00 10 00 00       	push   0x1000
c001b958:	6a 00                	push   0x0
c001b95a:	56                   	push   esi
c001b95b:	e8 2b 4d fe ff       	call   c000068b <memset>
c001b960:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b966:	83 c4 10             	add    esp,0x10
c001b969:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b96f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b975:	77 86                	ja     c001b8fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b977:	e8 c4 13 00 00       	call   c001cd40 <unlockScheduler()>
c001b97c:	83 ec 0c             	sub    esp,0xc
c001b97f:	56                   	push   esi
c001b980:	e8 84 61 ff ff       	call   c0011b09 <Virt::freeKernelVirtualPages(unsigned long)>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	b0 01                	mov    al,0x1
c001b98a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b98d:	5b                   	pop    ebx
c001b98e:	5e                   	pop    esi
c001b98f:	5f                   	pop    edi
c001b990:	5d                   	pop    ebp
c001b991:	c3                   	ret    

c001b992 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b992:	55                   	push   ebp
c001b993:	57                   	push   edi
c001b994:	56                   	push   esi
c001b995:	53                   	push   ebx
c001b996:	83 ec 48             	sub    esp,0x48
c001b999:	68 14 01 00 00       	push   0x114
c001b99e:	e8 31 3b ff ff       	call   c000f4d4 <malloc>
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	89 c6                	mov    esi,eax
c001b9a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b9ac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b9b0:	50                   	push   eax
c001b9b1:	e8 0e 73 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001b9b6:	58                   	pop    eax
c001b9b7:	5a                   	pop    edx
c001b9b8:	6a 01                	push   0x1
c001b9ba:	56                   	push   esi
c001b9bb:	e8 68 73 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001b9c0:	83 c4 10             	add    esp,0x10
c001b9c3:	85 c0                	test   eax,eax
c001b9c5:	0f 85 47 01 00 00    	jne    c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9cb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b9d3:	83 ec 0c             	sub    esp,0xc
c001b9d6:	6a 34                	push   0x34
c001b9d8:	e8 f7 3a ff ff       	call   c000f4d4 <malloc>
c001b9dd:	89 c3                	mov    ebx,eax
c001b9df:	58                   	pop    eax
c001b9e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9e2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b9e6:	57                   	push   edi
c001b9e7:	53                   	push   ebx
c001b9e8:	6a 00                	push   0x0
c001b9ea:	6a 34                	push   0x34
c001b9ec:	56                   	push   esi
c001b9ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9f0:	83 c4 20             	add    esp,0x20
c001b9f3:	85 c0                	test   eax,eax
c001b9f5:	0f 85 17 01 00 00    	jne    c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9fb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ba01:	0f 85 0b 01 00 00    	jne    c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba0a:	85 c0                	test   eax,eax
c001ba0c:	0f 84 00 01 00 00    	je     c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba12:	31 d2                	xor    edx,edx
c001ba14:	55                   	push   ebp
c001ba15:	52                   	push   edx
c001ba16:	50                   	push   eax
c001ba17:	56                   	push   esi
c001ba18:	e8 c9 73 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	85 c0                	test   eax,eax
c001ba22:	0f 85 ea 00 00 00    	jne    c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ba2e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba36:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba3a:	0f af c2             	imul   eax,edx
c001ba3d:	50                   	push   eax
c001ba3e:	e8 91 3a ff ff       	call   c000f4d4 <malloc>
c001ba43:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba49:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba50:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba54:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba58:	0f af c2             	imul   eax,edx
c001ba5b:	99                   	cdq    
c001ba5c:	52                   	push   edx
c001ba5d:	50                   	push   eax
c001ba5e:	56                   	push   esi
c001ba5f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba62:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba65:	83 c4 20             	add    esp,0x20
c001ba68:	85 c0                	test   eax,eax
c001ba6a:	0f 84 a2 00 00 00    	je     c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba70:	31 d2                	xor    edx,edx
c001ba72:	51                   	push   ecx
c001ba73:	52                   	push   edx
c001ba74:	50                   	push   eax
c001ba75:	56                   	push   esi
c001ba76:	e8 6b 73 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	85 c0                	test   eax,eax
c001ba80:	0f 85 8c 00 00 00    	jne    c001bb12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba8d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba91:	31 ed                	xor    ebp,ebp
c001ba93:	0f af c2             	imul   eax,edx
c001ba96:	50                   	push   eax
c001ba97:	e8 38 3a ff ff       	call   c000f4d4 <malloc>
c001ba9c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001baa2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001baa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baa9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001baad:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bab1:	0f af c2             	imul   eax,edx
c001bab4:	99                   	cdq    
c001bab5:	52                   	push   edx
c001bab6:	50                   	push   eax
c001bab7:	56                   	push   esi
c001bab8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001babb:	83 c4 20             	add    esp,0x20
c001babe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bac6:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001baca:	0f 86 80 00 00 00    	jbe    c001bb50 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bad0:	0f b7 fd             	movzx  edi,bp
c001bad3:	c1 e7 05             	shl    edi,0x5
c001bad6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bada:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001badd:	75 6b                	jne    c001bb4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001badf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bae6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bae9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001baed:	52                   	push   edx
c001baee:	31 d2                	xor    edx,edx
c001baf0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001baf3:	52                   	push   edx
c001baf4:	50                   	push   eax
c001baf5:	56                   	push   esi
c001baf6:	e8 eb 72 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	85 c0                	test   eax,eax
c001bb00:	74 17                	je     c001bb19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	68 04 a6 02 c0       	push   0xc002a604
c001bb0a:	e8 86 6c ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001bb0f:	83 c4 10             	add    esp,0x10
c001bb12:	31 c0                	xor    eax,eax
c001bb14:	e9 87 00 00 00       	jmp    c001bba0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bb19:	83 ec 0c             	sub    esp,0xc
c001bb1c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bb1f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bb22:	50                   	push   eax
c001bb23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb2b:	56                   	push   esi
c001bb2c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bb30:	e8 e0 fb ff ff       	call   c001b715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bb35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb39:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bb3d:	83 c4 20             	add    esp,0x20
c001bb40:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb44:	73 04                	jae    c001bb4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb4a:	45                   	inc    ebp
c001bb4b:	e9 76 ff ff ff       	jmp    c001bac6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb50:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb5c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb70:	05 00 10 00 00       	add    eax,0x1000
c001bb75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb7c:	e8 63 39 ff ff       	call   c000f4e4 <free>
c001bb81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb84:	e8 5b 39 ff ff       	call   c000f4e4 <free>
c001bb89:	58                   	pop    eax
c001bb8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb8e:	e8 51 39 ff ff       	call   c000f4e4 <free>
c001bb93:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb96:	e8 eb 71 ff ff       	call   c0012d86 <File::close()>
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	b0 01                	mov    al,0x1
c001bba0:	83 c4 3c             	add    esp,0x3c
c001bba3:	5b                   	pop    ebx
c001bba4:	5e                   	pop    esi
c001bba5:	5f                   	pop    edi
c001bba6:	5d                   	pop    ebp
c001bba7:	c3                   	ret    

c001bba8 <Thr::runtimeReferenceHelper()>:
c001bba8:	83 ec 18             	sub    esp,0x18
c001bbab:	68 0c a6 02 c0       	push   0xc002a60c
c001bbb0:	e8 e0 6b ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001bbb5:	fa                   	cli    
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	eb fe                	jmp    c001bbb9 <Thr::runtimeReferenceHelper()+0x11>

c001bbbb <Thr::getAddressOfKernelSymbol(char const*)>:
c001bbbb:	57                   	push   edi
c001bbbc:	56                   	push   esi
c001bbbd:	53                   	push   ebx
c001bbbe:	31 db                	xor    ebx,ebx
c001bbc0:	39 1d 60 de 02 c0    	cmp    DWORD PTR ds:0xc002de60,ebx
c001bbc6:	7e 3c                	jle    c001bc04 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bbc8:	8b 34 9d e0 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2220]
c001bbcf:	31 ff                	xor    edi,edi
c001bbd1:	39 3c 9d e0 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2320],edi
c001bbd8:	7e 27                	jle    c001bc01 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bbda:	50                   	push   eax
c001bbdb:	50                   	push   eax
c001bbdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbe0:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbe2:	03 04 9d 60 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd22a0]
c001bbe9:	50                   	push   eax
c001bbea:	e8 8c 4b fe ff       	call   c000077b <strcmp>
c001bbef:	83 c4 10             	add    esp,0x10
c001bbf2:	85 c0                	test   eax,eax
c001bbf4:	75 05                	jne    c001bbfb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bbf6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bbf9:	eb 0b                	jmp    c001bc06 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bbfb:	83 c6 10             	add    esi,0x10
c001bbfe:	47                   	inc    edi
c001bbff:	eb d0                	jmp    c001bbd1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bc01:	43                   	inc    ebx
c001bc02:	eb bc                	jmp    c001bbc0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bc04:	31 c0                	xor    eax,eax
c001bc06:	5b                   	pop    ebx
c001bc07:	5e                   	pop    esi
c001bc08:	5f                   	pop    edi
c001bc09:	c3                   	ret    

c001bc0a <Thr::loadKernelSymbolTable(char const*)>:
c001bc0a:	55                   	push   ebp
c001bc0b:	57                   	push   edi
c001bc0c:	56                   	push   esi
c001bc0d:	53                   	push   ebx
c001bc0e:	83 ec 68             	sub    esp,0x68
c001bc11:	8b 35 b4 de 02 c0    	mov    esi,DWORD PTR ds:0xc002deb4
c001bc17:	68 14 01 00 00       	push   0x114
c001bc1c:	e8 b3 38 ff ff       	call   c000f4d4 <malloc>
c001bc21:	83 c4 0c             	add    esp,0xc
c001bc24:	89 c3                	mov    ebx,eax
c001bc26:	56                   	push   esi
c001bc27:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bc2b:	50                   	push   eax
c001bc2c:	e8 93 70 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001bc31:	5e                   	pop    esi
c001bc32:	5f                   	pop    edi
c001bc33:	6a 01                	push   0x1
c001bc35:	53                   	push   ebx
c001bc36:	e8 ed 70 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001bc3b:	83 c4 10             	add    esp,0x10
c001bc3e:	31 d2                	xor    edx,edx
c001bc40:	85 c0                	test   eax,eax
c001bc42:	0f 85 74 02 00 00    	jne    c001bebc <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc48:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	6a 34                	push   0x34
c001bc55:	e8 7a 38 ff ff       	call   c000f4d4 <malloc>
c001bc5a:	59                   	pop    ecx
c001bc5b:	89 c7                	mov    edi,eax
c001bc5d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc61:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc63:	56                   	push   esi
c001bc64:	57                   	push   edi
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 34                	push   0x34
c001bc69:	53                   	push   ebx
c001bc6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc6d:	83 c4 20             	add    esp,0x20
c001bc70:	85 c0                	test   eax,eax
c001bc72:	74 17                	je     c001bc8b <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bc74:	83 ec 0c             	sub    esp,0xc
c001bc77:	68 2e a6 02 c0       	push   0xc002a62e
c001bc7c:	e8 2e dc ff ff       	call   c00198af <Krnl::panic(char const*)>
c001bc81:	83 c4 10             	add    esp,0x10
c001bc84:	31 d2                	xor    edx,edx
c001bc86:	e9 31 02 00 00       	jmp    c001bebc <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc8b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bc91:	75 e1                	jne    c001bc74 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc93:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bc96:	85 c0                	test   eax,eax
c001bc98:	74 da                	je     c001bc74 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc9a:	52                   	push   edx
c001bc9b:	31 d2                	xor    edx,edx
c001bc9d:	52                   	push   edx
c001bc9e:	50                   	push   eax
c001bc9f:	53                   	push   ebx
c001bca0:	e8 41 71 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	85 c0                	test   eax,eax
c001bcaa:	75 c8                	jne    c001bc74 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bcac:	83 ec 0c             	sub    esp,0xc
c001bcaf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcb3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bcb7:	31 ed                	xor    ebp,ebp
c001bcb9:	0f af c2             	imul   eax,edx
c001bcbc:	50                   	push   eax
c001bcbd:	e8 12 38 ff ff       	call   c000f4d4 <malloc>
c001bcc2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bcc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcc8:	89 34 24             	mov    DWORD PTR [esp],esi
c001bccb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bccf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcd3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bcd7:	0f af c2             	imul   eax,edx
c001bcda:	99                   	cdq    
c001bcdb:	52                   	push   edx
c001bcdc:	50                   	push   eax
c001bcdd:	53                   	push   ebx
c001bcde:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bce1:	83 c4 20             	add    esp,0x20
c001bce4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bcec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bcf4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bcfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd04:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bd08:	0f 86 aa 00 00 00    	jbe    c001bdb8 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bd0e:	0f b7 f5             	movzx  esi,bp
c001bd11:	6b f6 28             	imul   esi,esi,0x28
c001bd14:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bd18:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bd1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd1f:	50                   	push   eax
c001bd20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bd24:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bd28:	8b 16                	mov    edx,DWORD PTR [esi]
c001bd2a:	6b c0 28             	imul   eax,eax,0x28
c001bd2d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bd31:	89 d0                	mov    eax,edx
c001bd33:	31 d2                	xor    edx,edx
c001bd35:	52                   	push   edx
c001bd36:	50                   	push   eax
c001bd37:	53                   	push   ebx
c001bd38:	e8 a9 70 ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bd3d:	83 c4 0c             	add    esp,0xc
c001bd40:	6a 20                	push   0x20
c001bd42:	6a 00                	push   0x0
c001bd44:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd48:	52                   	push   edx
c001bd49:	e8 3d 49 fe ff       	call   c000068b <memset>
c001bd4e:	58                   	pop    eax
c001bd4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd51:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd55:	51                   	push   ecx
c001bd56:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd5a:	52                   	push   edx
c001bd5b:	6a 00                	push   0x0
c001bd5d:	6a 1f                	push   0x1f
c001bd5f:	53                   	push   ebx
c001bd60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd63:	83 c4 18             	add    esp,0x18
c001bd66:	68 45 a6 02 c0       	push   0xc002a645
c001bd6b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd6f:	52                   	push   edx
c001bd70:	e8 06 4a fe ff       	call   c000077b <strcmp>
c001bd75:	83 c4 10             	add    esp,0x10
c001bd78:	85 c0                	test   eax,eax
c001bd7a:	75 0f                	jne    c001bd8b <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bd7c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8b:	50                   	push   eax
c001bd8c:	50                   	push   eax
c001bd8d:	68 4d a6 02 c0       	push   0xc002a64d
c001bd92:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bd96:	50                   	push   eax
c001bd97:	e8 df 49 fe ff       	call   c000077b <strcmp>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	85 c0                	test   eax,eax
c001bda1:	75 0f                	jne    c001bdb2 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bda3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bda6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bdb2:	45                   	inc    ebp
c001bdb3:	e9 4c ff ff ff       	jmp    c001bd04 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bdb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bdbd:	75 10                	jne    c001bdcf <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bdbf:	83 ec 0c             	sub    esp,0xc
c001bdc2:	68 55 a6 02 c0       	push   0xc002a655
c001bdc7:	e8 e3 da ff ff       	call   c00198af <Krnl::panic(char const*)>
c001bdcc:	83 c4 10             	add    esp,0x10
c001bdcf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bdd4:	75 10                	jne    c001bde6 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bdd6:	83 ec 0c             	sub    esp,0xc
c001bdd9:	68 55 a6 02 c0       	push   0xc002a655
c001bdde:	e8 cc da ff ff       	call   c00198af <Krnl::panic(char const*)>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	31 d2                	xor    edx,edx
c001bde8:	50                   	push   eax
c001bde9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bded:	52                   	push   edx
c001bdee:	50                   	push   eax
c001bdef:	53                   	push   ebx
c001bdf0:	e8 f1 6f ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bdf5:	5a                   	pop    edx
c001bdf6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bdfa:	e8 d5 36 ff ff       	call   c000f4d4 <malloc>
c001bdff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be07:	31 c9                	xor    ecx,ecx
c001be09:	5e                   	pop    esi
c001be0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be0c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001be10:	55                   	push   ebp
c001be11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be15:	51                   	push   ecx
c001be16:	52                   	push   edx
c001be17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001be1b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001be1f:	53                   	push   ebx
c001be20:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be23:	83 c4 14             	add    esp,0x14
c001be26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be2a:	e8 a5 36 ff ff       	call   c000f4d4 <malloc>
c001be2f:	89 c6                	mov    esi,eax
c001be31:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be33:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be36:	56                   	push   esi
c001be37:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be3f:	51                   	push   ecx
c001be40:	52                   	push   edx
c001be41:	53                   	push   ebx
c001be42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be49:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001be4f:	83 c4 1c             	add    esp,0x1c
c001be52:	c1 e8 04             	shr    eax,0x4
c001be55:	89 04 95 e0 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2320],eax
c001be5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be60:	31 d2                	xor    edx,edx
c001be62:	52                   	push   edx
c001be63:	50                   	push   eax
c001be64:	53                   	push   ebx
c001be65:	e8 7c 6f ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001be6a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be6c:	31 d2                	xor    edx,edx
c001be6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be71:	56                   	push   esi
c001be72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be76:	52                   	push   edx
c001be77:	50                   	push   eax
c001be78:	53                   	push   ebx
c001be79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be7c:	83 c4 14             	add    esp,0x14
c001be7f:	53                   	push   ebx
c001be80:	e8 01 6f ff ff       	call   c0012d86 <File::close()>
c001be85:	5d                   	pop    ebp
c001be86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be8a:	e8 55 36 ff ff       	call   c000f4e4 <free>
c001be8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be92:	e8 4d 36 ff ff       	call   c000f4e4 <free>
c001be97:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001be9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bea0:	8d 50 01             	lea    edx,[eax+0x1]
c001bea3:	89 0c 85 e0 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2220],ecx
c001beaa:	89 15 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edx
c001beb0:	89 34 85 60 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd22a0],esi
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	b2 01                	mov    dl,0x1
c001bebc:	83 c4 5c             	add    esp,0x5c
c001bebf:	88 d0                	mov    al,dl
c001bec1:	5b                   	pop    ebx
c001bec2:	5e                   	pop    esi
c001bec3:	5f                   	pop    edi
c001bec4:	5d                   	pop    ebp
c001bec5:	c3                   	ret    

c001bec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bec6:	55                   	push   ebp
c001bec7:	57                   	push   edi
c001bec8:	56                   	push   esi
c001bec9:	53                   	push   ebx
c001beca:	81 ec 68 03 00 00    	sub    esp,0x368
c001bed0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bed7:	8b 1d b4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002deb4
c001bedd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bee1:	68 14 01 00 00       	push   0x114
c001bee6:	e8 e9 35 ff ff       	call   c000f4d4 <malloc>
c001beeb:	83 c4 0c             	add    esp,0xc
c001beee:	89 c5                	mov    ebp,eax
c001bef0:	53                   	push   ebx
c001bef1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bef8:	50                   	push   eax
c001bef9:	e8 c6 6d ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001befe:	58                   	pop    eax
c001beff:	5a                   	pop    edx
c001bf00:	6a 01                	push   0x1
c001bf02:	55                   	push   ebp
c001bf03:	e8 20 6e ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001bf08:	83 c4 10             	add    esp,0x10
c001bf0b:	85 c0                	test   eax,eax
c001bf0d:	0f 85 f2 06 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf13:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf1b:	83 ec 0c             	sub    esp,0xc
c001bf1e:	6a 34                	push   0x34
c001bf20:	e8 af 35 ff ff       	call   c000f4d4 <malloc>
c001bf25:	89 c7                	mov    edi,eax
c001bf27:	58                   	pop    eax
c001bf28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf2b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bf2f:	53                   	push   ebx
c001bf30:	57                   	push   edi
c001bf31:	6a 00                	push   0x0
c001bf33:	6a 34                	push   0x34
c001bf35:	55                   	push   ebp
c001bf36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf39:	83 c4 20             	add    esp,0x20
c001bf3c:	85 c0                	test   eax,eax
c001bf3e:	0f 85 c1 06 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf44:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf4a:	0f 85 b5 06 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf50:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf53:	85 c0                	test   eax,eax
c001bf55:	0f 84 aa 06 00 00    	je     c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf5b:	31 d2                	xor    edx,edx
c001bf5d:	56                   	push   esi
c001bf5e:	52                   	push   edx
c001bf5f:	50                   	push   eax
c001bf60:	55                   	push   ebp
c001bf61:	e8 80 6e ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bf66:	83 c4 10             	add    esp,0x10
c001bf69:	85 c0                	test   eax,eax
c001bf6b:	0f 85 94 06 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf71:	83 ec 0c             	sub    esp,0xc
c001bf74:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bf77:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bf7f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf83:	0f af c2             	imul   eax,edx
c001bf86:	50                   	push   eax
c001bf87:	e8 48 35 ff ff       	call   c000f4d4 <malloc>
c001bf8c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf9a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf9e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bfa2:	0f af c2             	imul   eax,edx
c001bfa5:	99                   	cdq    
c001bfa6:	52                   	push   edx
c001bfa7:	50                   	push   eax
c001bfa8:	55                   	push   ebp
c001bfa9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfac:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bfaf:	83 c4 20             	add    esp,0x20
c001bfb2:	85 c0                	test   eax,eax
c001bfb4:	0f 84 4b 06 00 00    	je     c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfba:	31 d2                	xor    edx,edx
c001bfbc:	51                   	push   ecx
c001bfbd:	52                   	push   edx
c001bfbe:	50                   	push   eax
c001bfbf:	55                   	push   ebp
c001bfc0:	e8 21 6e ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	85 c0                	test   eax,eax
c001bfca:	0f 85 35 06 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfd0:	83 ec 0c             	sub    esp,0xc
c001bfd3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfd7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfdb:	31 f6                	xor    esi,esi
c001bfdd:	0f af c2             	imul   eax,edx
c001bfe0:	50                   	push   eax
c001bfe1:	e8 ee 34 ff ff       	call   c000f4d4 <malloc>
c001bfe6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfe9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bff0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bff4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bff8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bffc:	0f af c2             	imul   eax,edx
c001bfff:	99                   	cdq    
c001c000:	52                   	push   edx
c001c001:	50                   	push   eax
c001c002:	55                   	push   ebp
c001c003:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c006:	83 c4 20             	add    esp,0x20
c001c009:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c00d:	0f 86 8a 00 00 00    	jbe    c001c09d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c013:	0f b7 de             	movzx  ebx,si
c001c016:	c1 e3 05             	shl    ebx,0x5
c001c019:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c01d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c020:	75 75                	jne    c001c097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c022:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c025:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c029:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c02c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c030:	52                   	push   edx
c001c031:	31 d2                	xor    edx,edx
c001c033:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c036:	52                   	push   edx
c001c037:	50                   	push   eax
c001c038:	55                   	push   ebp
c001c039:	e8 a8 6d ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	85 c0                	test   eax,eax
c001c043:	0f 85 bc 05 00 00    	jne    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c049:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c050:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c053:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c057:	31 d2                	xor    edx,edx
c001c059:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c05d:	83 ec 0c             	sub    esp,0xc
c001c060:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c064:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c06b:	50                   	push   eax
c001c06c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c074:	52                   	push   edx
c001c075:	50                   	push   eax
c001c076:	55                   	push   ebp
c001c077:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c07a:	83 c4 1c             	add    esp,0x1c
c001c07d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c080:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c083:	50                   	push   eax
c001c084:	6a 00                	push   0x0
c001c086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08a:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c08e:	50                   	push   eax
c001c08f:	e8 f7 45 fe ff       	call   c000068b <memset>
c001c094:	83 c4 10             	add    esp,0x10
c001c097:	46                   	inc    esi
c001c098:	e9 6c ff ff ff       	jmp    c001c009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c09d:	31 db                	xor    ebx,ebx
c001c09f:	50                   	push   eax
c001c0a0:	68 00 01 00 00       	push   0x100
c001c0a5:	6a 00                	push   0x0
c001c0a7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c0ab:	50                   	push   eax
c001c0ac:	e8 da 45 fe ff       	call   c000068b <memset>
c001c0b1:	83 c4 0c             	add    esp,0xc
c001c0b4:	68 00 01 00 00       	push   0x100
c001c0b9:	6a 00                	push   0x0
c001c0bb:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c0c2:	50                   	push   eax
c001c0c3:	e8 c3 45 fe ff       	call   c000068b <memset>
c001c0c8:	83 c4 10             	add    esp,0x10
c001c0cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c0db:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c0e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0f3:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c0f7:	0f 86 30 01 00 00    	jbe    c001c22d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c0fd:	0f b7 f3             	movzx  esi,bx
c001c100:	6b f6 28             	imul   esi,esi,0x28
c001c103:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c107:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c10a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c10e:	50                   	push   eax
c001c10f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c113:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c117:	8b 06                	mov    eax,DWORD PTR [esi]
c001c119:	6b d2 28             	imul   edx,edx,0x28
c001c11c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c120:	31 d2                	xor    edx,edx
c001c122:	52                   	push   edx
c001c123:	50                   	push   eax
c001c124:	55                   	push   ebp
c001c125:	e8 bc 6c ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001c12a:	83 c4 0c             	add    esp,0xc
c001c12d:	6a 20                	push   0x20
c001c12f:	6a 00                	push   0x0
c001c131:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c138:	51                   	push   ecx
c001c139:	e8 4d 45 fe ff       	call   c000068b <memset>
c001c13e:	58                   	pop    eax
c001c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c142:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c146:	52                   	push   edx
c001c147:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c14e:	51                   	push   ecx
c001c14f:	6a 00                	push   0x0
c001c151:	6a 1f                	push   0x1f
c001c153:	55                   	push   ebp
c001c154:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c157:	83 c4 1c             	add    esp,0x1c
c001c15a:	6a 09                	push   0x9
c001c15c:	68 6f a6 02 c0       	push   0xc002a66f
c001c161:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c168:	51                   	push   ecx
c001c169:	e8 84 44 fe ff       	call   c00005f2 <memcmp>
c001c16e:	83 c4 10             	add    esp,0x10
c001c171:	85 c0                	test   eax,eax
c001c173:	75 21                	jne    c001c196 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c179:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c17d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c181:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c185:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c188:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c18f:	89 c8                	mov    eax,ecx
c001c191:	40                   	inc    eax
c001c192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c196:	50                   	push   eax
c001c197:	6a 09                	push   0x9
c001c199:	68 79 a6 02 c0       	push   0xc002a679
c001c19e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1a5:	50                   	push   eax
c001c1a6:	e8 47 44 fe ff       	call   c00005f2 <memcmp>
c001c1ab:	83 c4 10             	add    esp,0x10
c001c1ae:	85 c0                	test   eax,eax
c001c1b0:	75 21                	jne    c001c1d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1be:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c1c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1c5:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1cc:	89 c8                	mov    eax,ecx
c001c1ce:	40                   	inc    eax
c001c1cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1d3:	50                   	push   eax
c001c1d4:	50                   	push   eax
c001c1d5:	68 45 a6 02 c0       	push   0xc002a645
c001c1da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1e1:	50                   	push   eax
c001c1e2:	e8 94 45 fe ff       	call   c000077b <strcmp>
c001c1e7:	83 c4 10             	add    esp,0x10
c001c1ea:	85 c0                	test   eax,eax
c001c1ec:	75 0f                	jne    c001c1fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c1ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1fd:	50                   	push   eax
c001c1fe:	50                   	push   eax
c001c1ff:	68 4d a6 02 c0       	push   0xc002a64d
c001c204:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c20b:	50                   	push   eax
c001c20c:	e8 6a 45 fe ff       	call   c000077b <strcmp>
c001c211:	83 c4 10             	add    esp,0x10
c001c214:	85 c0                	test   eax,eax
c001c216:	75 0f                	jne    c001c227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c218:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c21b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c21f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c223:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c227:	43                   	inc    ebx
c001c228:	e9 c6 fe ff ff       	jmp    c001c0f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c22d:	31 d2                	xor    edx,edx
c001c22f:	50                   	push   eax
c001c230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c234:	52                   	push   edx
c001c235:	50                   	push   eax
c001c236:	55                   	push   ebp
c001c237:	e8 aa 6b ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001c23c:	5a                   	pop    edx
c001c23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c241:	e8 8e 32 ff ff       	call   c000f4d4 <malloc>
c001c246:	31 d2                	xor    edx,edx
c001c248:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c24c:	59                   	pop    ecx
c001c24d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c250:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c254:	53                   	push   ebx
c001c255:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c259:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c25d:	52                   	push   edx
c001c25e:	50                   	push   eax
c001c25f:	55                   	push   ebp
c001c260:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c263:	83 c4 14             	add    esp,0x14
c001c266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c26a:	e8 65 32 ff ff       	call   c000f4d4 <malloc>
c001c26f:	31 d2                	xor    edx,edx
c001c271:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c275:	83 c4 0c             	add    esp,0xc
c001c278:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c27c:	52                   	push   edx
c001c27d:	50                   	push   eax
c001c27e:	55                   	push   ebp
c001c27f:	e8 62 6b ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001c284:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c287:	31 d2                	xor    edx,edx
c001c289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c28c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c290:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c294:	52                   	push   edx
c001c295:	50                   	push   eax
c001c296:	55                   	push   ebp
c001c297:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c29a:	83 c4 20             	add    esp,0x20
c001c29d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c2a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2a9:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c2ad:	0f 84 56 03 00 00    	je     c001c609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c2b3:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c2ba:	31 d2                	xor    edx,edx
c001c2bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2c0:	c1 e8 03             	shr    eax,0x3
c001c2c3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c2c7:	50                   	push   eax
c001c2c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2cc:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c2d0:	52                   	push   edx
c001c2d1:	50                   	push   eax
c001c2d2:	55                   	push   ebp
c001c2d3:	e8 0e 6b ff ff       	call   c0012de6 <File::seek(unsigned long long)>
c001c2d8:	58                   	pop    eax
c001c2d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2dd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c2e4:	e8 eb 31 ff ff       	call   c000f4d4 <malloc>
c001c2e9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2f0:	31 d2                	xor    edx,edx
c001c2f2:	58                   	pop    eax
c001c2f3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c2f7:	50                   	push   eax
c001c2f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c300:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c307:	52                   	push   edx
c001c308:	50                   	push   eax
c001c309:	55                   	push   ebp
c001c30a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c30d:	83 c4 20             	add    esp,0x20
c001c310:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c318:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c31c:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c320:	0f 8d c7 02 00 00    	jge    c001c5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c326:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c32a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c32e:	31 db                	xor    ebx,ebx
c001c330:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c333:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c33b:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c33f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c343:	c1 e8 08             	shr    eax,0x8
c001c346:	89 c6                	mov    esi,eax
c001c348:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c34c:	c1 e6 04             	shl    esi,0x4
c001c34f:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c353:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c35a:	85 c0                	test   eax,eax
c001c35c:	0f 85 17 01 00 00    	jne    c001c479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c362:	83 ec 0c             	sub    esp,0xc
c001c365:	b3 01                	mov    bl,0x1
c001c367:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c36b:	03 06                	add    eax,DWORD PTR [esi]
c001c36d:	50                   	push   eax
c001c36e:	e8 48 f8 ff ff       	call   c001bbbb <Thr::getAddressOfKernelSymbol(char const*)>
c001c373:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c37f:	0f 85 f4 00 00 00    	jne    c001c479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c385:	50                   	push   eax
c001c386:	50                   	push   eax
c001c387:	68 83 a6 02 c0       	push   0xc002a683
c001c38c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c390:	03 06                	add    eax,DWORD PTR [esi]
c001c392:	50                   	push   eax
c001c393:	e8 e3 43 fe ff       	call   c000077b <strcmp>
c001c398:	83 c4 10             	add    esp,0x10
c001c39b:	85 c0                	test   eax,eax
c001c39d:	75 0a                	jne    c001c3a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c39f:	b8 cc 53 02 c0       	mov    eax,0xc00253cc
c001c3a4:	e9 ca 00 00 00       	jmp    c001c473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3a9:	50                   	push   eax
c001c3aa:	50                   	push   eax
c001c3ab:	68 8d a6 02 c0       	push   0xc002a68d
c001c3b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3b4:	03 06                	add    eax,DWORD PTR [esi]
c001c3b6:	50                   	push   eax
c001c3b7:	e8 bf 43 fe ff       	call   c000077b <strcmp>
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	85 c0                	test   eax,eax
c001c3c1:	75 0a                	jne    c001c3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c3c3:	b8 00 51 02 c0       	mov    eax,0xc0025100
c001c3c8:	e9 a6 00 00 00       	jmp    c001c473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3cd:	53                   	push   ebx
c001c3ce:	53                   	push   ebx
c001c3cf:	68 96 a6 02 c0       	push   0xc002a696
c001c3d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3d8:	03 06                	add    eax,DWORD PTR [esi]
c001c3da:	50                   	push   eax
c001c3db:	e8 9b 43 fe ff       	call   c000077b <strcmp>
c001c3e0:	83 c4 10             	add    esp,0x10
c001c3e3:	85 c0                	test   eax,eax
c001c3e5:	75 0a                	jne    c001c3f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c3e7:	b8 cc 54 02 c0       	mov    eax,0xc00254cc
c001c3ec:	e9 82 00 00 00       	jmp    c001c473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3f1:	51                   	push   ecx
c001c3f2:	51                   	push   ecx
c001c3f3:	68 a0 a6 02 c0       	push   0xc002a6a0
c001c3f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3fc:	03 06                	add    eax,DWORD PTR [esi]
c001c3fe:	50                   	push   eax
c001c3ff:	e8 77 43 fe ff       	call   c000077b <strcmp>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	85 c0                	test   eax,eax
c001c409:	74 63                	je     c001c46e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c40b:	50                   	push   eax
c001c40c:	50                   	push   eax
c001c40d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c411:	03 06                	add    eax,DWORD PTR [esi]
c001c413:	50                   	push   eax
c001c414:	68 a9 a6 02 c0       	push   0xc002a6a9
c001c419:	e8 77 63 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001c41e:	58                   	pop    eax
c001c41f:	5a                   	pop    edx
c001c420:	68 c3 a6 02 c0       	push   0xc002a6c3
c001c425:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c42c:	53                   	push   ebx
c001c42d:	e8 f8 42 fe ff       	call   c000072a <strcpy>
c001c432:	59                   	pop    ecx
c001c433:	58                   	pop    eax
c001c434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c438:	03 06                	add    eax,DWORD PTR [esi]
c001c43a:	50                   	push   eax
c001c43b:	53                   	push   ebx
c001c43c:	e8 a0 43 fe ff       	call   c00007e1 <strcat>
c001c441:	58                   	pop    eax
c001c442:	5a                   	pop    edx
c001c443:	68 59 a7 02 c0       	push   0xc002a759
c001c448:	53                   	push   ebx
c001c449:	e8 93 43 fe ff       	call   c00007e1 <strcat>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c456:	0f 84 4b 01 00 00    	je     c001c5a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	53                   	push   ebx
c001c460:	e8 4a d4 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c46c:	eb 0b                	jmp    c001c479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c46e:	b8 4c 52 02 c0       	mov    eax,0xc002524c
c001c473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c477:	b3 01                	mov    bl,0x1
c001c479:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c47e:	0f 85 80 00 00 00    	jne    c001c504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c484:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c48b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c48f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c493:	01 ce                	add    esi,ecx
c001c495:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c49d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c49f:	0f 94 c2             	sete   dl
c001c4a2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c4aa:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c4af:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c4b3:	84 db                	test   bl,bl
c001c4b5:	74 31                	je     c001c4e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c4b7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c4bb:	01 c3                	add    ebx,eax
c001c4bd:	84 d2                	test   dl,dl
c001c4bf:	75 0a                	jne    c001c4cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c4c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4c5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4c9:	76 32                	jbe    c001c4fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4cb:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4d0:	0f 84 d1 00 00 00    	je     c001c5a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4d6:	83 ec 0c             	sub    esp,0xc
c001c4d9:	68 da a6 02 c0       	push   0xc002a6da
c001c4de:	e8 cc d3 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	eb 15                	jmp    c001c4fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4e8:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c4eb:	84 d2                	test   dl,dl
c001c4ed:	75 0e                	jne    c001c4fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4f3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4f7:	77 04                	ja     c001c4fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4f9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c4fd:	89 1e                	mov    DWORD PTR [esi],ebx
c001c4ff:	e9 e0 00 00 00       	jmp    c001c5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c504:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c509:	75 6e                	jne    c001c579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c50b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c512:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c516:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c51a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c522:	74 17                	je     c001c53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c524:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c52c:	74 0d                	je     c001c53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c52e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c532:	83 e8 04             	sub    eax,0x4
c001c535:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c539:	76 17                	jbe    c001c552 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c53b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c540:	74 65                	je     c001c5a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c542:	83 ec 0c             	sub    esp,0xc
c001c545:	68 f6 a6 02 c0       	push   0xc002a6f6
c001c54a:	e8 60 d3 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	8b 16                	mov    edx,DWORD PTR [esi]
c001c554:	84 db                	test   bl,bl
c001c556:	74 13                	je     c001c56b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c55c:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c563:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c567:	01 d0                	add    eax,edx
c001c569:	eb 06                	jmp    c001c571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c56b:	89 d0                	mov    eax,edx
c001c56d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c575:	89 06                	mov    DWORD PTR [esi],eax
c001c577:	eb 6b                	jmp    c001c5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c579:	50                   	push   eax
c001c57a:	50                   	push   eax
c001c57b:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c580:	50                   	push   eax
c001c581:	68 12 a7 02 c0       	push   0xc002a712
c001c586:	e8 0a 62 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c593:	74 12                	je     c001c5a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c595:	83 ec 0c             	sub    esp,0xc
c001c598:	68 1d a7 02 c0       	push   0xc002a71d
c001c59d:	e8 0d d3 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	eb 3d                	jmp    c001c5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c5a7:	83 ec 0c             	sub    esp,0xc
c001c5aa:	55                   	push   ebp
c001c5ab:	e8 d6 67 ff ff       	call   c0012d86 <File::close()>
c001c5b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5b9:	59                   	pop    ecx
c001c5ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5be:	e8 21 2f ff ff       	call   c000f4e4 <free>
c001c5c3:	5b                   	pop    ebx
c001c5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5c8:	e8 17 2f ff ff       	call   c000f4e4 <free>
c001c5cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5d0:	e8 0f 2f ff ff       	call   c000f4e4 <free>
c001c5d5:	5e                   	pop    esi
c001c5d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c5da:	e8 05 2f ff ff       	call   c000f4e4 <free>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	eb 21                	jmp    c001c605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c5e4:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c5e8:	e9 2b fd ff ff       	jmp    c001c318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c5ed:	83 ec 0c             	sub    esp,0xc
c001c5f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5f4:	e8 eb 2e ff ff       	call   c000f4e4 <free>
c001c5f9:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	e9 a0 fc ff ff       	jmp    c001c2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c605:	31 c0                	xor    eax,eax
c001c607:	eb 33                	jmp    c001c63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c609:	83 ec 0c             	sub    esp,0xc
c001c60c:	55                   	push   ebp
c001c60d:	e8 74 67 ff ff       	call   c0012d86 <File::close()>
c001c612:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c615:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c618:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c61b:	58                   	pop    eax
c001c61c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c620:	e8 bf 2e ff ff       	call   c000f4e4 <free>
c001c625:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c628:	e8 b7 2e ff ff       	call   c000f4e4 <free>
c001c62d:	5a                   	pop    edx
c001c62e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c632:	e8 ad 2e ff ff       	call   c000f4e4 <free>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	b0 01                	mov    al,0x1
c001c63c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c642:	5b                   	pop    ebx
c001c643:	5e                   	pop    esi
c001c644:	5f                   	pop    edi
c001c645:	5d                   	pop    ebp
c001c646:	c3                   	ret    

c001c647 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c647:	56                   	push   esi
c001c648:	31 d2                	xor    edx,edx
c001c64a:	53                   	push   ebx
c001c64b:	8b 1d c0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6c0
c001c651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c655:	39 d3                	cmp    ebx,edx
c001c657:	7e 1b                	jle    c001c674 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c659:	8b 04 95 e0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2720]
c001c660:	39 c8                	cmp    eax,ecx
c001c662:	77 0d                	ja     c001c671 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c664:	8b 34 95 e0 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2920]
c001c66b:	01 c6                	add    esi,eax
c001c66d:	39 ce                	cmp    esi,ecx
c001c66f:	77 05                	ja     c001c676 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c671:	42                   	inc    edx
c001c672:	eb e1                	jmp    c001c655 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c674:	31 c0                	xor    eax,eax
c001c676:	5b                   	pop    ebx
c001c677:	5e                   	pop    esi
c001c678:	c3                   	ret    

c001c679 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c679:	53                   	push   ebx
c001c67a:	31 c0                	xor    eax,eax
c001c67c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c680:	8b 1d c0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6c0
c001c686:	39 c3                	cmp    ebx,eax
c001c688:	7e 22                	jle    c001c6ac <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c68a:	8b 14 85 e0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2720]
c001c691:	39 ca                	cmp    edx,ecx
c001c693:	77 14                	ja     c001c6a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c695:	03 14 85 e0 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2920]
c001c69c:	39 ca                	cmp    edx,ecx
c001c69e:	76 09                	jbe    c001c6a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c6a0:	8b 04 85 e0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2520]
c001c6a7:	eb 05                	jmp    c001c6ae <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c6a9:	40                   	inc    eax
c001c6aa:	eb da                	jmp    c001c686 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c6ac:	31 c0                	xor    eax,eax
c001c6ae:	5b                   	pop    ebx
c001c6af:	c3                   	ret    

c001c6b0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c6b0:	53                   	push   ebx
c001c6b1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c6b5:	53                   	push   ebx
c001c6b6:	e8 8c ff ff ff       	call   c001c647 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c6bb:	5a                   	pop    edx
c001c6bc:	31 d2                	xor    edx,edx
c001c6be:	85 c0                	test   eax,eax
c001c6c0:	74 04                	je     c001c6c6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c6c2:	89 da                	mov    edx,ebx
c001c6c4:	29 c2                	sub    edx,eax
c001c6c6:	89 d0                	mov    eax,edx
c001c6c8:	5b                   	pop    ebx
c001c6c9:	c3                   	ret    

c001c6ca <Thr::loadDLL(char const*, bool)>:
c001c6ca:	55                   	push   ebp
c001c6cb:	57                   	push   edi
c001c6cc:	56                   	push   esi
c001c6cd:	53                   	push   ebx
c001c6ce:	81 ec 34 01 00 00    	sub    esp,0x134
c001c6d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c6db:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c6e2:	56                   	push   esi
c001c6e3:	68 35 a7 02 c0       	push   0xc002a735
c001c6e8:	e8 a8 60 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001c6ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6f4:	e8 db 2d ff ff       	call   c000f4d4 <malloc>
c001c6f9:	83 c4 0c             	add    esp,0xc
c001c6fc:	89 c3                	mov    ebx,eax
c001c6fe:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001c704:	56                   	push   esi
c001c705:	50                   	push   eax
c001c706:	e8 b9 65 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	85 db                	test   ebx,ebx
c001c710:	75 3c                	jne    c001c74e <Thr::loadDLL(char const*, bool)+0x84>
c001c712:	89 e8                	mov    eax,ebp
c001c714:	84 c0                	test   al,al
c001c716:	0f 84 b0 01 00 00    	je     c001c8cc <Thr::loadDLL(char const*, bool)+0x202>
c001c71c:	50                   	push   eax
c001c71d:	50                   	push   eax
c001c71e:	68 46 a7 02 c0       	push   0xc002a746
c001c723:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c727:	57                   	push   edi
c001c728:	e8 fd 3f fe ff       	call   c000072a <strcpy>
c001c72d:	58                   	pop    eax
c001c72e:	5a                   	pop    edx
c001c72f:	56                   	push   esi
c001c730:	57                   	push   edi
c001c731:	e8 ab 40 fe ff       	call   c00007e1 <strcat>
c001c736:	59                   	pop    ecx
c001c737:	58                   	pop    eax
c001c738:	68 59 a7 02 c0       	push   0xc002a759
c001c73d:	57                   	push   edi
c001c73e:	e8 9e 40 fe ff       	call   c00007e1 <strcat>
c001c743:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c746:	e8 64 d1 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	50                   	push   eax
c001c74f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c753:	50                   	push   eax
c001c754:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c758:	50                   	push   eax
c001c759:	53                   	push   ebx
c001c75a:	e8 75 68 ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	85 db                	test   ebx,ebx
c001c764:	74 0c                	je     c001c772 <Thr::loadDLL(char const*, bool)+0xa8>
c001c766:	83 ec 0c             	sub    esp,0xc
c001c769:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c76b:	53                   	push   ebx
c001c76c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c777:	75 0a                	jne    c001c783 <Thr::loadDLL(char const*, bool)+0xb9>
c001c779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c77d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c781:	75 3c                	jne    c001c7bf <Thr::loadDLL(char const*, bool)+0xf5>
c001c783:	89 e8                	mov    eax,ebp
c001c785:	84 c0                	test   al,al
c001c787:	0f 84 3d 01 00 00    	je     c001c8ca <Thr::loadDLL(char const*, bool)+0x200>
c001c78d:	50                   	push   eax
c001c78e:	50                   	push   eax
c001c78f:	68 46 a7 02 c0       	push   0xc002a746
c001c794:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c798:	53                   	push   ebx
c001c799:	e8 8c 3f fe ff       	call   c000072a <strcpy>
c001c79e:	58                   	pop    eax
c001c79f:	5a                   	pop    edx
c001c7a0:	56                   	push   esi
c001c7a1:	53                   	push   ebx
c001c7a2:	e8 3a 40 fe ff       	call   c00007e1 <strcat>
c001c7a7:	59                   	pop    ecx
c001c7a8:	5f                   	pop    edi
c001c7a9:	68 59 a7 02 c0       	push   0xc002a759
c001c7ae:	53                   	push   ebx
c001c7af:	e8 2d 40 fe ff       	call   c00007e1 <strcat>
c001c7b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7b7:	e8 f3 d0 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	e8 71 51 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c001c7c4:	51                   	push   ecx
c001c7c5:	6a 03                	push   0x3
c001c7c7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c7cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c7cf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c7d5:	83 d3 00             	adc    ebx,0x0
c001c7d8:	89 ca                	mov    edx,ecx
c001c7da:	89 d1                	mov    ecx,edx
c001c7dc:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c7e0:	51                   	push   ecx
c001c7e1:	50                   	push   eax
c001c7e2:	e8 89 57 ff ff       	call   c0011f70 <VAS::allocatePages(int, int)>
c001c7e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7ea:	89 c3                	mov    ebx,eax
c001c7ec:	e8 b7 3e fe ff       	call   c00006a8 <strlen>
c001c7f1:	8b 3d c0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c0
c001c7f7:	40                   	inc    eax
c001c7f8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7fb:	e8 d4 2c ff ff       	call   c000f4d4 <malloc>
c001c800:	89 04 bd e0 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2520],eax
c001c807:	5f                   	pop    edi
c001c808:	58                   	pop    eax
c001c809:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c001c80e:	56                   	push   esi
c001c80f:	ff 34 85 e0 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2520]
c001c816:	e8 0f 3f fe ff       	call   c000072a <strcpy>
c001c81b:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c001c820:	8d 50 01             	lea    edx,[eax+0x1]
c001c823:	89 1c 85 e0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2720],ebx
c001c82a:	89 15 c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,edx
c001c830:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c834:	83 c4 0c             	add    esp,0xc
c001c837:	89 14 85 e0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2920],edx
c001c83e:	6a 01                	push   0x1
c001c840:	53                   	push   ebx
c001c841:	56                   	push   esi
c001c842:	e8 7f f6 ff ff       	call   c001bec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c847:	83 c4 10             	add    esp,0x10
c001c84a:	89 c7                	mov    edi,eax
c001c84c:	fe c8                	dec    al
c001c84e:	74 16                	je     c001c866 <Thr::loadDLL(char const*, bool)+0x19c>
c001c850:	89 e8                	mov    eax,ebp
c001c852:	84 c0                	test   al,al
c001c854:	74 10                	je     c001c866 <Thr::loadDLL(char const*, bool)+0x19c>
c001c856:	83 ec 0c             	sub    esp,0xc
c001c859:	68 5b a7 02 c0       	push   0xc002a75b
c001c85e:	e8 4c d0 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	31 f6                	xor    esi,esi
c001c868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c86c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c870:	05 ff 0f 00 00       	add    eax,0xfff
c001c875:	83 d2 00             	adc    edx,0x0
c001c878:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c87c:	c1 ea 0c             	shr    edx,0xc
c001c87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c887:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c88b:	ba 00 00 00 00       	mov    edx,0x0
c001c890:	89 d0                	mov    eax,edx
c001c892:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c896:	73 2c                	jae    c001c8c4 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c898:	e8 98 50 ff ff       	call   c0011935 <Virt::getAKernelVAS()>
c001c89d:	89 f5                	mov    ebp,esi
c001c89f:	c1 e5 0c             	shl    ebp,0xc
c001c8a2:	52                   	push   edx
c001c8a3:	01 dd                	add    ebp,ebx
c001c8a5:	52                   	push   edx
c001c8a6:	55                   	push   ebp
c001c8a7:	50                   	push   eax
c001c8a8:	e8 3d 52 ff ff       	call   c0011aea <VAS::getPageTableEntry(unsigned long)>
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c8b3:	75 0c                	jne    c001c8c1 <Thr::loadDLL(char const*, bool)+0x1f7>
c001c8b5:	83 ec 0c             	sub    esp,0xc
c001c8b8:	55                   	push   ebp
c001c8b9:	e8 49 31 ff ff       	call   c000fa07 <Phys::freePage(unsigned long)>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	46                   	inc    esi
c001c8c2:	eb a4                	jmp    c001c868 <Thr::loadDLL(char const*, bool)+0x19e>
c001c8c4:	89 f8                	mov    eax,edi
c001c8c6:	84 c0                	test   al,al
c001c8c8:	75 02                	jne    c001c8cc <Thr::loadDLL(char const*, bool)+0x202>
c001c8ca:	31 db                	xor    ebx,ebx
c001c8cc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8d2:	89 d8                	mov    eax,ebx
c001c8d4:	5b                   	pop    ebx
c001c8d5:	5e                   	pop    esi
c001c8d6:	5f                   	pop    edi
c001c8d7:	5d                   	pop    ebp
c001c8d8:	c3                   	ret    

c001c8d9 <Thr::executeDLL(unsigned long, void*)>:
c001c8d9:	56                   	push   esi
c001c8da:	53                   	push   ebx
c001c8db:	51                   	push   ecx
c001c8dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8e4:	85 db                	test   ebx,ebx
c001c8e6:	75 10                	jne    c001c8f8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	68 7a a7 02 c0       	push   0xc002a77a
c001c8f0:	e8 ba cf ff ff       	call   c00198af <Krnl::panic(char const*)>
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c8fc:	89 d8                	mov    eax,ebx
c001c8fe:	5a                   	pop    edx
c001c8ff:	5b                   	pop    ebx
c001c900:	5e                   	pop    esi
c001c901:	ff e0                	jmp    eax
c001c903:	90                   	nop

c001c904 <changeTSS>:
c001c904:	83 ec 14             	sub    esp,0x14
c001c907:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c90c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c90f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c914:	c1 e2 15             	shl    edx,0x15
c001c917:	29 d0                	sub    eax,edx
c001c919:	50                   	push   eax
c001c91a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001c91f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c925:	05 7c 11 00 00       	add    eax,0x117c
c001c92a:	50                   	push   eax
c001c92b:	e8 b4 47 ff ff       	call   c00110e4 <TSS::setESP(unsigned long)>
c001c930:	83 c4 1c             	add    esp,0x1c
c001c933:	c3                   	ret    

c001c934 <Process::addArgs(char**)>:
c001c934:	57                   	push   edi
c001c935:	56                   	push   esi
c001c936:	53                   	push   ebx
c001c937:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c93b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c93f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c949:	85 ff                	test   edi,edi
c001c94b:	74 3d                	je     c001c98a <Process::addArgs(char**)+0x56>
c001c94d:	8b 07                	mov    eax,DWORD PTR [edi]
c001c94f:	85 c0                	test   eax,eax
c001c951:	74 37                	je     c001c98a <Process::addArgs(char**)+0x56>
c001c953:	31 db                	xor    ebx,ebx
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	50                   	push   eax
c001c959:	e8 4a 3d fe ff       	call   c00006a8 <strlen>
c001c95e:	40                   	inc    eax
c001c95f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c962:	e8 6d 2b ff ff       	call   c000f4d4 <malloc>
c001c967:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c96e:	5a                   	pop    edx
c001c96f:	59                   	pop    ecx
c001c970:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c973:	43                   	inc    ebx
c001c974:	50                   	push   eax
c001c975:	e8 b0 3d fe ff       	call   c000072a <strcpy>
c001c97a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c986:	85 c0                	test   eax,eax
c001c988:	75 cb                	jne    c001c955 <Process::addArgs(char**)+0x21>
c001c98a:	5b                   	pop    ebx
c001c98b:	5e                   	pop    esi
c001c98c:	5f                   	pop    edi
c001c98d:	c3                   	ret    

c001c98e <Process::Process(char const*, Process*, char**)>:
c001c98e:	56                   	push   esi
c001c98f:	53                   	push   ebx
c001c990:	83 ec 14             	sub    esp,0x14
c001c993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c997:	05 0c 02 00 00       	add    eax,0x20c
c001c99c:	bb 07 00 00 00       	mov    ebx,0x7
c001c9a1:	89 c6                	mov    esi,eax
c001c9a3:	85 db                	test   ebx,ebx
c001c9a5:	78 12                	js     c001c9b9 <Process::Process(char const*, Process*, char**)+0x2b>
c001c9a7:	83 ec 0c             	sub    esp,0xc
c001c9aa:	56                   	push   esi
c001c9ab:	e8 d2 ac 00 00       	call   c0027682 <ThreadControlBlock::ThreadControlBlock()>
c001c9b0:	83 c4 10             	add    esp,0x10
c001c9b3:	83 c6 63             	add    esi,0x63
c001c9b6:	4b                   	dec    ebx
c001c9b7:	eb ea                	jmp    c001c9a3 <Process::Process(char const*, Process*, char**)+0x15>
c001c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9bd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9cb:	e8 30 cd ff ff       	call   c0019700 <Krnl::newProcessEnv(Process*)>
c001c9d0:	83 c4 10             	add    esp,0x10
c001c9d3:	89 c2                	mov    edx,eax
c001c9d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9d9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c9ec:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001c9f1:	8d 50 01             	lea    edx,[eax+0x1]
c001c9f4:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001c9fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9fe:	89 02                	mov    DWORD PTR [edx],eax
c001ca00:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca0f:	e8 c0 2a ff ff       	call   c000f4d4 <malloc>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	89 c3                	mov    ebx,eax
c001ca19:	83 ec 08             	sub    esp,0x8
c001ca1c:	6a 00                	push   0x0
c001ca1e:	53                   	push   ebx
c001ca1f:	e8 f4 58 ff ff       	call   c0012318 <VAS::VAS(bool)>
c001ca24:	83 c4 10             	add    esp,0x10
c001ca27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ca31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca35:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ca3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca47:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca51:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca57:	85 c0                	test   eax,eax
c001ca59:	74 42                	je     c001ca9d <Process::Process(char const*, Process*, char**)+0x10f>
c001ca5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca5f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca65:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca6f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ca75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca79:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca7f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ca85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca89:	05 0c 01 00 00       	add    eax,0x10c
c001ca8e:	83 ec 08             	sub    esp,0x8
c001ca91:	52                   	push   edx
c001ca92:	50                   	push   eax
c001ca93:	e8 92 3c fe ff       	call   c000072a <strcpy>
c001ca98:	83 c4 10             	add    esp,0x10
c001ca9b:	eb 63                	jmp    c001cb00 <Process::Process(char const*, Process*, char**)+0x172>
c001ca9d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001caa5:	83 ec 0c             	sub    esp,0xc
c001caa8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001caac:	e8 23 2a ff ff       	call   c000f4d4 <malloc>
c001cab1:	83 c4 10             	add    esp,0x10
c001cab4:	89 c3                	mov    ebx,eax
c001cab6:	83 ec 08             	sub    esp,0x8
c001cab9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cabd:	53                   	push   ebx
c001cabe:	e8 f5 42 ff ff       	call   c0010db8 <VgaText::VgaText(char const*)>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caca:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cad4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cada:	83 ec 0c             	sub    esp,0xc
c001cadd:	50                   	push   eax
c001cade:	e8 20 36 ff ff       	call   c0010103 <addToTerminalCycle(VgaText*)>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caea:	05 0c 01 00 00       	add    eax,0x10c
c001caef:	83 ec 08             	sub    esp,0x8
c001caf2:	68 a4 a7 02 c0       	push   0xc002a7a4
c001caf7:	50                   	push   eax
c001caf8:	e8 2d 3c fe ff       	call   c000072a <strcpy>
c001cafd:	83 c4 10             	add    esp,0x10
c001cb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb04:	83 c0 0c             	add    eax,0xc
c001cb07:	83 ec 08             	sub    esp,0x8
c001cb0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb0e:	50                   	push   eax
c001cb0f:	e8 16 3c fe ff       	call   c000072a <strcpy>
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	83 ec 08             	sub    esp,0x8
c001cb1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb22:	e8 0d fe ff ff       	call   c001c934 <Process::addArgs(char**)>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	83 ec 08             	sub    esp,0x8
c001cb2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb35:	e8 58 ee ff ff       	call   c001b992 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cb3a:	83 c4 10             	add    esp,0x10
c001cb3d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb45:	83 f0 01             	xor    eax,0x1
c001cb48:	88 c2                	mov    dl,al
c001cb4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb4e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb54:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb59:	83 ec 08             	sub    esp,0x8
c001cb5c:	50                   	push   eax
c001cb5d:	68 a0 a8 02 c0       	push   0xc002a8a0
c001cb62:	e8 2e 5c ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	90                   	nop
c001cb6b:	83 c4 14             	add    esp,0x14
c001cb6e:	5b                   	pop    ebx
c001cb6f:	5e                   	pop    esi
c001cb70:	c3                   	ret    
c001cb71:	90                   	nop

c001cb72 <Process::Process(bool, char const*, Process*, char**)>:
c001cb72:	56                   	push   esi
c001cb73:	53                   	push   ebx
c001cb74:	83 ec 24             	sub    esp,0x24
c001cb77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb83:	05 0c 02 00 00       	add    eax,0x20c
c001cb88:	bb 07 00 00 00       	mov    ebx,0x7
c001cb8d:	89 c6                	mov    esi,eax
c001cb8f:	85 db                	test   ebx,ebx
c001cb91:	78 12                	js     c001cba5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cb93:	83 ec 0c             	sub    esp,0xc
c001cb96:	56                   	push   esi
c001cb97:	e8 e6 aa 00 00       	call   c0027682 <ThreadControlBlock::ThreadControlBlock()>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	83 c6 63             	add    esi,0x63
c001cba2:	4b                   	dec    ebx
c001cba3:	eb ea                	jmp    c001cb8f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cba9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbb7:	e8 44 cb ff ff       	call   c0019700 <Krnl::newProcessEnv(Process*)>
c001cbbc:	83 c4 10             	add    esp,0x10
c001cbbf:	89 c2                	mov    edx,eax
c001cbc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbc5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cbcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbcf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cbd8:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001cbdd:	8d 50 01             	lea    edx,[eax+0x1]
c001cbe0:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001cbe6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbea:	89 02                	mov    DWORD PTR [edx],eax
c001cbec:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbfb:	e8 d4 28 ff ff       	call   c000f4d4 <malloc>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	89 c3                	mov    ebx,eax
c001cc05:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc0a:	83 ec 08             	sub    esp,0x8
c001cc0d:	50                   	push   eax
c001cc0e:	53                   	push   ebx
c001cc0f:	e8 04 57 ff ff       	call   c0012318 <VAS::VAS(bool)>
c001cc14:	83 c4 10             	add    esp,0x10
c001cc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc1b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc25:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc37:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc47:	85 c0                	test   eax,eax
c001cc49:	74 42                	je     c001cc8d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc4f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc55:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc5f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc6f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc79:	05 0c 01 00 00       	add    eax,0x10c
c001cc7e:	83 ec 08             	sub    esp,0x8
c001cc81:	52                   	push   edx
c001cc82:	50                   	push   eax
c001cc83:	e8 a2 3a fe ff       	call   c000072a <strcpy>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	eb 63                	jmp    c001ccf0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cc8d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cc95:	83 ec 0c             	sub    esp,0xc
c001cc98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc9c:	e8 33 28 ff ff       	call   c000f4d4 <malloc>
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	89 c3                	mov    ebx,eax
c001cca6:	83 ec 08             	sub    esp,0x8
c001cca9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccad:	53                   	push   ebx
c001ccae:	e8 05 41 ff ff       	call   c0010db8 <VgaText::VgaText(char const*)>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ccc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccc4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	50                   	push   eax
c001ccce:	e8 30 34 ff ff       	call   c0010103 <addToTerminalCycle(VgaText*)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccda:	05 0c 01 00 00       	add    eax,0x10c
c001ccdf:	83 ec 08             	sub    esp,0x8
c001cce2:	68 a4 a7 02 c0       	push   0xc002a7a4
c001cce7:	50                   	push   eax
c001cce8:	e8 3d 3a fe ff       	call   c000072a <strcpy>
c001cced:	83 c4 10             	add    esp,0x10
c001ccf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccf4:	83 c0 0c             	add    eax,0xc
c001ccf7:	83 ec 08             	sub    esp,0x8
c001ccfa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccfe:	50                   	push   eax
c001ccff:	e8 26 3a fe ff       	call   c000072a <strcpy>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	83 ec 08             	sub    esp,0x8
c001cd0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd12:	e8 1d fc ff ff       	call   c001c934 <Process::addArgs(char**)>
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	90                   	nop
c001cd1b:	83 c4 24             	add    esp,0x24
c001cd1e:	5b                   	pop    ebx
c001cd1f:	5e                   	pop    esi
c001cd20:	c3                   	ret    

c001cd21 <disableIRQs()>:
c001cd21:	fa                   	cli    
c001cd22:	ff 05 8c de 02 c0    	inc    DWORD PTR ds:0xc002de8c
c001cd28:	c3                   	ret    

c001cd29 <getIRQNestingLevel()>:
c001cd29:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c001cd2e:	c3                   	ret    

c001cd2f <enableIRQs()>:
c001cd2f:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c001cd34:	48                   	dec    eax
c001cd35:	a3 8c de 02 c0       	mov    ds:0xc002de8c,eax
c001cd3a:	75 01                	jne    c001cd3d <enableIRQs()+0xe>
c001cd3c:	fb                   	sti    
c001cd3d:	c3                   	ret    

c001cd3e <lockScheduler()>:
c001cd3e:	eb e1                	jmp    c001cd21 <disableIRQs()>

c001cd40 <unlockScheduler()>:
c001cd40:	eb ed                	jmp    c001cd2f <enableIRQs()>

c001cd42 <userModeEntryPoint(void*)>:
c001cd42:	83 ec 0c             	sub    esp,0xc
c001cd45:	e8 f6 ff ff ff       	call   c001cd40 <unlockScheduler()>
c001cd4a:	fb                   	sti    
c001cd4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd53:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd5d:	83 c4 0c             	add    esp,0xc
c001cd60:	e9 7a 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd65 <lockStuff()>:
c001cd65:	e8 b7 ff ff ff       	call   c001cd21 <disableIRQs()>
c001cd6a:	ff 05 88 de 02 c0    	inc    DWORD PTR ds:0xc002de88
c001cd70:	c3                   	ret    

c001cd71 <taskStartupFunction>:
c001cd71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd76:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cd79:	c3                   	ret    

c001cd7a <updateTimeUsed()>:
c001cd7a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001cd7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd85:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cd8c:	74 50                	je     c001cdde <updateTimeUsed()+0x64>
c001cd8e:	57                   	push   edi
c001cd8f:	56                   	push   esi
c001cd90:	53                   	push   ebx
c001cd91:	0f 31                	rdtsc  
c001cd93:	89 c1                	mov    ecx,eax
c001cd95:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c001cd9a:	2b 0d b8 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002deb8
c001cda0:	89 d3                	mov    ebx,edx
c001cda2:	89 0d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,ecx
c001cda8:	1b 1d bc de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002debc
c001cdae:	a3 b8 de 02 c0       	mov    ds:0xc002deb8,eax
c001cdb3:	89 1d c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,ebx
c001cdb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdbe:	89 15 cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,edx
c001cdc4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cdc7:	89 15 bc de 02 c0    	mov    DWORD PTR ds:0xc002debc,edx
c001cdcd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cdd0:	01 f1                	add    ecx,esi
c001cdd2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cdd5:	11 fb                	adc    ebx,edi
c001cdd7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cdda:	5b                   	pop    ebx
c001cddb:	5e                   	pop    esi
c001cddc:	5f                   	pop    edi
c001cddd:	c3                   	ret    
c001cdde:	c3                   	ret    

c001cddf <switchToThread(ThreadControlBlock*)>:
c001cddf:	53                   	push   ebx
c001cde0:	83 ec 08             	sub    esp,0x8
c001cde3:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001cde8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdec:	85 c0                	test   eax,eax
c001cdee:	75 30                	jne    c001ce20 <switchToThread(ThreadControlBlock*)+0x41>
c001cdf0:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cdf3:	3c ff                	cmp    al,0xff
c001cdf5:	74 25                	je     c001ce1c <switchToThread(ThreadControlBlock*)+0x3d>
c001cdf7:	0f b6 d0             	movzx  edx,al
c001cdfa:	b8 84 03 00 00       	mov    eax,0x384
c001cdff:	29 d0                	sub    eax,edx
c001ce01:	c1 e0 10             	shl    eax,0x10
c001ce04:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ce07:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ce0a:	e8 6b ff ff ff       	call   c001cd7a <updateTimeUsed()>
c001ce0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ce13:	83 c4 08             	add    esp,0x8
c001ce16:	5b                   	pop    ebx
c001ce17:	e9 fb 34 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ce1c:	31 c0                	xor    eax,eax
c001ce1e:	eb e7                	jmp    c001ce07 <switchToThread(ThreadControlBlock*)+0x28>
c001ce20:	c7 05 84 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x1
c001ce2a:	83 c4 08             	add    esp,0x8
c001ce2d:	5b                   	pop    ebx
c001ce2e:	c3                   	ret    
c001ce2f:	90                   	nop

c001ce30 <Semaphore::Semaphore(int)>:
c001ce30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce38:	89 10                	mov    DWORD PTR [eax],edx
c001ce3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce3e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce5b:	90                   	nop
c001ce5c:	c3                   	ret    
c001ce5d:	90                   	nop

c001ce5e <Mutex::Mutex()>:
c001ce5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce62:	6a 01                	push   0x1
c001ce64:	50                   	push   eax
c001ce65:	e8 c6 ff ff ff       	call   c001ce30 <Semaphore::Semaphore(int)>
c001ce6a:	83 c4 08             	add    esp,0x8
c001ce6d:	90                   	nop
c001ce6e:	c3                   	ret    
c001ce6f:	90                   	nop

c001ce70 <Process::createThread(void (*)(void*), void*, int)>:
c001ce70:	55                   	push   ebp
c001ce71:	31 c9                	xor    ecx,ecx
c001ce73:	57                   	push   edi
c001ce74:	56                   	push   esi
c001ce75:	53                   	push   ebx
c001ce76:	83 ec 1c             	sub    esp,0x1c
c001ce79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce7d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ce84:	89 f2                	mov    edx,esi
c001ce86:	0f b7 c2             	movzx  eax,dx
c001ce89:	83 e2 01             	and    edx,0x1
c001ce8c:	74 14                	je     c001cea2 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ce8e:	d1 f8                	sar    eax,1
c001ce90:	41                   	inc    ecx
c001ce91:	89 c2                	mov    edx,eax
c001ce93:	83 f9 10             	cmp    ecx,0x10
c001ce96:	75 ee                	jne    c001ce86 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ce98:	83 c4 1c             	add    esp,0x1c
c001ce9b:	31 c0                	xor    eax,eax
c001ce9d:	5b                   	pop    ebx
c001ce9e:	5e                   	pop    esi
c001ce9f:	5f                   	pop    edi
c001cea0:	5d                   	pop    ebp
c001cea1:	c3                   	ret    
c001cea2:	83 ec 08             	sub    esp,0x8
c001cea5:	b8 01 00 00 00       	mov    eax,0x1
c001ceaa:	d3 e0                	shl    eax,cl
c001ceac:	09 c6                	or     esi,eax
c001ceae:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ceb4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cebb:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cebe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cec1:	01 ce                	add    esi,ecx
c001cec3:	89 f0                	mov    eax,esi
c001cec5:	c1 e0 05             	shl    eax,0x5
c001cec8:	01 c6                	add    esi,eax
c001ceca:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cecd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001ced3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ced9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cedd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cee3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cee9:	89 ca                	mov    edx,ecx
c001ceeb:	f7 da                	neg    edx
c001ceed:	c1 e2 15             	shl    edx,0x15
c001cef0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cef6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cefc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cf00:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cf0a:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cf10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf14:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cf1a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cf24:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cf2e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cf35:	50                   	push   eax
c001cf36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf3a:	68 a8 de 02 c0       	push   0xc002dea8
c001cf3f:	e8 cc a5 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf4b:	83 c4 1c             	add    esp,0x1c
c001cf4e:	5b                   	pop    ebx
c001cf4f:	5e                   	pop    esi
c001cf50:	5f                   	pop    edi
c001cf51:	5d                   	pop    ebp
c001cf52:	c3                   	ret    
c001cf53:	90                   	nop

c001cf54 <Process::createUserThread()>:
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	68 80 00 00 00       	push   0x80
c001cf5c:	6a 00                	push   0x0
c001cf5e:	68 42 cd 01 c0       	push   0xc001cd42
c001cf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf67:	e8 04 ff ff ff       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c001cf6c:	83 c4 1c             	add    esp,0x1c
c001cf6f:	c3                   	ret    

c001cf70 <setupMultitasking(void (*)())>:
c001cf70:	56                   	push   esi
c001cf71:	53                   	push   ebx
c001cf72:	53                   	push   ebx
c001cf73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf77:	eb 10                	jmp    c001cf89 <setupMultitasking(void (*)())+0x19>
c001cf79:	83 ec 0c             	sub    esp,0xc
c001cf7c:	68 a8 de 02 c0       	push   0xc002dea8
c001cf81:	e8 dc a4 00 00       	call   c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	83 ec 0c             	sub    esp,0xc
c001cf8c:	68 a8 de 02 c0       	push   0xc002dea8
c001cf91:	e8 b0 a4 00 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	84 c0                	test   al,al
c001cf9b:	74 dc                	je     c001cf79 <setupMultitasking(void (*)())+0x9>
c001cf9d:	83 ec 0c             	sub    esp,0xc
c001cfa0:	68 3f 07 00 00       	push   0x73f
c001cfa5:	e8 2a 25 ff ff       	call   c000f4d4 <malloc>
c001cfaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cfb1:	89 c3                	mov    ebx,eax
c001cfb3:	6a 00                	push   0x0
c001cfb5:	68 a8 a7 02 c0       	push   0xc002a7a8
c001cfba:	6a 01                	push   0x1
c001cfbc:	50                   	push   eax
c001cfbd:	e8 b0 fb ff ff       	call   c001cb72 <Process::Process(bool, char const*, Process*, char**)>
c001cfc2:	83 c4 18             	add    esp,0x18
c001cfc5:	89 1d b4 de 02 c0    	mov    DWORD PTR ds:0xc002deb4,ebx
c001cfcb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfd1:	68 c8 a8 02 c0       	push   0xc002a8c8
c001cfd6:	e8 ba 57 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001cfdb:	58                   	pop    eax
c001cfdc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfe2:	e8 46 39 ff ff       	call   c001092d <setActiveTerminal(VgaText*)>
c001cfe7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cfef:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cff5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cff8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d002:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d008:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d00e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d018:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d022:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d02c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d032:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d038:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d042:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d048:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d052:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d058:	5a                   	pop    edx
c001d059:	59                   	pop    ecx
c001d05a:	68 a4 a7 02 c0       	push   0xc002a7a4
c001d05f:	50                   	push   eax
c001d060:	e8 c5 36 fe ff       	call   c000072a <strcpy>
c001d065:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d06c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d070:	83 c4 14             	add    esp,0x14
c001d073:	5b                   	pop    ebx
c001d074:	5e                   	pop    esi
c001d075:	e9 8f 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d07a <schedule()>:
c001d07a:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001d07f:	85 c0                	test   eax,eax
c001d081:	74 0b                	je     c001d08e <schedule()+0x14>
c001d083:	c7 05 84 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x1
c001d08d:	c3                   	ret    
c001d08e:	53                   	push   ebx
c001d08f:	83 ec 14             	sub    esp,0x14
c001d092:	68 a8 de 02 c0       	push   0xc002dea8
c001d097:	e8 aa a3 00 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d09c:	83 c4 10             	add    esp,0x10
c001d09f:	84 c0                	test   al,al
c001d0a1:	75 38                	jne    c001d0db <schedule()+0x61>
c001d0a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d0ab:	4a                   	dec    edx
c001d0ac:	74 32                	je     c001d0e0 <schedule()+0x66>
c001d0ae:	83 ec 0c             	sub    esp,0xc
c001d0b1:	68 a8 de 02 c0       	push   0xc002dea8
c001d0b6:	e8 83 a3 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0bb:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d0c2:	89 c3                	mov    ebx,eax
c001d0c4:	e8 99 a3 00 00       	call   c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0c9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d0d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0d3:	e8 07 fd ff ff       	call   c001cddf <switchToThread(ThreadControlBlock*)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	83 c4 08             	add    esp,0x8
c001d0de:	5b                   	pop    ebx
c001d0df:	c3                   	ret    
c001d0e0:	83 ec 08             	sub    esp,0x8
c001d0e3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0ea:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d0f0:	68 a8 de 02 c0       	push   0xc002dea8
c001d0f5:	e8 16 a4 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	eb af                	jmp    c001d0ae <schedule()+0x34>

c001d0ff <unlockStuff()>:
c001d0ff:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001d104:	48                   	dec    eax
c001d105:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c001d10a:	75 09                	jne    c001d115 <unlockStuff()+0x16>
c001d10c:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c001d111:	85 c0                	test   eax,eax
c001d113:	75 05                	jne    c001d11a <unlockStuff()+0x1b>
c001d115:	e9 15 fc ff ff       	jmp    c001cd2f <enableIRQs()>
c001d11a:	83 ec 0c             	sub    esp,0xc
c001d11d:	c7 05 84 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x0
c001d127:	e8 4e ff ff ff       	call   c001d07a <schedule()>
c001d12c:	83 c4 0c             	add    esp,0xc
c001d12f:	e9 fb fb ff ff       	jmp    c001cd2f <enableIRQs()>

c001d134 <Semaphore::tryAcquire()>:
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13b:	e8 25 fc ff ff       	call   c001cd65 <lockStuff()>
c001d140:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d143:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d145:	7c 0b                	jl     c001d152 <Semaphore::tryAcquire()+0x1e>
c001d147:	e8 b3 ff ff ff       	call   c001d0ff <unlockStuff()>
c001d14c:	31 c0                	xor    eax,eax
c001d14e:	83 c4 0c             	add    esp,0xc
c001d151:	c3                   	ret    
c001d152:	42                   	inc    edx
c001d153:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d156:	e8 a4 ff ff ff       	call   c001d0ff <unlockStuff()>
c001d15b:	b0 01                	mov    al,0x1
c001d15d:	83 c4 0c             	add    esp,0xc
c001d160:	c3                   	ret    
c001d161:	90                   	nop

c001d162 <Semaphore::assertLocked(char const*)>:
c001d162:	83 ec 0c             	sub    esp,0xc
c001d165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d169:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d16d:	e8 f3 fb ff ff       	call   c001cd65 <lockStuff()>
c001d172:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d174:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d177:	7c 05                	jl     c001d17e <Semaphore::assertLocked(char const*)+0x1c>
c001d179:	83 c4 0c             	add    esp,0xc
c001d17c:	eb 81                	jmp    c001d0ff <unlockStuff()>
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	52                   	push   edx
c001d182:	e8 28 c7 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	83 c4 0c             	add    esp,0xc
c001d18d:	e9 6d ff ff ff       	jmp    c001d0ff <unlockStuff()>

c001d192 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d192:	83 ec 0c             	sub    esp,0xc
c001d195:	e8 8f fb ff ff       	call   c001cd29 <getIRQNestingLevel()>
c001d19a:	83 ec 08             	sub    esp,0x8
c001d19d:	50                   	push   eax
c001d19e:	68 fc a8 02 c0       	push   0xc002a8fc
c001d1a3:	e8 ed 55 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d1a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1b4:	e8 c1 fe ff ff       	call   c001d07a <schedule()>
c001d1b9:	e8 82 fb ff ff       	call   c001cd40 <unlockScheduler()>
c001d1be:	e8 66 fb ff ff       	call   c001cd29 <getIRQNestingLevel()>
c001d1c3:	5a                   	pop    edx
c001d1c4:	59                   	pop    ecx
c001d1c5:	50                   	push   eax
c001d1c6:	68 30 a9 02 c0       	push   0xc002a930
c001d1cb:	e8 c5 55 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d1d0:	83 c4 1c             	add    esp,0x1c
c001d1d3:	c3                   	ret    

c001d1d4 <blockTask(TaskState)>:
c001d1d4:	83 ec 0c             	sub    esp,0xc
c001d1d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1db:	e8 5e fb ff ff       	call   c001cd3e <lockScheduler()>
c001d1e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1e8:	e8 8d fe ff ff       	call   c001d07a <schedule()>
c001d1ed:	83 c4 0c             	add    esp,0xc
c001d1f0:	e9 4b fb ff ff       	jmp    c001cd40 <unlockScheduler()>

c001d1f5 <waitTask(int, int*, int)>:
c001d1f5:	83 ec 18             	sub    esp,0x18
c001d1f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d201:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d204:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d20d:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d210:	6a 07                	push   0x7
c001d212:	e8 bd ff ff ff       	call   c001d1d4 <blockTask(TaskState)>
c001d217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d222:	85 d2                	test   edx,edx
c001d224:	74 0a                	je     c001d230 <waitTask(int, int*, int)+0x3b>
c001d226:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d229:	89 02                	mov    DWORD PTR [edx],eax
c001d22b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d230:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d233:	83 c4 0c             	add    esp,0xc
c001d236:	c3                   	ret    

c001d237 <nanoSleepUntil(unsigned long long)>:
c001d237:	83 ec 0c             	sub    esp,0xc
c001d23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d242:	3b 05 f0 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cff0
c001d248:	89 d1                	mov    ecx,edx
c001d24a:	1b 0d f4 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cff4
c001d250:	73 04                	jae    c001d256 <nanoSleepUntil(unsigned long long)+0x1f>
c001d252:	83 c4 0c             	add    esp,0xc
c001d255:	c3                   	ret    
c001d256:	e8 0a fb ff ff       	call   c001cd65 <lockStuff()>
c001d25b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d261:	83 ec 08             	sub    esp,0x8
c001d264:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d267:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d26a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d270:	68 9c de 02 c0       	push   0xc002de9c
c001d275:	e8 96 a2 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d27a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d281:	e8 4e ff ff ff       	call   c001d1d4 <blockTask(TaskState)>
c001d286:	83 c4 1c             	add    esp,0x1c
c001d289:	e9 71 fe ff ff       	jmp    c001d0ff <unlockStuff()>

c001d28e <nanoSleep(unsigned long long)>:
c001d28e:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c001d293:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c001d299:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d29d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d2a1:	eb 94                	jmp    c001d237 <nanoSleepUntil(unsigned long long)>

c001d2a3 <sleep(unsigned long long)>:
c001d2a3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d2ab:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d2b0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d2b4:	01 ca                	add    edx,ecx
c001d2b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d2be:	eb ce                	jmp    c001d28e <nanoSleep(unsigned long long)>

c001d2c0 <Semaphore::acquire()>:
c001d2c0:	83 ec 0c             	sub    esp,0xc
c001d2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c7:	e8 99 fa ff ff       	call   c001cd65 <lockStuff()>
c001d2cc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2cf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2d1:	7d 0c                	jge    c001d2df <Semaphore::acquire()+0x1f>
c001d2d3:	42                   	inc    edx
c001d2d4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2d7:	83 c4 0c             	add    esp,0xc
c001d2da:	e9 20 fe ff ff       	jmp    c001d0ff <unlockStuff()>
c001d2df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2e5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d2ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2ef:	85 d2                	test   edx,edx
c001d2f1:	74 2a                	je     c001d31d <Semaphore::acquire()+0x5d>
c001d2f3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d2f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2fc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d2ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d305:	83 ec 0c             	sub    esp,0xc
c001d308:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d30b:	6a 05                	push   0x5
c001d30d:	e8 c2 fe ff ff       	call   c001d1d4 <blockTask(TaskState)>
c001d312:	83 c4 10             	add    esp,0x10
c001d315:	83 c4 0c             	add    esp,0xc
c001d318:	e9 e2 fd ff ff       	jmp    c001d0ff <unlockStuff()>
c001d31d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d323:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d326:	eb d7                	jmp    c001d2ff <Semaphore::acquire()+0x3f>

c001d328 <taskReturned>:
c001d328:	83 ec 18             	sub    esp,0x18
c001d32b:	68 64 a9 02 c0       	push   0xc002a964
c001d330:	e8 7a c5 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001d335:	83 c4 10             	add    esp,0x10
c001d338:	83 ec 0c             	sub    esp,0xc
c001d33b:	6a 02                	push   0x2
c001d33d:	e8 92 fe ff ff       	call   c001d1d4 <blockTask(TaskState)>
c001d342:	e8 f7 f9 ff ff       	call   c001cd3e <lockScheduler()>
c001d347:	e8 2e fd ff ff       	call   c001d07a <schedule()>
c001d34c:	e8 ef f9 ff ff       	call   c001cd40 <unlockScheduler()>
c001d351:	83 c4 10             	add    esp,0x10
c001d354:	eb e2                	jmp    c001d338 <taskReturned+0x10>

c001d356 <unblockTask(ThreadControlBlock*)>:
c001d356:	53                   	push   ebx
c001d357:	83 ec 08             	sub    esp,0x8
c001d35a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d35e:	e8 db f9 ff ff       	call   c001cd3e <lockScheduler()>
c001d363:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d366:	85 c0                	test   eax,eax
c001d368:	74 5c                	je     c001d3c6 <unblockTask(ThreadControlBlock*)+0x70>
c001d36a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d36d:	48                   	dec    eax
c001d36e:	74 31                	je     c001d3a1 <unblockTask(ThreadControlBlock*)+0x4b>
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	68 a8 de 02 c0       	push   0xc002dea8
c001d378:	e8 c1 a0 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	85 c0                	test   eax,eax
c001d382:	75 17                	jne    c001d39b <unblockTask(ThreadControlBlock*)+0x45>
c001d384:	eb 65                	jmp    c001d3eb <unblockTask(ThreadControlBlock*)+0x95>
c001d386:	83 ec 08             	sub    esp,0x8
c001d389:	50                   	push   eax
c001d38a:	68 a8 de 02 c0       	push   0xc002dea8
c001d38f:	e8 84 a3 00 00       	call   c0027718 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	85 c0                	test   eax,eax
c001d399:	74 50                	je     c001d3eb <unblockTask(ThreadControlBlock*)+0x95>
c001d39b:	39 c3                	cmp    ebx,eax
c001d39d:	75 e7                	jne    c001d386 <unblockTask(ThreadControlBlock*)+0x30>
c001d39f:	eb 1c                	jmp    c001d3bd <unblockTask(ThreadControlBlock*)+0x67>
c001d3a1:	83 ec 0c             	sub    esp,0xc
c001d3a4:	68 54 aa 02 c0       	push   0xc002aa54
c001d3a9:	e8 e7 53 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d3ae:	c7 04 24 e0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e0
c001d3b5:	e8 db 53 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d3ba:	83 c4 10             	add    esp,0x10
c001d3bd:	83 c4 08             	add    esp,0x8
c001d3c0:	5b                   	pop    ebx
c001d3c1:	e9 7a f9 ff ff       	jmp    c001cd40 <unlockScheduler()>
c001d3c6:	83 ec 0c             	sub    esp,0xc
c001d3c9:	68 98 a9 02 c0       	push   0xc002a998
c001d3ce:	e8 c2 53 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d3d3:	c7 04 24 e0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e0
c001d3da:	e8 b6 53 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d3df:	83 c4 10             	add    esp,0x10
c001d3e2:	83 c4 08             	add    esp,0x8
c001d3e5:	5b                   	pop    ebx
c001d3e6:	e9 55 f9 ff ff       	jmp    c001cd40 <unlockScheduler()>
c001d3eb:	83 ec 08             	sub    esp,0x8
c001d3ee:	53                   	push   ebx
c001d3ef:	68 a8 de 02 c0       	push   0xc002dea8
c001d3f4:	e8 17 a1 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	83 c4 08             	add    esp,0x8
c001d3ff:	5b                   	pop    ebx
c001d400:	e9 3b f9 ff ff       	jmp    c001cd40 <unlockScheduler()>

c001d405 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d405:	55                   	push   ebp
c001d406:	57                   	push   edi
c001d407:	56                   	push   esi
c001d408:	53                   	push   ebx
c001d409:	83 ec 1c             	sub    esp,0x1c
c001d40c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d410:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d413:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d419:	85 ff                	test   edi,edi
c001d41b:	7e 20                	jle    c001d43d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d41d:	31 f6                	xor    esi,esi
c001d41f:	83 ec 0c             	sub    esp,0xc
c001d422:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d429:	46                   	inc    esi
c001d42a:	e8 b5 20 ff ff       	call   c000f4e4 <free>
c001d42f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d43b:	7f e2                	jg     c001d41f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d43d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d447:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d44c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d44f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d452:	d3 c0                	rol    eax,cl
c001d454:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d45b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d45e:	89 f7                	mov    edi,esi
c001d460:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d468:	0f 85 74 01 00 00    	jne    c001d5e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d46e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d474:	85 ed                	test   ebp,ebp
c001d476:	74 1b                	je     c001d493 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	55                   	push   ebp
c001d47c:	e8 9b c1 ff ff       	call   c001961c <EnvVarContainer::~EnvVarContainer()>
c001d481:	59                   	pop    ecx
c001d482:	5e                   	pop    esi
c001d483:	6a 0c                	push   0xc
c001d485:	55                   	push   ebp
c001d486:	e8 2a 52 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001d48b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	89 f7                	mov    edi,esi
c001d493:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d499:	85 c0                	test   eax,eax
c001d49b:	0f 84 aa 00 00 00    	je     c001d54b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4a1:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d4a4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d4a8:	31 c9                	xor    ecx,ecx
c001d4aa:	eb 10                	jmp    c001d4bc <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d4ac:	41                   	inc    ecx
c001d4ad:	83 f9 10             	cmp    ecx,0x10
c001d4b0:	0f 84 95 00 00 00    	je     c001d54b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4b6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4bc:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d4c3:	d3 fa                	sar    edx,cl
c001d4c5:	83 e2 01             	and    edx,0x1
c001d4c8:	74 e2                	je     c001d4ac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4ca:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d4cd:	01 ca                	add    edx,ecx
c001d4cf:	89 d5                	mov    ebp,edx
c001d4d1:	c1 e5 05             	shl    ebp,0x5
c001d4d4:	01 ea                	add    edx,ebp
c001d4d6:	01 d0                	add    eax,edx
c001d4d8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d4de:	83 fd 07             	cmp    ebp,0x7
c001d4e1:	75 c9                	jne    c001d4ac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4e3:	05 40 02 00 00       	add    eax,0x240
c001d4e8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d4eb:	83 fd ff             	cmp    ebp,0xffffffff
c001d4ee:	0f 8c 08 01 00 00    	jl     c001d5fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d4f4:	0f 84 b9 01 00 00    	je     c001d6b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d4fa:	85 ed                	test   ebp,ebp
c001d4fc:	0f 84 a0 01 00 00    	je     c001d6a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d502:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d504:	75 a6                	jne    c001d4ac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d506:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d50c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d510:	01 d0                	add    eax,edx
c001d512:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d51f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d522:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d528:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d52f:	50                   	push   eax
c001d530:	e8 21 fe ff ff       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d53b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d53f:	89 f7                	mov    edi,esi
c001d541:	41                   	inc    ecx
c001d542:	83 f9 10             	cmp    ecx,0x10
c001d545:	0f 85 6b ff ff ff    	jne    c001d4b6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d54b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d551:	85 c0                	test   eax,eax
c001d553:	74 5d                	je     c001d5b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d555:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d55b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d561:	74 4f                	je     c001d5b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d563:	83 ec 0c             	sub    esp,0xc
c001d566:	68 a8 de 02 c0       	push   0xc002dea8
c001d56b:	e8 ce 9e 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d570:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d577:	89 c7                	mov    edi,eax
c001d579:	e8 c8 9e 00 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	84 c0                	test   al,al
c001d583:	0f 84 e4 00 00 00    	je     c001d66d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d589:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d58c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d592:	85 d2                	test   edx,edx
c001d594:	74 0f                	je     c001d5a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	8b 02                	mov    eax,DWORD PTR [edx]
c001d59b:	52                   	push   edx
c001d59c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d59f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5a2:	83 c4 10             	add    esp,0x10
c001d5a5:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d5af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d5b2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d5b8:	85 db                	test   ebx,ebx
c001d5ba:	74 16                	je     c001d5d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	53                   	push   ebx
c001d5c0:	e8 3f 47 ff ff       	call   c0011d04 <VAS::~VAS()>
c001d5c5:	58                   	pop    eax
c001d5c6:	5a                   	pop    edx
c001d5c7:	6a 10                	push   0x10
c001d5c9:	53                   	push   ebx
c001d5ca:	e8 e6 50 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001d5cf:	83 c4 10             	add    esp,0x10
c001d5d2:	83 ec 0c             	sub    esp,0xc
c001d5d5:	68 af a7 02 c0       	push   0xc002a7af
c001d5da:	e8 b6 51 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d5df:	83 c4 10             	add    esp,0x10
c001d5e2:	83 ec 08             	sub    esp,0x8
c001d5e5:	68 3f 07 00 00       	push   0x73f
c001d5ea:	68 bd a7 02 c0       	push   0xc002a7bd
c001d5ef:	e8 a1 51 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d5f4:	83 c4 2c             	add    esp,0x2c
c001d5f7:	5b                   	pop    ebx
c001d5f8:	5e                   	pop    esi
c001d5f9:	5f                   	pop    edi
c001d5fa:	5d                   	pop    ebp
c001d5fb:	c3                   	ret    
c001d5fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d600:	83 ec 0c             	sub    esp,0xc
c001d603:	68 98 aa 02 c0       	push   0xc002aa98
c001d608:	e8 a2 c2 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001d60d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	89 f7                	mov    edi,esi
c001d615:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d619:	e9 8e fe ff ff       	jmp    c001d4ac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d61e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d624:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d62a:	75 1c                	jne    c001d648 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	68 00 ab 02 c0       	push   0xc002ab00
c001d634:	e8 5c 51 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d639:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d640:	e8 8f fb ff ff       	call   c001d1d4 <blockTask(TaskState)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	83 ec 08             	sub    esp,0x8
c001d64b:	56                   	push   esi
c001d64c:	68 a8 de 02 c0       	push   0xc002dea8
c001d651:	e8 ba 9e 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d656:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d65d:	e8 dc 9d 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	39 f8                	cmp    eax,edi
c001d667:	0f 84 1c ff ff ff    	je     c001d589 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d66d:	83 ec 0c             	sub    esp,0xc
c001d670:	68 a8 de 02 c0       	push   0xc002dea8
c001d675:	e8 c4 9d 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d67a:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d681:	89 c6                	mov    esi,eax
c001d683:	e8 da 9d 00 00       	call   c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d688:	83 c4 10             	add    esp,0x10
c001d68b:	39 f3                	cmp    ebx,esi
c001d68d:	74 b9                	je     c001d648 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d68f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d692:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d695:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d69b:	75 ab                	jne    c001d648 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d69d:	e9 7c ff ff ff       	jmp    c001d61e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d6a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	68 cc aa 02 c0       	push   0xc002aacc
c001d6ae:	e9 55 ff ff ff       	jmp    c001d608 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d6b3:	8b 36                	mov    esi,DWORD PTR [esi]
c001d6b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6b9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d6bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6bf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d6c5:	01 d7                	add    edi,edx
c001d6c7:	89 f8                	mov    eax,edi
c001d6c9:	e9 44 fe ff ff       	jmp    c001d512 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d6ce <cleanerTaskFunction(void*)>:
c001d6ce:	53                   	push   ebx
c001d6cf:	83 ec 08             	sub    esp,0x8
c001d6d2:	e8 69 f6 ff ff       	call   c001cd40 <unlockScheduler()>
c001d6d7:	e8 62 f6 ff ff       	call   c001cd3e <lockScheduler()>
c001d6dc:	80 3d 6c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de6c,0x0
c001d6e3:	0f 85 8e 00 00 00    	jne    c001d777 <cleanerTaskFunction(void*)+0xa9>
c001d6e9:	83 ec 0c             	sub    esp,0xc
c001d6ec:	6a 02                	push   0x2
c001d6ee:	e8 9f fa ff ff       	call   c001d192 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	c6 05 6c de 02 c0 00 	mov    BYTE PTR ds:0xc002de6c,0x0
c001d6fd:	e8 63 f6 ff ff       	call   c001cd65 <lockStuff()>
c001d702:	e8 37 f6 ff ff       	call   c001cd3e <lockScheduler()>
c001d707:	83 ec 0c             	sub    esp,0xc
c001d70a:	68 90 de 02 c0       	push   0xc002de90
c001d70f:	e8 32 9d 00 00       	call   c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	84 c0                	test   al,al
c001d719:	75 40                	jne    c001d75b <cleanerTaskFunction(void*)+0x8d>
c001d71b:	83 ec 0c             	sub    esp,0xc
c001d71e:	68 90 de 02 c0       	push   0xc002de90
c001d723:	e8 16 9d 00 00       	call   c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d728:	c7 04 24 90 de 02 c0 	mov    DWORD PTR [esp],0xc002de90
c001d72f:	89 c3                	mov    ebx,eax
c001d731:	e8 2c 9d 00 00       	call   c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d736:	c7 04 24 d3 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7d3
c001d73d:	e8 53 50 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d742:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d745:	e8 bb fc ff ff       	call   c001d405 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d74a:	c7 04 24 ec a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ec
c001d751:	e8 3f 50 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d756:	83 c4 10             	add    esp,0x10
c001d759:	eb ac                	jmp    c001d707 <cleanerTaskFunction(void*)+0x39>
c001d75b:	e8 e0 f5 ff ff       	call   c001cd40 <unlockScheduler()>
c001d760:	e8 9a f9 ff ff       	call   c001d0ff <unlockStuff()>
c001d765:	e8 d4 f5 ff ff       	call   c001cd3e <lockScheduler()>
c001d76a:	80 3d 6c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de6c,0x0
c001d771:	0f 84 72 ff ff ff    	je     c001d6e9 <cleanerTaskFunction(void*)+0x1b>
c001d777:	e8 c4 f5 ff ff       	call   c001cd40 <unlockScheduler()>
c001d77c:	e9 75 ff ff ff       	jmp    c001d6f6 <cleanerTaskFunction(void*)+0x28>

c001d781 <terminateTask(int)>:
c001d781:	83 ec 14             	sub    esp,0x14
c001d784:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d789:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d78c:	83 c0 0c             	add    eax,0xc
c001d78f:	50                   	push   eax
c001d790:	68 28 ab 02 c0       	push   0xc002ab28
c001d795:	e8 fb 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d79a:	e8 c6 f5 ff ff       	call   c001cd65 <lockStuff()>
c001d79f:	e8 9a f5 ff ff       	call   c001cd3e <lockScheduler()>
c001d7a4:	c7 04 24 ff a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ff
c001d7ab:	e8 e5 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d7b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d7bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d7c4:	5a                   	pop    edx
c001d7c5:	59                   	pop    ecx
c001d7c6:	50                   	push   eax
c001d7c7:	68 90 de 02 c0       	push   0xc002de90
c001d7cc:	e8 3f 9d 00 00       	call   c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7d6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d7dd:	c7 04 24 19 a8 02 c0 	mov    DWORD PTR [esp],0xc002a819
c001d7e4:	e8 ac 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d7f1:	85 c0                	test   eax,eax
c001d7f3:	74 5a                	je     c001d84f <terminateTask(int)+0xce>
c001d7f5:	83 ec 0c             	sub    esp,0xc
c001d7f8:	68 33 a8 02 c0       	push   0xc002a833
c001d7fd:	e8 93 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d802:	58                   	pop    eax
c001d803:	c6 05 6c de 02 c0 01 	mov    BYTE PTR ds:0xc002de6c,0x1
c001d80a:	ff 35 68 de 02 c0    	push   DWORD PTR ds:0xc002de68
c001d810:	e8 41 fb ff ff       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c001d815:	c7 04 24 4d a8 02 c0 	mov    DWORD PTR [esp],0xc002a84d
c001d81c:	e8 74 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	e8 17 f5 ff ff       	call   c001cd40 <unlockScheduler()>
c001d829:	e8 d1 f8 ff ff       	call   c001d0ff <unlockStuff()>
c001d82e:	83 ec 0c             	sub    esp,0xc
c001d831:	68 85 a8 02 c0       	push   0xc002a885
c001d836:	e8 5a 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	e8 fb f4 ff ff       	call   c001cd3e <lockScheduler()>
c001d843:	e8 32 f8 ff ff       	call   c001d07a <schedule()>
c001d848:	e8 f3 f4 ff ff       	call   c001cd40 <unlockScheduler()>
c001d84d:	eb ef                	jmp    c001d83e <terminateTask(int)+0xbd>
c001d84f:	83 ec 0c             	sub    esp,0xc
c001d852:	68 67 a8 02 c0       	push   0xc002a867
c001d857:	e8 39 4f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	eb c3                	jmp    c001d824 <terminateTask(int)+0xa3>

c001d861 <Thr::terminateFromIRQ(int)>:
c001d861:	83 ec 18             	sub    esp,0x18
c001d864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d868:	e8 14 ff ff ff       	call   c001d781 <terminateTask(int)>
c001d86d:	90                   	nop

c001d86e <Semaphore::release()>:
c001d86e:	83 ec 0c             	sub    esp,0xc
c001d871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d875:	e8 eb f4 ff ff       	call   c001cd65 <lockStuff()>
c001d87a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d87d:	85 d2                	test   edx,edx
c001d87f:	74 1a                	je     c001d89b <Semaphore::release()+0x2d>
c001d881:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d884:	83 ec 0c             	sub    esp,0xc
c001d887:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d88a:	52                   	push   edx
c001d88b:	e8 c6 fa ff ff       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	83 c4 0c             	add    esp,0xc
c001d896:	e9 64 f8 ff ff       	jmp    c001d0ff <unlockStuff()>
c001d89b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d89e:	83 c4 0c             	add    esp,0xc
c001d8a1:	e9 59 f8 ff ff       	jmp    c001d0ff <unlockStuff()>

c001d8a6 <__static_initialization_and_destruction_0(int, int)>:
c001d8a6:	83 ec 0c             	sub    esp,0xc
c001d8a9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d8ae:	0f 85 88 00 00 00    	jne    c001d93c <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8b4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d8bc:	75 7e                	jne    c001d93c <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8be:	83 ec 0c             	sub    esp,0xc
c001d8c1:	68 a8 de 02 c0       	push   0xc002dea8
c001d8c6:	e8 f5 9d 00 00       	call   c00276c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	83 ec 04             	sub    esp,0x4
c001d8d1:	68 88 b8 02 c0       	push   0xc002b888
c001d8d6:	68 a8 de 02 c0       	push   0xc002dea8
c001d8db:	68 80 76 02 c0       	push   0xc0027680
c001d8e0:	e8 4a 4d ff ff       	call   c001262f <__cxa_atexit>
c001d8e5:	83 c4 10             	add    esp,0x10
c001d8e8:	83 ec 0c             	sub    esp,0xc
c001d8eb:	68 9c de 02 c0       	push   0xc002de9c
c001d8f0:	e8 cb 9d 00 00       	call   c00276c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8f5:	83 c4 10             	add    esp,0x10
c001d8f8:	83 ec 04             	sub    esp,0x4
c001d8fb:	68 88 b8 02 c0       	push   0xc002b888
c001d900:	68 9c de 02 c0       	push   0xc002de9c
c001d905:	68 80 76 02 c0       	push   0xc0027680
c001d90a:	e8 20 4d ff ff       	call   c001262f <__cxa_atexit>
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	83 ec 0c             	sub    esp,0xc
c001d915:	68 90 de 02 c0       	push   0xc002de90
c001d91a:	e8 a1 9d 00 00       	call   c00276c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	83 ec 04             	sub    esp,0x4
c001d925:	68 88 b8 02 c0       	push   0xc002b888
c001d92a:	68 90 de 02 c0       	push   0xc002de90
c001d92f:	68 80 76 02 c0       	push   0xc0027680
c001d934:	e8 f6 4c ff ff       	call   c001262f <__cxa_atexit>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	90                   	nop
c001d93d:	83 c4 0c             	add    esp,0xc
c001d940:	c3                   	ret    

c001d941 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	83 ec 08             	sub    esp,0x8
c001d947:	68 ff ff 00 00       	push   0xffff
c001d94c:	6a 01                	push   0x1
c001d94e:	e8 53 ff ff ff       	call   c001d8a6 <__static_initialization_and_destruction_0(int, int)>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	83 c4 0c             	add    esp,0xc
c001d959:	c3                   	ret    

c001d95a <Vm::inbv(unsigned short)>:
c001d95a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d95e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d963:	75 06                	jne    c001d96b <Vm::inbv(unsigned short)+0x11>
c001d965:	a0 ec de 02 c0       	mov    al,ds:0xc002deec
c001d96a:	c3                   	ret    
c001d96b:	ec                   	in     al,dx
c001d96c:	c3                   	ret    

c001d96d <Vm::outbv(unsigned short, unsigned char)>:
c001d96d:	53                   	push   ebx
c001d96e:	83 ec 08             	sub    esp,0x8
c001d971:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d975:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d979:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d97e:	75 38                	jne    c001d9b8 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d980:	0f b6 c3             	movzx  eax,bl
c001d983:	51                   	push   ecx
c001d984:	51                   	push   ecx
c001d985:	50                   	push   eax
c001d986:	68 47 ab 02 c0       	push   0xc002ab47
c001d98b:	e8 05 4e ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001d990:	8b 15 ec de 02 c0    	mov    edx,DWORD PTR ds:0xc002deec
c001d996:	83 c4 10             	add    esp,0x10
c001d999:	8d 42 01             	lea    eax,[edx+0x1]
c001d99c:	88 9a 00 df 02 c0    	mov    BYTE PTR [edx-0x3ffd2100],bl
c001d9a2:	a3 ec de 02 c0       	mov    ds:0xc002deec,eax
c001d9a7:	83 f8 20             	cmp    eax,0x20
c001d9aa:	75 0f                	jne    c001d9bb <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9ac:	c7 05 ec de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x1f
c001d9b6:	eb 03                	jmp    c001d9bb <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9b8:	88 d8                	mov    al,bl
c001d9ba:	ee                   	out    dx,al
c001d9bb:	83 c4 08             	add    esp,0x8
c001d9be:	5b                   	pop    ebx
c001d9bf:	c3                   	ret    

c001d9c0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001d9c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d9c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d9ca:	c1 e0 04             	shl    eax,0x4
c001d9cd:	01 d0                	add    eax,edx
c001d9cf:	c3                   	ret    

c001d9d0 <Vm::getSegment(unsigned int)>:
c001d9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9d4:	c1 e8 10             	shr    eax,0x10
c001d9d7:	c3                   	ret    

c001d9d8 <Vm::getOffset(unsigned int)>:
c001d9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9dc:	c3                   	ret    

c001d9dd <Vm::mainloop2()>:
c001d9dd:	83 ec 0c             	sub    esp,0xc
c001d9e0:	e8 59 f3 ff ff       	call   c001cd3e <lockScheduler()>
c001d9e5:	83 ec 0c             	sub    esp,0xc
c001d9e8:	c6 05 e5 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee5,0x1
c001d9ef:	6a 02                	push   0x2
c001d9f1:	e8 9c f7 ff ff       	call   c001d192 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d9f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9fb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d9ff:	52                   	push   edx
c001da00:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001da04:	52                   	push   edx
c001da05:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001da09:	52                   	push   edx
c001da0a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001da0e:	50                   	push   eax
c001da0f:	e8 9b 28 fe ff       	call   c00002af <goToVM86>
c001da14:	83 c4 2c             	add    esp,0x2c
c001da17:	c3                   	ret    

c001da18 <Vm::mainVm8086Loop(void*)>:
c001da18:	83 ec 0c             	sub    esp,0xc
c001da1b:	e8 20 f3 ff ff       	call   c001cd40 <unlockScheduler()>
c001da20:	83 c4 0c             	add    esp,0xc
c001da23:	eb b8                	jmp    c001d9dd <Vm::mainloop2()>

c001da25 <Vm::mainloop3(unsigned long)>:
c001da25:	53                   	push   ebx
c001da26:	83 ec 08             	sub    esp,0x8
c001da29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da2d:	e8 0c f3 ff ff       	call   c001cd3e <lockScheduler()>
c001da32:	83 ec 0c             	sub    esp,0xc
c001da35:	89 1d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ebx
c001da3b:	6a 02                	push   0x2
c001da3d:	c6 05 e4 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee4,0x1
c001da44:	e8 49 f7 ff ff       	call   c001d192 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da49:	83 c4 18             	add    esp,0x18
c001da4c:	5b                   	pop    ebx
c001da4d:	eb 8e                	jmp    c001d9dd <Vm::mainloop2()>

c001da4f <Vm::initialise8086()>:
c001da4f:	83 ec 0c             	sub    esp,0xc
c001da52:	68 80 00 00 00       	push   0x80
c001da57:	6a 00                	push   0x0
c001da59:	68 18 da 01 c0       	push   0xc001da18
c001da5e:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001da64:	e8 07 f4 ff ff       	call   c001ce70 <Process::createThread(void (*)(void*), void*, int)>
c001da69:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da70:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c001da75:	68 00 01 00 00       	push   0x100
c001da7a:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001da7f:	6a 00                	push   0x0
c001da81:	6a 00                	push   0x0
c001da83:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001da89:	e8 d6 46 ff ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001da8e:	83 c4 2c             	add    esp,0x2c
c001da91:	c3                   	ret    

c001da92 <Vm::finish8086()>:
c001da92:	53                   	push   ebx
c001da93:	83 ec 08             	sub    esp,0x8
c001da96:	e8 a3 f2 ff ff       	call   c001cd3e <lockScheduler()>
c001da9b:	80 3d e4 de 02 c0 00 	cmp    BYTE PTR ds:0xc002dee4,0x0
c001daa2:	75 0c                	jne    c001dab0 <Vm::finish8086()+0x1e>
c001daa4:	e8 d1 f5 ff ff       	call   c001d07a <schedule()>
c001daa9:	e8 92 f2 ff ff       	call   c001cd40 <unlockScheduler()>
c001daae:	eb e6                	jmp    c001da96 <Vm::finish8086()+0x4>
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	8b 1d e0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dee0
c001dab9:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c001dabf:	c6 05 e4 de 02 c0 00 	mov    BYTE PTR ds:0xc002dee4,0x0
c001dac6:	e8 8b f8 ff ff       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c001dacb:	e8 70 f2 ff ff       	call   c001cd40 <unlockScheduler()>
c001dad0:	89 d8                	mov    eax,ebx
c001dad2:	83 c4 18             	add    esp,0x18
c001dad5:	5b                   	pop    ebx
c001dad6:	c3                   	ret    

c001dad7 <Vm::getOutput8086(unsigned char*)>:
c001dad7:	83 ec 10             	sub    esp,0x10
c001dada:	ff 35 ec de 02 c0    	push   DWORD PTR ds:0xc002deec
c001dae0:	68 00 df 02 c0       	push   0xc002df00
c001dae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dae9:	e8 67 2b fe ff       	call   c0000655 <memcpy>
c001daee:	a1 ec de 02 c0       	mov    eax,ds:0xc002deec
c001daf3:	c7 05 ec de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x0
c001dafd:	83 c4 1c             	add    esp,0x1c
c001db00:	c3                   	ret    

c001db01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001db01:	55                   	push   ebp
c001db02:	57                   	push   edi
c001db03:	56                   	push   esi
c001db04:	53                   	push   ebx
c001db05:	83 ec 2c             	sub    esp,0x2c
c001db08:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001db0c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001db10:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001db14:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db18:	e8 21 f2 ff ff       	call   c001cd3e <lockScheduler()>
c001db1d:	a0 e5 de 02 c0       	mov    al,ds:0xc002dee5
c001db22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db26:	84 c0                	test   al,al
c001db28:	75 0c                	jne    c001db36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001db2a:	e8 4b f5 ff ff       	call   c001d07a <schedule()>
c001db2f:	e8 0c f2 ff ff       	call   c001cd40 <unlockScheduler()>
c001db34:	eb e2                	jmp    c001db18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001db36:	a1 e8 de 02 c0       	mov    eax,ds:0xc002dee8
c001db3b:	c7 05 ec de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x0
c001db45:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db49:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db4d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db51:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db55:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db59:	50                   	push   eax
c001db5a:	6a 20                	push   0x20
c001db5c:	6a 00                	push   0x0
c001db5e:	68 00 df 02 c0       	push   0xc002df00
c001db63:	e8 23 2b fe ff       	call   c000068b <memset>
c001db68:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db6f:	e8 60 19 ff ff       	call   c000f4d4 <malloc>
c001db74:	83 c4 0c             	add    esp,0xc
c001db77:	89 c7                	mov    edi,eax
c001db79:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001db7f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db83:	50                   	push   eax
c001db84:	e8 3b 51 ff ff       	call   c0012cc4 <File::File(char const*, Process*)>
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	85 ff                	test   edi,edi
c001db8e:	75 0a                	jne    c001db9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001db90:	83 ec 0c             	sub    esp,0xc
c001db93:	68 63 ab 02 c0       	push   0xc002ab63
c001db98:	eb 27                	jmp    c001dbc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001db9a:	50                   	push   eax
c001db9b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001db9f:	50                   	push   eax
c001dba0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dba4:	50                   	push   eax
c001dba5:	57                   	push   edi
c001dba6:	e8 29 54 ff ff       	call   c0012fd4 <File::stat(unsigned long long*, bool*)>
c001dbab:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	89 e8                	mov    eax,ebp
c001dbb5:	84 c0                	test   al,al
c001dbb7:	74 19                	je     c001dbd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dbb9:	83 ec 0c             	sub    esp,0xc
c001dbbc:	68 77 ab 02 c0       	push   0xc002ab77
c001dbc1:	e8 e9 bc ff ff       	call   c00198af <Krnl::panic(char const*)>
c001dbc6:	31 ed                	xor    ebp,ebp
c001dbc8:	e8 73 f1 ff ff       	call   c001cd40 <unlockScheduler()>
c001dbcd:	83 c4 10             	add    esp,0x10
c001dbd0:	eb 75                	jmp    c001dc47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbd2:	50                   	push   eax
c001dbd3:	50                   	push   eax
c001dbd4:	6a 01                	push   0x1
c001dbd6:	57                   	push   edi
c001dbd7:	e8 4c 51 ff ff       	call   c0012d28 <File::open(FileOpenMode)>
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	85 c0                	test   eax,eax
c001dbe1:	74 17                	je     c001dbfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dbe3:	83 ec 0c             	sub    esp,0xc
c001dbe6:	68 90 ab 02 c0       	push   0xc002ab90
c001dbeb:	e8 bf bc ff ff       	call   c00198af <Krnl::panic(char const*)>
c001dbf0:	e8 4b f1 ff ff       	call   c001cd40 <unlockScheduler()>
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	eb 4d                	jmp    c001dc47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbfa:	0f b7 f6             	movzx  esi,si
c001dbfd:	50                   	push   eax
c001dbfe:	0f b7 db             	movzx  ebx,bx
c001dc01:	50                   	push   eax
c001dc02:	56                   	push   esi
c001dc03:	53                   	push   ebx
c001dc04:	e8 b7 fd ff ff       	call   c001d9c0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc09:	5a                   	pop    edx
c001dc0a:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc0c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dc10:	51                   	push   ecx
c001dc11:	50                   	push   eax
c001dc12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc1a:	57                   	push   edi
c001dc1b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dc1e:	83 c4 14             	add    esp,0x14
c001dc21:	57                   	push   edi
c001dc22:	e8 5f 51 ff ff       	call   c0012d86 <File::close()>
c001dc27:	c6 05 e5 de 02 c0 00 	mov    BYTE PTR ds:0xc002dee5,0x0
c001dc2e:	e8 0d f1 ff ff       	call   c001cd40 <unlockScheduler()>
c001dc33:	59                   	pop    ecx
c001dc34:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c001dc3a:	e8 17 f7 ff ff       	call   c001d356 <unblockTask(ThreadControlBlock*)>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc47:	83 c4 2c             	add    esp,0x2c
c001dc4a:	89 e8                	mov    eax,ebp
c001dc4c:	5b                   	pop    ebx
c001dc4d:	5e                   	pop    esi
c001dc4e:	5f                   	pop    edi
c001dc4f:	5d                   	pop    ebp
c001dc50:	c3                   	ret    

c001dc51 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc51:	57                   	push   edi
c001dc52:	56                   	push   esi
c001dc53:	53                   	push   ebx
c001dc54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc60:	83 e8 06             	sub    eax,0x6
c001dc63:	0f b7 c0             	movzx  eax,ax
c001dc66:	50                   	push   eax
c001dc67:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc6c:	50                   	push   eax
c001dc6d:	e8 4e fd ff ff       	call   c001d9c0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc72:	5a                   	pop    edx
c001dc73:	5e                   	pop    esi
c001dc74:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dc77:	8d 56 fa             	lea    edx,[esi-0x6]
c001dc7a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dc80:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dc83:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dc86:	83 c2 02             	add    edx,0x2
c001dc89:	66 89 10             	mov    WORD PTR [eax],dx
c001dc8c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dc8f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dc93:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dc96:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dc9a:	89 d6                	mov    esi,edx
c001dc9c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dca2:	66 81 e6 ff fd       	and    si,0xfdff
c001dca7:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dcab:	74 07                	je     c001dcb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dcad:	89 d6                	mov    esi,edx
c001dcaf:	66 81 ce 00 02       	or     si,0x200
c001dcb4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dcb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcbd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dcc1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dcc9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dccc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dcd4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dcd7:	5b                   	pop    ebx
c001dcd8:	5e                   	pop    esi
c001dcd9:	5f                   	pop    edi
c001dcda:	c3                   	ret    

c001dcdb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dcdb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dce0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dce5:	c1 e0 04             	shl    eax,0x4
c001dce8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dceb:	c3                   	ret    

c001dcec <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dcec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcf1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcf6:	c1 e0 04             	shl    eax,0x4
c001dcf9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dcfd:	c3                   	ret    

c001dcfe <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dcfe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd08:	c1 e0 04             	shl    eax,0x4
c001dd0b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dd0e:	c3                   	ret    

c001dd0f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dd0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd19:	c1 e0 04             	shl    eax,0x4
c001dd1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd20:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dd23:	c3                   	ret    

c001dd24 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dd24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd2e:	c1 e0 04             	shl    eax,0x4
c001dd31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd35:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dd39:	c3                   	ret    

c001dd3a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dd3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd44:	c1 e0 04             	shl    eax,0x4
c001dd47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd4b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd4e:	c3                   	ret    

c001dd4f <Vm::faultHandler(regs*)>:
c001dd4f:	55                   	push   ebp
c001dd50:	57                   	push   edi
c001dd51:	56                   	push   esi
c001dd52:	53                   	push   ebx
c001dd53:	83 ec 1c             	sub    esp,0x1c
c001dd56:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd5a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd5d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd60:	0f b7 c1             	movzx  eax,cx
c001dd63:	50                   	push   eax
c001dd64:	0f b7 c3             	movzx  eax,bx
c001dd67:	c1 e3 04             	shl    ebx,0x4
c001dd6a:	50                   	push   eax
c001dd6b:	e8 50 fc ff ff       	call   c001d9c0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dd70:	5a                   	pop    edx
c001dd71:	89 c5                	mov    ebp,eax
c001dd73:	5e                   	pop    esi
c001dd74:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dd78:	50                   	push   eax
c001dd79:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dd7d:	50                   	push   eax
c001dd7e:	e8 3d fc ff ff       	call   c001d9c0 <Vm::realToLinear(unsigned short, unsigned short)>
c001dd83:	01 cb                	add    ebx,ecx
c001dd85:	89 c6                	mov    esi,eax
c001dd87:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dd8b:	50                   	push   eax
c001dd8c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd90:	50                   	push   eax
c001dd91:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd95:	50                   	push   eax
c001dd96:	55                   	push   ebp
c001dd97:	53                   	push   ebx
c001dd98:	b3 06                	mov    bl,0x6
c001dd9a:	68 a9 ab 02 c0       	push   0xc002aba9
c001dd9f:	e8 f1 49 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dda4:	83 c4 20             	add    esp,0x20
c001dda7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ddac:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ddb1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ddb5:	3c 9d                	cmp    al,0x9d
c001ddb7:	0f 84 d7 02 00 00    	je     c001e094 <Vm::faultHandler(regs*)+0x345>
c001ddbd:	0f 87 a3 00 00 00    	ja     c001de66 <Vm::faultHandler(regs*)+0x117>
c001ddc3:	3c 66                	cmp    al,0x66
c001ddc5:	0f 84 15 02 00 00    	je     c001dfe0 <Vm::faultHandler(regs*)+0x291>
c001ddcb:	77 5f                	ja     c001de2c <Vm::faultHandler(regs*)+0xdd>
c001ddcd:	3c 36                	cmp    al,0x36
c001ddcf:	0f 84 f1 01 00 00    	je     c001dfc6 <Vm::faultHandler(regs*)+0x277>
c001ddd5:	77 28                	ja     c001ddff <Vm::faultHandler(regs*)+0xb0>
c001ddd7:	3c 26                	cmp    al,0x26
c001ddd9:	0f 84 99 01 00 00    	je     c001df78 <Vm::faultHandler(regs*)+0x229>
c001dddf:	3c 2e                	cmp    al,0x2e
c001dde1:	0f 85 3b 07 00 00    	jne    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	31 db                	xor    ebx,ebx
c001ddec:	68 be ab 02 c0       	push   0xc002abbe
c001ddf1:	e8 9f 49 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001ddf6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	45                   	inc    ebp
c001ddfd:	eb b2                	jmp    c001ddb1 <Vm::faultHandler(regs*)+0x62>
c001ddff:	3c 64                	cmp    al,0x64
c001de01:	0f 84 8b 01 00 00    	je     c001df92 <Vm::faultHandler(regs*)+0x243>
c001de07:	0f 87 9f 01 00 00    	ja     c001dfac <Vm::faultHandler(regs*)+0x25d>
c001de0d:	3c 3e                	cmp    al,0x3e
c001de0f:	0f 85 0d 07 00 00    	jne    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001de15:	83 ec 0c             	sub    esp,0xc
c001de18:	b3 01                	mov    bl,0x1
c001de1a:	68 c2 ab 02 c0       	push   0xc002abc2
c001de1f:	e8 71 49 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001de24:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de27:	83 c4 10             	add    esp,0x10
c001de2a:	eb d0                	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001de2c:	3c 6d                	cmp    al,0x6d
c001de2e:	0f 84 af 03 00 00    	je     c001e1e3 <Vm::faultHandler(regs*)+0x494>
c001de34:	77 15                	ja     c001de4b <Vm::faultHandler(regs*)+0xfc>
c001de36:	3c 67                	cmp    al,0x67
c001de38:	0f 84 bf 01 00 00    	je     c001dffd <Vm::faultHandler(regs*)+0x2ae>
c001de3e:	3c 6c                	cmp    al,0x6c
c001de40:	0f 84 3f 03 00 00    	je     c001e185 <Vm::faultHandler(regs*)+0x436>
c001de46:	e9 d7 06 00 00       	jmp    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001de4b:	3c 6f                	cmp    al,0x6f
c001de4d:	0f 84 a4 04 00 00    	je     c001e2f7 <Vm::faultHandler(regs*)+0x5a8>
c001de53:	0f 82 11 04 00 00    	jb     c001e26a <Vm::faultHandler(regs*)+0x51b>
c001de59:	3c 9c                	cmp    al,0x9c
c001de5b:	0f 84 ba 01 00 00    	je     c001e01b <Vm::faultHandler(regs*)+0x2cc>
c001de61:	e9 bc 06 00 00       	jmp    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001de66:	3c ec                	cmp    al,0xec
c001de68:	0f 84 24 06 00 00    	je     c001e492 <Vm::faultHandler(regs*)+0x743>
c001de6e:	0f 87 93 00 00 00    	ja     c001df07 <Vm::faultHandler(regs*)+0x1b8>
c001de74:	3c e4                	cmp    al,0xe4
c001de76:	0f 84 5c 05 00 00    	je     c001e3d8 <Vm::faultHandler(regs*)+0x689>
c001de7c:	77 6a                	ja     c001dee8 <Vm::faultHandler(regs*)+0x199>
c001de7e:	3c cd                	cmp    al,0xcd
c001de80:	0f 84 7e 02 00 00    	je     c001e104 <Vm::faultHandler(regs*)+0x3b5>
c001de86:	3c cf                	cmp    al,0xcf
c001de88:	0f 85 94 06 00 00    	jne    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	68 06 ac 02 c0       	push   0xc002ac06
c001de96:	e8 fa 48 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001de9b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001de9e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001dea1:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001dea5:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001dea8:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001deac:	0d 00 02 02 00       	or     eax,0x20200
c001deb1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001deb4:	56                   	push   esi
c001deb5:	53                   	push   ebx
c001deb6:	52                   	push   edx
c001deb7:	68 0c ac 02 c0       	push   0xc002ac0c
c001debc:	e8 d4 48 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dec1:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001dec5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001decb:	66 c1 e8 09          	shr    ax,0x9
c001decf:	83 e0 01             	and    eax,0x1
c001ded2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ded5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ded8:	83 c0 06             	add    eax,0x6
c001dedb:	25 ff ff 00 00       	and    eax,0xffff
c001dee0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001dee3:	e9 95 02 00 00       	jmp    c001e17d <Vm::faultHandler(regs*)+0x42e>
c001dee8:	3c e6                	cmp    al,0xe6
c001deea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001deee:	0f 84 4e 05 00 00    	je     c001e442 <Vm::faultHandler(regs*)+0x6f3>
c001def4:	0f 82 0a 05 00 00    	jb     c001e404 <Vm::faultHandler(regs*)+0x6b5>
c001defa:	3c e7                	cmp    al,0xe7
c001defc:	0f 84 69 05 00 00    	je     c001e46b <Vm::faultHandler(regs*)+0x71c>
c001df02:	e9 1b 06 00 00       	jmp    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001df07:	3c ef                	cmp    al,0xef
c001df09:	0f 84 e6 05 00 00    	je     c001e4f5 <Vm::faultHandler(regs*)+0x7a6>
c001df0f:	77 37                	ja     c001df48 <Vm::faultHandler(regs*)+0x1f9>
c001df11:	3c ed                	cmp    al,0xed
c001df13:	0f 84 a3 05 00 00    	je     c001e4bc <Vm::faultHandler(regs*)+0x76d>
c001df19:	3c ee                	cmp    al,0xee
c001df1b:	0f 85 01 06 00 00    	jne    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001df21:	52                   	push   edx
c001df22:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001df25:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001df28:	68 a7 ac 02 c0       	push   0xc002aca7
c001df2d:	e8 63 48 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001df32:	59                   	pop    ecx
c001df33:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001df37:	5b                   	pop    ebx
c001df38:	50                   	push   eax
c001df39:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001df3d:	50                   	push   eax
c001df3e:	e8 2a fa ff ff       	call   c001d96d <Vm::outbv(unsigned short, unsigned char)>
c001df43:	e9 a5 05 00 00       	jmp    c001e4ed <Vm::faultHandler(regs*)+0x79e>
c001df48:	3c fa                	cmp    al,0xfa
c001df4a:	0f 84 f7 01 00 00    	je     c001e147 <Vm::faultHandler(regs*)+0x3f8>
c001df50:	3c fb                	cmp    al,0xfb
c001df52:	0f 84 0a 02 00 00    	je     c001e162 <Vm::faultHandler(regs*)+0x413>
c001df58:	3c f3                	cmp    al,0xf3
c001df5a:	0f 85 c2 05 00 00    	jne    c001e522 <Vm::faultHandler(regs*)+0x7d3>
c001df60:	83 ec 0c             	sub    esp,0xc
c001df63:	68 df ab 02 c0       	push   0xc002abdf
c001df68:	e8 28 48 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001df6d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	e9 84 fe ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	b3 02                	mov    bl,0x2
c001df7d:	68 ba ab 02 c0       	push   0xc002abba
c001df82:	e8 0e 48 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001df87:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df8a:	83 c4 10             	add    esp,0x10
c001df8d:	e9 6a fe ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001df92:	83 ec 0c             	sub    esp,0xc
c001df95:	b3 03                	mov    bl,0x3
c001df97:	68 c6 ab 02 c0       	push   0xc002abc6
c001df9c:	e8 f4 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dfa1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfa4:	83 c4 10             	add    esp,0x10
c001dfa7:	e9 50 fe ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001dfac:	83 ec 0c             	sub    esp,0xc
c001dfaf:	b3 04                	mov    bl,0x4
c001dfb1:	68 ca ab 02 c0       	push   0xc002abca
c001dfb6:	e8 da 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dfbb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	e9 36 fe ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001dfc6:	83 ec 0c             	sub    esp,0xc
c001dfc9:	b3 05                	mov    bl,0x5
c001dfcb:	68 ce ab 02 c0       	push   0xc002abce
c001dfd0:	e8 c0 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dfd5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	e9 1c fe ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001dfe0:	83 ec 0c             	sub    esp,0xc
c001dfe3:	68 d2 ab 02 c0       	push   0xc002abd2
c001dfe8:	e8 a8 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001dfed:	83 c4 10             	add    esp,0x10
c001dff0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dff3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dff8:	e9 ff fd ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001dffd:	50                   	push   eax
c001dffe:	50                   	push   eax
c001dfff:	6a 01                	push   0x1
c001e001:	68 d7 ab 02 c0       	push   0xc002abd7
c001e006:	e8 8a 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e011:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e016:	e9 e1 fd ff ff       	jmp    c001ddfc <Vm::faultHandler(regs*)+0xad>
c001e01b:	83 ec 0c             	sub    esp,0xc
c001e01e:	68 e5 ab 02 c0       	push   0xc002abe5
c001e023:	e8 6d 47 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e02e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e033:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e036:	74 2f                	je     c001e067 <Vm::faultHandler(regs*)+0x318>
c001e038:	83 ea 04             	sub    edx,0x4
c001e03b:	25 ff 0d 00 00       	and    eax,0xdff
c001e040:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e046:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e049:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e04c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e052:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e056:	0f 84 bf 04 00 00    	je     c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e05c:	80 cc 02             	or     ah,0x2
c001e05f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e062:	e9 b4 04 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e067:	83 ea 02             	sub    edx,0x2
c001e06a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e070:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e073:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e077:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e07d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e081:	74 05                	je     c001e088 <Vm::faultHandler(regs*)+0x339>
c001e083:	80 cc 02             	or     ah,0x2
c001e086:	eb 03                	jmp    c001e08b <Vm::faultHandler(regs*)+0x33c>
c001e088:	80 e4 fd             	and    ah,0xfd
c001e08b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e08f:	e9 87 04 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	68 ec ab 02 c0       	push   0xc002abec
c001e09c:	e8 f4 46 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e0a9:	74 28                	je     c001e0d3 <Vm::faultHandler(regs*)+0x384>
c001e0ab:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0ad:	25 ff 0d 00 00       	and    eax,0xdff
c001e0b2:	0d 00 02 02 00       	or     eax,0x20200
c001e0b7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0ba:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0c2:	c1 e8 09             	shr    eax,0x9
c001e0c5:	83 e0 01             	and    eax,0x1
c001e0c8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0cb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0ce:	83 c0 04             	add    eax,0x4
c001e0d1:	eb 24                	jmp    c001e0f7 <Vm::faultHandler(regs*)+0x3a8>
c001e0d3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e0d6:	0d 00 02 02 00       	or     eax,0x20200
c001e0db:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0de:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e0e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0e7:	66 c1 e8 09          	shr    ax,0x9
c001e0eb:	83 e0 01             	and    eax,0x1
c001e0ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0f1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0f4:	83 c0 02             	add    eax,0x2
c001e0f7:	25 ff ff 00 00       	and    eax,0xffff
c001e0fc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e0ff:	e9 17 04 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e104:	53                   	push   ebx
c001e105:	53                   	push   ebx
c001e106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e10a:	50                   	push   eax
c001e10b:	68 f2 ab 02 c0       	push   0xc002abf2
c001e110:	e8 80 46 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e115:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	3c ee                	cmp    al,0xee
c001e11e:	75 10                	jne    c001e130 <Vm::faultHandler(regs*)+0x3e1>
c001e120:	83 ec 0c             	sub    esp,0xc
c001e123:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e126:	e8 fa f8 ff ff       	call   c001da25 <Vm::mainloop3(unsigned long)>
c001e12b:	e9 c0 03 00 00       	jmp    c001e4f0 <Vm::faultHandler(regs*)+0x7a1>
c001e130:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e134:	83 ec 0c             	sub    esp,0xc
c001e137:	53                   	push   ebx
c001e138:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e13c:	53                   	push   ebx
c001e13d:	55                   	push   ebp
c001e13e:	50                   	push   eax
c001e13f:	57                   	push   edi
c001e140:	e8 0c fb ff ff       	call   c001dc51 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e145:	eb 36                	jmp    c001e17d <Vm::faultHandler(regs*)+0x42e>
c001e147:	83 ec 0c             	sub    esp,0xc
c001e14a:	68 fc ab 02 c0       	push   0xc002abfc
c001e14f:	e8 41 46 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e159:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e15d:	e9 8b 03 00 00       	jmp    c001e4ed <Vm::faultHandler(regs*)+0x79e>
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	68 01 ac 02 c0       	push   0xc002ac01
c001e16a:	e8 26 46 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e16f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e174:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e178:	e9 70 03 00 00       	jmp    c001e4ed <Vm::faultHandler(regs*)+0x79e>
c001e17d:	83 c4 20             	add    esp,0x20
c001e180:	e9 99 03 00 00       	jmp    c001e51e <Vm::faultHandler(regs*)+0x7cf>
c001e185:	83 ec 0c             	sub    esp,0xc
c001e188:	68 3f ac 02 c0       	push   0xc002ac3f
c001e18d:	e8 03 46 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e198:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e19d:	74 0d                	je     c001e1ac <Vm::faultHandler(regs*)+0x45d>
c001e19f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1a6:	0f 87 9e 01 00 00    	ja     c001e34a <Vm::faultHandler(regs*)+0x5fb>
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e1b3:	0f b7 db             	movzx  ebx,bx
c001e1b6:	50                   	push   eax
c001e1b7:	e8 9e f7 ff ff       	call   c001d95a <Vm::inbv(unsigned short)>
c001e1bc:	83 c4 0c             	add    esp,0xc
c001e1bf:	0f b6 c0             	movzx  eax,al
c001e1c2:	50                   	push   eax
c001e1c3:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e1c7:	50                   	push   eax
c001e1c8:	53                   	push   ebx
c001e1c9:	e8 41 fb ff ff       	call   c001dd0f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e1d4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1d8:	74 03                	je     c001e1dd <Vm::faultHandler(regs*)+0x48e>
c001e1da:	48                   	dec    eax
c001e1db:	eb 01                	jmp    c001e1de <Vm::faultHandler(regs*)+0x48f>
c001e1dd:	40                   	inc    eax
c001e1de:	0f b7 c0             	movzx  eax,ax
c001e1e1:	eb 7f                	jmp    c001e262 <Vm::faultHandler(regs*)+0x513>
c001e1e3:	83 ec 0c             	sub    esp,0xc
c001e1e6:	68 71 ac 02 c0       	push   0xc002ac71
c001e1eb:	e8 a5 45 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1fb:	74 0d                	je     c001e20a <Vm::faultHandler(regs*)+0x4bb>
c001e1fd:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e204:	0f 87 40 01 00 00    	ja     c001e34a <Vm::faultHandler(regs*)+0x5fb>
c001e20a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e20d:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e211:	0f b7 db             	movzx  ebx,bx
c001e214:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e219:	74 20                	je     c001e23b <Vm::faultHandler(regs*)+0x4ec>
c001e21b:	ed                   	in     eax,dx
c001e21c:	51                   	push   ecx
c001e21d:	50                   	push   eax
c001e21e:	56                   	push   esi
c001e21f:	53                   	push   ebx
c001e220:	e8 15 fb ff ff       	call   c001dd3a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e225:	83 c4 10             	add    esp,0x10
c001e228:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e22b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e22f:	74 05                	je     c001e236 <Vm::faultHandler(regs*)+0x4e7>
c001e231:	83 e8 04             	sub    eax,0x4
c001e234:	eb 27                	jmp    c001e25d <Vm::faultHandler(regs*)+0x50e>
c001e236:	83 c0 04             	add    eax,0x4
c001e239:	eb 22                	jmp    c001e25d <Vm::faultHandler(regs*)+0x50e>
c001e23b:	66 ed                	in     ax,dx
c001e23d:	0f b7 c0             	movzx  eax,ax
c001e240:	52                   	push   edx
c001e241:	50                   	push   eax
c001e242:	56                   	push   esi
c001e243:	53                   	push   ebx
c001e244:	e8 db fa ff ff       	call   c001dd24 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e24f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e253:	74 05                	je     c001e25a <Vm::faultHandler(regs*)+0x50b>
c001e255:	83 e8 02             	sub    eax,0x2
c001e258:	eb 03                	jmp    c001e25d <Vm::faultHandler(regs*)+0x50e>
c001e25a:	83 c0 02             	add    eax,0x2
c001e25d:	25 ff ff 00 00       	and    eax,0xffff
c001e262:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e265:	e9 b1 02 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e26a:	83 ec 0c             	sub    esp,0xc
c001e26d:	4b                   	dec    ebx
c001e26e:	68 77 ac 02 c0       	push   0xc002ac77
c001e273:	e8 1d 45 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	80 fb 05             	cmp    bl,0x5
c001e27e:	77 0a                	ja     c001e28a <Vm::faultHandler(regs*)+0x53b>
c001e280:	0f b6 db             	movzx  ebx,bl
c001e283:	ff 24 9d e8 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5318]
c001e28a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e28e:	eb 1b                	jmp    c001e2ab <Vm::faultHandler(regs*)+0x55c>
c001e290:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e294:	eb 15                	jmp    c001e2ab <Vm::faultHandler(regs*)+0x55c>
c001e296:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e29a:	eb 0f                	jmp    c001e2ab <Vm::faultHandler(regs*)+0x55c>
c001e29c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e2a0:	eb 09                	jmp    c001e2ab <Vm::faultHandler(regs*)+0x55c>
c001e2a2:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e2a5:	eb 04                	jmp    c001e2ab <Vm::faultHandler(regs*)+0x55c>
c001e2a7:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e2ab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e2b0:	74 0d                	je     c001e2bf <Vm::faultHandler(regs*)+0x570>
c001e2b2:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e2b9:	0f 87 8b 00 00 00    	ja     c001e34a <Vm::faultHandler(regs*)+0x5fb>
c001e2bf:	53                   	push   ebx
c001e2c0:	53                   	push   ebx
c001e2c1:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e2c5:	52                   	push   edx
c001e2c6:	50                   	push   eax
c001e2c7:	e8 0f fa ff ff       	call   c001dcdb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e2cc:	5e                   	pop    esi
c001e2cd:	0f b6 c0             	movzx  eax,al
c001e2d0:	5d                   	pop    ebp
c001e2d1:	50                   	push   eax
c001e2d2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e2d6:	50                   	push   eax
c001e2d7:	e8 91 f6 ff ff       	call   c001d96d <Vm::outbv(unsigned short, unsigned char)>
c001e2dc:	83 c4 10             	add    esp,0x10
c001e2df:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e2e2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2e6:	74 03                	je     c001e2eb <Vm::faultHandler(regs*)+0x59c>
c001e2e8:	48                   	dec    eax
c001e2e9:	eb 01                	jmp    c001e2ec <Vm::faultHandler(regs*)+0x59d>
c001e2eb:	40                   	inc    eax
c001e2ec:	0f b7 c0             	movzx  eax,ax
c001e2ef:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e2f2:	e9 24 02 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e2f7:	83 ec 0c             	sub    esp,0xc
c001e2fa:	4b                   	dec    ebx
c001e2fb:	68 77 ac 02 c0       	push   0xc002ac77
c001e300:	e8 90 44 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	80 fb 05             	cmp    bl,0x5
c001e30b:	77 0a                	ja     c001e317 <Vm::faultHandler(regs*)+0x5c8>
c001e30d:	0f b6 db             	movzx  ebx,bl
c001e310:	ff 24 9d 00 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5300]
c001e317:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e31b:	eb 1b                	jmp    c001e338 <Vm::faultHandler(regs*)+0x5e9>
c001e31d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e321:	eb 15                	jmp    c001e338 <Vm::faultHandler(regs*)+0x5e9>
c001e323:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e327:	eb 0f                	jmp    c001e338 <Vm::faultHandler(regs*)+0x5e9>
c001e329:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e32d:	eb 09                	jmp    c001e338 <Vm::faultHandler(regs*)+0x5e9>
c001e32f:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e332:	eb 04                	jmp    c001e338 <Vm::faultHandler(regs*)+0x5e9>
c001e334:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e338:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e33b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e340:	74 39                	je     c001e37b <Vm::faultHandler(regs*)+0x62c>
c001e342:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e348:	76 31                	jbe    c001e37b <Vm::faultHandler(regs*)+0x62c>
c001e34a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e34e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e352:	51                   	push   ecx
c001e353:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e357:	51                   	push   ecx
c001e358:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e35c:	51                   	push   ecx
c001e35d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e361:	51                   	push   ecx
c001e362:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e366:	52                   	push   edx
c001e367:	50                   	push   eax
c001e368:	50                   	push   eax
c001e369:	68 44 ac 02 c0       	push   0xc002ac44
c001e36e:	e8 22 44 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e373:	83 c4 20             	add    esp,0x20
c001e376:	e9 fb 01 00 00       	jmp    c001e576 <Vm::faultHandler(regs*)+0x827>
c001e37b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e37e:	0f b7 d3             	movzx  edx,bx
c001e381:	81 e6 00 04 00 00    	and    esi,0x400
c001e387:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e38a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e38f:	74 1d                	je     c001e3ae <Vm::faultHandler(regs*)+0x65f>
c001e391:	51                   	push   ecx
c001e392:	51                   	push   ecx
c001e393:	52                   	push   edx
c001e394:	50                   	push   eax
c001e395:	e8 64 f9 ff ff       	call   c001dcfe <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e39a:	83 c4 10             	add    esp,0x10
c001e39d:	89 ea                	mov    edx,ebp
c001e39f:	ef                   	out    dx,eax
c001e3a0:	85 f6                	test   esi,esi
c001e3a2:	74 05                	je     c001e3a9 <Vm::faultHandler(regs*)+0x65a>
c001e3a4:	83 eb 04             	sub    ebx,0x4
c001e3a7:	eb 21                	jmp    c001e3ca <Vm::faultHandler(regs*)+0x67b>
c001e3a9:	83 c3 04             	add    ebx,0x4
c001e3ac:	eb 1c                	jmp    c001e3ca <Vm::faultHandler(regs*)+0x67b>
c001e3ae:	51                   	push   ecx
c001e3af:	51                   	push   ecx
c001e3b0:	52                   	push   edx
c001e3b1:	50                   	push   eax
c001e3b2:	e8 35 f9 ff ff       	call   c001dcec <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	89 ea                	mov    edx,ebp
c001e3bc:	66 ef                	out    dx,ax
c001e3be:	85 f6                	test   esi,esi
c001e3c0:	74 05                	je     c001e3c7 <Vm::faultHandler(regs*)+0x678>
c001e3c2:	83 eb 02             	sub    ebx,0x2
c001e3c5:	eb 03                	jmp    c001e3ca <Vm::faultHandler(regs*)+0x67b>
c001e3c7:	83 c3 02             	add    ebx,0x2
c001e3ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e3d0:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e3d3:	e9 43 01 00 00       	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e3d8:	53                   	push   ebx
c001e3d9:	53                   	push   ebx
c001e3da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3de:	50                   	push   eax
c001e3df:	68 7d ac 02 c0       	push   0xc002ac7d
c001e3e4:	e8 ac 43 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e3e9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3f7:	e8 5e f5 ff ff       	call   c001d95a <Vm::inbv(unsigned short)>
c001e3fc:	0f b6 c0             	movzx  eax,al
c001e3ff:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e402:	eb 5e                	jmp    c001e462 <Vm::faultHandler(regs*)+0x713>
c001e404:	51                   	push   ecx
c001e405:	51                   	push   ecx
c001e406:	53                   	push   ebx
c001e407:	68 83 ac 02 c0       	push   0xc002ac83
c001e40c:	e8 84 43 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e411:	83 c4 10             	add    esp,0x10
c001e414:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e419:	74 07                	je     c001e422 <Vm::faultHandler(regs*)+0x6d3>
c001e41b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e41f:	ed                   	in     eax,dx
c001e420:	eb 14                	jmp    c001e436 <Vm::faultHandler(regs*)+0x6e7>
c001e422:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e425:	66 31 db             	xor    bx,bx
c001e428:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e42b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e42f:	66 ed                	in     ax,dx
c001e431:	0f b7 c0             	movzx  eax,ax
c001e434:	09 d8                	or     eax,ebx
c001e436:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e439:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e43d:	e9 dc 00 00 00       	jmp    c001e51e <Vm::faultHandler(regs*)+0x7cf>
c001e442:	50                   	push   eax
c001e443:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e446:	53                   	push   ebx
c001e447:	68 89 ac 02 c0       	push   0xc002ac89
c001e44c:	e8 44 43 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e451:	58                   	pop    eax
c001e452:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e456:	5a                   	pop    edx
c001e457:	50                   	push   eax
c001e458:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e45c:	50                   	push   eax
c001e45d:	e8 0b f5 ff ff       	call   c001d96d <Vm::outbv(unsigned short, unsigned char)>
c001e462:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e466:	e9 85 00 00 00       	jmp    c001e4f0 <Vm::faultHandler(regs*)+0x7a1>
c001e46b:	50                   	push   eax
c001e46c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e46f:	53                   	push   ebx
c001e470:	68 92 ac 02 c0       	push   0xc002ac92
c001e475:	e8 1b 43 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e481:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e486:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e489:	74 03                	je     c001e48e <Vm::faultHandler(regs*)+0x73f>
c001e48b:	ef                   	out    dx,eax
c001e48c:	eb ab                	jmp    c001e439 <Vm::faultHandler(regs*)+0x6ea>
c001e48e:	66 ef                	out    dx,ax
c001e490:	eb a7                	jmp    c001e439 <Vm::faultHandler(regs*)+0x6ea>
c001e492:	55                   	push   ebp
c001e493:	55                   	push   ebp
c001e494:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e497:	68 9b ac 02 c0       	push   0xc002ac9b
c001e49c:	e8 f4 42 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e4a1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e4a8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e4ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4af:	e8 a6 f4 ff ff       	call   c001d95a <Vm::inbv(unsigned short)>
c001e4b4:	0f b6 c0             	movzx  eax,al
c001e4b7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e4ba:	eb 31                	jmp    c001e4ed <Vm::faultHandler(regs*)+0x79e>
c001e4bc:	56                   	push   esi
c001e4bd:	56                   	push   esi
c001e4be:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4c1:	68 a1 ac 02 c0       	push   0xc002aca1
c001e4c6:	e8 ca 42 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e4cb:	83 c4 10             	add    esp,0x10
c001e4ce:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4d1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4d6:	74 03                	je     c001e4db <Vm::faultHandler(regs*)+0x78c>
c001e4d8:	ed                   	in     eax,dx
c001e4d9:	eb 0d                	jmp    c001e4e8 <Vm::faultHandler(regs*)+0x799>
c001e4db:	66 ed                	in     ax,dx
c001e4dd:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e4e0:	0f b7 c0             	movzx  eax,ax
c001e4e3:	66 31 d2             	xor    dx,dx
c001e4e6:	09 d0                	or     eax,edx
c001e4e8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4eb:	eb 2e                	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e4ed:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4f0:	83 c4 10             	add    esp,0x10
c001e4f3:	eb 29                	jmp    c001e51e <Vm::faultHandler(regs*)+0x7cf>
c001e4f5:	50                   	push   eax
c001e4f6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4f9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4fc:	68 b0 ac 02 c0       	push   0xc002acb0
c001e501:	e8 8f 42 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e506:	83 c4 10             	add    esp,0x10
c001e509:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e50c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e511:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e514:	74 03                	je     c001e519 <Vm::faultHandler(regs*)+0x7ca>
c001e516:	ef                   	out    dx,eax
c001e517:	eb 02                	jmp    c001e51b <Vm::faultHandler(regs*)+0x7cc>
c001e519:	66 ef                	out    dx,ax
c001e51b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e51e:	b0 01                	mov    al,0x1
c001e520:	eb 56                	jmp    c001e578 <Vm::faultHandler(regs*)+0x829>
c001e522:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e526:	51                   	push   ecx
c001e527:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e52b:	51                   	push   ecx
c001e52c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e530:	51                   	push   ecx
c001e531:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e535:	51                   	push   ecx
c001e536:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e53a:	52                   	push   edx
c001e53b:	50                   	push   eax
c001e53c:	50                   	push   eax
c001e53d:	68 b9 ac 02 c0       	push   0xc002acb9
c001e542:	e8 4e 42 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001e547:	83 c4 20             	add    esp,0x20
c001e54a:	83 ec 0c             	sub    esp,0xc
c001e54d:	6a 60                	push   0x60
c001e54f:	e8 06 f4 ff ff       	call   c001d95a <Vm::inbv(unsigned short)>
c001e554:	83 c4 10             	add    esp,0x10
c001e557:	3c 1c                	cmp    al,0x1c
c001e559:	74 04                	je     c001e55f <Vm::faultHandler(regs*)+0x810>
c001e55b:	3c 5a                	cmp    al,0x5a
c001e55d:	75 eb                	jne    c001e54a <Vm::faultHandler(regs*)+0x7fb>
c001e55f:	3c 1c                	cmp    al,0x1c
c001e561:	74 04                	je     c001e567 <Vm::faultHandler(regs*)+0x818>
c001e563:	3c 5a                	cmp    al,0x5a
c001e565:	75 0f                	jne    c001e576 <Vm::faultHandler(regs*)+0x827>
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	6a 60                	push   0x60
c001e56c:	e8 e9 f3 ff ff       	call   c001d95a <Vm::inbv(unsigned short)>
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	eb e9                	jmp    c001e55f <Vm::faultHandler(regs*)+0x810>
c001e576:	31 c0                	xor    eax,eax
c001e578:	83 c4 1c             	add    esp,0x1c
c001e57b:	5b                   	pop    ebx
c001e57c:	5e                   	pop    esi
c001e57d:	5f                   	pop    edi
c001e57e:	5d                   	pop    ebp
c001e57f:	c3                   	ret    

c001e580 <Vm::fpuInternalTo32(unsigned long long)>:
c001e580:	57                   	push   edi
c001e581:	56                   	push   esi
c001e582:	53                   	push   ebx
c001e583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58b:	89 d6                	mov    esi,edx
c001e58d:	89 d7                	mov    edi,edx
c001e58f:	89 c1                	mov    ecx,eax
c001e591:	c1 ef 14             	shr    edi,0x14
c001e594:	89 d3                	mov    ebx,edx
c001e596:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e59c:	31 d2                	xor    edx,edx
c001e59e:	89 f8                	mov    eax,edi
c001e5a0:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e5a6:	bf ff 00 00 00       	mov    edi,0xff
c001e5ab:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e5b0:	83 d2 ff             	adc    edx,0xffffffff
c001e5b3:	39 c7                	cmp    edi,eax
c001e5b5:	bf 00 00 00 00       	mov    edi,0x0
c001e5ba:	19 d7                	sbb    edi,edx
c001e5bc:	72 15                	jb     c001e5d3 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e5be:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e5c2:	c1 e0 17             	shl    eax,0x17
c001e5c5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e5cb:	09 f1                	or     ecx,esi
c001e5cd:	09 c1                	or     ecx,eax
c001e5cf:	89 cf                	mov    edi,ecx
c001e5d1:	eb 02                	jmp    c001e5d5 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e5d3:	31 ff                	xor    edi,edi
c001e5d5:	89 f8                	mov    eax,edi
c001e5d7:	5b                   	pop    ebx
c001e5d8:	5e                   	pop    esi
c001e5d9:	5f                   	pop    edi
c001e5da:	c3                   	ret    

c001e5db <Vm::fpuInternalTo64(unsigned long long)>:
c001e5db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5e3:	c3                   	ret    

c001e5e4 <Vm::fpu32ToInternal(unsigned int)>:
c001e5e4:	57                   	push   edi
c001e5e5:	31 ff                	xor    edi,edi
c001e5e7:	56                   	push   esi
c001e5e8:	53                   	push   ebx
c001e5e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5ed:	89 cb                	mov    ebx,ecx
c001e5ef:	89 ce                	mov    esi,ecx
c001e5f1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e5f7:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e5fd:	c1 e9 17             	shr    ecx,0x17
c001e600:	89 f0                	mov    eax,esi
c001e602:	0f b6 d1             	movzx  edx,cl
c001e605:	81 c2 80 03 00 00    	add    edx,0x380
c001e60b:	89 d1                	mov    ecx,edx
c001e60d:	89 fa                	mov    edx,edi
c001e60f:	c1 e1 14             	shl    ecx,0x14
c001e612:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e616:	c1 e0 1d             	shl    eax,0x1d
c001e619:	89 d7                	mov    edi,edx
c001e61b:	89 c6                	mov    esi,eax
c001e61d:	89 ca                	mov    edx,ecx
c001e61f:	89 f0                	mov    eax,esi
c001e621:	09 fa                	or     edx,edi
c001e623:	09 da                	or     edx,ebx
c001e625:	5b                   	pop    ebx
c001e626:	5e                   	pop    esi
c001e627:	5f                   	pop    edi
c001e628:	c3                   	ret    

c001e629 <Vm::fpu64ToInternal(unsigned long long)>:
c001e629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e62d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e631:	c3                   	ret    

c001e632 <Vm::fpuFloatToLong(unsigned long long)>:
c001e632:	57                   	push   edi
c001e633:	31 c0                	xor    eax,eax
c001e635:	56                   	push   esi
c001e636:	31 d2                	xor    edx,edx
c001e638:	53                   	push   ebx
c001e639:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e63d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e641:	89 d9                	mov    ecx,ebx
c001e643:	c1 e9 14             	shr    ecx,0x14
c001e646:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e64c:	89 cf                	mov    edi,ecx
c001e64e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e654:	78 33                	js     c001e689 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e656:	89 d9                	mov    ecx,ebx
c001e658:	89 f0                	mov    eax,esi
c001e65a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e660:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e666:	89 ca                	mov    edx,ecx
c001e668:	b9 34 00 00 00       	mov    ecx,0x34
c001e66d:	29 f9                	sub    ecx,edi
c001e66f:	0f ad d0             	shrd   eax,edx,cl
c001e672:	d3 fa                	sar    edx,cl
c001e674:	f6 c1 20             	test   cl,0x20
c001e677:	74 05                	je     c001e67e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e679:	89 d0                	mov    eax,edx
c001e67b:	c1 fa 1f             	sar    edx,0x1f
c001e67e:	85 db                	test   ebx,ebx
c001e680:	79 07                	jns    c001e689 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e682:	f7 d8                	neg    eax
c001e684:	83 d2 00             	adc    edx,0x0
c001e687:	f7 da                	neg    edx
c001e689:	5b                   	pop    ebx
c001e68a:	5e                   	pop    esi
c001e68b:	5f                   	pop    edi
c001e68c:	c3                   	ret    

c001e68d <Vm::fpuULongToFloat(unsigned long long)>:
c001e68d:	57                   	push   edi
c001e68e:	31 c9                	xor    ecx,ecx
c001e690:	56                   	push   esi
c001e691:	53                   	push   ebx
c001e692:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e696:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e69a:	0f ba e7 14          	bt     edi,0x14
c001e69e:	72 07                	jb     c001e6a7 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e6a0:	01 f6                	add    esi,esi
c001e6a2:	11 ff                	adc    edi,edi
c001e6a4:	41                   	inc    ecx
c001e6a5:	eb f3                	jmp    c001e69a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e6a7:	89 fa                	mov    edx,edi
c001e6a9:	89 f0                	mov    eax,esi
c001e6ab:	bb 33 04 00 00       	mov    ebx,0x433
c001e6b0:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e6b6:	29 cb                	sub    ebx,ecx
c001e6b8:	89 d9                	mov    ecx,ebx
c001e6ba:	5b                   	pop    ebx
c001e6bb:	c1 e1 14             	shl    ecx,0x14
c001e6be:	5e                   	pop    esi
c001e6bf:	09 ca                	or     edx,ecx
c001e6c1:	5f                   	pop    edi
c001e6c2:	c3                   	ret    

c001e6c3 <Vm::fpuLongToFloat(long long)>:
c001e6c3:	56                   	push   esi
c001e6c4:	31 c0                	xor    eax,eax
c001e6c6:	53                   	push   ebx
c001e6c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6cf:	39 c8                	cmp    eax,ecx
c001e6d1:	19 d8                	sbb    eax,ebx
c001e6d3:	7d 04                	jge    c001e6d9 <Vm::fpuLongToFloat(long long)+0x16>
c001e6d5:	31 f6                	xor    esi,esi
c001e6d7:	eb 0c                	jmp    c001e6e5 <Vm::fpuLongToFloat(long long)+0x22>
c001e6d9:	f7 d9                	neg    ecx
c001e6db:	be 01 00 00 00       	mov    esi,0x1
c001e6e0:	83 d3 00             	adc    ebx,0x0
c001e6e3:	f7 db                	neg    ebx
c001e6e5:	31 c0                	xor    eax,eax
c001e6e7:	0f ba e3 14          	bt     ebx,0x14
c001e6eb:	72 07                	jb     c001e6f4 <Vm::fpuLongToFloat(long long)+0x31>
c001e6ed:	01 c9                	add    ecx,ecx
c001e6ef:	11 db                	adc    ebx,ebx
c001e6f1:	40                   	inc    eax
c001e6f2:	eb f3                	jmp    c001e6e7 <Vm::fpuLongToFloat(long long)+0x24>
c001e6f4:	ba 33 04 00 00       	mov    edx,0x433
c001e6f9:	29 c2                	sub    edx,eax
c001e6fb:	89 c8                	mov    eax,ecx
c001e6fd:	c1 e2 14             	shl    edx,0x14
c001e700:	89 d9                	mov    ecx,ebx
c001e702:	89 f3                	mov    ebx,esi
c001e704:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e70a:	09 ca                	or     edx,ecx
c001e70c:	84 db                	test   bl,bl
c001e70e:	74 06                	je     c001e716 <Vm::fpuLongToFloat(long long)+0x53>
c001e710:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e716:	5b                   	pop    ebx
c001e717:	5e                   	pop    esi
c001e718:	c3                   	ret    

c001e719 <Vm::fpuGet0()>:
c001e719:	31 c0                	xor    eax,eax
c001e71b:	31 d2                	xor    edx,edx
c001e71d:	c3                   	ret    

c001e71e <Vm::fpuGet1()>:
c001e71e:	b8 01 00 00 00       	mov    eax,0x1
c001e723:	31 d2                	xor    edx,edx
c001e725:	c3                   	ret    

c001e726 <Vm::fpuGetPi()>:
c001e726:	b8 03 00 00 00       	mov    eax,0x3
c001e72b:	31 d2                	xor    edx,edx
c001e72d:	c3                   	ret    

c001e72e <Vm::fpuGetLog2E()>:
c001e72e:	83 ec 18             	sub    esp,0x18
c001e731:	68 18 ad 02 c0       	push   0xc002ad18
c001e736:	e8 74 b1 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e73b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e740:	31 d2                	xor    edx,edx
c001e742:	83 c4 1c             	add    esp,0x1c
c001e745:	c3                   	ret    

c001e746 <Vm::fpuGetLogE2()>:
c001e746:	83 ec 18             	sub    esp,0x18
c001e749:	68 24 ad 02 c0       	push   0xc002ad24
c001e74e:	e8 5c b1 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e753:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e758:	31 d2                	xor    edx,edx
c001e75a:	83 c4 1c             	add    esp,0x1c
c001e75d:	c3                   	ret    

c001e75e <Vm::fpuGetLog210()>:
c001e75e:	83 ec 18             	sub    esp,0x18
c001e761:	68 30 ad 02 c0       	push   0xc002ad30
c001e766:	e8 44 b1 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e76b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e770:	31 d2                	xor    edx,edx
c001e772:	83 c4 1c             	add    esp,0x1c
c001e775:	c3                   	ret    

c001e776 <Vm::fpuGetLog102()>:
c001e776:	83 ec 18             	sub    esp,0x18
c001e779:	68 3d ad 02 c0       	push   0xc002ad3d
c001e77e:	e8 2c b1 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e783:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e788:	31 d2                	xor    edx,edx
c001e78a:	83 c4 1c             	add    esp,0x1c
c001e78d:	c3                   	ret    

c001e78e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e792:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e79a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e79e:	0f 92 c0             	setb   al
c001e7a1:	c3                   	ret    

c001e7a2 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e7a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e7ae:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e7b2:	09 c2                	or     edx,eax
c001e7b4:	0f 94 c0             	sete   al
c001e7b7:	c3                   	ret    

c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e7b8:	57                   	push   edi
c001e7b9:	56                   	push   esi
c001e7ba:	53                   	push   ebx
c001e7bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e7c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e7cb:	57                   	push   edi
c001e7cc:	56                   	push   esi
c001e7cd:	53                   	push   ebx
c001e7ce:	51                   	push   ecx
c001e7cf:	e8 ce ff ff ff       	call   c001e7a2 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	88 c2                	mov    dl,al
c001e7d9:	31 c0                	xor    eax,eax
c001e7db:	84 d2                	test   dl,dl
c001e7dd:	75 0c                	jne    c001e7eb <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e7df:	57                   	push   edi
c001e7e0:	56                   	push   esi
c001e7e1:	53                   	push   ebx
c001e7e2:	51                   	push   ecx
c001e7e3:	e8 a6 ff ff ff       	call   c001e78e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e7e8:	83 c4 10             	add    esp,0x10
c001e7eb:	83 e0 01             	and    eax,0x1
c001e7ee:	5b                   	pop    ebx
c001e7ef:	88 c1                	mov    cl,al
c001e7f1:	83 e2 01             	and    edx,0x1
c001e7f4:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e7f9:	c1 e2 06             	shl    edx,0x6
c001e7fc:	83 e0 ba             	and    eax,0xffffffba
c001e7ff:	5e                   	pop    esi
c001e800:	09 c8                	or     eax,ecx
c001e802:	5f                   	pop    edi
c001e803:	09 d0                	or     eax,edx
c001e805:	a2 21 df 02 c0       	mov    ds:0xc002df21,al
c001e80a:	c3                   	ret    

c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e80b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e80f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e813:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e817:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e81b:	c3                   	ret    

c001e81c <Vm::fpuAbs(unsigned long long)>:
c001e81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e820:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e824:	c3                   	ret    

c001e825 <Vm::fpuChs(unsigned long long)>:
c001e825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e829:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e82d:	f7 d8                	neg    eax
c001e82f:	83 d2 00             	adc    edx,0x0
c001e832:	f7 da                	neg    edx
c001e834:	c3                   	ret    

c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e835:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e839:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e83e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e842:	eb c7                	jmp    c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e844:	53                   	push   ebx
c001e845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e849:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e84d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e851:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e855:	0f af ca             	imul   ecx,edx
c001e858:	0f af d8             	imul   ebx,eax
c001e85b:	f7 e2                	mul    edx
c001e85d:	01 d9                	add    ecx,ebx
c001e85f:	5b                   	pop    ebx
c001e860:	01 ca                	add    edx,ecx
c001e862:	c3                   	ret    

c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e863:	83 ec 0c             	sub    esp,0xc
c001e866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e876:	e8 51 6b 00 00       	call   c00253cc <__udivdi3>
c001e87b:	83 c4 1c             	add    esp,0x1c
c001e87e:	c3                   	ret    

c001e87f <Vm::fpuSquare(unsigned long long)>:
c001e87f:	50                   	push   eax
c001e880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e888:	52                   	push   edx
c001e889:	50                   	push   eax
c001e88a:	52                   	push   edx
c001e88b:	50                   	push   eax
c001e88c:	e8 b3 ff ff ff       	call   c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e891:	83 c4 14             	add    esp,0x14
c001e894:	c3                   	ret    

c001e895 <Vm::fpuGetReg(int)>:
c001e895:	83 ec 0c             	sub    esp,0xc
c001e898:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e89d:	76 10                	jbe    c001e8af <Vm::fpuGetReg(int)+0x1a>
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	68 4a ad 02 c0       	push   0xc002ad4a
c001e8a7:	e8 03 b0 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e8b4:	b9 08 00 00 00       	mov    ecx,0x8
c001e8b9:	c0 e8 03             	shr    al,0x3
c001e8bc:	83 e0 07             	and    eax,0x7
c001e8bf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8c3:	99                   	cdq    
c001e8c4:	f7 f9                	idiv   ecx
c001e8c6:	8b 04 d5 24 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd20dc]
c001e8cd:	8b 14 d5 28 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd20d8]
c001e8d4:	83 c4 0c             	add    esp,0xc
c001e8d7:	c3                   	ret    

c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>:
c001e8d8:	57                   	push   edi
c001e8d9:	56                   	push   esi
c001e8da:	52                   	push   edx
c001e8db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e8df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e8e3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8e8:	76 10                	jbe    c001e8fa <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e8ea:	83 ec 0c             	sub    esp,0xc
c001e8ed:	68 5d ad 02 c0       	push   0xc002ad5d
c001e8f2:	e8 b8 af ff ff       	call   c00198af <Krnl::panic(char const*)>
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e8ff:	b9 08 00 00 00       	mov    ecx,0x8
c001e904:	c0 e8 03             	shr    al,0x3
c001e907:	83 e0 07             	and    eax,0x7
c001e90a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e90e:	99                   	cdq    
c001e90f:	f7 f9                	idiv   ecx
c001e911:	89 34 d5 24 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20dc],esi
c001e918:	89 3c d5 28 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20d8],edi
c001e91f:	58                   	pop    eax
c001e920:	5e                   	pop    esi
c001e921:	5f                   	pop    edi
c001e922:	c3                   	ret    

c001e923 <Vm::fpuPush(unsigned long long)>:
c001e923:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e928:	c0 e8 03             	shr    al,0x3
c001e92b:	83 e0 07             	and    eax,0x7
c001e92e:	83 c0 07             	add    eax,0x7
c001e931:	88 c2                	mov    dl,al
c001e933:	83 e0 07             	and    eax,0x7
c001e936:	83 e2 07             	and    edx,0x7
c001e939:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e940:	8a 15 21 df 02 c0    	mov    dl,BYTE PTR ds:0xc002df21
c001e946:	83 e2 c7             	and    edx,0xffffffc7
c001e949:	09 ca                	or     edx,ecx
c001e94b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e94f:	88 15 21 df 02 c0    	mov    BYTE PTR ds:0xc002df21,dl
c001e955:	89 0c c5 28 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20d8],ecx
c001e95c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e960:	89 14 c5 24 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20dc],edx
c001e967:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c001e96c:	83 f8 08             	cmp    eax,0x8
c001e96f:	75 08                	jne    c001e979 <Vm::fpuPush(unsigned long long)+0x56>
c001e971:	80 0d 20 df 02 c0 40 	or     BYTE PTR ds:0xc002df20,0x40
c001e978:	c3                   	ret    
c001e979:	40                   	inc    eax
c001e97a:	a3 64 df 02 c0       	mov    ds:0xc002df64,eax
c001e97f:	c3                   	ret    

c001e980 <Vm::fpuPop()>:
c001e980:	8a 0d 21 df 02 c0    	mov    cl,BYTE PTR ds:0xc002df21
c001e986:	53                   	push   ebx
c001e987:	c0 e9 03             	shr    cl,0x3
c001e98a:	8a 1d 21 df 02 c0    	mov    bl,BYTE PTR ds:0xc002df21
c001e990:	83 e1 07             	and    ecx,0x7
c001e993:	83 e3 c7             	and    ebx,0xffffffc7
c001e996:	8b 04 cd 24 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd20dc]
c001e99d:	8b 14 cd 28 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd20d8]
c001e9a4:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e9ab:	83 e1 38             	and    ecx,0x38
c001e9ae:	09 d9                	or     ecx,ebx
c001e9b0:	88 0d 21 df 02 c0    	mov    BYTE PTR ds:0xc002df21,cl
c001e9b6:	8b 0d 64 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df64
c001e9bc:	85 c9                	test   ecx,ecx
c001e9be:	74 09                	je     c001e9c9 <Vm::fpuPop()+0x49>
c001e9c0:	49                   	dec    ecx
c001e9c1:	89 0d 64 df 02 c0    	mov    DWORD PTR ds:0xc002df64,ecx
c001e9c7:	eb 07                	jmp    c001e9d0 <Vm::fpuPop()+0x50>
c001e9c9:	80 0d 20 df 02 c0 40 	or     BYTE PTR ds:0xc002df20,0x40
c001e9d0:	5b                   	pop    ebx
c001e9d1:	c3                   	ret    

c001e9d2 <Vm::x87Handler(regs*)>:
c001e9d2:	55                   	push   ebp
c001e9d3:	57                   	push   edi
c001e9d4:	56                   	push   esi
c001e9d5:	53                   	push   ebx
c001e9d6:	83 ec 1c             	sub    esp,0x1c
c001e9d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9dd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e9e2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e9e5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e9ed:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e9f1:	50                   	push   eax
c001e9f2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e9f6:	50                   	push   eax
c001e9f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9fb:	50                   	push   eax
c001e9fc:	53                   	push   ebx
c001e9fd:	e8 de a6 ff ff       	call   c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ea02:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	89 c6                	mov    esi,eax
c001ea0a:	80 fa d9             	cmp    dl,0xd9
c001ea0d:	0f 85 52 01 00 00    	jne    c001eb65 <Vm::x87Handler(regs*)+0x193>
c001ea13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea17:	8d 50 20             	lea    edx,[eax+0x20]
c001ea1a:	80 fa 0e             	cmp    dl,0xe
c001ea1d:	0f 87 86 00 00 00    	ja     c001eaa9 <Vm::x87Handler(regs*)+0xd7>
c001ea23:	0f b6 d2             	movzx  edx,dl
c001ea26:	ff 24 95 70 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5290]
c001ea2d:	e8 e7 fc ff ff       	call   c001e719 <Vm::fpuGet0()>
c001ea32:	eb 05                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001ea34:	e8 e5 fc ff ff       	call   c001e71e <Vm::fpuGet1()>
c001ea39:	57                   	push   edi
c001ea3a:	57                   	push   edi
c001ea3b:	52                   	push   edx
c001ea3c:	50                   	push   eax
c001ea3d:	e8 e1 fe ff ff       	call   c001e923 <Vm::fpuPush(unsigned long long)>
c001ea42:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	b0 01                	mov    al,0x1
c001ea4b:	e9 e3 09 00 00       	jmp    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	6a 00                	push   0x0
c001ea55:	e8 3b fe ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ea5a:	59                   	pop    ecx
c001ea5b:	5e                   	pop    esi
c001ea5c:	52                   	push   edx
c001ea5d:	50                   	push   eax
c001ea5e:	e8 c2 fd ff ff       	call   c001e825 <Vm::fpuChs(unsigned long long)>
c001ea63:	eb 13                	jmp    c001ea78 <Vm::x87Handler(regs*)+0xa6>
c001ea65:	83 ec 0c             	sub    esp,0xc
c001ea68:	6a 00                	push   0x0
c001ea6a:	e8 26 fe ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ea6f:	5f                   	pop    edi
c001ea70:	5d                   	pop    ebp
c001ea71:	52                   	push   edx
c001ea72:	50                   	push   eax
c001ea73:	e8 a4 fd ff ff       	call   c001e81c <Vm::fpuAbs(unsigned long long)>
c001ea78:	83 c4 0c             	add    esp,0xc
c001ea7b:	52                   	push   edx
c001ea7c:	50                   	push   eax
c001ea7d:	6a 00                	push   0x0
c001ea7f:	e8 54 fe ff ff       	call   c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>
c001ea84:	eb bc                	jmp    c001ea42 <Vm::x87Handler(regs*)+0x70>
c001ea86:	e8 d3 fc ff ff       	call   c001e75e <Vm::fpuGetLog210()>
c001ea8b:	eb ac                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001ea8d:	e8 9c fc ff ff       	call   c001e72e <Vm::fpuGetLog2E()>
c001ea92:	eb a5                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001ea94:	e8 8d fc ff ff       	call   c001e726 <Vm::fpuGetPi()>
c001ea99:	eb 9e                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001ea9b:	e8 d6 fc ff ff       	call   c001e776 <Vm::fpuGetLog102()>
c001eaa0:	eb 97                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001eaa2:	e8 9f fc ff ff       	call   c001e746 <Vm::fpuGetLogE2()>
c001eaa7:	eb 90                	jmp    c001ea39 <Vm::x87Handler(regs*)+0x67>
c001eaa9:	8d 50 40             	lea    edx,[eax+0x40]
c001eaac:	80 fa 07             	cmp    dl,0x7
c001eaaf:	77 15                	ja     c001eac6 <Vm::x87Handler(regs*)+0xf4>
c001eab1:	83 ec 0c             	sub    esp,0xc
c001eab4:	2d c0 00 00 00       	sub    eax,0xc0
c001eab9:	50                   	push   eax
c001eaba:	e8 d6 fd ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eabf:	59                   	pop    ecx
c001eac0:	5e                   	pop    esi
c001eac1:	e9 75 ff ff ff       	jmp    c001ea3b <Vm::x87Handler(regs*)+0x69>
c001eac6:	8d 50 38             	lea    edx,[eax+0x38]
c001eac9:	80 fa 07             	cmp    dl,0x7
c001eacc:	77 3c                	ja     c001eb0a <Vm::x87Handler(regs*)+0x138>
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	2d c8 00 00 00       	sub    eax,0xc8
c001ead6:	50                   	push   eax
c001ead7:	e8 b9 fd ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eadc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eae3:	89 c6                	mov    esi,eax
c001eae5:	89 d7                	mov    edi,edx
c001eae7:	e8 a9 fd ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eaec:	83 c4 0c             	add    esp,0xc
c001eaef:	52                   	push   edx
c001eaf0:	50                   	push   eax
c001eaf1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eaf5:	2d c8 00 00 00       	sub    eax,0xc8
c001eafa:	50                   	push   eax
c001eafb:	e8 d8 fd ff ff       	call   c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>
c001eb00:	83 c4 0c             	add    esp,0xc
c001eb03:	57                   	push   edi
c001eb04:	56                   	push   esi
c001eb05:	e9 73 ff ff ff       	jmp    c001ea7d <Vm::x87Handler(regs*)+0xab>
c001eb0a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb0e:	84 d2                	test   dl,dl
c001eb10:	75 0f                	jne    c001eb21 <Vm::x87Handler(regs*)+0x14f>
c001eb12:	83 ec 0c             	sub    esp,0xc
c001eb15:	ff 36                	push   DWORD PTR [esi]
c001eb17:	e8 c8 fa ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001eb1c:	e9 bf 00 00 00       	jmp    c001ebe0 <Vm::x87Handler(regs*)+0x20e>
c001eb21:	80 fa 03             	cmp    dl,0x3
c001eb24:	75 13                	jne    c001eb39 <Vm::x87Handler(regs*)+0x167>
c001eb26:	e8 55 fe ff ff       	call   c001e980 <Vm::fpuPop()>
c001eb2b:	55                   	push   ebp
c001eb2c:	55                   	push   ebp
c001eb2d:	52                   	push   edx
c001eb2e:	50                   	push   eax
c001eb2f:	e8 4c fa ff ff       	call   c001e580 <Vm::fpuInternalTo32(unsigned long long)>
c001eb34:	e9 88 00 00 00       	jmp    c001ebc1 <Vm::x87Handler(regs*)+0x1ef>
c001eb39:	80 fa 05             	cmp    dl,0x5
c001eb3c:	75 0e                	jne    c001eb4c <Vm::x87Handler(regs*)+0x17a>
c001eb3e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb41:	66 a3 22 df 02 c0    	mov    ds:0xc002df22,ax
c001eb47:	e9 df 00 00 00       	jmp    c001ec2b <Vm::x87Handler(regs*)+0x259>
c001eb4c:	31 c0                	xor    eax,eax
c001eb4e:	80 fa 07             	cmp    dl,0x7
c001eb51:	0f 85 dc 08 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001eb57:	66 a1 22 df 02 c0    	mov    ax,ds:0xc002df22
c001eb5d:	66 89 06             	mov    WORD PTR [esi],ax
c001eb60:	e9 c6 00 00 00       	jmp    c001ec2b <Vm::x87Handler(regs*)+0x259>
c001eb65:	80 fa d8             	cmp    dl,0xd8
c001eb68:	0f 84 c9 00 00 00    	je     c001ec37 <Vm::x87Handler(regs*)+0x265>
c001eb6e:	80 fa dc             	cmp    dl,0xdc
c001eb71:	0f 84 0d 02 00 00    	je     c001ed84 <Vm::x87Handler(regs*)+0x3b2>
c001eb77:	80 fa de             	cmp    dl,0xde
c001eb7a:	0f 84 cd 02 00 00    	je     c001ee4d <Vm::x87Handler(regs*)+0x47b>
c001eb80:	80 fa dd             	cmp    dl,0xdd
c001eb83:	0f 84 5f 04 00 00    	je     c001efe8 <Vm::x87Handler(regs*)+0x616>
c001eb89:	80 fa da             	cmp    dl,0xda
c001eb8c:	0f 84 24 05 00 00    	je     c001f0b6 <Vm::x87Handler(regs*)+0x6e4>
c001eb92:	80 fa df             	cmp    dl,0xdf
c001eb95:	0f 84 68 05 00 00    	je     c001f103 <Vm::x87Handler(regs*)+0x731>
c001eb9b:	31 c0                	xor    eax,eax
c001eb9d:	80 fa db             	cmp    dl,0xdb
c001eba0:	0f 85 8d 08 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001eba6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebaa:	80 fa 03             	cmp    dl,0x3
c001ebad:	0f 85 70 06 00 00    	jne    c001f223 <Vm::x87Handler(regs*)+0x851>
c001ebb3:	e8 c8 fd ff ff       	call   c001e980 <Vm::fpuPop()>
c001ebb8:	55                   	push   ebp
c001ebb9:	55                   	push   ebp
c001ebba:	52                   	push   edx
c001ebbb:	50                   	push   eax
c001ebbc:	e8 71 fa ff ff       	call   c001e632 <Vm::fpuFloatToLong(unsigned long long)>
c001ebc1:	83 c4 10             	add    esp,0x10
c001ebc4:	89 06                	mov    DWORD PTR [esi],eax
c001ebc6:	eb 63                	jmp    c001ec2b <Vm::x87Handler(regs*)+0x259>
c001ebc8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebcc:	84 d2                	test   dl,dl
c001ebce:	0f 85 e6 05 00 00    	jne    c001f1ba <Vm::x87Handler(regs*)+0x7e8>
c001ebd4:	57                   	push   edi
c001ebd5:	57                   	push   edi
c001ebd6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebd9:	ff 36                	push   DWORD PTR [esi]
c001ebdb:	e8 49 fa ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001ebe0:	5e                   	pop    esi
c001ebe1:	5f                   	pop    edi
c001ebe2:	52                   	push   edx
c001ebe3:	50                   	push   eax
c001ebe4:	e8 3a fd ff ff       	call   c001e923 <Vm::fpuPush(unsigned long long)>
c001ebe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebed:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebf0:	e9 51 fe ff ff       	jmp    c001ea46 <Vm::x87Handler(regs*)+0x74>
c001ebf5:	80 fa 03             	cmp    dl,0x3
c001ebf8:	0f 85 d7 06 00 00    	jne    c001f2d5 <Vm::x87Handler(regs*)+0x903>
c001ebfe:	57                   	push   edi
c001ebff:	57                   	push   edi
c001ec00:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec03:	ff 36                	push   DWORD PTR [esi]
c001ec05:	e8 1f fa ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001ec0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec11:	89 c6                	mov    esi,eax
c001ec13:	89 d7                	mov    edi,edx
c001ec15:	e8 7b fc ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ec1a:	57                   	push   edi
c001ec1b:	56                   	push   esi
c001ec1c:	52                   	push   edx
c001ec1d:	50                   	push   eax
c001ec1e:	e8 95 fb ff ff       	call   c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ec23:	83 c4 20             	add    esp,0x20
c001ec26:	e8 55 fd ff ff       	call   c001e980 <Vm::fpuPop()>
c001ec2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec2f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec32:	e9 12 fe ff ff       	jmp    c001ea49 <Vm::x87Handler(regs*)+0x77>
c001ec37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec3b:	8d 50 40             	lea    edx,[eax+0x40]
c001ec3e:	80 fa 07             	cmp    dl,0x7
c001ec41:	77 29                	ja     c001ec6c <Vm::x87Handler(regs*)+0x29a>
c001ec43:	83 ec 0c             	sub    esp,0xc
c001ec46:	2d c0 00 00 00       	sub    eax,0xc0
c001ec4b:	50                   	push   eax
c001ec4c:	e8 44 fc ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ec51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec58:	89 c6                	mov    esi,eax
c001ec5a:	89 d7                	mov    edi,edx
c001ec5c:	e8 34 fc ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ec61:	57                   	push   edi
c001ec62:	56                   	push   esi
c001ec63:	52                   	push   edx
c001ec64:	50                   	push   eax
c001ec65:	e8 a1 fb ff ff       	call   c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec6a:	eb 2f                	jmp    c001ec9b <Vm::x87Handler(regs*)+0x2c9>
c001ec6c:	8d 50 38             	lea    edx,[eax+0x38]
c001ec6f:	80 fa 07             	cmp    dl,0x7
c001ec72:	77 2f                	ja     c001eca3 <Vm::x87Handler(regs*)+0x2d1>
c001ec74:	83 ec 0c             	sub    esp,0xc
c001ec77:	2d c8 00 00 00       	sub    eax,0xc8
c001ec7c:	50                   	push   eax
c001ec7d:	e8 13 fc ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ec82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec89:	89 c6                	mov    esi,eax
c001ec8b:	89 d7                	mov    edi,edx
c001ec8d:	e8 03 fc ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ec92:	57                   	push   edi
c001ec93:	56                   	push   esi
c001ec94:	52                   	push   edx
c001ec95:	50                   	push   eax
c001ec96:	e8 a9 fb ff ff       	call   c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ec9b:	83 c4 1c             	add    esp,0x1c
c001ec9e:	e9 d8 fd ff ff       	jmp    c001ea7b <Vm::x87Handler(regs*)+0xa9>
c001eca3:	8d 50 30             	lea    edx,[eax+0x30]
c001eca6:	80 fa 07             	cmp    dl,0x7
c001eca9:	77 0d                	ja     c001ecb8 <Vm::x87Handler(regs*)+0x2e6>
c001ecab:	83 ec 0c             	sub    esp,0xc
c001ecae:	2d d0 00 00 00       	sub    eax,0xd0
c001ecb3:	e9 99 03 00 00       	jmp    c001f051 <Vm::x87Handler(regs*)+0x67f>
c001ecb8:	8d 50 28             	lea    edx,[eax+0x28]
c001ecbb:	80 fa 07             	cmp    dl,0x7
c001ecbe:	77 0d                	ja     c001eccd <Vm::x87Handler(regs*)+0x2fb>
c001ecc0:	83 ec 0c             	sub    esp,0xc
c001ecc3:	2d d8 00 00 00       	sub    eax,0xd8
c001ecc8:	e9 c0 03 00 00       	jmp    c001f08d <Vm::x87Handler(regs*)+0x6bb>
c001eccd:	8d 50 20             	lea    edx,[eax+0x20]
c001ecd0:	80 fa 07             	cmp    dl,0x7
c001ecd3:	77 1b                	ja     c001ecf0 <Vm::x87Handler(regs*)+0x31e>
c001ecd5:	83 ec 0c             	sub    esp,0xc
c001ecd8:	2d e0 00 00 00       	sub    eax,0xe0
c001ecdd:	50                   	push   eax
c001ecde:	e8 b2 fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ece3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecea:	89 c6                	mov    esi,eax
c001ecec:	89 d7                	mov    edi,edx
c001ecee:	eb 22                	jmp    c001ed12 <Vm::x87Handler(regs*)+0x340>
c001ecf0:	8d 50 18             	lea    edx,[eax+0x18]
c001ecf3:	80 fa 07             	cmp    dl,0x7
c001ecf6:	77 2d                	ja     c001ed25 <Vm::x87Handler(regs*)+0x353>
c001ecf8:	83 ec 0c             	sub    esp,0xc
c001ecfb:	6a 00                	push   0x0
c001ecfd:	e8 93 fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed02:	89 c6                	mov    esi,eax
c001ed04:	89 d7                	mov    edi,edx
c001ed06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed0a:	2d e8 00 00 00       	sub    eax,0xe8
c001ed0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed12:	e8 7e fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed17:	57                   	push   edi
c001ed18:	56                   	push   esi
c001ed19:	52                   	push   edx
c001ed1a:	50                   	push   eax
c001ed1b:	e8 15 fb ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed20:	e9 76 ff ff ff       	jmp    c001ec9b <Vm::x87Handler(regs*)+0x2c9>
c001ed25:	8d 50 10             	lea    edx,[eax+0x10]
c001ed28:	80 fa 07             	cmp    dl,0x7
c001ed2b:	77 1b                	ja     c001ed48 <Vm::x87Handler(regs*)+0x376>
c001ed2d:	83 ec 0c             	sub    esp,0xc
c001ed30:	2d f0 00 00 00       	sub    eax,0xf0
c001ed35:	50                   	push   eax
c001ed36:	e8 5a fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed42:	89 c6                	mov    esi,eax
c001ed44:	89 d7                	mov    edi,edx
c001ed46:	eb 22                	jmp    c001ed6a <Vm::x87Handler(regs*)+0x398>
c001ed48:	3c f7                	cmp    al,0xf7
c001ed4a:	0f 86 d1 03 00 00    	jbe    c001f121 <Vm::x87Handler(regs*)+0x74f>
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	6a 00                	push   0x0
c001ed55:	e8 3b fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed5a:	89 c6                	mov    esi,eax
c001ed5c:	89 d7                	mov    edi,edx
c001ed5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed62:	2d f8 00 00 00       	sub    eax,0xf8
c001ed67:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed6a:	e8 26 fb ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed6f:	57                   	push   edi
c001ed70:	56                   	push   esi
c001ed71:	52                   	push   edx
c001ed72:	50                   	push   eax
c001ed73:	e8 eb fa ff ff       	call   c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ed78:	83 c4 1c             	add    esp,0x1c
c001ed7b:	52                   	push   edx
c001ed7c:	50                   	push   eax
c001ed7d:	6a 00                	push   0x0
c001ed7f:	e9 51 02 00 00       	jmp    c001efd5 <Vm::x87Handler(regs*)+0x603>
c001ed84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed88:	8d 50 40             	lea    edx,[eax+0x40]
c001ed8b:	80 fa 07             	cmp    dl,0x7
c001ed8e:	77 37                	ja     c001edc7 <Vm::x87Handler(regs*)+0x3f5>
c001ed90:	83 ec 0c             	sub    esp,0xc
c001ed93:	2d c0 00 00 00       	sub    eax,0xc0
c001ed98:	50                   	push   eax
c001ed99:	e8 f7 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ed9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eda5:	89 c6                	mov    esi,eax
c001eda7:	89 d7                	mov    edi,edx
c001eda9:	e8 e7 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001edae:	57                   	push   edi
c001edaf:	56                   	push   esi
c001edb0:	52                   	push   edx
c001edb1:	50                   	push   eax
c001edb2:	e8 54 fa ff ff       	call   c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001edb7:	83 c4 1c             	add    esp,0x1c
c001edba:	52                   	push   edx
c001edbb:	50                   	push   eax
c001edbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edc0:	2d c0 00 00 00       	sub    eax,0xc0
c001edc5:	eb 3d                	jmp    c001ee04 <Vm::x87Handler(regs*)+0x432>
c001edc7:	8d 50 38             	lea    edx,[eax+0x38]
c001edca:	80 fa 07             	cmp    dl,0x7
c001edcd:	77 3b                	ja     c001ee0a <Vm::x87Handler(regs*)+0x438>
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	2d c8 00 00 00       	sub    eax,0xc8
c001edd7:	50                   	push   eax
c001edd8:	e8 b8 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eddd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ede4:	89 c6                	mov    esi,eax
c001ede6:	89 d7                	mov    edi,edx
c001ede8:	e8 a8 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eded:	57                   	push   edi
c001edee:	56                   	push   esi
c001edef:	52                   	push   edx
c001edf0:	50                   	push   eax
c001edf1:	e8 4e fa ff ff       	call   c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001edf6:	83 c4 1c             	add    esp,0x1c
c001edf9:	52                   	push   edx
c001edfa:	50                   	push   eax
c001edfb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edff:	2d c8 00 00 00       	sub    eax,0xc8
c001ee04:	50                   	push   eax
c001ee05:	e9 75 fc ff ff       	jmp    c001ea7f <Vm::x87Handler(regs*)+0xad>
c001ee0a:	83 c0 18             	add    eax,0x18
c001ee0d:	3c 07                	cmp    al,0x7
c001ee0f:	0f 87 3b 04 00 00    	ja     c001f250 <Vm::x87Handler(regs*)+0x87e>
c001ee15:	83 ec 0c             	sub    esp,0xc
c001ee18:	6a 00                	push   0x0
c001ee1a:	e8 76 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ee1f:	89 c6                	mov    esi,eax
c001ee21:	89 d7                	mov    edi,edx
c001ee23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee27:	2d e8 00 00 00       	sub    eax,0xe8
c001ee2c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee2f:	e8 61 fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ee34:	57                   	push   edi
c001ee35:	56                   	push   esi
c001ee36:	52                   	push   edx
c001ee37:	50                   	push   eax
c001ee38:	e8 f8 f9 ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee3d:	83 c4 1c             	add    esp,0x1c
c001ee40:	52                   	push   edx
c001ee41:	50                   	push   eax
c001ee42:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee46:	2d e8 00 00 00       	sub    eax,0xe8
c001ee4b:	eb b7                	jmp    c001ee04 <Vm::x87Handler(regs*)+0x432>
c001ee4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee51:	8d 50 40             	lea    edx,[eax+0x40]
c001ee54:	80 fa 07             	cmp    dl,0x7
c001ee57:	77 3a                	ja     c001ee93 <Vm::x87Handler(regs*)+0x4c1>
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	2d c0 00 00 00       	sub    eax,0xc0
c001ee61:	50                   	push   eax
c001ee62:	e8 2e fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ee67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee6e:	89 c6                	mov    esi,eax
c001ee70:	89 d7                	mov    edi,edx
c001ee72:	e8 1e fa ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ee77:	57                   	push   edi
c001ee78:	56                   	push   esi
c001ee79:	52                   	push   edx
c001ee7a:	50                   	push   eax
c001ee7b:	e8 8b f9 ff ff       	call   c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee80:	83 c4 1c             	add    esp,0x1c
c001ee83:	52                   	push   edx
c001ee84:	50                   	push   eax
c001ee85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee89:	2d c0 00 00 00       	sub    eax,0xc0
c001ee8e:	e9 9e 01 00 00       	jmp    c001f031 <Vm::x87Handler(regs*)+0x65f>
c001ee93:	8d 50 20             	lea    edx,[eax+0x20]
c001ee96:	80 fa 07             	cmp    dl,0x7
c001ee99:	77 3a                	ja     c001eed5 <Vm::x87Handler(regs*)+0x503>
c001ee9b:	83 ec 0c             	sub    esp,0xc
c001ee9e:	2d e0 00 00 00       	sub    eax,0xe0
c001eea3:	50                   	push   eax
c001eea4:	e8 ec f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eea9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eeb0:	89 c6                	mov    esi,eax
c001eeb2:	89 d7                	mov    edi,edx
c001eeb4:	e8 dc f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eeb9:	57                   	push   edi
c001eeba:	56                   	push   esi
c001eebb:	52                   	push   edx
c001eebc:	50                   	push   eax
c001eebd:	e8 73 f9 ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eec2:	83 c4 1c             	add    esp,0x1c
c001eec5:	52                   	push   edx
c001eec6:	50                   	push   eax
c001eec7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eecb:	2d e0 00 00 00       	sub    eax,0xe0
c001eed0:	e9 5c 01 00 00       	jmp    c001f031 <Vm::x87Handler(regs*)+0x65f>
c001eed5:	8d 50 18             	lea    edx,[eax+0x18]
c001eed8:	80 fa 07             	cmp    dl,0x7
c001eedb:	77 3b                	ja     c001ef18 <Vm::x87Handler(regs*)+0x546>
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	6a 00                	push   0x0
c001eee2:	e8 ae f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eee7:	89 c6                	mov    esi,eax
c001eee9:	89 d7                	mov    edi,edx
c001eeeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeef:	2d e8 00 00 00       	sub    eax,0xe8
c001eef4:	89 04 24             	mov    DWORD PTR [esp],eax
c001eef7:	e8 99 f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001eefc:	57                   	push   edi
c001eefd:	56                   	push   esi
c001eefe:	52                   	push   edx
c001eeff:	50                   	push   eax
c001ef00:	e8 30 f9 ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef05:	83 c4 1c             	add    esp,0x1c
c001ef08:	52                   	push   edx
c001ef09:	50                   	push   eax
c001ef0a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0e:	2d e8 00 00 00       	sub    eax,0xe8
c001ef13:	e9 19 01 00 00       	jmp    c001f031 <Vm::x87Handler(regs*)+0x65f>
c001ef18:	8d 50 38             	lea    edx,[eax+0x38]
c001ef1b:	80 fa 07             	cmp    dl,0x7
c001ef1e:	77 37                	ja     c001ef57 <Vm::x87Handler(regs*)+0x585>
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	2d c8 00 00 00       	sub    eax,0xc8
c001ef28:	50                   	push   eax
c001ef29:	e8 67 f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ef2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef35:	89 c6                	mov    esi,eax
c001ef37:	89 d7                	mov    edi,edx
c001ef39:	e8 57 f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ef3e:	57                   	push   edi
c001ef3f:	56                   	push   esi
c001ef40:	52                   	push   edx
c001ef41:	50                   	push   eax
c001ef42:	e8 fd f8 ff ff       	call   c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef47:	83 c4 1c             	add    esp,0x1c
c001ef4a:	52                   	push   edx
c001ef4b:	50                   	push   eax
c001ef4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef50:	2d c8 00 00 00       	sub    eax,0xc8
c001ef55:	eb 7d                	jmp    c001efd4 <Vm::x87Handler(regs*)+0x602>
c001ef57:	3c f7                	cmp    al,0xf7
c001ef59:	76 38                	jbe    c001ef93 <Vm::x87Handler(regs*)+0x5c1>
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	6a 00                	push   0x0
c001ef60:	e8 30 f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ef65:	89 c6                	mov    esi,eax
c001ef67:	89 d7                	mov    edi,edx
c001ef69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef6d:	2d f8 00 00 00       	sub    eax,0xf8
c001ef72:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef75:	e8 1b f9 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001ef7a:	57                   	push   edi
c001ef7b:	56                   	push   esi
c001ef7c:	52                   	push   edx
c001ef7d:	50                   	push   eax
c001ef7e:	e8 e0 f8 ff ff       	call   c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef83:	83 c4 1c             	add    esp,0x1c
c001ef86:	52                   	push   edx
c001ef87:	50                   	push   eax
c001ef88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef8c:	2d f8 00 00 00       	sub    eax,0xf8
c001ef91:	eb 41                	jmp    c001efd4 <Vm::x87Handler(regs*)+0x602>
c001ef93:	8d 50 10             	lea    edx,[eax+0x10]
c001ef96:	80 fa 07             	cmp    dl,0x7
c001ef99:	0f 87 5a 01 00 00    	ja     c001f0f9 <Vm::x87Handler(regs*)+0x727>
c001ef9f:	83 ec 0c             	sub    esp,0xc
c001efa2:	2d f0 00 00 00       	sub    eax,0xf0
c001efa7:	50                   	push   eax
c001efa8:	e8 e8 f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001efad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efb4:	89 c6                	mov    esi,eax
c001efb6:	89 d7                	mov    edi,edx
c001efb8:	e8 d8 f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001efbd:	57                   	push   edi
c001efbe:	56                   	push   esi
c001efbf:	52                   	push   edx
c001efc0:	50                   	push   eax
c001efc1:	e8 9d f8 ff ff       	call   c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efc6:	83 c4 1c             	add    esp,0x1c
c001efc9:	52                   	push   edx
c001efca:	50                   	push   eax
c001efcb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efcf:	2d f0 00 00 00       	sub    eax,0xf0
c001efd4:	50                   	push   eax
c001efd5:	e8 fe f8 ff ff       	call   c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>
c001efda:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efde:	e8 9d f9 ff ff       	call   c001e980 <Vm::fpuPop()>
c001efe3:	e9 5e fa ff ff       	jmp    c001ea46 <Vm::x87Handler(regs*)+0x74>
c001efe8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efec:	8d 50 30             	lea    edx,[eax+0x30]
c001efef:	80 fa 07             	cmp    dl,0x7
c001eff2:	77 1d                	ja     c001f011 <Vm::x87Handler(regs*)+0x63f>
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	6a 00                	push   0x0
c001eff9:	e8 97 f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001effe:	83 c4 0c             	add    esp,0xc
c001f001:	52                   	push   edx
c001f002:	50                   	push   eax
c001f003:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f007:	2d d0 00 00 00       	sub    eax,0xd0
c001f00c:	e9 f3 fd ff ff       	jmp    c001ee04 <Vm::x87Handler(regs*)+0x432>
c001f011:	8d 50 28             	lea    edx,[eax+0x28]
c001f014:	80 fa 07             	cmp    dl,0x7
c001f017:	77 28                	ja     c001f041 <Vm::x87Handler(regs*)+0x66f>
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	6a 00                	push   0x0
c001f01e:	e8 72 f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f023:	83 c4 0c             	add    esp,0xc
c001f026:	52                   	push   edx
c001f027:	50                   	push   eax
c001f028:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f02c:	2d d8 00 00 00       	sub    eax,0xd8
c001f031:	50                   	push   eax
c001f032:	e8 a1 f8 ff ff       	call   c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>
c001f037:	e8 44 f9 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f03c:	e9 01 fa ff ff       	jmp    c001ea42 <Vm::x87Handler(regs*)+0x70>
c001f041:	8d 50 20             	lea    edx,[eax+0x20]
c001f044:	80 fa 07             	cmp    dl,0x7
c001f047:	77 30                	ja     c001f079 <Vm::x87Handler(regs*)+0x6a7>
c001f049:	83 ec 0c             	sub    esp,0xc
c001f04c:	2d e0 00 00 00       	sub    eax,0xe0
c001f051:	50                   	push   eax
c001f052:	e8 3e f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f057:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f05e:	89 c6                	mov    esi,eax
c001f060:	89 d7                	mov    edi,edx
c001f062:	e8 2e f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f067:	57                   	push   edi
c001f068:	56                   	push   esi
c001f069:	52                   	push   edx
c001f06a:	50                   	push   eax
c001f06b:	e8 48 f7 ff ff       	call   c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f070:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f074:	e9 54 02 00 00       	jmp    c001f2cd <Vm::x87Handler(regs*)+0x8fb>
c001f079:	8d 50 18             	lea    edx,[eax+0x18]
c001f07c:	80 fa 07             	cmp    dl,0x7
c001f07f:	0f 87 43 fb ff ff    	ja     c001ebc8 <Vm::x87Handler(regs*)+0x1f6>
c001f085:	83 ec 0c             	sub    esp,0xc
c001f088:	2d e8 00 00 00       	sub    eax,0xe8
c001f08d:	50                   	push   eax
c001f08e:	e8 02 f8 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f093:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f09a:	89 c6                	mov    esi,eax
c001f09c:	89 d7                	mov    edi,edx
c001f09e:	e8 f2 f7 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f0a3:	57                   	push   edi
c001f0a4:	56                   	push   esi
c001f0a5:	52                   	push   edx
c001f0a6:	50                   	push   eax
c001f0a7:	e8 0c f7 ff ff       	call   c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0ac:	83 c4 20             	add    esp,0x20
c001f0af:	e8 cc f8 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f0b4:	eb 62                	jmp    c001f118 <Vm::x87Handler(regs*)+0x746>
c001f0b6:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f0ba:	0f 85 0f 01 00 00    	jne    c001f1cf <Vm::x87Handler(regs*)+0x7fd>
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	6a 01                	push   0x1
c001f0c5:	e8 cb f7 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f0ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0d1:	89 c6                	mov    esi,eax
c001f0d3:	89 d7                	mov    edi,edx
c001f0d5:	e8 bb f7 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f0da:	57                   	push   edi
c001f0db:	56                   	push   esi
c001f0dc:	52                   	push   edx
c001f0dd:	50                   	push   eax
c001f0de:	e8 d5 f6 ff ff       	call   c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0e3:	83 c4 20             	add    esp,0x20
c001f0e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0ea:	e8 91 f8 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f0ef:	e8 8c f8 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f0f4:	e9 50 f9 ff ff       	jmp    c001ea49 <Vm::x87Handler(regs*)+0x77>
c001f0f9:	3c d9                	cmp    al,0xd9
c001f0fb:	0f 85 b5 02 00 00    	jne    c001f3b6 <Vm::x87Handler(regs*)+0x9e4>
c001f101:	eb bd                	jmp    c001f0c0 <Vm::x87Handler(regs*)+0x6ee>
c001f103:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f107:	0f 85 ea 02 00 00    	jne    c001f3f7 <Vm::x87Handler(regs*)+0xa25>
c001f10d:	0f b7 05 20 df 02 c0 	movzx  eax,WORD PTR ds:0xc002df20
c001f114:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f118:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f11c:	e9 28 f9 ff ff       	jmp    c001ea49 <Vm::x87Handler(regs*)+0x77>
c001f121:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f125:	84 d2                	test   dl,dl
c001f127:	75 0f                	jne    c001f138 <Vm::x87Handler(regs*)+0x766>
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	ff 36                	push   DWORD PTR [esi]
c001f12e:	e8 b1 f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f133:	e9 2c 01 00 00       	jmp    c001f264 <Vm::x87Handler(regs*)+0x892>
c001f138:	80 fa 01             	cmp    dl,0x1
c001f13b:	75 0f                	jne    c001f14c <Vm::x87Handler(regs*)+0x77a>
c001f13d:	83 ec 0c             	sub    esp,0xc
c001f140:	ff 36                	push   DWORD PTR [esi]
c001f142:	e8 9d f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f147:	e9 81 02 00 00       	jmp    c001f3cd <Vm::x87Handler(regs*)+0x9fb>
c001f14c:	80 fa 04             	cmp    dl,0x4
c001f14f:	75 0f                	jne    c001f160 <Vm::x87Handler(regs*)+0x78e>
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	ff 36                	push   DWORD PTR [esi]
c001f156:	e8 89 f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f15b:	e9 86 01 00 00       	jmp    c001f2e6 <Vm::x87Handler(regs*)+0x914>
c001f160:	80 fa 05             	cmp    dl,0x5
c001f163:	75 1b                	jne    c001f180 <Vm::x87Handler(regs*)+0x7ae>
c001f165:	83 ec 0c             	sub    esp,0xc
c001f168:	6a 00                	push   0x0
c001f16a:	e8 26 f7 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f16f:	89 c7                	mov    edi,eax
c001f171:	89 d5                	mov    ebp,edx
c001f173:	58                   	pop    eax
c001f174:	ff 36                	push   DWORD PTR [esi]
c001f176:	e8 69 f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f17b:	e9 a3 01 00 00       	jmp    c001f323 <Vm::x87Handler(regs*)+0x951>
c001f180:	80 fa 06             	cmp    dl,0x6
c001f183:	75 0f                	jne    c001f194 <Vm::x87Handler(regs*)+0x7c2>
c001f185:	83 ec 0c             	sub    esp,0xc
c001f188:	ff 36                	push   DWORD PTR [esi]
c001f18a:	e8 55 f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f18f:	e9 ae 01 00 00       	jmp    c001f342 <Vm::x87Handler(regs*)+0x970>
c001f194:	31 c0                	xor    eax,eax
c001f196:	80 fa 07             	cmp    dl,0x7
c001f199:	0f 85 94 02 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	6a 00                	push   0x0
c001f1a4:	e8 ec f6 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f1a9:	89 c7                	mov    edi,eax
c001f1ab:	89 d5                	mov    ebp,edx
c001f1ad:	58                   	pop    eax
c001f1ae:	ff 36                	push   DWORD PTR [esi]
c001f1b0:	e8 2f f4 ff ff       	call   c001e5e4 <Vm::fpu32ToInternal(unsigned int)>
c001f1b5:	e9 cb 01 00 00       	jmp    c001f385 <Vm::x87Handler(regs*)+0x9b3>
c001f1ba:	80 fa 03             	cmp    dl,0x3
c001f1bd:	0f 85 d3 01 00 00    	jne    c001f396 <Vm::x87Handler(regs*)+0x9c4>
c001f1c3:	e8 b8 f7 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f1c8:	51                   	push   ecx
c001f1c9:	51                   	push   ecx
c001f1ca:	e9 de 01 00 00       	jmp    c001f3ad <Vm::x87Handler(regs*)+0x9db>
c001f1cf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1d3:	80 fa 01             	cmp    dl,0x1
c001f1d6:	75 09                	jne    c001f1e1 <Vm::x87Handler(regs*)+0x80f>
c001f1d8:	57                   	push   edi
c001f1d9:	57                   	push   edi
c001f1da:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1dc:	e9 e3 01 00 00       	jmp    c001f3c4 <Vm::x87Handler(regs*)+0x9f2>
c001f1e1:	80 fa 04             	cmp    dl,0x4
c001f1e4:	75 12                	jne    c001f1f8 <Vm::x87Handler(regs*)+0x826>
c001f1e6:	31 d2                	xor    edx,edx
c001f1e8:	51                   	push   ecx
c001f1e9:	51                   	push   ecx
c001f1ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1ec:	52                   	push   edx
c001f1ed:	50                   	push   eax
c001f1ee:	e8 d0 f4 ff ff       	call   c001e6c3 <Vm::fpuLongToFloat(long long)>
c001f1f3:	e9 ee 00 00 00       	jmp    c001f2e6 <Vm::x87Handler(regs*)+0x914>
c001f1f8:	31 c0                	xor    eax,eax
c001f1fa:	80 fa 07             	cmp    dl,0x7
c001f1fd:	0f 85 30 02 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f203:	83 ec 0c             	sub    esp,0xc
c001f206:	6a 00                	push   0x0
c001f208:	e8 88 f6 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f20d:	89 c7                	mov    edi,eax
c001f20f:	89 d5                	mov    ebp,edx
c001f211:	58                   	pop    eax
c001f212:	8b 06                	mov    eax,DWORD PTR [esi]
c001f214:	5a                   	pop    edx
c001f215:	31 d2                	xor    edx,edx
c001f217:	52                   	push   edx
c001f218:	50                   	push   eax
c001f219:	e8 a5 f4 ff ff       	call   c001e6c3 <Vm::fpuLongToFloat(long long)>
c001f21e:	e9 62 01 00 00       	jmp    c001f385 <Vm::x87Handler(regs*)+0x9b3>
c001f223:	84 d2                	test   dl,dl
c001f225:	75 0d                	jne    c001f234 <Vm::x87Handler(regs*)+0x862>
c001f227:	31 d2                	xor    edx,edx
c001f229:	55                   	push   ebp
c001f22a:	55                   	push   ebp
c001f22b:	8b 06                	mov    eax,DWORD PTR [esi]
c001f22d:	52                   	push   edx
c001f22e:	50                   	push   eax
c001f22f:	e9 d3 01 00 00       	jmp    c001f407 <Vm::x87Handler(regs*)+0xa35>
c001f234:	31 c0                	xor    eax,eax
c001f236:	80 fa 02             	cmp    dl,0x2
c001f239:	0f 85 f4 01 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f23f:	83 ec 0c             	sub    esp,0xc
c001f242:	6a 00                	push   0x0
c001f244:	e8 4c f6 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f249:	59                   	pop    ecx
c001f24a:	5f                   	pop    edi
c001f24b:	e9 6a f9 ff ff       	jmp    c001ebba <Vm::x87Handler(regs*)+0x1e8>
c001f250:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f254:	84 d2                	test   dl,dl
c001f256:	75 2a                	jne    c001f282 <Vm::x87Handler(regs*)+0x8b0>
c001f258:	50                   	push   eax
c001f259:	50                   	push   eax
c001f25a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f25d:	ff 36                	push   DWORD PTR [esi]
c001f25f:	e8 c5 f3 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f264:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f26b:	89 c6                	mov    esi,eax
c001f26d:	89 d7                	mov    edi,edx
c001f26f:	e8 21 f6 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f274:	57                   	push   edi
c001f275:	56                   	push   esi
c001f276:	52                   	push   edx
c001f277:	50                   	push   eax
c001f278:	e8 8e f5 ff ff       	call   c001e80b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f27d:	e9 64 01 00 00       	jmp    c001f3e6 <Vm::x87Handler(regs*)+0xa14>
c001f282:	80 fa 01             	cmp    dl,0x1
c001f285:	75 11                	jne    c001f298 <Vm::x87Handler(regs*)+0x8c6>
c001f287:	50                   	push   eax
c001f288:	50                   	push   eax
c001f289:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f28c:	ff 36                	push   DWORD PTR [esi]
c001f28e:	e8 96 f3 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f293:	e9 35 01 00 00       	jmp    c001f3cd <Vm::x87Handler(regs*)+0x9fb>
c001f298:	80 fa 02             	cmp    dl,0x2
c001f29b:	0f 85 54 f9 ff ff    	jne    c001ebf5 <Vm::x87Handler(regs*)+0x223>
c001f2a1:	55                   	push   ebp
c001f2a2:	55                   	push   ebp
c001f2a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2a6:	ff 36                	push   DWORD PTR [esi]
c001f2a8:	e8 7c f3 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f2ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2b4:	89 c6                	mov    esi,eax
c001f2b6:	89 d7                	mov    edi,edx
c001f2b8:	e8 d8 f5 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f2bd:	57                   	push   edi
c001f2be:	56                   	push   esi
c001f2bf:	52                   	push   edx
c001f2c0:	50                   	push   eax
c001f2c1:	e8 f2 f4 ff ff       	call   c001e7b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2ca:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f2cd:	83 c4 20             	add    esp,0x20
c001f2d0:	e9 74 f7 ff ff       	jmp    c001ea49 <Vm::x87Handler(regs*)+0x77>
c001f2d5:	80 fa 04             	cmp    dl,0x4
c001f2d8:	75 2a                	jne    c001f304 <Vm::x87Handler(regs*)+0x932>
c001f2da:	51                   	push   ecx
c001f2db:	51                   	push   ecx
c001f2dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2df:	ff 36                	push   DWORD PTR [esi]
c001f2e1:	e8 43 f3 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f2e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2ed:	89 c6                	mov    esi,eax
c001f2ef:	89 d7                	mov    edi,edx
c001f2f1:	e8 9f f5 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f2f6:	57                   	push   edi
c001f2f7:	56                   	push   esi
c001f2f8:	52                   	push   edx
c001f2f9:	50                   	push   eax
c001f2fa:	e8 36 f5 ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2ff:	e9 e2 00 00 00       	jmp    c001f3e6 <Vm::x87Handler(regs*)+0xa14>
c001f304:	80 fa 05             	cmp    dl,0x5
c001f307:	75 28                	jne    c001f331 <Vm::x87Handler(regs*)+0x95f>
c001f309:	83 ec 0c             	sub    esp,0xc
c001f30c:	6a 00                	push   0x0
c001f30e:	e8 82 f5 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f313:	89 c7                	mov    edi,eax
c001f315:	89 d5                	mov    ebp,edx
c001f317:	58                   	pop    eax
c001f318:	5a                   	pop    edx
c001f319:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f31c:	ff 36                	push   DWORD PTR [esi]
c001f31e:	e8 06 f3 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f323:	83 c4 10             	add    esp,0x10
c001f326:	55                   	push   ebp
c001f327:	57                   	push   edi
c001f328:	52                   	push   edx
c001f329:	50                   	push   eax
c001f32a:	e8 06 f5 ff ff       	call   c001e835 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f32f:	eb 60                	jmp    c001f391 <Vm::x87Handler(regs*)+0x9bf>
c001f331:	80 fa 06             	cmp    dl,0x6
c001f334:	75 2a                	jne    c001f360 <Vm::x87Handler(regs*)+0x98e>
c001f336:	51                   	push   ecx
c001f337:	51                   	push   ecx
c001f338:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f33b:	ff 36                	push   DWORD PTR [esi]
c001f33d:	e8 e7 f2 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f342:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f349:	89 c6                	mov    esi,eax
c001f34b:	89 d7                	mov    edi,edx
c001f34d:	e8 43 f5 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f352:	57                   	push   edi
c001f353:	56                   	push   esi
c001f354:	52                   	push   edx
c001f355:	50                   	push   eax
c001f356:	e8 08 f5 ff ff       	call   c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f35b:	e9 86 00 00 00       	jmp    c001f3e6 <Vm::x87Handler(regs*)+0xa14>
c001f360:	31 c0                	xor    eax,eax
c001f362:	80 fa 07             	cmp    dl,0x7
c001f365:	0f 85 c8 00 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f36b:	83 ec 0c             	sub    esp,0xc
c001f36e:	6a 00                	push   0x0
c001f370:	e8 20 f5 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f375:	89 c7                	mov    edi,eax
c001f377:	89 d5                	mov    ebp,edx
c001f379:	58                   	pop    eax
c001f37a:	5a                   	pop    edx
c001f37b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f37e:	ff 36                	push   DWORD PTR [esi]
c001f380:	e8 a4 f2 ff ff       	call   c001e629 <Vm::fpu64ToInternal(unsigned long long)>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	55                   	push   ebp
c001f389:	57                   	push   edi
c001f38a:	52                   	push   edx
c001f38b:	50                   	push   eax
c001f38c:	e8 d2 f4 ff ff       	call   c001e863 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f391:	83 c4 0c             	add    esp,0xc
c001f394:	eb 53                	jmp    c001f3e9 <Vm::x87Handler(regs*)+0xa17>
c001f396:	31 c0                	xor    eax,eax
c001f398:	80 fa 02             	cmp    dl,0x2
c001f39b:	0f 85 92 00 00 00    	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f3a1:	83 ec 0c             	sub    esp,0xc
c001f3a4:	6a 00                	push   0x0
c001f3a6:	e8 ea f4 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f3ab:	59                   	pop    ecx
c001f3ac:	5f                   	pop    edi
c001f3ad:	52                   	push   edx
c001f3ae:	50                   	push   eax
c001f3af:	e8 27 f2 ff ff       	call   c001e5db <Vm::fpuInternalTo64(unsigned long long)>
c001f3b4:	eb 70                	jmp    c001f426 <Vm::x87Handler(regs*)+0xa54>
c001f3b6:	31 c0                	xor    eax,eax
c001f3b8:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f3bd:	75 74                	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f3bf:	50                   	push   eax
c001f3c0:	50                   	push   eax
c001f3c1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f3c4:	31 d2                	xor    edx,edx
c001f3c6:	52                   	push   edx
c001f3c7:	50                   	push   eax
c001f3c8:	e8 f6 f2 ff ff       	call   c001e6c3 <Vm::fpuLongToFloat(long long)>
c001f3cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3d4:	89 c6                	mov    esi,eax
c001f3d6:	89 d7                	mov    edi,edx
c001f3d8:	e8 b8 f4 ff ff       	call   c001e895 <Vm::fpuGetReg(int)>
c001f3dd:	57                   	push   edi
c001f3de:	56                   	push   esi
c001f3df:	52                   	push   edx
c001f3e0:	50                   	push   eax
c001f3e1:	e8 5e f4 ff ff       	call   c001e844 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3e6:	83 c4 1c             	add    esp,0x1c
c001f3e9:	52                   	push   edx
c001f3ea:	50                   	push   eax
c001f3eb:	6a 00                	push   0x0
c001f3ed:	e8 e6 f4 ff ff       	call   c001e8d8 <Vm::fpuSetReg(int, unsigned long long)>
c001f3f2:	e9 f2 f7 ff ff       	jmp    c001ebe9 <Vm::x87Handler(regs*)+0x217>
c001f3f7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3fb:	80 fa 05             	cmp    dl,0x5
c001f3fe:	75 11                	jne    c001f411 <Vm::x87Handler(regs*)+0xa3f>
c001f400:	55                   	push   ebp
c001f401:	55                   	push   ebp
c001f402:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f405:	ff 36                	push   DWORD PTR [esi]
c001f407:	e8 81 f2 ff ff       	call   c001e68d <Vm::fpuULongToFloat(unsigned long long)>
c001f40c:	e9 cf f7 ff ff       	jmp    c001ebe0 <Vm::x87Handler(regs*)+0x20e>
c001f411:	31 c0                	xor    eax,eax
c001f413:	80 fa 07             	cmp    dl,0x7
c001f416:	75 1b                	jne    c001f433 <Vm::x87Handler(regs*)+0xa61>
c001f418:	e8 63 f5 ff ff       	call   c001e980 <Vm::fpuPop()>
c001f41d:	51                   	push   ecx
c001f41e:	51                   	push   ecx
c001f41f:	52                   	push   edx
c001f420:	50                   	push   eax
c001f421:	e8 0c f2 ff ff       	call   c001e632 <Vm::fpuFloatToLong(unsigned long long)>
c001f426:	83 c4 10             	add    esp,0x10
c001f429:	89 06                	mov    DWORD PTR [esi],eax
c001f42b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f42e:	e9 f8 f7 ff ff       	jmp    c001ec2b <Vm::x87Handler(regs*)+0x259>
c001f433:	83 c4 1c             	add    esp,0x1c
c001f436:	5b                   	pop    ebx
c001f437:	5e                   	pop    esi
c001f438:	5f                   	pop    edi
c001f439:	5d                   	pop    ebp
c001f43a:	c3                   	ret    

c001f43b <__static_initialization_and_destruction_0(int, int)>:
c001f43b:	83 ec 0c             	sub    esp,0xc
c001f43e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f443:	75 1a                	jne    c001f45f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f445:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f44d:	75 10                	jne    c001f45f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f44f:	83 ec 0c             	sub    esp,0xc
c001f452:	68 20 df 02 c0       	push   0xc002df20
c001f457:	e8 c4 82 00 00       	call   c0027720 <Vm::_FPUState::_FPUState()>
c001f45c:	83 c4 10             	add    esp,0x10
c001f45f:	90                   	nop
c001f460:	83 c4 0c             	add    esp,0xc
c001f463:	c3                   	ret    

c001f464 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	83 ec 08             	sub    esp,0x8
c001f46a:	68 ff ff 00 00       	push   0xffff
c001f46f:	6a 01                	push   0x1
c001f471:	e8 c5 ff ff ff       	call   c001f43b <__static_initialization_and_destruction_0(int, int)>
c001f476:	83 c4 10             	add    esp,0x10
c001f479:	83 c4 0c             	add    esp,0xc
c001f47c:	c3                   	ret    
c001f47d:	90                   	nop

c001f47e <FAT::getName()>:
c001f47e:	b8 ac ad 02 c0       	mov    eax,0xc002adac
c001f483:	c3                   	ret    

c001f484 <FAT::tell(void*, unsigned long long*)>:
c001f484:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f489:	75 06                	jne    c001f491 <FAT::tell(void*, unsigned long long*)+0xd>
c001f48b:	b8 04 00 00 00       	mov    eax,0x4
c001f490:	c3                   	ret    
c001f491:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f496:	75 06                	jne    c001f49e <FAT::tell(void*, unsigned long long*)+0x1a>
c001f498:	b8 04 00 00 00       	mov    eax,0x4
c001f49d:	c3                   	ret    
c001f49e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4a2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f4a5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f4a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4ac:	89 01                	mov    DWORD PTR [ecx],eax
c001f4ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4b1:	b8 00 00 00 00       	mov    eax,0x0
c001f4b6:	c3                   	ret    
c001f4b7:	90                   	nop

c001f4b8 <FAT::stat(void*, unsigned long long*)>:
c001f4b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f4bd:	75 06                	jne    c001f4c5 <FAT::stat(void*, unsigned long long*)+0xd>
c001f4bf:	b8 04 00 00 00       	mov    eax,0x4
c001f4c4:	c3                   	ret    
c001f4c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4ca:	75 06                	jne    c001f4d2 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f4cc:	b8 04 00 00 00       	mov    eax,0x4
c001f4d1:	c3                   	ret    
c001f4d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4d6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f4d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f4dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4e0:	89 01                	mov    DWORD PTR [ecx],eax
c001f4e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4e5:	b8 00 00 00 00       	mov    eax,0x0
c001f4ea:	c3                   	ret    
c001f4eb:	90                   	nop

c001f4ec <FAT::~FAT()>:
c001f4ec:	83 ec 0c             	sub    esp,0xc
c001f4ef:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001f4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f8:	89 10                	mov    DWORD PTR [eax],edx
c001f4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fe:	83 ec 0c             	sub    esp,0xc
c001f501:	50                   	push   eax
c001f502:	e8 b7 35 ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	90                   	nop
c001f50b:	83 c4 0c             	add    esp,0xc
c001f50e:	c3                   	ret    
c001f50f:	90                   	nop

c001f510 <FAT::~FAT()>:
c001f510:	83 ec 0c             	sub    esp,0xc
c001f513:	83 ec 0c             	sub    esp,0xc
c001f516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f51a:	e8 cd ff ff ff       	call   c001f4ec <FAT::~FAT()>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	83 ec 08             	sub    esp,0x8
c001f525:	6a 08                	push   0x8
c001f527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f52b:	e8 85 31 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c001f530:	83 c4 10             	add    esp,0x10
c001f533:	83 c4 0c             	add    esp,0xc
c001f536:	c3                   	ret    
c001f537:	90                   	nop

c001f538 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f538:	83 ec 1c             	sub    esp,0x1c
c001f53b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f542:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f54b:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f552:	83 f8 ff             	cmp    eax,0xffffffff
c001f555:	75 34                	jne    c001f58b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f557:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f55b:	88 c2                	mov    dl,al
c001f55d:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f562:	01 d0                	add    eax,edx
c001f564:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f568:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f56e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f572:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f579:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f57e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f582:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f589:	eb 17                	jmp    c001f5a2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f58b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f58f:	88 c2                	mov    dl,al
c001f591:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f595:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f59c:	01 d0                	add    eax,edx
c001f59e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f5a2:	83 ec 04             	sub    esp,0x4
c001f5a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f5a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f5ad:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f5b1:	50                   	push   eax
c001f5b2:	e8 31 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f5c3:	75 07                	jne    c001f5cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f5c5:	b8 00 00 00 00       	mov    eax,0x0
c001f5ca:	eb 05                	jmp    c001f5d1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f5cc:	b8 01 00 00 00       	mov    eax,0x1
c001f5d1:	83 c4 1c             	add    esp,0x1c
c001f5d4:	c3                   	ret    
c001f5d5:	90                   	nop

c001f5d6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f5d6:	57                   	push   edi
c001f5d7:	83 ec 58             	sub    esp,0x58
c001f5da:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f5e2:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f5e6:	b9 0f 00 00 00       	mov    ecx,0xf
c001f5eb:	b8 00 00 00 00       	mov    eax,0x0
c001f5f0:	fc                   	cld    
c001f5f1:	89 d7                	mov    edi,edx
c001f5f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5f5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5f9:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f600:	83 f8 ff             	cmp    eax,0xffffffff
c001f603:	75 34                	jne    c001f639 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f605:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f609:	88 c2                	mov    dl,al
c001f60b:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f610:	01 d0                	add    eax,edx
c001f612:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f616:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f61c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f620:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f627:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f62c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f630:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f637:	eb 17                	jmp    c001f650 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f639:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f63d:	88 c2                	mov    dl,al
c001f63f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f643:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f64a:	01 d0                	add    eax,edx
c001f64c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f650:	83 ec 08             	sub    esp,0x8
c001f653:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f657:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f65b:	50                   	push   eax
c001f65c:	e8 80 11 fe ff       	call   c00007e1 <strcat>
c001f661:	83 c4 10             	add    esp,0x10
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f66b:	50                   	push   eax
c001f66c:	e8 65 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f671:	83 c4 10             	add    esp,0x10
c001f674:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f678:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f67d:	75 07                	jne    c001f686 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f67f:	b8 00 00 00 00       	mov    eax,0x0
c001f684:	eb 05                	jmp    c001f68b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f686:	b8 01 00 00 00       	mov    eax,0x1
c001f68b:	83 c4 58             	add    esp,0x58
c001f68e:	5f                   	pop    edi
c001f68f:	c3                   	ret    

c001f690 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f690:	83 ec 2c             	sub    esp,0x2c
c001f693:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f69b:	83 ec 08             	sub    esp,0x8
c001f69e:	68 d0 ad 02 c0       	push   0xc002add0
c001f6a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6a7:	e8 cf 10 fe ff       	call   c000077b <strcmp>
c001f6ac:	83 c4 10             	add    esp,0x10
c001f6af:	85 c0                	test   eax,eax
c001f6b1:	0f 94 c0             	sete   al
c001f6b4:	84 c0                	test   al,al
c001f6b6:	74 0d                	je     c001f6c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f6b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6c0:	e9 a6 00 00 00       	jmp    c001f76b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6c5:	83 ec 08             	sub    esp,0x8
c001f6c8:	68 c2 ad 02 c0       	push   0xc002adc2
c001f6cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6d1:	e8 a5 10 fe ff       	call   c000077b <strcmp>
c001f6d6:	83 c4 10             	add    esp,0x10
c001f6d9:	85 c0                	test   eax,eax
c001f6db:	0f 94 c0             	sete   al
c001f6de:	84 c0                	test   al,al
c001f6e0:	74 0a                	je     c001f6ec <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f6e2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6ea:	eb 7f                	jmp    c001f76b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6ec:	83 ec 08             	sub    esp,0x8
c001f6ef:	68 c8 ad 02 c0       	push   0xc002adc8
c001f6f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6f8:	e8 7e 10 fe ff       	call   c000077b <strcmp>
c001f6fd:	83 c4 10             	add    esp,0x10
c001f700:	85 c0                	test   eax,eax
c001f702:	0f 94 c0             	sete   al
c001f705:	84 c0                	test   al,al
c001f707:	74 0a                	je     c001f713 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f709:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f711:	eb 58                	jmp    c001f76b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f713:	83 ec 08             	sub    esp,0x8
c001f716:	68 2c 7e 02 c0       	push   0xc0027e2c
c001f71b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f71f:	e8 57 10 fe ff       	call   c000077b <strcmp>
c001f724:	83 c4 10             	add    esp,0x10
c001f727:	85 c0                	test   eax,eax
c001f729:	0f 94 c0             	sete   al
c001f72c:	84 c0                	test   al,al
c001f72e:	74 0a                	je     c001f73a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f730:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f738:	eb 31                	jmp    c001f76b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f73a:	83 ec 08             	sub    esp,0x8
c001f73d:	68 ce ad 02 c0       	push   0xc002adce
c001f742:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f746:	e8 30 10 fe ff       	call   c000077b <strcmp>
c001f74b:	83 c4 10             	add    esp,0x10
c001f74e:	85 c0                	test   eax,eax
c001f750:	0f 94 c0             	sete   al
c001f753:	84 c0                	test   al,al
c001f755:	74 0a                	je     c001f761 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f757:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f75f:	eb 0a                	jmp    c001f76b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f761:	b8 08 00 00 00       	mov    eax,0x8
c001f766:	e9 04 01 00 00       	jmp    c001f86f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f76b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f772:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f777:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f77b:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f782:	83 f8 ff             	cmp    eax,0xffffffff
c001f785:	75 34                	jne    c001f7bb <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f787:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f78b:	88 c2                	mov    dl,al
c001f78d:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f792:	01 d0                	add    eax,edx
c001f794:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f798:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f79e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7a2:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f7a9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f7ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f7b2:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f7b9:	eb 17                	jmp    c001f7d2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f7bb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f7bf:	88 c2                	mov    dl,al
c001f7c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7c5:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f7cc:	01 d0                	add    eax,edx
c001f7ce:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7d6:	88 04 24             	mov    BYTE PTR [esp],al
c001f7d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f7dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f7e9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f7ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	68 00 20 00 00       	push   0x2000
c001f7fe:	e8 d1 fc fe ff       	call   c000f4d4 <malloc>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f80a:	68 00 20 00 00       	push   0x2000
c001f80f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f813:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f817:	50                   	push   eax
c001f818:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f81c:	50                   	push   eax
c001f81d:	e8 ff 78 fe ff       	call   c0007121 <f_mkfs>
c001f822:	83 c4 10             	add    esp,0x10
c001f825:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f829:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f82e:	75 07                	jne    c001f837 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f830:	b8 00 00 00 00       	mov    eax,0x0
c001f835:	eb 38                	jmp    c001f86f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f837:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f83c:	75 17                	jne    c001f855 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f83e:	83 ec 0c             	sub    esp,0xc
c001f841:	68 00 ae 02 c0       	push   0xc002ae00
c001f846:	e8 4a 2f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001f84b:	83 c4 10             	add    esp,0x10
c001f84e:	b8 09 00 00 00       	mov    eax,0x9
c001f853:	eb 1a                	jmp    c001f86f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f855:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f859:	83 ec 08             	sub    esp,0x8
c001f85c:	50                   	push   eax
c001f85d:	68 d4 ad 02 c0       	push   0xc002add4
c001f862:	e8 2e 2f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c001f867:	83 c4 10             	add    esp,0x10
c001f86a:	b8 01 00 00 00       	mov    eax,0x1
c001f86f:	83 c4 2c             	add    esp,0x2c
c001f872:	c3                   	ret    
c001f873:	90                   	nop

c001f874 <FAT::tryMount(LogicalDisk*, int)>:
c001f874:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f87a:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f87f:	83 f8 14             	cmp    eax,0x14
c001f882:	75 17                	jne    c001f89b <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	68 e6 ad 02 c0       	push   0xc002ade6
c001f88c:	e8 1e a0 ff ff       	call   c00198af <Krnl::panic(char const*)>
c001f891:	83 c4 10             	add    esp,0x10
c001f894:	b0 00                	mov    al,0x0
c001f896:	e9 d7 01 00 00       	jmp    c001fa72 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f89b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f8a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f8a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f8ae:	3d 00 02 00 00       	cmp    eax,0x200
c001f8b3:	74 07                	je     c001f8bc <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f8b5:	b0 00                	mov    al,0x0
c001f8b7:	e9 b6 01 00 00       	jmp    c001fa72 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8bc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f8c4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8cb:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f8d2:	83 f8 ff             	cmp    eax,0xffffffff
c001f8d5:	74 07                	je     c001f8de <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f8d7:	b0 01                	mov    al,0x1
c001f8d9:	e9 94 01 00 00       	jmp    c001fa72 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8de:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f8e8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f8f0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f8f7:	88 c2                	mov    dl,al
c001f8f9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f8fe:	01 d0                	add    eax,edx
c001f900:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f907:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f90d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f914:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f91b:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f920:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f927:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	68 54 02 00 00       	push   0x254
c001f936:	e8 99 fb fe ff       	call   c000f4d4 <malloc>
c001f93b:	83 c4 10             	add    esp,0x10
c001f93e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f945:	83 ec 04             	sub    esp,0x4
c001f948:	6a 00                	push   0x0
c001f94a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f951:	50                   	push   eax
c001f952:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f959:	e8 81 53 fe ff       	call   c0004cdf <f_mount>
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f968:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f970:	74 19                	je     c001f98b <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f97c:	e8 73 fb fe ff       	call   c000f4f4 <rfree>
c001f981:	83 c4 10             	add    esp,0x10
c001f984:	b0 00                	mov    al,0x0
c001f986:	e9 e7 00 00 00       	jmp    c001fa72 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f98b:	83 ec 04             	sub    esp,0x4
c001f98e:	68 00 01 00 00       	push   0x100
c001f993:	6a 00                	push   0x0
c001f995:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f99c:	50                   	push   eax
c001f99d:	e8 e9 0c fe ff       	call   c000068b <memset>
c001f9a2:	83 c4 10             	add    esp,0x10
c001f9a5:	83 ec 08             	sub    esp,0x8
c001f9a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f9af:	50                   	push   eax
c001f9b0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9b7:	50                   	push   eax
c001f9b8:	e8 24 0e fe ff       	call   c00007e1 <strcat>
c001f9bd:	83 c4 10             	add    esp,0x10
c001f9c0:	83 ec 08             	sub    esp,0x8
c001f9c3:	68 f4 ad 02 c0       	push   0xc002adf4
c001f9c8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9cf:	50                   	push   eax
c001f9d0:	e8 0c 0e fe ff       	call   c00007e1 <strcat>
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	83 ec 04             	sub    esp,0x4
c001f9db:	6a 01                	push   0x1
c001f9dd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f9e4:	50                   	push   eax
c001f9e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9e9:	50                   	push   eax
c001f9ea:	e8 52 53 fe ff       	call   c0004d41 <f_open>
c001f9ef:	83 c4 10             	add    esp,0x10
c001f9f2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9f9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fa00:	85 c0                	test   eax,eax
c001fa02:	74 0a                	je     c001fa0e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fa04:	78 2d                	js     c001fa33 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa06:	83 e8 04             	sub    eax,0x4
c001fa09:	83 f8 01             	cmp    eax,0x1
c001fa0c:	77 25                	ja     c001fa33 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa0e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fa16:	83 ec 0c             	sub    esp,0xc
c001fa19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa1d:	50                   	push   eax
c001fa1e:	e8 70 5e fe ff       	call   c0005893 <f_close>
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	90                   	nop
c001fa27:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fa2f:	74 3a                	je     c001fa6b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fa31:	eb 2d                	jmp    c001fa60 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa3d:	e8 b2 fa fe ff       	call   c000f4f4 <rfree>
c001fa42:	83 c4 10             	add    esp,0x10
c001fa45:	83 ec 04             	sub    esp,0x4
c001fa48:	6a 00                	push   0x0
c001fa4a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa51:	50                   	push   eax
c001fa52:	6a 00                	push   0x0
c001fa54:	e8 86 52 fe ff       	call   c0004cdf <f_mount>
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	b0 00                	mov    al,0x0
c001fa5e:	eb 12                	jmp    c001fa72 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa60:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001fa65:	40                   	inc    eax
c001fa66:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c001fa6b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa72:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fa78:	c3                   	ret    
c001fa79:	90                   	nop

c001fa7a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fa7a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fa80:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fa88:	74 0a                	je     c001fa94 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fa8a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fa92:	75 0a                	jne    c001fa9e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fa94:	b8 04 00 00 00       	mov    eax,0x4
c001fa99:	e9 db 00 00 00       	jmp    c001fb79 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa9e:	83 ec 08             	sub    esp,0x8
c001faa1:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001faa8:	50                   	push   eax
c001faa9:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fab0:	e8 e8 63 fe ff       	call   c0005e9d <f_readdir>
c001fab5:	83 c4 10             	add    esp,0x10
c001fab8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fabf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fac5:	83 ec 0c             	sub    esp,0xc
c001fac8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001facf:	83 c0 1a             	add    eax,0x1a
c001fad2:	50                   	push   eax
c001fad3:	e8 d0 0b fe ff       	call   c00006a8 <strlen>
c001fad8:	83 c4 10             	add    esp,0x10
c001fadb:	ba 00 00 00 00       	mov    edx,0x0
c001fae0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fae4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fae8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001faef:	0f b6 c0             	movzx  eax,al
c001faf2:	83 e0 10             	and    eax,0x10
c001faf5:	74 07                	je     c001fafe <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001faf7:	b8 02 00 00 00       	mov    eax,0x2
c001fafc:	eb 05                	jmp    c001fb03 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fafe:	b8 01 00 00 00       	mov    eax,0x1
c001fb03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb07:	83 ec 08             	sub    esp,0x8
c001fb0a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb11:	83 c0 1a             	add    eax,0x1a
c001fb14:	50                   	push   eax
c001fb15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb19:	83 c0 10             	add    eax,0x10
c001fb1c:	50                   	push   eax
c001fb1d:	e8 08 0c fe ff       	call   c000072a <strcpy>
c001fb22:	83 c4 10             	add    esp,0x10
c001fb25:	83 ec 04             	sub    esp,0x4
c001fb28:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fb2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb33:	50                   	push   eax
c001fb34:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fb3b:	e8 15 0b fe ff       	call   c0000655 <memcpy>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb4a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb50:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb57:	84 c0                	test   al,al
c001fb59:	75 07                	jne    c001fb62 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb5b:	b8 07 00 00 00       	mov    eax,0x7
c001fb60:	eb 17                	jmp    c001fb79 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb62:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb69:	85 c0                	test   eax,eax
c001fb6b:	75 07                	jne    c001fb74 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb6d:	b8 00 00 00 00       	mov    eax,0x0
c001fb72:	eb 05                	jmp    c001fb79 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb74:	b8 01 00 00 00       	mov    eax,0x1
c001fb79:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fb7f:	c3                   	ret    

c001fb80 <FAT::read(void*, unsigned long, void*, int*)>:
c001fb80:	83 ec 1c             	sub    esp,0x1c
c001fb83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb88:	74 07                	je     c001fb91 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fb8a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb8f:	75 07                	jne    c001fb98 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fb91:	b8 04 00 00 00       	mov    eax,0x4
c001fb96:	eb 3d                	jmp    c001fbd5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb98:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb9c:	50                   	push   eax
c001fb9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fba1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fba5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fba9:	e8 cf 55 fe ff       	call   c000517d <f_read>
c001fbae:	83 c4 10             	add    esp,0x10
c001fbb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbb9:	89 c2                	mov    edx,eax
c001fbbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbbf:	89 10                	mov    DWORD PTR [eax],edx
c001fbc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc5:	85 c0                	test   eax,eax
c001fbc7:	75 07                	jne    c001fbd0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fbc9:	b8 00 00 00 00       	mov    eax,0x0
c001fbce:	eb 05                	jmp    c001fbd5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbd0:	b8 01 00 00 00       	mov    eax,0x1
c001fbd5:	83 c4 1c             	add    esp,0x1c
c001fbd8:	c3                   	ret    
c001fbd9:	90                   	nop

c001fbda <FAT::write(void*, unsigned long, void*, int*)>:
c001fbda:	83 ec 1c             	sub    esp,0x1c
c001fbdd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbe2:	74 07                	je     c001fbeb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fbe4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fbe9:	75 07                	jne    c001fbf2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fbeb:	b8 04 00 00 00       	mov    eax,0x4
c001fbf0:	eb 3d                	jmp    c001fc2f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbf2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbf6:	50                   	push   eax
c001fbf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc03:	e8 f5 57 fe ff       	call   c00053fd <f_write>
c001fc08:	83 c4 10             	add    esp,0x10
c001fc0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc13:	89 c2                	mov    edx,eax
c001fc15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc19:	89 10                	mov    DWORD PTR [eax],edx
c001fc1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc1f:	85 c0                	test   eax,eax
c001fc21:	75 07                	jne    c001fc2a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fc23:	b8 00 00 00 00       	mov    eax,0x0
c001fc28:	eb 05                	jmp    c001fc2f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc2a:	b8 01 00 00 00       	mov    eax,0x1
c001fc2f:	83 c4 1c             	add    esp,0x1c
c001fc32:	c3                   	ret    
c001fc33:	90                   	nop

c001fc34 <FAT::close(void*)>:
c001fc34:	83 ec 1c             	sub    esp,0x1c
c001fc37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc3c:	75 07                	jne    c001fc45 <FAT::close(void*)+0x11>
c001fc3e:	b8 04 00 00 00       	mov    eax,0x4
c001fc43:	eb 36                	jmp    c001fc7b <FAT::close(void*)+0x47>
c001fc45:	83 ec 0c             	sub    esp,0xc
c001fc48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc4c:	e8 42 5c fe ff       	call   c0005893 <f_close>
c001fc51:	83 c4 10             	add    esp,0x10
c001fc54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc5f:	e8 80 f8 fe ff       	call   c000f4e4 <free>
c001fc64:	83 c4 10             	add    esp,0x10
c001fc67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc6b:	85 c0                	test   eax,eax
c001fc6d:	75 07                	jne    c001fc76 <FAT::close(void*)+0x42>
c001fc6f:	b8 00 00 00 00       	mov    eax,0x0
c001fc74:	eb 05                	jmp    c001fc7b <FAT::close(void*)+0x47>
c001fc76:	b8 01 00 00 00       	mov    eax,0x1
c001fc7b:	83 c4 1c             	add    esp,0x1c
c001fc7e:	c3                   	ret    
c001fc7f:	90                   	nop

c001fc80 <FAT::closeDir(void*)>:
c001fc80:	83 ec 1c             	sub    esp,0x1c
c001fc83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc88:	75 07                	jne    c001fc91 <FAT::closeDir(void*)+0x11>
c001fc8a:	b8 04 00 00 00       	mov    eax,0x4
c001fc8f:	eb 36                	jmp    c001fcc7 <FAT::closeDir(void*)+0x47>
c001fc91:	83 ec 0c             	sub    esp,0xc
c001fc94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc98:	e8 de 61 fe ff       	call   c0005e7b <f_closedir>
c001fc9d:	83 c4 10             	add    esp,0x10
c001fca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcab:	e8 34 f8 fe ff       	call   c000f4e4 <free>
c001fcb0:	83 c4 10             	add    esp,0x10
c001fcb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcb7:	85 c0                	test   eax,eax
c001fcb9:	75 07                	jne    c001fcc2 <FAT::closeDir(void*)+0x42>
c001fcbb:	b8 00 00 00 00       	mov    eax,0x0
c001fcc0:	eb 05                	jmp    c001fcc7 <FAT::closeDir(void*)+0x47>
c001fcc2:	b8 01 00 00 00       	mov    eax,0x1
c001fcc7:	83 c4 1c             	add    esp,0x1c
c001fcca:	c3                   	ret    
c001fccb:	90                   	nop

c001fccc <FAT::seek(void*, unsigned long long)>:
c001fccc:	83 ec 2c             	sub    esp,0x2c
c001fccf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fcdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcdf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fce4:	75 07                	jne    c001fced <FAT::seek(void*, unsigned long long)+0x21>
c001fce6:	b8 04 00 00 00       	mov    eax,0x4
c001fceb:	eb 2f                	jmp    c001fd1c <FAT::seek(void*, unsigned long long)+0x50>
c001fced:	83 ec 04             	sub    esp,0x4
c001fcf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcf4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fcfc:	e8 c1 5b fe ff       	call   c00058c2 <f_lseek>
c001fd01:	83 c4 10             	add    esp,0x10
c001fd04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd0c:	85 c0                	test   eax,eax
c001fd0e:	75 07                	jne    c001fd17 <FAT::seek(void*, unsigned long long)+0x4b>
c001fd10:	b8 00 00 00 00       	mov    eax,0x0
c001fd15:	eb 05                	jmp    c001fd1c <FAT::seek(void*, unsigned long long)+0x50>
c001fd17:	b8 01 00 00 00       	mov    eax,0x1
c001fd1c:	83 c4 2c             	add    esp,0x2c
c001fd1f:	c3                   	ret    

c001fd20 <fatWrapperReadDisk>:
c001fd20:	83 ec 1c             	sub    esp,0x1c
c001fd23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd3f:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fd46:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd51:	52                   	push   edx
c001fd52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd5a:	50                   	push   eax
c001fd5b:	e8 c2 60 ff ff       	call   c0015e22 <LogicalDisk::read(unsigned long long, int, void*)>
c001fd60:	83 c4 20             	add    esp,0x20
c001fd63:	83 c4 1c             	add    esp,0x1c
c001fd66:	c3                   	ret    

c001fd67 <fatWrapperWriteDisk>:
c001fd67:	83 ec 1c             	sub    esp,0x1c
c001fd6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd76:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd81:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd86:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fd8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd91:	83 ec 0c             	sub    esp,0xc
c001fd94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd98:	52                   	push   edx
c001fd99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fda1:	50                   	push   eax
c001fda2:	e8 e7 60 ff ff       	call   c0015e8e <LogicalDisk::write(unsigned long long, int, void*)>
c001fda7:	83 c4 20             	add    esp,0x20
c001fdaa:	83 c4 1c             	add    esp,0x1c
c001fdad:	c3                   	ret    

c001fdae <fatWrapperIoctl>:
c001fdae:	53                   	push   ebx
c001fdaf:	83 ec 28             	sub    esp,0x28
c001fdb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fdb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fdba:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fdbe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fdc2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fdc7:	75 31                	jne    c001fdfa <fatWrapperIoctl+0x4c>
c001fdc9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fdd1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdd6:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fddd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fde3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fde9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fded:	66 89 02             	mov    WORD PTR [edx],ax
c001fdf0:	b8 00 00 00 00       	mov    eax,0x0
c001fdf5:	e9 b2 00 00 00       	jmp    c001feac <fatWrapperIoctl+0xfe>
c001fdfa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fdff:	75 6a                	jne    c001fe6b <fatWrapperIoctl+0xbd>
c001fe01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe09:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe0e:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fe15:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe1b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fe21:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fe27:	89 c8                	mov    eax,ecx
c001fe29:	89 da                	mov    edx,ebx
c001fe2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fe2f:	c1 e0 0a             	shl    eax,0xa
c001fe32:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fe37:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c001fe3e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe44:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe4a:	89 cb                	mov    ebx,ecx
c001fe4c:	c1 fb 1f             	sar    ebx,0x1f
c001fe4f:	53                   	push   ebx
c001fe50:	51                   	push   ecx
c001fe51:	52                   	push   edx
c001fe52:	50                   	push   eax
c001fe53:	e8 74 55 00 00       	call   c00253cc <__udivdi3>
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe5f:	89 01                	mov    DWORD PTR [ecx],eax
c001fe61:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe64:	b8 00 00 00 00       	mov    eax,0x0
c001fe69:	eb 41                	jmp    c001feac <fatWrapperIoctl+0xfe>
c001fe6b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe70:	75 07                	jne    c001fe79 <fatWrapperIoctl+0xcb>
c001fe72:	b8 00 00 00 00       	mov    eax,0x0
c001fe77:	eb 33                	jmp    c001feac <fatWrapperIoctl+0xfe>
c001fe79:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fe7e:	75 19                	jne    c001fe99 <fatWrapperIoctl+0xeb>
c001fe80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe8c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fe92:	b8 00 00 00 00       	mov    eax,0x0
c001fe97:	eb 13                	jmp    c001feac <fatWrapperIoctl+0xfe>
c001fe99:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fe9e:	75 07                	jne    c001fea7 <fatWrapperIoctl+0xf9>
c001fea0:	b8 00 00 00 00       	mov    eax,0x0
c001fea5:	eb 05                	jmp    c001feac <fatWrapperIoctl+0xfe>
c001fea7:	b8 04 00 00 00       	mov    eax,0x4
c001feac:	83 c4 28             	add    esp,0x28
c001feaf:	5b                   	pop    ebx
c001feb0:	c3                   	ret    
c001feb1:	90                   	nop

c001feb2 <FAT::FAT()>:
c001feb2:	83 ec 1c             	sub    esp,0x1c
c001feb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	50                   	push   eax
c001febd:	e8 d8 2b ff ff       	call   c0012a9a <Filesystem::Filesystem()>
c001fec2:	83 c4 10             	add    esp,0x10
c001fec5:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001feca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fece:	89 10                	mov    DWORD PTR [eax],edx
c001fed0:	c7 05 80 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df80,0x0
c001feda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fee2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fee7:	7f 15                	jg     c001fefe <FAT::FAT()+0x4c>
c001fee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001feed:	c7 04 85 a0 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2060],0xffffffff
c001fef8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fefc:	eb e4                	jmp    c001fee2 <FAT::FAT()+0x30>
c001fefe:	90                   	nop
c001feff:	83 c4 1c             	add    esp,0x1c
c001ff02:	c3                   	ret    
c001ff03:	90                   	nop

c001ff04 <FAT::fixFilepath(char*)>:
c001ff04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff08:	8a 00                	mov    al,BYTE PTR [eax]
c001ff0a:	3c 40                	cmp    al,0x40
c001ff0c:	7e 2c                	jle    c001ff3a <FAT::fixFilepath(char*)+0x36>
c001ff0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff12:	8a 00                	mov    al,BYTE PTR [eax]
c001ff14:	83 e8 41             	sub    eax,0x41
c001ff17:	88 c2                	mov    dl,al
c001ff19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff1d:	88 10                	mov    BYTE PTR [eax],dl
c001ff1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff23:	8a 00                	mov    al,BYTE PTR [eax]
c001ff25:	0f be c0             	movsx  eax,al
c001ff28:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001ff2f:	83 c0 30             	add    eax,0x30
c001ff32:	88 c2                	mov    dl,al
c001ff34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff38:	88 10                	mov    BYTE PTR [eax],dl
c001ff3a:	90                   	nop
c001ff3b:	c3                   	ret    

c001ff3c <FAT::open(char const*, void**, FileOpenMode)>:
c001ff3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff4a:	74 0a                	je     c001ff56 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff4c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff54:	75 0a                	jne    c001ff60 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff56:	b8 04 00 00 00       	mov    eax,0x4
c001ff5b:	e9 fd 00 00 00       	jmp    c002005d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff60:	83 ec 08             	sub    esp,0x8
c001ff63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff6e:	50                   	push   eax
c001ff6f:	e8 b6 07 fe ff       	call   c000072a <strcpy>
c001ff74:	83 c4 10             	add    esp,0x10
c001ff77:	83 ec 08             	sub    esp,0x8
c001ff7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ff7e:	50                   	push   eax
c001ff7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff86:	e8 79 ff ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c001ff8b:	83 c4 10             	add    esp,0x10
c001ff8e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ff96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff9d:	83 e0 01             	and    eax,0x1
c001ffa0:	74 08                	je     c001ffaa <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ffa2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ffaa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffb1:	83 e0 04             	and    eax,0x4
c001ffb4:	74 10                	je     c001ffc6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ffb6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ffbe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffc6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffcd:	83 e0 02             	and    eax,0x2
c001ffd0:	74 08                	je     c001ffda <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ffd2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffda:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffe1:	83 e0 08             	and    eax,0x8
c001ffe4:	74 08                	je     c001ffee <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ffe6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ffee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fff5:	83 e0 10             	and    eax,0x10
c001fff8:	74 08                	je     c0020002 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001fffa:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020002:	83 ec 0c             	sub    esp,0xc
c0020005:	68 50 02 00 00       	push   0x250
c002000a:	e8 c5 f4 fe ff       	call   c000f4d4 <malloc>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	89 c2                	mov    edx,eax
c0020014:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002001b:	89 10                	mov    DWORD PTR [eax],edx
c002001d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020025:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002002c:	8b 00                	mov    eax,DWORD PTR [eax]
c002002e:	83 ec 04             	sub    esp,0x4
c0020031:	52                   	push   edx
c0020032:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020036:	52                   	push   edx
c0020037:	50                   	push   eax
c0020038:	e8 04 4d fe ff       	call   c0004d41 <f_open>
c002003d:	83 c4 10             	add    esp,0x10
c0020040:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020047:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002004f:	74 07                	je     c0020058 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020051:	b8 01 00 00 00       	mov    eax,0x1
c0020056:	eb 05                	jmp    c002005d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020058:	b8 00 00 00 00       	mov    eax,0x0
c002005d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020063:	c3                   	ret    

c0020064 <FAT::openDir(char const*, void**)>:
c0020064:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002006a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020072:	74 0a                	je     c002007e <FAT::openDir(char const*, void**)+0x1a>
c0020074:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002007c:	75 07                	jne    c0020085 <FAT::openDir(char const*, void**)+0x21>
c002007e:	b8 04 00 00 00       	mov    eax,0x4
c0020083:	eb 7d                	jmp    c0020102 <FAT::openDir(char const*, void**)+0x9e>
c0020085:	83 ec 08             	sub    esp,0x8
c0020088:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002008f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020093:	50                   	push   eax
c0020094:	e8 91 06 fe ff       	call   c000072a <strcpy>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	83 ec 08             	sub    esp,0x8
c002009f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200a3:	50                   	push   eax
c00200a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00200ab:	e8 54 fe ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c00200b0:	83 c4 10             	add    esp,0x10
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	6a 4c                	push   0x4c
c00200b8:	e8 17 f4 fe ff       	call   c000f4d4 <malloc>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	89 c2                	mov    edx,eax
c00200c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200c9:	89 10                	mov    DWORD PTR [eax],edx
c00200cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00200d4:	83 ec 08             	sub    esp,0x8
c00200d7:	8d 54 24 14          	lea    edx,[esp+0x14]
c00200db:	52                   	push   edx
c00200dc:	50                   	push   eax
c00200dd:	e8 97 5c fe ff       	call   c0005d79 <f_opendir>
c00200e2:	83 c4 10             	add    esp,0x10
c00200e5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00200ec:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00200f4:	74 07                	je     c00200fd <FAT::openDir(char const*, void**)+0x99>
c00200f6:	b8 01 00 00 00       	mov    eax,0x1
c00200fb:	eb 05                	jmp    c0020102 <FAT::openDir(char const*, void**)+0x9e>
c00200fd:	b8 00 00 00 00       	mov    eax,0x0
c0020102:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020108:	c3                   	ret    
c0020109:	90                   	nop

c002010a <FAT::stat(char const*, unsigned long long*, bool*)>:
c002010a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020110:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020118:	75 0a                	jne    c0020124 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002011a:	b8 04 00 00 00       	mov    eax,0x4
c002011f:	e9 c9 00 00 00       	jmp    c00201ed <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020124:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002012c:	75 0a                	jne    c0020138 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002012e:	b8 04 00 00 00       	mov    eax,0x4
c0020133:	e9 b5 00 00 00       	jmp    c00201ed <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020138:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020140:	75 0a                	jne    c002014c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020142:	b8 04 00 00 00       	mov    eax,0x4
c0020147:	e9 a1 00 00 00       	jmp    c00201ed <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002014c:	83 ec 08             	sub    esp,0x8
c002014f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020156:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002015d:	50                   	push   eax
c002015e:	e8 c7 05 fe ff       	call   c000072a <strcpy>
c0020163:	83 c4 10             	add    esp,0x10
c0020166:	83 ec 08             	sub    esp,0x8
c0020169:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020170:	50                   	push   eax
c0020171:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020178:	e8 87 fd ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c002017d:	83 c4 10             	add    esp,0x10
c0020180:	83 ec 08             	sub    esp,0x8
c0020183:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020187:	50                   	push   eax
c0020188:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002018f:	50                   	push   eax
c0020190:	e8 a3 5d fe ff       	call   c0005f38 <f_stat>
c0020195:	83 c4 10             	add    esp,0x10
c0020198:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002019f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00201a6:	85 c0                	test   eax,eax
c00201a8:	74 07                	je     c00201b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00201aa:	83 f8 04             	cmp    eax,0x4
c00201ad:	74 32                	je     c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00201af:	eb 37                	jmp    c00201e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00201b1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201b5:	0f b6 c0             	movzx  eax,al
c00201b8:	83 e0 10             	and    eax,0x10
c00201bb:	0f 95 c2             	setne  dl
c00201be:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00201c5:	88 10                	mov    BYTE PTR [eax],dl
c00201c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201ce:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00201d5:	89 01                	mov    DWORD PTR [ecx],eax
c00201d7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201da:	b8 00 00 00 00       	mov    eax,0x0
c00201df:	eb 0c                	jmp    c00201ed <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201e1:	b8 02 00 00 00       	mov    eax,0x2
c00201e6:	eb 05                	jmp    c00201ed <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201e8:	b8 01 00 00 00       	mov    eax,0x1
c00201ed:	81 c4 2c 02 00 00    	add    esp,0x22c
c00201f3:	c3                   	ret    

c00201f4 <FAT::unlink(char const*)>:
c00201f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00201fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020202:	75 07                	jne    c002020b <FAT::unlink(char const*)+0x17>
c0020204:	b8 04 00 00 00       	mov    eax,0x4
c0020209:	eb 5c                	jmp    c0020267 <FAT::unlink(char const*)+0x73>
c002020b:	83 ec 08             	sub    esp,0x8
c002020e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020215:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020219:	50                   	push   eax
c002021a:	e8 0b 05 fe ff       	call   c000072a <strcpy>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	83 ec 08             	sub    esp,0x8
c0020225:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020229:	50                   	push   eax
c002022a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020231:	e8 ce fc ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c0020236:	83 c4 10             	add    esp,0x10
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020240:	50                   	push   eax
c0020241:	e8 44 60 fe ff       	call   c000628a <f_unlink>
c0020246:	83 c4 10             	add    esp,0x10
c0020249:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020250:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020257:	85 c0                	test   eax,eax
c0020259:	75 07                	jne    c0020262 <FAT::unlink(char const*)+0x6e>
c002025b:	b8 00 00 00 00       	mov    eax,0x0
c0020260:	eb 05                	jmp    c0020267 <FAT::unlink(char const*)+0x73>
c0020262:	b8 01 00 00 00       	mov    eax,0x1
c0020267:	81 c4 1c 01 00 00    	add    esp,0x11c
c002026d:	c3                   	ret    

c002026e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002026e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020274:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002027b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020282:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020286:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002028a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020292:	75 0a                	jne    c002029e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020294:	b8 04 00 00 00       	mov    eax,0x4
c0020299:	e9 1c 01 00 00       	jmp    c00203ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002029e:	83 ec 08             	sub    esp,0x8
c00202a1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00202ac:	50                   	push   eax
c00202ad:	e8 78 04 fe ff       	call   c000072a <strcpy>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	83 ec 08             	sub    esp,0x8
c00202b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00202bc:	50                   	push   eax
c00202bd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202c4:	e8 3b fc ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00202d4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00202dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202e1:	83 e0 01             	and    eax,0x1
c00202e4:	74 08                	je     c00202ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00202e6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00202ee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202f3:	83 e0 02             	and    eax,0x2
c00202f6:	74 08                	je     c0020300 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00202f8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020300:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020305:	83 e0 04             	and    eax,0x4
c0020308:	74 08                	je     c0020312 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002030a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020312:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020317:	83 e0 08             	and    eax,0x8
c002031a:	74 08                	je     c0020324 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002031c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020324:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020329:	83 e0 01             	and    eax,0x1
c002032c:	74 08                	je     c0020336 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002032e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020336:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002033b:	83 e0 02             	and    eax,0x2
c002033e:	74 08                	je     c0020348 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020340:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020348:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002034d:	83 e0 04             	and    eax,0x4
c0020350:	74 08                	je     c002035a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020352:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002035a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002035f:	83 e0 08             	and    eax,0x8
c0020362:	74 08                	je     c002036c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020364:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002036c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020373:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002037a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020382:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002038a:	83 ec 04             	sub    esp,0x4
c002038d:	52                   	push   edx
c002038e:	50                   	push   eax
c002038f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020393:	50                   	push   eax
c0020394:	e8 93 65 fe ff       	call   c000692c <f_chmod>
c0020399:	83 c4 10             	add    esp,0x10
c002039c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00203a3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00203aa:	85 c0                	test   eax,eax
c00203ac:	75 07                	jne    c00203b5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00203ae:	b8 00 00 00 00       	mov    eax,0x0
c00203b3:	eb 05                	jmp    c00203ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00203b5:	b8 01 00 00 00       	mov    eax,0x1
c00203ba:	81 c4 2c 01 00 00    	add    esp,0x12c
c00203c0:	c3                   	ret    
c00203c1:	90                   	nop

c00203c2 <FAT::rename(char const*, char const*)>:
c00203c2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00203c8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00203d0:	74 0a                	je     c00203dc <FAT::rename(char const*, char const*)+0x1a>
c00203d2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00203da:	75 0a                	jne    c00203e6 <FAT::rename(char const*, char const*)+0x24>
c00203dc:	b8 04 00 00 00       	mov    eax,0x4
c00203e1:	e9 98 00 00 00       	jmp    c002047e <FAT::rename(char const*, char const*)+0xbc>
c00203e6:	83 ec 08             	sub    esp,0x8
c00203e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203f0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203f7:	50                   	push   eax
c00203f8:	e8 2d 03 fe ff       	call   c000072a <strcpy>
c00203fd:	83 c4 10             	add    esp,0x10
c0020400:	83 ec 08             	sub    esp,0x8
c0020403:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002040a:	50                   	push   eax
c002040b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020412:	e8 ed fa ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c0020417:	83 c4 10             	add    esp,0x10
c002041a:	83 ec 08             	sub    esp,0x8
c002041d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020424:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020428:	50                   	push   eax
c0020429:	e8 fc 02 fe ff       	call   c000072a <strcpy>
c002042e:	83 c4 10             	add    esp,0x10
c0020431:	83 ec 08             	sub    esp,0x8
c0020434:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020438:	50                   	push   eax
c0020439:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020440:	e8 bf fa ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c0020445:	83 c4 10             	add    esp,0x10
c0020448:	83 ec 08             	sub    esp,0x8
c002044b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002044f:	50                   	push   eax
c0020450:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020457:	50                   	push   eax
c0020458:	e8 dc 61 fe ff       	call   c0006639 <f_rename>
c002045d:	83 c4 10             	add    esp,0x10
c0020460:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020467:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002046e:	85 c0                	test   eax,eax
c0020470:	75 07                	jne    c0020479 <FAT::rename(char const*, char const*)+0xb7>
c0020472:	b8 00 00 00 00       	mov    eax,0x0
c0020477:	eb 05                	jmp    c002047e <FAT::rename(char const*, char const*)+0xbc>
c0020479:	b8 01 00 00 00       	mov    eax,0x1
c002047e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020484:	c3                   	ret    
c0020485:	90                   	nop

c0020486 <FAT::mkdir(char const*)>:
c0020486:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002048c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020494:	75 07                	jne    c002049d <FAT::mkdir(char const*)+0x17>
c0020496:	b8 04 00 00 00       	mov    eax,0x4
c002049b:	eb 5c                	jmp    c00204f9 <FAT::mkdir(char const*)+0x73>
c002049d:	83 ec 08             	sub    esp,0x8
c00204a0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204ab:	50                   	push   eax
c00204ac:	e8 79 02 fe ff       	call   c000072a <strcpy>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	83 ec 08             	sub    esp,0x8
c00204b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204bb:	50                   	push   eax
c00204bc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204c3:	e8 3c fa ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c00204c8:	83 c4 10             	add    esp,0x10
c00204cb:	83 ec 0c             	sub    esp,0xc
c00204ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204d2:	50                   	push   eax
c00204d3:	e8 35 5f fe ff       	call   c000640d <f_mkdir>
c00204d8:	83 c4 10             	add    esp,0x10
c00204db:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00204e2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204e9:	85 c0                	test   eax,eax
c00204eb:	75 07                	jne    c00204f4 <FAT::mkdir(char const*)+0x6e>
c00204ed:	b8 00 00 00 00       	mov    eax,0x0
c00204f2:	eb 05                	jmp    c00204f9 <FAT::mkdir(char const*)+0x73>
c00204f4:	b8 01 00 00 00       	mov    eax,0x1
c00204f9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204ff:	c3                   	ret    

c0020500 <FAT::exists(char const*)>:
c0020500:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020506:	83 ec 08             	sub    esp,0x8
c0020509:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020510:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020514:	50                   	push   eax
c0020515:	e8 10 02 fe ff       	call   c000072a <strcpy>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	83 ec 08             	sub    esp,0x8
c0020520:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020524:	50                   	push   eax
c0020525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002052c:	e8 d3 f9 ff ff       	call   c001ff04 <FAT::fixFilepath(char*)>
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	83 ec 08             	sub    esp,0x8
c0020537:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002053e:	50                   	push   eax
c002053f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020543:	50                   	push   eax
c0020544:	e8 ef 59 fe ff       	call   c0005f38 <f_stat>
c0020549:	83 c4 10             	add    esp,0x10
c002054c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020553:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002055a:	85 c0                	test   eax,eax
c002055c:	75 04                	jne    c0020562 <FAT::exists(char const*)+0x62>
c002055e:	b0 01                	mov    al,0x1
c0020560:	eb 02                	jmp    c0020564 <FAT::exists(char const*)+0x64>
c0020562:	b0 00                	mov    al,0x0
c0020564:	81 c4 2c 02 00 00    	add    esp,0x22c
c002056a:	c3                   	ret    
c002056b:	90                   	nop

c002056c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002056c:	b8 08 00 00 00       	mov    eax,0x8
c0020571:	c3                   	ret    

c0020572 <ISO9660::seek(void*, unsigned long long)>:
c0020572:	53                   	push   ebx
c0020573:	b8 04 00 00 00       	mov    eax,0x4
c0020578:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002057c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020580:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020584:	85 d2                	test   edx,edx
c0020586:	74 17                	je     c002059f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020588:	89 c8                	mov    eax,ecx
c002058a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002058d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020590:	b8 01 00 00 00       	mov    eax,0x1
c0020595:	73 08                	jae    c002059f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020597:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002059a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002059d:	31 c0                	xor    eax,eax
c002059f:	5b                   	pop    ebx
c00205a0:	c3                   	ret    
c00205a1:	90                   	nop

c00205a2 <ISO9660::tell(void*, unsigned long long*)>:
c00205a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205aa:	85 d2                	test   edx,edx
c00205ac:	74 12                	je     c00205c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205ae:	85 c0                	test   eax,eax
c00205b0:	74 0e                	je     c00205c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205b2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00205b5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00205b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205bb:	89 10                	mov    DWORD PTR [eax],edx
c00205bd:	31 c0                	xor    eax,eax
c00205bf:	c3                   	ret    
c00205c0:	b8 04 00 00 00       	mov    eax,0x4
c00205c5:	c3                   	ret    

c00205c6 <ISO9660::getName()>:
c00205c6:	b8 8c ae 02 c0       	mov    eax,0xc002ae8c
c00205cb:	c3                   	ret    

c00205cc <ISO9660::stat(void*, unsigned long long*)>:
c00205cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205d4:	85 d2                	test   edx,edx
c00205d6:	74 12                	je     c00205ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205d8:	85 c0                	test   eax,eax
c00205da:	74 0e                	je     c00205ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00205df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00205e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205e5:	89 10                	mov    DWORD PTR [eax],edx
c00205e7:	31 c0                	xor    eax,eax
c00205e9:	c3                   	ret    
c00205ea:	b8 04 00 00 00       	mov    eax,0x4
c00205ef:	c3                   	ret    

c00205f0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00205f0:	b8 01 00 00 00       	mov    eax,0x1
c00205f5:	c3                   	ret    

c00205f6 <ISO9660::unlink(char const*)>:
c00205f6:	b8 01 00 00 00       	mov    eax,0x1
c00205fb:	c3                   	ret    

c00205fc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00205fc:	b8 01 00 00 00       	mov    eax,0x1
c0020601:	c3                   	ret    

c0020602 <ISO9660::rename(char const*, char const*)>:
c0020602:	b8 01 00 00 00       	mov    eax,0x1
c0020607:	c3                   	ret    

c0020608 <ISO9660::mkdir(char const*)>:
c0020608:	b8 01 00 00 00       	mov    eax,0x1
c002060d:	c3                   	ret    

c002060e <ISO9660::close(void*)>:
c002060e:	83 ec 0c             	sub    esp,0xc
c0020611:	b8 04 00 00 00       	mov    eax,0x4
c0020616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002061a:	85 d2                	test   edx,edx
c002061c:	74 0e                	je     c002062c <ISO9660::close(void*)+0x1e>
c002061e:	83 ec 0c             	sub    esp,0xc
c0020621:	52                   	push   edx
c0020622:	e8 bd ee fe ff       	call   c000f4e4 <free>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	31 c0                	xor    eax,eax
c002062c:	83 c4 0c             	add    esp,0xc
c002062f:	c3                   	ret    

c0020630 <ISO9660::closeDir(void*)>:
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	b8 04 00 00 00       	mov    eax,0x4
c0020638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002063c:	85 d2                	test   edx,edx
c002063e:	74 0e                	je     c002064e <ISO9660::closeDir(void*)+0x1e>
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	52                   	push   edx
c0020644:	e8 9b ee fe ff       	call   c000f4e4 <free>
c0020649:	83 c4 10             	add    esp,0x10
c002064c:	31 c0                	xor    eax,eax
c002064e:	83 c4 0c             	add    esp,0xc
c0020651:	c3                   	ret    

c0020652 <ISO9660::~ISO9660()>:
c0020652:	83 ec 0c             	sub    esp,0xc
c0020655:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c002065a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065e:	89 10                	mov    DWORD PTR [eax],edx
c0020660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020664:	83 ec 0c             	sub    esp,0xc
c0020667:	50                   	push   eax
c0020668:	e8 51 24 ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c002066d:	83 c4 10             	add    esp,0x10
c0020670:	90                   	nop
c0020671:	83 c4 0c             	add    esp,0xc
c0020674:	c3                   	ret    
c0020675:	90                   	nop

c0020676 <ISO9660::~ISO9660()>:
c0020676:	83 ec 0c             	sub    esp,0xc
c0020679:	83 ec 0c             	sub    esp,0xc
c002067c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020680:	e8 cd ff ff ff       	call   c0020652 <ISO9660::~ISO9660()>
c0020685:	83 c4 10             	add    esp,0x10
c0020688:	83 ec 08             	sub    esp,0x8
c002068b:	6a 08                	push   0x8
c002068d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020691:	e8 1f 20 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0020696:	83 c4 10             	add    esp,0x10
c0020699:	83 c4 0c             	add    esp,0xc
c002069c:	c3                   	ret    

c002069d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002069d:	55                   	push   ebp
c002069e:	31 c9                	xor    ecx,ecx
c00206a0:	57                   	push   edi
c00206a1:	56                   	push   esi
c00206a2:	53                   	push   ebx
c00206a3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00206a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00206ab:	89 eb                	mov    ebx,ebp
c00206ad:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00206b1:	39 ce                	cmp    esi,ecx
c00206b3:	7e 17                	jle    c00206cc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00206b5:	31 d2                	xor    edx,edx
c00206b7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00206bb:	7d 13                	jge    c00206d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00206bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00206c1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00206c4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00206c7:	75 0d                	jne    c00206d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00206c9:	42                   	inc    edx
c00206ca:	eb eb                	jmp    c00206b7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00206cc:	31 c0                	xor    eax,eax
c00206ce:	eb 0a                	jmp    c00206da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206d0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00206d4:	eb 04                	jmp    c00206da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206d6:	41                   	inc    ecx
c00206d7:	43                   	inc    ebx
c00206d8:	eb d7                	jmp    c00206b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00206da:	5b                   	pop    ebx
c00206db:	5e                   	pop    esi
c00206dc:	5f                   	pop    edi
c00206dd:	5d                   	pop    ebp
c00206de:	c3                   	ret    

c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00206df:	56                   	push   esi
c00206e0:	53                   	push   ebx
c00206e1:	52                   	push   edx
c00206e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00206ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206ee:	39 0d 80 e0 02 c0    	cmp    DWORD PTR ds:0xc002e080,ecx
c00206f4:	75 08                	jne    c00206fe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00206f6:	38 05 f4 be 02 c0    	cmp    BYTE PTR ds:0xc002bef4,al
c00206fc:	74 2b                	je     c0020729 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	a2 f4 be 02 c0       	mov    ds:0xc002bef4,al
c0020706:	68 a0 e0 02 c0       	push   0xc002e0a0
c002070b:	0f be c0             	movsx  eax,al
c002070e:	6a 01                	push   0x1
c0020710:	89 0d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,ecx
c0020716:	31 db                	xor    ebx,ebx
c0020718:	53                   	push   ebx
c0020719:	51                   	push   ecx
c002071a:	ff 34 85 7c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3184]
c0020721:	e8 fc 56 ff ff       	call   c0015e22 <LogicalDisk::read(unsigned long long, int, void*)>
c0020726:	83 c4 20             	add    esp,0x20
c0020729:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020731:	c7 44 24 14 a0 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e0a0
c0020739:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002073d:	58                   	pop    eax
c002073e:	5b                   	pop    ebx
c002073f:	5e                   	pop    esi
c0020740:	e9 10 ff fd ff       	jmp    c0000655 <memcpy>
c0020745:	90                   	nop

c0020746 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020746:	81 ec 10 08 00 00    	sub    esp,0x810
c002074c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020753:	83 c0 41             	add    eax,0x41
c0020756:	0f be c0             	movsx  eax,al
c0020759:	50                   	push   eax
c002075a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002075e:	50                   	push   eax
c002075f:	6a 10                	push   0x10
c0020761:	e8 79 ff ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020766:	83 c4 10             	add    esp,0x10
c0020769:	31 c0                	xor    eax,eax
c002076b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020770:	75 1d                	jne    c002078f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020772:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020777:	75 16                	jne    c002078f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020779:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002077e:	75 0f                	jne    c002078f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020780:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020785:	75 08                	jne    c002078f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020787:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002078c:	0f 94 c0             	sete   al
c002078f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020795:	c3                   	ret    

c0020796 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020796:	55                   	push   ebp
c0020797:	57                   	push   edi
c0020798:	56                   	push   esi
c0020799:	53                   	push   ebx
c002079a:	81 ec 34 08 00 00    	sub    esp,0x834
c00207a0:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c00207a7:	55                   	push   ebp
c00207a8:	68 a7 ae 02 c0       	push   0xc002aea7
c00207ad:	e8 e3 1f ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00207b2:	83 c4 10             	add    esp,0x10
c00207b5:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00207bd:	0f 84 06 02 00 00    	je     c00209c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207c3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00207cb:	0f 84 f8 01 00 00    	je     c00209c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207d1:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00207d8:	b8 01 00 00 00       	mov    eax,0x1
c00207dd:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00207e1:	0f 85 e7 01 00 00    	jne    c00209ce <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00207e7:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00207ea:	31 d2                	xor    edx,edx
c00207ec:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00207ef:	89 e9                	mov    ecx,ebp
c00207f1:	89 d3                	mov    ebx,edx
c00207f3:	01 f1                	add    ecx,esi
c00207f5:	11 fb                	adc    ebx,edi
c00207f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00207ff:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0020806:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0020809:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c002080c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020810:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020814:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020818:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002081c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0020820:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020824:	72 19                	jb     c002083f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020826:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002082e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020832:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020839:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002083d:	eb 13                	jmp    c0020852 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c002083f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020843:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020847:	29 f0                	sub    eax,esi
c0020849:	19 fa                	sbb    edx,edi
c002084b:	89 04 24             	mov    DWORD PTR [esp],eax
c002084e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020852:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020859:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002085c:	8b 00                	mov    eax,DWORD PTR [eax]
c002085e:	53                   	push   ebx
c002085f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020863:	c1 e0 0b             	shl    eax,0xb
c0020866:	01 c6                	add    esi,eax
c0020868:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002086f:	11 d7                	adc    edi,edx
c0020871:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020875:	89 fa                	mov    edx,edi
c0020877:	50                   	push   eax
c0020878:	8d 44 24 28          	lea    eax,[esp+0x28]
c002087c:	50                   	push   eax
c002087d:	89 f0                	mov    eax,esi
c002087f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020883:	50                   	push   eax
c0020884:	e8 56 fe ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020889:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020894:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020897:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002089b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	b8 00 08 00 00       	mov    eax,0x800
c00208a9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00208ad:	29 d0                	sub    eax,edx
c00208af:	39 c1                	cmp    ecx,eax
c00208b1:	83 db 00             	sbb    ebx,0x0
c00208b4:	7d 19                	jge    c00208cf <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00208b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00208bb:	75 16                	jne    c00208d3 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00208bd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208ca:	e9 f6 00 00 00       	jmp    c00209c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00208cf:	89 c5                	mov    ebp,eax
c00208d1:	eb 03                	jmp    c00208d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00208d3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00208d6:	51                   	push   ecx
c00208d7:	55                   	push   ebp
c00208d8:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00208dc:	50                   	push   eax
c00208dd:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00208e4:	e8 6c fd fd ff       	call   c0000655 <memcpy>
c00208e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00208f1:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00208f8:	01 e8                	add    eax,ebp
c00208fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00208fe:	89 e8                	mov    eax,ebp
c0020900:	99                   	cdq    
c0020901:	01 ee                	add    esi,ebp
c0020903:	11 d7                	adc    edi,edx
c0020905:	29 e9                	sub    ecx,ebp
c0020907:	19 d3                	sbb    ebx,edx
c0020909:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002090d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020911:	83 c4 10             	add    esp,0x10
c0020914:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020919:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002091c:	b8 00 00 00 00       	mov    eax,0x0
c0020921:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020925:	7d 3f                	jge    c0020966 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020927:	52                   	push   edx
c0020928:	89 fa                	mov    edx,edi
c002092a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020931:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020935:	50                   	push   eax
c0020936:	89 f0                	mov    eax,esi
c0020938:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002093c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020940:	50                   	push   eax
c0020941:	e8 99 fd ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020946:	81 c6 00 08 00 00    	add    esi,0x800
c002094c:	83 d7 00             	adc    edi,0x0
c002094f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020957:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002095f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020964:	eb ab                	jmp    c0020911 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002096a:	0b 04 24             	or     eax,DWORD PTR [esp]
c002096d:	74 34                	je     c00209a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002096f:	89 fa                	mov    edx,edi
c0020971:	50                   	push   eax
c0020972:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020979:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002097d:	50                   	push   eax
c002097e:	89 f0                	mov    eax,esi
c0020980:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020984:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020988:	55                   	push   ebp
c0020989:	50                   	push   eax
c002098a:	e8 50 fd ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002098f:	83 c4 0c             	add    esp,0xc
c0020992:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020996:	55                   	push   ebp
c0020997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002099b:	e8 b5 fc fd ff       	call   c0000655 <memcpy>
c00209a0:	83 c4 10             	add    esp,0x10
c00209a3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00209aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00209ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209b2:	89 38                	mov    DWORD PTR [eax],edi
c00209b4:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00209bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209bf:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00209c2:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00209c5:	31 c0                	xor    eax,eax
c00209c7:	eb 05                	jmp    c00209ce <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00209c9:	b8 04 00 00 00       	mov    eax,0x4
c00209ce:	81 c4 2c 08 00 00    	add    esp,0x82c
c00209d4:	5b                   	pop    ebx
c00209d5:	5e                   	pop    esi
c00209d6:	5f                   	pop    edi
c00209d7:	5d                   	pop    ebp
c00209d8:	c3                   	ret    
c00209d9:	90                   	nop

c00209da <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00209da:	55                   	push   ebp
c00209db:	57                   	push   edi
c00209dc:	56                   	push   esi
c00209dd:	53                   	push   ebx
c00209de:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00209e4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00209eb:	85 f6                	test   esi,esi
c00209ed:	0f 84 64 02 00 00    	je     c0020c57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209f3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00209fb:	0f 84 56 02 00 00    	je     c0020c57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a01:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020a04:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020a07:	75 0a                	jne    c0020a13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020a09:	b8 07 00 00 00       	mov    eax,0x7
c0020a0e:	e9 49 02 00 00       	jmp    c0020c5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020a13:	50                   	push   eax
c0020a14:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a18:	50                   	push   eax
c0020a19:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a20:	53                   	push   ebx
c0020a21:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a23:	c1 e0 0b             	shl    eax,0xb
c0020a26:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a29:	c1 e8 0b             	shr    eax,0xb
c0020a2c:	50                   	push   eax
c0020a2d:	e8 ad fc ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a32:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a35:	83 c4 10             	add    esp,0x10
c0020a38:	89 c1                	mov    ecx,eax
c0020a3a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a3d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a43:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a46:	84 db                	test   bl,bl
c0020a48:	0f 85 90 00 00 00    	jne    c0020ade <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a4e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a54:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a5a:	29 c7                	sub    edi,eax
c0020a5c:	89 fb                	mov    ebx,edi
c0020a5e:	c1 fb 1f             	sar    ebx,0x1f
c0020a61:	01 f8                	add    eax,edi
c0020a63:	11 da                	adc    edx,ebx
c0020a65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a6d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a70:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a73:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020a76:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020a79:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a80:	89 d8                	mov    eax,ebx
c0020a82:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a85:	ba 00 00 00 00       	mov    edx,0x0
c0020a8a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a8e:	b8 00 00 00 00       	mov    eax,0x0
c0020a93:	73 0b                	jae    c0020aa0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020a95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a9c:	29 f8                	sub    eax,edi
c0020a9e:	19 da                	sbb    edx,ebx
c0020aa0:	89 d3                	mov    ebx,edx
c0020aa2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020aa5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020aa8:	09 c3                	or     ebx,eax
c0020aaa:	0f 84 59 ff ff ff    	je     c0020a09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020ab0:	55                   	push   ebp
c0020ab1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020ab5:	50                   	push   eax
c0020ab6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020abd:	53                   	push   ebx
c0020abe:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ac0:	c1 e0 0b             	shl    eax,0xb
c0020ac3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020ac7:	c1 e8 0b             	shr    eax,0xb
c0020aca:	50                   	push   eax
c0020acb:	e8 0f fc ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ad0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ad3:	83 c4 10             	add    esp,0x10
c0020ad6:	25 ff 07 00 00       	and    eax,0x7ff
c0020adb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020ade:	57                   	push   edi
c0020adf:	6a 28                	push   0x28
c0020ae1:	6a 00                	push   0x0
c0020ae3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ae7:	50                   	push   eax
c0020ae8:	e8 9e fb fd ff       	call   c000068b <memset>
c0020aed:	31 d2                	xor    edx,edx
c0020aef:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020af2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020af8:	89 f8                	mov    eax,edi
c0020afa:	83 c0 21             	add    eax,0x21
c0020afd:	83 d2 00             	adc    edx,0x0
c0020b00:	89 c7                	mov    edi,eax
c0020b02:	89 d5                	mov    ebp,edx
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	31 c9                	xor    ecx,ecx
c0020b09:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020b10:	83 f9 28             	cmp    ecx,0x28
c0020b13:	88 04 24             	mov    BYTE PTR [esp],al
c0020b16:	0f 94 c2             	sete   dl
c0020b19:	88 d0                	mov    al,dl
c0020b1b:	ba ff 07 00 00       	mov    edx,0x7ff
c0020b20:	39 fa                	cmp    edx,edi
c0020b22:	ba 00 00 00 00       	mov    edx,0x0
c0020b27:	19 ea                	sbb    edx,ebp
c0020b29:	0f 92 c2             	setb   dl
c0020b2c:	09 c2                	or     edx,eax
c0020b2e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b32:	0f 94 c0             	sete   al
c0020b35:	08 d0                	or     al,dl
c0020b37:	75 16                	jne    c0020b4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b39:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b3d:	74 10                	je     c0020b4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b3f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b42:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b46:	41                   	inc    ecx
c0020b47:	83 c7 01             	add    edi,0x1
c0020b4a:	83 d5 00             	adc    ebp,0x0
c0020b4d:	eb ba                	jmp    c0020b09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b4f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b56:	83 ec 0c             	sub    esp,0xc
c0020b59:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b5d:	57                   	push   edi
c0020b5e:	e8 45 fb fd ff       	call   c00006a8 <strlen>
c0020b63:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b6b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b6f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020b76:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b79:	5a                   	pop    edx
c0020b7a:	25 ff 07 00 00       	and    eax,0x7ff
c0020b7f:	01 c8                	add    eax,ecx
c0020b81:	59                   	pop    ecx
c0020b82:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020b88:	83 e0 02             	and    eax,0x2
c0020b8b:	3c 01                	cmp    al,0x1
c0020b8d:	19 c0                	sbb    eax,eax
c0020b8f:	83 c0 02             	add    eax,0x2
c0020b92:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b96:	57                   	push   edi
c0020b97:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020b9b:	50                   	push   eax
c0020b9c:	e8 89 fb fd ff       	call   c000072a <strcpy>
c0020ba1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020ba5:	83 c4 10             	add    esp,0x10
c0020ba8:	84 c0                	test   al,al
c0020baa:	75 21                	jne    c0020bcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020bac:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020bb4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bbc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bc4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020bcb:	eb 28                	jmp    c0020bf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bcd:	fe c8                	dec    al
c0020bcf:	75 24                	jne    c0020bf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bd1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020bd9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020be1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020be9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020bf0:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020bf5:	0f b6 fb             	movzx  edi,bl
c0020bf8:	31 db                	xor    ebx,ebx
c0020bfa:	50                   	push   eax
c0020bfb:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020c02:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020c06:	50                   	push   eax
c0020c07:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020c0e:	e8 42 fa fd ff       	call   c0000655 <memcpy>
c0020c13:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020c1a:	89 f9                	mov    ecx,edi
c0020c1c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c22:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020c25:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c28:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c2b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	39 c7                	cmp    edi,eax
c0020c33:	89 df                	mov    edi,ebx
c0020c35:	19 d7                	sbb    edi,edx
c0020c37:	72 10                	jb     c0020c49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c39:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c40:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c47:	eb 0a                	jmp    c0020c53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c49:	29 c8                	sub    eax,ecx
c0020c4b:	19 da                	sbb    edx,ebx
c0020c4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c53:	31 c0                	xor    eax,eax
c0020c55:	eb 05                	jmp    c0020c5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c57:	b8 04 00 00 00       	mov    eax,0x4
c0020c5c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c62:	5b                   	pop    ebx
c0020c63:	5e                   	pop    esi
c0020c64:	5f                   	pop    edi
c0020c65:	5d                   	pop    ebp
c0020c66:	c3                   	ret    

c0020c67 <readRoot(unsigned int*, unsigned int*, char)>:
c0020c67:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c6d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020c75:	50                   	push   eax
c0020c76:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020c7a:	50                   	push   eax
c0020c7b:	6a 10                	push   0x10
c0020c7d:	e8 5d fa ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c82:	83 c4 0c             	add    esp,0xc
c0020c85:	6a 22                	push   0x22
c0020c87:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020c8e:	50                   	push   eax
c0020c8f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c93:	50                   	push   eax
c0020c94:	e8 bc f9 fd ff       	call   c0000655 <memcpy>
c0020c99:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020ca4:	89 10                	mov    DWORD PTR [eax],edx
c0020ca6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020cad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020cb1:	89 10                	mov    DWORD PTR [eax],edx
c0020cb3:	b0 01                	mov    al,0x1
c0020cb5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020cbb:	c3                   	ret    

c0020cbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020cbc:	55                   	push   ebp
c0020cbd:	57                   	push   edi
c0020cbe:	56                   	push   esi
c0020cbf:	53                   	push   ebx
c0020cc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cc6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020ccd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cd8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020cdc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020ce0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ce4:	75 03                	jne    c0020ce9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020ce6:	83 c3 02             	add    ebx,0x2
c0020ce9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020cec:	75 03                	jne    c0020cf1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020cee:	43                   	inc    ebx
c0020cef:	eb f8                	jmp    c0020ce9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cf1:	51                   	push   ecx
c0020cf2:	68 00 01 00 00       	push   0x100
c0020cf7:	6a 00                	push   0x0
c0020cf9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020cfd:	50                   	push   eax
c0020cfe:	e8 88 f9 fd ff       	call   c000068b <memset>
c0020d03:	83 c4 10             	add    esp,0x10
c0020d06:	31 d2                	xor    edx,edx
c0020d08:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020d0b:	84 c0                	test   al,al
c0020d0d:	74 21                	je     c0020d30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020d0f:	3c 2f                	cmp    al,0x2f
c0020d11:	75 0b                	jne    c0020d1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020d13:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020d17:	bd 01 00 00 00       	mov    ebp,0x1
c0020d1c:	eb 14                	jmp    c0020d32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020d1e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020d21:	80 f9 19             	cmp    cl,0x19
c0020d24:	77 03                	ja     c0020d29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d26:	83 e8 20             	sub    eax,0x20
c0020d29:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d2d:	42                   	inc    edx
c0020d2e:	eb d8                	jmp    c0020d08 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d30:	31 ed                	xor    ebp,ebp
c0020d32:	83 ec 0c             	sub    esp,0xc
c0020d35:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d3c:	e8 93 e7 fe ff       	call   c000f4d4 <malloc>
c0020d41:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d48:	89 c6                	mov    esi,eax
c0020d4a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d50:	c1 ef 0b             	shr    edi,0xb
c0020d53:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d5a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d5e:	83 c4 10             	add    esp,0x10
c0020d61:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d6a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d71:	74 28                	je     c0020d9b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d73:	52                   	push   edx
c0020d74:	57                   	push   edi
c0020d75:	50                   	push   eax
c0020d76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d7a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020d81:	e8 59 f9 ff ff       	call   c00206df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d8a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020d91:	05 00 08 00 00       	add    eax,0x800
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	eb cb                	jmp    c0020d66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020d9b:	83 ec 0c             	sub    esp,0xc
c0020d9e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020da2:	57                   	push   edi
c0020da3:	e8 00 f9 fd ff       	call   c00006a8 <strlen>
c0020da8:	50                   	push   eax
c0020da9:	57                   	push   edi
c0020daa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020db1:	56                   	push   esi
c0020db2:	e8 e6 f8 ff ff       	call   c002069d <__memmem(unsigned char*, int, unsigned char*, int)>
c0020db7:	83 c4 20             	add    esp,0x20
c0020dba:	85 c0                	test   eax,eax
c0020dbc:	75 13                	jne    c0020dd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020dbe:	83 ec 0c             	sub    esp,0xc
c0020dc1:	56                   	push   esi
c0020dc2:	e8 1d e7 fe ff       	call   c000f4e4 <free>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	31 c0                	xor    eax,eax
c0020dcc:	e9 b3 00 00 00       	jmp    c0020e84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020dd1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020dd5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020dd9:	c1 e7 08             	shl    edi,0x8
c0020ddc:	c1 e2 10             	shl    edx,0x10
c0020ddf:	09 d7                	or     edi,edx
c0020de1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020de5:	09 d7                	or     edi,edx
c0020de7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020deb:	c1 e2 18             	shl    edx,0x18
c0020dee:	09 d7                	or     edi,edx
c0020df0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020df4:	89 d1                	mov    ecx,edx
c0020df6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020dfa:	c1 e1 08             	shl    ecx,0x8
c0020dfd:	c1 e2 10             	shl    edx,0x10
c0020e00:	09 ca                	or     edx,ecx
c0020e02:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020e06:	09 ca                	or     edx,ecx
c0020e08:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020e0c:	c1 e1 18             	shl    ecx,0x18
c0020e0f:	09 ca                	or     edx,ecx
c0020e11:	89 e9                	mov    ecx,ebp
c0020e13:	84 c9                	test   cl,cl
c0020e15:	74 3c                	je     c0020e53 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020e17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e1b:	83 ec 0c             	sub    esp,0xc
c0020e1e:	56                   	push   esi
c0020e1f:	e8 c0 e6 fe ff       	call   c000f4e4 <free>
c0020e24:	83 c4 0c             	add    esp,0xc
c0020e27:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e2e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e33:	50                   	push   eax
c0020e34:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e3b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e46:	52                   	push   edx
c0020e47:	57                   	push   edi
c0020e48:	53                   	push   ebx
c0020e49:	e8 6e fe ff ff       	call   c0020cbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e4e:	83 c4 20             	add    esp,0x20
c0020e51:	eb 31                	jmp    c0020e84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e53:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e56:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e5d:	d0 e8                	shr    al,1
c0020e5f:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e61:	83 e0 01             	and    eax,0x1
c0020e64:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e6b:	83 ec 0c             	sub    esp,0xc
c0020e6e:	89 13                	mov    DWORD PTR [ebx],edx
c0020e70:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020e77:	89 03                	mov    DWORD PTR [ebx],eax
c0020e79:	56                   	push   esi
c0020e7a:	e8 65 e6 fe ff       	call   c000f4e4 <free>
c0020e7f:	83 c4 10             	add    esp,0x10
c0020e82:	b0 01                	mov    al,0x1
c0020e84:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e8a:	5b                   	pop    ebx
c0020e8b:	5e                   	pop    esi
c0020e8c:	5f                   	pop    edi
c0020e8d:	5d                   	pop    ebp
c0020e8e:	c3                   	ret    

c0020e8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020e8f:	55                   	push   ebp
c0020e90:	57                   	push   edi
c0020e91:	56                   	push   esi
c0020e92:	53                   	push   ebx
c0020e93:	83 ec 20             	sub    esp,0x20
c0020e96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e9a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020e9e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020ea2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020eaa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020eb2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020eb7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020ebd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020ec3:	57                   	push   edi
c0020ec4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ec8:	50                   	push   eax
c0020ec9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ecd:	50                   	push   eax
c0020ece:	e8 94 fd ff ff       	call   c0020c67 <readRoot(unsigned int*, unsigned int*, char)>
c0020ed3:	5a                   	pop    edx
c0020ed4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ed8:	e8 cb f7 fd ff       	call   c00006a8 <strlen>
c0020edd:	83 c4 10             	add    esp,0x10
c0020ee0:	83 f8 03             	cmp    eax,0x3
c0020ee3:	77 17                	ja     c0020efc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ee5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ee9:	89 03                	mov    DWORD PTR [ebx],eax
c0020eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eef:	89 06                	mov    DWORD PTR [esi],eax
c0020ef1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020ef8:	b0 01                	mov    al,0x1
c0020efa:	eb 19                	jmp    c0020f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020efc:	50                   	push   eax
c0020efd:	55                   	push   ebp
c0020efe:	57                   	push   edi
c0020eff:	56                   	push   esi
c0020f00:	53                   	push   ebx
c0020f01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f09:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020f0d:	e8 aa fd ff ff       	call   c0020cbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020f12:	83 c4 20             	add    esp,0x20
c0020f15:	83 c4 1c             	add    esp,0x1c
c0020f18:	5b                   	pop    ebx
c0020f19:	5e                   	pop    esi
c0020f1a:	5f                   	pop    edi
c0020f1b:	5d                   	pop    ebp
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop

c0020f1e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020f1e:	57                   	push   edi
c0020f1f:	56                   	push   esi
c0020f20:	53                   	push   ebx
c0020f21:	83 ec 10             	sub    esp,0x10
c0020f24:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f28:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f2c:	85 ff                	test   edi,edi
c0020f2e:	74 7b                	je     c0020fab <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f30:	85 f6                	test   esi,esi
c0020f32:	74 77                	je     c0020fab <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f34:	83 ec 0c             	sub    esp,0xc
c0020f37:	6a 1c                	push   0x1c
c0020f39:	e8 96 e5 fe ff       	call   c000f4d4 <malloc>
c0020f3e:	89 07                	mov    DWORD PTR [edi],eax
c0020f40:	89 c3                	mov    ebx,eax
c0020f42:	58                   	pop    eax
c0020f43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f47:	50                   	push   eax
c0020f48:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f4b:	50                   	push   eax
c0020f4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f50:	50                   	push   eax
c0020f51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f55:	50                   	push   eax
c0020f56:	56                   	push   esi
c0020f57:	e8 33 ff ff ff       	call   c0020e8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f5c:	83 c4 20             	add    esp,0x20
c0020f5f:	84 c0                	test   al,al
c0020f61:	74 07                	je     c0020f6a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f63:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f68:	74 0b                	je     c0020f75 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f6a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f6e:	b8 01 00 00 00       	mov    eax,0x1
c0020f73:	eb 3b                	jmp    c0020fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f79:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020f7d:	89 03                	mov    DWORD PTR [ebx],eax
c0020f7f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020f86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020f91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020f9b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020fa2:	8a 06                	mov    al,BYTE PTR [esi]
c0020fa4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020fa7:	31 c0                	xor    eax,eax
c0020fa9:	eb 05                	jmp    c0020fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020fab:	b8 04 00 00 00       	mov    eax,0x4
c0020fb0:	83 c4 10             	add    esp,0x10
c0020fb3:	5b                   	pop    ebx
c0020fb4:	5e                   	pop    esi
c0020fb5:	5f                   	pop    edi
c0020fb6:	c3                   	ret    
c0020fb7:	90                   	nop

c0020fb8 <ISO9660::exists(char const*)>:
c0020fb8:	83 ec 28             	sub    esp,0x28
c0020fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020fbf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020fc3:	52                   	push   edx
c0020fc4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020fc7:	52                   	push   edx
c0020fc8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fcc:	52                   	push   edx
c0020fcd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fd1:	52                   	push   edx
c0020fd2:	50                   	push   eax
c0020fd3:	e8 b7 fe ff ff       	call   c0020e8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fd8:	83 c4 3c             	add    esp,0x3c
c0020fdb:	c3                   	ret    

c0020fdc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020fdc:	56                   	push   esi
c0020fdd:	53                   	push   ebx
c0020fde:	83 ec 14             	sub    esp,0x14
c0020fe1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020fe5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020fe9:	85 db                	test   ebx,ebx
c0020feb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020fef:	0f 94 c2             	sete   dl
c0020ff2:	85 f6                	test   esi,esi
c0020ff4:	0f 94 c0             	sete   al
c0020ff7:	08 c2                	or     dl,al
c0020ff9:	75 68                	jne    c0021063 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020ffb:	85 c9                	test   ecx,ecx
c0020ffd:	74 64                	je     c0021063 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fff:	83 ec 0c             	sub    esp,0xc
c0021002:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021005:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021009:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002100f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021016:	50                   	push   eax
c0021017:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002101a:	50                   	push   eax
c002101b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002101f:	50                   	push   eax
c0021020:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021024:	50                   	push   eax
c0021025:	51                   	push   ecx
c0021026:	e8 64 fe ff ff       	call   c0020e8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002102b:	83 c4 20             	add    esp,0x20
c002102e:	ba 01 00 00 00       	mov    edx,0x1
c0021033:	84 c0                	test   al,al
c0021035:	74 31                	je     c0021068 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002103b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021042:	89 03                	mov    DWORD PTR [ebx],eax
c0021044:	ba 00 00 00 00       	mov    edx,0x0
c0021049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002104d:	85 c0                	test   eax,eax
c002104f:	0f 95 06             	setne  BYTE PTR [esi]
c0021052:	74 14                	je     c0021068 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021054:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002105a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021061:	eb 05                	jmp    c0021068 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021063:	ba 04 00 00 00       	mov    edx,0x4
c0021068:	83 c4 14             	add    esp,0x14
c002106b:	89 d0                	mov    eax,edx
c002106d:	5b                   	pop    ebx
c002106e:	5e                   	pop    esi
c002106f:	c3                   	ret    

c0021070 <ISO9660::openDir(char const*, void**)>:
c0021070:	57                   	push   edi
c0021071:	56                   	push   esi
c0021072:	53                   	push   ebx
c0021073:	83 ec 10             	sub    esp,0x10
c0021076:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002107a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002107e:	85 ff                	test   edi,edi
c0021080:	0f 84 95 00 00 00    	je     c002111b <ISO9660::openDir(char const*, void**)+0xab>
c0021086:	85 f6                	test   esi,esi
c0021088:	0f 84 8d 00 00 00    	je     c002111b <ISO9660::openDir(char const*, void**)+0xab>
c002108e:	83 ec 0c             	sub    esp,0xc
c0021091:	6a 1c                	push   0x1c
c0021093:	e8 3c e4 fe ff       	call   c000f4d4 <malloc>
c0021098:	89 07                	mov    DWORD PTR [edi],eax
c002109a:	89 c3                	mov    ebx,eax
c002109c:	59                   	pop    ecx
c002109d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210a1:	50                   	push   eax
c00210a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00210a5:	50                   	push   eax
c00210a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210aa:	50                   	push   eax
c00210ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210af:	50                   	push   eax
c00210b0:	56                   	push   esi
c00210b1:	e8 d9 fd ff ff       	call   c0020e8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210b6:	83 c4 20             	add    esp,0x20
c00210b9:	84 c0                	test   al,al
c00210bb:	74 07                	je     c00210c4 <ISO9660::openDir(char const*, void**)+0x54>
c00210bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00210c2:	75 21                	jne    c00210e5 <ISO9660::openDir(char const*, void**)+0x75>
c00210c4:	0f b6 c0             	movzx  eax,al
c00210c7:	52                   	push   edx
c00210c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210cc:	50                   	push   eax
c00210cd:	68 ba ae 02 c0       	push   0xc002aeba
c00210d2:	e8 be 16 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00210d7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	b8 01 00 00 00       	mov    eax,0x1
c00210e3:	eb 3b                	jmp    c0021120 <ISO9660::openDir(char const*, void**)+0xb0>
c00210e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210e9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00210ed:	89 03                	mov    DWORD PTR [ebx],eax
c00210ef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00210f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021101:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021108:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002110b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021112:	8a 06                	mov    al,BYTE PTR [esi]
c0021114:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021117:	31 c0                	xor    eax,eax
c0021119:	eb 05                	jmp    c0021120 <ISO9660::openDir(char const*, void**)+0xb0>
c002111b:	b8 04 00 00 00       	mov    eax,0x4
c0021120:	83 c4 10             	add    esp,0x10
c0021123:	5b                   	pop    ebx
c0021124:	5e                   	pop    esi
c0021125:	5f                   	pop    edi
c0021126:	c3                   	ret    
c0021127:	90                   	nop

c0021128 <ISO9660::ISO9660()>:
c0021128:	83 ec 0c             	sub    esp,0xc
c002112b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112f:	83 ec 0c             	sub    esp,0xc
c0021132:	50                   	push   eax
c0021133:	e8 62 19 ff ff       	call   c0012a9a <Filesystem::Filesystem()>
c0021138:	83 c4 10             	add    esp,0x10
c002113b:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c0021140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021144:	89 10                	mov    DWORD PTR [eax],edx
c0021146:	90                   	nop
c0021147:	83 c4 0c             	add    esp,0xc
c002114a:	c3                   	ret    
c002114b:	90                   	nop

c002114c <SoundChannel::~SoundChannel()>:
c002114c:	83 ec 0c             	sub    esp,0xc
c002114f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021153:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021156:	83 ec 0c             	sub    esp,0xc
c0021159:	50                   	push   eax
c002115a:	e8 85 e3 fe ff       	call   c000f4e4 <free>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	90                   	nop
c0021163:	83 c4 0c             	add    esp,0xc
c0021166:	c3                   	ret    
c0021167:	90                   	nop

c0021168 <SoundChannel::setSpeed(float)>:
c0021168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002116c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021170:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021173:	c3                   	ret    

c0021174 <SoundChannel::getSpeed()>:
c0021174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021178:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002117b:	c3                   	ret    

c002117c <SoundChannel::setVolume(int)>:
c002117c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021180:	83 f8 64             	cmp    eax,0x64
c0021183:	7e 05                	jle    c002118a <SoundChannel::setVolume(int)+0xe>
c0021185:	b8 64 00 00 00       	mov    eax,0x64
c002118a:	85 c0                	test   eax,eax
c002118c:	79 02                	jns    c0021190 <SoundChannel::setVolume(int)+0x14>
c002118e:	31 c0                	xor    eax,eax
c0021190:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021194:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021197:	c3                   	ret    

c0021198 <SoundChannel::getVolume()>:
c0021198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002119c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002119f:	c3                   	ret    

c00211a0 <SoundChannel::pause()>:
c00211a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211a4:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00211a8:	c3                   	ret    
c00211a9:	90                   	nop

c00211aa <SoundChannel::SoundChannel(int, int, int, int)>:
c00211aa:	83 ec 1c             	sub    esp,0x1c
c00211ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211b1:	e8 ea ff ff ff       	call   c00211a0 <SoundChannel::pause()>
c00211b6:	83 c4 04             	add    esp,0x4
c00211b9:	6a 50                	push   0x50
c00211bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211bf:	e8 b8 ff ff ff       	call   c002117c <SoundChannel::setVolume(int)>
c00211c4:	83 c4 08             	add    esp,0x8
c00211c7:	a1 58 af 02 c0       	mov    eax,ds:0xc002af58
c00211cc:	50                   	push   eax
c00211cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211d1:	e8 92 ff ff ff       	call   c0021168 <SoundChannel::setSpeed(float)>
c00211d6:	83 c4 08             	add    esp,0x8
c00211d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00211e1:	89 10                	mov    DWORD PTR [eax],edx
c00211e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211f9:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00211fe:	75 23                	jne    c0021223 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021204:	8b 10                	mov    edx,DWORD PTR [eax]
c0021206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002120a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002120d:	0f af c2             	imul   eax,edx
c0021210:	85 c0                	test   eax,eax
c0021212:	79 03                	jns    c0021217 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021214:	83 c0 03             	add    eax,0x3
c0021217:	c1 f8 02             	sar    eax,0x2
c002121a:	05 a0 0f 00 00       	add    eax,0xfa0
c002121f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021227:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002122b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002122e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021232:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002123d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021248:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002124b:	c1 e0 02             	shl    eax,0x2
c002124e:	83 ec 0c             	sub    esp,0xc
c0021251:	50                   	push   eax
c0021252:	e8 7d e2 fe ff       	call   c000f4d4 <malloc>
c0021257:	83 c4 10             	add    esp,0x10
c002125a:	89 c2                	mov    edx,eax
c002125c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021263:	83 ec 04             	sub    esp,0x4
c0021266:	8d 44 24 08          	lea    eax,[esp+0x8]
c002126a:	50                   	push   eax
c002126b:	6a 01                	push   0x1
c002126d:	6a 04                	push   0x4
c002126f:	e8 db 76 fe ff       	call   c000894f <src_new>
c0021274:	83 c4 10             	add    esp,0x10
c0021277:	89 c2                	mov    edx,eax
c0021279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002127d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021284:	85 c0                	test   eax,eax
c0021286:	74 10                	je     c0021298 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021288:	83 ec 0c             	sub    esp,0xc
c002128b:	68 3c af 02 c0       	push   0xc002af3c
c0021290:	e8 1a 86 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0021295:	83 c4 10             	add    esp,0x10
c0021298:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c002129d:	83 f0 01             	xor    eax,0x1
c00212a0:	84 c0                	test   al,al
c00212a2:	74 57                	je     c00212fb <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00212a4:	a1 5c af 02 c0       	mov    eax,ds:0xc002af5c
c00212a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212b5:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00212bd:	7f 35                	jg     c00212f4 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00212bf:	83 ec 0c             	sub    esp,0xc
c00212c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00212c6:	e8 2c 4a 00 00       	call   c0025cf7 <__floatsisf>
c00212cb:	83 c4 10             	add    esp,0x10
c00212ce:	8b 15 5c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af5c
c00212d4:	83 ec 08             	sub    esp,0x8
c00212d7:	52                   	push   edx
c00212d8:	50                   	push   eax
c00212d9:	e8 2b 46 00 00       	call   c0025909 <__mulsf3>
c00212de:	83 c4 10             	add    esp,0x10
c00212e1:	89 c2                	mov    edx,eax
c00212e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212e7:	89 14 85 a0 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1760],edx
c00212ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212f2:	eb c1                	jmp    c00212b5 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00212f4:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c00212fb:	90                   	nop
c00212fc:	83 c4 1c             	add    esp,0x1c
c00212ff:	c3                   	ret    

c0021300 <SoundChannel::play()>:
c0021300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021304:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021308:	c3                   	ret    
c0021309:	90                   	nop

c002130a <SoundChannel::paused()>:
c002130a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002130e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021311:	c3                   	ret    

c0021312 <SoundChannel::getSampleRate()>:
c0021312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021316:	8b 00                	mov    eax,DWORD PTR [eax]
c0021318:	c3                   	ret    
c0021319:	90                   	nop

c002131a <SoundChannel::getBits()>:
c002131a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021321:	c3                   	ret    

c0021322 <SoundChannel::getBufferUsed()>:
c0021322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021326:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021329:	c3                   	ret    

c002132a <SoundChannel::getBufferSize()>:
c002132a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002132e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021331:	c3                   	ret    

c0021332 <SoundChannel::unbuffer(float*, int, int)>:
c0021332:	56                   	push   esi
c0021333:	53                   	push   ebx
c0021334:	83 ec 40             	sub    esp,0x40
c0021337:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002133b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002133e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021342:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021345:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021349:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002134d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021351:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021355:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021359:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002135d:	e8 95 49 00 00       	call   c0025cf7 <__floatsisf>
c0021362:	5a                   	pop    edx
c0021363:	89 c6                	mov    esi,eax
c0021365:	ff 33                	push   DWORD PTR [ebx]
c0021367:	e8 8b 49 00 00       	call   c0025cf7 <__floatsisf>
c002136c:	59                   	pop    ecx
c002136d:	5a                   	pop    edx
c002136e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021371:	50                   	push   eax
c0021372:	e8 92 45 00 00       	call   c0025909 <__mulsf3>
c0021377:	59                   	pop    ecx
c0021378:	5a                   	pop    edx
c0021379:	50                   	push   eax
c002137a:	56                   	push   esi
c002137b:	e8 4c 47 00 00       	call   c0025acc <__divsf3>
c0021380:	89 04 24             	mov    DWORD PTR [esp],eax
c0021383:	e8 3f 5c 00 00       	call   c0026fc7 <__extendsfdf2>
c0021388:	59                   	pop    ecx
c0021389:	5e                   	pop    esi
c002138a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002138e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021392:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002139a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002139e:	50                   	push   eax
c002139f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00213a2:	e8 9d 71 fe ff       	call   c0008544 <src_process>
c00213a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00213ab:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00213ae:	83 c4 0c             	add    esp,0xc
c00213b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00213b4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00213b7:	29 d0                	sub    eax,edx
c00213b9:	c1 e0 02             	shl    eax,0x2
c00213bc:	50                   	push   eax
c00213bd:	8d 04 91             	lea    eax,[ecx+edx*4]
c00213c0:	50                   	push   eax
c00213c1:	51                   	push   ecx
c00213c2:	e8 56 f2 fd ff       	call   c000061d <memmove>
c00213c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213cb:	83 c4 44             	add    esp,0x44
c00213ce:	5b                   	pop    ebx
c00213cf:	5e                   	pop    esi
c00213d0:	c3                   	ret    
c00213d1:	90                   	nop

c00213d2 <SoundChannel::buffer8(unsigned char*, int)>:
c00213d2:	55                   	push   ebp
c00213d3:	57                   	push   edi
c00213d4:	56                   	push   esi
c00213d5:	53                   	push   ebx
c00213d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213da:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00213de:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213e5:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213e8:	74 7a                	je     c0021464 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213ea:	85 ff                	test   edi,edi
c00213ec:	7e 76                	jle    c0021464 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213ee:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00213f2:	8d 70 01             	lea    esi,[eax+0x1]
c00213f5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213f8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213fb:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c0021402:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021405:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021408:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002140b:	74 5e                	je     c002146b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002140d:	83 ff 01             	cmp    edi,0x1
c0021410:	74 4b                	je     c002145d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021412:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021416:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021419:	8d 70 01             	lea    esi,[eax+0x1]
c002141c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002141f:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c0021426:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021429:	b8 02 00 00 00       	mov    eax,0x2
c002142e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021431:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021434:	75 23                	jne    c0021459 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021436:	eb 27                	jmp    c002145f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021438:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002143d:	8d 71 01             	lea    esi,[ecx+0x1]
c0021440:	40                   	inc    eax
c0021441:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021444:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021447:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c002144e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021451:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021454:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021457:	74 06                	je     c002145f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021459:	39 c7                	cmp    edi,eax
c002145b:	75 db                	jne    c0021438 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002145d:	89 f8                	mov    eax,edi
c002145f:	5b                   	pop    ebx
c0021460:	5e                   	pop    esi
c0021461:	5f                   	pop    edi
c0021462:	5d                   	pop    ebp
c0021463:	c3                   	ret    
c0021464:	5b                   	pop    ebx
c0021465:	31 c0                	xor    eax,eax
c0021467:	5e                   	pop    esi
c0021468:	5f                   	pop    edi
c0021469:	5d                   	pop    ebp
c002146a:	c3                   	ret    
c002146b:	b8 01 00 00 00       	mov    eax,0x1
c0021470:	eb ed                	jmp    c002145f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021472 <SoundDevice::SoundDevice(char const*)>:
c0021472:	83 ec 1c             	sub    esp,0x1c
c0021475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021479:	83 ec 08             	sub    esp,0x8
c002147c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021480:	50                   	push   eax
c0021481:	e8 ee 28 ff ff       	call   c0013d74 <Device::Device(char const*)>
c0021486:	83 c4 10             	add    esp,0x10
c0021489:	ba 68 af 02 c0       	mov    edx,0xc002af68
c002148e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021492:	89 10                	mov    DWORD PTR [eax],edx
c0021494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021498:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00214a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00214b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214b8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214bd:	7f 19                	jg     c00214d8 <SoundDevice::SoundDevice(char const*)+0x66>
c00214bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214c7:	83 c2 54             	add    edx,0x54
c00214ca:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00214d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00214d6:	eb e0                	jmp    c00214b8 <SoundDevice::SoundDevice(char const*)+0x46>
c00214d8:	90                   	nop
c00214d9:	83 c4 1c             	add    esp,0x1c
c00214dc:	c3                   	ret    
c00214dd:	90                   	nop

c00214de <SoundDevice::~SoundDevice()>:
c00214de:	53                   	push   ebx
c00214df:	83 ec 18             	sub    esp,0x18
c00214e2:	ba 68 af 02 c0       	mov    edx,0xc002af68
c00214e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214eb:	89 10                	mov    DWORD PTR [eax],edx
c00214ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214f5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214fa:	7f 46                	jg     c0021542 <SoundDevice::~SoundDevice()+0x64>
c00214fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021500:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021504:	83 c2 54             	add    edx,0x54
c0021507:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002150b:	85 c0                	test   eax,eax
c002150d:	74 2d                	je     c002153c <SoundDevice::~SoundDevice()+0x5e>
c002150f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021517:	83 c2 54             	add    edx,0x54
c002151a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002151e:	85 db                	test   ebx,ebx
c0021520:	74 1a                	je     c002153c <SoundDevice::~SoundDevice()+0x5e>
c0021522:	83 ec 0c             	sub    esp,0xc
c0021525:	53                   	push   ebx
c0021526:	e8 21 fc ff ff       	call   c002114c <SoundChannel::~SoundChannel()>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	83 ec 08             	sub    esp,0x8
c0021531:	6a 2c                	push   0x2c
c0021533:	53                   	push   ebx
c0021534:	e8 7c 11 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021540:	eb b3                	jmp    c00214f5 <SoundDevice::~SoundDevice()+0x17>
c0021542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021546:	83 ec 0c             	sub    esp,0xc
c0021549:	50                   	push   eax
c002154a:	e8 07 25 ff ff       	call   c0013a56 <Device::~Device()>
c002154f:	83 c4 10             	add    esp,0x10
c0021552:	90                   	nop
c0021553:	83 c4 18             	add    esp,0x18
c0021556:	5b                   	pop    ebx
c0021557:	c3                   	ret    

c0021558 <SoundDevice::~SoundDevice()>:
c0021558:	83 ec 0c             	sub    esp,0xc
c002155b:	83 ec 0c             	sub    esp,0xc
c002155e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021562:	e8 77 ff ff ff       	call   c00214de <SoundDevice::~SoundDevice()>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	83 ec 08             	sub    esp,0x8
c002156d:	68 e4 01 00 00       	push   0x1e4
c0021572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021576:	e8 3a 11 ff ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c002157b:	83 c4 10             	add    esp,0x10
c002157e:	83 c4 0c             	add    esp,0xc
c0021581:	c3                   	ret    

c0021582 <SoundDevice::getFreeChannelNum()>:
c0021582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021586:	31 c0                	xor    eax,eax
c0021588:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021590:	74 09                	je     c002159b <SoundDevice::getFreeChannelNum()+0x19>
c0021592:	40                   	inc    eax
c0021593:	83 f8 20             	cmp    eax,0x20
c0021596:	75 f0                	jne    c0021588 <SoundDevice::getFreeChannelNum()+0x6>
c0021598:	83 c8 ff             	or     eax,0xffffffff
c002159b:	c3                   	ret    

c002159c <SoundDevice::addChannel(SoundChannel*)>:
c002159c:	56                   	push   esi
c002159d:	53                   	push   ebx
c002159e:	51                   	push   ecx
c002159f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00215a7:	53                   	push   ebx
c00215a8:	e8 d5 ff ff ff       	call   c0021582 <SoundDevice::getFreeChannelNum()>
c00215ad:	5a                   	pop    edx
c00215ae:	83 f8 ff             	cmp    eax,0xffffffff
c00215b1:	74 51                	je     c0021604 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215b3:	85 f6                	test   esi,esi
c00215b5:	74 4d                	je     c0021604 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215b7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00215be:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00215c5:	75 30                	jne    c00215f7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00215c7:	83 ec 0c             	sub    esp,0xc
c00215ca:	56                   	push   esi
c00215cb:	e8 42 fd ff ff       	call   c0021312 <SoundChannel::getSampleRate()>
c00215d0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00215d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00215d9:	e8 3c fd ff ff       	call   c002131a <SoundChannel::getBits()>
c00215de:	83 c4 0c             	add    esp,0xc
c00215e1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00215e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215e9:	50                   	push   eax
c00215ea:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00215f0:	53                   	push   ebx
c00215f1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00215f4:	83 c4 10             	add    esp,0x10
c00215f7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00215fd:	b8 01 00 00 00       	mov    eax,0x1
c0021602:	eb 03                	jmp    c0021607 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021604:	83 c8 ff             	or     eax,0xffffffff
c0021607:	5a                   	pop    edx
c0021608:	5b                   	pop    ebx
c0021609:	5e                   	pop    esi
c002160a:	c3                   	ret    
c002160b:	90                   	nop

c002160c <SoundDevice::removeChannel(int)>:
c002160c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021614:	83 fa 1f             	cmp    edx,0x1f
c0021617:	77 23                	ja     c002163c <SoundDevice::removeChannel(int)+0x30>
c0021619:	8d 14 90             	lea    edx,[eax+edx*4]
c002161c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021623:	74 17                	je     c002163c <SoundDevice::removeChannel(int)+0x30>
c0021625:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002162f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021635:	75 05                	jne    c002163c <SoundDevice::removeChannel(int)+0x30>
c0021637:	8b 00                	mov    eax,DWORD PTR [eax]
c0021639:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002163c:	c3                   	ret    
c002163d:	90                   	nop

c002163e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002163e:	57                   	push   edi
c002163f:	56                   	push   esi
c0021640:	53                   	push   ebx
c0021641:	31 db                	xor    ebx,ebx
c0021643:	83 ec 10             	sub    esp,0x10
c0021646:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002164a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002164e:	0f 8d cb 00 00 00    	jge    c002171f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021654:	83 ec 0c             	sub    esp,0xc
c0021657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002165b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002165e:	e8 64 59 00 00       	call   c0026fc7 <__extendsfdf2>
c0021663:	83 c4 10             	add    esp,0x10
c0021666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002166a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002166e:	68 00 00 f0 3f       	push   0x3ff00000
c0021673:	6a 00                	push   0x0
c0021675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002167d:	e8 d1 48 00 00       	call   c0025f53 <__adddf3>
c0021682:	83 c4 10             	add    esp,0x10
c0021685:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021689:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002168d:	68 00 00 e0 3f       	push   0x3fe00000
c0021692:	6a 00                	push   0x0
c0021694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002169c:	e8 2f 4f 00 00       	call   c00265d0 <__muldf3>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216ac:	68 00 00 60 40       	push   0x40600000
c00216b1:	6a 00                	push   0x0
c00216b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216bb:	e8 10 4f 00 00       	call   c00265d0 <__muldf3>
c00216c0:	59                   	pop    ecx
c00216c1:	5f                   	pop    edi
c00216c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00216c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00216ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216d2:	e8 cc 57 00 00       	call   c0026ea3 <__truncdfsf2>
c00216d7:	5a                   	pop    edx
c00216d8:	89 c7                	mov    edi,eax
c00216da:	59                   	pop    ecx
c00216db:	68 00 00 fe 42       	push   0x42fe0000
c00216e0:	50                   	push   eax
c00216e1:	e8 67 48 00 00       	call   c0025f4d <__gesf2>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	85 c0                	test   eax,eax
c00216eb:	78 06                	js     c00216f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00216ed:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00216f1:	eb 26                	jmp    c0021719 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216f3:	50                   	push   eax
c00216f4:	50                   	push   eax
c00216f5:	6a 00                	push   0x0
c00216f7:	57                   	push   edi
c00216f8:	e8 54 48 00 00       	call   c0025f51 <__lesf2>
c00216fd:	83 c4 10             	add    esp,0x10
c0021700:	85 c0                	test   eax,eax
c0021702:	7f 06                	jg     c002170a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021704:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021708:	eb 0f                	jmp    c0021719 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002170a:	83 ec 0c             	sub    esp,0xc
c002170d:	57                   	push   edi
c002170e:	e8 49 59 00 00       	call   c002705c <lrintf>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021719:	43                   	inc    ebx
c002171a:	e9 2b ff ff ff       	jmp    c002164a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	5b                   	pop    ebx
c0021723:	5e                   	pop    esi
c0021724:	5f                   	pop    edi
c0021725:	c3                   	ret    

c0021726 <SoundDevice::getAudio(int, float*, float*)>:
c0021726:	55                   	push   ebp
c0021727:	57                   	push   edi
c0021728:	56                   	push   esi
c0021729:	53                   	push   ebx
c002172a:	31 db                	xor    ebx,ebx
c002172c:	83 ec 20             	sub    esp,0x20
c002172f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021733:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021737:	c1 e0 02             	shl    eax,0x2
c002173a:	50                   	push   eax
c002173b:	6a 00                	push   0x0
c002173d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021741:	e8 45 ef fd ff       	call   c000068b <memset>
c0021746:	83 c4 10             	add    esp,0x10
c0021749:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002174d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021754:	85 c0                	test   eax,eax
c0021756:	0f 84 d7 00 00 00    	je     c0021833 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	50                   	push   eax
c0021760:	e8 a5 fb ff ff       	call   c002130a <SoundChannel::paused()>
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	84 c0                	test   al,al
c002176a:	0f 85 c3 00 00 00    	jne    c0021833 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021770:	83 ec 0c             	sub    esp,0xc
c0021773:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002177a:	e8 19 fa ff ff       	call   c0021198 <SoundChannel::getVolume()>
c002177f:	83 c4 10             	add    esp,0x10
c0021782:	85 c0                	test   eax,eax
c0021784:	0f 84 a9 00 00 00    	je     c0021833 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002178a:	83 ec 0c             	sub    esp,0xc
c002178d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021794:	e8 ff f9 ff ff       	call   c0021198 <SoundChannel::getVolume()>
c0021799:	83 ec 0c             	sub    esp,0xc
c002179c:	50                   	push   eax
c002179d:	e8 55 45 00 00       	call   c0025cf7 <__floatsisf>
c00217a2:	59                   	pop    ecx
c00217a3:	5d                   	pop    ebp
c00217a4:	31 ed                	xor    ebp,ebp
c00217a6:	68 00 00 c8 42       	push   0x42c80000
c00217ab:	50                   	push   eax
c00217ac:	e8 1b 43 00 00       	call   c0025acc <__divsf3>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217b8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00217bc:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00217c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00217c6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217cd:	e8 60 fb ff ff       	call   c0021332 <SoundChannel::unbuffer(float*, int, int)>
c00217d2:	83 c4 20             	add    esp,0x20
c00217d5:	89 c1                	mov    ecx,eax
c00217d7:	39 cd                	cmp    ebp,ecx
c00217d9:	7d 52                	jge    c002182d <SoundDevice::getAudio(int, float*, float*)+0x107>
c00217db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00217df:	50                   	push   eax
c00217e0:	50                   	push   eax
c00217e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00217e5:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217ec:	e8 18 41 00 00       	call   c0025909 <__mulsf3>
c00217f1:	5a                   	pop    edx
c00217f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217f6:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00217fc:	e8 f6 44 00 00       	call   c0025cf7 <__floatsisf>
c0021801:	59                   	pop    ecx
c0021802:	5a                   	pop    edx
c0021803:	50                   	push   eax
c0021804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021808:	e8 bf 42 00 00       	call   c0025acc <__divsf3>
c002180d:	59                   	pop    ecx
c002180e:	5a                   	pop    edx
c002180f:	50                   	push   eax
c0021810:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021814:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021817:	e8 ca 3d 00 00       	call   c00255e6 <__addsf3>
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021823:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021827:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002182a:	45                   	inc    ebp
c002182b:	eb aa                	jmp    c00217d7 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002182d:	39 cf                	cmp    edi,ecx
c002182f:	7e 02                	jle    c0021833 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021831:	89 cf                	mov    edi,ecx
c0021833:	43                   	inc    ebx
c0021834:	83 fb 20             	cmp    ebx,0x20
c0021837:	0f 85 10 ff ff ff    	jne    c002174d <SoundDevice::getAudio(int, float*, float*)+0x27>
c002183d:	83 c4 1c             	add    esp,0x1c
c0021840:	89 f8                	mov    eax,edi
c0021842:	5b                   	pop    ebx
c0021843:	5e                   	pop    esi
c0021844:	5f                   	pop    edi
c0021845:	5d                   	pop    ebp
c0021846:	c3                   	ret    
c0021847:	90                   	nop

c0021848 <PCI::open(int, int, void*)>:
c0021848:	83 ec 18             	sub    esp,0x18
c002184b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002184f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021851:	50                   	push   eax
c0021852:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021855:	31 c0                	xor    eax,eax
c0021857:	83 c4 1c             	add    esp,0x1c
c002185a:	c3                   	ret    
c002185b:	90                   	nop

c002185c <PCI::close(int, int, void*)>:
c002185c:	31 c0                	xor    eax,eax
c002185e:	c3                   	ret    
c002185f:	90                   	nop

c0021860 <PCI::PCI()>:
c0021860:	83 ec 0c             	sub    esp,0xc
c0021863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021867:	83 ec 08             	sub    esp,0x8
c002186a:	68 98 af 02 c0       	push   0xc002af98
c002186f:	50                   	push   eax
c0021870:	e8 bb 1b ff ff       	call   c0013430 <Bus::Bus(char const*)>
c0021875:	83 c4 10             	add    esp,0x10
c0021878:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c002187d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021881:	89 10                	mov    DWORD PTR [eax],edx
c0021883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021887:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002188d:	0f b6 d0             	movzx  edx,al
c0021890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021894:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002189b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002189f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218a5:	0f b6 d0             	movzx  edx,al
c00218a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ac:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00218b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218bb:	8d 50 01             	lea    edx,[eax+0x1]
c00218be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00218c8:	0f b6 d0             	movzx  edx,al
c00218cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00218d3:	83 c9 c0             	or     ecx,0xffffffc0
c00218d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00218da:	90                   	nop
c00218db:	83 c4 0c             	add    esp,0xc
c00218de:	c3                   	ret    
c00218df:	90                   	nop

c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00218e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218e9:	89 ca                	mov    edx,ecx
c00218eb:	c1 e0 10             	shl    eax,0x10
c00218ee:	81 e2 fc 00 00 00    	and    edx,0xfc
c00218f4:	09 d0                	or     eax,edx
c00218f6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00218fb:	c1 e2 08             	shl    edx,0x8
c00218fe:	09 d0                	or     eax,edx
c0021900:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021905:	c1 e2 0b             	shl    edx,0xb
c0021908:	09 d0                	or     eax,edx
c002190a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002190f:	0d 00 00 00 80       	or     eax,0x80000000
c0021914:	ef                   	out    dx,eax
c0021915:	ba fc 0c 00 00       	mov    edx,0xcfc
c002191a:	ed                   	in     eax,dx
c002191b:	83 e1 02             	and    ecx,0x2
c002191e:	0f b6 c9             	movzx  ecx,cl
c0021921:	c1 e1 03             	shl    ecx,0x3
c0021924:	d3 e8                	shr    eax,cl
c0021926:	c3                   	ret    
c0021927:	90                   	nop

c0021928 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021928:	6a 00                	push   0x0
c002192a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002192f:	50                   	push   eax
c0021930:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021935:	50                   	push   eax
c0021936:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002193b:	50                   	push   eax
c002193c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021940:	e8 9b ff ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021945:	83 c4 14             	add    esp,0x14
c0021948:	c3                   	ret    
c0021949:	90                   	nop

c002194a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002194a:	6a 0e                	push   0xe
c002194c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021951:	50                   	push   eax
c0021952:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021957:	50                   	push   eax
c0021958:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002195d:	50                   	push   eax
c002195e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021962:	e8 79 ff ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021967:	83 c4 14             	add    esp,0x14
c002196a:	0f b6 c0             	movzx  eax,al
c002196d:	c3                   	ret    

c002196e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002196e:	55                   	push   ebp
c002196f:	57                   	push   edi
c0021970:	56                   	push   esi
c0021971:	53                   	push   ebx
c0021972:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021977:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002197c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021981:	6a 0a                	push   0xa
c0021983:	56                   	push   esi
c0021984:	55                   	push   ebp
c0021985:	57                   	push   edi
c0021986:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002198a:	e8 51 ff ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002198f:	6a 0a                	push   0xa
c0021991:	89 c3                	mov    ebx,eax
c0021993:	56                   	push   esi
c0021994:	0f b6 db             	movzx  ebx,bl
c0021997:	55                   	push   ebp
c0021998:	57                   	push   edi
c0021999:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002199d:	e8 3e ff ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219a2:	83 c4 28             	add    esp,0x28
c00219a5:	25 00 ff 00 00       	and    eax,0xff00
c00219aa:	09 d8                	or     eax,ebx
c00219ac:	5b                   	pop    ebx
c00219ad:	5e                   	pop    esi
c00219ae:	5f                   	pop    edi
c00219af:	5d                   	pop    ebp
c00219b0:	c3                   	ret    
c00219b1:	90                   	nop

c00219b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00219b2:	6a 08                	push   0x8
c00219b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b9:	50                   	push   eax
c00219ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219bf:	50                   	push   eax
c00219c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c5:	50                   	push   eax
c00219c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219ca:	e8 11 ff ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219cf:	83 c4 14             	add    esp,0x14
c00219d2:	0f b6 c4             	movzx  eax,ah
c00219d5:	c3                   	ret    

c00219d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00219d6:	6a 08                	push   0x8
c00219d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219dd:	50                   	push   eax
c00219de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e3:	50                   	push   eax
c00219e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e9:	50                   	push   eax
c00219ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219ee:	e8 ed fe ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219f3:	83 c4 14             	add    esp,0x14
c00219f6:	c3                   	ret    
c00219f7:	90                   	nop

c00219f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00219f8:	6a 3c                	push   0x3c
c00219fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ff:	50                   	push   eax
c0021a00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a05:	50                   	push   eax
c0021a06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a0b:	50                   	push   eax
c0021a0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a10:	e8 cb fe ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a15:	83 c4 14             	add    esp,0x14
c0021a18:	c3                   	ret    
c0021a19:	90                   	nop

c0021a1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021a1a:	6a 18                	push   0x18
c0021a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a21:	50                   	push   eax
c0021a22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a27:	50                   	push   eax
c0021a28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a2d:	50                   	push   eax
c0021a2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a32:	e8 a9 fe ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a37:	83 c4 14             	add    esp,0x14
c0021a3a:	0f b6 c4             	movzx  eax,ah
c0021a3d:	c3                   	ret    

c0021a3e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a3e:	55                   	push   ebp
c0021a3f:	57                   	push   edi
c0021a40:	56                   	push   esi
c0021a41:	53                   	push   ebx
c0021a42:	50                   	push   eax
c0021a43:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a47:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a4c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a51:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a56:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a5d:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a60:	83 c3 10             	add    ebx,0x10
c0021a63:	0f b6 c0             	movzx  eax,al
c0021a66:	0f b6 db             	movzx  ebx,bl
c0021a69:	50                   	push   eax
c0021a6a:	51                   	push   ecx
c0021a6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a6f:	57                   	push   edi
c0021a70:	55                   	push   ebp
c0021a71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021a75:	e8 66 fe ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a7a:	53                   	push   ebx
c0021a7b:	89 c6                	mov    esi,eax
c0021a7d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021a81:	c1 e6 10             	shl    esi,0x10
c0021a84:	51                   	push   ecx
c0021a85:	57                   	push   edi
c0021a86:	55                   	push   ebp
c0021a87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a8b:	e8 50 fe ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a90:	83 c4 2c             	add    esp,0x2c
c0021a93:	0f b7 c0             	movzx  eax,ax
c0021a96:	5b                   	pop    ebx
c0021a97:	09 f0                	or     eax,esi
c0021a99:	5e                   	pop    esi
c0021a9a:	5f                   	pop    edi
c0021a9b:	5d                   	pop    ebp
c0021a9c:	c3                   	ret    
c0021a9d:	90                   	nop

c0021a9e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021a9e:	53                   	push   ebx
c0021a9f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021aa4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021aad:	c1 e1 10             	shl    ecx,0x10
c0021ab0:	25 fc 00 00 00       	and    eax,0xfc
c0021ab5:	09 c1                	or     ecx,eax
c0021ab7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021abc:	c1 e0 08             	shl    eax,0x8
c0021abf:	09 c1                	or     ecx,eax
c0021ac1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021ac6:	c1 e0 0b             	shl    eax,0xb
c0021ac9:	09 c1                	or     ecx,eax
c0021acb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021ad1:	89 c8                	mov    eax,ecx
c0021ad3:	ef                   	out    dx,eax
c0021ad4:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ad9:	ed                   	in     eax,dx
c0021ada:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021adf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021ae4:	74 0a                	je     c0021af0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021ae6:	0f b7 d8             	movzx  ebx,ax
c0021ae9:	89 d0                	mov    eax,edx
c0021aeb:	c1 e0 10             	shl    eax,0x10
c0021aee:	eb 05                	jmp    c0021af5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021af0:	66 31 c0             	xor    ax,ax
c0021af3:	89 d3                	mov    ebx,edx
c0021af5:	09 c3                	or     ebx,eax
c0021af7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021afc:	89 c8                	mov    eax,ecx
c0021afe:	ef                   	out    dx,eax
c0021aff:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b04:	89 d8                	mov    eax,ebx
c0021b06:	ef                   	out    dx,eax
c0021b07:	5b                   	pop    ebx
c0021b08:	c3                   	ret    
c0021b09:	90                   	nop

c0021b0a <PCI::checkBus(unsigned char)>:
c0021b0a:	56                   	push   esi
c0021b0b:	53                   	push   ebx
c0021b0c:	31 db                	xor    ebx,ebx
c0021b0e:	51                   	push   ecx
c0021b0f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021b14:	52                   	push   edx
c0021b15:	53                   	push   ebx
c0021b16:	43                   	inc    ebx
c0021b17:	56                   	push   esi
c0021b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b1c:	e8 2b 03 00 00       	call   c0021e4c <PCI::checkDevice(unsigned char, unsigned char)>
c0021b21:	83 c4 10             	add    esp,0x10
c0021b24:	83 fb 20             	cmp    ebx,0x20
c0021b27:	75 eb                	jne    c0021b14 <PCI::checkBus(unsigned char)+0xa>
c0021b29:	58                   	pop    eax
c0021b2a:	5b                   	pop    ebx
c0021b2b:	5e                   	pop    esi
c0021b2c:	c3                   	ret    
c0021b2d:	90                   	nop

c0021b2e <PCI::foundDevice(PCIDeviceInfo)>:
c0021b2e:	55                   	push   ebp
c0021b2f:	57                   	push   edi
c0021b30:	56                   	push   esi
c0021b31:	53                   	push   ebx
c0021b32:	83 ec 1c             	sub    esp,0x1c
c0021b35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b39:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b3f:	0f 84 52 01 00 00    	je     c0021c97 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b45:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b49:	66 81 f9 06 04       	cmp    cx,0x406
c0021b4e:	75 2c                	jne    c0021b7c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b50:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b55:	50                   	push   eax
c0021b56:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b5b:	50                   	push   eax
c0021b5c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b61:	50                   	push   eax
c0021b62:	56                   	push   esi
c0021b63:	e8 b2 fe ff ff       	call   c0021a1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b68:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b6c:	0f b6 c0             	movzx  eax,al
c0021b6f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b73:	83 c4 2c             	add    esp,0x2c
c0021b76:	5b                   	pop    ebx
c0021b77:	5e                   	pop    esi
c0021b78:	5f                   	pop    edi
c0021b79:	5d                   	pop    ebp
c0021b7a:	eb 8e                	jmp    c0021b0a <PCI::checkBus(unsigned char)>
c0021b7c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b80:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021b86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b8a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021b8e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021b92:	88 d3                	mov    bl,dl
c0021b94:	85 c0                	test   eax,eax
c0021b96:	74 33                	je     c0021bcb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021b98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021b9b:	85 d2                	test   edx,edx
c0021b9d:	74 28                	je     c0021bc7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b9f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021ba5:	31 ef                	xor    edi,ebp
c0021ba7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021bad:	75 18                	jne    c0021bc7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021baf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bb3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021bb9:	75 0c                	jne    c0021bc7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021bbb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021bc1:	0f 84 d0 00 00 00    	je     c0021c97 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bc9:	eb c9                	jmp    c0021b94 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021bcb:	66 81 f9 01 06       	cmp    cx,0x601
c0021bd0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021bd4:	75 19                	jne    c0021bef <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021bd6:	83 ec 0c             	sub    esp,0xc
c0021bd9:	68 64 01 00 00       	push   0x164
c0021bde:	e8 f1 d8 fe ff       	call   c000f4d4 <malloc>
c0021be3:	89 c5                	mov    ebp,eax
c0021be5:	89 04 24             	mov    DWORD PTR [esp],eax
c0021be8:	e8 95 0f 00 00       	call   c0022b82 <SATABus::SATABus()>
c0021bed:	eb 1e                	jmp    c0021c0d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021bef:	66 81 f9 01 01       	cmp    cx,0x101
c0021bf4:	75 60                	jne    c0021c56 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	68 70 02 00 00       	push   0x270
c0021bfe:	e8 d1 d8 fe ff       	call   c000f4d4 <malloc>
c0021c03:	89 c5                	mov    ebp,eax
c0021c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c08:	e8 03 03 00 00       	call   c0021f10 <IDE::IDE()>
c0021c0d:	58                   	pop    eax
c0021c0e:	5a                   	pop    edx
c0021c0f:	55                   	push   ebp
c0021c10:	56                   	push   esi
c0021c11:	e8 6e 1f ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0021c16:	83 ec 1c             	sub    esp,0x1c
c0021c19:	b9 09 00 00 00       	mov    ecx,0x9
c0021c1e:	fc                   	cld    
c0021c1f:	89 e7                	mov    edi,esp
c0021c21:	89 de                	mov    esi,ebx
c0021c23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c25:	55                   	push   ebp
c0021c26:	e8 63 1e ff ff       	call   c0013a8e <Device::preOpenPCI(PCIDeviceInfo)>
c0021c2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c2e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c32:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c3a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021c42:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c4d:	83 c4 4c             	add    esp,0x4c
c0021c50:	5b                   	pop    ebx
c0021c51:	5e                   	pop    esi
c0021c52:	5f                   	pop    edi
c0021c53:	5d                   	pop    ebp
c0021c54:	ff e0                	jmp    eax
c0021c56:	83 ec 0c             	sub    esp,0xc
c0021c59:	68 58 01 00 00       	push   0x158
c0021c5e:	e8 71 d8 fe ff       	call   c000f4d4 <malloc>
c0021c63:	89 c5                	mov    ebp,eax
c0021c65:	58                   	pop    eax
c0021c66:	5a                   	pop    edx
c0021c67:	68 a0 af 02 c0       	push   0xc002afa0
c0021c6c:	55                   	push   ebp
c0021c6d:	e8 08 22 ff ff       	call   c0013e7a <DriverlessDevice::DriverlessDevice(char const*)>
c0021c72:	59                   	pop    ecx
c0021c73:	5f                   	pop    edi
c0021c74:	55                   	push   ebp
c0021c75:	56                   	push   esi
c0021c76:	e8 09 1f ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0021c7b:	b9 09 00 00 00       	mov    ecx,0x9
c0021c80:	fc                   	cld    
c0021c81:	89 df                	mov    edi,ebx
c0021c83:	89 de                	mov    esi,ebx
c0021c85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c87:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021c8b:	83 c4 2c             	add    esp,0x2c
c0021c8e:	5b                   	pop    ebx
c0021c8f:	5e                   	pop    esi
c0021c90:	5f                   	pop    edi
c0021c91:	5d                   	pop    ebp
c0021c92:	e9 f7 1d ff ff       	jmp    c0013a8e <Device::preOpenPCI(PCIDeviceInfo)>
c0021c97:	83 c4 1c             	add    esp,0x1c
c0021c9a:	5b                   	pop    ebx
c0021c9b:	5e                   	pop    esi
c0021c9c:	5f                   	pop    edi
c0021c9d:	5d                   	pop    ebp
c0021c9e:	c3                   	ret    
c0021c9f:	90                   	nop

c0021ca0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021ca0:	55                   	push   ebp
c0021ca1:	57                   	push   edi
c0021ca2:	56                   	push   esi
c0021ca3:	53                   	push   ebx
c0021ca4:	83 ec 5c             	sub    esp,0x5c
c0021ca7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021caf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021cb3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021cbc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021cc0:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021cc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cc9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021cce:	6a 0c                	push   0xc
c0021cd0:	55                   	push   ebp
c0021cd1:	53                   	push   ebx
c0021cd2:	57                   	push   edi
c0021cd3:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021cda:	e8 01 fc ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cdf:	55                   	push   ebp
c0021ce0:	53                   	push   ebx
c0021ce1:	57                   	push   edi
c0021ce2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021ce9:	e8 80 fc ff ff       	call   c002196e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021cee:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021cf3:	83 c4 24             	add    esp,0x24
c0021cf6:	55                   	push   ebp
c0021cf7:	53                   	push   ebx
c0021cf8:	57                   	push   edi
c0021cf9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cfd:	e8 f6 fc ff ff       	call   c00219f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021d02:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021d06:	6a 3c                	push   0x3c
c0021d08:	55                   	push   ebp
c0021d09:	53                   	push   ebx
c0021d0a:	57                   	push   edi
c0021d0b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d12:	e8 c9 fb ff ff       	call   c00218e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d17:	0f b6 c4             	movzx  eax,ah
c0021d1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d1e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021d22:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d26:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0021d2b:	83 c4 24             	add    esp,0x24
c0021d2e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d34:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d3b:	74 6c                	je     c0021da9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d3d:	31 f6                	xor    esi,esi
c0021d3f:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0021d45:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d4b:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d51:	7e 56                	jle    c0021da9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d53:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d56:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d5d:	39 cb                	cmp    ebx,ecx
c0021d5f:	75 45                	jne    c0021da6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d61:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d68:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d6c:	75 38                	jne    c0021da6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d6e:	83 ec 0c             	sub    esp,0xc
c0021d71:	68 ba af 02 c0       	push   0xc002afba
c0021d76:	e8 1a 0a ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0021d7b:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0021d81:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d87:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021d8f:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021d93:	52                   	push   edx
c0021d94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d98:	53                   	push   ebx
c0021d99:	68 df af 02 c0       	push   0xc002afdf
c0021d9e:	e8 f2 09 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0021da3:	83 c4 20             	add    esp,0x20
c0021da6:	46                   	inc    esi
c0021da7:	eb 96                	jmp    c0021d3f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021da9:	31 d2                	xor    edx,edx
c0021dab:	83 ec 0c             	sub    esp,0xc
c0021dae:	55                   	push   ebp
c0021daf:	53                   	push   ebx
c0021db0:	57                   	push   edi
c0021db1:	52                   	push   edx
c0021db2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021db6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021dbd:	e8 7c fc ff ff       	call   c0021a3e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dc2:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021dc6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021dca:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021dce:	42                   	inc    edx
c0021dcf:	83 c4 20             	add    esp,0x20
c0021dd2:	83 fa 06             	cmp    edx,0x6
c0021dd5:	75 d4                	jne    c0021dab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021dd7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021ddb:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021ddf:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021de3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021de7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021deb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021def:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021df4:	86 e0                	xchg   al,ah
c0021df6:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021dfb:	55                   	push   ebp
c0021dfc:	53                   	push   ebx
c0021dfd:	57                   	push   edi
c0021dfe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021e02:	e8 ab fb ff ff       	call   c00219b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021e07:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021e0b:	55                   	push   ebp
c0021e0c:	53                   	push   ebx
c0021e0d:	57                   	push   edi
c0021e0e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e15:	e8 0e fb ff ff       	call   c0021928 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e1a:	83 ec 0c             	sub    esp,0xc
c0021e1d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021e22:	b9 09 00 00 00       	mov    ecx,0x9
c0021e27:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e2b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e2f:	fc                   	cld    
c0021e30:	89 e7                	mov    edi,esp
c0021e32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e3b:	e8 ee fc ff ff       	call   c0021b2e <PCI::foundDevice(PCIDeviceInfo)>
c0021e40:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e46:	5b                   	pop    ebx
c0021e47:	5e                   	pop    esi
c0021e48:	5f                   	pop    edi
c0021e49:	5d                   	pop    ebp
c0021e4a:	c3                   	ret    
c0021e4b:	90                   	nop

c0021e4c <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e4c:	55                   	push   ebp
c0021e4d:	57                   	push   edi
c0021e4e:	56                   	push   esi
c0021e4f:	53                   	push   ebx
c0021e50:	83 ec 0c             	sub    esp,0xc
c0021e53:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e57:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e5c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e61:	6a 00                	push   0x0
c0021e63:	56                   	push   esi
c0021e64:	57                   	push   edi
c0021e65:	55                   	push   ebp
c0021e66:	e8 bd fa ff ff       	call   c0021928 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e6b:	6a 00                	push   0x0
c0021e6d:	56                   	push   esi
c0021e6e:	57                   	push   edi
c0021e6f:	55                   	push   ebp
c0021e70:	e8 2b fe ff ff       	call   c0021ca0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e75:	83 c4 20             	add    esp,0x20
c0021e78:	6a 00                	push   0x0
c0021e7a:	56                   	push   esi
c0021e7b:	57                   	push   edi
c0021e7c:	55                   	push   ebp
c0021e7d:	e8 c8 fa ff ff       	call   c002194a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e82:	83 c4 10             	add    esp,0x10
c0021e85:	84 c0                	test   al,al
c0021e87:	79 27                	jns    c0021eb0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021e89:	bb 01 00 00 00       	mov    ebx,0x1
c0021e8e:	53                   	push   ebx
c0021e8f:	56                   	push   esi
c0021e90:	57                   	push   edi
c0021e91:	55                   	push   ebp
c0021e92:	e8 91 fa ff ff       	call   c0021928 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e97:	83 c4 10             	add    esp,0x10
c0021e9a:	66 40                	inc    ax
c0021e9c:	74 0c                	je     c0021eaa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021e9e:	53                   	push   ebx
c0021e9f:	56                   	push   esi
c0021ea0:	57                   	push   edi
c0021ea1:	55                   	push   ebp
c0021ea2:	e8 f9 fd ff ff       	call   c0021ca0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021ea7:	83 c4 10             	add    esp,0x10
c0021eaa:	43                   	inc    ebx
c0021eab:	83 fb 08             	cmp    ebx,0x8
c0021eae:	75 de                	jne    c0021e8e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021eb0:	83 c4 0c             	add    esp,0xc
c0021eb3:	5b                   	pop    ebx
c0021eb4:	5e                   	pop    esi
c0021eb5:	5f                   	pop    edi
c0021eb6:	5d                   	pop    ebp
c0021eb7:	c3                   	ret    

c0021eb8 <PCI::detect()>:
c0021eb8:	56                   	push   esi
c0021eb9:	53                   	push   ebx
c0021eba:	53                   	push   ebx
c0021ebb:	31 db                	xor    ebx,ebx
c0021ebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021ec1:	6a 00                	push   0x0
c0021ec3:	6a 00                	push   0x0
c0021ec5:	6a 00                	push   0x0
c0021ec7:	56                   	push   esi
c0021ec8:	e8 7d fa ff ff       	call   c002194a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021ecd:	83 c4 10             	add    esp,0x10
c0021ed0:	a8 80                	test   al,0x80
c0021ed2:	75 21                	jne    c0021ef5 <PCI::detect()+0x3d>
c0021ed4:	51                   	push   ecx
c0021ed5:	51                   	push   ecx
c0021ed6:	6a 00                	push   0x0
c0021ed8:	56                   	push   esi
c0021ed9:	e8 2c fc ff ff       	call   c0021b0a <PCI::checkBus(unsigned char)>
c0021ede:	83 c4 10             	add    esp,0x10
c0021ee1:	eb 24                	jmp    c0021f07 <PCI::detect()+0x4f>
c0021ee3:	52                   	push   edx
c0021ee4:	52                   	push   edx
c0021ee5:	53                   	push   ebx
c0021ee6:	43                   	inc    ebx
c0021ee7:	56                   	push   esi
c0021ee8:	e8 1d fc ff ff       	call   c0021b0a <PCI::checkBus(unsigned char)>
c0021eed:	83 c4 10             	add    esp,0x10
c0021ef0:	83 fb 08             	cmp    ebx,0x8
c0021ef3:	74 12                	je     c0021f07 <PCI::detect()+0x4f>
c0021ef5:	53                   	push   ebx
c0021ef6:	6a 00                	push   0x0
c0021ef8:	6a 00                	push   0x0
c0021efa:	56                   	push   esi
c0021efb:	e8 28 fa ff ff       	call   c0021928 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f00:	83 c4 10             	add    esp,0x10
c0021f03:	66 40                	inc    ax
c0021f05:	74 dc                	je     c0021ee3 <PCI::detect()+0x2b>
c0021f07:	58                   	pop    eax
c0021f08:	5b                   	pop    ebx
c0021f09:	5e                   	pop    esi
c0021f0a:	c3                   	ret    
c0021f0b:	90                   	nop

c0021f0c <IDE::close(int, int, void*)>:
c0021f0c:	83 c8 ff             	or     eax,0xffffffff
c0021f0f:	c3                   	ret    

c0021f10 <IDE::IDE()>:
c0021f10:	83 ec 0c             	sub    esp,0xc
c0021f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f17:	83 ec 08             	sub    esp,0x8
c0021f1a:	68 28 b0 02 c0       	push   0xc002b028
c0021f1f:	50                   	push   eax
c0021f20:	e8 eb 1f ff ff       	call   c0013f10 <HardDiskController::HardDiskController(char const*)>
c0021f25:	83 c4 10             	add    esp,0x10
c0021f28:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0021f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f31:	89 10                	mov    DWORD PTR [eax],edx
c0021f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f37:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f3e:	90                   	nop
c0021f3f:	83 c4 0c             	add    esp,0xc
c0021f42:	c3                   	ret    
c0021f43:	90                   	nop

c0021f44 <IDE::prepareInterrupt(unsigned char)>:
c0021f44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f4d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f55:	c3                   	ret    

c0021f56 <selectDrive(unsigned char, unsigned char)>:
c0021f56:	c3                   	ret    
c0021f57:	90                   	nop

c0021f58 <IDE::getBase(unsigned char)>:
c0021f58:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f61:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f69:	c3                   	ret    

c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f6a:	55                   	push   ebp
c0021f6b:	57                   	push   edi
c0021f6c:	56                   	push   esi
c0021f6d:	53                   	push   ebx
c0021f6e:	83 ec 1c             	sub    esp,0x1c
c0021f71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f79:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021f7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f84:	80 f9 03             	cmp    cl,0x3
c0021f87:	77 51                	ja     c0021fda <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021f89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f8d:	0f b6 f2             	movzx  esi,dl
c0021f90:	0f b6 db             	movzx  ebx,bl
c0021f93:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f96:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021f9a:	83 ca 80             	or     edx,0xffffff80
c0021f9d:	0f b6 d2             	movzx  edx,dl
c0021fa0:	52                   	push   edx
c0021fa1:	6a 0c                	push   0xc
c0021fa3:	56                   	push   esi
c0021fa4:	57                   	push   edi
c0021fa5:	e8 c0 ff ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021faa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fb3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021fb7:	ee                   	out    dx,al
c0021fb8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021fbd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021fc1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021fc5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021fc9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021fd1:	83 c4 2c             	add    esp,0x2c
c0021fd4:	5b                   	pop    ebx
c0021fd5:	5e                   	pop    esi
c0021fd6:	5f                   	pop    edi
c0021fd7:	5d                   	pop    ebp
c0021fd8:	eb 90                	jmp    c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fda:	80 fb 07             	cmp    bl,0x7
c0021fdd:	77 12                	ja     c0021ff1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021fdf:	0f b6 d2             	movzx  edx,dl
c0021fe2:	0f b6 db             	movzx  ebx,bl
c0021fe5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021fed:	89 da                	mov    edx,ebx
c0021fef:	eb 2f                	jmp    c0022020 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ff1:	80 fb 0d             	cmp    bl,0xd
c0021ff4:	77 13                	ja     c0022009 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021ff6:	0f b6 d2             	movzx  edx,dl
c0021ff9:	0f b6 db             	movzx  ebx,bl
c0021ffc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022003:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022007:	eb 17                	jmp    c0022020 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022009:	80 fb 15             	cmp    bl,0x15
c002200c:	77 13                	ja     c0022021 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002200e:	0f b6 d2             	movzx  edx,dl
c0022011:	0f b6 db             	movzx  ebx,bl
c0022014:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002201c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022020:	ee                   	out    dx,al
c0022021:	83 c4 1c             	add    esp,0x1c
c0022024:	5b                   	pop    ebx
c0022025:	5e                   	pop    esi
c0022026:	5f                   	pop    edi
c0022027:	5d                   	pop    ebp
c0022028:	c3                   	ret    
c0022029:	90                   	nop

c002202a <IDE::read(unsigned char, unsigned char)>:
c002202a:	55                   	push   ebp
c002202b:	57                   	push   edi
c002202c:	56                   	push   esi
c002202d:	53                   	push   ebx
c002202e:	83 ec 1c             	sub    esp,0x1c
c0022031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022035:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022039:	8d 43 f8             	lea    eax,[ebx-0x8]
c002203c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022040:	3c 03                	cmp    al,0x3
c0022042:	77 43                	ja     c0022087 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022044:	0f b6 f2             	movzx  esi,dl
c0022047:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002204a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002204e:	83 c8 80             	or     eax,0xffffff80
c0022051:	0f b6 c0             	movzx  eax,al
c0022054:	50                   	push   eax
c0022055:	6a 0c                	push   0xc
c0022057:	56                   	push   esi
c0022058:	57                   	push   edi
c0022059:	e8 0c ff ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002205e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022063:	0f b6 c3             	movzx  eax,bl
c0022066:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002206a:	ec                   	in     al,dx
c002206b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002206f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022074:	52                   	push   edx
c0022075:	6a 0c                	push   0xc
c0022077:	56                   	push   esi
c0022078:	57                   	push   edi
c0022079:	e8 ec fe ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002207e:	83 c4 20             	add    esp,0x20
c0022081:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022085:	eb 49                	jmp    c00220d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022087:	80 fb 07             	cmp    bl,0x7
c002208a:	77 12                	ja     c002209e <IDE::read(unsigned char, unsigned char)+0x74>
c002208c:	0f b6 d2             	movzx  edx,dl
c002208f:	0f b6 c3             	movzx  eax,bl
c0022092:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002209a:	89 c2                	mov    edx,eax
c002209c:	eb 31                	jmp    c00220cf <IDE::read(unsigned char, unsigned char)+0xa5>
c002209e:	80 fb 0d             	cmp    bl,0xd
c00220a1:	77 13                	ja     c00220b6 <IDE::read(unsigned char, unsigned char)+0x8c>
c00220a3:	0f b6 d2             	movzx  edx,dl
c00220a6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00220ad:	0f b6 d3             	movzx  edx,bl
c00220b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00220b4:	eb 19                	jmp    c00220cf <IDE::read(unsigned char, unsigned char)+0xa5>
c00220b6:	31 c0                	xor    eax,eax
c00220b8:	80 fb 15             	cmp    bl,0x15
c00220bb:	77 13                	ja     c00220d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c00220bd:	0f b6 d2             	movzx  edx,dl
c00220c0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00220c8:	0f b6 d3             	movzx  edx,bl
c00220cb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00220cf:	ec                   	in     al,dx
c00220d0:	83 c4 1c             	add    esp,0x1c
c00220d3:	5b                   	pop    ebx
c00220d4:	5e                   	pop    esi
c00220d5:	5f                   	pop    edi
c00220d6:	5d                   	pop    ebp
c00220d7:	c3                   	ret    

c00220d8 <IDE::waitInterrupt(unsigned char)>:
c00220d8:	55                   	push   ebp
c00220d9:	57                   	push   edi
c00220da:	56                   	push   esi
c00220db:	53                   	push   ebx
c00220dc:	31 db                	xor    ebx,ebx
c00220de:	83 ec 0c             	sub    esp,0xc
c00220e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00220ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00220f2:	89 e8                	mov    eax,ebp
c00220f4:	84 c0                	test   al,al
c00220f6:	75 34                	jne    c002212c <IDE::waitInterrupt(unsigned char)+0x54>
c00220f8:	52                   	push   edx
c00220f9:	6a 0c                	push   0xc
c00220fb:	56                   	push   esi
c00220fc:	57                   	push   edi
c00220fd:	e8 28 ff ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022102:	83 c4 10             	add    esp,0x10
c0022105:	a8 01                	test   al,0x1
c0022107:	75 2b                	jne    c0022134 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022109:	f6 c3 04             	test   bl,0x4
c002210c:	75 16                	jne    c0022124 <IDE::waitInterrupt(unsigned char)+0x4c>
c002210e:	83 fb 32             	cmp    ebx,0x32
c0022111:	7e 11                	jle    c0022124 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022113:	50                   	push   eax
c0022114:	50                   	push   eax
c0022115:	6a 00                	push   0x0
c0022117:	68 80 96 98 00       	push   0x989680
c002211c:	e8 6d b1 ff ff       	call   c001d28e <nanoSleep(unsigned long long)>
c0022121:	83 c4 10             	add    esp,0x10
c0022124:	83 fb 3c             	cmp    ebx,0x3c
c0022127:	74 0b                	je     c0022134 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022129:	43                   	inc    ebx
c002212a:	eb be                	jmp    c00220ea <IDE::waitInterrupt(unsigned char)+0x12>
c002212c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022134:	83 c4 0c             	add    esp,0xc
c0022137:	89 e8                	mov    eax,ebp
c0022139:	5b                   	pop    ebx
c002213a:	5e                   	pop    esi
c002213b:	5f                   	pop    edi
c002213c:	5d                   	pop    ebp
c002213d:	c3                   	ret    

c002213e <ideChannel0IRQHandler(regs*, void*)>:
c002213e:	83 ec 10             	sub    esp,0x10
c0022141:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022145:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002214c:	6a 07                	push   0x7
c002214e:	6a 00                	push   0x0
c0022150:	50                   	push   eax
c0022151:	e8 d4 fe ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022156:	83 c4 1c             	add    esp,0x1c
c0022159:	c3                   	ret    

c002215a <ideChannel1IRQHandler(regs*, void*)>:
c002215a:	83 ec 10             	sub    esp,0x10
c002215d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022161:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022168:	6a 07                	push   0x7
c002216a:	6a 01                	push   0x1
c002216c:	50                   	push   eax
c002216d:	e8 b8 fe ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022172:	83 c4 1c             	add    esp,0x1c
c0022175:	c3                   	ret    

c0022176 <IDE::enableIRQs(unsigned char, bool)>:
c0022176:	57                   	push   edi
c0022177:	56                   	push   esi
c0022178:	be 04 00 00 00       	mov    esi,0x4
c002217d:	53                   	push   ebx
c002217e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022187:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002218c:	0f 94 c0             	sete   al
c002218f:	d1 e0                	shl    eax,1
c0022191:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022198:	0f b6 c0             	movzx  eax,al
c002219b:	50                   	push   eax
c002219c:	6a 0c                	push   0xc
c002219e:	57                   	push   edi
c002219f:	53                   	push   ebx
c00221a0:	e8 c5 fd ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221a5:	83 c4 10             	add    esp,0x10
c00221a8:	50                   	push   eax
c00221a9:	6a 0c                	push   0xc
c00221ab:	57                   	push   edi
c00221ac:	53                   	push   ebx
c00221ad:	e8 78 fe ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c00221b2:	83 c4 10             	add    esp,0x10
c00221b5:	4e                   	dec    esi
c00221b6:	75 f0                	jne    c00221a8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00221b8:	5b                   	pop    ebx
c00221b9:	5e                   	pop    esi
c00221ba:	5f                   	pop    edi
c00221bb:	c3                   	ret    

c00221bc <IDE::open(int, int, void*)>:
c00221bc:	55                   	push   ebp
c00221bd:	57                   	push   edi
c00221be:	56                   	push   esi
c00221bf:	53                   	push   ebx
c00221c0:	83 ec 1c             	sub    esp,0x1c
c00221c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221c7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00221d0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00221d9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00221e0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00221e7:	0f 85 b0 02 00 00    	jne    c002249d <IDE::open(int, int, void*)+0x2e1>
c00221ed:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00221f3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00221f7:	83 e0 7f             	and    eax,0x7f
c00221fa:	3c 05                	cmp    al,0x5
c00221fc:	74 04                	je     c0022202 <IDE::open(int, int, void*)+0x46>
c00221fe:	3c 0f                	cmp    al,0xf
c0022200:	75 32                	jne    c0022234 <IDE::open(int, int, void*)+0x78>
c0022202:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022208:	83 e0 fc             	and    eax,0xfffffffc
c002220b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022212:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022218:	83 e0 fc             	and    eax,0xfffffffc
c002221b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022222:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022228:	83 e0 fc             	and    eax,0xfffffffc
c002222b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022232:	eb 14                	jmp    c0022248 <IDE::open(int, int, void*)+0x8c>
c0022234:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002223e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022248:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002224f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002225a:	89 c6                	mov    esi,eax
c002225c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022261:	c1 e6 10             	shl    esi,0x10
c0022264:	89 e8                	mov    eax,ebp
c0022266:	89 fa                	mov    edx,edi
c0022268:	c1 e0 0b             	shl    eax,0xb
c002226b:	09 f0                	or     eax,esi
c002226d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022274:	c1 e6 08             	shl    esi,0x8
c0022277:	09 c6                	or     esi,eax
c0022279:	89 f0                	mov    eax,esi
c002227b:	0d 08 00 00 80       	or     eax,0x80000008
c0022280:	ef                   	out    dx,eax
c0022281:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022286:	89 ca                	mov    edx,ecx
c0022288:	ed                   	in     eax,dx
c0022289:	c1 e8 10             	shr    eax,0x10
c002228c:	3d ff ff 00 00       	cmp    eax,0xffff
c0022291:	0f 84 f5 00 00 00    	je     c002238c <IDE::open(int, int, void*)+0x1d0>
c0022297:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002229d:	89 fa                	mov    edx,edi
c002229f:	89 f0                	mov    eax,esi
c00222a1:	ef                   	out    dx,eax
c00222a2:	b0 fe                	mov    al,0xfe
c00222a4:	89 ca                	mov    edx,ecx
c00222a6:	ee                   	out    dx,al
c00222a7:	89 f0                	mov    eax,esi
c00222a9:	89 fa                	mov    edx,edi
c00222ab:	ef                   	out    dx,eax
c00222ac:	89 ca                	mov    edx,ecx
c00222ae:	ed                   	in     eax,dx
c00222af:	3c fe                	cmp    al,0xfe
c00222b1:	0f 85 a9 00 00 00    	jne    c0022360 <IDE::open(int, int, void*)+0x1a4>
c00222b7:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c00222bd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00222c4:	74 33                	je     c00222f9 <IDE::open(int, int, void*)+0x13d>
c00222c6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00222cc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00222d0:	40                   	inc    eax
c00222d1:	83 ec 0c             	sub    esp,0xc
c00222d4:	0f b6 c0             	movzx  eax,al
c00222d7:	50                   	push   eax
c00222d8:	55                   	push   ebp
c00222d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222dd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00222e3:	51                   	push   ecx
c00222e4:	e8 bb 54 ff ff       	call   c00177a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00222e9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00222ee:	83 c4 1c             	add    esp,0x1c
c00222f1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00222f7:	eb 0a                	jmp    c0022303 <IDE::open(int, int, void*)+0x147>
c00222f9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022303:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002230a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022311:	c1 e1 10             	shl    ecx,0x10
c0022314:	c1 e0 08             	shl    eax,0x8
c0022317:	bf f8 0c 00 00       	mov    edi,0xcf8
c002231c:	09 c1                	or     ecx,eax
c002231e:	89 fa                	mov    edx,edi
c0022320:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022327:	c1 e0 0b             	shl    eax,0xb
c002232a:	09 c1                	or     ecx,eax
c002232c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022332:	89 c8                	mov    eax,ecx
c0022334:	ef                   	out    dx,eax
c0022335:	be fc 0c 00 00       	mov    esi,0xcfc
c002233a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022340:	89 f2                	mov    edx,esi
c0022342:	ee                   	out    dx,al
c0022343:	89 c8                	mov    eax,ecx
c0022345:	89 fa                	mov    edx,edi
c0022347:	ef                   	out    dx,eax
c0022348:	89 f2                	mov    edx,esi
c002234a:	ed                   	in     eax,dx
c002234b:	0f b6 c0             	movzx  eax,al
c002234e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022354:	74 46                	je     c002239c <IDE::open(int, int, void*)+0x1e0>
c0022356:	83 ec 0c             	sub    esp,0xc
c0022359:	68 40 b0 02 c0       	push   0xc002b040
c002235e:	eb 34                	jmp    c0022394 <IDE::open(int, int, void*)+0x1d8>
c0022360:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022369:	75 17                	jne    c0022382 <IDE::open(int, int, void*)+0x1c6>
c002236b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022370:	74 07                	je     c0022379 <IDE::open(int, int, void*)+0x1bd>
c0022372:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022377:	75 09                	jne    c0022382 <IDE::open(int, int, void*)+0x1c6>
c0022379:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022380:	eb 1a                	jmp    c002239c <IDE::open(int, int, void*)+0x1e0>
c0022382:	83 ec 0c             	sub    esp,0xc
c0022385:	68 48 b0 02 c0       	push   0xc002b048
c002238a:	eb 08                	jmp    c0022394 <IDE::open(int, int, void*)+0x1d8>
c002238c:	83 ec 0c             	sub    esp,0xc
c002238f:	68 79 b0 02 c0       	push   0xc002b079
c0022394:	e8 16 75 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0022399:	83 c4 10             	add    esp,0x10
c002239c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00223a3:	79 1a                	jns    c00223bf <IDE::open(int, int, void*)+0x203>
c00223a5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00223ab:	83 e0 fc             	and    eax,0xfffffffc
c00223ae:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00223b5:	83 c0 08             	add    eax,0x8
c00223b8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00223bf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00223c5:	89 c2                	mov    edx,eax
c00223c7:	83 e2 0f             	and    edx,0xf
c00223ca:	66 83 fa 08          	cmp    dx,0x8
c00223ce:	75 0a                	jne    c00223da <IDE::open(int, int, void*)+0x21e>
c00223d0:	83 e8 02             	sub    eax,0x2
c00223d3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00223da:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00223e0:	89 c2                	mov    edx,eax
c00223e2:	83 e2 0f             	and    edx,0xf
c00223e5:	66 83 fa 08          	cmp    dx,0x8
c00223e9:	75 0a                	jne    c00223f5 <IDE::open(int, int, void*)+0x239>
c00223eb:	83 e8 02             	sub    eax,0x2
c00223ee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00223f5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00223fc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022403:	89 d0                	mov    eax,edx
c0022405:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022408:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002240c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022410:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022413:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022418:	0f b6 c9             	movzx  ecx,cl
c002241b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022422:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022425:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022429:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002242d:	8d 50 02             	lea    edx,[eax+0x2]
c0022430:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022435:	0f b6 d2             	movzx  edx,dl
c0022438:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002243e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022441:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022445:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022449:	8d 48 03             	lea    ecx,[eax+0x3]
c002244c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022451:	0f b6 c9             	movzx  ecx,cl
c0022454:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002245a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002245d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022461:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022465:	8d 50 04             	lea    edx,[eax+0x4]
c0022468:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002246e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022473:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002247a:	66 85 f6             	test   si,si
c002247d:	74 3e                	je     c00224bd <IDE::open(int, int, void*)+0x301>
c002247f:	0f b6 d2             	movzx  edx,dl
c0022482:	83 c0 05             	add    eax,0x5
c0022485:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022488:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002248c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022490:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022496:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002249b:	eb 20                	jmp    c00224bd <IDE::open(int, int, void*)+0x301>
c002249d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00224a7:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00224b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00224b8:	e9 02 ff ff ff       	jmp    c00223bf <IDE::open(int, int, void*)+0x203>
c00224bd:	52                   	push   edx
c00224be:	52                   	push   edx
c00224bf:	6a 00                	push   0x0
c00224c1:	53                   	push   ebx
c00224c2:	e8 7d fa ff ff       	call   c0021f44 <IDE::prepareInterrupt(unsigned char)>
c00224c7:	59                   	pop    ecx
c00224c8:	5e                   	pop    esi
c00224c9:	6a 01                	push   0x1
c00224cb:	53                   	push   ebx
c00224cc:	e8 73 fa ff ff       	call   c0021f44 <IDE::prepareInterrupt(unsigned char)>
c00224d1:	83 c4 0c             	add    esp,0xc
c00224d4:	6a 00                	push   0x0
c00224d6:	6a 00                	push   0x0
c00224d8:	53                   	push   ebx
c00224d9:	e8 98 fc ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00224de:	83 c4 0c             	add    esp,0xc
c00224e1:	6a 00                	push   0x0
c00224e3:	6a 01                	push   0x1
c00224e5:	53                   	push   ebx
c00224e6:	e8 8b fc ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00224eb:	83 c4 10             	add    esp,0x10
c00224ee:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00224f5:	74 40                	je     c0022537 <IDE::open(int, int, void*)+0x37b>
c00224f7:	83 ec 0c             	sub    esp,0xc
c00224fa:	68 a3 b0 02 c0       	push   0xc002b0a3
c00224ff:	e8 91 02 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022504:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022507:	6a 01                	push   0x1
c0022509:	68 3e 21 02 c0       	push   0xc002213e
c002250e:	6a 0e                	push   0xe
c0022510:	53                   	push   ebx
c0022511:	e8 f2 15 ff ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022516:	83 c4 14             	add    esp,0x14
c0022519:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002251f:	53                   	push   ebx
c0022520:	6a 01                	push   0x1
c0022522:	68 5a 21 02 c0       	push   0xc002215a
c0022527:	6a 0f                	push   0xf
c0022529:	53                   	push   ebx
c002252a:	e8 d9 15 ff ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002252f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022535:	eb 4a                	jmp    c0022581 <IDE::open(int, int, void*)+0x3c5>
c0022537:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022541:	50                   	push   eax
c0022542:	6a 0f                	push   0xf
c0022544:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002254a:	68 bf b0 02 c0       	push   0xc002b0bf
c002254f:	e8 41 02 ff ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022554:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022557:	6a 00                	push   0x0
c0022559:	68 3e 21 02 c0       	push   0xc002213e
c002255e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022564:	53                   	push   ebx
c0022565:	e8 9e 15 ff ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002256a:	83 c4 14             	add    esp,0x14
c002256d:	53                   	push   ebx
c002256e:	6a 00                	push   0x0
c0022570:	68 5a 21 02 c0       	push   0xc002215a
c0022575:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002257b:	53                   	push   ebx
c002257c:	e8 87 15 ff ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022581:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022583:	83 c4 20             	add    esp,0x20
c0022586:	83 ec 0c             	sub    esp,0xc
c0022589:	53                   	push   ebx
c002258a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002258d:	83 c4 0c             	add    esp,0xc
c0022590:	6a 07                	push   0x7
c0022592:	6a 00                	push   0x0
c0022594:	53                   	push   ebx
c0022595:	e8 90 fa ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c002259a:	83 c4 0c             	add    esp,0xc
c002259d:	6a 07                	push   0x7
c002259f:	6a 01                	push   0x1
c00225a1:	53                   	push   ebx
c00225a2:	e8 83 fa ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c00225a7:	83 c4 0c             	add    esp,0xc
c00225aa:	6a 01                	push   0x1
c00225ac:	6a 00                	push   0x0
c00225ae:	53                   	push   ebx
c00225af:	e8 c2 fb ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00225b4:	83 c4 0c             	add    esp,0xc
c00225b7:	6a 01                	push   0x1
c00225b9:	6a 01                	push   0x1
c00225bb:	53                   	push   ebx
c00225bc:	e8 b5 fb ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00225c1:	83 c4 2c             	add    esp,0x2c
c00225c4:	31 c0                	xor    eax,eax
c00225c6:	5b                   	pop    ebx
c00225c7:	5e                   	pop    esi
c00225c8:	5f                   	pop    edi
c00225c9:	5d                   	pop    ebp
c00225ca:	c3                   	ret    
c00225cb:	90                   	nop

c00225cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00225cc:	55                   	push   ebp
c00225cd:	57                   	push   edi
c00225ce:	56                   	push   esi
c00225cf:	53                   	push   ebx
c00225d0:	83 ec 1c             	sub    esp,0x1c
c00225d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00225d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225db:	8d 50 f8             	lea    edx,[eax-0x8]
c00225de:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225e2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00225e6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225ea:	80 fa 03             	cmp    dl,0x3
c00225ed:	77 5d                	ja     c002264c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00225ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00225f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225f7:	0f b6 db             	movzx  ebx,bl
c00225fa:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00225fd:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022601:	83 ca 80             	or     edx,0xffffff80
c0022604:	0f b6 d2             	movzx  edx,dl
c0022607:	52                   	push   edx
c0022608:	6a 0c                	push   0xc
c002260a:	53                   	push   ebx
c002260b:	56                   	push   esi
c002260c:	e8 59 f9 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022611:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002261a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002261e:	0f b6 c0             	movzx  eax,al
c0022621:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022625:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022627:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002262c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022630:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022634:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022638:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022640:	83 c4 2c             	add    esp,0x2c
c0022643:	5b                   	pop    ebx
c0022644:	5e                   	pop    esi
c0022645:	5f                   	pop    edi
c0022646:	5d                   	pop    ebp
c0022647:	e9 1e f9 ff ff       	jmp    c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002264c:	3c 07                	cmp    al,0x7
c002264e:	77 10                	ja     c0022660 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022650:	0f b6 db             	movzx  ebx,bl
c0022653:	0f b6 d0             	movzx  edx,al
c0022656:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002265e:	eb 2d                	jmp    c002268d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022660:	3c 0d                	cmp    al,0xd
c0022662:	77 13                	ja     c0022677 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022664:	0f b6 db             	movzx  ebx,bl
c0022667:	0f b6 c0             	movzx  eax,al
c002266a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022671:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022675:	eb 16                	jmp    c002268d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022677:	3c 15                	cmp    al,0x15
c0022679:	77 14                	ja     c002268f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002267b:	0f b6 db             	movzx  ebx,bl
c002267e:	0f b6 c0             	movzx  eax,al
c0022681:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022689:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002268d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002268f:	83 c4 1c             	add    esp,0x1c
c0022692:	5b                   	pop    ebx
c0022693:	5e                   	pop    esi
c0022694:	5f                   	pop    edi
c0022695:	5d                   	pop    ebp
c0022696:	c3                   	ret    
c0022697:	90                   	nop

c0022698 <IDE::detect()>:
c0022698:	55                   	push   ebp
c0022699:	57                   	push   edi
c002269a:	56                   	push   esi
c002269b:	53                   	push   ebx
c002269c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00226a2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00226a9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00226b0:	0f 85 be 02 00 00    	jne    c0022974 <IDE::detect()+0x2dc>
c00226b6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00226bd:	31 f6                	xor    esi,esi
c00226bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00226c7:	31 ed                	xor    ebp,ebp
c00226c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226cd:	c1 e0 06             	shl    eax,0x6
c00226d0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00226d8:	89 e8                	mov    eax,ebp
c00226da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00226de:	c1 e0 04             	shl    eax,0x4
c00226e1:	83 c8 a0             	or     eax,0xffffffa0
c00226e4:	0f b6 c0             	movzx  eax,al
c00226e7:	50                   	push   eax
c00226e8:	6a 06                	push   0x6
c00226ea:	56                   	push   esi
c00226eb:	53                   	push   ebx
c00226ec:	e8 79 f8 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226f1:	83 c4 0c             	add    esp,0xc
c00226f4:	6a 0c                	push   0xc
c00226f6:	56                   	push   esi
c00226f7:	53                   	push   ebx
c00226f8:	e8 2d f9 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c00226fd:	83 c4 0c             	add    esp,0xc
c0022700:	6a 0c                	push   0xc
c0022702:	56                   	push   esi
c0022703:	53                   	push   ebx
c0022704:	e8 21 f9 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022709:	83 c4 0c             	add    esp,0xc
c002270c:	6a 0c                	push   0xc
c002270e:	56                   	push   esi
c002270f:	53                   	push   ebx
c0022710:	e8 15 f9 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022715:	83 c4 0c             	add    esp,0xc
c0022718:	6a 0c                	push   0xc
c002271a:	56                   	push   esi
c002271b:	53                   	push   ebx
c002271c:	e8 09 f9 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022721:	68 ec 00 00 00       	push   0xec
c0022726:	6a 07                	push   0x7
c0022728:	56                   	push   esi
c0022729:	53                   	push   ebx
c002272a:	e8 3b f8 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002272f:	83 c4 1c             	add    esp,0x1c
c0022732:	6a 0c                	push   0xc
c0022734:	56                   	push   esi
c0022735:	53                   	push   ebx
c0022736:	e8 ef f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c002273b:	83 c4 0c             	add    esp,0xc
c002273e:	6a 0c                	push   0xc
c0022740:	56                   	push   esi
c0022741:	53                   	push   ebx
c0022742:	e8 e3 f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022747:	83 c4 0c             	add    esp,0xc
c002274a:	6a 0c                	push   0xc
c002274c:	56                   	push   esi
c002274d:	53                   	push   ebx
c002274e:	e8 d7 f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022753:	83 c4 0c             	add    esp,0xc
c0022756:	6a 0c                	push   0xc
c0022758:	56                   	push   esi
c0022759:	53                   	push   ebx
c002275a:	e8 cb f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c002275f:	83 c4 0c             	add    esp,0xc
c0022762:	6a 0c                	push   0xc
c0022764:	56                   	push   esi
c0022765:	53                   	push   ebx
c0022766:	e8 bf f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c002276b:	83 c4 10             	add    esp,0x10
c002276e:	84 c0                	test   al,al
c0022770:	0f 84 8b 01 00 00    	je     c0022901 <IDE::detect()+0x269>
c0022776:	31 ff                	xor    edi,edi
c0022778:	50                   	push   eax
c0022779:	6a 0c                	push   0xc
c002277b:	56                   	push   esi
c002277c:	53                   	push   ebx
c002277d:	e8 a8 f8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022782:	83 c4 10             	add    esp,0x10
c0022785:	a8 01                	test   al,0x1
c0022787:	0f 85 8e 01 00 00    	jne    c002291b <IDE::detect()+0x283>
c002278d:	84 c0                	test   al,al
c002278f:	78 04                	js     c0022795 <IDE::detect()+0xfd>
c0022791:	a8 08                	test   al,0x8
c0022793:	75 27                	jne    c00227bc <IDE::detect()+0x124>
c0022795:	47                   	inc    edi
c0022796:	81 ff 17 01 00 00    	cmp    edi,0x117
c002279c:	7e da                	jle    c0022778 <IDE::detect()+0xe0>
c002279e:	50                   	push   eax
c002279f:	50                   	push   eax
c00227a0:	6a 00                	push   0x0
c00227a2:	68 40 4b 4c 00       	push   0x4c4b40
c00227a7:	e8 e2 aa ff ff       	call   c001d28e <nanoSleep(unsigned long long)>
c00227ac:	83 c4 10             	add    esp,0x10
c00227af:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00227b5:	75 c1                	jne    c0022778 <IDE::detect()+0xe0>
c00227b7:	e9 5f 01 00 00       	jmp    c002291b <IDE::detect()+0x283>
c00227bc:	31 c9                	xor    ecx,ecx
c00227be:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00227c2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00227c6:	83 ec 0c             	sub    esp,0xc
c00227c9:	68 80 00 00 00       	push   0x80
c00227ce:	57                   	push   edi
c00227cf:	6a 00                	push   0x0
c00227d1:	56                   	push   esi
c00227d2:	53                   	push   ebx
c00227d3:	e8 f4 fd ff ff       	call   c00225cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00227d8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00227dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227e1:	89 d1                	mov    ecx,edx
c00227e3:	c1 e0 06             	shl    eax,0x6
c00227e6:	01 d8                	add    eax,ebx
c00227e8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00227ef:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00227f6:	89 f2                	mov    edx,esi
c00227f8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00227fe:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022802:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022808:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002280c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022813:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002281b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022822:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002282a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022830:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022837:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002283d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022841:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022845:	83 c4 20             	add    esp,0x20
c0022848:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002284b:	83 c0 02             	add    eax,0x2
c002284e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022854:	83 c7 02             	add    edi,0x2
c0022857:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002285a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022860:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022864:	75 e2                	jne    c0022848 <IDE::detect()+0x1b0>
c0022866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002286a:	c1 e0 06             	shl    eax,0x6
c002286d:	01 d8                	add    eax,ebx
c002286f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022875:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002287c:	66 c1 ea 09          	shr    dx,0x9
c0022880:	83 e2 01             	and    edx,0x1
c0022883:	84 c9                	test   cl,cl
c0022885:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002288b:	75 2f                	jne    c00228bc <IDE::detect()+0x224>
c002288d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022893:	85 c0                	test   eax,eax
c0022895:	74 66                	je     c00228fd <IDE::detect()+0x265>
c0022897:	50                   	push   eax
c0022898:	55                   	push   ebp
c0022899:	56                   	push   esi
c002289a:	68 db b0 02 c0       	push   0xc002b0db
c002289f:	e8 f1 fe fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00228a4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00228ab:	e8 24 cc fe ff       	call   c000f4d4 <malloc>
c00228b0:	89 c7                	mov    edi,eax
c00228b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00228b5:	e8 62 06 00 00       	call   c0022f1c <ATA::ATA()>
c00228ba:	eb 28                	jmp    c00228e4 <IDE::detect()+0x24c>
c00228bc:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00228c2:	55                   	push   ebp
c00228c3:	56                   	push   esi
c00228c4:	68 0a b1 02 c0       	push   0xc002b10a
c00228c9:	e8 c7 fe fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00228ce:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00228d5:	e8 fa cb fe ff       	call   c000f4d4 <malloc>
c00228da:	89 c7                	mov    edi,eax
c00228dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00228df:	e8 68 0c 00 00       	call   c002354c <ATAPI::ATAPI()>
c00228e4:	5a                   	pop    edx
c00228e5:	59                   	pop    ecx
c00228e6:	57                   	push   edi
c00228e7:	53                   	push   ebx
c00228e8:	e8 97 12 ff ff       	call   c0013b84 <Device::addChild(Device*)>
c00228ed:	8b 07                	mov    eax,DWORD PTR [edi]
c00228ef:	53                   	push   ebx
c00228f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00228f4:	6a 00                	push   0x0
c00228f6:	57                   	push   edi
c00228f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00228fa:	83 c4 20             	add    esp,0x20
c00228fd:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022901:	4d                   	dec    ebp
c0022902:	74 0a                	je     c002290e <IDE::detect()+0x276>
c0022904:	bd 01 00 00 00       	mov    ebp,0x1
c0022909:	e9 bb fd ff ff       	jmp    c00226c9 <IDE::detect()+0x31>
c002290e:	4e                   	dec    esi
c002290f:	74 63                	je     c0022974 <IDE::detect()+0x2dc>
c0022911:	be 01 00 00 00       	mov    esi,0x1
c0022916:	e9 ac fd ff ff       	jmp    c00226c7 <IDE::detect()+0x2f>
c002291b:	50                   	push   eax
c002291c:	6a 04                	push   0x4
c002291e:	56                   	push   esi
c002291f:	53                   	push   ebx
c0022920:	e8 05 f7 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022925:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022929:	83 c4 0c             	add    esp,0xc
c002292c:	6a 05                	push   0x5
c002292e:	56                   	push   esi
c002292f:	53                   	push   ebx
c0022930:	e8 f5 f6 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022935:	83 c4 10             	add    esp,0x10
c0022938:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002293c:	80 fa 14             	cmp    dl,0x14
c002293f:	75 04                	jne    c0022945 <IDE::detect()+0x2ad>
c0022941:	3c eb                	cmp    al,0xeb
c0022943:	eb 07                	jmp    c002294c <IDE::detect()+0x2b4>
c0022945:	3c 96                	cmp    al,0x96
c0022947:	75 b8                	jne    c0022901 <IDE::detect()+0x269>
c0022949:	80 fa 69             	cmp    dl,0x69
c002294c:	75 b3                	jne    c0022901 <IDE::detect()+0x269>
c002294e:	68 a1 00 00 00       	push   0xa1
c0022953:	6a 07                	push   0x7
c0022955:	56                   	push   esi
c0022956:	53                   	push   ebx
c0022957:	e8 0e f6 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002295c:	5f                   	pop    edi
c002295d:	58                   	pop    eax
c002295e:	6a 00                	push   0x0
c0022960:	68 40 42 0f 00       	push   0xf4240
c0022965:	e8 24 a9 ff ff       	call   c001d28e <nanoSleep(unsigned long long)>
c002296a:	83 c4 10             	add    esp,0x10
c002296d:	b1 01                	mov    cl,0x1
c002296f:	e9 4a fe ff ff       	jmp    c00227be <IDE::detect()+0x126>
c0022974:	81 c4 1c 02 00 00    	add    esp,0x21c
c002297a:	5b                   	pop    ebx
c002297b:	5e                   	pop    esi
c002297c:	5f                   	pop    edi
c002297d:	5d                   	pop    ebp
c002297e:	c3                   	ret    
c002297f:	90                   	nop

c0022980 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022980:	55                   	push   ebp
c0022981:	57                   	push   edi
c0022982:	56                   	push   esi
c0022983:	53                   	push   ebx
c0022984:	83 ec 1c             	sub    esp,0x1c
c0022987:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002298b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002298f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022993:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022997:	88 c3                	mov    bl,al
c0022999:	84 c0                	test   al,al
c002299b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002299f:	0f 84 67 01 00 00    	je     c0022b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00229a5:	83 ec 0c             	sub    esp,0xc
c00229a8:	68 3b b1 02 c0       	push   0xc002b13b
c00229ad:	e8 e3 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00229b2:	83 c4 10             	add    esp,0x10
c00229b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229b9:	3c 01                	cmp    al,0x1
c00229bb:	75 17                	jne    c00229d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00229bd:	83 ec 0c             	sub    esp,0xc
c00229c0:	b3 13                	mov    bl,0x13
c00229c2:	68 47 b1 02 c0       	push   0xc002b147
c00229c7:	e8 c9 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00229cc:	83 c4 10             	add    esp,0x10
c00229cf:	e9 25 01 00 00       	jmp    c0022af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229d4:	3c 02                	cmp    al,0x2
c00229d6:	0f 85 ef 00 00 00    	jne    c0022acb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00229dc:	d1 e6                	shl    esi,1
c00229de:	09 ee                	or     esi,ebp
c00229e0:	52                   	push   edx
c00229e1:	89 f0                	mov    eax,esi
c00229e3:	6a 01                	push   0x1
c00229e5:	0f b6 f0             	movzx  esi,al
c00229e8:	c1 e6 06             	shl    esi,0x6
c00229eb:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00229f3:	50                   	push   eax
c00229f4:	57                   	push   edi
c00229f5:	e8 30 f6 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c00229fa:	83 c4 10             	add    esp,0x10
c00229fd:	89 c6                	mov    esi,eax
c00229ff:	a8 01                	test   al,0x1
c0022a01:	74 12                	je     c0022a15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022a03:	83 ec 0c             	sub    esp,0xc
c0022a06:	b3 07                	mov    bl,0x7
c0022a08:	68 5c b1 02 c0       	push   0xc002b15c
c0022a0d:	e8 83 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a12:	83 c4 10             	add    esp,0x10
c0022a15:	f7 c6 02 00 00 00    	test   esi,0x2
c0022a1b:	74 12                	je     c0022a2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022a1d:	83 ec 0c             	sub    esp,0xc
c0022a20:	b3 03                	mov    bl,0x3
c0022a22:	68 7a b1 02 c0       	push   0xc002b17a
c0022a27:	e8 69 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a2c:	83 c4 10             	add    esp,0x10
c0022a2f:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a35:	74 12                	je     c0022a49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a37:	83 ec 0c             	sub    esp,0xc
c0022a3a:	b3 14                	mov    bl,0x14
c0022a3c:	68 9a b1 02 c0       	push   0xc002b19a
c0022a41:	e8 4f fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a46:	83 c4 10             	add    esp,0x10
c0022a49:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a4f:	74 12                	je     c0022a63 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a51:	83 ec 0c             	sub    esp,0xc
c0022a54:	b3 03                	mov    bl,0x3
c0022a56:	68 7a b1 02 c0       	push   0xc002b17a
c0022a5b:	e8 35 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a60:	83 c4 10             	add    esp,0x10
c0022a63:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a69:	74 12                	je     c0022a7d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a6b:	83 ec 0c             	sub    esp,0xc
c0022a6e:	b3 15                	mov    bl,0x15
c0022a70:	68 b2 b1 02 c0       	push   0xc002b1b2
c0022a75:	e8 1b fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a7a:	83 c4 10             	add    esp,0x10
c0022a7d:	f7 c6 20 00 00 00    	test   esi,0x20
c0022a83:	74 12                	je     c0022a97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022a85:	83 ec 0c             	sub    esp,0xc
c0022a88:	b3 03                	mov    bl,0x3
c0022a8a:	68 7a b1 02 c0       	push   0xc002b17a
c0022a8f:	e8 01 fd fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022a94:	83 c4 10             	add    esp,0x10
c0022a97:	f7 c6 40 00 00 00    	test   esi,0x40
c0022a9d:	74 12                	je     c0022ab1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022a9f:	83 ec 0c             	sub    esp,0xc
c0022aa2:	b3 16                	mov    bl,0x16
c0022aa4:	68 cc b1 02 c0       	push   0xc002b1cc
c0022aa9:	e8 e7 fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022aae:	83 c4 10             	add    esp,0x10
c0022ab1:	89 f0                	mov    eax,esi
c0022ab3:	84 c0                	test   al,al
c0022ab5:	79 42                	jns    c0022af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ab7:	83 ec 0c             	sub    esp,0xc
c0022aba:	b3 0d                	mov    bl,0xd
c0022abc:	68 ed b1 02 c0       	push   0xc002b1ed
c0022ac1:	e8 cf fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022ac6:	83 c4 10             	add    esp,0x10
c0022ac9:	eb 2e                	jmp    c0022af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022acb:	3c 03                	cmp    al,0x3
c0022acd:	75 14                	jne    c0022ae3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022acf:	83 ec 0c             	sub    esp,0xc
c0022ad2:	b3 17                	mov    bl,0x17
c0022ad4:	68 01 b2 02 c0       	push   0xc002b201
c0022ad9:	e8 b7 fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022ade:	83 c4 10             	add    esp,0x10
c0022ae1:	eb 16                	jmp    c0022af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ae3:	3c 04                	cmp    al,0x4
c0022ae5:	75 12                	jne    c0022af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ae7:	83 ec 0c             	sub    esp,0xc
c0022aea:	b3 08                	mov    bl,0x8
c0022aec:	68 17 b2 02 c0       	push   0xc002b217
c0022af1:	e8 9f fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022af6:	83 c4 10             	add    esp,0x10
c0022af9:	50                   	push   eax
c0022afa:	50                   	push   eax
c0022afb:	0f b6 c3             	movzx  eax,bl
c0022afe:	50                   	push   eax
c0022aff:	68 2f b2 02 c0       	push   0xc002b22f
c0022b04:	e8 8c fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022b09:	83 c4 10             	add    esp,0x10
c0022b0c:	83 c4 1c             	add    esp,0x1c
c0022b0f:	88 d8                	mov    al,bl
c0022b11:	5b                   	pop    ebx
c0022b12:	5e                   	pop    esi
c0022b13:	5f                   	pop    edi
c0022b14:	5d                   	pop    ebp
c0022b15:	c3                   	ret    

c0022b16 <IDE::polling(unsigned char, unsigned int)>:
c0022b16:	57                   	push   edi
c0022b17:	56                   	push   esi
c0022b18:	53                   	push   ebx
c0022b19:	bb 04 00 00 00       	mov    ebx,0x4
c0022b1e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022b22:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b27:	52                   	push   edx
c0022b28:	6a 0c                	push   0xc
c0022b2a:	56                   	push   esi
c0022b2b:	57                   	push   edi
c0022b2c:	e8 f9 f4 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022b31:	83 c4 10             	add    esp,0x10
c0022b34:	4b                   	dec    ebx
c0022b35:	75 f0                	jne    c0022b27 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b37:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b3c:	50                   	push   eax
c0022b3d:	6a 0c                	push   0xc
c0022b3f:	56                   	push   esi
c0022b40:	57                   	push   edi
c0022b41:	e8 e4 f4 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022b46:	83 c4 10             	add    esp,0x10
c0022b49:	a8 01                	test   al,0x1
c0022b4b:	74 12                	je     c0022b5f <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b4d:	83 ec 0c             	sub    esp,0xc
c0022b50:	68 49 b2 02 c0       	push   0xc002b249
c0022b55:	e8 3b fc fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022b5a:	83 c4 10             	add    esp,0x10
c0022b5d:	eb 17                	jmp    c0022b76 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b5f:	a8 20                	test   al,0x20
c0022b61:	75 0f                	jne    c0022b72 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b63:	4b                   	dec    ebx
c0022b64:	74 10                	je     c0022b76 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b66:	84 c0                	test   al,al
c0022b68:	78 d2                	js     c0022b3c <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b6a:	a8 08                	test   al,0x8
c0022b6c:	74 ce                	je     c0022b3c <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b6e:	31 c0                	xor    eax,eax
c0022b70:	eb 06                	jmp    c0022b78 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b72:	b0 01                	mov    al,0x1
c0022b74:	eb 02                	jmp    c0022b78 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b76:	b0 02                	mov    al,0x2
c0022b78:	5b                   	pop    ebx
c0022b79:	5e                   	pop    esi
c0022b7a:	5f                   	pop    edi
c0022b7b:	c3                   	ret    

c0022b7c <SATABus::close(int, int, void*)>:
c0022b7c:	31 c0                	xor    eax,eax
c0022b7e:	c3                   	ret    
c0022b7f:	90                   	nop

c0022b80 <SATABus::detect()>:
c0022b80:	c3                   	ret    
c0022b81:	90                   	nop

c0022b82 <SATABus::SATABus()>:
c0022b82:	83 ec 0c             	sub    esp,0xc
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	83 ec 08             	sub    esp,0x8
c0022b8c:	68 8c b2 02 c0       	push   0xc002b28c
c0022b91:	50                   	push   eax
c0022b92:	e8 79 13 ff ff       	call   c0013f10 <HardDiskController::HardDiskController(char const*)>
c0022b97:	83 c4 10             	add    esp,0x10
c0022b9a:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0022b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba3:	89 10                	mov    DWORD PTR [eax],edx
c0022ba5:	83 ec 0c             	sub    esp,0xc
c0022ba8:	6a 50                	push   0x50
c0022baa:	e8 aa cf fe ff       	call   c000fb59 <Phys::allocateContiguousPages(int)>
c0022baf:	83 c4 10             	add    esp,0x10
c0022bb2:	89 c2                	mov    edx,eax
c0022bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022bbe:	83 ec 0c             	sub    esp,0xc
c0022bc1:	6a 50                	push   0x50
c0022bc3:	e8 dd eb fe ff       	call   c00117a5 <Virt::allocateKernelVirtualPages(int)>
c0022bc8:	83 c4 10             	add    esp,0x10
c0022bcb:	89 c2                	mov    edx,eax
c0022bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022bd7:	e8 59 ed fe ff       	call   c0011935 <Virt::getAKernelVAS()>
c0022bdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022be0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022be6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022bf0:	83 ec 0c             	sub    esp,0xc
c0022bf3:	6a 03                	push   0x3
c0022bf5:	6a 50                	push   0x50
c0022bf7:	51                   	push   ecx
c0022bf8:	52                   	push   edx
c0022bf9:	50                   	push   eax
c0022bfa:	e8 65 f5 fe ff       	call   c0012164 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022bff:	83 c4 20             	add    esp,0x20
c0022c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c06:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c10:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c16:	83 ec 04             	sub    esp,0x4
c0022c19:	52                   	push   edx
c0022c1a:	50                   	push   eax
c0022c1b:	68 b0 b2 02 c0       	push   0xc002b2b0
c0022c20:	e8 70 fb fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022c25:	83 c4 10             	add    esp,0x10
c0022c28:	90                   	nop
c0022c29:	83 c4 0c             	add    esp,0xc
c0022c2c:	c3                   	ret    
c0022c2d:	90                   	nop

c0022c2e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c2e:	83 ec 0c             	sub    esp,0xc
c0022c31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c35:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c38:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c3b:	09 c2                	or     edx,eax
c0022c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c47:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c49:	31 c0                	xor    eax,eax
c0022c4b:	c1 e9 08             	shr    ecx,0x8
c0022c4e:	83 e1 0f             	and    ecx,0xf
c0022c51:	39 c8                	cmp    eax,ecx
c0022c53:	74 0a                	je     c0022c5f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c55:	f6 c2 01             	test   dl,0x1
c0022c58:	74 18                	je     c0022c72 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c5a:	d1 ea                	shr    edx,1
c0022c5c:	40                   	inc    eax
c0022c5d:	eb f2                	jmp    c0022c51 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c5f:	83 ec 0c             	sub    esp,0xc
c0022c62:	68 d4 b2 02 c0       	push   0xc002b2d4
c0022c67:	e8 43 6c ff ff       	call   c00198af <Krnl::panic(char const*)>
c0022c6c:	83 c4 10             	add    esp,0x10
c0022c6f:	83 c8 ff             	or     eax,0xffffffff
c0022c72:	83 c4 0c             	add    esp,0xc
c0022c75:	c3                   	ret    

c0022c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022c76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022c7a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022c7d:	89 c2                	mov    edx,eax
c0022c7f:	c1 ea 08             	shr    edx,0x8
c0022c82:	83 e2 0f             	and    edx,0xf
c0022c85:	fe ca                	dec    dl
c0022c87:	75 31                	jne    c0022cba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c89:	83 e0 0f             	and    eax,0xf
c0022c8c:	3c 03                	cmp    al,0x3
c0022c8e:	75 2a                	jne    c0022cba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c90:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022c93:	b8 02 00 00 00       	mov    eax,0x2
c0022c98:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022c9e:	74 1c                	je     c0022cbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022ca0:	b8 04 00 00 00       	mov    eax,0x4
c0022ca5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022cab:	74 0f                	je     c0022cbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022cad:	31 c0                	xor    eax,eax
c0022caf:	83 fa 03             	cmp    edx,0x3
c0022cb2:	0f 94 c0             	sete   al
c0022cb5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022cb9:	c3                   	ret    
c0022cba:	31 c0                	xor    eax,eax
c0022cbc:	c3                   	ret    
c0022cbd:	90                   	nop

c0022cbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cc5:	0f ba e2 0f          	bt     edx,0xf
c0022cc9:	72 f7                	jb     c0022cc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022ccb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cce:	83 ca 10             	or     edx,0x10
c0022cd1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cd4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cd7:	83 ca 01             	or     edx,0x1
c0022cda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cdd:	c3                   	ret    

c0022cde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ce2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ce5:	83 e2 fe             	and    edx,0xfffffffe
c0022ce8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022ceb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cee:	83 e2 ef             	and    edx,0xffffffef
c0022cf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cf7:	0f ba e2 0e          	bt     edx,0xe
c0022cfb:	72 f7                	jb     c0022cf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cfd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d00:	0f ba e2 0f          	bt     edx,0xf
c0022d04:	72 ee                	jb     c0022cf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d06:	c3                   	ret    
c0022d07:	90                   	nop

c0022d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022d08:	55                   	push   ebp
c0022d09:	57                   	push   edi
c0022d0a:	56                   	push   esi
c0022d0b:	53                   	push   ebx
c0022d0c:	83 ec 1c             	sub    esp,0x1c
c0022d0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d1b:	53                   	push   ebx
c0022d1c:	89 fd                	mov    ebp,edi
c0022d1e:	56                   	push   esi
c0022d1f:	c1 e5 0a             	shl    ebp,0xa
c0022d22:	e8 b7 ff ff ff       	call   c0022cde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d27:	83 ec 0c             	sub    esp,0xc
c0022d2a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d30:	01 e8                	add    eax,ebp
c0022d32:	89 03                	mov    DWORD PTR [ebx],eax
c0022d34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d36:	68 00 04 00 00       	push   0x400
c0022d3b:	6a 00                	push   0x0
c0022d3d:	50                   	push   eax
c0022d3e:	e8 48 d9 fd ff       	call   c000068b <memset>
c0022d43:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d49:	89 fa                	mov    edx,edi
c0022d4b:	01 e8                	add    eax,ebp
c0022d4d:	c1 e7 0d             	shl    edi,0xd
c0022d50:	89 03                	mov    DWORD PTR [ebx],eax
c0022d52:	c1 e2 08             	shl    edx,0x8
c0022d55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d5c:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d66:	89 d0                	mov    eax,edx
c0022d68:	83 c4 1c             	add    esp,0x1c
c0022d6b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d71:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022d74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022d77:	68 00 01 00 00       	push   0x100
c0022d7c:	6a 00                	push   0x0
c0022d7e:	50                   	push   eax
c0022d7f:	e8 07 d9 fd ff       	call   c000068b <memset>
c0022d84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d88:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022d8e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022d94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d98:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022d9b:	83 c4 10             	add    esp,0x10
c0022d9e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022da5:	31 ff                	xor    edi,edi
c0022da7:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022dad:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022db7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022dbd:	83 c5 20             	add    ebp,0x20
c0022dc0:	01 f8                	add    eax,edi
c0022dc2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022dc5:	52                   	push   edx
c0022dc6:	68 00 01 00 00       	push   0x100
c0022dcb:	6a 00                	push   0x0
c0022dcd:	50                   	push   eax
c0022dce:	e8 b8 d8 fd ff       	call   c000068b <memset>
c0022dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022de0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022de7:	01 f8                	add    eax,edi
c0022de9:	81 c7 00 01 00 00    	add    edi,0x100
c0022def:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022df2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022df8:	75 b3                	jne    c0022dad <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022dfa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022dfe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022e02:	83 c4 1c             	add    esp,0x1c
c0022e05:	5b                   	pop    ebx
c0022e06:	5e                   	pop    esi
c0022e07:	5f                   	pop    edi
c0022e08:	5d                   	pop    ebp
c0022e09:	e9 b0 fe ff ff       	jmp    c0022cbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022e0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022e0e:	55                   	push   ebp
c0022e0f:	57                   	push   edi
c0022e10:	56                   	push   esi
c0022e11:	53                   	push   ebx
c0022e12:	31 db                	xor    ebx,ebx
c0022e14:	83 ec 0c             	sub    esp,0xc
c0022e17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022e1f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022e22:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e28:	0f 84 94 00 00 00    	je     c0022ec2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e32:	89 d8                	mov    eax,ebx
c0022e34:	c1 e0 07             	shl    eax,0x7
c0022e37:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e3e:	55                   	push   ebp
c0022e3f:	56                   	push   esi
c0022e40:	e8 31 fe ff ff       	call   c0022c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e45:	59                   	pop    ecx
c0022e46:	83 f8 01             	cmp    eax,0x1
c0022e49:	5a                   	pop    edx
c0022e4a:	75 47                	jne    c0022e93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e4c:	51                   	push   ecx
c0022e4d:	51                   	push   ecx
c0022e4e:	53                   	push   ebx
c0022e4f:	68 f9 b2 02 c0       	push   0xc002b2f9
c0022e54:	e8 3c f9 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022e59:	83 c4 0c             	add    esp,0xc
c0022e5c:	53                   	push   ebx
c0022e5d:	55                   	push   ebp
c0022e5e:	56                   	push   esi
c0022e5f:	e8 a4 fe ff ff       	call   c0022d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e64:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e6b:	e8 64 c6 fe ff       	call   c000f4d4 <malloc>
c0022e70:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e73:	89 c5                	mov    ebp,eax
c0022e75:	e8 de 0c 00 00       	call   c0023b58 <SATA::SATA()>
c0022e7a:	58                   	pop    eax
c0022e7b:	5a                   	pop    edx
c0022e7c:	55                   	push   ebp
c0022e7d:	56                   	push   esi
c0022e7e:	e8 01 0d ff ff       	call   c0013b84 <Device::addChild(Device*)>
c0022e83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e86:	56                   	push   esi
c0022e87:	6a 00                	push   0x0
c0022e89:	53                   	push   ebx
c0022e8a:	55                   	push   ebp
c0022e8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e8e:	83 c4 20             	add    esp,0x20
c0022e91:	eb 2f                	jmp    c0022ec2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e93:	83 f8 04             	cmp    eax,0x4
c0022e96:	75 1a                	jne    c0022eb2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022e98:	52                   	push   edx
c0022e99:	52                   	push   edx
c0022e9a:	53                   	push   ebx
c0022e9b:	68 10 b3 02 c0       	push   0xc002b310
c0022ea0:	e8 f0 f8 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022ea5:	83 c4 0c             	add    esp,0xc
c0022ea8:	53                   	push   ebx
c0022ea9:	55                   	push   ebp
c0022eaa:	56                   	push   esi
c0022eab:	e8 58 fe ff ff       	call   c0022d08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022eb0:	eb 0d                	jmp    c0022ebf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022eb2:	50                   	push   eax
c0022eb3:	50                   	push   eax
c0022eb4:	53                   	push   ebx
c0022eb5:	68 29 b3 02 c0       	push   0xc002b329
c0022eba:	e8 d6 f8 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0022ebf:	83 c4 10             	add    esp,0x10
c0022ec2:	d1 ef                	shr    edi,1
c0022ec4:	43                   	inc    ebx
c0022ec5:	83 fb 20             	cmp    ebx,0x20
c0022ec8:	0f 85 54 ff ff ff    	jne    c0022e22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022ece:	83 c4 0c             	add    esp,0xc
c0022ed1:	5b                   	pop    ebx
c0022ed2:	5e                   	pop    esi
c0022ed3:	5f                   	pop    edi
c0022ed4:	5d                   	pop    ebp
c0022ed5:	c3                   	ret    

c0022ed6 <SATABus::open(int, int, void*)>:
c0022ed6:	83 ec 14             	sub    esp,0x14
c0022ed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022edd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022ee3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022ee9:	52                   	push   edx
c0022eea:	50                   	push   eax
c0022eeb:	e8 1e ff ff ff       	call   c0022e0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022ef0:	31 c0                	xor    eax,eax
c0022ef2:	83 c4 1c             	add    esp,0x1c
c0022ef5:	c3                   	ret    

c0022ef6 <ATA::close(int, int, void*)>:
c0022ef6:	83 ec 0c             	sub    esp,0xc
c0022ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f03:	85 c0                	test   eax,eax
c0022f05:	74 0c                	je     c0022f13 <ATA::close(int, int, void*)+0x1d>
c0022f07:	83 ec 0c             	sub    esp,0xc
c0022f0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f0c:	50                   	push   eax
c0022f0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	31 c0                	xor    eax,eax
c0022f15:	83 c4 0c             	add    esp,0xc
c0022f18:	c3                   	ret    
c0022f19:	90                   	nop

c0022f1a <ATA::powerSaving(PowerSavingLevel)>:
c0022f1a:	c3                   	ret    
c0022f1b:	90                   	nop

c0022f1c <ATA::ATA()>:
c0022f1c:	83 ec 0c             	sub    esp,0xc
c0022f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f23:	83 ec 04             	sub    esp,0x4
c0022f26:	68 00 02 00 00       	push   0x200
c0022f2b:	68 3c b4 02 c0       	push   0xc002b43c
c0022f30:	50                   	push   eax
c0022f31:	e8 5e 10 ff ff       	call   c0013f94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f36:	83 c4 10             	add    esp,0x10
c0022f39:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c0022f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f42:	89 10                	mov    DWORD PTR [eax],edx
c0022f44:	90                   	nop
c0022f45:	83 c4 0c             	add    esp,0xc
c0022f48:	c3                   	ret    
c0022f49:	90                   	nop

c0022f4a <ATA::flush(bool)>:
c0022f4a:	53                   	push   ebx
c0022f4b:	83 ec 08             	sub    esp,0x8
c0022f4e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f57:	19 c0                	sbb    eax,eax
c0022f59:	83 e0 fd             	and    eax,0xfffffffd
c0022f5c:	05 ea 00 00 00       	add    eax,0xea
c0022f61:	50                   	push   eax
c0022f62:	6a 07                	push   0x7
c0022f64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f6b:	50                   	push   eax
c0022f6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f72:	e8 f3 ef ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f77:	83 c4 0c             	add    esp,0xc
c0022f7a:	6a 00                	push   0x0
c0022f7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f83:	50                   	push   eax
c0022f84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f8a:	e8 87 fb ff ff       	call   c0022b16 <IDE::polling(unsigned char, unsigned int)>
c0022f8f:	83 c4 18             	add    esp,0x18
c0022f92:	5b                   	pop    ebx
c0022f93:	c3                   	ret    

c0022f94 <ATA::readyForCommand()>:
c0022f94:	56                   	push   esi
c0022f95:	53                   	push   ebx
c0022f96:	31 db                	xor    ebx,ebx
c0022f98:	50                   	push   eax
c0022f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f9d:	50                   	push   eax
c0022f9e:	6a 0c                	push   0xc
c0022fa0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022fa7:	50                   	push   eax
c0022fa8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022fae:	e8 77 f0 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0022fb3:	83 c4 10             	add    esp,0x10
c0022fb6:	a8 88                	test   al,0x88
c0022fb8:	74 23                	je     c0022fdd <ATA::readyForCommand()+0x49>
c0022fba:	43                   	inc    ebx
c0022fbb:	83 fb 63             	cmp    ebx,0x63
c0022fbe:	7e dd                	jle    c0022f9d <ATA::readyForCommand()+0x9>
c0022fc0:	51                   	push   ecx
c0022fc1:	51                   	push   ecx
c0022fc2:	6a 00                	push   0x0
c0022fc4:	68 40 42 0f 00       	push   0xf4240
c0022fc9:	e8 c0 a2 ff ff       	call   c001d28e <nanoSleep(unsigned long long)>
c0022fce:	83 c4 10             	add    esp,0x10
c0022fd1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022fd7:	75 c4                	jne    c0022f9d <ATA::readyForCommand()+0x9>
c0022fd9:	31 c0                	xor    eax,eax
c0022fdb:	eb 02                	jmp    c0022fdf <ATA::readyForCommand()+0x4b>
c0022fdd:	b0 01                	mov    al,0x1
c0022fdf:	5a                   	pop    edx
c0022fe0:	5b                   	pop    ebx
c0022fe1:	5e                   	pop    esi
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <ATA::access(unsigned long long, int, void*, bool)>:
c0022fe4:	55                   	push   ebp
c0022fe5:	57                   	push   edi
c0022fe6:	56                   	push   esi
c0022fe7:	53                   	push   ebx
c0022fe8:	83 ec 2c             	sub    esp,0x2c
c0022feb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022fef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022ff3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022ff7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022ffb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023003:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023007:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002300d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023011:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023017:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002301b:	c1 e0 06             	shl    eax,0x6
c002301e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023026:	74 5d                	je     c0023085 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023028:	89 fa                	mov    edx,edi
c002302a:	89 f0                	mov    eax,esi
c002302c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023030:	c1 ea 1c             	shr    edx,0x1c
c0023033:	89 d1                	mov    ecx,edx
c0023035:	09 c1                	or     ecx,eax
c0023037:	74 25                	je     c002305e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023039:	31 ed                	xor    ebp,ebp
c002303b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023042:	89 fa                	mov    edx,edi
c0023044:	89 f0                	mov    eax,esi
c0023046:	0f ad d0             	shrd   eax,edx,cl
c0023049:	d3 ea                	shr    edx,cl
c002304b:	f6 c1 20             	test   cl,0x20
c002304e:	74 02                	je     c0023052 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023050:	89 d0                	mov    eax,edx
c0023052:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023056:	45                   	inc    ebp
c0023057:	83 fd 06             	cmp    ebp,0x6
c002305a:	75 df                	jne    c002303b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002305c:	eb 76                	jmp    c00230d4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002305e:	89 f0                	mov    eax,esi
c0023060:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023065:	89 fa                	mov    edx,edi
c0023067:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002306e:	0f ac d0 10          	shrd   eax,edx,0x10
c0023072:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023077:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002307b:	c1 ee 18             	shr    esi,0x18
c002307e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023083:	eb 56                	jmp    c00230db <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023085:	6a 00                	push   0x0
c0023087:	6a 3f                	push   0x3f
c0023089:	57                   	push   edi
c002308a:	56                   	push   esi
c002308b:	e8 3c 24 00 00       	call   c00254cc <__umoddi3>
c0023090:	83 c4 10             	add    esp,0x10
c0023093:	40                   	inc    eax
c0023094:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023098:	6a 00                	push   0x0
c002309a:	68 f0 03 00 00       	push   0x3f0
c002309f:	57                   	push   edi
c00230a0:	56                   	push   esi
c00230a1:	e8 26 23 00 00       	call   c00253cc <__udivdi3>
c00230a6:	83 c4 10             	add    esp,0x10
c00230a9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00230ae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00230b5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230ba:	6a 00                	push   0x0
c00230bc:	6a 3f                	push   0x3f
c00230be:	57                   	push   edi
c00230bf:	56                   	push   esi
c00230c0:	e8 07 23 00 00       	call   c00253cc <__udivdi3>
c00230c5:	83 c4 10             	add    esp,0x10
c00230c8:	89 c6                	mov    esi,eax
c00230ca:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00230cf:	83 e6 0f             	and    esi,0xf
c00230d2:	eb 07                	jmp    c00230db <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230d4:	31 f6                	xor    esi,esi
c00230d6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00230db:	bf 01 00 00 00       	mov    edi,0x1
c00230e0:	50                   	push   eax
c00230e1:	6a 00                	push   0x0
c00230e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230ea:	50                   	push   eax
c00230eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230ef:	e8 82 f0 ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00230f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230f7:	e8 98 fe ff ff       	call   c0022f94 <ATA::readyForCommand()>
c00230fc:	83 c4 10             	add    esp,0x10
c00230ff:	84 c0                	test   al,al
c0023101:	0f 84 50 02 00 00    	je     c0023357 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023107:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002310d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023113:	c1 e0 04             	shl    eax,0x4
c0023116:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002311d:	09 c6                	or     esi,eax
c002311f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023124:	75 05                	jne    c002312b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023126:	83 ce a0             	or     esi,0xffffffa0
c0023129:	eb 03                	jmp    c002312e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002312b:	83 ce e0             	or     esi,0xffffffe0
c002312e:	89 f0                	mov    eax,esi
c0023130:	0f b6 f0             	movzx  esi,al
c0023133:	56                   	push   esi
c0023134:	6a 06                	push   0x6
c0023136:	51                   	push   ecx
c0023137:	52                   	push   edx
c0023138:	e8 2d ee ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002313d:	83 c4 10             	add    esp,0x10
c0023140:	6a 00                	push   0x0
c0023142:	6a 01                	push   0x1
c0023144:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002314b:	50                   	push   eax
c002314c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023152:	e8 13 ee ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023157:	83 c4 10             	add    esp,0x10
c002315a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002315f:	75 6e                	jne    c00231cf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023161:	6a 00                	push   0x0
c0023163:	6a 08                	push   0x8
c0023165:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002316c:	50                   	push   eax
c002316d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023173:	e8 f2 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023178:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002317d:	50                   	push   eax
c002317e:	6a 09                	push   0x9
c0023180:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023187:	50                   	push   eax
c0023188:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002318e:	e8 d7 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023193:	83 c4 20             	add    esp,0x20
c0023196:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002319b:	50                   	push   eax
c002319c:	6a 0a                	push   0xa
c002319e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231a5:	50                   	push   eax
c00231a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231ac:	e8 b9 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00231b6:	50                   	push   eax
c00231b7:	6a 0b                	push   0xb
c00231b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231c0:	50                   	push   eax
c00231c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231c7:	e8 9e ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231cc:	83 c4 20             	add    esp,0x20
c00231cf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00231d4:	50                   	push   eax
c00231d5:	6a 02                	push   0x2
c00231d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231de:	50                   	push   eax
c00231df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231e5:	e8 80 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ea:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00231ef:	50                   	push   eax
c00231f0:	6a 03                	push   0x3
c00231f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231f9:	50                   	push   eax
c00231fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023200:	e8 65 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023205:	83 c4 20             	add    esp,0x20
c0023208:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002320d:	50                   	push   eax
c002320e:	6a 04                	push   0x4
c0023210:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023217:	50                   	push   eax
c0023218:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002321e:	e8 47 ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023223:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023228:	50                   	push   eax
c0023229:	6a 05                	push   0x5
c002322b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023232:	50                   	push   eax
c0023233:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023239:	e8 2c ed ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002323e:	83 c4 20             	add    esp,0x20
c0023241:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023246:	0f 94 c0             	sete   al
c0023249:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002324e:	74 09                	je     c0023259 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023250:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023257:	eb 07                	jmp    c0023260 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023259:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023260:	0f b6 c0             	movzx  eax,al
c0023263:	50                   	push   eax
c0023264:	6a 07                	push   0x7
c0023266:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002326d:	50                   	push   eax
c002326e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023274:	e8 f1 ec ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023279:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002327d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023281:	83 c4 10             	add    esp,0x10
c0023284:	85 f6                	test   esi,esi
c0023286:	0f 84 ac 00 00 00    	je     c0023338 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002328c:	50                   	push   eax
c002328d:	6a 01                	push   0x1
c002328f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023296:	50                   	push   eax
c0023297:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002329d:	e8 74 f8 ff ff       	call   c0022b16 <IDE::polling(unsigned char, unsigned int)>
c00232a2:	83 c4 10             	add    esp,0x10
c00232a5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00232ab:	84 c0                	test   al,al
c00232ad:	74 20                	je     c00232cf <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00232af:	0f b6 f8             	movzx  edi,al
c00232b2:	0f b6 d2             	movzx  edx,dl
c00232b5:	57                   	push   edi
c00232b6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00232bd:	50                   	push   eax
c00232be:	52                   	push   edx
c00232bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232c5:	e8 b6 f6 ff ff       	call   c0022980 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00232ca:	e9 85 00 00 00       	jmp    c0023354 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00232cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00232d4:	74 41                	je     c0023317 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00232d6:	31 c9                	xor    ecx,ecx
c00232d8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00232dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232e0:	50                   	push   eax
c00232e1:	50                   	push   eax
c00232e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232e9:	50                   	push   eax
c00232ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232f0:	e8 63 ec ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c00232f5:	89 c2                	mov    edx,eax
c00232f7:	89 e8                	mov    eax,ebp
c00232f9:	66 ef                	out    dx,ax
c00232fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232ff:	83 c4 10             	add    esp,0x10
c0023302:	41                   	inc    ecx
c0023303:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023309:	75 cd                	jne    c00232d8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c002330b:	4e                   	dec    esi
c002330c:	81 c7 00 02 00 00    	add    edi,0x200
c0023312:	e9 6d ff ff ff       	jmp    c0023284 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023317:	0f b6 d2             	movzx  edx,dl
c002331a:	51                   	push   ecx
c002331b:	51                   	push   ecx
c002331c:	52                   	push   edx
c002331d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023323:	e8 30 ec ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c0023328:	b9 00 01 00 00       	mov    ecx,0x100
c002332d:	89 c2                	mov    edx,eax
c002332f:	fc                   	cld    
c0023330:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023333:	83 c4 10             	add    esp,0x10
c0023336:	eb d3                	jmp    c002330b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023338:	31 ff                	xor    edi,edi
c002333a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002333f:	74 16                	je     c0023357 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023341:	50                   	push   eax
c0023342:	50                   	push   eax
c0023343:	31 c0                	xor    eax,eax
c0023345:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002334a:	0f 94 c0             	sete   al
c002334d:	50                   	push   eax
c002334e:	53                   	push   ebx
c002334f:	e8 f6 fb ff ff       	call   c0022f4a <ATA::flush(bool)>
c0023354:	83 c4 10             	add    esp,0x10
c0023357:	83 c4 2c             	add    esp,0x2c
c002335a:	89 f8                	mov    eax,edi
c002335c:	5b                   	pop    ebx
c002335d:	5e                   	pop    esi
c002335e:	5f                   	pop    edi
c002335f:	5d                   	pop    ebp
c0023360:	c3                   	ret    
c0023361:	90                   	nop

c0023362 <ATA::read(unsigned long long, int, void*)>:
c0023362:	57                   	push   edi
c0023363:	b8 04 00 00 00       	mov    eax,0x4
c0023368:	56                   	push   esi
c0023369:	53                   	push   ebx
c002336a:	83 ec 10             	sub    esp,0x10
c002336d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023371:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023375:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023378:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002337c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023380:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023386:	77 3b                	ja     c00233c3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023388:	b8 06 00 00 00       	mov    eax,0x6
c002338d:	85 d2                	test   edx,edx
c002338f:	74 32                	je     c00233c3 <ATA::read(unsigned long long, int, void*)+0x61>
c0023391:	50                   	push   eax
c0023392:	50                   	push   eax
c0023393:	6a 00                	push   0x0
c0023395:	52                   	push   edx
c0023396:	53                   	push   ebx
c0023397:	57                   	push   edi
c0023398:	56                   	push   esi
c0023399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002339d:	e8 42 fc ff ff       	call   c0022fe4 <ATA::access(unsigned long long, int, void*, bool)>
c00233a2:	83 c4 20             	add    esp,0x20
c00233a5:	85 c0                	test   eax,eax
c00233a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233ab:	75 11                	jne    c00233be <ATA::read(unsigned long long, int, void*)+0x5c>
c00233ad:	01 1d a8 ec 02 c0    	add    DWORD PTR ds:0xc002eca8,ebx
c00233b3:	e8 a0 d1 fe ff       	call   c0010558 <VgaText::updateDiskUsage()>
c00233b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233bc:	eb 05                	jmp    c00233c3 <ATA::read(unsigned long long, int, void*)+0x61>
c00233be:	b8 01 00 00 00       	mov    eax,0x1
c00233c3:	83 c4 10             	add    esp,0x10
c00233c6:	5b                   	pop    ebx
c00233c7:	5e                   	pop    esi
c00233c8:	5f                   	pop    edi
c00233c9:	c3                   	ret    

c00233ca <ATA::write(unsigned long long, int, void*)>:
c00233ca:	57                   	push   edi
c00233cb:	b8 04 00 00 00       	mov    eax,0x4
c00233d0:	56                   	push   esi
c00233d1:	53                   	push   ebx
c00233d2:	83 ec 10             	sub    esp,0x10
c00233d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00233d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233dd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233e8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233ee:	77 3b                	ja     c002342b <ATA::write(unsigned long long, int, void*)+0x61>
c00233f0:	b8 06 00 00 00       	mov    eax,0x6
c00233f5:	85 d2                	test   edx,edx
c00233f7:	74 32                	je     c002342b <ATA::write(unsigned long long, int, void*)+0x61>
c00233f9:	50                   	push   eax
c00233fa:	50                   	push   eax
c00233fb:	6a 01                	push   0x1
c00233fd:	52                   	push   edx
c00233fe:	53                   	push   ebx
c00233ff:	57                   	push   edi
c0023400:	56                   	push   esi
c0023401:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023405:	e8 da fb ff ff       	call   c0022fe4 <ATA::access(unsigned long long, int, void*, bool)>
c002340a:	83 c4 20             	add    esp,0x20
c002340d:	85 c0                	test   eax,eax
c002340f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023413:	75 11                	jne    c0023426 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023415:	01 1d a4 ec 02 c0    	add    DWORD PTR ds:0xc002eca4,ebx
c002341b:	e8 38 d1 fe ff       	call   c0010558 <VgaText::updateDiskUsage()>
c0023420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023424:	eb 05                	jmp    c002342b <ATA::write(unsigned long long, int, void*)+0x61>
c0023426:	b8 01 00 00 00       	mov    eax,0x1
c002342b:	83 c4 10             	add    esp,0x10
c002342e:	5b                   	pop    ebx
c002342f:	5e                   	pop    esi
c0023430:	5f                   	pop    edi
c0023431:	c3                   	ret    

c0023432 <ATA::detectCHS()>:
c0023432:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023436:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002343c:	c1 e0 06             	shl    eax,0x6
c002343f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023445:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002344f:	c7 44 24 04 6c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b36c
c0023457:	e9 53 64 ff ff       	jmp    c00198af <Krnl::panic(char const*)>

c002345c <ATA::open(int, int, void*)>:
c002345c:	53                   	push   ebx
c002345d:	83 ec 08             	sub    esp,0x8
c0023460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002346c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023472:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023478:	c1 e0 06             	shl    eax,0x6
c002347b:	01 d0                	add    eax,edx
c002347d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023484:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002348a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023491:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002349b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00234a1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00234a8:	75 0c                	jne    c00234b6 <ATA::open(int, int, void*)+0x5a>
c00234aa:	83 ec 0c             	sub    esp,0xc
c00234ad:	53                   	push   ebx
c00234ae:	e8 7f ff ff ff       	call   c0023432 <ATA::detectCHS()>
c00234b3:	83 c4 10             	add    esp,0x10
c00234b6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00234bc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00234c2:	c1 e0 06             	shl    eax,0x6
c00234c5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00234cc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00234d6:	d1 e8                	shr    eax,1
c00234d8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00234de:	6a 04                	push   0x4
c00234e0:	6a 0c                	push   0xc
c00234e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234e9:	50                   	push   eax
c00234ea:	52                   	push   edx
c00234eb:	e8 7a ea ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234f0:	90                   	nop
c00234f1:	90                   	nop
c00234f2:	6a 00                	push   0x0
c00234f4:	6a 0c                	push   0xc
c00234f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234fd:	50                   	push   eax
c00234fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023504:	e8 61 ea ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023509:	83 c4 14             	add    esp,0x14
c002350c:	53                   	push   ebx
c002350d:	e8 ea 0a ff ff       	call   c0013ffc <PhysicalDisk::startCache()>
c0023512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023515:	e8 0c 2b ff ff       	call   c0016026 <createPartitionsForDisk(PhysicalDisk*)>
c002351a:	31 c0                	xor    eax,eax
c002351c:	83 c4 18             	add    esp,0x18
c002351f:	5b                   	pop    ebx
c0023520:	c3                   	ret    
c0023521:	90                   	nop

c0023522 <ATAPI::write(unsigned long long, int, void*)>:
c0023522:	b8 03 00 00 00       	mov    eax,0x3
c0023527:	c3                   	ret    

c0023528 <ATAPI::close(int, int, void*)>:
c0023528:	83 ec 0c             	sub    esp,0xc
c002352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023535:	85 c0                	test   eax,eax
c0023537:	74 0c                	je     c0023545 <ATAPI::close(int, int, void*)+0x1d>
c0023539:	83 ec 0c             	sub    esp,0xc
c002353c:	8b 10                	mov    edx,DWORD PTR [eax]
c002353e:	50                   	push   eax
c002353f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023542:	83 c4 10             	add    esp,0x10
c0023545:	31 c0                	xor    eax,eax
c0023547:	83 c4 0c             	add    esp,0xc
c002354a:	c3                   	ret    
c002354b:	90                   	nop

c002354c <ATAPI::ATAPI()>:
c002354c:	83 ec 0c             	sub    esp,0xc
c002354f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023553:	83 ec 04             	sub    esp,0x4
c0023556:	68 00 08 00 00       	push   0x800
c002355b:	68 b4 b3 02 c0       	push   0xc002b3b4
c0023560:	50                   	push   eax
c0023561:	e8 2e 0a ff ff       	call   c0013f94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023566:	83 c4 10             	add    esp,0x10
c0023569:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c002356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023572:	89 10                	mov    DWORD PTR [eax],edx
c0023574:	90                   	nop
c0023575:	83 c4 0c             	add    esp,0xc
c0023578:	c3                   	ret    
c0023579:	90                   	nop

c002357a <ATAPI::readyForCommand()>:
c002357a:	56                   	push   esi
c002357b:	53                   	push   ebx
c002357c:	31 db                	xor    ebx,ebx
c002357e:	50                   	push   eax
c002357f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023583:	50                   	push   eax
c0023584:	6a 0c                	push   0xc
c0023586:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002358d:	50                   	push   eax
c002358e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023594:	e8 91 ea ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0023599:	83 c4 10             	add    esp,0x10
c002359c:	a8 88                	test   al,0x88
c002359e:	74 23                	je     c00235c3 <ATAPI::readyForCommand()+0x49>
c00235a0:	43                   	inc    ebx
c00235a1:	83 fb 63             	cmp    ebx,0x63
c00235a4:	7e dd                	jle    c0023583 <ATAPI::readyForCommand()+0x9>
c00235a6:	51                   	push   ecx
c00235a7:	51                   	push   ecx
c00235a8:	6a 00                	push   0x0
c00235aa:	68 40 42 0f 00       	push   0xf4240
c00235af:	e8 da 9c ff ff       	call   c001d28e <nanoSleep(unsigned long long)>
c00235b4:	83 c4 10             	add    esp,0x10
c00235b7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00235bd:	75 c4                	jne    c0023583 <ATAPI::readyForCommand()+0x9>
c00235bf:	31 c0                	xor    eax,eax
c00235c1:	eb 02                	jmp    c00235c5 <ATAPI::readyForCommand()+0x4b>
c00235c3:	b0 01                	mov    al,0x1
c00235c5:	5a                   	pop    edx
c00235c6:	5b                   	pop    ebx
c00235c7:	5e                   	pop    esi
c00235c8:	c3                   	ret    
c00235c9:	90                   	nop

c00235ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00235ca:	55                   	push   ebp
c00235cb:	57                   	push   edi
c00235cc:	56                   	push   esi
c00235cd:	53                   	push   ebx
c00235ce:	83 ec 20             	sub    esp,0x20
c00235d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00235d5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00235d9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00235dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00235e1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00235e5:	6a 01                	push   0x1
c00235e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235ee:	50                   	push   eax
c00235ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235f5:	e8 7c eb ff ff       	call   c0022176 <IDE::enableIRQs(unsigned char, bool)>
c00235fa:	5e                   	pop    esi
c00235fb:	58                   	pop    eax
c00235fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023603:	50                   	push   eax
c0023604:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002360a:	e8 35 e9 ff ff       	call   c0021f44 <IDE::prepareInterrupt(unsigned char)>
c002360f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023612:	e8 63 ff ff ff       	call   c002357a <ATAPI::readyForCommand()>
c0023617:	83 c4 10             	add    esp,0x10
c002361a:	84 c0                	test   al,al
c002361c:	75 0a                	jne    c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002361e:	bb 01 00 00 00       	mov    ebx,0x1
c0023623:	e9 57 02 00 00       	jmp    c002387f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023628:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002362e:	c1 e0 04             	shl    eax,0x4
c0023631:	0f b6 c0             	movzx  eax,al
c0023634:	50                   	push   eax
c0023635:	6a 06                	push   0x6
c0023637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002363e:	50                   	push   eax
c002363f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023645:	e8 20 e9 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364a:	6a 00                	push   0x0
c002364c:	6a 01                	push   0x1
c002364e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023655:	50                   	push   eax
c0023656:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002365c:	e8 09 e9 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023661:	83 c4 20             	add    esp,0x20
c0023664:	0f b6 c3             	movzx  eax,bl
c0023667:	0f b6 df             	movzx  ebx,bh
c002366a:	50                   	push   eax
c002366b:	6a 04                	push   0x4
c002366d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023674:	50                   	push   eax
c0023675:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002367b:	e8 ea e8 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023680:	53                   	push   ebx
c0023681:	6a 05                	push   0x5
c0023683:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002368a:	50                   	push   eax
c002368b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023691:	e8 d4 e8 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023696:	83 c4 20             	add    esp,0x20
c0023699:	68 a0 00 00 00       	push   0xa0
c002369e:	6a 07                	push   0x7
c00236a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236a7:	50                   	push   eax
c00236a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ae:	e8 b7 e8 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b3:	83 c4 0c             	add    esp,0xc
c00236b6:	6a 01                	push   0x1
c00236b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236bf:	50                   	push   eax
c00236c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236c6:	e8 4b f4 ff ff       	call   c0022b16 <IDE::polling(unsigned char, unsigned int)>
c00236cb:	83 c4 10             	add    esp,0x10
c00236ce:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00236d4:	84 c0                	test   al,al
c00236d6:	74 23                	je     c00236fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00236d8:	0f b6 d8             	movzx  ebx,al
c00236db:	0f b6 d2             	movzx  edx,dl
c00236de:	53                   	push   ebx
c00236df:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00236e6:	50                   	push   eax
c00236e7:	52                   	push   edx
c00236e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ee:	e8 8d f2 ff ff       	call   c0022980 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236f3:	83 c4 10             	add    esp,0x10
c00236f6:	e9 84 01 00 00       	jmp    c002387f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236fb:	0f b6 d2             	movzx  edx,dl
c00236fe:	53                   	push   ebx
c00236ff:	53                   	push   ebx
c0023700:	52                   	push   edx
c0023701:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023707:	e8 4c e8 ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c002370c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023710:	b9 06 00 00 00       	mov    ecx,0x6
c0023715:	89 c2                	mov    edx,eax
c0023717:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002371a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002371e:	83 c4 10             	add    esp,0x10
c0023721:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023727:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002372e:	85 db                	test   ebx,ebx
c0023730:	0f 84 ec 00 00 00    	je     c0023822 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023736:	51                   	push   ecx
c0023737:	51                   	push   ecx
c0023738:	52                   	push   edx
c0023739:	50                   	push   eax
c002373a:	e8 99 e9 ff ff       	call   c00220d8 <IDE::waitInterrupt(unsigned char)>
c002373f:	83 c4 10             	add    esp,0x10
c0023742:	84 c0                	test   al,al
c0023744:	0f 84 d4 fe ff ff    	je     c002361e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002374a:	56                   	push   esi
c002374b:	56                   	push   esi
c002374c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023753:	50                   	push   eax
c0023754:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002375a:	e8 e5 e7 ff ff       	call   c0021f44 <IDE::prepareInterrupt(unsigned char)>
c002375f:	83 c4 0c             	add    esp,0xc
c0023762:	6a 04                	push   0x4
c0023764:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002376b:	50                   	push   eax
c002376c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023772:	e8 b3 e8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0023777:	83 c4 0c             	add    esp,0xc
c002377a:	89 c6                	mov    esi,eax
c002377c:	6a 05                	push   0x5
c002377e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023785:	50                   	push   eax
c0023786:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002378c:	e8 99 e8 ff ff       	call   c002202a <IDE::read(unsigned char, unsigned char)>
c0023791:	89 f1                	mov    ecx,esi
c0023793:	0f b6 c0             	movzx  eax,al
c0023796:	0f b6 f1             	movzx  esi,cl
c0023799:	c1 e0 08             	shl    eax,0x8
c002379c:	09 c6                	or     esi,eax
c002379e:	d1 fe                	sar    esi,1
c00237a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00237a4:	83 c4 10             	add    esp,0x10
c00237a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00237ac:	74 41                	je     c00237ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00237ae:	31 c9                	xor    ecx,ecx
c00237b0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237b6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237bd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00237c1:	75 0a                	jne    c00237cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00237c3:	01 c9                	add    ecx,ecx
c00237c5:	01 cd                	add    ebp,ecx
c00237c7:	4b                   	dec    ebx
c00237c8:	e9 54 ff ff ff       	jmp    c0023721 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00237cd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00237d2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237d6:	51                   	push   ecx
c00237d7:	51                   	push   ecx
c00237d8:	52                   	push   edx
c00237d9:	50                   	push   eax
c00237da:	e8 79 e7 ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c00237df:	89 c2                	mov    edx,eax
c00237e1:	89 f0                	mov    eax,esi
c00237e3:	66 ef                	out    dx,ax
c00237e5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237e9:	83 c4 10             	add    esp,0x10
c00237ec:	41                   	inc    ecx
c00237ed:	eb c1                	jmp    c00237b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00237ef:	31 f6                	xor    esi,esi
c00237f1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237f7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237fe:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023802:	75 06                	jne    c002380a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023804:	01 f6                	add    esi,esi
c0023806:	01 f5                	add    ebp,esi
c0023808:	eb bd                	jmp    c00237c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002380a:	51                   	push   ecx
c002380b:	51                   	push   ecx
c002380c:	52                   	push   edx
c002380d:	50                   	push   eax
c002380e:	e8 45 e7 ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c0023813:	89 c2                	mov    edx,eax
c0023815:	66 ed                	in     ax,dx
c0023817:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002381c:	83 c4 10             	add    esp,0x10
c002381f:	46                   	inc    esi
c0023820:	eb cf                	jmp    c00237f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023822:	51                   	push   ecx
c0023823:	51                   	push   ecx
c0023824:	52                   	push   edx
c0023825:	50                   	push   eax
c0023826:	e8 ad e8 ff ff       	call   c00220d8 <IDE::waitInterrupt(unsigned char)>
c002382b:	83 c4 10             	add    esp,0x10
c002382e:	84 c0                	test   al,al
c0023830:	0f 84 e8 fd ff ff    	je     c002361e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023836:	bb a0 86 01 00       	mov    ebx,0x186a0
c002383b:	52                   	push   edx
c002383c:	52                   	push   edx
c002383d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023844:	50                   	push   eax
c0023845:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002384b:	e8 f4 e6 ff ff       	call   c0021f44 <IDE::prepareInterrupt(unsigned char)>
c0023850:	83 c4 10             	add    esp,0x10
c0023853:	50                   	push   eax
c0023854:	50                   	push   eax
c0023855:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002385c:	50                   	push   eax
c002385d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023863:	e8 f0 e6 ff ff       	call   c0021f58 <IDE::getBase(unsigned char)>
c0023868:	8d 50 07             	lea    edx,[eax+0x7]
c002386b:	ec                   	in     al,dx
c002386c:	83 c4 10             	add    esp,0x10
c002386f:	a8 88                	test   al,0x88
c0023871:	74 0a                	je     c002387d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023873:	4b                   	dec    ebx
c0023874:	75 dd                	jne    c0023853 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023876:	bb 02 00 00 00       	mov    ebx,0x2
c002387b:	eb 02                	jmp    c002387f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002387d:	31 db                	xor    ebx,ebx
c002387f:	83 c4 1c             	add    esp,0x1c
c0023882:	89 d8                	mov    eax,ebx
c0023884:	5b                   	pop    ebx
c0023885:	5e                   	pop    esi
c0023886:	5f                   	pop    edi
c0023887:	5d                   	pop    ebp
c0023888:	c3                   	ret    
c0023889:	90                   	nop

c002388a <ATAPI::diskRemoved()>:
c002388a:	83 ec 18             	sub    esp,0x18
c002388d:	68 bf b3 02 c0       	push   0xc002b3bf
c0023892:	e8 fe ee fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0023897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002389b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00238a2:	83 c4 1c             	add    esp,0x1c
c00238a5:	c3                   	ret    

c00238a6 <ATAPI::eject()>:
c00238a6:	57                   	push   edi
c00238a7:	b9 03 00 00 00       	mov    ecx,0x3
c00238ac:	53                   	push   ebx
c00238ad:	83 ec 14             	sub    esp,0x14
c00238b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00238b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00238b8:	fc                   	cld    
c00238b9:	31 c0                	xor    eax,eax
c00238bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00238c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238c7:	50                   	push   eax
c00238c8:	50                   	push   eax
c00238c9:	6a 00                	push   0x0
c00238cb:	6a 00                	push   0x0
c00238cd:	6a 00                	push   0x0
c00238cf:	6a 02                	push   0x2
c00238d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00238d5:	50                   	push   eax
c00238d6:	53                   	push   ebx
c00238d7:	e8 ee fc ff ff       	call   c00235ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238dc:	83 c4 14             	add    esp,0x14
c00238df:	53                   	push   ebx
c00238e0:	e8 a5 ff ff ff       	call   c002388a <ATAPI::diskRemoved()>
c00238e5:	83 c4 24             	add    esp,0x24
c00238e8:	5b                   	pop    ebx
c00238e9:	5f                   	pop    edi
c00238ea:	c3                   	ret    
c00238eb:	90                   	nop

c00238ec <ATAPI::diskInserted()>:
c00238ec:	53                   	push   ebx
c00238ed:	83 ec 14             	sub    esp,0x14
c00238f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238f4:	68 d5 b3 02 c0       	push   0xc002b3d5
c00238f9:	e8 97 ee fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c00238fe:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023905:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023908:	e8 ef 06 ff ff       	call   c0013ffc <PhysicalDisk::startCache()>
c002390d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023911:	83 c4 18             	add    esp,0x18
c0023914:	5b                   	pop    ebx
c0023915:	e9 0c 27 ff ff       	jmp    c0016026 <createPartitionsForDisk(PhysicalDisk*)>

c002391a <ATAPI::detectMedia()>:
c002391a:	56                   	push   esi
c002391b:	53                   	push   ebx
c002391c:	83 ec 28             	sub    esp,0x28
c002391f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023923:	6a 0c                	push   0xc
c0023925:	6a 00                	push   0x0
c0023927:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002392b:	56                   	push   esi
c002392c:	e8 5a cd fd ff       	call   c000068b <memset>
c0023931:	58                   	pop    eax
c0023932:	5a                   	pop    edx
c0023933:	6a 00                	push   0x0
c0023935:	6a 00                	push   0x0
c0023937:	6a 00                	push   0x0
c0023939:	6a 00                	push   0x0
c002393b:	56                   	push   esi
c002393c:	53                   	push   ebx
c002393d:	e8 88 fc ff ff       	call   c00235ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023942:	83 c4 1c             	add    esp,0x1c
c0023945:	6a 0c                	push   0xc
c0023947:	6a 00                	push   0x0
c0023949:	56                   	push   esi
c002394a:	e8 3c cd fd ff       	call   c000068b <memset>
c002394f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023954:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023959:	59                   	pop    ecx
c002395a:	58                   	pop    eax
c002395b:	6a 01                	push   0x1
c002395d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023961:	50                   	push   eax
c0023962:	6a 00                	push   0x0
c0023964:	6a 12                	push   0x12
c0023966:	56                   	push   esi
c0023967:	53                   	push   ebx
c0023968:	e8 5d fc ff ff       	call   c00235ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002396d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023971:	83 c4 20             	add    esp,0x20
c0023974:	83 e0 7f             	and    eax,0x7f
c0023977:	3c 70                	cmp    al,0x70
c0023979:	74 15                	je     c0023990 <ATAPI::detectMedia()+0x76>
c002397b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023982:	75 0c                	jne    c0023990 <ATAPI::detectMedia()+0x76>
c0023984:	83 ec 0c             	sub    esp,0xc
c0023987:	53                   	push   ebx
c0023988:	e8 5f ff ff ff       	call   c00238ec <ATAPI::diskInserted()>
c002398d:	83 c4 10             	add    esp,0x10
c0023990:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023994:	83 e0 0f             	and    eax,0xf
c0023997:	3c 02                	cmp    al,0x2
c0023999:	75 1b                	jne    c00239b6 <ATAPI::detectMedia()+0x9c>
c002399b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00239a0:	75 2d                	jne    c00239cf <ATAPI::detectMedia()+0xb5>
c00239a2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239a9:	74 24                	je     c00239cf <ATAPI::detectMedia()+0xb5>
c00239ab:	83 ec 0c             	sub    esp,0xc
c00239ae:	53                   	push   ebx
c00239af:	e8 d6 fe ff ff       	call   c002388a <ATAPI::diskRemoved()>
c00239b4:	eb 16                	jmp    c00239cc <ATAPI::detectMedia()+0xb2>
c00239b6:	84 c0                	test   al,al
c00239b8:	75 15                	jne    c00239cf <ATAPI::detectMedia()+0xb5>
c00239ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239c1:	75 0c                	jne    c00239cf <ATAPI::detectMedia()+0xb5>
c00239c3:	83 ec 0c             	sub    esp,0xc
c00239c6:	53                   	push   ebx
c00239c7:	e8 20 ff ff ff       	call   c00238ec <ATAPI::diskInserted()>
c00239cc:	83 c4 10             	add    esp,0x10
c00239cf:	83 c4 24             	add    esp,0x24
c00239d2:	5b                   	pop    ebx
c00239d3:	5e                   	pop    esi
c00239d4:	c3                   	ret    
c00239d5:	90                   	nop

c00239d6 <ATAPI::open(int, int, void*)>:
c00239d6:	53                   	push   ebx
c00239d7:	83 ec 08             	sub    esp,0x8
c00239da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239e6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239ec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239f2:	c1 e0 06             	shl    eax,0x6
c00239f5:	01 d0                	add    eax,edx
c00239f7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00239fe:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023a04:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023a0b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023a15:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023a1b:	6a 04                	push   0x4
c0023a1d:	6a 0c                	push   0xc
c0023a1f:	51                   	push   ecx
c0023a20:	52                   	push   edx
c0023a21:	e8 44 e5 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a26:	90                   	nop
c0023a27:	90                   	nop
c0023a28:	6a 00                	push   0x0
c0023a2a:	6a 0c                	push   0xc
c0023a2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a33:	50                   	push   eax
c0023a34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a3a:	e8 2b e5 ff ff       	call   c0021f6a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a3f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a46:	83 c4 14             	add    esp,0x14
c0023a49:	53                   	push   ebx
c0023a4a:	e8 cb fe ff ff       	call   c002391a <ATAPI::detectMedia()>
c0023a4f:	31 c0                	xor    eax,eax
c0023a51:	83 c4 18             	add    esp,0x18
c0023a54:	5b                   	pop    ebx
c0023a55:	c3                   	ret    

c0023a56 <ATAPI::read(unsigned long long, int, void*)>:
c0023a56:	55                   	push   ebp
c0023a57:	57                   	push   edi
c0023a58:	56                   	push   esi
c0023a59:	53                   	push   ebx
c0023a5a:	83 ec 1c             	sub    esp,0x1c
c0023a5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a61:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a65:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a69:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a70:	74 41                	je     c0023ab3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a72:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a76:	b9 03 00 00 00       	mov    ecx,0x3
c0023a7b:	fc                   	cld    
c0023a7c:	31 c0                	xor    eax,eax
c0023a7e:	86 fb                	xchg   bl,bh
c0023a80:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a82:	c1 c3 10             	rol    ebx,0x10
c0023a85:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023a8a:	89 e8                	mov    eax,ebp
c0023a8c:	86 fb                	xchg   bl,bh
c0023a8e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023a92:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023a96:	50                   	push   eax
c0023a97:	50                   	push   eax
c0023a98:	55                   	push   ebp
c0023a99:	c1 e5 0b             	shl    ebp,0xb
c0023a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023aa0:	6a 00                	push   0x0
c0023aa2:	55                   	push   ebp
c0023aa3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023aa7:	50                   	push   eax
c0023aa8:	56                   	push   esi
c0023aa9:	e8 1c fb ff ff       	call   c00235ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023aae:	83 c4 20             	add    esp,0x20
c0023ab1:	eb 1a                	jmp    c0023acd <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023ab3:	83 ec 0c             	sub    esp,0xc
c0023ab6:	56                   	push   esi
c0023ab7:	e8 5e fe ff ff       	call   c002391a <ATAPI::detectMedia()>
c0023abc:	83 c4 10             	add    esp,0x10
c0023abf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ac6:	75 aa                	jne    c0023a72 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023ac8:	b8 02 00 00 00       	mov    eax,0x2
c0023acd:	83 c4 1c             	add    esp,0x1c
c0023ad0:	5b                   	pop    ebx
c0023ad1:	5e                   	pop    esi
c0023ad2:	5f                   	pop    edi
c0023ad3:	5d                   	pop    ebp
c0023ad4:	c3                   	ret    
c0023ad5:	90                   	nop

c0023ad6 <SATA::close(int, int, void*)>:
c0023ad6:	83 ec 0c             	sub    esp,0xc
c0023ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023add:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ae3:	85 c0                	test   eax,eax
c0023ae5:	74 0c                	je     c0023af3 <SATA::close(int, int, void*)+0x1d>
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	8b 10                	mov    edx,DWORD PTR [eax]
c0023aec:	50                   	push   eax
c0023aed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023af0:	83 c4 10             	add    esp,0x10
c0023af3:	31 c0                	xor    eax,eax
c0023af5:	83 c4 0c             	add    esp,0xc
c0023af8:	c3                   	ret    
c0023af9:	90                   	nop

c0023afa <SATA::powerSaving(PowerSavingLevel)>:
c0023afa:	c3                   	ret    
c0023afb:	90                   	nop

c0023afc <SATA::open(int, int, void*)>:
c0023afc:	53                   	push   ebx
c0023afd:	83 ec 14             	sub    esp,0x14
c0023b00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023b04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023b08:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023b12:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023b18:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b26:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b30:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b36:	68 20 b4 02 c0       	push   0xc002b420
c0023b3b:	e8 55 ec fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0023b40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b43:	e8 b4 04 ff ff       	call   c0013ffc <PhysicalDisk::startCache()>
c0023b48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b4b:	e8 d6 24 ff ff       	call   c0016026 <createPartitionsForDisk(PhysicalDisk*)>
c0023b50:	31 c0                	xor    eax,eax
c0023b52:	83 c4 18             	add    esp,0x18
c0023b55:	5b                   	pop    ebx
c0023b56:	c3                   	ret    
c0023b57:	90                   	nop

c0023b58 <SATA::SATA()>:
c0023b58:	83 ec 0c             	sub    esp,0xc
c0023b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5f:	83 ec 04             	sub    esp,0x4
c0023b62:	68 00 02 00 00       	push   0x200
c0023b67:	68 3b b4 02 c0       	push   0xc002b43b
c0023b6c:	50                   	push   eax
c0023b6d:	e8 22 04 ff ff       	call   c0013f94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c0023b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7e:	89 10                	mov    DWORD PTR [eax],edx
c0023b80:	90                   	nop
c0023b81:	83 c4 0c             	add    esp,0xc
c0023b84:	c3                   	ret    
c0023b85:	90                   	nop

c0023b86 <SATA::access(unsigned long long, int, void*, bool)>:
c0023b86:	55                   	push   ebp
c0023b87:	57                   	push   edi
c0023b88:	56                   	push   esi
c0023b89:	53                   	push   ebx
c0023b8a:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023b90:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023b97:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023b9e:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023ba5:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023bac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023bb0:	83 ff 08             	cmp    edi,0x8
c0023bb3:	7e 10                	jle    c0023bc5 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023bb5:	83 ec 0c             	sub    esp,0xc
c0023bb8:	68 4b b4 02 c0       	push   0xc002b44b
c0023bbd:	e8 ed 5c ff ff       	call   c00198af <Krnl::panic(char const*)>
c0023bc2:	83 c4 10             	add    esp,0x10
c0023bc5:	51                   	push   ecx
c0023bc6:	68 00 02 00 00       	push   0x200
c0023bcb:	68 ee 00 00 00       	push   0xee
c0023bd0:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023bd4:	55                   	push   ebp
c0023bd5:	e8 b1 ca fd ff       	call   c000068b <memset>
c0023bda:	83 c4 0c             	add    esp,0xc
c0023bdd:	68 00 02 00 00       	push   0x200
c0023be2:	68 ee 00 00 00       	push   0xee
c0023be7:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023bee:	50                   	push   eax
c0023bef:	e8 97 ca fd ff       	call   c000068b <memset>
c0023bf4:	55                   	push   ebp
c0023bf5:	57                   	push   edi
c0023bf6:	56                   	push   esi
c0023bf7:	68 7d b4 02 c0       	push   0xc002b47d
c0023bfc:	e8 94 eb fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0023c01:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c0d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c11:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c1b:	c1 e0 07             	shl    eax,0x7
c0023c1e:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023c22:	83 c4 18             	add    esp,0x18
c0023c25:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c33:	8d 50 02             	lea    edx,[eax+0x2]
c0023c36:	c1 e2 07             	shl    edx,0x7
c0023c39:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c3d:	52                   	push   edx
c0023c3e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c42:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c48:	e8 e1 ef ff ff       	call   c0022c2e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c4d:	89 c1                	mov    ecx,eax
c0023c4f:	58                   	pop    eax
c0023c50:	5a                   	pop    edx
c0023c51:	51                   	push   ecx
c0023c52:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c56:	68 b2 b4 02 c0       	push   0xc002b4b2
c0023c5b:	e8 35 eb fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0023c60:	83 c4 10             	add    esp,0x10
c0023c63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c67:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c6a:	0f 84 9a 01 00 00    	je     c0023e0a <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c70:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c7a:	8b 12                	mov    edx,DWORD PTR [edx]
c0023c7c:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023c82:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023c88:	89 c8                	mov    eax,ecx
c0023c8a:	c1 e0 05             	shl    eax,0x5
c0023c8d:	01 c2                	add    edx,eax
c0023c8f:	8a 02                	mov    al,BYTE PTR [edx]
c0023c91:	83 e0 a0             	and    eax,0xffffffa0
c0023c94:	83 c8 05             	or     eax,0x5
c0023c97:	88 02                	mov    BYTE PTR [edx],al
c0023c99:	8d 47 ff             	lea    eax,[edi-0x1]
c0023c9c:	c1 f8 04             	sar    eax,0x4
c0023c9f:	40                   	inc    eax
c0023ca0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023ca4:	0f b7 c0             	movzx  eax,ax
c0023ca7:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023cad:	83 c0 08             	add    eax,0x8
c0023cb0:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023cb6:	c1 e0 04             	shl    eax,0x4
c0023cb9:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023cbf:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023cc2:	01 cb                	add    ebx,ecx
c0023cc4:	52                   	push   edx
c0023cc5:	50                   	push   eax
c0023cc6:	6a 00                	push   0x0
c0023cc8:	53                   	push   ebx
c0023cc9:	e8 bd c9 fd ff       	call   c000068b <memset>
c0023cce:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023cd4:	83 c4 10             	add    esp,0x10
c0023cd7:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023cdd:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023ce2:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023ce9:	0d ff 01 00 80       	or     eax,0x800001ff
c0023cee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023cf2:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023cf8:	b8 01 00 00 00       	mov    eax,0x1
c0023cfd:	89 c2                	mov    edx,eax
c0023cff:	c1 e2 04             	shl    edx,0x4
c0023d02:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023d09:	8d 50 08             	lea    edx,[eax+0x8]
c0023d0c:	40                   	inc    eax
c0023d0d:	c1 e2 04             	shl    edx,0x4
c0023d10:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023d18:	83 f8 10             	cmp    eax,0x10
c0023d1b:	75 e0                	jne    c0023cfd <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023d1d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023d20:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023d24:	66 25 00 7f          	and    ax,0x7f00
c0023d28:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d2c:	66 0d 27 80          	or     ax,0x8027
c0023d30:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d34:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d37:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d3b:	89 f0                	mov    eax,esi
c0023d3d:	31 d2                	xor    edx,edx
c0023d3f:	c1 e8 10             	shr    eax,0x10
c0023d42:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d45:	89 f0                	mov    eax,esi
c0023d47:	c1 e8 18             	shr    eax,0x18
c0023d4a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d4d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d51:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d58:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5f:	c1 e0 07             	shl    eax,0x7
c0023d62:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d66:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d6c:	80 e3 88             	and    bl,0x88
c0023d6f:	74 0b                	je     c0023d7c <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d71:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d77:	74 0b                	je     c0023d84 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023d79:	42                   	inc    edx
c0023d7a:	eb ea                	jmp    c0023d66 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023d7c:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d82:	75 0a                	jne    c0023d8e <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023d84:	83 ec 0c             	sub    esp,0xc
c0023d87:	68 bb b4 02 c0       	push   0xc002b4bb
c0023d8c:	eb 60                	jmp    c0023dee <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023d8e:	be 01 00 00 00       	mov    esi,0x1
c0023d93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d97:	d3 e6                	shl    esi,cl
c0023d99:	c1 e3 07             	shl    ebx,0x7
c0023d9c:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023da2:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023da6:	83 ec 0c             	sub    esp,0xc
c0023da9:	68 c9 b4 02 c0       	push   0xc002b4c9
c0023dae:	e8 e2 e9 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0023db3:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023db9:	83 c4 10             	add    esp,0x10
c0023dbc:	85 c6                	test   esi,eax
c0023dbe:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023dc4:	74 1a                	je     c0023de0 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023dc6:	0f ba e0 1e          	bt     eax,0x1e
c0023dca:	73 da                	jae    c0023da6 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023dcc:	83 ec 0c             	sub    esp,0xc
c0023dcf:	68 d6 b4 02 c0       	push   0xc002b4d6
c0023dd4:	e8 d6 5a ff ff       	call   c00198af <Krnl::panic(char const*)>
c0023dd9:	83 c4 10             	add    esp,0x10
c0023ddc:	31 c0                	xor    eax,eax
c0023dde:	eb 2f                	jmp    c0023e0f <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023de0:	0f ba e0 1e          	bt     eax,0x1e
c0023de4:	73 12                	jae    c0023df8 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023de6:	83 ec 0c             	sub    esp,0xc
c0023de9:	68 d6 b4 02 c0       	push   0xc002b4d6
c0023dee:	e8 bc 5a ff ff       	call   c00198af <Krnl::panic(char const*)>
c0023df3:	83 c4 10             	add    esp,0x10
c0023df6:	eb 12                	jmp    c0023e0a <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023df8:	83 ec 0c             	sub    esp,0xc
c0023dfb:	68 e7 b4 02 c0       	push   0xc002b4e7
c0023e00:	e8 aa 5a ff ff       	call   c00198af <Krnl::panic(char const*)>
c0023e05:	83 c4 10             	add    esp,0x10
c0023e08:	eb fe                	jmp    c0023e08 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023e0a:	b8 01 00 00 00       	mov    eax,0x1
c0023e0f:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023e15:	5b                   	pop    ebx
c0023e16:	5e                   	pop    esi
c0023e17:	5f                   	pop    edi
c0023e18:	5d                   	pop    ebp
c0023e19:	c3                   	ret    

c0023e1a <SATA::read(unsigned long long, int, void*)>:
c0023e1a:	57                   	push   edi
c0023e1b:	b8 04 00 00 00       	mov    eax,0x4
c0023e20:	56                   	push   esi
c0023e21:	53                   	push   ebx
c0023e22:	83 ec 10             	sub    esp,0x10
c0023e25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e29:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e2d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e30:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e38:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e3e:	77 3b                	ja     c0023e7b <SATA::read(unsigned long long, int, void*)+0x61>
c0023e40:	b8 06 00 00 00       	mov    eax,0x6
c0023e45:	85 d2                	test   edx,edx
c0023e47:	74 32                	je     c0023e7b <SATA::read(unsigned long long, int, void*)+0x61>
c0023e49:	50                   	push   eax
c0023e4a:	50                   	push   eax
c0023e4b:	6a 00                	push   0x0
c0023e4d:	52                   	push   edx
c0023e4e:	53                   	push   ebx
c0023e4f:	57                   	push   edi
c0023e50:	56                   	push   esi
c0023e51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e55:	e8 2c fd ff ff       	call   c0023b86 <SATA::access(unsigned long long, int, void*, bool)>
c0023e5a:	83 c4 20             	add    esp,0x20
c0023e5d:	85 c0                	test   eax,eax
c0023e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e63:	75 11                	jne    c0023e76 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e65:	01 1d a8 ec 02 c0    	add    DWORD PTR ds:0xc002eca8,ebx
c0023e6b:	e8 e8 c6 fe ff       	call   c0010558 <VgaText::updateDiskUsage()>
c0023e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e74:	eb 05                	jmp    c0023e7b <SATA::read(unsigned long long, int, void*)+0x61>
c0023e76:	b8 01 00 00 00       	mov    eax,0x1
c0023e7b:	83 c4 10             	add    esp,0x10
c0023e7e:	5b                   	pop    ebx
c0023e7f:	5e                   	pop    esi
c0023e80:	5f                   	pop    edi
c0023e81:	c3                   	ret    

c0023e82 <SATA::write(unsigned long long, int, void*)>:
c0023e82:	57                   	push   edi
c0023e83:	b8 04 00 00 00       	mov    eax,0x4
c0023e88:	56                   	push   esi
c0023e89:	53                   	push   ebx
c0023e8a:	83 ec 10             	sub    esp,0x10
c0023e8d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e91:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e95:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e98:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ea0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023ea6:	77 3b                	ja     c0023ee3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023ea8:	b8 06 00 00 00       	mov    eax,0x6
c0023ead:	85 d2                	test   edx,edx
c0023eaf:	74 32                	je     c0023ee3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023eb1:	50                   	push   eax
c0023eb2:	50                   	push   eax
c0023eb3:	6a 01                	push   0x1
c0023eb5:	52                   	push   edx
c0023eb6:	53                   	push   ebx
c0023eb7:	57                   	push   edi
c0023eb8:	56                   	push   esi
c0023eb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ebd:	e8 c4 fc ff ff       	call   c0023b86 <SATA::access(unsigned long long, int, void*, bool)>
c0023ec2:	83 c4 20             	add    esp,0x20
c0023ec5:	85 c0                	test   eax,eax
c0023ec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ecb:	75 11                	jne    c0023ede <SATA::write(unsigned long long, int, void*)+0x5c>
c0023ecd:	01 1d a4 ec 02 c0    	add    DWORD PTR ds:0xc002eca4,ebx
c0023ed3:	e8 80 c6 fe ff       	call   c0010558 <VgaText::updateDiskUsage()>
c0023ed8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023edc:	eb 05                	jmp    c0023ee3 <SATA::write(unsigned long long, int, void*)+0x61>
c0023ede:	b8 01 00 00 00       	mov    eax,0x1
c0023ee3:	83 c4 10             	add    esp,0x10
c0023ee6:	5b                   	pop    ebx
c0023ee7:	5e                   	pop    esi
c0023ee8:	5f                   	pop    edi
c0023ee9:	c3                   	ret    

c0023eea <AVX::open(int, int, void*)>:
c0023eea:	83 ec 0c             	sub    esp,0xc
c0023eed:	e8 46 11 00 00       	call   c0025038 <avxInit>
c0023ef2:	b8 00 00 00 00       	mov    eax,0x0
c0023ef7:	83 c4 0c             	add    esp,0xc
c0023efa:	c3                   	ret    
c0023efb:	90                   	nop

c0023efc <AVX::close(int, int, void*)>:
c0023efc:	83 ec 0c             	sub    esp,0xc
c0023eff:	e8 35 11 00 00       	call   c0025039 <avxClose>
c0023f04:	b8 00 00 00 00       	mov    eax,0x0
c0023f09:	83 c4 0c             	add    esp,0xc
c0023f0c:	c3                   	ret    
c0023f0d:	90                   	nop

c0023f0e <AVX::available()>:
c0023f0e:	83 ec 0c             	sub    esp,0xc
c0023f11:	e8 1a 11 00 00       	call   c0025030 <avxDetect>
c0023f16:	85 c0                	test   eax,eax
c0023f18:	0f 95 c0             	setne  al
c0023f1b:	83 c4 0c             	add    esp,0xc
c0023f1e:	c3                   	ret    
c0023f1f:	90                   	nop

c0023f20 <AVX::save(void*)>:
c0023f20:	83 ec 0c             	sub    esp,0xc
c0023f23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f27:	83 ec 0c             	sub    esp,0xc
c0023f2a:	50                   	push   eax
c0023f2b:	e8 06 11 00 00       	call   c0025036 <avxSave>
c0023f30:	83 c4 10             	add    esp,0x10
c0023f33:	90                   	nop
c0023f34:	83 c4 0c             	add    esp,0xc
c0023f37:	c3                   	ret    

c0023f38 <AVX::load(void*)>:
c0023f38:	83 ec 0c             	sub    esp,0xc
c0023f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f3f:	83 ec 0c             	sub    esp,0xc
c0023f42:	50                   	push   eax
c0023f43:	e8 ef 10 00 00       	call   c0025037 <avxLoad>
c0023f48:	83 c4 10             	add    esp,0x10
c0023f4b:	90                   	nop
c0023f4c:	83 c4 0c             	add    esp,0xc
c0023f4f:	c3                   	ret    

c0023f50 <AVX::AVX()>:
c0023f50:	83 ec 0c             	sub    esp,0xc
c0023f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f57:	83 ec 08             	sub    esp,0x8
c0023f5a:	68 44 b5 02 c0       	push   0xc002b544
c0023f5f:	50                   	push   eax
c0023f60:	e8 0d 01 ff ff       	call   c0014072 <FPU::FPU(char const*)>
c0023f65:	83 c4 10             	add    esp,0x10
c0023f68:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0023f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f71:	89 10                	mov    DWORD PTR [eax],edx
c0023f73:	90                   	nop
c0023f74:	83 c4 0c             	add    esp,0xc
c0023f77:	c3                   	ret    

c0023f78 <MMX::available()>:
c0023f78:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0023f7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023f83:	83 e0 20             	and    eax,0x20
c0023f86:	84 c0                	test   al,al
c0023f88:	0f 95 c0             	setne  al
c0023f8b:	c3                   	ret    

c0023f8c <MMX::open(int, int, void*)>:
c0023f8c:	83 ec 0c             	sub    esp,0xc
c0023f8f:	e8 28 11 00 00       	call   c00250bc <x87Init>
c0023f94:	b8 00 00 00 00       	mov    eax,0x0
c0023f99:	83 c4 0c             	add    esp,0xc
c0023f9c:	c3                   	ret    
c0023f9d:	90                   	nop

c0023f9e <MMX::close(int, int, void*)>:
c0023f9e:	83 ec 0c             	sub    esp,0xc
c0023fa1:	e8 30 11 00 00       	call   c00250d6 <x87Close>
c0023fa6:	b8 00 00 00 00       	mov    eax,0x0
c0023fab:	83 c4 0c             	add    esp,0xc
c0023fae:	c3                   	ret    
c0023faf:	90                   	nop

c0023fb0 <MMX::save(void*)>:
c0023fb0:	83 ec 0c             	sub    esp,0xc
c0023fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fb7:	83 ec 0c             	sub    esp,0xc
c0023fba:	50                   	push   eax
c0023fbb:	e8 f1 10 00 00       	call   c00250b1 <x87Save>
c0023fc0:	83 c4 10             	add    esp,0x10
c0023fc3:	90                   	nop
c0023fc4:	83 c4 0c             	add    esp,0xc
c0023fc7:	c3                   	ret    

c0023fc8 <MMX::load(void*)>:
c0023fc8:	83 ec 0c             	sub    esp,0xc
c0023fcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fcf:	83 ec 0c             	sub    esp,0xc
c0023fd2:	50                   	push   eax
c0023fd3:	e8 df 10 00 00       	call   c00250b7 <x87Load>
c0023fd8:	83 c4 10             	add    esp,0x10
c0023fdb:	90                   	nop
c0023fdc:	83 c4 0c             	add    esp,0xc
c0023fdf:	c3                   	ret    

c0023fe0 <MMX::MMX()>:
c0023fe0:	83 ec 0c             	sub    esp,0xc
c0023fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fe7:	83 ec 08             	sub    esp,0x8
c0023fea:	68 84 b5 02 c0       	push   0xc002b584
c0023fef:	50                   	push   eax
c0023ff0:	e8 7d 00 ff ff       	call   c0014072 <FPU::FPU(char const*)>
c0023ff5:	83 c4 10             	add    esp,0x10
c0023ff8:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c0023ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024001:	89 10                	mov    DWORD PTR [eax],edx
c0024003:	90                   	nop
c0024004:	83 c4 0c             	add    esp,0xc
c0024007:	c3                   	ret    

c0024008 <SSE::open(int, int, void*)>:
c0024008:	83 ec 0c             	sub    esp,0xc
c002400b:	e8 64 10 00 00       	call   c0025074 <sseInit>
c0024010:	b8 00 00 00 00       	mov    eax,0x0
c0024015:	83 c4 0c             	add    esp,0xc
c0024018:	c3                   	ret    
c0024019:	90                   	nop

c002401a <SSE::close(int, int, void*)>:
c002401a:	83 ec 0c             	sub    esp,0xc
c002401d:	e8 62 10 00 00       	call   c0025084 <sseClose>
c0024022:	b8 00 00 00 00       	mov    eax,0x0
c0024027:	83 c4 0c             	add    esp,0xc
c002402a:	c3                   	ret    
c002402b:	90                   	nop

c002402c <SSE::available()>:
c002402c:	83 ec 1c             	sub    esp,0x1c
c002402f:	e8 1c 10 00 00       	call   c0025050 <absolutelyNoChanceInHell>
c0024034:	85 c0                	test   eax,eax
c0024036:	0f 95 c0             	setne  al
c0024039:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002403d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024041:	83 c4 1c             	add    esp,0x1c
c0024044:	c3                   	ret    
c0024045:	90                   	nop

c0024046 <SSE::save(void*)>:
c0024046:	83 ec 0c             	sub    esp,0xc
c0024049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002404d:	83 ec 0c             	sub    esp,0xc
c0024050:	50                   	push   eax
c0024051:	e8 12 10 00 00       	call   c0025068 <sseSave>
c0024056:	83 c4 10             	add    esp,0x10
c0024059:	90                   	nop
c002405a:	83 c4 0c             	add    esp,0xc
c002405d:	c3                   	ret    

c002405e <SSE::load(void*)>:
c002405e:	83 ec 0c             	sub    esp,0xc
c0024061:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024065:	83 ec 0c             	sub    esp,0xc
c0024068:	50                   	push   eax
c0024069:	e8 00 10 00 00       	call   c002506e <sseLoad>
c002406e:	83 c4 10             	add    esp,0x10
c0024071:	90                   	nop
c0024072:	83 c4 0c             	add    esp,0xc
c0024075:	c3                   	ret    

c0024076 <SSE::SSE()>:
c0024076:	83 ec 0c             	sub    esp,0xc
c0024079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002407d:	83 ec 08             	sub    esp,0x8
c0024080:	68 c4 b5 02 c0       	push   0xc002b5c4
c0024085:	50                   	push   eax
c0024086:	e8 e7 ff fe ff       	call   c0014072 <FPU::FPU(char const*)>
c002408b:	83 c4 10             	add    esp,0x10
c002408e:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c0024093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024097:	89 10                	mov    DWORD PTR [eax],edx
c0024099:	90                   	nop
c002409a:	83 c4 0c             	add    esp,0xc
c002409d:	c3                   	ret    

c002409e <x87::open(int, int, void*)>:
c002409e:	83 ec 0c             	sub    esp,0xc
c00240a1:	e8 16 10 00 00       	call   c00250bc <x87Init>
c00240a6:	b8 00 00 00 00       	mov    eax,0x0
c00240ab:	83 c4 0c             	add    esp,0xc
c00240ae:	c3                   	ret    
c00240af:	90                   	nop

c00240b0 <x87::close(int, int, void*)>:
c00240b0:	83 ec 0c             	sub    esp,0xc
c00240b3:	e8 1e 10 00 00       	call   c00250d6 <x87Close>
c00240b8:	b8 00 00 00 00       	mov    eax,0x0
c00240bd:	83 c4 0c             	add    esp,0xc
c00240c0:	c3                   	ret    
c00240c1:	90                   	nop

c00240c2 <x87::available()>:
c00240c2:	83 ec 0c             	sub    esp,0xc
c00240c5:	e8 cc 0f 00 00       	call   c0025096 <x87Detect>
c00240ca:	85 c0                	test   eax,eax
c00240cc:	0f 95 c0             	setne  al
c00240cf:	83 c4 0c             	add    esp,0xc
c00240d2:	c3                   	ret    
c00240d3:	90                   	nop

c00240d4 <x87::save(void*)>:
c00240d4:	83 ec 0c             	sub    esp,0xc
c00240d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240db:	83 ec 0c             	sub    esp,0xc
c00240de:	50                   	push   eax
c00240df:	e8 cd 0f 00 00       	call   c00250b1 <x87Save>
c00240e4:	83 c4 10             	add    esp,0x10
c00240e7:	90                   	nop
c00240e8:	83 c4 0c             	add    esp,0xc
c00240eb:	c3                   	ret    

c00240ec <x87::load(void*)>:
c00240ec:	83 ec 0c             	sub    esp,0xc
c00240ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240f3:	83 ec 0c             	sub    esp,0xc
c00240f6:	50                   	push   eax
c00240f7:	e8 bb 0f 00 00       	call   c00250b7 <x87Load>
c00240fc:	83 c4 10             	add    esp,0x10
c00240ff:	90                   	nop
c0024100:	83 c4 0c             	add    esp,0xc
c0024103:	c3                   	ret    

c0024104 <x87::x87()>:
c0024104:	83 ec 0c             	sub    esp,0xc
c0024107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002410b:	83 ec 08             	sub    esp,0x8
c002410e:	68 04 b6 02 c0       	push   0xc002b604
c0024113:	50                   	push   eax
c0024114:	e8 59 ff fe ff       	call   c0014072 <FPU::FPU(char const*)>
c0024119:	83 c4 10             	add    esp,0x10
c002411c:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c0024121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024125:	89 10                	mov    DWORD PTR [eax],edx
c0024127:	90                   	nop
c0024128:	83 c4 0c             	add    esp,0xc
c002412b:	c3                   	ret    

c002412c <APIC::disable()>:
c002412c:	90                   	nop
c002412d:	c3                   	ret    

c002412e <APIC::close(int, int, void*)>:
c002412e:	55                   	push   ebp
c002412f:	89 e5                	mov    ebp,esp
c0024131:	83 ec 08             	sub    esp,0x8
c0024134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024137:	8b 00                	mov    eax,DWORD PTR [eax]
c0024139:	83 c0 3c             	add    eax,0x3c
c002413c:	8b 00                	mov    eax,DWORD PTR [eax]
c002413e:	83 ec 0c             	sub    esp,0xc
c0024141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024144:	ff d0                	call   eax
c0024146:	83 c4 10             	add    esp,0x10
c0024149:	b8 00 00 00 00       	mov    eax,0x0
c002414e:	c9                   	leave  
c002414f:	c3                   	ret    

c0024150 <IOAPIC::close(int, int, void*)>:
c0024150:	b8 00 00 00 00       	mov    eax,0x0
c0024155:	c3                   	ret    

c0024156 <APIC::io_wait()>:
c0024156:	eb 00                	jmp    c0024158 <APIC::io_wait()+0x2>
c0024158:	eb 00                	jmp    c002415a <APIC::io_wait()+0x4>
c002415a:	90                   	nop
c002415b:	c3                   	ret    

c002415c <APIC::getBase()>:
c002415c:	55                   	push   ebp
c002415d:	89 e5                	mov    ebp,esp
c002415f:	83 ec 18             	sub    esp,0x18
c0024162:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024167:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002416d:	83 e0 08             	and    eax,0x8
c0024170:	84 c0                	test   al,al
c0024172:	75 07                	jne    c002417b <APIC::getBase()+0x1f>
c0024174:	b8 00 00 00 00       	mov    eax,0x0
c0024179:	eb 21                	jmp    c002419c <APIC::getBase()+0x40>
c002417b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024180:	83 ec 08             	sub    esp,0x8
c0024183:	6a 1b                	push   0x1b
c0024185:	50                   	push   eax
c0024186:	e8 f1 a8 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c002418b:	83 c4 10             	add    esp,0x10
c002418e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024191:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024194:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024197:	25 00 f0 ff ff       	and    eax,0xfffff000
c002419c:	c9                   	leave  
c002419d:	c3                   	ret    

c002419e <APIC::eoi(unsigned char)>:
c002419e:	55                   	push   ebp
c002419f:	89 e5                	mov    ebp,esp
c00241a1:	83 ec 28             	sub    esp,0x28
c00241a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00241a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00241aa:	83 ec 0c             	sub    esp,0xc
c00241ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241b0:	e8 a7 ff ff ff       	call   c002415c <APIC::getBase()>
c00241b5:	83 c4 10             	add    esp,0x10
c00241b8:	05 b0 00 00 00       	add    eax,0xb0
c00241bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00241c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00241c3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00241c9:	90                   	nop
c00241ca:	c9                   	leave  
c00241cb:	c3                   	ret    

c00241cc <APIC::open(int, int, void*)>:
c00241cc:	55                   	push   ebp
c00241cd:	89 e5                	mov    ebp,esp
c00241cf:	57                   	push   edi
c00241d0:	56                   	push   esi
c00241d1:	53                   	push   ebx
c00241d2:	83 ec 2c             	sub    esp,0x2c
c00241d5:	83 ec 0c             	sub    esp,0xc
c00241d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241db:	e8 7c ff ff ff       	call   c002415c <APIC::getBase()>
c00241e0:	83 c4 10             	add    esp,0x10
c00241e3:	89 c2                	mov    edx,eax
c00241e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241e8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241ee:	0f b6 f8             	movzx  edi,al
c00241f1:	89 d0                	mov    eax,edx
c00241f3:	ba 00 00 00 00       	mov    edx,0x0
c00241f8:	89 c1                	mov    ecx,eax
c00241fa:	80 e5 ff             	and    ch,0xff
c00241fd:	89 cb                	mov    ebx,ecx
c00241ff:	0f b6 f2             	movzx  esi,dl
c0024202:	89 d8                	mov    eax,ebx
c0024204:	89 f2                	mov    edx,esi
c0024206:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024209:	8d 5f 08             	lea    ebx,[edi+0x8]
c002420c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024210:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024214:	83 e0 00             	and    eax,0x0
c0024217:	09 d0                	or     eax,edx
c0024219:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002421d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024220:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024226:	8d 50 01             	lea    edx,[eax+0x1]
c0024229:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002422c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024232:	0f b6 d0             	movzx  edx,al
c0024235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024238:	83 c2 08             	add    edx,0x8
c002423b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002423f:	0f b6 c9             	movzx  ecx,cl
c0024242:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024248:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002424c:	83 ec 0c             	sub    esp,0xc
c002424f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024252:	e8 05 ff ff ff       	call   c002415c <APIC::getBase()>
c0024257:	83 c4 10             	add    esp,0x10
c002425a:	05 f0 00 00 00       	add    eax,0xf0
c002425f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024262:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024265:	8b 00                	mov    eax,DWORD PTR [eax]
c0024267:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002426a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024271:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024278:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002427b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002427e:	89 10                	mov    DWORD PTR [eax],edx
c0024280:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024287:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c002428c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002428f:	7d 7c                	jge    c002430d <APIC::open(int, int, void*)+0x141>
c0024291:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024294:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c002429b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002429e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242a1:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c00242a8:	c1 e8 08             	shr    eax,0x8
c00242ab:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00242af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242b2:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c00242b9:	c1 e8 18             	shr    eax,0x18
c00242bc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00242bf:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00242c3:	75 40                	jne    c0024305 <APIC::open(int, int, void*)+0x139>
c00242c5:	83 ec 0c             	sub    esp,0xc
c00242c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242cb:	e8 8c fe ff ff       	call   c002415c <APIC::getBase()>
c00242d0:	83 c4 10             	add    esp,0x10
c00242d3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00242d7:	75 07                	jne    c00242e0 <APIC::open(int, int, void*)+0x114>
c00242d9:	ba 60 03 00 00       	mov    edx,0x360
c00242de:	eb 05                	jmp    c00242e5 <APIC::open(int, int, void*)+0x119>
c00242e0:	ba 50 03 00 00       	mov    edx,0x350
c00242e5:	01 d0                	add    eax,edx
c00242e7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00242ea:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00242ef:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00242f2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00242f9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00242fd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024300:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024303:	89 10                	mov    DWORD PTR [eax],edx
c0024305:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024308:	e9 7a ff ff ff       	jmp    c0024287 <APIC::open(int, int, void*)+0xbb>
c002430d:	b8 00 00 00 00       	mov    eax,0x0
c0024312:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024315:	5b                   	pop    ebx
c0024316:	5e                   	pop    esi
c0024317:	5f                   	pop    edi
c0024318:	5d                   	pop    ebp
c0024319:	c3                   	ret    

c002431a <IOAPIC::IOAPIC()>:
c002431a:	83 ec 0c             	sub    esp,0xc
c002431d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024321:	83 ec 08             	sub    esp,0x8
c0024324:	68 44 b6 02 c0       	push   0xc002b644
c0024329:	50                   	push   eax
c002432a:	e8 45 fa fe ff       	call   c0013d74 <Device::Device(char const*)>
c002432f:	83 c4 10             	add    esp,0x10
c0024332:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0024337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433b:	89 10                	mov    DWORD PTR [eax],edx
c002433d:	90                   	nop
c002433e:	83 c4 0c             	add    esp,0xc
c0024341:	c3                   	ret    

c0024342 <APIC::APIC()>:
c0024342:	53                   	push   ebx
c0024343:	83 ec 18             	sub    esp,0x18
c0024346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002434a:	83 ec 08             	sub    esp,0x8
c002434d:	68 4c b6 02 c0       	push   0xc002b64c
c0024352:	50                   	push   eax
c0024353:	e8 74 01 ff ff       	call   c00144cc <InterruptController::InterruptController(char const*)>
c0024358:	83 c4 10             	add    esp,0x10
c002435b:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c0024360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024364:	89 10                	mov    DWORD PTR [eax],edx
c0024366:	a0 00 ed 02 c0       	mov    al,ds:0xc002ed00
c002436b:	83 f0 01             	xor    eax,0x1
c002436e:	84 c0                	test   al,al
c0024370:	0f 84 a1 00 00 00    	je     c0024417 <APIC::APIC()+0xd5>
c0024376:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002437b:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c0024380:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024384:	0f 83 86 00 00 00    	jae    c0024410 <APIC::APIC()+0xce>
c002438a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024392:	83 ec 0c             	sub    esp,0xc
c0024395:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024399:	e8 36 b1 fe ff       	call   c000f4d4 <malloc>
c002439e:	83 c4 10             	add    esp,0x10
c00243a1:	89 c3                	mov    ebx,eax
c00243a3:	83 ec 0c             	sub    esp,0xc
c00243a6:	53                   	push   ebx
c00243a7:	e8 6e ff ff ff       	call   c002431a <IOAPIC::IOAPIC()>
c00243ac:	83 c4 10             	add    esp,0x10
c00243af:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00243b3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00243b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00243bc:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c00243c3:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c00243c8:	40                   	inc    eax
c00243c9:	a3 c0 ec 02 c0       	mov    ds:0xc002ecc0,eax
c00243ce:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00243d3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00243d9:	83 ec 08             	sub    esp,0x8
c00243dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243e0:	50                   	push   eax
c00243e1:	e8 9e f7 fe ff       	call   c0013b84 <Device::addChild(Device*)>
c00243e6:	83 c4 10             	add    esp,0x10
c00243e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00243ef:	83 c0 08             	add    eax,0x8
c00243f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00243f4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00243f9:	6a 00                	push   0x0
c00243fb:	6a 00                	push   0x0
c00243fd:	52                   	push   edx
c00243fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024402:	ff d0                	call   eax
c0024404:	83 c4 10             	add    esp,0x10
c0024407:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002440b:	e9 6b ff ff ff       	jmp    c002437b <APIC::APIC()+0x39>
c0024410:	c6 05 00 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed00,0x1
c0024417:	90                   	nop
c0024418:	83 c4 18             	add    esp,0x18
c002441b:	5b                   	pop    ebx
c002441c:	c3                   	ret    
c002441d:	90                   	nop

c002441e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002441e:	55                   	push   ebp
c002441f:	89 e5                	mov    ebp,esp
c0024421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024424:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002442a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002442d:	72 1d                	jb     c002444c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002442f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024432:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002443b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024441:	01 d0                	add    eax,edx
c0024443:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024446:	73 04                	jae    c002444c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024448:	b0 01                	mov    al,0x1
c002444a:	eb 02                	jmp    c002444e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002444c:	b0 00                	mov    al,0x0
c002444e:	5d                   	pop    ebp
c002444f:	c3                   	ret    

c0024450 <IOAPIC::read(int)>:
c0024450:	55                   	push   ebp
c0024451:	89 e5                	mov    ebp,esp
c0024453:	83 ec 10             	sub    esp,0x10
c0024456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024459:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002445f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024462:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024465:	0f b6 d0             	movzx  edx,al
c0024468:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002446b:	89 10                	mov    DWORD PTR [eax],edx
c002446d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024470:	83 c0 10             	add    eax,0x10
c0024473:	8b 00                	mov    eax,DWORD PTR [eax]
c0024475:	c9                   	leave  
c0024476:	c3                   	ret    
c0024477:	90                   	nop

c0024478 <IOAPIC::open(int, int, void*)>:
c0024478:	55                   	push   ebp
c0024479:	89 e5                	mov    ebp,esp
c002447b:	57                   	push   edi
c002447c:	56                   	push   esi
c002447d:	53                   	push   ebx
c002447e:	83 ec 0c             	sub    esp,0xc
c0024481:	83 ec 0c             	sub    esp,0xc
c0024484:	68 77 b6 02 c0       	push   0xc002b677
c0024489:	e8 07 e3 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c002448e:	83 c4 10             	add    esp,0x10
c0024491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024494:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024497:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002449d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244a6:	8b 14 85 20 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ce0]
c00244ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244bf:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c00244c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244c9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00244cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244d2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00244d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244e1:	0f b6 f8             	movzx  edi,al
c00244e4:	89 d0                	mov    eax,edx
c00244e6:	ba 00 00 00 00       	mov    edx,0x0
c00244eb:	89 c1                	mov    ecx,eax
c00244ed:	80 e5 ff             	and    ch,0xff
c00244f0:	89 cb                	mov    ebx,ecx
c00244f2:	0f b6 f2             	movzx  esi,dl
c00244f5:	89 d8                	mov    eax,ebx
c00244f7:	89 f2                	mov    edx,esi
c00244f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244fc:	8d 5f 08             	lea    ebx,[edi+0x8]
c00244ff:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024503:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024507:	83 e0 00             	and    eax,0x0
c002450a:	09 d0                	or     eax,edx
c002450c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024513:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024519:	8d 50 01             	lea    edx,[eax+0x1]
c002451c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002451f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024525:	0f b6 d0             	movzx  edx,al
c0024528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002452b:	83 c2 08             	add    edx,0x8
c002452e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024532:	0f b6 c9             	movzx  ecx,cl
c0024535:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002453b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002453f:	83 ec 08             	sub    esp,0x8
c0024542:	6a 01                	push   0x1
c0024544:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024547:	e8 04 ff ff ff       	call   c0024450 <IOAPIC::read(int)>
c002454c:	83 c4 10             	add    esp,0x10
c002454f:	c1 f8 10             	sar    eax,0x10
c0024552:	0f b6 c0             	movzx  eax,al
c0024555:	8d 50 01             	lea    edx,[eax+0x1]
c0024558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002455b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024561:	b8 00 00 00 00       	mov    eax,0x0
c0024566:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024569:	5b                   	pop    ebx
c002456a:	5e                   	pop    esi
c002456b:	5f                   	pop    edi
c002456c:	5d                   	pop    ebp
c002456d:	c3                   	ret    

c002456e <IOAPIC::write(int, int)>:
c002456e:	55                   	push   ebp
c002456f:	89 e5                	mov    ebp,esp
c0024571:	83 ec 10             	sub    esp,0x10
c0024574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024577:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002457d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024580:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024583:	0f b6 d0             	movzx  edx,al
c0024586:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024589:	89 10                	mov    DWORD PTR [eax],edx
c002458b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002458e:	8d 50 10             	lea    edx,[eax+0x10]
c0024591:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024594:	89 02                	mov    DWORD PTR [edx],eax
c0024596:	90                   	nop
c0024597:	c9                   	leave  
c0024598:	c3                   	ret    
c0024599:	90                   	nop

c002459a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002459a:	55                   	push   ebp
c002459b:	89 e5                	mov    ebp,esp
c002459d:	53                   	push   ebx
c002459e:	83 ec 2c             	sub    esp,0x2c
c00245a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245a4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00245a7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00245aa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00245ad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00245b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00245b6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245b9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245bc:	88 d8                	mov    al,bl
c00245be:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00245c1:	88 c8                	mov    al,cl
c00245c3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245c6:	88 d0                	mov    al,dl
c00245c8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00245cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245cf:	83 c0 08             	add    eax,0x8
c00245d2:	01 c0                	add    eax,eax
c00245d4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245db:	83 c0 08             	add    eax,0x8
c00245de:	01 c0                	add    eax,eax
c00245e0:	40                   	inc    eax
c00245e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245e7:	50                   	push   eax
c00245e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245eb:	e8 60 fe ff ff       	call   c0024450 <IOAPIC::read(int)>
c00245f0:	83 c4 08             	add    esp,0x8
c00245f3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245f6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00245fd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024600:	c1 e0 18             	shl    eax,0x18
c0024603:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024606:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024609:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002460c:	52                   	push   edx
c002460d:	50                   	push   eax
c002460e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024611:	e8 58 ff ff ff       	call   c002456e <IOAPIC::write(int, int)>
c0024616:	83 c4 0c             	add    esp,0xc
c0024619:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002461c:	50                   	push   eax
c002461d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024620:	e8 2b fe ff ff       	call   c0024450 <IOAPIC::read(int)>
c0024625:	83 c4 08             	add    esp,0x8
c0024628:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002462b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024632:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024639:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024640:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024644:	74 09                	je     c002464f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024646:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002464d:	eb 07                	jmp    c0024656 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002464f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024656:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002465a:	74 09                	je     c0024665 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002465c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024663:	eb 07                	jmp    c002466c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024665:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002466c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024673:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024677:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002467a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002467d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024680:	52                   	push   edx
c0024681:	50                   	push   eax
c0024682:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024685:	e8 e4 fe ff ff       	call   c002456e <IOAPIC::write(int, int)>
c002468a:	83 c4 0c             	add    esp,0xc
c002468d:	90                   	nop
c002468e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024691:	c9                   	leave  
c0024692:	c3                   	ret    
c0024693:	90                   	nop

c0024694 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024694:	55                   	push   ebp
c0024695:	89 e5                	mov    ebp,esp
c0024697:	57                   	push   edi
c0024698:	56                   	push   esi
c0024699:	53                   	push   ebx
c002469a:	83 ec 2c             	sub    esp,0x2c
c002469d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00246a0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00246a3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246a7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00246ab:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00246af:	74 5a                	je     c002470b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246b1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00246b5:	7f 44                	jg     c00246fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00246b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246ba:	05 c0 bb 02 c0       	add    eax,0xc002bbc0
c00246bf:	8a 00                	mov    al,BYTE PTR [eax]
c00246c1:	0f b6 c0             	movzx  eax,al
c00246c4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00246c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246ca:	66 8b 84 00 c0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d40]
c00246d2:	0f b7 c0             	movzx  eax,ax
c00246d5:	83 e0 02             	and    eax,0x2
c00246d8:	85 c0                	test   eax,eax
c00246da:	74 04                	je     c00246e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00246dc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00246e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246e3:	66 8b 84 00 c0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d40]
c00246eb:	0f b7 c0             	movzx  eax,ax
c00246ee:	83 e0 08             	and    eax,0x8
c00246f1:	85 c0                	test   eax,eax
c00246f3:	74 16                	je     c002470b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246f5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246f9:	eb 10                	jmp    c002470b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246fb:	83 ec 0c             	sub    esp,0xc
c00246fe:	68 88 b6 02 c0       	push   0xc002b688
c0024703:	e8 a7 51 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002470f:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c0024714:	83 ec 08             	sub    esp,0x8
c0024717:	50                   	push   eax
c0024718:	68 c0 b6 02 c0       	push   0xc002b6c0
c002471d:	e8 73 e0 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0024722:	83 c4 10             	add    esp,0x10
c0024725:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002472c:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c0024731:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024734:	7d 67                	jge    c002479d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024736:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024739:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0024740:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024743:	83 ec 08             	sub    esp,0x8
c0024746:	52                   	push   edx
c0024747:	50                   	push   eax
c0024748:	e8 d1 fc ff ff       	call   c002441e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002474d:	83 c4 10             	add    esp,0x10
c0024750:	84 c0                	test   al,al
c0024752:	74 44                	je     c0024798 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024754:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024757:	8b 1c 85 e0 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1320]
c002475e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024762:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024765:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002476c:	83 c0 20             	add    eax,0x20
c002476f:	0f b6 f0             	movzx  esi,al
c0024772:	b8 00 00 00 00       	mov    eax,0x0
c0024777:	99                   	cdq    
c0024778:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002477b:	0f b6 c9             	movzx  ecx,cl
c002477e:	83 ec 04             	sub    esp,0x4
c0024781:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024784:	57                   	push   edi
c0024785:	56                   	push   esi
c0024786:	52                   	push   edx
c0024787:	50                   	push   eax
c0024788:	51                   	push   ecx
c0024789:	53                   	push   ebx
c002478a:	e8 0b fe ff ff       	call   c002459a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002478f:	83 c4 20             	add    esp,0x20
c0024792:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024796:	eb 05                	jmp    c002479d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024798:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002479b:	eb 8f                	jmp    c002472c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002479d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00247a0:	83 f0 01             	xor    eax,0x1
c00247a3:	84 c0                	test   al,al
c00247a5:	74 10                	je     c00247b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00247a7:	83 ec 0c             	sub    esp,0xc
c00247aa:	68 d7 b6 02 c0       	push   0xc002b6d7
c00247af:	e8 fb 50 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00247b4:	83 c4 10             	add    esp,0x10
c00247b7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00247bb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00247c2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00247c6:	7f 65                	jg     c002482d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00247c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247ce:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247d5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247d8:	01 ca                	add    edx,ecx
c00247da:	83 c2 54             	add    edx,0x54
c00247dd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00247e1:	85 c0                	test   eax,eax
c00247e3:	75 43                	jne    c0024828 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00247e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247f2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247f5:	01 ca                	add    edx,ecx
c00247f7:	8d 4a 54             	lea    ecx,[edx+0x54]
c00247fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00247fd:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024804:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024807:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002480e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024811:	01 ca                	add    edx,ecx
c0024813:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024819:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002481c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024820:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024823:	83 e8 20             	sub    eax,0x20
c0024826:	eb 1a                	jmp    c0024842 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024828:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002482b:	eb 95                	jmp    c00247c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002482d:	83 ec 0c             	sub    esp,0xc
c0024830:	68 e4 b6 02 c0       	push   0xc002b6e4
c0024835:	e8 75 50 ff ff       	call   c00198af <Krnl::panic(char const*)>
c002483a:	83 c4 10             	add    esp,0x10
c002483d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024842:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024845:	5b                   	pop    ebx
c0024846:	5e                   	pop    esi
c0024847:	5f                   	pop    edi
c0024848:	5d                   	pop    ebp
c0024849:	c3                   	ret    

c002484a <PIC::disable()>:
c002484a:	55                   	push   ebp
c002484b:	89 e5                	mov    ebp,esp
c002484d:	83 ec 10             	sub    esp,0x10
c0024850:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024856:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002485a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002485d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024861:	ee                   	out    dx,al
c0024862:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024868:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002486c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002486f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024873:	ee                   	out    dx,al
c0024874:	90                   	nop
c0024875:	c9                   	leave  
c0024876:	c3                   	ret    
c0024877:	90                   	nop

c0024878 <PIC::close(int, int, void*)>:
c0024878:	55                   	push   ebp
c0024879:	89 e5                	mov    ebp,esp
c002487b:	83 ec 08             	sub    esp,0x8
c002487e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024881:	8b 00                	mov    eax,DWORD PTR [eax]
c0024883:	83 c0 3c             	add    eax,0x3c
c0024886:	8b 00                	mov    eax,DWORD PTR [eax]
c0024888:	83 ec 0c             	sub    esp,0xc
c002488b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002488e:	ff d0                	call   eax
c0024890:	83 c4 10             	add    esp,0x10
c0024893:	b8 00 00 00 00       	mov    eax,0x0
c0024898:	c9                   	leave  
c0024899:	c3                   	ret    

c002489a <PIC::PIC()>:
c002489a:	83 ec 0c             	sub    esp,0xc
c002489d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a1:	83 ec 08             	sub    esp,0x8
c00248a4:	68 90 b7 02 c0       	push   0xc002b790
c00248a9:	50                   	push   eax
c00248aa:	e8 1d fc fe ff       	call   c00144cc <InterruptController::InterruptController(char const*)>
c00248af:	83 c4 10             	add    esp,0x10
c00248b2:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c00248b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248bb:	89 10                	mov    DWORD PTR [eax],edx
c00248bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248c7:	0f b6 d0             	movzx  edx,al
c00248ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ce:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00248d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248df:	0f b6 d0             	movzx  edx,al
c00248e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248f5:	8d 50 01             	lea    edx,[eax+0x1]
c00248f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248fc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024902:	0f b6 d0             	movzx  edx,al
c0024905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024909:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002490d:	83 e1 3f             	and    ecx,0x3f
c0024910:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024918:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002491e:	0f b6 d0             	movzx  edx,al
c0024921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024925:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002492c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024930:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024936:	0f b6 d0             	movzx  edx,al
c0024939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002493d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024946:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002494c:	8d 50 01             	lea    edx,[eax+0x1]
c002494f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024953:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024959:	0f b6 d0             	movzx  edx,al
c002495c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024960:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024964:	83 e1 3f             	and    ecx,0x3f
c0024967:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002496b:	90                   	nop
c002496c:	83 c4 0c             	add    esp,0xc
c002496f:	c3                   	ret    

c0024970 <PIC::ioWait()>:
c0024970:	eb 00                	jmp    c0024972 <PIC::ioWait()+0x2>
c0024972:	eb 00                	jmp    c0024974 <PIC::ioWait()+0x4>
c0024974:	90                   	nop
c0024975:	c3                   	ret    

c0024976 <PIC::getIRQReg(int)>:
c0024976:	55                   	push   ebp
c0024977:	89 e5                	mov    ebp,esp
c0024979:	83 ec 10             	sub    esp,0x10
c002497c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002497f:	0f b6 c0             	movzx  eax,al
c0024982:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024988:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002498b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002498e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024992:	ee                   	out    dx,al
c0024993:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024996:	0f b6 c0             	movzx  eax,al
c0024999:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002499f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00249a2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00249a5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00249a9:	ee                   	out    dx,al
c00249aa:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00249b0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00249b4:	89 c2                	mov    edx,eax
c00249b6:	ec                   	in     al,dx
c00249b7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00249ba:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249bd:	0f b6 c0             	movzx  eax,al
c00249c0:	c1 e0 08             	shl    eax,0x8
c00249c3:	89 c1                	mov    ecx,eax
c00249c5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00249cb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00249cf:	89 c2                	mov    edx,eax
c00249d1:	ec                   	in     al,dx
c00249d2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00249d5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00249d8:	0f b6 c0             	movzx  eax,al
c00249db:	09 c8                	or     eax,ecx
c00249dd:	c9                   	leave  
c00249de:	c3                   	ret    
c00249df:	90                   	nop

c00249e0 <PIC::eoi(unsigned char)>:
c00249e0:	55                   	push   ebp
c00249e1:	89 e5                	mov    ebp,esp
c00249e3:	83 ec 14             	sub    esp,0x14
c00249e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249e9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00249ec:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00249f0:	75 1e                	jne    c0024a10 <PIC::eoi(unsigned char)+0x30>
c00249f2:	6a 0b                	push   0xb
c00249f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249f7:	e8 7a ff ff ff       	call   c0024976 <PIC::getIRQReg(int)>
c00249fc:	83 c4 08             	add    esp,0x8
c00249ff:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024a03:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024a07:	25 80 00 00 00       	and    eax,0x80
c0024a0c:	85 c0                	test   eax,eax
c0024a0e:	74 5f                	je     c0024a6f <PIC::eoi(unsigned char)+0x8f>
c0024a10:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024a14:	75 2d                	jne    c0024a43 <PIC::eoi(unsigned char)+0x63>
c0024a16:	6a 0b                	push   0xb
c0024a18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a1b:	e8 56 ff ff ff       	call   c0024976 <PIC::getIRQReg(int)>
c0024a20:	83 c4 08             	add    esp,0x8
c0024a23:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a2a:	66 85 c0             	test   ax,ax
c0024a2d:	78 14                	js     c0024a43 <PIC::eoi(unsigned char)+0x63>
c0024a2f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a35:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a39:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a3c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a40:	ee                   	out    dx,al
c0024a41:	eb 2d                	jmp    c0024a70 <PIC::eoi(unsigned char)+0x90>
c0024a43:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a47:	76 12                	jbe    c0024a5b <PIC::eoi(unsigned char)+0x7b>
c0024a49:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a4f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a53:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a56:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a5a:	ee                   	out    dx,al
c0024a5b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a61:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a65:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a68:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a6c:	ee                   	out    dx,al
c0024a6d:	eb 01                	jmp    c0024a70 <PIC::eoi(unsigned char)+0x90>
c0024a6f:	90                   	nop
c0024a70:	c9                   	leave  
c0024a71:	c3                   	ret    

c0024a72 <PIC::remap()>:
c0024a72:	55                   	push   ebp
c0024a73:	89 e5                	mov    ebp,esp
c0024a75:	83 ec 48             	sub    esp,0x48
c0024a78:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024a7f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024a86:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024a8c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024a8f:	89 c2                	mov    edx,eax
c0024a91:	ec                   	in     al,dx
c0024a92:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024a95:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024a98:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024a9b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024aa1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024aa4:	89 c2                	mov    edx,eax
c0024aa6:	ec                   	in     al,dx
c0024aa7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024aaa:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024aad:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024ab0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024ab6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024aba:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024abd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024ac0:	ee                   	out    dx,al
c0024ac1:	83 ec 0c             	sub    esp,0xc
c0024ac4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ac7:	e8 a4 fe ff ff       	call   c0024970 <PIC::ioWait()>
c0024acc:	83 c4 10             	add    esp,0x10
c0024acf:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024ad5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024ad9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024adc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024adf:	ee                   	out    dx,al
c0024ae0:	83 ec 0c             	sub    esp,0xc
c0024ae3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ae6:	e8 85 fe ff ff       	call   c0024970 <PIC::ioWait()>
c0024aeb:	83 c4 10             	add    esp,0x10
c0024aee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024af1:	0f b6 c0             	movzx  eax,al
c0024af4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024afa:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024afd:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024b00:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024b03:	ee                   	out    dx,al
c0024b04:	83 ec 0c             	sub    esp,0xc
c0024b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b0a:	e8 61 fe ff ff       	call   c0024970 <PIC::ioWait()>
c0024b0f:	83 c4 10             	add    esp,0x10
c0024b12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b15:	0f b6 c0             	movzx  eax,al
c0024b18:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024b1e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024b21:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024b24:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b27:	ee                   	out    dx,al
c0024b28:	83 ec 0c             	sub    esp,0xc
c0024b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b2e:	e8 3d fe ff ff       	call   c0024970 <PIC::ioWait()>
c0024b33:	83 c4 10             	add    esp,0x10
c0024b36:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b3c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b40:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024b43:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b46:	ee                   	out    dx,al
c0024b47:	83 ec 0c             	sub    esp,0xc
c0024b4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b4d:	e8 1e fe ff ff       	call   c0024970 <PIC::ioWait()>
c0024b52:	83 c4 10             	add    esp,0x10
c0024b55:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b5b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b5f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b62:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b65:	ee                   	out    dx,al
c0024b66:	83 ec 0c             	sub    esp,0xc
c0024b69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b6c:	e8 ff fd ff ff       	call   c0024970 <PIC::ioWait()>
c0024b71:	83 c4 10             	add    esp,0x10
c0024b74:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024b7a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024b7e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024b81:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024b84:	ee                   	out    dx,al
c0024b85:	83 ec 0c             	sub    esp,0xc
c0024b88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b8b:	e8 e0 fd ff ff       	call   c0024970 <PIC::ioWait()>
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024b99:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024b9d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024ba0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024ba3:	ee                   	out    dx,al
c0024ba4:	83 ec 0c             	sub    esp,0xc
c0024ba7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024baa:	e8 c1 fd ff ff       	call   c0024970 <PIC::ioWait()>
c0024baf:	83 c4 10             	add    esp,0x10
c0024bb2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024bb6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024bbc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024bbf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024bc2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024bc5:	ee                   	out    dx,al
c0024bc6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024bca:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024bd0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024bd3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024bd6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024bd9:	ee                   	out    dx,al
c0024bda:	90                   	nop
c0024bdb:	c9                   	leave  
c0024bdc:	c3                   	ret    
c0024bdd:	90                   	nop

c0024bde <PIC::open(int, int, void*)>:
c0024bde:	55                   	push   ebp
c0024bdf:	89 e5                	mov    ebp,esp
c0024be1:	83 ec 18             	sub    esp,0x18
c0024be4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024bea:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024bee:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bf1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024bf5:	ee                   	out    dx,al
c0024bf6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024bfc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024c00:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024c03:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024c07:	ee                   	out    dx,al
c0024c08:	83 ec 0c             	sub    esp,0xc
c0024c0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c0e:	e8 5f fe ff ff       	call   c0024a72 <PIC::remap()>
c0024c13:	83 c4 10             	add    esp,0x10
c0024c16:	b8 00 00 00 00       	mov    eax,0x0
c0024c1b:	c9                   	leave  
c0024c1c:	c3                   	ret    
c0024c1d:	90                   	nop

c0024c1e <APICTimer::close(int, int, void*)>:
c0024c1e:	b8 00 00 00 00       	mov    eax,0x0
c0024c23:	c3                   	ret    

c0024c24 <apicTimerHandler(regs*, void*)>:
c0024c24:	83 ec 0c             	sub    esp,0xc
c0024c27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c2d:	99                   	cdq    
c0024c2e:	52                   	push   edx
c0024c2f:	50                   	push   eax
c0024c30:	6a 00                	push   0x0
c0024c32:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c37:	e8 90 07 00 00       	call   c00253cc <__udivdi3>
c0024c3c:	83 c4 10             	add    esp,0x10
c0024c3f:	83 ec 08             	sub    esp,0x8
c0024c42:	52                   	push   edx
c0024c43:	50                   	push   eax
c0024c44:	e8 82 17 ff ff       	call   c00163cb <timerHandler(unsigned long long)>
c0024c49:	83 c4 10             	add    esp,0x10
c0024c4c:	90                   	nop
c0024c4d:	83 c4 0c             	add    esp,0xc
c0024c50:	c3                   	ret    
c0024c51:	90                   	nop

c0024c52 <APICTimer::write(int)>:
c0024c52:	53                   	push   ebx
c0024c53:	83 ec 28             	sub    esp,0x28
c0024c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c5e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c64:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024c69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c6f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c75:	83 ec 0c             	sub    esp,0xc
c0024c78:	50                   	push   eax
c0024c79:	e8 de f4 ff ff       	call   c002415c <APIC::getBase()>
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c85:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c0024c8a:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c0024c90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c9c:	05 e0 03 00 00       	add    eax,0x3e0
c0024ca1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024ca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cab:	05 80 03 00 00       	add    eax,0x380
c0024cb0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024cb6:	fb                   	sti    
c0024cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024cbf:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024cc4:	83 d2 00             	adc    edx,0x0
c0024cc7:	89 c1                	mov    ecx,eax
c0024cc9:	89 d3                	mov    ebx,edx
c0024ccb:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c0024cd0:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c0024cd6:	39 c8                	cmp    eax,ecx
c0024cd8:	89 d0                	mov    eax,edx
c0024cda:	19 d8                	sbb    eax,ebx
c0024cdc:	73 02                	jae    c0024ce0 <APICTimer::write(int)+0x8e>
c0024cde:	eb d7                	jmp    c0024cb7 <APICTimer::write(int)+0x65>
c0024ce0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ce4:	05 20 03 00 00       	add    eax,0x320
c0024ce9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024cef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cf3:	05 90 03 00 00       	add    eax,0x390
c0024cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cfa:	f7 d0                	not    eax
c0024cfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d00:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d08:	ba 00 00 00 00       	mov    edx,0x0
c0024d0d:	f7 f3                	div    ebx
c0024d0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024d1d:	0d 00 00 02 00       	or     eax,0x20000
c0024d22:	89 c2                	mov    edx,eax
c0024d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d28:	05 20 03 00 00       	add    eax,0x320
c0024d2d:	89 10                	mov    DWORD PTR [eax],edx
c0024d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d33:	05 e0 03 00 00       	add    eax,0x3e0
c0024d38:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d42:	05 80 03 00 00       	add    eax,0x380
c0024d47:	89 c2                	mov    edx,eax
c0024d49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d4d:	89 02                	mov    DWORD PTR [edx],eax
c0024d4f:	90                   	nop
c0024d50:	83 c4 28             	add    esp,0x28
c0024d53:	5b                   	pop    ebx
c0024d54:	c3                   	ret    
c0024d55:	90                   	nop

c0024d56 <APICTimer::open(int, int, void*)>:
c0024d56:	57                   	push   edi
c0024d57:	56                   	push   esi
c0024d58:	53                   	push   ebx
c0024d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d5f:	83 c0 24             	add    eax,0x24
c0024d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d64:	83 ec 08             	sub    esp,0x8
c0024d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d6f:	ff d0                	call   eax
c0024d71:	83 c4 10             	add    esp,0x10
c0024d74:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d7f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d85:	83 ec 0c             	sub    esp,0xc
c0024d88:	50                   	push   eax
c0024d89:	e8 ce f3 ff ff       	call   c002415c <APIC::getBase()>
c0024d8e:	83 c4 10             	add    esp,0x10
c0024d91:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d9b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024da1:	0f b6 f8             	movzx  edi,al
c0024da4:	89 d0                	mov    eax,edx
c0024da6:	ba 00 00 00 00       	mov    edx,0x0
c0024dab:	89 c1                	mov    ecx,eax
c0024dad:	80 e5 ff             	and    ch,0xff
c0024db0:	89 cb                	mov    ebx,ecx
c0024db2:	0f b6 f2             	movzx  esi,dl
c0024db5:	89 d8                	mov    eax,ebx
c0024db7:	89 f2                	mov    edx,esi
c0024db9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dbd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024dc0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024dc4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024dc8:	83 e0 00             	and    eax,0x0
c0024dcb:	09 d0                	or     eax,edx
c0024dcd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dd5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0024dde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024de2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024de8:	0f b6 d0             	movzx  edx,al
c0024deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024def:	83 c2 08             	add    edx,0x8
c0024df2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024df6:	0f b6 c9             	movzx  ecx,cl
c0024df9:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024dff:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e0b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e19:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e23:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e29:	83 ec 0c             	sub    esp,0xc
c0024e2c:	51                   	push   ecx
c0024e2d:	6a 01                	push   0x1
c0024e2f:	68 24 4c 02 c0       	push   0xc0024c24
c0024e34:	52                   	push   edx
c0024e35:	50                   	push   eax
c0024e36:	e8 cd ec fe ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e3b:	83 c4 20             	add    esp,0x20
c0024e3e:	89 c2                	mov    edx,eax
c0024e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e44:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e4a:	b8 00 00 00 00       	mov    eax,0x0
c0024e4f:	5b                   	pop    ebx
c0024e50:	5e                   	pop    esi
c0024e51:	5f                   	pop    edi
c0024e52:	c3                   	ret    
c0024e53:	90                   	nop

c0024e54 <APICTimer::APICTimer()>:
c0024e54:	83 ec 0c             	sub    esp,0xc
c0024e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e5b:	83 ec 08             	sub    esp,0x8
c0024e5e:	68 fc b7 02 c0       	push   0xc002b7fc
c0024e63:	50                   	push   eax
c0024e64:	e8 d3 14 ff ff       	call   c001633c <Timer::Timer(char const*)>
c0024e69:	83 c4 10             	add    esp,0x10
c0024e6c:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0024e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e75:	89 10                	mov    DWORD PTR [eax],edx
c0024e77:	90                   	nop
c0024e78:	83 c4 0c             	add    esp,0xc
c0024e7b:	c3                   	ret    

c0024e7c <PIT::write(int)>:
c0024e7c:	83 ec 10             	sub    esp,0x10
c0024e7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e91:	a3 04 ed 02 c0       	mov    ds:0xc002ed04,eax
c0024e96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024e9b:	99                   	cdq    
c0024e9c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ea4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024eab:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024eb0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024eb4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024eb9:	ee                   	out    dx,al
c0024eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ebe:	0f b6 c0             	movzx  eax,al
c0024ec1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024ec8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024ecc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024ed0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024ed5:	ee                   	out    dx,al
c0024ed6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024eda:	c1 f8 08             	sar    eax,0x8
c0024edd:	0f b6 c0             	movzx  eax,al
c0024ee0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024ee7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024eeb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024eef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024ef4:	ee                   	out    dx,al
c0024ef5:	90                   	nop
c0024ef6:	83 c4 10             	add    esp,0x10
c0024ef9:	c3                   	ret    

c0024efa <pitHandler(regs*, void*)>:
c0024efa:	83 ec 0c             	sub    esp,0xc
c0024efd:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c0024f02:	99                   	cdq    
c0024f03:	52                   	push   edx
c0024f04:	50                   	push   eax
c0024f05:	6a 00                	push   0x0
c0024f07:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024f0c:	e8 bb 04 00 00       	call   c00253cc <__udivdi3>
c0024f11:	83 c4 10             	add    esp,0x10
c0024f14:	83 ec 08             	sub    esp,0x8
c0024f17:	52                   	push   edx
c0024f18:	50                   	push   eax
c0024f19:	e8 ad 14 ff ff       	call   c00163cb <timerHandler(unsigned long long)>
c0024f1e:	83 c4 10             	add    esp,0x10
c0024f21:	90                   	nop
c0024f22:	83 c4 0c             	add    esp,0xc
c0024f25:	c3                   	ret    

c0024f26 <PIT::open(int, int, void*)>:
c0024f26:	83 ec 0c             	sub    esp,0xc
c0024f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f2f:	83 c0 24             	add    eax,0x24
c0024f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f34:	83 ec 08             	sub    esp,0x8
c0024f37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f3f:	ff d0                	call   eax
c0024f41:	83 c4 10             	add    esp,0x10
c0024f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f48:	83 ec 0c             	sub    esp,0xc
c0024f4b:	6a 00                	push   0x0
c0024f4d:	6a 01                	push   0x1
c0024f4f:	68 fa 4e 02 c0       	push   0xc0024efa
c0024f54:	6a 00                	push   0x0
c0024f56:	50                   	push   eax
c0024f57:	e8 ac eb fe ff       	call   c0013b08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f5c:	83 c4 20             	add    esp,0x20
c0024f5f:	89 c2                	mov    edx,eax
c0024f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f65:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f6b:	b8 00 00 00 00       	mov    eax,0x0
c0024f70:	83 c4 0c             	add    esp,0xc
c0024f73:	c3                   	ret    

c0024f74 <PIT::close(int, int, void*)>:
c0024f74:	83 ec 0c             	sub    esp,0xc
c0024f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f7b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f89:	6a 01                	push   0x1
c0024f8b:	68 fa 4e 02 c0       	push   0xc0024efa
c0024f90:	6a 00                	push   0x0
c0024f92:	50                   	push   eax
c0024f93:	e8 ae eb fe ff       	call   c0013b46 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024f98:	83 c4 10             	add    esp,0x10
c0024f9b:	b8 00 00 00 00       	mov    eax,0x0
c0024fa0:	83 c4 0c             	add    esp,0xc
c0024fa3:	c3                   	ret    

c0024fa4 <PIT::PIT()>:
c0024fa4:	83 ec 0c             	sub    esp,0xc
c0024fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fab:	83 ec 08             	sub    esp,0x8
c0024fae:	68 38 b8 02 c0       	push   0xc002b838
c0024fb3:	50                   	push   eax
c0024fb4:	e8 83 13 ff ff       	call   c001633c <Timer::Timer(char const*)>
c0024fb9:	83 c4 10             	add    esp,0x10
c0024fbc:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c0024fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc5:	89 10                	mov    DWORD PTR [eax],edx
c0024fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fd1:	0f b6 d0             	movzx  edx,al
c0024fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fe9:	0f b6 d0             	movzx  edx,al
c0024fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fff:	8d 50 01             	lea    edx,[eax+0x1]
c0025002:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025006:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002500c:	0f b6 d0             	movzx  edx,al
c002500f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025013:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025017:	83 e1 3f             	and    ecx,0x3f
c002501a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002501e:	90                   	nop
c002501f:	83 c4 0c             	add    esp,0xc
c0025022:	c3                   	ret    
c0025023:	66 90                	xchg   ax,ax
c0025025:	66 90                	xchg   ax,ax
c0025027:	66 90                	xchg   ax,ax
c0025029:	66 90                	xchg   ax,ax
c002502b:	66 90                	xchg   ax,ax
c002502d:	66 90                	xchg   ax,ax
c002502f:	90                   	nop

c0025030 <avxDetect>:
c0025030:	b8 00 00 00 00       	mov    eax,0x0
c0025035:	c3                   	ret    

c0025036 <avxSave>:
c0025036:	c3                   	ret    

c0025037 <avxLoad>:
c0025037:	c3                   	ret    

c0025038 <avxInit>:
c0025038:	c3                   	ret    

c0025039 <avxClose>:
c0025039:	c3                   	ret    

c002503a <wouldSheSayYes>:
c002503a:	c3                   	ret    
c002503b:	49                   	dec    ecx
c002503c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025040:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025044:	75 20                	jne    c0025066 <sseDetect.noSSE+0x1>
c0025046:	4e                   	dec    esi
c0025047:	79 61                	jns    c00250aa <x87Detect+0x14>
c0025049:	68 2e 2e 2e 00       	push   0x2e2e2e
c002504e:	66 90                	xchg   ax,ax

c0025050 <absolutelyNoChanceInHell>:
c0025050:	b8 01 00 00 00       	mov    eax,0x1
c0025055:	0f a2                	cpuid  
c0025057:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002505d:	74 06                	je     c0025065 <sseDetect.noSSE>
c002505f:	b8 01 00 00 00       	mov    eax,0x1
c0025064:	c3                   	ret    

c0025065 <sseDetect.noSSE>:
c0025065:	31 c0                	xor    eax,eax
c0025067:	c3                   	ret    

c0025068 <sseSave>:
c0025068:	0f ae 44 24 08       	fxsave [esp+0x8]
c002506d:	c3                   	ret    

c002506e <sseLoad>:
c002506e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025073:	c3                   	ret    

c0025074 <sseInit>:
c0025074:	e8 43 00 00 00       	call   c00250bc <x87Init>
c0025079:	0f 20 e0             	mov    eax,cr4
c002507c:	66 0d 00 06          	or     ax,0x600
c0025080:	0f 22 e0             	mov    cr4,eax
c0025083:	c3                   	ret    

c0025084 <sseClose>:
c0025084:	c3                   	ret    
c0025085:	66 90                	xchg   ax,ax
c0025087:	66 90                	xchg   ax,ax
c0025089:	66 90                	xchg   ax,ax
c002508b:	66 90                	xchg   ax,ax
c002508d:	66 90                	xchg   ax,ax
c002508f:	90                   	nop

c0025090 <value_37F>:
c0025090:	7f 03                	jg     c0025095 <value_37A+0x1>

c0025092 <value_37E>:
c0025092:	7e 03                	jle    c0025097 <x87Detect+0x1>

c0025094 <value_37A>:
c0025094:	7a 03                	jp     c0025099 <x87Detect+0x3>

c0025096 <x87Detect>:
c0025096:	b8 01 00 00 00       	mov    eax,0x1
c002509b:	0f a2                	cpuid  
c002509d:	f7 c2 01 00 00 00    	test   edx,0x1
c00250a3:	74 06                	je     c00250ab <x87Detect.nox87>
c00250a5:	b8 01 00 00 00       	mov    eax,0x1
c00250aa:	c3                   	ret    

c00250ab <x87Detect.nox87>:
c00250ab:	b8 00 00 00 00       	mov    eax,0x0
c00250b0:	c3                   	ret    

c00250b1 <x87Save>:
c00250b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00250b6:	c3                   	ret    

c00250b7 <x87Load>:
c00250b7:	dd 64 24 08          	frstor [esp+0x8]
c00250bb:	c3                   	ret    

c00250bc <x87Init>:
c00250bc:	9b db e3             	finit  
c00250bf:	0f 20 c0             	mov    eax,cr0
c00250c2:	66 25 fb ff          	and    ax,0xfffb
c00250c6:	66 0d 22 00          	or     ax,0x22
c00250ca:	0f 22 c0             	mov    cr0,eax
c00250cd:	0f 06                	clts   
c00250cf:	d9 2d 94 50 02 c0    	fldcw  WORD PTR ds:0xc0025094
c00250d5:	c3                   	ret    

c00250d6 <x87Close>:
c00250d6:	c3                   	ret    
c00250d7:	90                   	nop

c00250d8 <__do_global_ctors_aux>:
c00250d8:	a1 cc 7b 02 c0       	mov    eax,ds:0xc0027bcc
c00250dd:	83 f8 ff             	cmp    eax,0xffffffff
c00250e0:	74 1a                	je     c00250fc <__do_global_ctors_aux+0x24>
c00250e2:	55                   	push   ebp
c00250e3:	89 e5                	mov    ebp,esp
c00250e5:	53                   	push   ebx
c00250e6:	52                   	push   edx
c00250e7:	bb cc 7b 02 c0       	mov    ebx,0xc0027bcc
c00250ec:	ff d0                	call   eax
c00250ee:	83 eb 04             	sub    ebx,0x4
c00250f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250f3:	83 f8 ff             	cmp    eax,0xffffffff
c00250f6:	75 f4                	jne    c00250ec <__do_global_ctors_aux+0x14>
c00250f8:	58                   	pop    eax
c00250f9:	5b                   	pop    ebx
c00250fa:	5d                   	pop    ebp
c00250fb:	c3                   	ret    
c00250fc:	c3                   	ret    
c00250fd:	66 90                	xchg   ax,ax
c00250ff:	90                   	nop

c0025100 <__divdi3>:
c0025100:	55                   	push   ebp
c0025101:	57                   	push   edi
c0025102:	56                   	push   esi
c0025103:	53                   	push   ebx
c0025104:	83 ec 1c             	sub    esp,0x1c
c0025107:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002510b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002510f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025112:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025116:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002511a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002511e:	85 db                	test   ebx,ebx
c0025120:	0f 88 8e 00 00 00    	js     c00251b4 <__divdi3+0xb4>
c0025126:	89 dd                	mov    ebp,ebx
c0025128:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025130:	89 d3                	mov    ebx,edx
c0025132:	85 d2                	test   edx,edx
c0025134:	79 0d                	jns    c0025143 <__divdi3+0x43>
c0025136:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002513a:	f7 d8                	neg    eax
c002513c:	83 d2 00             	adc    edx,0x0
c002513f:	f7 da                	neg    edx
c0025141:	89 d3                	mov    ebx,edx
c0025143:	89 c7                	mov    edi,eax
c0025145:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025148:	85 db                	test   ebx,ebx
c002514a:	75 48                	jne    c0025194 <__divdi3+0x94>
c002514c:	39 ef                	cmp    edi,ebp
c002514e:	76 24                	jbe    c0025174 <__divdi3+0x74>
c0025150:	89 ea                	mov    edx,ebp
c0025152:	f7 f7                	div    edi
c0025154:	89 c1                	mov    ecx,eax
c0025156:	31 f6                	xor    esi,esi
c0025158:	89 c8                	mov    eax,ecx
c002515a:	89 f2                	mov    edx,esi
c002515c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025160:	85 c9                	test   ecx,ecx
c0025162:	74 07                	je     c002516b <__divdi3+0x6b>
c0025164:	f7 d8                	neg    eax
c0025166:	83 d2 00             	adc    edx,0x0
c0025169:	f7 da                	neg    edx
c002516b:	83 c4 1c             	add    esp,0x1c
c002516e:	5b                   	pop    ebx
c002516f:	5e                   	pop    esi
c0025170:	5f                   	pop    edi
c0025171:	5d                   	pop    ebp
c0025172:	c3                   	ret    
c0025173:	90                   	nop
c0025174:	85 ff                	test   edi,edi
c0025176:	75 0b                	jne    c0025183 <__divdi3+0x83>
c0025178:	b8 01 00 00 00       	mov    eax,0x1
c002517d:	31 d2                	xor    edx,edx
c002517f:	f7 f3                	div    ebx
c0025181:	89 c7                	mov    edi,eax
c0025183:	31 d2                	xor    edx,edx
c0025185:	89 e8                	mov    eax,ebp
c0025187:	f7 f7                	div    edi
c0025189:	89 c6                	mov    esi,eax
c002518b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002518e:	f7 f7                	div    edi
c0025190:	89 c1                	mov    ecx,eax
c0025192:	eb c4                	jmp    c0025158 <__divdi3+0x58>
c0025194:	39 eb                	cmp    ebx,ebp
c0025196:	77 3c                	ja     c00251d4 <__divdi3+0xd4>
c0025198:	0f bd f3             	bsr    esi,ebx
c002519b:	83 f6 1f             	xor    esi,0x1f
c002519e:	75 40                	jne    c00251e0 <__divdi3+0xe0>
c00251a0:	39 eb                	cmp    ebx,ebp
c00251a2:	72 09                	jb     c00251ad <__divdi3+0xad>
c00251a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00251a7:	0f 87 97 00 00 00    	ja     c0025244 <__divdi3+0x144>
c00251ad:	b9 01 00 00 00       	mov    ecx,0x1
c00251b2:	eb a4                	jmp    c0025158 <__divdi3+0x58>
c00251b4:	f7 d9                	neg    ecx
c00251b6:	83 d3 00             	adc    ebx,0x0
c00251b9:	f7 db                	neg    ebx
c00251bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00251be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00251c2:	89 dd                	mov    ebp,ebx
c00251c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00251cc:	e9 5f ff ff ff       	jmp    c0025130 <__divdi3+0x30>
c00251d1:	8d 76 00             	lea    esi,[esi+0x0]
c00251d4:	31 f6                	xor    esi,esi
c00251d6:	31 c9                	xor    ecx,ecx
c00251d8:	e9 7b ff ff ff       	jmp    c0025158 <__divdi3+0x58>
c00251dd:	8d 76 00             	lea    esi,[esi+0x0]
c00251e0:	b8 20 00 00 00       	mov    eax,0x20
c00251e5:	29 f0                	sub    eax,esi
c00251e7:	89 f1                	mov    ecx,esi
c00251e9:	d3 e3                	shl    ebx,cl
c00251eb:	89 fa                	mov    edx,edi
c00251ed:	88 c1                	mov    cl,al
c00251ef:	d3 ea                	shr    edx,cl
c00251f1:	09 da                	or     edx,ebx
c00251f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00251f7:	89 f1                	mov    ecx,esi
c00251f9:	d3 e7                	shl    edi,cl
c00251fb:	89 eb                	mov    ebx,ebp
c00251fd:	88 c1                	mov    cl,al
c00251ff:	d3 eb                	shr    ebx,cl
c0025201:	89 f1                	mov    ecx,esi
c0025203:	d3 e5                	shl    ebp,cl
c0025205:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025208:	88 c1                	mov    cl,al
c002520a:	d3 ea                	shr    edx,cl
c002520c:	09 d5                	or     ebp,edx
c002520e:	89 e8                	mov    eax,ebp
c0025210:	89 da                	mov    edx,ebx
c0025212:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025216:	89 d3                	mov    ebx,edx
c0025218:	89 c5                	mov    ebp,eax
c002521a:	f7 e7                	mul    edi
c002521c:	39 d3                	cmp    ebx,edx
c002521e:	72 18                	jb     c0025238 <__divdi3+0x138>
c0025220:	74 0a                	je     c002522c <__divdi3+0x12c>
c0025222:	89 e9                	mov    ecx,ebp
c0025224:	31 f6                	xor    esi,esi
c0025226:	e9 2d ff ff ff       	jmp    c0025158 <__divdi3+0x58>
c002522b:	90                   	nop
c002522c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002522f:	89 f1                	mov    ecx,esi
c0025231:	d3 e7                	shl    edi,cl
c0025233:	39 c7                	cmp    edi,eax
c0025235:	73 eb                	jae    c0025222 <__divdi3+0x122>
c0025237:	90                   	nop
c0025238:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002523b:	31 f6                	xor    esi,esi
c002523d:	e9 16 ff ff ff       	jmp    c0025158 <__divdi3+0x58>
c0025242:	66 90                	xchg   ax,ax
c0025244:	31 c9                	xor    ecx,ecx
c0025246:	e9 0d ff ff ff       	jmp    c0025158 <__divdi3+0x58>
c002524b:	90                   	nop

c002524c <__moddi3>:
c002524c:	55                   	push   ebp
c002524d:	57                   	push   edi
c002524e:	56                   	push   esi
c002524f:	53                   	push   ebx
c0025250:	83 ec 2c             	sub    esp,0x2c
c0025253:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025257:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002525b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002525f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025263:	85 db                	test   ebx,ebx
c0025265:	0f 88 85 00 00 00    	js     c00252f0 <__moddi3+0xa4>
c002526b:	89 de                	mov    esi,ebx
c002526d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025275:	89 d7                	mov    edi,edx
c0025277:	85 d2                	test   edx,edx
c0025279:	79 09                	jns    c0025284 <__moddi3+0x38>
c002527b:	f7 d8                	neg    eax
c002527d:	83 d2 00             	adc    edx,0x0
c0025280:	f7 da                	neg    edx
c0025282:	89 d7                	mov    edi,edx
c0025284:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025288:	89 cd                	mov    ebp,ecx
c002528a:	85 ff                	test   edi,edi
c002528c:	75 52                	jne    c00252e0 <__moddi3+0x94>
c002528e:	89 c3                	mov    ebx,eax
c0025290:	39 f0                	cmp    eax,esi
c0025292:	76 24                	jbe    c00252b8 <__moddi3+0x6c>
c0025294:	89 c8                	mov    eax,ecx
c0025296:	89 f2                	mov    edx,esi
c0025298:	f7 f3                	div    ebx
c002529a:	89 d6                	mov    esi,edx
c002529c:	89 f0                	mov    eax,esi
c002529e:	31 d2                	xor    edx,edx
c00252a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00252a4:	85 c9                	test   ecx,ecx
c00252a6:	74 07                	je     c00252af <__moddi3+0x63>
c00252a8:	f7 d8                	neg    eax
c00252aa:	83 d2 00             	adc    edx,0x0
c00252ad:	f7 da                	neg    edx
c00252af:	83 c4 2c             	add    esp,0x2c
c00252b2:	5b                   	pop    ebx
c00252b3:	5e                   	pop    esi
c00252b4:	5f                   	pop    edi
c00252b5:	5d                   	pop    ebp
c00252b6:	c3                   	ret    
c00252b7:	90                   	nop
c00252b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00252bc:	85 db                	test   ebx,ebx
c00252be:	75 0d                	jne    c00252cd <__moddi3+0x81>
c00252c0:	b8 01 00 00 00       	mov    eax,0x1
c00252c5:	31 d2                	xor    edx,edx
c00252c7:	f7 f7                	div    edi
c00252c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252cd:	89 f0                	mov    eax,esi
c00252cf:	31 d2                	xor    edx,edx
c00252d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00252d5:	f7 f7                	div    edi
c00252d7:	89 e8                	mov    eax,ebp
c00252d9:	f7 f7                	div    edi
c00252db:	89 d6                	mov    esi,edx
c00252dd:	eb bd                	jmp    c002529c <__moddi3+0x50>
c00252df:	90                   	nop
c00252e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252e4:	39 f7                	cmp    edi,esi
c00252e6:	76 20                	jbe    c0025308 <__moddi3+0xbc>
c00252e8:	89 c8                	mov    eax,ecx
c00252ea:	89 f2                	mov    edx,esi
c00252ec:	eb b2                	jmp    c00252a0 <__moddi3+0x54>
c00252ee:	66 90                	xchg   ax,ax
c00252f0:	f7 d9                	neg    ecx
c00252f2:	83 d3 00             	adc    ebx,0x0
c00252f5:	f7 db                	neg    ebx
c00252f7:	89 de                	mov    esi,ebx
c00252f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025301:	e9 6f ff ff ff       	jmp    c0025275 <__moddi3+0x29>
c0025306:	66 90                	xchg   ax,ax
c0025308:	0f bd c7             	bsr    eax,edi
c002530b:	83 f0 1f             	xor    eax,0x1f
c002530e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025312:	75 24                	jne    c0025338 <__moddi3+0xec>
c0025314:	39 f7                	cmp    edi,esi
c0025316:	72 06                	jb     c002531e <__moddi3+0xd2>
c0025318:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002531c:	77 0c                	ja     c002532a <__moddi3+0xde>
c002531e:	89 e9                	mov    ecx,ebp
c0025320:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025324:	19 fe                	sbb    esi,edi
c0025326:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002532a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002532e:	89 f2                	mov    edx,esi
c0025330:	e9 6b ff ff ff       	jmp    c00252a0 <__moddi3+0x54>
c0025335:	8d 76 00             	lea    esi,[esi+0x0]
c0025338:	b8 20 00 00 00       	mov    eax,0x20
c002533d:	89 c2                	mov    edx,eax
c002533f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025343:	29 da                	sub    edx,ebx
c0025345:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025349:	88 d9                	mov    cl,bl
c002534b:	d3 e7                	shl    edi,cl
c002534d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025351:	88 d1                	mov    cl,dl
c0025353:	d3 e8                	shr    eax,cl
c0025355:	09 c7                	or     edi,eax
c0025357:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002535b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002535f:	89 d8                	mov    eax,ebx
c0025361:	88 d9                	mov    cl,bl
c0025363:	d3 e7                	shl    edi,cl
c0025365:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025369:	89 f3                	mov    ebx,esi
c002536b:	88 d1                	mov    cl,dl
c002536d:	d3 eb                	shr    ebx,cl
c002536f:	89 c7                	mov    edi,eax
c0025371:	88 c1                	mov    cl,al
c0025373:	d3 e6                	shl    esi,cl
c0025375:	89 e8                	mov    eax,ebp
c0025377:	88 d1                	mov    cl,dl
c0025379:	d3 e8                	shr    eax,cl
c002537b:	09 f0                	or     eax,esi
c002537d:	89 f9                	mov    ecx,edi
c002537f:	d3 e5                	shl    ebp,cl
c0025381:	89 da                	mov    edx,ebx
c0025383:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025387:	89 d3                	mov    ebx,edx
c0025389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002538d:	89 c6                	mov    esi,eax
c002538f:	89 d1                	mov    ecx,edx
c0025391:	39 d3                	cmp    ebx,edx
c0025393:	72 27                	jb     c00253bc <__moddi3+0x170>
c0025395:	74 21                	je     c00253b8 <__moddi3+0x16c>
c0025397:	29 f5                	sub    ebp,esi
c0025399:	19 cb                	sbb    ebx,ecx
c002539b:	89 de                	mov    esi,ebx
c002539d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00253a1:	d3 e6                	shl    esi,cl
c00253a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00253a7:	89 f9                	mov    ecx,edi
c00253a9:	d3 ed                	shr    ebp,cl
c00253ab:	09 ee                	or     esi,ebp
c00253ad:	89 f0                	mov    eax,esi
c00253af:	d3 eb                	shr    ebx,cl
c00253b1:	89 da                	mov    edx,ebx
c00253b3:	e9 e8 fe ff ff       	jmp    c00252a0 <__moddi3+0x54>
c00253b8:	39 c5                	cmp    ebp,eax
c00253ba:	73 db                	jae    c0025397 <__moddi3+0x14b>
c00253bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00253c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00253c4:	89 d1                	mov    ecx,edx
c00253c6:	89 c6                	mov    esi,eax
c00253c8:	eb cd                	jmp    c0025397 <__moddi3+0x14b>
c00253ca:	66 90                	xchg   ax,ax

c00253cc <__udivdi3>:
c00253cc:	55                   	push   ebp
c00253cd:	57                   	push   edi
c00253ce:	56                   	push   esi
c00253cf:	53                   	push   ebx
c00253d0:	83 ec 1c             	sub    esp,0x1c
c00253d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00253db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253e3:	85 d2                	test   edx,edx
c00253e5:	75 41                	jne    c0025428 <__udivdi3+0x5c>
c00253e7:	39 f7                	cmp    edi,esi
c00253e9:	76 15                	jbe    c0025400 <__udivdi3+0x34>
c00253eb:	89 e8                	mov    eax,ebp
c00253ed:	89 f2                	mov    edx,esi
c00253ef:	f7 f7                	div    edi
c00253f1:	31 db                	xor    ebx,ebx
c00253f3:	89 da                	mov    edx,ebx
c00253f5:	83 c4 1c             	add    esp,0x1c
c00253f8:	5b                   	pop    ebx
c00253f9:	5e                   	pop    esi
c00253fa:	5f                   	pop    edi
c00253fb:	5d                   	pop    ebp
c00253fc:	c3                   	ret    
c00253fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025400:	89 f9                	mov    ecx,edi
c0025402:	85 ff                	test   edi,edi
c0025404:	75 0b                	jne    c0025411 <__udivdi3+0x45>
c0025406:	b8 01 00 00 00       	mov    eax,0x1
c002540b:	31 d2                	xor    edx,edx
c002540d:	f7 f7                	div    edi
c002540f:	89 c1                	mov    ecx,eax
c0025411:	31 d2                	xor    edx,edx
c0025413:	89 f0                	mov    eax,esi
c0025415:	f7 f1                	div    ecx
c0025417:	89 c3                	mov    ebx,eax
c0025419:	89 e8                	mov    eax,ebp
c002541b:	f7 f1                	div    ecx
c002541d:	89 da                	mov    edx,ebx
c002541f:	83 c4 1c             	add    esp,0x1c
c0025422:	5b                   	pop    ebx
c0025423:	5e                   	pop    esi
c0025424:	5f                   	pop    edi
c0025425:	5d                   	pop    ebp
c0025426:	c3                   	ret    
c0025427:	90                   	nop
c0025428:	39 f2                	cmp    edx,esi
c002542a:	77 1c                	ja     c0025448 <__udivdi3+0x7c>
c002542c:	0f bd da             	bsr    ebx,edx
c002542f:	83 f3 1f             	xor    ebx,0x1f
c0025432:	75 24                	jne    c0025458 <__udivdi3+0x8c>
c0025434:	39 f2                	cmp    edx,esi
c0025436:	72 08                	jb     c0025440 <__udivdi3+0x74>
c0025438:	39 ef                	cmp    edi,ebp
c002543a:	0f 87 84 00 00 00    	ja     c00254c4 <__udivdi3+0xf8>
c0025440:	b8 01 00 00 00       	mov    eax,0x1
c0025445:	eb ac                	jmp    c00253f3 <__udivdi3+0x27>
c0025447:	90                   	nop
c0025448:	31 db                	xor    ebx,ebx
c002544a:	31 c0                	xor    eax,eax
c002544c:	89 da                	mov    edx,ebx
c002544e:	83 c4 1c             	add    esp,0x1c
c0025451:	5b                   	pop    ebx
c0025452:	5e                   	pop    esi
c0025453:	5f                   	pop    edi
c0025454:	5d                   	pop    ebp
c0025455:	c3                   	ret    
c0025456:	66 90                	xchg   ax,ax
c0025458:	b8 20 00 00 00       	mov    eax,0x20
c002545d:	29 d8                	sub    eax,ebx
c002545f:	88 d9                	mov    cl,bl
c0025461:	d3 e2                	shl    edx,cl
c0025463:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025467:	89 fa                	mov    edx,edi
c0025469:	88 c1                	mov    cl,al
c002546b:	d3 ea                	shr    edx,cl
c002546d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025471:	09 d1                	or     ecx,edx
c0025473:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025477:	88 d9                	mov    cl,bl
c0025479:	d3 e7                	shl    edi,cl
c002547b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002547f:	89 f7                	mov    edi,esi
c0025481:	88 c1                	mov    cl,al
c0025483:	d3 ef                	shr    edi,cl
c0025485:	88 d9                	mov    cl,bl
c0025487:	d3 e6                	shl    esi,cl
c0025489:	89 ea                	mov    edx,ebp
c002548b:	88 c1                	mov    cl,al
c002548d:	d3 ea                	shr    edx,cl
c002548f:	09 d6                	or     esi,edx
c0025491:	89 f0                	mov    eax,esi
c0025493:	89 fa                	mov    edx,edi
c0025495:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025499:	89 d7                	mov    edi,edx
c002549b:	89 c6                	mov    esi,eax
c002549d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00254a1:	39 d7                	cmp    edi,edx
c00254a3:	72 13                	jb     c00254b8 <__udivdi3+0xec>
c00254a5:	74 09                	je     c00254b0 <__udivdi3+0xe4>
c00254a7:	89 f0                	mov    eax,esi
c00254a9:	31 db                	xor    ebx,ebx
c00254ab:	e9 43 ff ff ff       	jmp    c00253f3 <__udivdi3+0x27>
c00254b0:	88 d9                	mov    cl,bl
c00254b2:	d3 e5                	shl    ebp,cl
c00254b4:	39 c5                	cmp    ebp,eax
c00254b6:	73 ef                	jae    c00254a7 <__udivdi3+0xdb>
c00254b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00254bb:	31 db                	xor    ebx,ebx
c00254bd:	e9 31 ff ff ff       	jmp    c00253f3 <__udivdi3+0x27>
c00254c2:	66 90                	xchg   ax,ax
c00254c4:	31 c0                	xor    eax,eax
c00254c6:	e9 28 ff ff ff       	jmp    c00253f3 <__udivdi3+0x27>
c00254cb:	90                   	nop

c00254cc <__umoddi3>:
c00254cc:	55                   	push   ebp
c00254cd:	57                   	push   edi
c00254ce:	56                   	push   esi
c00254cf:	53                   	push   ebx
c00254d0:	83 ec 1c             	sub    esp,0x1c
c00254d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00254df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00254e3:	89 da                	mov    edx,ebx
c00254e5:	85 c0                	test   eax,eax
c00254e7:	75 37                	jne    c0025520 <__umoddi3+0x54>
c00254e9:	39 df                	cmp    edi,ebx
c00254eb:	76 13                	jbe    c0025500 <__umoddi3+0x34>
c00254ed:	89 f0                	mov    eax,esi
c00254ef:	f7 f7                	div    edi
c00254f1:	89 d0                	mov    eax,edx
c00254f3:	31 d2                	xor    edx,edx
c00254f5:	83 c4 1c             	add    esp,0x1c
c00254f8:	5b                   	pop    ebx
c00254f9:	5e                   	pop    esi
c00254fa:	5f                   	pop    edi
c00254fb:	5d                   	pop    ebp
c00254fc:	c3                   	ret    
c00254fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025500:	89 fd                	mov    ebp,edi
c0025502:	85 ff                	test   edi,edi
c0025504:	75 0b                	jne    c0025511 <__umoddi3+0x45>
c0025506:	b8 01 00 00 00       	mov    eax,0x1
c002550b:	31 d2                	xor    edx,edx
c002550d:	f7 f7                	div    edi
c002550f:	89 c5                	mov    ebp,eax
c0025511:	89 d8                	mov    eax,ebx
c0025513:	31 d2                	xor    edx,edx
c0025515:	f7 f5                	div    ebp
c0025517:	89 f0                	mov    eax,esi
c0025519:	f7 f5                	div    ebp
c002551b:	89 d0                	mov    eax,edx
c002551d:	eb d4                	jmp    c00254f3 <__umoddi3+0x27>
c002551f:	90                   	nop
c0025520:	89 f1                	mov    ecx,esi
c0025522:	39 d8                	cmp    eax,ebx
c0025524:	76 0a                	jbe    c0025530 <__umoddi3+0x64>
c0025526:	89 f0                	mov    eax,esi
c0025528:	83 c4 1c             	add    esp,0x1c
c002552b:	5b                   	pop    ebx
c002552c:	5e                   	pop    esi
c002552d:	5f                   	pop    edi
c002552e:	5d                   	pop    ebp
c002552f:	c3                   	ret    
c0025530:	0f bd e8             	bsr    ebp,eax
c0025533:	83 f5 1f             	xor    ebp,0x1f
c0025536:	75 1c                	jne    c0025554 <__umoddi3+0x88>
c0025538:	39 d8                	cmp    eax,ebx
c002553a:	72 04                	jb     c0025540 <__umoddi3+0x74>
c002553c:	39 f7                	cmp    edi,esi
c002553e:	77 08                	ja     c0025548 <__umoddi3+0x7c>
c0025540:	89 da                	mov    edx,ebx
c0025542:	29 fe                	sub    esi,edi
c0025544:	19 c2                	sbb    edx,eax
c0025546:	89 f1                	mov    ecx,esi
c0025548:	89 c8                	mov    eax,ecx
c002554a:	83 c4 1c             	add    esp,0x1c
c002554d:	5b                   	pop    ebx
c002554e:	5e                   	pop    esi
c002554f:	5f                   	pop    edi
c0025550:	5d                   	pop    ebp
c0025551:	c3                   	ret    
c0025552:	66 90                	xchg   ax,ax
c0025554:	ba 20 00 00 00       	mov    edx,0x20
c0025559:	29 ea                	sub    edx,ebp
c002555b:	89 e9                	mov    ecx,ebp
c002555d:	d3 e0                	shl    eax,cl
c002555f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025563:	89 f8                	mov    eax,edi
c0025565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025569:	88 d1                	mov    cl,dl
c002556b:	d3 e8                	shr    eax,cl
c002556d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025571:	09 c1                	or     ecx,eax
c0025573:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025577:	89 e9                	mov    ecx,ebp
c0025579:	d3 e7                	shl    edi,cl
c002557b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002557f:	89 d8                	mov    eax,ebx
c0025581:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025585:	88 d1                	mov    cl,dl
c0025587:	d3 e8                	shr    eax,cl
c0025589:	89 c7                	mov    edi,eax
c002558b:	89 e9                	mov    ecx,ebp
c002558d:	d3 e3                	shl    ebx,cl
c002558f:	89 f0                	mov    eax,esi
c0025591:	88 d1                	mov    cl,dl
c0025593:	d3 e8                	shr    eax,cl
c0025595:	09 d8                	or     eax,ebx
c0025597:	89 e9                	mov    ecx,ebp
c0025599:	d3 e6                	shl    esi,cl
c002559b:	89 f3                	mov    ebx,esi
c002559d:	89 fa                	mov    edx,edi
c002559f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00255a3:	89 d1                	mov    ecx,edx
c00255a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00255a9:	89 c6                	mov    esi,eax
c00255ab:	89 d7                	mov    edi,edx
c00255ad:	39 d1                	cmp    ecx,edx
c00255af:	72 27                	jb     c00255d8 <__umoddi3+0x10c>
c00255b1:	74 21                	je     c00255d4 <__umoddi3+0x108>
c00255b3:	89 ca                	mov    edx,ecx
c00255b5:	29 f3                	sub    ebx,esi
c00255b7:	19 fa                	sbb    edx,edi
c00255b9:	89 d0                	mov    eax,edx
c00255bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00255bf:	d3 e0                	shl    eax,cl
c00255c1:	89 e9                	mov    ecx,ebp
c00255c3:	d3 eb                	shr    ebx,cl
c00255c5:	09 d8                	or     eax,ebx
c00255c7:	d3 ea                	shr    edx,cl
c00255c9:	83 c4 1c             	add    esp,0x1c
c00255cc:	5b                   	pop    ebx
c00255cd:	5e                   	pop    esi
c00255ce:	5f                   	pop    edi
c00255cf:	5d                   	pop    ebp
c00255d0:	c3                   	ret    
c00255d1:	8d 76 00             	lea    esi,[esi+0x0]
c00255d4:	39 c3                	cmp    ebx,eax
c00255d6:	73 db                	jae    c00255b3 <__umoddi3+0xe7>
c00255d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00255e0:	89 d7                	mov    edi,edx
c00255e2:	89 c6                	mov    esi,eax
c00255e4:	eb cd                	jmp    c00255b3 <__umoddi3+0xe7>

c00255e6 <__addsf3>:
c00255e6:	55                   	push   ebp
c00255e7:	89 e5                	mov    ebp,esp
c00255e9:	57                   	push   edi
c00255ea:	56                   	push   esi
c00255eb:	53                   	push   ebx
c00255ec:	83 ec 08             	sub    esp,0x8
c00255ef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00255f2:	89 fa                	mov    edx,edi
c00255f4:	89 f8                	mov    eax,edi
c00255f6:	c1 f8 17             	sar    eax,0x17
c00255f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00255fc:	c1 e2 08             	shl    edx,0x8
c00255ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025605:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025608:	89 de                	mov    esi,ebx
c002560a:	c1 fe 17             	sar    esi,0x17
c002560d:	c1 e3 08             	shl    ebx,0x8
c0025610:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025616:	31 f0                	xor    eax,esi
c0025618:	0f 88 3b 01 00 00    	js     c0025759 <__addsf3+0x173>
c002561e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025621:	29 f1                	sub    ecx,esi
c0025623:	85 c9                	test   ecx,ecx
c0025625:	7e 54                	jle    c002567b <__addsf3+0x95>
c0025627:	89 f0                	mov    eax,esi
c0025629:	84 c0                	test   al,al
c002562b:	75 10                	jne    c002563d <__addsf3+0x57>
c002562d:	85 db                	test   ebx,ebx
c002562f:	0f 84 aa 02 00 00    	je     c00258df <__addsf3+0x2f9>
c0025635:	49                   	dec    ecx
c0025636:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025639:	74 38                	je     c0025673 <__addsf3+0x8d>
c002563b:	eb 13                	jmp    c0025650 <__addsf3+0x6a>
c002563d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025640:	f7 d0                	not    eax
c0025642:	84 c0                	test   al,al
c0025644:	0f 84 95 02 00 00    	je     c00258df <__addsf3+0x2f9>
c002564a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025650:	83 f9 1f             	cmp    ecx,0x1f
c0025653:	0f 8f 86 02 00 00    	jg     c00258df <__addsf3+0x2f9>
c0025659:	89 de                	mov    esi,ebx
c002565b:	d3 ee                	shr    esi,cl
c002565d:	b8 20 00 00 00       	mov    eax,0x20
c0025662:	29 c8                	sub    eax,ecx
c0025664:	89 c1                	mov    ecx,eax
c0025666:	d3 e3                	shl    ebx,cl
c0025668:	31 c0                	xor    eax,eax
c002566a:	85 db                	test   ebx,ebx
c002566c:	0f 95 c0             	setne  al
c002566f:	09 f0                	or     eax,esi
c0025671:	01 d0                	add    eax,edx
c0025673:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025676:	e9 b6 00 00 00       	jmp    c0025731 <__addsf3+0x14b>
c002567b:	74 5c                	je     c00256d9 <__addsf3+0xf3>
c002567d:	89 f1                	mov    ecx,esi
c002567f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025682:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025685:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025689:	75 14                	jne    c002569f <__addsf3+0xb9>
c002568b:	85 d2                	test   edx,edx
c002568d:	0f 84 4c 02 00 00    	je     c00258df <__addsf3+0x2f9>
c0025693:	49                   	dec    ecx
c0025694:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025697:	0f 84 94 00 00 00    	je     c0025731 <__addsf3+0x14b>
c002569d:	eb 12                	jmp    c00256b1 <__addsf3+0xcb>
c002569f:	89 f0                	mov    eax,esi
c00256a1:	f7 d0                	not    eax
c00256a3:	84 c0                	test   al,al
c00256a5:	0f 84 34 02 00 00    	je     c00258df <__addsf3+0x2f9>
c00256ab:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256b1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256b4:	83 f9 1f             	cmp    ecx,0x1f
c00256b7:	0f 8f 22 02 00 00    	jg     c00258df <__addsf3+0x2f9>
c00256bd:	89 d7                	mov    edi,edx
c00256bf:	d3 ef                	shr    edi,cl
c00256c1:	b8 20 00 00 00       	mov    eax,0x20
c00256c6:	29 c8                	sub    eax,ecx
c00256c8:	89 c1                	mov    ecx,eax
c00256ca:	d3 e2                	shl    edx,cl
c00256cc:	31 c0                	xor    eax,eax
c00256ce:	85 d2                	test   edx,edx
c00256d0:	0f 95 c0             	setne  al
c00256d3:	09 f8                	or     eax,edi
c00256d5:	01 d8                	add    eax,ebx
c00256d7:	eb 58                	jmp    c0025731 <__addsf3+0x14b>
c00256d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256dc:	8d 70 01             	lea    esi,[eax+0x1]
c00256df:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00256e5:	75 32                	jne    c0025719 <__addsf3+0x133>
c00256e7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256eb:	75 1f                	jne    c002570c <__addsf3+0x126>
c00256ed:	85 d2                	test   edx,edx
c00256ef:	0f 84 e0 01 00 00    	je     c00258d5 <__addsf3+0x2ef>
c00256f5:	85 db                	test   ebx,ebx
c00256f7:	0f 84 e2 01 00 00    	je     c00258df <__addsf3+0x2f9>
c00256fd:	89 d0                	mov    eax,edx
c00256ff:	01 d8                	add    eax,ebx
c0025701:	0f 89 a9 01 00 00    	jns    c00258b0 <__addsf3+0x2ca>
c0025707:	e9 9d 01 00 00       	jmp    c00258a9 <__addsf3+0x2c3>
c002570c:	85 d2                	test   edx,edx
c002570e:	0f 85 cb 01 00 00    	jne    c00258df <__addsf3+0x2f9>
c0025714:	e9 bc 01 00 00       	jmp    c00258d5 <__addsf3+0x2ef>
c0025719:	31 c0                	xor    eax,eax
c002571b:	89 f1                	mov    ecx,esi
c002571d:	f7 d1                	not    ecx
c002571f:	84 c9                	test   cl,cl
c0025721:	0f 84 90 01 00 00    	je     c00258b7 <__addsf3+0x2d1>
c0025727:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002572a:	d1 e8                	shr    eax,1
c002572c:	e9 86 01 00 00       	jmp    c00258b7 <__addsf3+0x2d1>
c0025731:	85 c0                	test   eax,eax
c0025733:	0f 89 7e 01 00 00    	jns    c00258b7 <__addsf3+0x2d1>
c0025739:	46                   	inc    esi
c002573a:	89 f2                	mov    edx,esi
c002573c:	f7 d2                	not    edx
c002573e:	84 d2                	test   dl,dl
c0025740:	0f 84 6f 01 00 00    	je     c00258b5 <__addsf3+0x2cf>
c0025746:	89 c2                	mov    edx,eax
c0025748:	83 e2 01             	and    edx,0x1
c002574b:	d1 e8                	shr    eax,1
c002574d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025752:	09 d0                	or     eax,edx
c0025754:	e9 5e 01 00 00       	jmp    c00258b7 <__addsf3+0x2d1>
c0025759:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002575d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025760:	89 f0                	mov    eax,esi
c0025762:	0f b6 c0             	movzx  eax,al
c0025765:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025768:	29 c1                	sub    ecx,eax
c002576a:	85 c9                	test   ecx,ecx
c002576c:	7e 55                	jle    c00257c3 <__addsf3+0x1dd>
c002576e:	85 c0                	test   eax,eax
c0025770:	75 11                	jne    c0025783 <__addsf3+0x19d>
c0025772:	85 db                	test   ebx,ebx
c0025774:	0f 84 65 01 00 00    	je     c00258df <__addsf3+0x2f9>
c002577a:	49                   	dec    ecx
c002577b:	75 19                	jne    c0025796 <__addsf3+0x1b0>
c002577d:	89 d0                	mov    eax,edx
c002577f:	29 d8                	sub    eax,ebx
c0025781:	eb 38                	jmp    c00257bb <__addsf3+0x1d5>
c0025783:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025786:	f7 d0                	not    eax
c0025788:	84 c0                	test   al,al
c002578a:	0f 84 4f 01 00 00    	je     c00258df <__addsf3+0x2f9>
c0025790:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025796:	83 f9 1f             	cmp    ecx,0x1f
c0025799:	0f 8f 40 01 00 00    	jg     c00258df <__addsf3+0x2f9>
c002579f:	89 de                	mov    esi,ebx
c00257a1:	d3 ee                	shr    esi,cl
c00257a3:	b8 20 00 00 00       	mov    eax,0x20
c00257a8:	29 c8                	sub    eax,ecx
c00257aa:	89 c1                	mov    ecx,eax
c00257ac:	d3 e3                	shl    ebx,cl
c00257ae:	31 c0                	xor    eax,eax
c00257b0:	85 db                	test   ebx,ebx
c00257b2:	0f 95 c0             	setne  al
c00257b5:	09 f0                	or     eax,esi
c00257b7:	29 c2                	sub    edx,eax
c00257b9:	89 d0                	mov    eax,edx
c00257bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257be:	e9 af 00 00 00       	jmp    c0025872 <__addsf3+0x28c>
c00257c3:	74 5c                	je     c0025821 <__addsf3+0x23b>
c00257c5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00257c8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257cb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257cf:	75 14                	jne    c00257e5 <__addsf3+0x1ff>
c00257d1:	85 d2                	test   edx,edx
c00257d3:	0f 84 06 01 00 00    	je     c00258df <__addsf3+0x2f9>
c00257d9:	48                   	dec    eax
c00257da:	75 1b                	jne    c00257f7 <__addsf3+0x211>
c00257dc:	89 d8                	mov    eax,ebx
c00257de:	29 d0                	sub    eax,edx
c00257e0:	e9 8d 00 00 00       	jmp    c0025872 <__addsf3+0x28c>
c00257e5:	89 f1                	mov    ecx,esi
c00257e7:	f7 d1                	not    ecx
c00257e9:	84 c9                	test   cl,cl
c00257eb:	0f 84 ee 00 00 00    	je     c00258df <__addsf3+0x2f9>
c00257f1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00257f7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257fa:	83 f8 1f             	cmp    eax,0x1f
c00257fd:	0f 8f dc 00 00 00    	jg     c00258df <__addsf3+0x2f9>
c0025803:	89 d7                	mov    edi,edx
c0025805:	88 c1                	mov    cl,al
c0025807:	d3 ef                	shr    edi,cl
c0025809:	b9 20 00 00 00       	mov    ecx,0x20
c002580e:	29 c1                	sub    ecx,eax
c0025810:	d3 e2                	shl    edx,cl
c0025812:	31 c0                	xor    eax,eax
c0025814:	85 d2                	test   edx,edx
c0025816:	0f 95 c0             	setne  al
c0025819:	09 f8                	or     eax,edi
c002581b:	29 c3                	sub    ebx,eax
c002581d:	89 d8                	mov    eax,ebx
c002581f:	eb 51                	jmp    c0025872 <__addsf3+0x28c>
c0025821:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025824:	40                   	inc    eax
c0025825:	a8 fe                	test   al,0xfe
c0025827:	75 3d                	jne    c0025866 <__addsf3+0x280>
c0025829:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002582d:	0f 85 a7 00 00 00    	jne    c00258da <__addsf3+0x2f4>
c0025833:	85 d2                	test   edx,edx
c0025835:	75 12                	jne    c0025849 <__addsf3+0x263>
c0025837:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002583a:	85 db                	test   ebx,ebx
c002583c:	0f 85 9d 00 00 00    	jne    c00258df <__addsf3+0x2f9>
c0025842:	31 ff                	xor    edi,edi
c0025844:	e9 96 00 00 00       	jmp    c00258df <__addsf3+0x2f9>
c0025849:	85 db                	test   ebx,ebx
c002584b:	0f 84 8e 00 00 00    	je     c00258df <__addsf3+0x2f9>
c0025851:	89 d0                	mov    eax,edx
c0025853:	29 d8                	sub    eax,ebx
c0025855:	79 06                	jns    c002585d <__addsf3+0x277>
c0025857:	89 d8                	mov    eax,ebx
c0025859:	29 d0                	sub    eax,edx
c002585b:	eb 5a                	jmp    c00258b7 <__addsf3+0x2d1>
c002585d:	bf 00 00 00 00       	mov    edi,0x0
c0025862:	74 7b                	je     c00258df <__addsf3+0x2f9>
c0025864:	eb 4a                	jmp    c00258b0 <__addsf3+0x2ca>
c0025866:	89 d0                	mov    eax,edx
c0025868:	29 d8                	sub    eax,ebx
c002586a:	79 12                	jns    c002587e <__addsf3+0x298>
c002586c:	89 d8                	mov    eax,ebx
c002586e:	29 d0                	sub    eax,edx
c0025870:	eb 09                	jmp    c002587b <__addsf3+0x295>
c0025872:	85 c0                	test   eax,eax
c0025874:	79 41                	jns    c00258b7 <__addsf3+0x2d1>
c0025876:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002587b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002587e:	31 f6                	xor    esi,esi
c0025880:	85 c0                	test   eax,eax
c0025882:	74 33                	je     c00258b7 <__addsf3+0x2d1>
c0025884:	0f bd c8             	bsr    ecx,eax
c0025887:	83 f1 1f             	xor    ecx,0x1f
c002588a:	d3 e0                	shl    eax,cl
c002588c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025890:	39 ca                	cmp    edx,ecx
c0025892:	7f 10                	jg     c00258a4 <__addsf3+0x2be>
c0025894:	29 d1                	sub    ecx,edx
c0025896:	41                   	inc    ecx
c0025897:	d3 e8                	shr    eax,cl
c0025899:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002589c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00258a2:	eb 13                	jmp    c00258b7 <__addsf3+0x2d1>
c00258a4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258a7:	29 ce                	sub    esi,ecx
c00258a9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00258ae:	eb 07                	jmp    c00258b7 <__addsf3+0x2d1>
c00258b0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258b3:	eb 02                	jmp    c00258b7 <__addsf3+0x2d1>
c00258b5:	31 c0                	xor    eax,eax
c00258b7:	89 c2                	mov    edx,eax
c00258b9:	c1 ea 08             	shr    edx,0x8
c00258bc:	a8 7f                	test   al,0x7f
c00258be:	0f 95 c1             	setne  cl
c00258c1:	09 d1                	or     ecx,edx
c00258c3:	83 e1 01             	and    ecx,0x1
c00258c6:	c1 e8 07             	shr    eax,0x7
c00258c9:	21 c8                	and    eax,ecx
c00258cb:	c1 e6 17             	shl    esi,0x17
c00258ce:	09 d6                	or     esi,edx
c00258d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00258d3:	eb 0a                	jmp    c00258df <__addsf3+0x2f9>
c00258d5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258d8:	eb 05                	jmp    c00258df <__addsf3+0x2f9>
c00258da:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00258df:	89 f8                	mov    eax,edi
c00258e1:	5a                   	pop    edx
c00258e2:	59                   	pop    ecx
c00258e3:	5b                   	pop    ebx
c00258e4:	5e                   	pop    esi
c00258e5:	5f                   	pop    edi
c00258e6:	5d                   	pop    ebp
c00258e7:	c3                   	ret    

c00258e8 <__subsf3>:
c00258e8:	55                   	push   ebp
c00258e9:	89 e5                	mov    ebp,esp
c00258eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258ee:	05 00 00 00 80       	add    eax,0x80000000
c00258f3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258f6:	5d                   	pop    ebp
c00258f7:	e9 ea fc ff ff       	jmp    c00255e6 <__addsf3>

c00258fc <__negsf2>:
c00258fc:	55                   	push   ebp
c00258fd:	89 e5                	mov    ebp,esp
c00258ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025902:	05 00 00 00 80       	add    eax,0x80000000
c0025907:	5d                   	pop    ebp
c0025908:	c3                   	ret    

c0025909 <__mulsf3>:
c0025909:	55                   	push   ebp
c002590a:	89 e5                	mov    ebp,esp
c002590c:	57                   	push   edi
c002590d:	56                   	push   esi
c002590e:	53                   	push   ebx
c002590f:	83 ec 1c             	sub    esp,0x1c
c0025912:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025915:	89 f0                	mov    eax,esi
c0025917:	89 f1                	mov    ecx,esi
c0025919:	c1 f9 17             	sar    ecx,0x17
c002591c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002591f:	c1 e0 08             	shl    eax,0x8
c0025922:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025927:	89 c1                	mov    ecx,eax
c0025929:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002592c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002592f:	89 c7                	mov    edi,eax
c0025931:	c1 ff 17             	sar    edi,0x17
c0025934:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025938:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002593b:	89 f8                	mov    eax,edi
c002593d:	0f b6 c0             	movzx  eax,al
c0025940:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025943:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025947:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002594a:	42                   	inc    edx
c002594b:	80 e2 fe             	and    dl,0xfe
c002594e:	75 7b                	jne    c00259cb <__mulsf3+0xc2>
c0025950:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025954:	74 54                	je     c00259aa <__mulsf3+0xa1>
c0025956:	85 c9                	test   ecx,ecx
c0025958:	0f 85 64 01 00 00    	jne    c0025ac2 <__mulsf3+0x1b9>
c002595e:	8d 57 01             	lea    edx,[edi+0x1]
c0025961:	80 e2 fe             	and    dl,0xfe
c0025964:	75 1f                	jne    c0025985 <__mulsf3+0x7c>
c0025966:	85 c0                	test   eax,eax
c0025968:	b8 00 00 00 00       	mov    eax,0x0
c002596d:	74 29                	je     c0025998 <__mulsf3+0x8f>
c002596f:	53                   	push   ebx
c0025970:	53                   	push   ebx
c0025971:	50                   	push   eax
c0025972:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025975:	e8 96 05 00 00       	call   c0025f10 <__nesf2>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	85 c0                	test   eax,eax
c002597f:	0f 85 3a 01 00 00    	jne    c0025abf <__mulsf3+0x1b6>
c0025985:	85 ff                	test   edi,edi
c0025987:	0f 89 35 01 00 00    	jns    c0025ac2 <__mulsf3+0x1b9>
c002598d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025993:	e9 2a 01 00 00       	jmp    c0025ac2 <__mulsf3+0x1b9>
c0025998:	51                   	push   ecx
c0025999:	51                   	push   ecx
c002599a:	50                   	push   eax
c002599b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002599e:	e8 6d 05 00 00       	call   c0025f10 <__nesf2>
c00259a3:	83 c4 10             	add    esp,0x10
c00259a6:	85 c0                	test   eax,eax
c00259a8:	eb 15                	jmp    c00259bf <__mulsf3+0xb6>
c00259aa:	85 c9                	test   ecx,ecx
c00259ac:	74 0b                	je     c00259b9 <__mulsf3+0xb0>
c00259ae:	8d 53 ff             	lea    edx,[ebx-0x1]
c00259b1:	01 c9                	add    ecx,ecx
c00259b3:	78 16                	js     c00259cb <__mulsf3+0xc2>
c00259b5:	89 d3                	mov    ebx,edx
c00259b7:	eb f5                	jmp    c00259ae <__mulsf3+0xa5>
c00259b9:	89 f8                	mov    eax,edi
c00259bb:	f7 d0                	not    eax
c00259bd:	84 c0                	test   al,al
c00259bf:	75 c4                	jne    c0025985 <__mulsf3+0x7c>
c00259c1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00259c6:	e9 f7 00 00 00       	jmp    c0025ac2 <__mulsf3+0x1b9>
c00259cb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00259ce:	c1 e6 08             	shl    esi,0x8
c00259d1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00259d7:	8d 57 01             	lea    edx,[edi+0x1]
c00259da:	80 e2 fe             	and    dl,0xfe
c00259dd:	75 63                	jne    c0025a42 <__mulsf3+0x139>
c00259df:	85 c0                	test   eax,eax
c00259e1:	74 2f                	je     c0025a12 <__mulsf3+0x109>
c00259e3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259e7:	0f 89 d2 00 00 00    	jns    c0025abf <__mulsf3+0x1b6>
c00259ed:	52                   	push   edx
c00259ee:	52                   	push   edx
c00259ef:	6a 00                	push   0x0
c00259f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259f4:	e8 dc 04 00 00       	call   c0025ed5 <__eqsf2>
c00259f9:	83 c4 10             	add    esp,0x10
c00259fc:	85 c0                	test   eax,eax
c00259fe:	0f 85 bb 00 00 00    	jne    c0025abf <__mulsf3+0x1b6>
c0025a04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a07:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025a0d:	e9 b0 00 00 00       	jmp    c0025ac2 <__mulsf3+0x1b9>
c0025a12:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025a15:	50                   	push   eax
c0025a16:	50                   	push   eax
c0025a17:	6a 00                	push   0x0
c0025a19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a1c:	e8 b4 04 00 00       	call   c0025ed5 <__eqsf2>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	85 c0                	test   eax,eax
c0025a26:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025a29:	75 0c                	jne    c0025a37 <__mulsf3+0x12e>
c0025a2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a2f:	0f 89 8a 00 00 00    	jns    c0025abf <__mulsf3+0x1b6>
c0025a35:	eb cd                	jmp    c0025a04 <__mulsf3+0xfb>
c0025a37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a3a:	01 f6                	add    esi,esi
c0025a3c:	78 04                	js     c0025a42 <__mulsf3+0x139>
c0025a3e:	89 c3                	mov    ebx,eax
c0025a40:	eb f5                	jmp    c0025a37 <__mulsf3+0x12e>
c0025a42:	89 c8                	mov    eax,ecx
c0025a44:	0d 00 00 00 80       	or     eax,0x80000000
c0025a49:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025a4f:	f7 e6                	mul    esi
c0025a51:	85 c0                	test   eax,eax
c0025a53:	0f 95 c0             	setne  al
c0025a56:	0f b6 c0             	movzx  eax,al
c0025a59:	09 c2                	or     edx,eax
c0025a5b:	78 03                	js     c0025a60 <__mulsf3+0x157>
c0025a5d:	01 d2                	add    edx,edx
c0025a5f:	4b                   	dec    ebx
c0025a60:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a66:	7f 22                	jg     c0025a8a <__mulsf3+0x181>
c0025a68:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a6e:	85 db                	test   ebx,ebx
c0025a70:	7f 23                	jg     c0025a95 <__mulsf3+0x18c>
c0025a72:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a75:	7c 1a                	jl     c0025a91 <__mulsf3+0x188>
c0025a77:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a7d:	b9 01 00 00 00       	mov    ecx,0x1
c0025a82:	29 d9                	sub    ecx,ebx
c0025a84:	d3 ea                	shr    edx,cl
c0025a86:	31 db                	xor    ebx,ebx
c0025a88:	eb 0b                	jmp    c0025a95 <__mulsf3+0x18c>
c0025a8a:	bb ff 00 00 00       	mov    ebx,0xff
c0025a8f:	eb 02                	jmp    c0025a93 <__mulsf3+0x18a>
c0025a91:	31 db                	xor    ebx,ebx
c0025a93:	31 d2                	xor    edx,edx
c0025a95:	89 d0                	mov    eax,edx
c0025a97:	c1 e8 08             	shr    eax,0x8
c0025a9a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025a9d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025aa3:	09 fb                	or     ebx,edi
c0025aa5:	c1 e3 17             	shl    ebx,0x17
c0025aa8:	09 c3                	or     ebx,eax
c0025aaa:	f6 c2 7f             	test   dl,0x7f
c0025aad:	0f 95 c1             	setne  cl
c0025ab0:	09 c8                	or     eax,ecx
c0025ab2:	83 e0 01             	and    eax,0x1
c0025ab5:	c1 ea 07             	shr    edx,0x7
c0025ab8:	21 c2                	and    edx,eax
c0025aba:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025abd:	eb 03                	jmp    c0025ac2 <__mulsf3+0x1b9>
c0025abf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025ac2:	89 f0                	mov    eax,esi
c0025ac4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ac7:	5b                   	pop    ebx
c0025ac8:	5e                   	pop    esi
c0025ac9:	5f                   	pop    edi
c0025aca:	5d                   	pop    ebp
c0025acb:	c3                   	ret    

c0025acc <__divsf3>:
c0025acc:	55                   	push   ebp
c0025acd:	89 e5                	mov    ebp,esp
c0025acf:	57                   	push   edi
c0025ad0:	56                   	push   esi
c0025ad1:	53                   	push   ebx
c0025ad2:	83 ec 1c             	sub    esp,0x1c
c0025ad5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ad8:	89 d8                	mov    eax,ebx
c0025ada:	89 d9                	mov    ecx,ebx
c0025adc:	c1 f9 17             	sar    ecx,0x17
c0025adf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ae2:	c1 e0 08             	shl    eax,0x8
c0025ae5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025aea:	89 c1                	mov    ecx,eax
c0025aec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025af2:	89 c7                	mov    edi,eax
c0025af4:	c1 ff 17             	sar    edi,0x17
c0025af7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025afb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025afe:	89 f8                	mov    eax,edi
c0025b00:	0f b6 c0             	movzx  eax,al
c0025b03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025b06:	29 c6                	sub    esi,eax
c0025b08:	83 c6 7f             	add    esi,0x7f
c0025b0b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025b0e:	42                   	inc    edx
c0025b0f:	80 e2 fe             	and    dl,0xfe
c0025b12:	0f 85 9c 00 00 00    	jne    c0025bb4 <__divsf3+0xe8>
c0025b18:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b1c:	74 33                	je     c0025b51 <__divsf3+0x85>
c0025b1e:	85 c9                	test   ecx,ecx
c0025b20:	0f 85 c7 01 00 00    	jne    c0025ced <__divsf3+0x221>
c0025b26:	8d 57 01             	lea    edx,[edi+0x1]
c0025b29:	80 e2 fe             	and    dl,0xfe
c0025b2c:	75 2f                	jne    c0025b5d <__divsf3+0x91>
c0025b2e:	85 c0                	test   eax,eax
c0025b30:	74 2b                	je     c0025b5d <__divsf3+0x91>
c0025b32:	51                   	push   ecx
c0025b33:	51                   	push   ecx
c0025b34:	6a 00                	push   0x0
c0025b36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b39:	e8 d2 03 00 00       	call   c0025f10 <__nesf2>
c0025b3e:	83 c4 10             	add    esp,0x10
c0025b41:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025b44:	85 c0                	test   eax,eax
c0025b46:	0f 85 a1 01 00 00    	jne    c0025ced <__divsf3+0x221>
c0025b4c:	e9 92 01 00 00       	jmp    c0025ce3 <__divsf3+0x217>
c0025b51:	85 c9                	test   ecx,ecx
c0025b53:	75 1b                	jne    c0025b70 <__divsf3+0xa4>
c0025b55:	8d 57 01             	lea    edx,[edi+0x1]
c0025b58:	80 e2 fe             	and    dl,0xfe
c0025b5b:	74 1e                	je     c0025b7b <__divsf3+0xaf>
c0025b5d:	85 ff                	test   edi,edi
c0025b5f:	0f 89 88 01 00 00    	jns    c0025ced <__divsf3+0x221>
c0025b65:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b6b:	e9 7d 01 00 00       	jmp    c0025ced <__divsf3+0x221>
c0025b70:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b73:	01 c9                	add    ecx,ecx
c0025b75:	78 3d                	js     c0025bb4 <__divsf3+0xe8>
c0025b77:	89 d6                	mov    esi,edx
c0025b79:	eb f5                	jmp    c0025b70 <__divsf3+0xa4>
c0025b7b:	85 c0                	test   eax,eax
c0025b7d:	b8 00 00 00 00       	mov    eax,0x0
c0025b82:	74 18                	je     c0025b9c <__divsf3+0xd0>
c0025b84:	52                   	push   edx
c0025b85:	52                   	push   edx
c0025b86:	50                   	push   eax
c0025b87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b8a:	e8 81 03 00 00       	call   c0025f10 <__nesf2>
c0025b8f:	83 c4 10             	add    esp,0x10
c0025b92:	85 c0                	test   eax,eax
c0025b94:	0f 85 50 01 00 00    	jne    c0025cea <__divsf3+0x21e>
c0025b9a:	eb c1                	jmp    c0025b5d <__divsf3+0x91>
c0025b9c:	56                   	push   esi
c0025b9d:	56                   	push   esi
c0025b9e:	50                   	push   eax
c0025b9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ba2:	e8 69 03 00 00       	call   c0025f10 <__nesf2>
c0025ba7:	83 c4 10             	add    esp,0x10
c0025baa:	85 c0                	test   eax,eax
c0025bac:	0f 84 31 01 00 00    	je     c0025ce3 <__divsf3+0x217>
c0025bb2:	eb a9                	jmp    c0025b5d <__divsf3+0x91>
c0025bb4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025bb7:	c1 e3 08             	shl    ebx,0x8
c0025bba:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025bc0:	8d 57 01             	lea    edx,[edi+0x1]
c0025bc3:	80 e2 fe             	and    dl,0xfe
c0025bc6:	75 71                	jne    c0025c39 <__divsf3+0x16d>
c0025bc8:	85 c0                	test   eax,eax
c0025bca:	ba 00 00 00 00       	mov    edx,0x0
c0025bcf:	74 2f                	je     c0025c00 <__divsf3+0x134>
c0025bd1:	51                   	push   ecx
c0025bd2:	51                   	push   ecx
c0025bd3:	52                   	push   edx
c0025bd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bd7:	e8 f9 02 00 00       	call   c0025ed5 <__eqsf2>
c0025bdc:	83 c4 10             	add    esp,0x10
c0025bdf:	85 c0                	test   eax,eax
c0025be1:	0f 85 03 01 00 00    	jne    c0025cea <__divsf3+0x21e>
c0025be7:	31 d2                	xor    edx,edx
c0025be9:	89 d3                	mov    ebx,edx
c0025beb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025bee:	31 f8                	xor    eax,edi
c0025bf0:	0f 89 f7 00 00 00    	jns    c0025ced <__divsf3+0x221>
c0025bf6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025bfb:	e9 ed 00 00 00       	jmp    c0025ced <__divsf3+0x221>
c0025c00:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025c03:	50                   	push   eax
c0025c04:	50                   	push   eax
c0025c05:	52                   	push   edx
c0025c06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c09:	e8 c7 02 00 00       	call   c0025ed5 <__eqsf2>
c0025c0e:	83 c4 10             	add    esp,0x10
c0025c11:	85 c0                	test   eax,eax
c0025c13:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025c16:	75 16                	jne    c0025c2e <__divsf3+0x162>
c0025c18:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025c1b:	31 fb                	xor    ebx,edi
c0025c1d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025c23:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025c29:	e9 bf 00 00 00       	jmp    c0025ced <__divsf3+0x221>
c0025c2e:	8d 46 01             	lea    eax,[esi+0x1]
c0025c31:	01 db                	add    ebx,ebx
c0025c33:	78 04                	js     c0025c39 <__divsf3+0x16d>
c0025c35:	89 c6                	mov    esi,eax
c0025c37:	eb f5                	jmp    c0025c2e <__divsf3+0x162>
c0025c39:	89 c8                	mov    eax,ecx
c0025c3b:	0d 00 00 00 80       	or     eax,0x80000000
c0025c40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c46:	31 d2                	xor    edx,edx
c0025c48:	39 d8                	cmp    eax,ebx
c0025c4a:	72 07                	jb     c0025c53 <__divsf3+0x187>
c0025c4c:	29 d8                	sub    eax,ebx
c0025c4e:	ba 01 00 00 00       	mov    edx,0x1
c0025c53:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c5a:	01 d2                	add    edx,edx
c0025c5c:	89 c1                	mov    ecx,eax
c0025c5e:	01 c0                	add    eax,eax
c0025c60:	85 c9                	test   ecx,ecx
c0025c62:	78 04                	js     c0025c68 <__divsf3+0x19c>
c0025c64:	39 c3                	cmp    ebx,eax
c0025c66:	77 05                	ja     c0025c6d <__divsf3+0x1a1>
c0025c68:	29 d8                	sub    eax,ebx
c0025c6a:	83 ca 01             	or     edx,0x1
c0025c6d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c70:	75 e8                	jne    c0025c5a <__divsf3+0x18e>
c0025c72:	85 c0                	test   eax,eax
c0025c74:	0f 95 c0             	setne  al
c0025c77:	0f b6 c0             	movzx  eax,al
c0025c7a:	c1 e2 06             	shl    edx,0x6
c0025c7d:	09 c2                	or     edx,eax
c0025c7f:	78 03                	js     c0025c84 <__divsf3+0x1b8>
c0025c81:	01 d2                	add    edx,edx
c0025c83:	4e                   	dec    esi
c0025c84:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025c8a:	7f 22                	jg     c0025cae <__divsf3+0x1e2>
c0025c8c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c92:	85 f6                	test   esi,esi
c0025c94:	7f 23                	jg     c0025cb9 <__divsf3+0x1ed>
c0025c96:	83 fe e9             	cmp    esi,0xffffffe9
c0025c99:	7c 1a                	jl     c0025cb5 <__divsf3+0x1e9>
c0025c9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ca1:	b9 01 00 00 00       	mov    ecx,0x1
c0025ca6:	29 f1                	sub    ecx,esi
c0025ca8:	d3 ea                	shr    edx,cl
c0025caa:	31 f6                	xor    esi,esi
c0025cac:	eb 0b                	jmp    c0025cb9 <__divsf3+0x1ed>
c0025cae:	be ff 00 00 00       	mov    esi,0xff
c0025cb3:	eb 02                	jmp    c0025cb7 <__divsf3+0x1eb>
c0025cb5:	31 f6                	xor    esi,esi
c0025cb7:	31 d2                	xor    edx,edx
c0025cb9:	89 d0                	mov    eax,edx
c0025cbb:	c1 e8 08             	shr    eax,0x8
c0025cbe:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025cc1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025cc7:	09 fe                	or     esi,edi
c0025cc9:	c1 e6 17             	shl    esi,0x17
c0025ccc:	09 c6                	or     esi,eax
c0025cce:	f6 c2 7f             	test   dl,0x7f
c0025cd1:	0f 95 c1             	setne  cl
c0025cd4:	09 c8                	or     eax,ecx
c0025cd6:	83 e0 01             	and    eax,0x1
c0025cd9:	c1 ea 07             	shr    edx,0x7
c0025cdc:	21 c2                	and    edx,eax
c0025cde:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025ce1:	eb 0a                	jmp    c0025ced <__divsf3+0x221>
c0025ce3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025ce8:	eb 03                	jmp    c0025ced <__divsf3+0x221>
c0025cea:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025ced:	89 d8                	mov    eax,ebx
c0025cef:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cf2:	5b                   	pop    ebx
c0025cf3:	5e                   	pop    esi
c0025cf4:	5f                   	pop    edi
c0025cf5:	5d                   	pop    ebp
c0025cf6:	c3                   	ret    

c0025cf7 <__floatsisf>:
c0025cf7:	55                   	push   ebp
c0025cf8:	89 e5                	mov    ebp,esp
c0025cfa:	53                   	push   ebx
c0025cfb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025cfe:	85 d2                	test   edx,edx
c0025d00:	7e 2b                	jle    c0025d2d <__floatsisf+0x36>
c0025d02:	0f bd ca             	bsr    ecx,edx
c0025d05:	83 f1 1f             	xor    ecx,0x1f
c0025d08:	d3 e2                	shl    edx,cl
c0025d0a:	89 d0                	mov    eax,edx
c0025d0c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d11:	89 c3                	mov    ebx,eax
c0025d13:	c1 eb 08             	shr    ebx,0x8
c0025d16:	80 e2 7f             	and    dl,0x7f
c0025d19:	0f 95 c2             	setne  dl
c0025d1c:	09 da                	or     edx,ebx
c0025d1e:	83 e2 01             	and    edx,0x1
c0025d21:	c1 e8 07             	shr    eax,0x7
c0025d24:	21 c2                	and    edx,eax
c0025d26:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d2b:	eb 32                	jmp    c0025d5f <__floatsisf+0x68>
c0025d2d:	b8 00 00 00 00       	mov    eax,0x0
c0025d32:	74 34                	je     c0025d68 <__floatsisf+0x71>
c0025d34:	f7 da                	neg    edx
c0025d36:	0f bd ca             	bsr    ecx,edx
c0025d39:	83 f1 1f             	xor    ecx,0x1f
c0025d3c:	d3 e2                	shl    edx,cl
c0025d3e:	89 d0                	mov    eax,edx
c0025d40:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d45:	89 c3                	mov    ebx,eax
c0025d47:	c1 eb 08             	shr    ebx,0x8
c0025d4a:	80 e2 7f             	and    dl,0x7f
c0025d4d:	0f 95 c2             	setne  dl
c0025d50:	09 da                	or     edx,ebx
c0025d52:	83 e2 01             	and    edx,0x1
c0025d55:	c1 e8 07             	shr    eax,0x7
c0025d58:	21 c2                	and    edx,eax
c0025d5a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d5f:	29 c8                	sub    eax,ecx
c0025d61:	c1 e0 17             	shl    eax,0x17
c0025d64:	09 d8                	or     eax,ebx
c0025d66:	01 d0                	add    eax,edx
c0025d68:	5b                   	pop    ebx
c0025d69:	5d                   	pop    ebp
c0025d6a:	c3                   	ret    

c0025d6b <__floatunsisf>:
c0025d6b:	55                   	push   ebp
c0025d6c:	89 e5                	mov    ebp,esp
c0025d6e:	53                   	push   ebx
c0025d6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d72:	31 c0                	xor    eax,eax
c0025d74:	85 d2                	test   edx,edx
c0025d76:	74 32                	je     c0025daa <__floatunsisf+0x3f>
c0025d78:	0f bd ca             	bsr    ecx,edx
c0025d7b:	83 f1 1f             	xor    ecx,0x1f
c0025d7e:	d3 e2                	shl    edx,cl
c0025d80:	89 d0                	mov    eax,edx
c0025d82:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d87:	89 c3                	mov    ebx,eax
c0025d89:	c1 eb 08             	shr    ebx,0x8
c0025d8c:	80 e2 7f             	and    dl,0x7f
c0025d8f:	0f 95 c2             	setne  dl
c0025d92:	09 da                	or     edx,ebx
c0025d94:	83 e2 01             	and    edx,0x1
c0025d97:	c1 e8 07             	shr    eax,0x7
c0025d9a:	21 c2                	and    edx,eax
c0025d9c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025da1:	29 c8                	sub    eax,ecx
c0025da3:	c1 e0 17             	shl    eax,0x17
c0025da6:	09 d8                	or     eax,ebx
c0025da8:	01 d0                	add    eax,edx
c0025daa:	5b                   	pop    ebx
c0025dab:	5d                   	pop    ebp
c0025dac:	c3                   	ret    

c0025dad <__fixsfsi>:
c0025dad:	55                   	push   ebp
c0025dae:	89 e5                	mov    ebp,esp
c0025db0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025db3:	89 d1                	mov    ecx,edx
c0025db5:	c1 e1 08             	shl    ecx,0x8
c0025db8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025dbe:	c1 fa 17             	sar    edx,0x17
c0025dc1:	78 1c                	js     c0025ddf <__fixsfsi+0x32>
c0025dc3:	83 ea 7f             	sub    edx,0x7f
c0025dc6:	31 c0                	xor    eax,eax
c0025dc8:	83 fa 1e             	cmp    edx,0x1e
c0025dcb:	77 40                	ja     c0025e0d <__fixsfsi+0x60>
c0025dcd:	89 c8                	mov    eax,ecx
c0025dcf:	0d 00 00 00 80       	or     eax,0x80000000
c0025dd4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025dd9:	29 d1                	sub    ecx,edx
c0025ddb:	d3 e8                	shr    eax,cl
c0025ddd:	eb 2e                	jmp    c0025e0d <__fixsfsi+0x60>
c0025ddf:	31 c0                	xor    eax,eax
c0025de1:	81 c2 81 00 00 00    	add    edx,0x81
c0025de7:	78 24                	js     c0025e0d <__fixsfsi+0x60>
c0025de9:	83 fa 1e             	cmp    edx,0x1e
c0025dec:	7e 09                	jle    c0025df7 <__fixsfsi+0x4a>
c0025dee:	83 fa 1f             	cmp    edx,0x1f
c0025df1:	75 18                	jne    c0025e0b <__fixsfsi+0x5e>
c0025df3:	85 c9                	test   ecx,ecx
c0025df5:	75 14                	jne    c0025e0b <__fixsfsi+0x5e>
c0025df7:	89 c8                	mov    eax,ecx
c0025df9:	0d 00 00 00 80       	or     eax,0x80000000
c0025dfe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e03:	29 d1                	sub    ecx,edx
c0025e05:	d3 e8                	shr    eax,cl
c0025e07:	f7 d8                	neg    eax
c0025e09:	eb 02                	jmp    c0025e0d <__fixsfsi+0x60>
c0025e0b:	31 c0                	xor    eax,eax
c0025e0d:	5d                   	pop    ebp
c0025e0e:	c3                   	ret    

c0025e0f <__fixunssfsi>:
c0025e0f:	55                   	push   ebp
c0025e10:	89 e5                	mov    ebp,esp
c0025e12:	53                   	push   ebx
c0025e13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e16:	89 d3                	mov    ebx,edx
c0025e18:	c1 fb 17             	sar    ebx,0x17
c0025e1b:	83 eb 7f             	sub    ebx,0x7f
c0025e1e:	31 c0                	xor    eax,eax
c0025e20:	83 fb 1f             	cmp    ebx,0x1f
c0025e23:	77 18                	ja     c0025e3d <__fixunssfsi+0x2e>
c0025e25:	89 d0                	mov    eax,edx
c0025e27:	c1 e0 08             	shl    eax,0x8
c0025e2a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e2f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e34:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e39:	29 d9                	sub    ecx,ebx
c0025e3b:	d3 e8                	shr    eax,cl
c0025e3d:	5b                   	pop    ebx
c0025e3e:	5d                   	pop    ebp
c0025e3f:	c3                   	ret    

c0025e40 <__cmpsf2>:
c0025e40:	55                   	push   ebp
c0025e41:	89 e5                	mov    ebp,esp
c0025e43:	57                   	push   edi
c0025e44:	56                   	push   esi
c0025e45:	53                   	push   ebx
c0025e46:	83 ec 24             	sub    esp,0x24
c0025e49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e4f:	e8 4f 10 00 00       	call   c0026ea3 <__truncdfsf2>
c0025e54:	5a                   	pop    edx
c0025e55:	59                   	pop    ecx
c0025e56:	89 c3                	mov    ebx,eax
c0025e58:	c1 e8 17             	shr    eax,0x17
c0025e5b:	0f b6 f0             	movzx  esi,al
c0025e5e:	89 d8                	mov    eax,ebx
c0025e60:	c1 e8 1f             	shr    eax,0x1f
c0025e63:	31 c6                	xor    esi,eax
c0025e65:	c1 e3 08             	shl    ebx,0x8
c0025e68:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e6b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e6e:	e8 30 10 00 00       	call   c0026ea3 <__truncdfsf2>
c0025e73:	83 c4 10             	add    esp,0x10
c0025e76:	89 c1                	mov    ecx,eax
c0025e78:	c1 e9 17             	shr    ecx,0x17
c0025e7b:	0f b6 c9             	movzx  ecx,cl
c0025e7e:	89 c7                	mov    edi,eax
c0025e80:	c1 ef 1f             	shr    edi,0x1f
c0025e83:	89 ca                	mov    edx,ecx
c0025e85:	31 fa                	xor    edx,edi
c0025e87:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025e8a:	c1 e0 08             	shl    eax,0x8
c0025e8d:	89 c2                	mov    edx,eax
c0025e8f:	89 d8                	mov    eax,ebx
c0025e91:	09 d0                	or     eax,edx
c0025e93:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e98:	09 f0                	or     eax,esi
c0025e9a:	75 08                	jne    c0025ea4 <__cmpsf2+0x64>
c0025e9c:	31 c0                	xor    eax,eax
c0025e9e:	39 f9                	cmp    ecx,edi
c0025ea0:	75 0c                	jne    c0025eae <__cmpsf2+0x6e>
c0025ea2:	eb 29                	jmp    c0025ecd <__cmpsf2+0x8d>
c0025ea4:	b8 01 00 00 00       	mov    eax,0x1
c0025ea9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025eac:	7f 1f                	jg     c0025ecd <__cmpsf2+0x8d>
c0025eae:	83 c8 ff             	or     eax,0xffffffff
c0025eb1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025eb4:	7c 17                	jl     c0025ecd <__cmpsf2+0x8d>
c0025eb6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ebc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025ec2:	b8 01 00 00 00       	mov    eax,0x1
c0025ec7:	39 d3                	cmp    ebx,edx
c0025ec9:	77 02                	ja     c0025ecd <__cmpsf2+0x8d>
c0025ecb:	19 c0                	sbb    eax,eax
c0025ecd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ed0:	5b                   	pop    ebx
c0025ed1:	5e                   	pop    esi
c0025ed2:	5f                   	pop    edi
c0025ed3:	5d                   	pop    ebp
c0025ed4:	c3                   	ret    

c0025ed5 <__eqsf2>:
c0025ed5:	55                   	push   ebp
c0025ed6:	89 e5                	mov    ebp,esp
c0025ed8:	83 ec 24             	sub    esp,0x24
c0025edb:	6a 01                	push   0x1
c0025edd:	83 ec 0c             	sub    esp,0xc
c0025ee0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ee3:	e8 df 10 00 00       	call   c0026fc7 <__extendsfdf2>
c0025ee8:	83 c4 10             	add    esp,0x10
c0025eeb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025eee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ef1:	52                   	push   edx
c0025ef2:	50                   	push   eax
c0025ef3:	50                   	push   eax
c0025ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ef7:	e8 cb 10 00 00       	call   c0026fc7 <__extendsfdf2>
c0025efc:	59                   	pop    ecx
c0025efd:	59                   	pop    ecx
c0025efe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f01:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f04:	52                   	push   edx
c0025f05:	50                   	push   eax
c0025f06:	e8 35 ff ff ff       	call   c0025e40 <__cmpsf2>
c0025f0b:	83 c4 20             	add    esp,0x20
c0025f0e:	c9                   	leave  
c0025f0f:	c3                   	ret    

c0025f10 <__nesf2>:
c0025f10:	eb c3                	jmp    c0025ed5 <__eqsf2>

c0025f12 <__gtsf2>:
c0025f12:	55                   	push   ebp
c0025f13:	89 e5                	mov    ebp,esp
c0025f15:	83 ec 24             	sub    esp,0x24
c0025f18:	6a ff                	push   0xffffffff
c0025f1a:	83 ec 0c             	sub    esp,0xc
c0025f1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f20:	e8 a2 10 00 00       	call   c0026fc7 <__extendsfdf2>
c0025f25:	83 c4 10             	add    esp,0x10
c0025f28:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f2b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f2e:	52                   	push   edx
c0025f2f:	50                   	push   eax
c0025f30:	50                   	push   eax
c0025f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f34:	e8 8e 10 00 00       	call   c0026fc7 <__extendsfdf2>
c0025f39:	59                   	pop    ecx
c0025f3a:	59                   	pop    ecx
c0025f3b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f3e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f41:	52                   	push   edx
c0025f42:	50                   	push   eax
c0025f43:	e8 f8 fe ff ff       	call   c0025e40 <__cmpsf2>
c0025f48:	83 c4 20             	add    esp,0x20
c0025f4b:	c9                   	leave  
c0025f4c:	c3                   	ret    

c0025f4d <__gesf2>:
c0025f4d:	eb c3                	jmp    c0025f12 <__gtsf2>

c0025f4f <__ltsf2>:
c0025f4f:	eb 84                	jmp    c0025ed5 <__eqsf2>

c0025f51 <__lesf2>:
c0025f51:	eb 82                	jmp    c0025ed5 <__eqsf2>

c0025f53 <__adddf3>:
c0025f53:	55                   	push   ebp
c0025f54:	89 e5                	mov    ebp,esp
c0025f56:	57                   	push   edi
c0025f57:	56                   	push   esi
c0025f58:	53                   	push   ebx
c0025f59:	83 ec 24             	sub    esp,0x24
c0025f5c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f5f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f68:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f6b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f6e:	89 c8                	mov    eax,ecx
c0025f70:	89 ce                	mov    esi,ecx
c0025f72:	c1 fe 14             	sar    esi,0x14
c0025f75:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f78:	89 fb                	mov    ebx,edi
c0025f7a:	89 fa                	mov    edx,edi
c0025f7c:	c1 e2 0b             	shl    edx,0xb
c0025f7f:	c1 e0 0b             	shl    eax,0xb
c0025f82:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025f87:	c1 eb 15             	shr    ebx,0x15
c0025f8a:	09 d8                	or     eax,ebx
c0025f8c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025f8f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025f92:	c1 fe 14             	sar    esi,0x14
c0025f95:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025f98:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025f9b:	89 f3                	mov    ebx,esi
c0025f9d:	c1 e3 0b             	shl    ebx,0xb
c0025fa0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025fa3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025fa6:	c1 e3 0b             	shl    ebx,0xb
c0025fa9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025faf:	c1 ee 15             	shr    esi,0x15
c0025fb2:	09 f3                	or     ebx,esi
c0025fb4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025fb7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fba:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025fbd:	0f 88 5f 02 00 00    	js     c0026222 <__adddf3+0x2cf>
c0025fc3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025fc6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025fc9:	85 db                	test   ebx,ebx
c0025fcb:	0f 8e c7 00 00 00    	jle    c0026098 <__adddf3+0x145>
c0025fd1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025fd8:	75 1a                	jne    c0025ff4 <__adddf3+0xa1>
c0025fda:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025fdd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025fe0:	0f 84 b2 05 00 00    	je     c0026598 <__adddf3+0x645>
c0025fe6:	4b                   	dec    ebx
c0025fe7:	75 23                	jne    c002600c <__adddf3+0xb9>
c0025fe9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025fec:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025fef:	e9 99 00 00 00       	jmp    c002608d <__adddf3+0x13a>
c0025ff4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025ff7:	f7 d6                	not    esi
c0025ff9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fff:	0f 84 93 05 00 00    	je     c0026598 <__adddf3+0x645>
c0026005:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002600c:	83 fb 1f             	cmp    ebx,0x1f
c002600f:	7e 42                	jle    c0026053 <__adddf3+0x100>
c0026011:	83 fb 3f             	cmp    ebx,0x3f
c0026014:	0f 8f 7e 05 00 00    	jg     c0026598 <__adddf3+0x645>
c002601a:	83 e3 1f             	and    ebx,0x1f
c002601d:	89 d9                	mov    ecx,ebx
c002601f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026022:	d3 ef                	shr    edi,cl
c0026024:	31 db                	xor    ebx,ebx
c0026026:	85 c9                	test   ecx,ecx
c0026028:	74 15                	je     c002603f <__adddf3+0xec>
c002602a:	be 20 00 00 00       	mov    esi,0x20
c002602f:	29 ce                	sub    esi,ecx
c0026031:	89 f1                	mov    ecx,esi
c0026033:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026036:	d3 e6                	shl    esi,cl
c0026038:	31 db                	xor    ebx,ebx
c002603a:	85 f6                	test   esi,esi
c002603c:	0f 95 c3             	setne  bl
c002603f:	31 c9                	xor    ecx,ecx
c0026041:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026045:	0f 95 c1             	setne  cl
c0026048:	09 cf                	or     edi,ecx
c002604a:	09 fb                	or     ebx,edi
c002604c:	01 da                	add    edx,ebx
c002604e:	83 d0 00             	adc    eax,0x0
c0026051:	eb 3a                	jmp    c002608d <__adddf3+0x13a>
c0026053:	bf 20 00 00 00       	mov    edi,0x20
c0026058:	29 df                	sub    edi,ebx
c002605a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002605d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026060:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026063:	d3 e6                	shl    esi,cl
c0026065:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026068:	88 d9                	mov    cl,bl
c002606a:	d3 ef                	shr    edi,cl
c002606c:	09 fe                	or     esi,edi
c002606e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026071:	88 d9                	mov    cl,bl
c0026073:	d3 ef                	shr    edi,cl
c0026075:	89 fb                	mov    ebx,edi
c0026077:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002607a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002607d:	d3 e7                	shl    edi,cl
c002607f:	85 ff                	test   edi,edi
c0026081:	0f 95 c1             	setne  cl
c0026084:	0f b6 c9             	movzx  ecx,cl
c0026087:	09 ce                	or     esi,ecx
c0026089:	01 f2                	add    edx,esi
c002608b:	11 d8                	adc    eax,ebx
c002608d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026090:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026093:	e9 52 01 00 00       	jmp    c00261ea <__adddf3+0x297>
c0026098:	0f 84 d5 00 00 00    	je     c0026173 <__adddf3+0x220>
c002609e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00260a1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00260a4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260aa:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00260b1:	75 20                	jne    c00260d3 <__adddf3+0x180>
c00260b3:	89 d6                	mov    esi,edx
c00260b5:	09 c6                	or     esi,eax
c00260b7:	0f 84 db 04 00 00    	je     c0026598 <__adddf3+0x645>
c00260bd:	4b                   	dec    ebx
c00260be:	75 29                	jne    c00260e9 <__adddf3+0x196>
c00260c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00260c6:	01 d1                	add    ecx,edx
c00260c8:	11 c6                	adc    esi,eax
c00260ca:	89 f0                	mov    eax,esi
c00260cc:	89 ca                	mov    edx,ecx
c00260ce:	e9 17 01 00 00       	jmp    c00261ea <__adddf3+0x297>
c00260d3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00260d6:	f7 d6                	not    esi
c00260d8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00260de:	0f 84 b4 04 00 00    	je     c0026598 <__adddf3+0x645>
c00260e4:	0d 00 00 00 80       	or     eax,0x80000000
c00260e9:	83 fb 1f             	cmp    ebx,0x1f
c00260ec:	7e 48                	jle    c0026136 <__adddf3+0x1e3>
c00260ee:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260f1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260f4:	83 fb 3f             	cmp    ebx,0x3f
c00260f7:	0f 8f 9b 04 00 00    	jg     c0026598 <__adddf3+0x645>
c00260fd:	83 e3 1f             	and    ebx,0x1f
c0026100:	89 d9                	mov    ecx,ebx
c0026102:	89 c7                	mov    edi,eax
c0026104:	d3 ef                	shr    edi,cl
c0026106:	31 db                	xor    ebx,ebx
c0026108:	85 c9                	test   ecx,ecx
c002610a:	74 12                	je     c002611e <__adddf3+0x1cb>
c002610c:	be 20 00 00 00       	mov    esi,0x20
c0026111:	29 ce                	sub    esi,ecx
c0026113:	89 f1                	mov    ecx,esi
c0026115:	d3 e0                	shl    eax,cl
c0026117:	31 db                	xor    ebx,ebx
c0026119:	85 c0                	test   eax,eax
c002611b:	0f 95 c3             	setne  bl
c002611e:	31 c0                	xor    eax,eax
c0026120:	85 d2                	test   edx,edx
c0026122:	0f 95 c0             	setne  al
c0026125:	09 c7                	or     edi,eax
c0026127:	09 fb                	or     ebx,edi
c0026129:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002612c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002612f:	01 da                	add    edx,ebx
c0026131:	83 d6 00             	adc    esi,0x0
c0026134:	eb 39                	jmp    c002616f <__adddf3+0x21c>
c0026136:	be 20 00 00 00       	mov    esi,0x20
c002613b:	29 de                	sub    esi,ebx
c002613d:	89 c7                	mov    edi,eax
c002613f:	89 f1                	mov    ecx,esi
c0026141:	d3 e7                	shl    edi,cl
c0026143:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026146:	89 d7                	mov    edi,edx
c0026148:	88 d9                	mov    cl,bl
c002614a:	d3 ef                	shr    edi,cl
c002614c:	89 f9                	mov    ecx,edi
c002614e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026151:	09 cf                	or     edi,ecx
c0026153:	88 d9                	mov    cl,bl
c0026155:	d3 e8                	shr    eax,cl
c0026157:	89 f1                	mov    ecx,esi
c0026159:	d3 e2                	shl    edx,cl
c002615b:	85 d2                	test   edx,edx
c002615d:	0f 95 c2             	setne  dl
c0026160:	0f b6 d2             	movzx  edx,dl
c0026163:	09 d7                	or     edi,edx
c0026165:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026168:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002616b:	01 fa                	add    edx,edi
c002616d:	11 c6                	adc    esi,eax
c002616f:	89 f0                	mov    eax,esi
c0026171:	eb 77                	jmp    c00261ea <__adddf3+0x297>
c0026173:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026176:	46                   	inc    esi
c0026177:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002617a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026180:	75 41                	jne    c00261c3 <__adddf3+0x270>
c0026182:	89 d3                	mov    ebx,edx
c0026184:	09 c3                	or     ebx,eax
c0026186:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002618d:	75 27                	jne    c00261b6 <__adddf3+0x263>
c002618f:	85 db                	test   ebx,ebx
c0026191:	0f 84 fb 03 00 00    	je     c0026592 <__adddf3+0x63f>
c0026197:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002619a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002619d:	0f 84 f5 03 00 00    	je     c0026598 <__adddf3+0x645>
c00261a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261a9:	85 c0                	test   eax,eax
c00261ab:	0f 89 91 03 00 00    	jns    c0026542 <__adddf3+0x5ef>
c00261b1:	e9 85 03 00 00       	jmp    c002653b <__adddf3+0x5e8>
c00261b6:	85 db                	test   ebx,ebx
c00261b8:	0f 85 da 03 00 00    	jne    c0026598 <__adddf3+0x645>
c00261be:	e9 cf 03 00 00       	jmp    c0026592 <__adddf3+0x63f>
c00261c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261cc:	f7 d1                	not    ecx
c00261ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261d4:	0f 84 70 03 00 00    	je     c002654a <__adddf3+0x5f7>
c00261da:	d1 ea                	shr    edx,1
c00261dc:	89 c1                	mov    ecx,eax
c00261de:	c1 e1 1f             	shl    ecx,0x1f
c00261e1:	09 ca                	or     edx,ecx
c00261e3:	d1 e8                	shr    eax,1
c00261e5:	e9 6f 03 00 00       	jmp    c0026559 <__adddf3+0x606>
c00261ea:	85 c0                	test   eax,eax
c00261ec:	0f 89 67 03 00 00    	jns    c0026559 <__adddf3+0x606>
c00261f2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00261f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261f8:	f7 d1                	not    ecx
c00261fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026200:	0f 84 44 03 00 00    	je     c002654a <__adddf3+0x5f7>
c0026206:	89 d1                	mov    ecx,edx
c0026208:	d1 e9                	shr    ecx,1
c002620a:	83 e2 01             	and    edx,0x1
c002620d:	09 ca                	or     edx,ecx
c002620f:	89 c1                	mov    ecx,eax
c0026211:	c1 e1 1f             	shl    ecx,0x1f
c0026214:	09 ca                	or     edx,ecx
c0026216:	d1 e8                	shr    eax,1
c0026218:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002621d:	e9 37 03 00 00       	jmp    c0026559 <__adddf3+0x606>
c0026222:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026225:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002622b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002622e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026231:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026237:	29 de                	sub    esi,ebx
c0026239:	85 f6                	test   esi,esi
c002623b:	0f 8e bd 00 00 00    	jle    c00262fe <__adddf3+0x3ab>
c0026241:	85 db                	test   ebx,ebx
c0026243:	75 17                	jne    c002625c <__adddf3+0x309>
c0026245:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026248:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002624b:	0f 84 47 03 00 00    	je     c0026598 <__adddf3+0x645>
c0026251:	4e                   	dec    esi
c0026252:	75 20                	jne    c0026274 <__adddf3+0x321>
c0026254:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026257:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002625a:	eb 5b                	jmp    c00262b7 <__adddf3+0x364>
c002625c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002625f:	f7 d3                	not    ebx
c0026261:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026267:	0f 84 2b 03 00 00    	je     c0026598 <__adddf3+0x645>
c002626d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026274:	83 fe 1f             	cmp    esi,0x1f
c0026277:	7e 49                	jle    c00262c2 <__adddf3+0x36f>
c0026279:	83 fe 3f             	cmp    esi,0x3f
c002627c:	0f 8f 16 03 00 00    	jg     c0026598 <__adddf3+0x645>
c0026282:	83 e6 1f             	and    esi,0x1f
c0026285:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026288:	89 f1                	mov    ecx,esi
c002628a:	d3 ef                	shr    edi,cl
c002628c:	31 db                	xor    ebx,ebx
c002628e:	85 f6                	test   esi,esi
c0026290:	74 13                	je     c00262a5 <__adddf3+0x352>
c0026292:	b9 20 00 00 00       	mov    ecx,0x20
c0026297:	29 f1                	sub    ecx,esi
c0026299:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002629c:	d3 e6                	shl    esi,cl
c002629e:	31 db                	xor    ebx,ebx
c00262a0:	85 f6                	test   esi,esi
c00262a2:	0f 95 c3             	setne  bl
c00262a5:	31 c9                	xor    ecx,ecx
c00262a7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00262ab:	0f 95 c1             	setne  cl
c00262ae:	09 cf                	or     edi,ecx
c00262b0:	09 fb                	or     ebx,edi
c00262b2:	29 da                	sub    edx,ebx
c00262b4:	83 d8 00             	sbb    eax,0x0
c00262b7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262bd:	e9 aa 01 00 00       	jmp    c002646c <__adddf3+0x519>
c00262c2:	bf 20 00 00 00       	mov    edi,0x20
c00262c7:	29 f7                	sub    edi,esi
c00262c9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262cc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00262cf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262d2:	d3 e3                	shl    ebx,cl
c00262d4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262d7:	89 f1                	mov    ecx,esi
c00262d9:	d3 ef                	shr    edi,cl
c00262db:	09 fb                	or     ebx,edi
c00262dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262e0:	89 f1                	mov    ecx,esi
c00262e2:	d3 ef                	shr    edi,cl
c00262e4:	89 fe                	mov    esi,edi
c00262e6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262e9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262ec:	d3 e7                	shl    edi,cl
c00262ee:	85 ff                	test   edi,edi
c00262f0:	0f 95 c1             	setne  cl
c00262f3:	0f b6 c9             	movzx  ecx,cl
c00262f6:	09 cb                	or     ebx,ecx
c00262f8:	29 da                	sub    edx,ebx
c00262fa:	19 f0                	sbb    eax,esi
c00262fc:	eb b9                	jmp    c00262b7 <__adddf3+0x364>
c00262fe:	0f 84 cd 00 00 00    	je     c00263d1 <__adddf3+0x47e>
c0026304:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026307:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002630a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002630d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026311:	75 1b                	jne    c002632e <__adddf3+0x3db>
c0026313:	89 d6                	mov    esi,edx
c0026315:	09 c6                	or     esi,eax
c0026317:	0f 84 7b 02 00 00    	je     c0026598 <__adddf3+0x645>
c002631d:	4b                   	dec    ebx
c002631e:	75 24                	jne    c0026344 <__adddf3+0x3f1>
c0026320:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026323:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026326:	29 d1                	sub    ecx,edx
c0026328:	19 c6                	sbb    esi,eax
c002632a:	89 ca                	mov    edx,ecx
c002632c:	eb 61                	jmp    c002638f <__adddf3+0x43c>
c002632e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026331:	f7 d6                	not    esi
c0026333:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026339:	0f 84 59 02 00 00    	je     c0026598 <__adddf3+0x645>
c002633f:	0d 00 00 00 80       	or     eax,0x80000000
c0026344:	83 fb 1f             	cmp    ebx,0x1f
c0026347:	7e 4d                	jle    c0026396 <__adddf3+0x443>
c0026349:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002634c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002634f:	83 fb 3f             	cmp    ebx,0x3f
c0026352:	0f 8f 40 02 00 00    	jg     c0026598 <__adddf3+0x645>
c0026358:	83 e3 1f             	and    ebx,0x1f
c002635b:	89 d9                	mov    ecx,ebx
c002635d:	89 c7                	mov    edi,eax
c002635f:	d3 ef                	shr    edi,cl
c0026361:	31 db                	xor    ebx,ebx
c0026363:	85 c9                	test   ecx,ecx
c0026365:	74 12                	je     c0026379 <__adddf3+0x426>
c0026367:	be 20 00 00 00       	mov    esi,0x20
c002636c:	29 ce                	sub    esi,ecx
c002636e:	89 f1                	mov    ecx,esi
c0026370:	d3 e0                	shl    eax,cl
c0026372:	31 db                	xor    ebx,ebx
c0026374:	85 c0                	test   eax,eax
c0026376:	0f 95 c3             	setne  bl
c0026379:	31 c0                	xor    eax,eax
c002637b:	85 d2                	test   edx,edx
c002637d:	0f 95 c0             	setne  al
c0026380:	09 c7                	or     edi,eax
c0026382:	09 fb                	or     ebx,edi
c0026384:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026387:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002638a:	29 da                	sub    edx,ebx
c002638c:	83 de 00             	sbb    esi,0x0
c002638f:	89 f0                	mov    eax,esi
c0026391:	e9 d6 00 00 00       	jmp    c002646c <__adddf3+0x519>
c0026396:	be 20 00 00 00       	mov    esi,0x20
c002639b:	29 de                	sub    esi,ebx
c002639d:	89 c7                	mov    edi,eax
c002639f:	89 f1                	mov    ecx,esi
c00263a1:	d3 e7                	shl    edi,cl
c00263a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00263a6:	89 d7                	mov    edi,edx
c00263a8:	88 d9                	mov    cl,bl
c00263aa:	d3 ef                	shr    edi,cl
c00263ac:	89 f9                	mov    ecx,edi
c00263ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263b1:	09 cf                	or     edi,ecx
c00263b3:	88 d9                	mov    cl,bl
c00263b5:	d3 e8                	shr    eax,cl
c00263b7:	89 f1                	mov    ecx,esi
c00263b9:	d3 e2                	shl    edx,cl
c00263bb:	85 d2                	test   edx,edx
c00263bd:	0f 95 c2             	setne  dl
c00263c0:	0f b6 d2             	movzx  edx,dl
c00263c3:	09 d7                	or     edi,edx
c00263c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263cb:	29 fa                	sub    edx,edi
c00263cd:	19 c6                	sbb    esi,eax
c00263cf:	eb be                	jmp    c002638f <__adddf3+0x43c>
c00263d1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00263d7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00263dd:	75 6a                	jne    c0026449 <__adddf3+0x4f6>
c00263df:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00263e3:	75 58                	jne    c002643d <__adddf3+0x4ea>
c00263e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00263eb:	89 d6                	mov    esi,edx
c00263ed:	09 c6                	or     esi,eax
c00263ef:	75 17                	jne    c0026408 <__adddf3+0x4b5>
c00263f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263f7:	85 db                	test   ebx,ebx
c00263f9:	0f 85 99 01 00 00    	jne    c0026598 <__adddf3+0x645>
c00263ff:	31 ff                	xor    edi,edi
c0026401:	31 c9                	xor    ecx,ecx
c0026403:	e9 90 01 00 00       	jmp    c0026598 <__adddf3+0x645>
c0026408:	85 db                	test   ebx,ebx
c002640a:	0f 84 88 01 00 00    	je     c0026598 <__adddf3+0x645>
c0026410:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026413:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026416:	85 c0                	test   eax,eax
c0026418:	79 10                	jns    c002642a <__adddf3+0x4d7>
c002641a:	31 c9                	xor    ecx,ecx
c002641c:	f7 da                	neg    edx
c002641e:	0f 95 c1             	setne  cl
c0026421:	01 c8                	add    eax,ecx
c0026423:	f7 d8                	neg    eax
c0026425:	e9 2f 01 00 00       	jmp    c0026559 <__adddf3+0x606>
c002642a:	31 ff                	xor    edi,edi
c002642c:	31 c9                	xor    ecx,ecx
c002642e:	89 c3                	mov    ebx,eax
c0026430:	09 d3                	or     ebx,edx
c0026432:	0f 84 60 01 00 00    	je     c0026598 <__adddf3+0x645>
c0026438:	e9 05 01 00 00       	jmp    c0026542 <__adddf3+0x5ef>
c002643d:	31 ff                	xor    edi,edi
c002643f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026444:	e9 4f 01 00 00       	jmp    c0026598 <__adddf3+0x645>
c0026449:	89 c1                	mov    ecx,eax
c002644b:	89 d0                	mov    eax,edx
c002644d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026450:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026453:	89 ca                	mov    edx,ecx
c0026455:	85 c9                	test   ecx,ecx
c0026457:	79 2c                	jns    c0026485 <__adddf3+0x532>
c0026459:	31 c9                	xor    ecx,ecx
c002645b:	f7 d8                	neg    eax
c002645d:	0f 95 c1             	setne  cl
c0026460:	01 ca                	add    edx,ecx
c0026462:	f7 da                	neg    edx
c0026464:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026467:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002646a:	eb 19                	jmp    c0026485 <__adddf3+0x532>
c002646c:	85 c0                	test   eax,eax
c002646e:	0f 89 e5 00 00 00    	jns    c0026559 <__adddf3+0x606>
c0026474:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026479:	89 c1                	mov    ecx,eax
c002647b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002647e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026481:	89 d0                	mov    eax,edx
c0026483:	89 ca                	mov    edx,ecx
c0026485:	85 d2                	test   edx,edx
c0026487:	74 59                	je     c00264e2 <__adddf3+0x58f>
c0026489:	0f bd da             	bsr    ebx,edx
c002648c:	83 f3 1f             	xor    ebx,0x1f
c002648f:	88 d9                	mov    cl,bl
c0026491:	d3 e2                	shl    edx,cl
c0026493:	bf 20 00 00 00       	mov    edi,0x20
c0026498:	89 f9                	mov    ecx,edi
c002649a:	29 d9                	sub    ecx,ebx
c002649c:	89 c6                	mov    esi,eax
c002649e:	d3 ee                	shr    esi,cl
c00264a0:	09 d6                	or     esi,edx
c00264a2:	88 d9                	mov    cl,bl
c00264a4:	d3 e0                	shl    eax,cl
c00264a6:	89 c2                	mov    edx,eax
c00264a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264ab:	25 ff 07 00 00       	and    eax,0x7ff
c00264b0:	39 d8                	cmp    eax,ebx
c00264b2:	7f 22                	jg     c00264d6 <__adddf3+0x583>
c00264b4:	29 c3                	sub    ebx,eax
c00264b6:	43                   	inc    ebx
c00264b7:	88 d9                	mov    cl,bl
c00264b9:	d3 ea                	shr    edx,cl
c00264bb:	29 df                	sub    edi,ebx
c00264bd:	89 f9                	mov    ecx,edi
c00264bf:	89 f0                	mov    eax,esi
c00264c1:	d3 e0                	shl    eax,cl
c00264c3:	09 c2                	or     edx,eax
c00264c5:	89 f0                	mov    eax,esi
c00264c7:	88 d9                	mov    cl,bl
c00264c9:	d3 e8                	shr    eax,cl
c00264cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264ce:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00264d4:	eb 6f                	jmp    c0026545 <__adddf3+0x5f2>
c00264d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264d9:	29 d8                	sub    eax,ebx
c00264db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264de:	89 f0                	mov    eax,esi
c00264e0:	eb 59                	jmp    c002653b <__adddf3+0x5e8>
c00264e2:	85 c0                	test   eax,eax
c00264e4:	74 6a                	je     c0026550 <__adddf3+0x5fd>
c00264e6:	0f bd c8             	bsr    ecx,eax
c00264e9:	83 f1 1f             	xor    ecx,0x1f
c00264ec:	d3 e0                	shl    eax,cl
c00264ee:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00264f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00264f7:	83 c1 20             	add    ecx,0x20
c00264fa:	39 cb                	cmp    ebx,ecx
c00264fc:	7f 35                	jg     c0026533 <__adddf3+0x5e0>
c00264fe:	29 d9                	sub    ecx,ebx
c0026500:	8d 71 01             	lea    esi,[ecx+0x1]
c0026503:	83 fe 1f             	cmp    esi,0x1f
c0026506:	7e 09                	jle    c0026511 <__adddf3+0x5be>
c0026508:	83 e9 1f             	sub    ecx,0x1f
c002650b:	d3 e8                	shr    eax,cl
c002650d:	89 c3                	mov    ebx,eax
c002650f:	eb 11                	jmp    c0026522 <__adddf3+0x5cf>
c0026511:	b9 20 00 00 00       	mov    ecx,0x20
c0026516:	29 f1                	sub    ecx,esi
c0026518:	89 c3                	mov    ebx,eax
c002651a:	d3 e3                	shl    ebx,cl
c002651c:	89 f1                	mov    ecx,esi
c002651e:	d3 e8                	shr    eax,cl
c0026520:	89 c2                	mov    edx,eax
c0026522:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026525:	25 00 f8 ff ff       	and    eax,0xfffff800
c002652a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002652d:	89 d0                	mov    eax,edx
c002652f:	89 da                	mov    edx,ebx
c0026531:	eb 26                	jmp    c0026559 <__adddf3+0x606>
c0026533:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026536:	29 cf                	sub    edi,ecx
c0026538:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002653b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026540:	eb 17                	jmp    c0026559 <__adddf3+0x606>
c0026542:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026545:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026548:	eb 0f                	jmp    c0026559 <__adddf3+0x606>
c002654a:	31 d2                	xor    edx,edx
c002654c:	31 c0                	xor    eax,eax
c002654e:	eb 09                	jmp    c0026559 <__adddf3+0x606>
c0026550:	89 c2                	mov    edx,eax
c0026552:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026559:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002655c:	c1 e1 14             	shl    ecx,0x14
c002655f:	89 c3                	mov    ebx,eax
c0026561:	c1 eb 0b             	shr    ebx,0xb
c0026564:	09 d9                	or     ecx,ebx
c0026566:	89 d3                	mov    ebx,edx
c0026568:	c1 eb 0b             	shr    ebx,0xb
c002656b:	c1 e0 15             	shl    eax,0x15
c002656e:	09 d8                	or     eax,ebx
c0026570:	89 c7                	mov    edi,eax
c0026572:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026578:	0f 95 c0             	setne  al
c002657b:	89 c6                	mov    esi,eax
c002657d:	09 f3                	or     ebx,esi
c002657f:	83 e3 01             	and    ebx,0x1
c0026582:	c1 ea 0a             	shr    edx,0xa
c0026585:	21 da                	and    edx,ebx
c0026587:	89 f8                	mov    eax,edi
c0026589:	01 d0                	add    eax,edx
c002658b:	83 d1 00             	adc    ecx,0x0
c002658e:	89 c7                	mov    edi,eax
c0026590:	eb 06                	jmp    c0026598 <__adddf3+0x645>
c0026592:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026595:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026598:	89 f8                	mov    eax,edi
c002659a:	89 ca                	mov    edx,ecx
c002659c:	83 c4 24             	add    esp,0x24
c002659f:	5b                   	pop    ebx
c00265a0:	5e                   	pop    esi
c00265a1:	5f                   	pop    edi
c00265a2:	5d                   	pop    ebp
c00265a3:	c3                   	ret    

c00265a4 <__subdf3>:
c00265a4:	55                   	push   ebp
c00265a5:	89 e5                	mov    ebp,esp
c00265a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00265ad:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265b3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00265b6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00265b9:	5d                   	pop    ebp
c00265ba:	e9 94 f9 ff ff       	jmp    c0025f53 <__adddf3>

c00265bf <__negdf2>:
c00265bf:	55                   	push   ebp
c00265c0:	89 e5                	mov    ebp,esp
c00265c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265c8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265ce:	5d                   	pop    ebp
c00265cf:	c3                   	ret    

c00265d0 <__muldf3>:
c00265d0:	55                   	push   ebp
c00265d1:	89 e5                	mov    ebp,esp
c00265d3:	57                   	push   edi
c00265d4:	56                   	push   esi
c00265d5:	53                   	push   ebx
c00265d6:	83 ec 24             	sub    esp,0x24
c00265d9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00265dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265e5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00265e8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00265eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265ee:	89 c8                	mov    eax,ecx
c00265f0:	c1 f8 14             	sar    eax,0x14
c00265f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265f6:	89 f8                	mov    eax,edi
c00265f8:	89 fb                	mov    ebx,edi
c00265fa:	c1 e3 0b             	shl    ebx,0xb
c00265fd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026600:	c1 e1 0b             	shl    ecx,0xb
c0026603:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026609:	c1 e8 15             	shr    eax,0x15
c002660c:	09 c1                	or     ecx,eax
c002660e:	89 d6                	mov    esi,edx
c0026610:	89 d0                	mov    eax,edx
c0026612:	c1 f8 14             	sar    eax,0x14
c0026615:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026618:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002661b:	89 c3                	mov    ebx,eax
c002661d:	c1 e3 0b             	shl    ebx,0xb
c0026620:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026623:	c1 e6 0b             	shl    esi,0xb
c0026626:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002662c:	c1 e8 15             	shr    eax,0x15
c002662f:	09 c6                	or     esi,eax
c0026631:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026634:	25 ff 07 00 00       	and    eax,0x7ff
c0026639:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002663c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002663f:	25 ff 07 00 00       	and    eax,0x7ff
c0026644:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026647:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002664a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002664d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026654:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026657:	40                   	inc    eax
c0026658:	a9 fe 07 00 00       	test   eax,0x7fe
c002665d:	0f 85 8d 00 00 00    	jne    c00266f0 <__muldf3+0x120>
c0026663:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026666:	09 c8                	or     eax,ecx
c0026668:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002666c:	74 44                	je     c00266b2 <__muldf3+0xe2>
c002666e:	85 c0                	test   eax,eax
c0026670:	0f 85 31 02 00 00    	jne    c00268a7 <__muldf3+0x2d7>
c0026676:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026679:	40                   	inc    eax
c002667a:	a9 fe 07 00 00       	test   eax,0x7fe
c002667f:	75 13                	jne    c0026694 <__muldf3+0xc4>
c0026681:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026684:	09 f1                	or     ecx,esi
c0026686:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002668a:	74 22                	je     c00266ae <__muldf3+0xde>
c002668c:	85 c9                	test   ecx,ecx
c002668e:	0f 85 0d 02 00 00    	jne    c00268a1 <__muldf3+0x2d1>
c0026694:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026698:	0f 89 09 02 00 00    	jns    c00268a7 <__muldf3+0x2d7>
c002669e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266a1:	05 00 00 00 80       	add    eax,0x80000000
c00266a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266a9:	e9 f9 01 00 00       	jmp    c00268a7 <__muldf3+0x2d7>
c00266ae:	85 c9                	test   ecx,ecx
c00266b0:	eb 2e                	jmp    c00266e0 <__muldf3+0x110>
c00266b2:	85 c0                	test   eax,eax
c00266b4:	74 20                	je     c00266d6 <__muldf3+0x106>
c00266b6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00266b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266bf:	c1 ef 1f             	shr    edi,0x1f
c00266c2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00266c5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00266c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00266cb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266ce:	09 f9                	or     ecx,edi
c00266d0:	78 1e                	js     c00266f0 <__muldf3+0x120>
c00266d2:	89 c3                	mov    ebx,eax
c00266d4:	eb e0                	jmp    c00266b6 <__muldf3+0xe6>
c00266d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266d9:	f7 d0                	not    eax
c00266db:	a9 ff 07 00 00       	test   eax,0x7ff
c00266e0:	75 b2                	jne    c0026694 <__muldf3+0xc4>
c00266e2:	31 ff                	xor    edi,edi
c00266e4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00266eb:	e9 b7 01 00 00       	jmp    c00268a7 <__muldf3+0x2d7>
c00266f0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266f3:	40                   	inc    eax
c00266f4:	a9 fe 07 00 00       	test   eax,0x7fe
c00266f9:	75 57                	jne    c0026752 <__muldf3+0x182>
c00266fb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266fe:	09 f0                	or     eax,esi
c0026700:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026704:	74 23                	je     c0026729 <__muldf3+0x159>
c0026706:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002670a:	0f 89 91 01 00 00    	jns    c00268a1 <__muldf3+0x2d1>
c0026710:	85 c0                	test   eax,eax
c0026712:	0f 85 89 01 00 00    	jne    c00268a1 <__muldf3+0x2d1>
c0026718:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002671b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026721:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026724:	e9 7e 01 00 00       	jmp    c00268a7 <__muldf3+0x2d7>
c0026729:	85 c0                	test   eax,eax
c002672b:	75 0c                	jne    c0026739 <__muldf3+0x169>
c002672d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026731:	0f 89 6a 01 00 00    	jns    c00268a1 <__muldf3+0x2d1>
c0026737:	eb df                	jmp    c0026718 <__muldf3+0x148>
c0026739:	01 f6                	add    esi,esi
c002673b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002673e:	c1 ea 1f             	shr    edx,0x1f
c0026741:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026744:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026747:	8d 43 ff             	lea    eax,[ebx-0x1]
c002674a:	09 d6                	or     esi,edx
c002674c:	78 04                	js     c0026752 <__muldf3+0x182>
c002674e:	89 c3                	mov    ebx,eax
c0026750:	eb e7                	jmp    c0026739 <__muldf3+0x169>
c0026752:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026758:	81 ce 00 00 00 80    	or     esi,0x80000000
c002675e:	89 c8                	mov    eax,ecx
c0026760:	f7 e6                	mul    esi
c0026762:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026765:	89 c7                	mov    edi,eax
c0026767:	89 c8                	mov    eax,ecx
c0026769:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002676c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002676f:	89 c1                	mov    ecx,eax
c0026771:	89 f0                	mov    eax,esi
c0026773:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026776:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026779:	89 c6                	mov    esi,eax
c002677b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002677e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026781:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026784:	31 c0                	xor    eax,eax
c0026786:	01 f1                	add    ecx,esi
c0026788:	0f 92 c0             	setb   al
c002678b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002678e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026791:	83 d6 00             	adc    esi,0x0
c0026794:	01 c7                	add    edi,eax
c0026796:	83 d6 00             	adc    esi,0x0
c0026799:	01 ca                	add    edx,ecx
c002679b:	0f 92 c1             	setb   cl
c002679e:	0f b6 c9             	movzx  ecx,cl
c00267a1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00267a4:	83 d6 00             	adc    esi,0x0
c00267a7:	01 cf                	add    edi,ecx
c00267a9:	83 d6 00             	adc    esi,0x0
c00267ac:	31 c9                	xor    ecx,ecx
c00267ae:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00267b1:	0f 95 c1             	setne  cl
c00267b4:	09 cf                	or     edi,ecx
c00267b6:	85 f6                	test   esi,esi
c00267b8:	78 0c                	js     c00267c6 <__muldf3+0x1f6>
c00267ba:	01 f6                	add    esi,esi
c00267bc:	89 f8                	mov    eax,edi
c00267be:	c1 e8 1f             	shr    eax,0x1f
c00267c1:	09 c6                	or     esi,eax
c00267c3:	01 ff                	add    edi,edi
c00267c5:	4b                   	dec    ebx
c00267c6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00267cc:	0f 8f 85 00 00 00    	jg     c0026857 <__muldf3+0x287>
c00267d2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00267d8:	85 db                	test   ebx,ebx
c00267da:	0f 8f 84 00 00 00    	jg     c0026864 <__muldf3+0x294>
c00267e0:	83 fb cc             	cmp    ebx,0xffffffcc
c00267e3:	7c 79                	jl     c002685e <__muldf3+0x28e>
c00267e5:	ba 01 00 00 00       	mov    edx,0x1
c00267ea:	29 da                	sub    edx,ebx
c00267ec:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267f2:	83 fa 1f             	cmp    edx,0x1f
c00267f5:	7e 30                	jle    c0026827 <__muldf3+0x257>
c00267f7:	83 fa 20             	cmp    edx,0x20
c00267fa:	75 0b                	jne    c0026807 <__muldf3+0x237>
c00267fc:	31 c0                	xor    eax,eax
c00267fe:	85 ff                	test   edi,edi
c0026800:	0f 95 c0             	setne  al
c0026803:	89 c7                	mov    edi,eax
c0026805:	eb 1a                	jmp    c0026821 <__muldf3+0x251>
c0026807:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002680a:	89 f0                	mov    eax,esi
c002680c:	d3 e0                	shl    eax,cl
c002680e:	09 f8                	or     eax,edi
c0026810:	0f 95 c0             	setne  al
c0026813:	0f b6 c0             	movzx  eax,al
c0026816:	89 c7                	mov    edi,eax
c0026818:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002681d:	29 d9                	sub    ecx,ebx
c002681f:	d3 ee                	shr    esi,cl
c0026821:	09 f7                	or     edi,esi
c0026823:	31 db                	xor    ebx,ebx
c0026825:	eb 3b                	jmp    c0026862 <__muldf3+0x292>
c0026827:	83 c3 1f             	add    ebx,0x1f
c002682a:	89 f0                	mov    eax,esi
c002682c:	88 d9                	mov    cl,bl
c002682e:	d3 e0                	shl    eax,cl
c0026830:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026833:	89 f8                	mov    eax,edi
c0026835:	88 d1                	mov    cl,dl
c0026837:	d3 e8                	shr    eax,cl
c0026839:	89 c1                	mov    ecx,eax
c002683b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002683e:	09 c8                	or     eax,ecx
c0026840:	88 d9                	mov    cl,bl
c0026842:	d3 e7                	shl    edi,cl
c0026844:	31 db                	xor    ebx,ebx
c0026846:	85 ff                	test   edi,edi
c0026848:	0f 95 c3             	setne  bl
c002684b:	89 df                	mov    edi,ebx
c002684d:	09 c7                	or     edi,eax
c002684f:	88 d1                	mov    cl,dl
c0026851:	d3 ee                	shr    esi,cl
c0026853:	31 db                	xor    ebx,ebx
c0026855:	eb 0d                	jmp    c0026864 <__muldf3+0x294>
c0026857:	bb ff 07 00 00       	mov    ebx,0x7ff
c002685c:	eb 02                	jmp    c0026860 <__muldf3+0x290>
c002685e:	31 db                	xor    ebx,ebx
c0026860:	31 ff                	xor    edi,edi
c0026862:	31 f6                	xor    esi,esi
c0026864:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026867:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002686a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002686f:	09 c3                	or     ebx,eax
c0026871:	c1 e3 14             	shl    ebx,0x14
c0026874:	89 f0                	mov    eax,esi
c0026876:	c1 e8 0b             	shr    eax,0xb
c0026879:	09 c3                	or     ebx,eax
c002687b:	89 f8                	mov    eax,edi
c002687d:	c1 e8 0b             	shr    eax,0xb
c0026880:	c1 e6 15             	shl    esi,0x15
c0026883:	09 c6                	or     esi,eax
c0026885:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002688b:	0f 95 c1             	setne  cl
c002688e:	09 c8                	or     eax,ecx
c0026890:	83 e0 01             	and    eax,0x1
c0026893:	c1 ef 0a             	shr    edi,0xa
c0026896:	21 c7                	and    edi,eax
c0026898:	01 f7                	add    edi,esi
c002689a:	83 d3 00             	adc    ebx,0x0
c002689d:	89 da                	mov    edx,ebx
c002689f:	eb 03                	jmp    c00268a4 <__muldf3+0x2d4>
c00268a1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00268a4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00268a7:	89 f8                	mov    eax,edi
c00268a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00268ac:	83 c4 24             	add    esp,0x24
c00268af:	5b                   	pop    ebx
c00268b0:	5e                   	pop    esi
c00268b1:	5f                   	pop    edi
c00268b2:	5d                   	pop    ebp
c00268b3:	c3                   	ret    

c00268b4 <__divdf3>:
c00268b4:	55                   	push   ebp
c00268b5:	89 e5                	mov    ebp,esp
c00268b7:	57                   	push   edi
c00268b8:	56                   	push   esi
c00268b9:	53                   	push   ebx
c00268ba:	83 ec 2c             	sub    esp,0x2c
c00268bd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268c0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00268c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268c6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00268c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268cc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00268cf:	89 ce                	mov    esi,ecx
c00268d1:	89 c8                	mov    eax,ecx
c00268d3:	c1 f8 14             	sar    eax,0x14
c00268d6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268d9:	89 f8                	mov    eax,edi
c00268db:	89 fb                	mov    ebx,edi
c00268dd:	c1 e3 0b             	shl    ebx,0xb
c00268e0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00268e3:	c1 e6 0b             	shl    esi,0xb
c00268e6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00268ec:	c1 e8 15             	shr    eax,0x15
c00268ef:	09 c6                	or     esi,eax
c00268f1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00268f4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00268f7:	89 c2                	mov    edx,eax
c00268f9:	c1 fa 14             	sar    edx,0x14
c00268fc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00268ff:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026902:	89 de                	mov    esi,ebx
c0026904:	c1 e6 0b             	shl    esi,0xb
c0026907:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002690a:	c1 e0 0b             	shl    eax,0xb
c002690d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026912:	c1 eb 15             	shr    ebx,0x15
c0026915:	09 d8                	or     eax,ebx
c0026917:	89 c2                	mov    edx,eax
c0026919:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002691c:	25 ff 07 00 00       	and    eax,0x7ff
c0026921:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026924:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026927:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002692d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026930:	29 d8                	sub    eax,ebx
c0026932:	05 ff 03 00 00       	add    eax,0x3ff
c0026937:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002693a:	46                   	inc    esi
c002693b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026941:	0f 85 a5 00 00 00    	jne    c00269ec <__divdf3+0x138>
c0026947:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002694a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002694d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026951:	74 2a                	je     c002697d <__divdf3+0xc9>
c0026953:	85 f6                	test   esi,esi
c0026955:	0f 85 cc 02 00 00    	jne    c0026c27 <__divdf3+0x373>
c002695b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002695e:	40                   	inc    eax
c002695f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026964:	75 26                	jne    c002698c <__divdf3+0xd8>
c0026966:	85 db                	test   ebx,ebx
c0026968:	74 22                	je     c002698c <__divdf3+0xd8>
c002696a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002696d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026970:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026973:	09 d0                	or     eax,edx
c0026975:	0f 85 ac 02 00 00    	jne    c0026c27 <__divdf3+0x373>
c002697b:	eb 63                	jmp    c00269e0 <__divdf3+0x12c>
c002697d:	85 f6                	test   esi,esi
c002697f:	75 22                	jne    c00269a3 <__divdf3+0xef>
c0026981:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026984:	40                   	inc    eax
c0026985:	a9 fe 07 00 00       	test   eax,0x7fe
c002698a:	74 36                	je     c00269c2 <__divdf3+0x10e>
c002698c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026990:	0f 89 91 02 00 00    	jns    c0026c27 <__divdf3+0x373>
c0026996:	89 f8                	mov    eax,edi
c0026998:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002699e:	e9 80 02 00 00       	jmp    c0026c23 <__divdf3+0x36f>
c00269a3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00269a6:	01 f6                	add    esi,esi
c00269a8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00269ab:	c1 ef 1f             	shr    edi,0x1f
c00269ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00269b1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00269b4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00269b7:	09 f7                	or     edi,esi
c00269b9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00269bc:	78 2e                	js     c00269ec <__divdf3+0x138>
c00269be:	89 c8                	mov    eax,ecx
c00269c0:	eb e1                	jmp    c00269a3 <__divdf3+0xef>
c00269c2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269c5:	09 d0                	or     eax,edx
c00269c7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269cb:	74 0f                	je     c00269dc <__divdf3+0x128>
c00269cd:	85 c0                	test   eax,eax
c00269cf:	74 bb                	je     c002698c <__divdf3+0xd8>
c00269d1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269d4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269d7:	e9 4b 02 00 00       	jmp    c0026c27 <__divdf3+0x373>
c00269dc:	85 c0                	test   eax,eax
c00269de:	75 ac                	jne    c002698c <__divdf3+0xd8>
c00269e0:	31 ff                	xor    edi,edi
c00269e2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00269e7:	e9 3b 02 00 00       	jmp    c0026c27 <__divdf3+0x373>
c00269ec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00269ef:	8d 4f 01             	lea    ecx,[edi+0x1]
c00269f2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00269f8:	75 6b                	jne    c0026a65 <__divdf3+0x1b1>
c00269fa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00269fd:	09 d6                	or     esi,edx
c00269ff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a03:	74 28                	je     c0026a2d <__divdf3+0x179>
c0026a05:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a08:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a0b:	85 f6                	test   esi,esi
c0026a0d:	0f 85 14 02 00 00    	jne    c0026c27 <__divdf3+0x373>
c0026a13:	31 ff                	xor    edi,edi
c0026a15:	31 c9                	xor    ecx,ecx
c0026a17:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a1a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a1d:	0f 89 04 02 00 00    	jns    c0026c27 <__divdf3+0x373>
c0026a23:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026a28:	e9 fa 01 00 00       	jmp    c0026c27 <__divdf3+0x373>
c0026a2d:	85 f6                	test   esi,esi
c0026a2f:	75 1b                	jne    c0026a4c <__divdf3+0x198>
c0026a31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a34:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a37:	25 00 00 00 80       	and    eax,0x80000000
c0026a3c:	31 c9                	xor    ecx,ecx
c0026a3e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026a43:	89 cf                	mov    edi,ecx
c0026a45:	89 c1                	mov    ecx,eax
c0026a47:	e9 db 01 00 00       	jmp    c0026c27 <__divdf3+0x373>
c0026a4c:	01 d2                	add    edx,edx
c0026a4e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a51:	c1 eb 1f             	shr    ebx,0x1f
c0026a54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a57:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a5d:	09 da                	or     edx,ebx
c0026a5f:	78 04                	js     c0026a65 <__divdf3+0x1b1>
c0026a61:	89 c8                	mov    eax,ecx
c0026a63:	eb e7                	jmp    c0026a4c <__divdf3+0x198>
c0026a65:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a6e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a74:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a77:	39 d6                	cmp    esi,edx
c0026a79:	77 0d                	ja     c0026a88 <__divdf3+0x1d4>
c0026a7b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a7e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026a81:	72 1b                	jb     c0026a9e <__divdf3+0x1ea>
c0026a83:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026a86:	75 16                	jne    c0026a9e <__divdf3+0x1ea>
c0026a88:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a8b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a8e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026a91:	83 de 00             	sbb    esi,0x0
c0026a94:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026a97:	ba 01 00 00 00       	mov    edx,0x1
c0026a9c:	eb 02                	jmp    c0026aa0 <__divdf3+0x1ec>
c0026a9e:	31 d2                	xor    edx,edx
c0026aa0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026aa7:	31 ff                	xor    edi,edi
c0026aa9:	01 ff                	add    edi,edi
c0026aab:	89 d1                	mov    ecx,edx
c0026aad:	c1 e9 1f             	shr    ecx,0x1f
c0026ab0:	09 cf                	or     edi,ecx
c0026ab2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026ab5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026ab8:	89 da                	mov    edx,ebx
c0026aba:	89 f3                	mov    ebx,esi
c0026abc:	8d 34 36             	lea    esi,[esi+esi*1]
c0026abf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ac2:	c1 e9 1f             	shr    ecx,0x1f
c0026ac5:	09 ce                	or     esi,ecx
c0026ac7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aca:	01 c9                	add    ecx,ecx
c0026acc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026acf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ad2:	85 db                	test   ebx,ebx
c0026ad4:	78 29                	js     c0026aff <__divdf3+0x24b>
c0026ad6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026ad9:	72 07                	jb     c0026ae2 <__divdf3+0x22e>
c0026adb:	75 3c                	jne    c0026b19 <__divdf3+0x265>
c0026add:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ae0:	77 37                	ja     c0026b19 <__divdf3+0x265>
c0026ae2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ae5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ae8:	31 d2                	xor    edx,edx
c0026aea:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026aed:	0f 97 c2             	seta   dl
c0026af0:	29 d6                	sub    esi,edx
c0026af2:	89 d9                	mov    ecx,ebx
c0026af4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026af7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026afa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026afd:	eb 17                	jmp    c0026b16 <__divdf3+0x262>
c0026aff:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b02:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b08:	0f 97 c1             	seta   cl
c0026b0b:	0f b6 c9             	movzx  ecx,cl
c0026b0e:	29 ce                	sub    esi,ecx
c0026b10:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026b13:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026b16:	83 ca 01             	or     edx,0x1
c0026b19:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026b1c:	75 8b                	jne    c0026aa9 <__divdf3+0x1f5>
c0026b1e:	c1 e7 09             	shl    edi,0x9
c0026b21:	89 d1                	mov    ecx,edx
c0026b23:	c1 e9 17             	shr    ecx,0x17
c0026b26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b29:	09 f3                	or     ebx,esi
c0026b2b:	0f 95 c3             	setne  bl
c0026b2e:	0f b6 db             	movzx  ebx,bl
c0026b31:	c1 e2 09             	shl    edx,0x9
c0026b34:	09 d3                	or     ebx,edx
c0026b36:	89 ca                	mov    edx,ecx
c0026b38:	09 fa                	or     edx,edi
c0026b3a:	78 0c                	js     c0026b48 <__divdf3+0x294>
c0026b3c:	01 d2                	add    edx,edx
c0026b3e:	89 d9                	mov    ecx,ebx
c0026b40:	c1 e9 1f             	shr    ecx,0x1f
c0026b43:	09 ca                	or     edx,ecx
c0026b45:	01 db                	add    ebx,ebx
c0026b47:	48                   	dec    eax
c0026b48:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026b4d:	0f 8f 83 00 00 00    	jg     c0026bd6 <__divdf3+0x322>
c0026b53:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b59:	85 c0                	test   eax,eax
c0026b5b:	0f 8f 82 00 00 00    	jg     c0026be3 <__divdf3+0x32f>
c0026b61:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b64:	7c 77                	jl     c0026bdd <__divdf3+0x329>
c0026b66:	be 01 00 00 00       	mov    esi,0x1
c0026b6b:	29 c6                	sub    esi,eax
c0026b6d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b73:	83 fe 1f             	cmp    esi,0x1f
c0026b76:	7e 2f                	jle    c0026ba7 <__divdf3+0x2f3>
c0026b78:	83 fe 20             	cmp    esi,0x20
c0026b7b:	75 0a                	jne    c0026b87 <__divdf3+0x2d3>
c0026b7d:	85 db                	test   ebx,ebx
c0026b7f:	0f 95 c3             	setne  bl
c0026b82:	0f b6 db             	movzx  ebx,bl
c0026b85:	eb 1a                	jmp    c0026ba1 <__divdf3+0x2ed>
c0026b87:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026b8a:	89 d7                	mov    edi,edx
c0026b8c:	d3 e7                	shl    edi,cl
c0026b8e:	89 f9                	mov    ecx,edi
c0026b90:	09 d9                	or     ecx,ebx
c0026b92:	0f 95 c3             	setne  bl
c0026b95:	0f b6 db             	movzx  ebx,bl
c0026b98:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b9d:	29 c1                	sub    ecx,eax
c0026b9f:	d3 ea                	shr    edx,cl
c0026ba1:	09 d3                	or     ebx,edx
c0026ba3:	31 c0                	xor    eax,eax
c0026ba5:	eb 3a                	jmp    c0026be1 <__divdf3+0x32d>
c0026ba7:	83 c0 1f             	add    eax,0x1f
c0026baa:	89 d7                	mov    edi,edx
c0026bac:	88 c1                	mov    cl,al
c0026bae:	d3 e7                	shl    edi,cl
c0026bb0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026bb3:	89 df                	mov    edi,ebx
c0026bb5:	89 f1                	mov    ecx,esi
c0026bb7:	d3 ef                	shr    edi,cl
c0026bb9:	89 f9                	mov    ecx,edi
c0026bbb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026bbe:	09 cf                	or     edi,ecx
c0026bc0:	88 c1                	mov    cl,al
c0026bc2:	d3 e3                	shl    ebx,cl
c0026bc4:	85 db                	test   ebx,ebx
c0026bc6:	0f 95 c3             	setne  bl
c0026bc9:	0f b6 db             	movzx  ebx,bl
c0026bcc:	09 fb                	or     ebx,edi
c0026bce:	89 f1                	mov    ecx,esi
c0026bd0:	d3 ea                	shr    edx,cl
c0026bd2:	31 c0                	xor    eax,eax
c0026bd4:	eb 0d                	jmp    c0026be3 <__divdf3+0x32f>
c0026bd6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026bdb:	eb 02                	jmp    c0026bdf <__divdf3+0x32b>
c0026bdd:	31 c0                	xor    eax,eax
c0026bdf:	31 db                	xor    ebx,ebx
c0026be1:	31 d2                	xor    edx,edx
c0026be3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026be6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026be9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026bef:	09 c8                	or     eax,ecx
c0026bf1:	c1 e0 14             	shl    eax,0x14
c0026bf4:	89 d1                	mov    ecx,edx
c0026bf6:	c1 e9 0b             	shr    ecx,0xb
c0026bf9:	09 c8                	or     eax,ecx
c0026bfb:	89 c6                	mov    esi,eax
c0026bfd:	89 d9                	mov    ecx,ebx
c0026bff:	c1 e9 0b             	shr    ecx,0xb
c0026c02:	c1 e2 15             	shl    edx,0x15
c0026c05:	09 ca                	or     edx,ecx
c0026c07:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026c0d:	0f 95 c0             	setne  al
c0026c10:	09 c1                	or     ecx,eax
c0026c12:	83 e1 01             	and    ecx,0x1
c0026c15:	c1 eb 0a             	shr    ebx,0xa
c0026c18:	21 cb                	and    ebx,ecx
c0026c1a:	01 d3                	add    ebx,edx
c0026c1c:	89 d8                	mov    eax,ebx
c0026c1e:	83 d6 00             	adc    esi,0x0
c0026c21:	89 f2                	mov    edx,esi
c0026c23:	89 c7                	mov    edi,eax
c0026c25:	89 d1                	mov    ecx,edx
c0026c27:	89 f8                	mov    eax,edi
c0026c29:	89 ca                	mov    edx,ecx
c0026c2b:	83 c4 2c             	add    esp,0x2c
c0026c2e:	5b                   	pop    ebx
c0026c2f:	5e                   	pop    esi
c0026c30:	5f                   	pop    edi
c0026c31:	5d                   	pop    ebp
c0026c32:	c3                   	ret    

c0026c33 <__floatsidf>:
c0026c33:	55                   	push   ebp
c0026c34:	89 e5                	mov    ebp,esp
c0026c36:	56                   	push   esi
c0026c37:	53                   	push   ebx
c0026c38:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c3b:	85 db                	test   ebx,ebx
c0026c3d:	7e 15                	jle    c0026c54 <__floatsidf+0x21>
c0026c3f:	0f bd cb             	bsr    ecx,ebx
c0026c42:	83 f1 1f             	xor    ecx,0x1f
c0026c45:	d3 e3                	shl    ebx,cl
c0026c47:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c4d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c52:	eb 21                	jmp    c0026c75 <__floatsidf+0x42>
c0026c54:	b8 00 00 00 00       	mov    eax,0x0
c0026c59:	ba 00 00 00 00       	mov    edx,0x0
c0026c5e:	74 2a                	je     c0026c8a <__floatsidf+0x57>
c0026c60:	f7 db                	neg    ebx
c0026c62:	0f bd cb             	bsr    ecx,ebx
c0026c65:	83 f1 1f             	xor    ecx,0x1f
c0026c68:	d3 e3                	shl    ebx,cl
c0026c6a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c70:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c75:	29 c8                	sub    eax,ecx
c0026c77:	c1 e0 14             	shl    eax,0x14
c0026c7a:	89 c1                	mov    ecx,eax
c0026c7c:	89 de                	mov    esi,ebx
c0026c7e:	c1 ee 0b             	shr    esi,0xb
c0026c81:	09 f1                	or     ecx,esi
c0026c83:	89 ca                	mov    edx,ecx
c0026c85:	c1 e3 15             	shl    ebx,0x15
c0026c88:	89 d8                	mov    eax,ebx
c0026c8a:	5b                   	pop    ebx
c0026c8b:	5e                   	pop    esi
c0026c8c:	5d                   	pop    ebp
c0026c8d:	c3                   	ret    

c0026c8e <__floatunsidf>:
c0026c8e:	55                   	push   ebp
c0026c8f:	89 e5                	mov    ebp,esp
c0026c91:	56                   	push   esi
c0026c92:	53                   	push   ebx
c0026c93:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c96:	85 db                	test   ebx,ebx
c0026c98:	74 2a                	je     c0026cc4 <__floatunsidf+0x36>
c0026c9a:	0f bd cb             	bsr    ecx,ebx
c0026c9d:	83 f1 1f             	xor    ecx,0x1f
c0026ca0:	d3 e3                	shl    ebx,cl
c0026ca2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026ca8:	b8 1e 04 00 00       	mov    eax,0x41e
c0026cad:	29 c8                	sub    eax,ecx
c0026caf:	c1 e0 14             	shl    eax,0x14
c0026cb2:	89 c1                	mov    ecx,eax
c0026cb4:	89 de                	mov    esi,ebx
c0026cb6:	c1 ee 0b             	shr    esi,0xb
c0026cb9:	09 f1                	or     ecx,esi
c0026cbb:	89 ca                	mov    edx,ecx
c0026cbd:	c1 e3 15             	shl    ebx,0x15
c0026cc0:	89 d8                	mov    eax,ebx
c0026cc2:	eb 04                	jmp    c0026cc8 <__floatunsidf+0x3a>
c0026cc4:	31 c0                	xor    eax,eax
c0026cc6:	31 d2                	xor    edx,edx
c0026cc8:	5b                   	pop    ebx
c0026cc9:	5e                   	pop    esi
c0026cca:	5d                   	pop    ebp
c0026ccb:	c3                   	ret    

c0026ccc <__fixdfsi>:
c0026ccc:	55                   	push   ebp
c0026ccd:	89 e5                	mov    ebp,esp
c0026ccf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026cd2:	89 d1                	mov    ecx,edx
c0026cd4:	c1 e1 0b             	shl    ecx,0xb
c0026cd7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ce0:	c1 e8 15             	shr    eax,0x15
c0026ce3:	09 c1                	or     ecx,eax
c0026ce5:	c1 fa 14             	sar    edx,0x14
c0026ce8:	78 1f                	js     c0026d09 <__fixdfsi+0x3d>
c0026cea:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026cf0:	31 c0                	xor    eax,eax
c0026cf2:	83 fa 1e             	cmp    edx,0x1e
c0026cf5:	77 40                	ja     c0026d37 <__fixdfsi+0x6b>
c0026cf7:	89 c8                	mov    eax,ecx
c0026cf9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cfe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d03:	29 d1                	sub    ecx,edx
c0026d05:	d3 e8                	shr    eax,cl
c0026d07:	eb 2e                	jmp    c0026d37 <__fixdfsi+0x6b>
c0026d09:	31 c0                	xor    eax,eax
c0026d0b:	81 c2 01 04 00 00    	add    edx,0x401
c0026d11:	78 24                	js     c0026d37 <__fixdfsi+0x6b>
c0026d13:	83 fa 1e             	cmp    edx,0x1e
c0026d16:	7e 09                	jle    c0026d21 <__fixdfsi+0x55>
c0026d18:	83 fa 1f             	cmp    edx,0x1f
c0026d1b:	75 18                	jne    c0026d35 <__fixdfsi+0x69>
c0026d1d:	85 c9                	test   ecx,ecx
c0026d1f:	75 14                	jne    c0026d35 <__fixdfsi+0x69>
c0026d21:	89 c8                	mov    eax,ecx
c0026d23:	0d 00 00 00 80       	or     eax,0x80000000
c0026d28:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d2d:	29 d1                	sub    ecx,edx
c0026d2f:	d3 e8                	shr    eax,cl
c0026d31:	f7 d8                	neg    eax
c0026d33:	eb 02                	jmp    c0026d37 <__fixdfsi+0x6b>
c0026d35:	31 c0                	xor    eax,eax
c0026d37:	5d                   	pop    ebp
c0026d38:	c3                   	ret    

c0026d39 <__fixunsdfsi>:
c0026d39:	55                   	push   ebp
c0026d3a:	89 e5                	mov    ebp,esp
c0026d3c:	53                   	push   ebx
c0026d3d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026d40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d43:	89 d3                	mov    ebx,edx
c0026d45:	c1 fb 14             	sar    ebx,0x14
c0026d48:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026d4e:	31 c0                	xor    eax,eax
c0026d50:	83 fb 1f             	cmp    ebx,0x1f
c0026d53:	77 1d                	ja     c0026d72 <__fixunsdfsi+0x39>
c0026d55:	89 d0                	mov    eax,edx
c0026d57:	c1 e0 0b             	shl    eax,0xb
c0026d5a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d5f:	c1 e9 15             	shr    ecx,0x15
c0026d62:	09 c8                	or     eax,ecx
c0026d64:	0d 00 00 00 80       	or     eax,0x80000000
c0026d69:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d6e:	29 d9                	sub    ecx,ebx
c0026d70:	d3 e8                	shr    eax,cl
c0026d72:	5b                   	pop    ebx
c0026d73:	5d                   	pop    ebp
c0026d74:	c3                   	ret    

c0026d75 <__cmpdf2>:
c0026d75:	55                   	push   ebp
c0026d76:	89 e5                	mov    ebp,esp
c0026d78:	57                   	push   edi
c0026d79:	56                   	push   esi
c0026d7a:	53                   	push   ebx
c0026d7b:	83 ec 0c             	sub    esp,0xc
c0026d7e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026d81:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d84:	89 ca                	mov    edx,ecx
c0026d86:	c1 ea 14             	shr    edx,0x14
c0026d89:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026d8f:	89 cb                	mov    ebx,ecx
c0026d91:	c1 fb 1f             	sar    ebx,0x1f
c0026d94:	31 da                	xor    edx,ebx
c0026d96:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d99:	89 df                	mov    edi,ebx
c0026d9b:	c1 e7 0b             	shl    edi,0xb
c0026d9e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026da1:	c1 e1 0b             	shl    ecx,0xb
c0026da4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026daa:	c1 eb 15             	shr    ebx,0x15
c0026dad:	09 d9                	or     ecx,ebx
c0026daf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026db2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026db5:	89 ce                	mov    esi,ecx
c0026db7:	c1 ee 14             	shr    esi,0x14
c0026dba:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026dc0:	89 cb                	mov    ebx,ecx
c0026dc2:	c1 fb 1f             	sar    ebx,0x1f
c0026dc5:	31 de                	xor    esi,ebx
c0026dc7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026dca:	89 df                	mov    edi,ebx
c0026dcc:	c1 e7 0b             	shl    edi,0xb
c0026dcf:	c1 e1 0b             	shl    ecx,0xb
c0026dd2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026dd8:	c1 eb 15             	shr    ebx,0x15
c0026ddb:	09 d9                	or     ecx,ebx
c0026ddd:	89 d3                	mov    ebx,edx
c0026ddf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026de5:	43                   	inc    ebx
c0026de6:	83 fb 01             	cmp    ebx,0x1
c0026de9:	77 08                	ja     c0026df3 <__cmpdf2+0x7e>
c0026deb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026dee:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026df1:	75 68                	jne    c0026e5b <__cmpdf2+0xe6>
c0026df3:	89 f3                	mov    ebx,esi
c0026df5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026dfb:	43                   	inc    ebx
c0026dfc:	83 fb 01             	cmp    ebx,0x1
c0026dff:	77 06                	ja     c0026e07 <__cmpdf2+0x92>
c0026e01:	89 fb                	mov    ebx,edi
c0026e03:	09 cb                	or     ebx,ecx
c0026e05:	75 54                	jne    c0026e5b <__cmpdf2+0xe6>
c0026e07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026e0a:	09 f8                	or     eax,edi
c0026e0c:	09 c8                	or     eax,ecx
c0026e0e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026e11:	75 12                	jne    c0026e25 <__cmpdf2+0xb0>
c0026e13:	8d 42 01             	lea    eax,[edx+0x1]
c0026e16:	83 f8 01             	cmp    eax,0x1
c0026e19:	77 0a                	ja     c0026e25 <__cmpdf2+0xb0>
c0026e1b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026e1e:	31 c0                	xor    eax,eax
c0026e20:	83 fb 01             	cmp    ebx,0x1
c0026e23:	76 36                	jbe    c0026e5b <__cmpdf2+0xe6>
c0026e25:	b8 01 00 00 00       	mov    eax,0x1
c0026e2a:	39 f2                	cmp    edx,esi
c0026e2c:	7f 2d                	jg     c0026e5b <__cmpdf2+0xe6>
c0026e2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e33:	7c 26                	jl     c0026e5b <__cmpdf2+0xe6>
c0026e35:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e38:	77 07                	ja     c0026e41 <__cmpdf2+0xcc>
c0026e3a:	72 16                	jb     c0026e52 <__cmpdf2+0xdd>
c0026e3c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e3f:	76 0a                	jbe    c0026e4b <__cmpdf2+0xd6>
c0026e41:	89 d0                	mov    eax,edx
c0026e43:	c1 f8 1f             	sar    eax,0x1f
c0026e46:	83 c8 01             	or     eax,0x1
c0026e49:	eb 10                	jmp    c0026e5b <__cmpdf2+0xe6>
c0026e4b:	b8 00 00 00 00       	mov    eax,0x0
c0026e50:	73 09                	jae    c0026e5b <__cmpdf2+0xe6>
c0026e52:	89 d0                	mov    eax,edx
c0026e54:	c1 f8 1f             	sar    eax,0x1f
c0026e57:	83 e0 02             	and    eax,0x2
c0026e5a:	48                   	dec    eax
c0026e5b:	83 c4 0c             	add    esp,0xc
c0026e5e:	5b                   	pop    ebx
c0026e5f:	5e                   	pop    esi
c0026e60:	5f                   	pop    edi
c0026e61:	5d                   	pop    ebp
c0026e62:	c3                   	ret    

c0026e63 <__eqdf2>:
c0026e63:	55                   	push   ebp
c0026e64:	89 e5                	mov    ebp,esp
c0026e66:	50                   	push   eax
c0026e67:	6a 01                	push   0x1
c0026e69:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e6c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e75:	e8 fb fe ff ff       	call   c0026d75 <__cmpdf2>
c0026e7a:	83 c4 18             	add    esp,0x18
c0026e7d:	c9                   	leave  
c0026e7e:	c3                   	ret    

c0026e7f <__nedf2>:
c0026e7f:	eb e2                	jmp    c0026e63 <__eqdf2>

c0026e81 <__gtdf2>:
c0026e81:	55                   	push   ebp
c0026e82:	89 e5                	mov    ebp,esp
c0026e84:	50                   	push   eax
c0026e85:	6a ff                	push   0xffffffff
c0026e87:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e8a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e8d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e93:	e8 dd fe ff ff       	call   c0026d75 <__cmpdf2>
c0026e98:	83 c4 18             	add    esp,0x18
c0026e9b:	c9                   	leave  
c0026e9c:	c3                   	ret    

c0026e9d <__gedf2>:
c0026e9d:	eb e2                	jmp    c0026e81 <__gtdf2>

c0026e9f <__ltdf2>:
c0026e9f:	eb c2                	jmp    c0026e63 <__eqdf2>

c0026ea1 <__ledf2>:
c0026ea1:	eb c0                	jmp    c0026e63 <__eqdf2>

c0026ea3 <__truncdfsf2>:
c0026ea3:	55                   	push   ebp
c0026ea4:	89 e5                	mov    ebp,esp
c0026ea6:	57                   	push   edi
c0026ea7:	56                   	push   esi
c0026ea8:	53                   	push   ebx
c0026ea9:	83 ec 0c             	sub    esp,0xc
c0026eac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026eaf:	89 d1                	mov    ecx,edx
c0026eb1:	c1 f9 14             	sar    ecx,0x14
c0026eb4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026eb7:	89 df                	mov    edi,ebx
c0026eb9:	c1 e7 0b             	shl    edi,0xb
c0026ebc:	89 d0                	mov    eax,edx
c0026ebe:	c1 e0 0b             	shl    eax,0xb
c0026ec1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026ec6:	c1 eb 15             	shr    ebx,0x15
c0026ec9:	09 d8                	or     eax,ebx
c0026ecb:	89 cb                	mov    ebx,ecx
c0026ecd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026ed3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026ed9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026edf:	0f 86 9e 00 00 00    	jbe    c0026f83 <__truncdfsf2+0xe0>
c0026ee5:	85 db                	test   ebx,ebx
c0026ee7:	75 0a                	jne    c0026ef3 <__truncdfsf2+0x50>
c0026ee9:	c1 fa 17             	sar    edx,0x17
c0026eec:	30 d2                	xor    dl,dl
c0026eee:	e9 84 00 00 00       	jmp    c0026f77 <__truncdfsf2+0xd4>
c0026ef3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026ef9:	83 fe 83             	cmp    esi,0xffffff83
c0026efc:	7d 4b                	jge    c0026f49 <__truncdfsf2+0xa6>
c0026efe:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026f03:	29 f1                	sub    ecx,esi
c0026f05:	83 f9 1f             	cmp    ecx,0x1f
c0026f08:	7f 6b                	jg     c0026f75 <__truncdfsf2+0xd2>
c0026f0a:	0d 00 00 00 80       	or     eax,0x80000000
c0026f0f:	89 c3                	mov    ebx,eax
c0026f11:	d3 eb                	shr    ebx,cl
c0026f13:	be 01 00 00 00       	mov    esi,0x1
c0026f18:	d3 e6                	shl    esi,cl
c0026f1a:	4e                   	dec    esi
c0026f1b:	21 f0                	and    eax,esi
c0026f1d:	09 f8                	or     eax,edi
c0026f1f:	0f 95 c0             	setne  al
c0026f22:	0f b6 c0             	movzx  eax,al
c0026f25:	09 c3                	or     ebx,eax
c0026f27:	89 d9                	mov    ecx,ebx
c0026f29:	c1 e9 08             	shr    ecx,0x8
c0026f2c:	f6 c3 7f             	test   bl,0x7f
c0026f2f:	0f 95 c0             	setne  al
c0026f32:	09 c8                	or     eax,ecx
c0026f34:	83 e0 01             	and    eax,0x1
c0026f37:	c1 eb 07             	shr    ebx,0x7
c0026f3a:	21 c3                	and    ebx,eax
c0026f3c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026f42:	09 d1                	or     ecx,edx
c0026f44:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026f47:	eb 76                	jmp    c0026fbf <__truncdfsf2+0x11c>
c0026f49:	83 c6 80             	add    esi,0xffffff80
c0026f4c:	7e 1d                	jle    c0026f6b <__truncdfsf2+0xc8>
c0026f4e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f54:	75 0b                	jne    c0026f61 <__truncdfsf2+0xbe>
c0026f56:	09 f8                	or     eax,edi
c0026f58:	74 09                	je     c0026f63 <__truncdfsf2+0xc0>
c0026f5a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f5f:	eb 02                	jmp    c0026f63 <__truncdfsf2+0xc0>
c0026f61:	31 c0                	xor    eax,eax
c0026f63:	c1 fa 17             	sar    edx,0x17
c0026f66:	80 ca ff             	or     dl,0xff
c0026f69:	eb 0e                	jmp    c0026f79 <__truncdfsf2+0xd6>
c0026f6b:	c1 fa 1f             	sar    edx,0x1f
c0026f6e:	c1 e2 08             	shl    edx,0x8
c0026f71:	09 ca                	or     edx,ecx
c0026f73:	eb 04                	jmp    c0026f79 <__truncdfsf2+0xd6>
c0026f75:	31 d2                	xor    edx,edx
c0026f77:	31 c0                	xor    eax,eax
c0026f79:	c1 e2 17             	shl    edx,0x17
c0026f7c:	c1 e8 08             	shr    eax,0x8
c0026f7f:	09 d0                	or     eax,edx
c0026f81:	eb 3c                	jmp    c0026fbf <__truncdfsf2+0x11c>
c0026f83:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026f89:	89 ca                	mov    edx,ecx
c0026f8b:	c1 fa 0b             	sar    edx,0xb
c0026f8e:	c1 e2 08             	shl    edx,0x8
c0026f91:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026f94:	31 db                	xor    ebx,ebx
c0026f96:	85 ff                	test   edi,edi
c0026f98:	0f 95 c3             	setne  bl
c0026f9b:	09 d8                	or     eax,ebx
c0026f9d:	89 c3                	mov    ebx,eax
c0026f9f:	c1 eb 08             	shr    ebx,0x8
c0026fa2:	a8 7f                	test   al,0x7f
c0026fa4:	0f 95 c2             	setne  dl
c0026fa7:	89 d6                	mov    esi,edx
c0026fa9:	09 de                	or     esi,ebx
c0026fab:	83 e6 01             	and    esi,0x1
c0026fae:	c1 e8 07             	shr    eax,0x7
c0026fb1:	21 f0                	and    eax,esi
c0026fb3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026fb6:	09 ca                	or     edx,ecx
c0026fb8:	c1 e2 17             	shl    edx,0x17
c0026fbb:	09 da                	or     edx,ebx
c0026fbd:	01 d0                	add    eax,edx
c0026fbf:	83 c4 0c             	add    esp,0xc
c0026fc2:	5b                   	pop    ebx
c0026fc3:	5e                   	pop    esi
c0026fc4:	5f                   	pop    edi
c0026fc5:	5d                   	pop    ebp
c0026fc6:	c3                   	ret    

c0026fc7 <__extendsfdf2>:
c0026fc7:	55                   	push   ebp
c0026fc8:	89 e5                	mov    ebp,esp
c0026fca:	57                   	push   edi
c0026fcb:	56                   	push   esi
c0026fcc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fcf:	89 d1                	mov    ecx,edx
c0026fd1:	c1 f9 17             	sar    ecx,0x17
c0026fd4:	c1 e2 08             	shl    edx,0x8
c0026fd7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fdd:	89 c8                	mov    eax,ecx
c0026fdf:	80 e4 f8             	and    ah,0xf8
c0026fe2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026fe5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026feb:	75 27                	jne    c0027014 <__extendsfdf2+0x4d>
c0026fed:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026ff3:	75 18                	jne    c002700d <__extendsfdf2+0x46>
c0026ff5:	85 d2                	test   edx,edx
c0026ff7:	74 20                	je     c0027019 <__extendsfdf2+0x52>
c0026ff9:	41                   	inc    ecx
c0026ffa:	01 d2                	add    edx,edx
c0026ffc:	79 fb                	jns    c0026ff9 <__extendsfdf2+0x32>
c0026ffe:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027004:	29 c8                	sub    eax,ecx
c0027006:	05 81 03 00 00       	add    eax,0x381
c002700b:	eb 0c                	jmp    c0027019 <__extendsfdf2+0x52>
c002700d:	05 00 07 00 00       	add    eax,0x700
c0027012:	eb 05                	jmp    c0027019 <__extendsfdf2+0x52>
c0027014:	05 80 03 00 00       	add    eax,0x380
c0027019:	c1 e0 14             	shl    eax,0x14
c002701c:	89 c1                	mov    ecx,eax
c002701e:	89 d0                	mov    eax,edx
c0027020:	c1 e8 0b             	shr    eax,0xb
c0027023:	09 c1                	or     ecx,eax
c0027025:	c1 e2 15             	shl    edx,0x15
c0027028:	89 d0                	mov    eax,edx
c002702a:	89 ca                	mov    edx,ecx
c002702c:	5e                   	pop    esi
c002702d:	5f                   	pop    edi
c002702e:	5d                   	pop    ebp
c002702f:	c3                   	ret    

c0027030 <fabs>:
c0027030:	83 ec 0c             	sub    esp,0xc
c0027033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027037:	89 04 24             	mov    DWORD PTR [esp],eax
c002703a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002703e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027047:	dd 04 24             	fld    QWORD PTR [esp]
c002704a:	83 c4 0c             	add    esp,0xc
c002704d:	c3                   	ret    
c002704e:	66 90                	xchg   ax,ax

c0027050 <lrint>:
c0027050:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027054:	83 ec 04             	sub    esp,0x4
c0027057:	db 1c 24             	fistp  DWORD PTR [esp]
c002705a:	58                   	pop    eax
c002705b:	c3                   	ret    

c002705c <lrintf>:
c002705c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027060:	83 ec 04             	sub    esp,0x4
c0027063:	db 1c 24             	fistp  DWORD PTR [esp]
c0027066:	58                   	pop    eax
c0027067:	c3                   	ret    

Disassembly of section .init:

c0027068 <_init>:
c0027068:	55                   	push   ebp
c0027069:	89 e5                	mov    ebp,esp
c002706b:	e8 a8 90 fd ff       	call   c0000118 <frame_dummy>
c0027070:	e8 63 e0 ff ff       	call   c00250d8 <__do_global_ctors_aux>
c0027075:	5d                   	pop    ebp
c0027076:	c3                   	ret    

Disassembly of section .fini:

c0027077 <_fini>:
c0027077:	55                   	push   ebp
c0027078:	89 e5                	mov    ebp,esp
c002707a:	e8 29 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002707f:	5d                   	pop    ebp
c0027080:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027082 <Computer::~Computer()>:
c0027082:	83 ec 0c             	sub    esp,0xc
c0027085:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c002708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708e:	89 10                	mov    DWORD PTR [eax],edx
c0027090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027094:	83 ec 0c             	sub    esp,0xc
c0027097:	50                   	push   eax
c0027098:	e8 b9 c9 fe ff       	call   c0013a56 <Device::~Device()>
c002709d:	83 c4 10             	add    esp,0x10
c00270a0:	90                   	nop
c00270a1:	83 c4 0c             	add    esp,0xc
c00270a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00270a6 <Computer::~Computer()>:
c00270a6:	83 ec 0c             	sub    esp,0xc
c00270a9:	83 ec 0c             	sub    esp,0xc
c00270ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270b0:	e8 cd ff ff ff       	call   c0027082 <Computer::~Computer()>
c00270b5:	83 c4 10             	add    esp,0x10
c00270b8:	83 ec 08             	sub    esp,0x8
c00270bb:	68 ec 01 00 00       	push   0x1ec
c00270c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270c4:	e8 ec b5 fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00270c9:	83 c4 10             	add    esp,0x10
c00270cc:	83 c4 0c             	add    esp,0xc
c00270cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00270d0 <idleCommon()>:
c00270d0:	83 ec 0c             	sub    esp,0xc
c00270d3:	e8 66 5c ff ff       	call   c001cd3e <lockScheduler()>
c00270d8:	e8 9d 5f ff ff       	call   c001d07a <schedule()>
c00270dd:	83 c4 0c             	add    esp,0xc
c00270e0:	e9 5b 5c ff ff       	jmp    c001cd40 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00270e6 <LinkedList<UnixFile>::~LinkedList()>:
c00270e6:	90                   	nop
c00270e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00270e8 <LinkedList<UnixFile>::LinkedList()>:
c00270e8:	83 ec 0c             	sub    esp,0xc
c00270eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027104:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027119:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027124:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002712b:	83 ec 0c             	sub    esp,0xc
c002712e:	68 86 8d 02 c0       	push   0xc0028d86
c0027133:	e8 5d b6 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0027138:	83 c4 10             	add    esp,0x10
c002713b:	90                   	nop
c002713c:	83 c4 0c             	add    esp,0xc
c002713f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027140 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027140:	83 ec 0c             	sub    esp,0xc
c0027143:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027148:	75 10                	jne    c002715a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002714a:	83 ec 0c             	sub    esp,0xc
c002714d:	68 a0 8d 02 c0       	push   0xc0028da0
c0027152:	e8 58 27 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027157:	83 c4 10             	add    esp,0x10
c002715a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002715e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027160:	85 c0                	test   eax,eax
c0027162:	74 34                	je     c0027198 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002716b:	85 c0                	test   eax,eax
c002716d:	74 29                	je     c0027198 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002716f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027173:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027176:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002717a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002717d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027181:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027185:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002718f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027196:	eb 65                	jmp    c00271fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719c:	8b 00                	mov    eax,DWORD PTR [eax]
c002719e:	85 c0                	test   eax,eax
c00271a0:	75 4b                	jne    c00271ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00271a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271a9:	85 c0                	test   eax,eax
c00271ab:	75 40                	jne    c00271ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00271ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271b5:	89 10                	mov    DWORD PTR [eax],edx
c00271b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271d7:	85 c0                	test   eax,eax
c00271d9:	74 22                	je     c00271fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271db:	83 ec 0c             	sub    esp,0xc
c00271de:	68 c2 8d 02 c0       	push   0xc0028dc2
c00271e3:	e8 c7 26 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00271e8:	83 c4 10             	add    esp,0x10
c00271eb:	eb 10                	jmp    c00271fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271ed:	83 ec 0c             	sub    esp,0xc
c00271f0:	68 cc 8d 02 c0       	push   0xc0028dcc
c00271f5:	e8 b5 26 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00271fa:	83 c4 10             	add    esp,0x10
c00271fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027201:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027204:	8d 50 01             	lea    edx,[eax+0x1]
c0027207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002720e:	90                   	nop
c002720f:	83 c4 0c             	add    esp,0xc
c0027212:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027214 <LinkedList<UnixFile>::getFirstElement()>:
c0027214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027218:	8b 00                	mov    eax,DWORD PTR [eax]
c002721a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002721c <LinkedList<UnixFile>::removeFirst()>:
c002721c:	83 ec 0c             	sub    esp,0xc
c002721f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027223:	8b 00                	mov    eax,DWORD PTR [eax]
c0027225:	85 c0                	test   eax,eax
c0027227:	75 12                	jne    c002723b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027229:	83 ec 0c             	sub    esp,0xc
c002722c:	68 d8 8d 02 c0       	push   0xc0028dd8
c0027231:	e8 79 26 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027236:	83 c4 10             	add    esp,0x10
c0027239:	eb 7e                	jmp    c00272b9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002723b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002723f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027245:	85 c0                	test   eax,eax
c0027247:	74 10                	je     c0027259 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027249:	83 ec 0c             	sub    esp,0xc
c002724c:	68 23 8e 02 c0       	push   0xc0028e23
c0027251:	e8 59 26 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027256:	83 c4 10             	add    esp,0x10
c0027259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725d:	8b 00                	mov    eax,DWORD PTR [eax]
c002725f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027262:	85 c0                	test   eax,eax
c0027264:	75 33                	jne    c0027299 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027274:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002727b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027282:	83 f8 01             	cmp    eax,0x1
c0027285:	74 21                	je     c00272a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027287:	83 ec 0c             	sub    esp,0xc
c002728a:	68 fc 8d 02 c0       	push   0xc0028dfc
c002728f:	e8 1b 26 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027294:	83 c4 10             	add    esp,0x10
c0027297:	eb 0f                	jmp    c00272a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729d:	8b 00                	mov    eax,DWORD PTR [eax]
c002729f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00272a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a6:	89 10                	mov    DWORD PTR [eax],edx
c00272a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272af:	8d 50 ff             	lea    edx,[eax-0x1]
c00272b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272b9:	83 c4 0c             	add    esp,0xc
c00272bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00272be <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00272be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272c5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00272c6 <DriverlessDevice::~DriverlessDevice()>:
c00272c6:	ba e4 94 02 c0       	mov    edx,0xc00294e4
c00272cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272cf:	89 10                	mov    DWORD PTR [eax],edx
c00272d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272d5:	50                   	push   eax
c00272d6:	e8 7b c7 fe ff       	call   c0013a56 <Device::~Device()>
c00272db:	83 c4 04             	add    esp,0x4
c00272de:	90                   	nop
c00272df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00272e0 <DriverlessDevice::~DriverlessDevice()>:
c00272e0:	83 ec 0c             	sub    esp,0xc
c00272e3:	83 ec 0c             	sub    esp,0xc
c00272e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ea:	e8 d7 ff ff ff       	call   c00272c6 <DriverlessDevice::~DriverlessDevice()>
c00272ef:	83 c4 10             	add    esp,0x10
c00272f2:	83 ec 08             	sub    esp,0x8
c00272f5:	68 58 01 00 00       	push   0x158
c00272fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272fe:	e8 b2 b3 fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027303:	83 c4 10             	add    esp,0x10
c0027306:	83 c4 0c             	add    esp,0xc
c0027309:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002730a <LinkedList<Device>::addElement(Device*)>:
c002730a:	83 ec 0c             	sub    esp,0xc
c002730d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027312:	75 10                	jne    c0027324 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027314:	83 ec 0c             	sub    esp,0xc
c0027317:	68 a0 8d 02 c0       	push   0xc0028da0
c002731c:	e8 8e 25 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027321:	83 c4 10             	add    esp,0x10
c0027324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027328:	8b 00                	mov    eax,DWORD PTR [eax]
c002732a:	85 c0                	test   eax,eax
c002732c:	74 3a                	je     c0027368 <LinkedList<Device>::addElement(Device*)+0x5e>
c002732e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027335:	85 c0                	test   eax,eax
c0027337:	74 2f                	je     c0027368 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027340:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027344:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002734a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002734e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027352:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027359:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002735c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027366:	eb 68                	jmp    c00273d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002736c:	8b 00                	mov    eax,DWORD PTR [eax]
c002736e:	85 c0                	test   eax,eax
c0027370:	75 4e                	jne    c00273c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027379:	85 c0                	test   eax,eax
c002737b:	75 43                	jne    c00273c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002737d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027381:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027385:	89 10                	mov    DWORD PTR [eax],edx
c0027387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002738b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002738f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027399:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00273a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273aa:	85 c0                	test   eax,eax
c00273ac:	74 22                	je     c00273d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273ae:	83 ec 0c             	sub    esp,0xc
c00273b1:	68 c2 8d 02 c0       	push   0xc0028dc2
c00273b6:	e8 f4 24 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00273bb:	83 c4 10             	add    esp,0x10
c00273be:	eb 10                	jmp    c00273d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273c0:	83 ec 0c             	sub    esp,0xc
c00273c3:	68 cc 8d 02 c0       	push   0xc0028dcc
c00273c8:	e8 e2 24 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00273cd:	83 c4 10             	add    esp,0x10
c00273d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273d7:	8d 50 01             	lea    edx,[eax+0x1]
c00273da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273e1:	90                   	nop
c00273e2:	83 c4 0c             	add    esp,0xc
c00273e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00273e6 <LinkedList<Device>::LinkedList()>:
c00273e6:	83 ec 0c             	sub    esp,0xc
c00273e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027402:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002740d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027417:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002741e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027422:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027429:	83 ec 0c             	sub    esp,0xc
c002742c:	68 86 8d 02 c0       	push   0xc0028d86
c0027431:	e8 5f b3 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0027436:	83 c4 10             	add    esp,0x10
c0027439:	90                   	nop
c002743a:	83 c4 0c             	add    esp,0xc
c002743d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002743e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002743e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027442:	8b 00                	mov    eax,DWORD PTR [eax]
c0027444:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027446 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002744a:	8b 00                	mov    eax,DWORD PTR [eax]
c002744c:	85 c0                	test   eax,eax
c002744e:	75 0e                	jne    c002745e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027457:	85 c0                	test   eax,eax
c0027459:	75 03                	jne    c002745e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002745b:	b0 01                	mov    al,0x1
c002745d:	c3                   	ret    
c002745e:	b0 00                	mov    al,0x0
c0027460:	90                   	nop
c0027461:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027462 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027462:	83 ec 0c             	sub    esp,0xc
c0027465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027469:	8b 00                	mov    eax,DWORD PTR [eax]
c002746b:	85 c0                	test   eax,eax
c002746d:	75 15                	jne    c0027484 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002746f:	83 ec 0c             	sub    esp,0xc
c0027472:	68 d8 8d 02 c0       	push   0xc0028dd8
c0027477:	e8 33 24 ff ff       	call   c00198af <Krnl::panic(char const*)>
c002747c:	83 c4 10             	add    esp,0x10
c002747f:	e9 88 00 00 00       	jmp    c002750c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002748b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002748e:	85 c0                	test   eax,eax
c0027490:	0f 95 c0             	setne  al
c0027493:	84 c0                	test   al,al
c0027495:	74 10                	je     c00274a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027497:	83 ec 0c             	sub    esp,0xc
c002749a:	68 23 8e 02 c0       	push   0xc0028e23
c002749f:	e8 0b 24 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00274a4:	83 c4 10             	add    esp,0x10
c00274a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00274ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00274b0:	85 c0                	test   eax,eax
c00274b2:	0f 94 c0             	sete   al
c00274b5:	84 c0                	test   al,al
c00274b7:	74 33                	je     c00274ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00274b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274d5:	83 f8 01             	cmp    eax,0x1
c00274d8:	74 21                	je     c00274fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274da:	83 ec 0c             	sub    esp,0xc
c00274dd:	68 fc 8d 02 c0       	push   0xc0028dfc
c00274e2:	e8 c8 23 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00274e7:	83 c4 10             	add    esp,0x10
c00274ea:	eb 0f                	jmp    c00274fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00274f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00274f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f9:	89 10                	mov    DWORD PTR [eax],edx
c00274fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027502:	8d 50 ff             	lea    edx,[eax-0x1]
c0027505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027509:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002750c:	83 c4 0c             	add    esp,0xc
c002750f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027510 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027510:	83 ec 0c             	sub    esp,0xc
c0027513:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027518:	75 10                	jne    c002752a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002751a:	83 ec 0c             	sub    esp,0xc
c002751d:	68 a0 8d 02 c0       	push   0xc0028da0
c0027522:	e8 88 23 ff ff       	call   c00198af <Krnl::panic(char const*)>
c0027527:	83 c4 10             	add    esp,0x10
c002752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002752e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027530:	85 c0                	test   eax,eax
c0027532:	74 34                	je     c0027568 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002753b:	85 c0                	test   eax,eax
c002753d:	74 29                	je     c0027568 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002753f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027546:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002754a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002754d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002755f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027566:	eb 65                	jmp    c00275cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756c:	8b 00                	mov    eax,DWORD PTR [eax]
c002756e:	85 c0                	test   eax,eax
c0027570:	75 4b                	jne    c00275bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027579:	85 c0                	test   eax,eax
c002757b:	75 40                	jne    c00275bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002757d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027581:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027585:	89 10                	mov    DWORD PTR [eax],edx
c0027587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002758f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027599:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00275a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275a7:	85 c0                	test   eax,eax
c00275a9:	74 22                	je     c00275cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275ab:	83 ec 0c             	sub    esp,0xc
c00275ae:	68 c2 8d 02 c0       	push   0xc0028dc2
c00275b3:	e8 f7 22 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00275b8:	83 c4 10             	add    esp,0x10
c00275bb:	eb 10                	jmp    c00275cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275bd:	83 ec 0c             	sub    esp,0xc
c00275c0:	68 cc 8d 02 c0       	push   0xc0028dcc
c00275c5:	e8 e5 22 ff ff       	call   c00198af <Krnl::panic(char const*)>
c00275ca:	83 c4 10             	add    esp,0x10
c00275cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275d4:	8d 50 01             	lea    edx,[eax+0x1]
c00275d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275de:	90                   	nop
c00275df:	83 c4 0c             	add    esp,0xc
c00275e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00275e4 <ACPI::~ACPI()>:
c00275e4:	83 ec 0c             	sub    esp,0xc
c00275e7:	ba 88 9d 02 c0       	mov    edx,0xc0029d88
c00275ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f0:	89 10                	mov    DWORD PTR [eax],edx
c00275f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f6:	83 ec 0c             	sub    esp,0xc
c00275f9:	50                   	push   eax
c00275fa:	e8 57 c4 fe ff       	call   c0013a56 <Device::~Device()>
c00275ff:	83 c4 10             	add    esp,0x10
c0027602:	90                   	nop
c0027603:	83 c4 0c             	add    esp,0xc
c0027606:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027608 <ACPI::~ACPI()>:
c0027608:	83 ec 0c             	sub    esp,0xc
c002760b:	83 ec 0c             	sub    esp,0xc
c002760e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027612:	e8 cd ff ff ff       	call   c00275e4 <ACPI::~ACPI()>
c0027617:	83 c4 10             	add    esp,0x10
c002761a:	83 ec 08             	sub    esp,0x8
c002761d:	68 68 22 00 00       	push   0x2268
c0027622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027626:	e8 8a b0 fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c002762b:	83 c4 10             	add    esp,0x10
c002762e:	83 c4 0c             	add    esp,0xc
c0027631:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027632 <CPU::~CPU()>:
c0027632:	83 ec 0c             	sub    esp,0xc
c0027635:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c002763a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763e:	89 10                	mov    DWORD PTR [eax],edx
c0027640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027644:	83 ec 0c             	sub    esp,0xc
c0027647:	50                   	push   eax
c0027648:	e8 09 c4 fe ff       	call   c0013a56 <Device::~Device()>
c002764d:	83 c4 10             	add    esp,0x10
c0027650:	90                   	nop
c0027651:	83 c4 0c             	add    esp,0xc
c0027654:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027656 <CPU::~CPU()>:
c0027656:	83 ec 0c             	sub    esp,0xc
c0027659:	83 ec 0c             	sub    esp,0xc
c002765c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027660:	e8 cd ff ff ff       	call   c0027632 <CPU::~CPU()>
c0027665:	83 c4 10             	add    esp,0x10
c0027668:	83 ec 08             	sub    esp,0x8
c002766b:	68 98 11 00 00       	push   0x1198
c0027670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027674:	e8 3c b0 fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027679:	83 c4 10             	add    esp,0x10
c002767c:	83 c4 0c             	add    esp,0xc
c002767f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027680 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027680:	90                   	nop
c0027681:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027682 <ThreadControlBlock::ThreadControlBlock()>:
c0027682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027686:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002768d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027691:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002769c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00276a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276a7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00276ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276b2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00276b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276ba:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00276be:	90                   	nop
c00276bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00276c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00276c0:	83 ec 0c             	sub    esp,0xc
c00276c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027703:	83 ec 0c             	sub    esp,0xc
c0027706:	68 86 8d 02 c0       	push   0xc0028d86
c002770b:	e8 85 b0 fe ff       	call   c0012795 <Dbg::kprintf(char const*, ...)>
c0027710:	83 c4 10             	add    esp,0x10
c0027713:	90                   	nop
c0027714:	83 c4 0c             	add    esp,0xc
c0027717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027718 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027718:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002771c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002771f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027720 <Vm::_FPUState::_FPUState()>:
c0027720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027724:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002772b:	90                   	nop
c002772c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002772e <PCI::~PCI()>:
c002772e:	83 ec 0c             	sub    esp,0xc
c0027731:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c0027736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773a:	89 10                	mov    DWORD PTR [eax],edx
c002773c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027740:	83 ec 0c             	sub    esp,0xc
c0027743:	50                   	push   eax
c0027744:	e8 1d bd fe ff       	call   c0013466 <Bus::~Bus()>
c0027749:	83 c4 10             	add    esp,0x10
c002774c:	90                   	nop
c002774d:	83 c4 0c             	add    esp,0xc
c0027750:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027752 <PCI::~PCI()>:
c0027752:	83 ec 0c             	sub    esp,0xc
c0027755:	83 ec 0c             	sub    esp,0xc
c0027758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002775c:	e8 cd ff ff ff       	call   c002772e <PCI::~PCI()>
c0027761:	83 c4 10             	add    esp,0x10
c0027764:	83 ec 08             	sub    esp,0x8
c0027767:	68 58 01 00 00       	push   0x158
c002776c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027770:	e8 40 af fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027775:	83 c4 10             	add    esp,0x10
c0027778:	83 c4 0c             	add    esp,0xc
c002777b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002777c <IDE::~IDE()>:
c002777c:	83 ec 0c             	sub    esp,0xc
c002777f:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0027784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027788:	89 10                	mov    DWORD PTR [eax],edx
c002778a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778e:	83 ec 0c             	sub    esp,0xc
c0027791:	50                   	push   eax
c0027792:	e8 af c7 fe ff       	call   c0013f46 <HardDiskController::~HardDiskController()>
c0027797:	83 c4 10             	add    esp,0x10
c002779a:	90                   	nop
c002779b:	83 c4 0c             	add    esp,0xc
c002779e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00277a0 <IDE::~IDE()>:
c00277a0:	83 ec 0c             	sub    esp,0xc
c00277a3:	83 ec 0c             	sub    esp,0xc
c00277a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277aa:	e8 cd ff ff ff       	call   c002777c <IDE::~IDE()>
c00277af:	83 c4 10             	add    esp,0x10
c00277b2:	83 ec 08             	sub    esp,0x8
c00277b5:	68 70 02 00 00       	push   0x270
c00277ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277be:	e8 f2 ae fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00277c3:	83 c4 10             	add    esp,0x10
c00277c6:	83 c4 0c             	add    esp,0xc
c00277c9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00277ca <SATABus::~SATABus()>:
c00277ca:	83 ec 0c             	sub    esp,0xc
c00277cd:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c00277d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d6:	89 10                	mov    DWORD PTR [eax],edx
c00277d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277dc:	83 ec 0c             	sub    esp,0xc
c00277df:	50                   	push   eax
c00277e0:	e8 61 c7 fe ff       	call   c0013f46 <HardDiskController::~HardDiskController()>
c00277e5:	83 c4 10             	add    esp,0x10
c00277e8:	90                   	nop
c00277e9:	83 c4 0c             	add    esp,0xc
c00277ec:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00277ee <SATABus::~SATABus()>:
c00277ee:	83 ec 0c             	sub    esp,0xc
c00277f1:	83 ec 0c             	sub    esp,0xc
c00277f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277f8:	e8 cd ff ff ff       	call   c00277ca <SATABus::~SATABus()>
c00277fd:	83 c4 10             	add    esp,0x10
c0027800:	83 ec 08             	sub    esp,0x8
c0027803:	68 64 01 00 00       	push   0x164
c0027808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002780c:	e8 a4 ae fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027811:	83 c4 10             	add    esp,0x10
c0027814:	83 c4 0c             	add    esp,0xc
c0027817:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027818 <ATA::~ATA()>:
c0027818:	83 ec 0c             	sub    esp,0xc
c002781b:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c0027820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027824:	89 10                	mov    DWORD PTR [eax],edx
c0027826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002782a:	83 ec 0c             	sub    esp,0xc
c002782d:	50                   	push   eax
c002782e:	e8 f1 c7 fe ff       	call   c0014024 <PhysicalDisk::~PhysicalDisk()>
c0027833:	83 c4 10             	add    esp,0x10
c0027836:	90                   	nop
c0027837:	83 c4 0c             	add    esp,0xc
c002783a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002783c <ATA::~ATA()>:
c002783c:	83 ec 0c             	sub    esp,0xc
c002783f:	83 ec 0c             	sub    esp,0xc
c0027842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027846:	e8 cd ff ff ff       	call   c0027818 <ATA::~ATA()>
c002784b:	83 c4 10             	add    esp,0x10
c002784e:	83 ec 08             	sub    esp,0x8
c0027851:	68 7c 01 00 00       	push   0x17c
c0027856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002785a:	e8 56 ae fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c002785f:	83 c4 10             	add    esp,0x10
c0027862:	83 c4 0c             	add    esp,0xc
c0027865:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027866 <ATAPI::~ATAPI()>:
c0027866:	83 ec 0c             	sub    esp,0xc
c0027869:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c002786e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027872:	89 10                	mov    DWORD PTR [eax],edx
c0027874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027878:	83 ec 0c             	sub    esp,0xc
c002787b:	50                   	push   eax
c002787c:	e8 a3 c7 fe ff       	call   c0014024 <PhysicalDisk::~PhysicalDisk()>
c0027881:	83 c4 10             	add    esp,0x10
c0027884:	90                   	nop
c0027885:	83 c4 0c             	add    esp,0xc
c0027888:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002788a <ATAPI::~ATAPI()>:
c002788a:	83 ec 0c             	sub    esp,0xc
c002788d:	83 ec 0c             	sub    esp,0xc
c0027890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027894:	e8 cd ff ff ff       	call   c0027866 <ATAPI::~ATAPI()>
c0027899:	83 c4 10             	add    esp,0x10
c002789c:	83 ec 08             	sub    esp,0x8
c002789f:	68 80 01 00 00       	push   0x180
c00278a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278a8:	e8 08 ae fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00278ad:	83 c4 10             	add    esp,0x10
c00278b0:	83 c4 0c             	add    esp,0xc
c00278b3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00278b4 <SATA::~SATA()>:
c00278b4:	83 ec 0c             	sub    esp,0xc
c00278b7:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c00278bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c0:	89 10                	mov    DWORD PTR [eax],edx
c00278c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c6:	83 ec 0c             	sub    esp,0xc
c00278c9:	50                   	push   eax
c00278ca:	e8 55 c7 fe ff       	call   c0014024 <PhysicalDisk::~PhysicalDisk()>
c00278cf:	83 c4 10             	add    esp,0x10
c00278d2:	90                   	nop
c00278d3:	83 c4 0c             	add    esp,0xc
c00278d6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00278d8 <SATA::~SATA()>:
c00278d8:	83 ec 0c             	sub    esp,0xc
c00278db:	83 ec 0c             	sub    esp,0xc
c00278de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278e2:	e8 cd ff ff ff       	call   c00278b4 <SATA::~SATA()>
c00278e7:	83 c4 10             	add    esp,0x10
c00278ea:	83 ec 08             	sub    esp,0x8
c00278ed:	68 74 01 00 00       	push   0x174
c00278f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278f6:	e8 ba ad fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00278fb:	83 c4 10             	add    esp,0x10
c00278fe:	83 c4 0c             	add    esp,0xc
c0027901:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027902 <AVX::~AVX()>:
c0027902:	83 ec 0c             	sub    esp,0xc
c0027905:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c002790a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002790e:	89 10                	mov    DWORD PTR [eax],edx
c0027910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027914:	83 ec 0c             	sub    esp,0xc
c0027917:	50                   	push   eax
c0027918:	e8 8b c7 fe ff       	call   c00140a8 <FPU::~FPU()>
c002791d:	83 c4 10             	add    esp,0x10
c0027920:	90                   	nop
c0027921:	83 c4 0c             	add    esp,0xc
c0027924:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027926 <AVX::~AVX()>:
c0027926:	83 ec 0c             	sub    esp,0xc
c0027929:	83 ec 0c             	sub    esp,0xc
c002792c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027930:	e8 cd ff ff ff       	call   c0027902 <AVX::~AVX()>
c0027935:	83 c4 10             	add    esp,0x10
c0027938:	83 ec 08             	sub    esp,0x8
c002793b:	68 58 01 00 00       	push   0x158
c0027940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027944:	e8 6c ad fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027949:	83 c4 10             	add    esp,0x10
c002794c:	83 c4 0c             	add    esp,0xc
c002794f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027950 <MMX::~MMX()>:
c0027950:	83 ec 0c             	sub    esp,0xc
c0027953:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c0027958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002795c:	89 10                	mov    DWORD PTR [eax],edx
c002795e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027962:	83 ec 0c             	sub    esp,0xc
c0027965:	50                   	push   eax
c0027966:	e8 3d c7 fe ff       	call   c00140a8 <FPU::~FPU()>
c002796b:	83 c4 10             	add    esp,0x10
c002796e:	90                   	nop
c002796f:	83 c4 0c             	add    esp,0xc
c0027972:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027974 <MMX::~MMX()>:
c0027974:	83 ec 0c             	sub    esp,0xc
c0027977:	83 ec 0c             	sub    esp,0xc
c002797a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002797e:	e8 cd ff ff ff       	call   c0027950 <MMX::~MMX()>
c0027983:	83 c4 10             	add    esp,0x10
c0027986:	83 ec 08             	sub    esp,0x8
c0027989:	68 58 01 00 00       	push   0x158
c002798e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027992:	e8 1e ad fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027997:	83 c4 10             	add    esp,0x10
c002799a:	83 c4 0c             	add    esp,0xc
c002799d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002799e <SSE::~SSE()>:
c002799e:	83 ec 0c             	sub    esp,0xc
c00279a1:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c00279a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279aa:	89 10                	mov    DWORD PTR [eax],edx
c00279ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279b0:	83 ec 0c             	sub    esp,0xc
c00279b3:	50                   	push   eax
c00279b4:	e8 ef c6 fe ff       	call   c00140a8 <FPU::~FPU()>
c00279b9:	83 c4 10             	add    esp,0x10
c00279bc:	90                   	nop
c00279bd:	83 c4 0c             	add    esp,0xc
c00279c0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00279c2 <SSE::~SSE()>:
c00279c2:	83 ec 0c             	sub    esp,0xc
c00279c5:	83 ec 0c             	sub    esp,0xc
c00279c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279cc:	e8 cd ff ff ff       	call   c002799e <SSE::~SSE()>
c00279d1:	83 c4 10             	add    esp,0x10
c00279d4:	83 ec 08             	sub    esp,0x8
c00279d7:	68 58 01 00 00       	push   0x158
c00279dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279e0:	e8 d0 ac fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c00279e5:	83 c4 10             	add    esp,0x10
c00279e8:	83 c4 0c             	add    esp,0xc
c00279eb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00279ec <x87::~x87()>:
c00279ec:	83 ec 0c             	sub    esp,0xc
c00279ef:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c00279f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f8:	89 10                	mov    DWORD PTR [eax],edx
c00279fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279fe:	83 ec 0c             	sub    esp,0xc
c0027a01:	50                   	push   eax
c0027a02:	e8 a1 c6 fe ff       	call   c00140a8 <FPU::~FPU()>
c0027a07:	83 c4 10             	add    esp,0x10
c0027a0a:	90                   	nop
c0027a0b:	83 c4 0c             	add    esp,0xc
c0027a0e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027a10 <x87::~x87()>:
c0027a10:	83 ec 0c             	sub    esp,0xc
c0027a13:	83 ec 0c             	sub    esp,0xc
c0027a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a1a:	e8 cd ff ff ff       	call   c00279ec <x87::~x87()>
c0027a1f:	83 c4 10             	add    esp,0x10
c0027a22:	83 ec 08             	sub    esp,0x8
c0027a25:	68 58 01 00 00       	push   0x158
c0027a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a2e:	e8 82 ac fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027a33:	83 c4 10             	add    esp,0x10
c0027a36:	83 c4 0c             	add    esp,0xc
c0027a39:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a3a <IOAPIC::~IOAPIC()>:
c0027a3a:	83 ec 0c             	sub    esp,0xc
c0027a3d:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0027a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a46:	89 10                	mov    DWORD PTR [eax],edx
c0027a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a4c:	83 ec 0c             	sub    esp,0xc
c0027a4f:	50                   	push   eax
c0027a50:	e8 01 c0 fe ff       	call   c0013a56 <Device::~Device()>
c0027a55:	83 c4 10             	add    esp,0x10
c0027a58:	90                   	nop
c0027a59:	83 c4 0c             	add    esp,0xc
c0027a5c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a5e <IOAPIC::~IOAPIC()>:
c0027a5e:	83 ec 0c             	sub    esp,0xc
c0027a61:	83 ec 0c             	sub    esp,0xc
c0027a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a68:	e8 cd ff ff ff       	call   c0027a3a <IOAPIC::~IOAPIC()>
c0027a6d:	83 c4 10             	add    esp,0x10
c0027a70:	83 ec 08             	sub    esp,0x8
c0027a73:	68 68 01 00 00       	push   0x168
c0027a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a7c:	e8 34 ac fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027a81:	83 c4 10             	add    esp,0x10
c0027a84:	83 c4 0c             	add    esp,0xc
c0027a87:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027a88 <APIC::~APIC()>:
c0027a88:	83 ec 0c             	sub    esp,0xc
c0027a8b:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c0027a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a94:	89 10                	mov    DWORD PTR [eax],edx
c0027a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a9a:	83 ec 0c             	sub    esp,0xc
c0027a9d:	50                   	push   eax
c0027a9e:	e8 cf ca fe ff       	call   c0014572 <InterruptController::~InterruptController()>
c0027aa3:	83 c4 10             	add    esp,0x10
c0027aa6:	90                   	nop
c0027aa7:	83 c4 0c             	add    esp,0xc
c0027aaa:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027aac <APIC::~APIC()>:
c0027aac:	83 ec 0c             	sub    esp,0xc
c0027aaf:	83 ec 0c             	sub    esp,0xc
c0027ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ab6:	e8 cd ff ff ff       	call   c0027a88 <APIC::~APIC()>
c0027abb:	83 c4 10             	add    esp,0x10
c0027abe:	83 ec 08             	sub    esp,0x8
c0027ac1:	68 58 21 00 00       	push   0x2158
c0027ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aca:	e8 e6 ab fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027acf:	83 c4 10             	add    esp,0x10
c0027ad2:	83 c4 0c             	add    esp,0xc
c0027ad5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027ad6 <PIC::~PIC()>:
c0027ad6:	83 ec 0c             	sub    esp,0xc
c0027ad9:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c0027ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae2:	89 10                	mov    DWORD PTR [eax],edx
c0027ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae8:	83 ec 0c             	sub    esp,0xc
c0027aeb:	50                   	push   eax
c0027aec:	e8 81 ca fe ff       	call   c0014572 <InterruptController::~InterruptController()>
c0027af1:	83 c4 10             	add    esp,0x10
c0027af4:	90                   	nop
c0027af5:	83 c4 0c             	add    esp,0xc
c0027af8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027afa <PIC::~PIC()>:
c0027afa:	83 ec 0c             	sub    esp,0xc
c0027afd:	83 ec 0c             	sub    esp,0xc
c0027b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b04:	e8 cd ff ff ff       	call   c0027ad6 <PIC::~PIC()>
c0027b09:	83 c4 10             	add    esp,0x10
c0027b0c:	83 ec 08             	sub    esp,0x8
c0027b0f:	68 58 21 00 00       	push   0x2158
c0027b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b18:	e8 98 ab fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027b1d:	83 c4 10             	add    esp,0x10
c0027b20:	83 c4 0c             	add    esp,0xc
c0027b23:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027b24 <APICTimer::~APICTimer()>:
c0027b24:	83 ec 0c             	sub    esp,0xc
c0027b27:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0027b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b30:	89 10                	mov    DWORD PTR [eax],edx
c0027b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b36:	83 ec 0c             	sub    esp,0xc
c0027b39:	50                   	push   eax
c0027b3a:	e8 33 e8 fe ff       	call   c0016372 <Timer::~Timer()>
c0027b3f:	83 c4 10             	add    esp,0x10
c0027b42:	90                   	nop
c0027b43:	83 c4 0c             	add    esp,0xc
c0027b46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027b48 <APICTimer::~APICTimer()>:
c0027b48:	83 ec 0c             	sub    esp,0xc
c0027b4b:	83 ec 0c             	sub    esp,0xc
c0027b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b52:	e8 cd ff ff ff       	call   c0027b24 <APICTimer::~APICTimer()>
c0027b57:	83 c4 10             	add    esp,0x10
c0027b5a:	83 ec 08             	sub    esp,0x8
c0027b5d:	68 60 01 00 00       	push   0x160
c0027b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b66:	e8 4a ab fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027b6b:	83 c4 10             	add    esp,0x10
c0027b6e:	83 c4 0c             	add    esp,0xc
c0027b71:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b72 <PIT::~PIT()>:
c0027b72:	83 ec 0c             	sub    esp,0xc
c0027b75:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c0027b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b7e:	89 10                	mov    DWORD PTR [eax],edx
c0027b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b84:	83 ec 0c             	sub    esp,0xc
c0027b87:	50                   	push   eax
c0027b88:	e8 e5 e7 fe ff       	call   c0016372 <Timer::~Timer()>
c0027b8d:	83 c4 10             	add    esp,0x10
c0027b90:	90                   	nop
c0027b91:	83 c4 0c             	add    esp,0xc
c0027b94:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027b96 <PIT::~PIT()>:
c0027b96:	83 ec 0c             	sub    esp,0xc
c0027b99:	83 ec 0c             	sub    esp,0xc
c0027b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ba0:	e8 cd ff ff ff       	call   c0027b72 <PIT::~PIT()>
c0027ba5:	83 c4 10             	add    esp,0x10
c0027ba8:	83 ec 08             	sub    esp,0x8
c0027bab:	68 5c 01 00 00       	push   0x15c
c0027bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bb4:	e8 fc aa fe ff       	call   c00126b5 <operator delete(void*, unsigned long)>
c0027bb9:	83 c4 10             	add    esp,0x10
c0027bbc:	83 c4 0c             	add    esp,0xc
c0027bbf:	c3                   	ret    
