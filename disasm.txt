
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c0000025:	3d b0 f4 01 c0       	cmp    eax,0xc001f4b0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 b0 f4 01 c0       	push   0xc001f4b0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c0000051:	2d b0 f4 01 c0       	sub    eax,0xc001f4b0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 b0 f4 01 c0       	push   0xc001f4b0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d e0 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6e0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 58 c9 01 c0       	mov    ebx,0xc001c958
c0000097:	81 eb 54 c9 01 c0    	sub    ebx,0xc001c954
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 54 c9 01 c0       	mov    esi,0xc001c954
c00000a6:	a1 e4 f6 01 c0       	mov    eax,ds:0xc001f6e4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 e4 f6 01 c0       	mov    ds:0xc001f6e4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 e4 f6 01 c0       	mov    eax,ds:0xc001f6e4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 b0 f4 01 c0       	push   0xc001f4b0
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 e0 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f6e0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 e8 f6 01 c0       	push   0xc001f6e8
c0000108:	68 b0 f4 01 c0       	push   0xc001f4b0
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 84 29 01 00       	call   c0012c34 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 40 a0 00 00       	call   c000a308 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 62 29 01 00       	call   c0012c34 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 33 2e 01 00       	call   c0013124 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 82 34 01 00       	call   c001377c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 e0 04 02 c0 	lgdtd  ds:0xc00204e0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 ec fd 00 00       	jmp    c001016e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 00 f7 01 c0       	mov    ds:0xc001f700,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 00 f7 01 c0    	mov    DWORD PTR ds:0xc001f700,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 00 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f700
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 60 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe36a0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 60 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36a0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 60 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe36a0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 60 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe36a0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 60 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36a0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 20 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f720
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 24 f7 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe08dc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 24 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe08dc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 4c f7 01 c0    	cmp    DWORD PTR ds:0xc001f74c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 5c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f75c
c0000d3d:	c7 42 0c 54 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f754
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 20 f7 01 c0 02 	test   BYTE PTR ds:0xc001f720,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 20 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f720
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 24 f7 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe08dc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 24 f7 01 c0 	mov    DWORD PTR [edx*4-0x3ffe08dc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 54 f7 01 c0 	lea    edx,[eax*8-0x3ffe08ac]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 60 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f760
c00010bf:	81 fb 54 f7 01 c0    	cmp    ebx,0xc001f754
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 54 f7 01 c0       	cmp    eax,0xc001f754
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 50 f7 01 c0    	cmp    DWORD PTR ds:0xc001f750,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 5c f7 01 c0       	mov    ds:0xc001f75c,eax
c00010fb:	a3 60 f7 01 c0       	mov    ds:0xc001f760,eax
c0001100:	a3 50 f7 01 c0       	mov    ds:0xc001f750,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 54 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f754
c000110e:	c7 40 0c 54 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f754
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 60 f7 01 c0       	mov    ds:0xc001f760,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 54 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f754
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 18 f7 01 c0 	lea    ebp,[edx*4-0x3ffe08e8]
c000115f:	8b 14 95 20 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08e0]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 20 f7 01 c0 	lea    ecx,[edx*4-0x3ffe08e0]
c000117a:	8b 14 95 20 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08e0]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 54 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe05ac],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 54 f7 01 c0 	lea    eax,[eax*8-0x3ffe08ac]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,ecx
c0001234:	89 0d 60 f7 01 c0    	mov    DWORD PTR ds:0xc001f760,ecx
c000123a:	c7 41 08 54 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f754
c0001241:	c7 41 0c 54 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f754
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 4c f7 01 c0 	lea    edx,[ecx*8-0x3ffe08b4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 54 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ac]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 54 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ac]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 4c f7 01 c0 	lea    edx,[eax*4-0x3ffe08b4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 54 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe05ac],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,edi
c0001307:	89 3d 60 f7 01 c0    	mov    DWORD PTR ds:0xc001f760,edi
c000130d:	c7 47 08 54 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f754
c0001314:	c7 47 0c 54 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f754
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 50 f7 01 c0    	mov    DWORD PTR ds:0xc001f750,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 4c f7 01 c0       	mov    eax,ds:0xc001f74c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 20 f7 01 c0       	mov    edx,0xc001f720
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 74 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa74
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 74 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa74,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 74 fa 01 c0    	mov    DWORD PTR ds:0xc001fa74,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 4c f7 01 c0    	cmp    DWORD PTR ds:0xc001f74c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 7c fa 01 c0    	push   DWORD PTR ds:0xc001fa7c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 7c fa 01 c0       	mov    eax,ds:0xc001fa7c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 4c f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f74c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 4c f7 01 c0       	mov    eax,ds:0xc001f74c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 24 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe08dc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 54 f7 01 c0       	mov    eax,0xc001f754
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 4c fa 01 c0       	cmp    eax,0xc001fa4c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 88 fa 01 c0       	mov    eax,ds:0xc001fa88
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 70 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa70
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 84 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa84
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 94 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa94
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 64 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe359c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 20 f7 01 c0       	mov    eax,ds:0xc001f720
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 64 fa 01 c0    	mov    DWORD PTR ds:0xc001fa64,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 68 fa 01 c0    	mov    DWORD PTR ds:0xc001fa68,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 6c fa 01 c0    	mov    DWORD PTR ds:0xc001fa6c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 74 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa74,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 22 4e 01 00       	jmp    c0016b0c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 50 4e 01 00       	jmp    c0016b50 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 75 4e 01 00       	jmp    c0016b94 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 c0 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3440]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 c0 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3440]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 24 ea 01 c0       	mov    edx,0xc001ea24
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 7c ca 01 c0       	mov    edx,0xc001ca7c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 c0 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0540]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 a0 fa 01 c0    	mov    ax,ds:0xc001faa0
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 a0 fa 01 c0    	mov    ds:0xc001faa0,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 82 ca 01 c0       	mov    eax,0xc001ca82
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 40 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe34c0]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 8b ca 01 c0       	mov    eax,0xc001ca8b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 c0 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3440]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 c0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0540]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 c0 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0540],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 10 cb 01 c0       	mov    eax,0xc001cb10
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 c0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0540]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 00 cb 01 c0       	mov    ebx,0xc001cb00
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba e0 ca 01 c0       	mov    edx,0xc001cae0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba f0 ca 01 c0       	mov    edx,0xc001caf0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 92 ca 01 c0       	mov    edx,0xc001ca92
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 9e ca 01 c0       	mov    edx,0xc001ca9e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba b2 ca 01 c0       	mov    edx,0xc001cab2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c e0 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cee0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 e0 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cee0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 e0 cc 01 c0       	mov    eax,0xc001cce0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 20 cc 01 c0       	mov    eax,0xc001cc20
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 e0 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3420]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 40 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09c0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 a0 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0960]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 f0 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0410],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 80 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f680
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 69 14 01 00       	call   c00173e8 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 40 f6 01 c0       	mov    eax,0xc001f640
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 a0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0960]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 d4 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204d4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 e0 cf 01 c0       	push   0xc001cfe0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 a0 04 02 c0       	mov    ecx,0xc00204a0
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 60 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe04a0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 60 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe04a0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 64 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe049c],esi
c000634e:	89 87 60 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04a0],eax
c0006354:	c7 87 68 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0498],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 f0 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0410],0x0
c0006370:	89 87 6c fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0494],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 60 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe04a0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 60 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04a0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 f0 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0410]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 68 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0498]
c00063e9:	8b 8d 6c fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0494]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 60 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe04a0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 40 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe09c0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 68 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0498]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 68 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe0498],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 60 fb 01 c0    	lea    ecx,[ebp-0x3ffe04a0]
c00064e1:	83 bd 60 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04a0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 6c fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0494]
c000651f:	05 60 fb 01 c0       	add    eax,0xc001fb60
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 68 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0498]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 60 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04a0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb f0 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0410],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 68 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0498]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 60 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04a0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba f0 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0410],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 6c fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0494]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 60 fb 01 c0    	lea    esi,[eax-0x3ffe04a0]
c00065e4:	83 b8 60 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe04a0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 a0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0960]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 68 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0498]
c0006653:	81 c2 60 fb 01 c0    	add    edx,0xc001fb60
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 a0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0960]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 78 fb 01 c0    	lea    ebp,[eax-0x3ffe0488]
c00066b9:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 78 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0488],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 e0 cf 01 c0       	push   0xc001cfe0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 73 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe048d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 70 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe0490],eax
c000678f:	89 91 74 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe048c],edx
c0006795:	81 c1 60 fb 01 c0    	add    ecx,0xc001fb60
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 70 fb 01 c0       	add    eax,0xc001fb70
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 80 f6 01 c0       	mov    ds:0xc001f680,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 d4 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204d4,0x0
c00067df:	a1 cc 04 02 c0       	mov    eax,ds:0xc00204cc
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 a0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0960]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 e3 cf 01 c0       	push   0xc001cfe3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 a0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0960]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 d4 04 02 c0       	mov    ds:0xc00204d4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 cc 04 02 c0       	mov    eax,ds:0xc00204cc
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 a0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0960]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 ea cf 01 c0       	push   0xc001cfea
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 a0 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0960]
c000687d:	bf a0 04 02 c0       	mov    edi,0xc00204a0
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 a2 04 02 c0       	mov    eax,0xc00204a2
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c00068a0:	b8 aa 04 02 c0       	mov    eax,0xc00204aa
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 c4 04 02 c0       	mov    ds:0xc00204c4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 60 fb 01 c0       	push   0xc001fb60
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 60 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fb60,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 d0 04 02 c0       	mov    ds:0xc00204d0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 40 fb 01 c0       	mov    ds:0xc001fb40,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d a0 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0960],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 40 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09c0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d a0 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0960]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 40 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09c0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 d0 04 02 c0       	mov    eax,ds:0xc00204d0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 40 fb 01 c0       	mov    eax,ds:0xc001fb40
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 40 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fb40,0x0
c00069a9:	c7 05 d0 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204d0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 8e 50 00 00       	call   c000ba66 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 f1 cf 01 c0       	push   0xc001cff1
c0006a09:	e8 fd 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0006a28:	50                   	push   eax
c0006a29:	68 0a d0 01 c0       	push   0xc001d00a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 32 c5 00 00       	call   c0012f68 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 29 c7 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 b0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237b0
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 c8 3b 01 c0       	push   0xc0013bc8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 14 c7 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 68 37 02 c0       	mov    ds:0xc0023768,eax
c0006a68:	68 08 d1 01 c0       	push   0xc001d108
c0006a6d:	c6 05 dd 04 02 c0 01 	mov    BYTE PTR ds:0xc00204dd,0x1
c0006a74:	e8 92 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006a79:	e8 29 d5 00 00       	call   c0013fa7 <Vm::initialise8086()>
c0006a7e:	e8 27 3e 00 00       	call   c000a8aa <Fs::initVFS()>
c0006a83:	c7 04 24 17 d0 01 c0 	mov    DWORD PTR [esp],0xc001d017
c0006a8a:	e8 7c 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006a8f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 08 d1 01 c0       	push   0xc001d108
c0006aae:	e8 58 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006ab3:	e8 2e 95 00 00       	call   c000ffe6 <Krnl::loadSystemEnv()>
c0006ab8:	e8 8b 97 00 00       	call   c0010248 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 31 d0 01 c0       	push   0xc001d031
c0006ac7:	68 3a d0 01 c0       	push   0xc001d03a
c0006acc:	e8 85 aa 00 00       	call   c0011556 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 df 48 00 00       	call   c000b3b8 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 2c d1 01 c0 	mov    DWORD PTR [esp],0xc001d12c
c0006ae0:	e8 26 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 6d 4f 00 00       	call   c000ba64 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 42 d0 01 c0 	mov    DWORD PTR [esp],0xc001d042
c0006afe:	e8 08 90 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 53 d0 01 c0       	push   0xc001d053
c0006b12:	e8 8b be 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 b3 c0 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 63 ca 00 00       	call   c0013590 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 6f d0 01 c0       	push   0xc001d06f
c0006b41:	50                   	push   eax
c0006b42:	e8 99 4f 00 00       	call   c000bae0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 78 d1 01 c0       	mov    edx,0xc001d178
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 f1 04 02 c0 04 	test   BYTE PTR ds:0xc00204f1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 25 4d 01 00       	call   c001b956 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 cc 83 00 00       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 a5 83 00 00       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 83 83 00 00       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 61 83 00 00       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 f0 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00204f0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 6f 82 00 00       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 4a 82 00 00       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 8f 4b 01 00       	call   c001b910 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 ec 48 01 00       	call   c001b690 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 66 82 00 00       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 78 d0 01 c0       	push   0xc001d078
c0006e14:	e8 6a 93 00 00       	call   c0010183 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 7e d0 01 c0       	push   0xc001d07e
c0006e4c:	e8 32 93 00 00       	call   c0010183 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 17 7c 00 00       	jmp    c000eab0 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 f0 04 02 c0 04 	test   BYTE PTR ds:0xc00204f0,0x4
c0006ee8:	68 84 d0 01 c0       	push   0xc001d084
c0006eed:	0f 94 05 80 f1 01 c0 	sete   BYTE PTR ds:0xc001f180
c0006ef4:	e8 12 8c 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 39 77 00 00       	call   c000e648 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 2a 4a 00 00       	call   c000b948 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 9c d0 01 c0 	mov    DWORD PTR [esp],0xc001d09c
c0006f37:	e8 cf 8b 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 9e 81 00 00       	call   c000f0f0 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 e7 49 00 00       	call   c000b948 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 4c d1 01 c0       	push   0xc001d14c
c0006f7e:	e8 88 8b 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006f83:	e8 56 e1 00 00       	call   c00150de <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 b6 d0 01 c0 	mov    DWORD PTR [esp],0xc001d0b6
c0006f8f:	e8 77 8b 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 ec c2 00 00       	call   c001328c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 d1 d0 01 c0       	push   0xc001d0d1
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 17 35 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 e2 d0 01 c0       	push   0xc001d0e2
c000700e:	e8 70 91 00 00       	call   c0010183 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 ef d0 01 c0       	push   0xc001d0ef
c0007023:	e8 5b 91 00 00       	call   c0010183 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 f9 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d0f9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 44 91 00 00       	jmp    c0010183 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 e2 04 02 c0       	mov    ds:0xc00204e2,eax
c00070cf:	66 89 15 e0 04 02 c0 	mov    WORD PTR ds:0xc00204e0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007217:	48                   	dec    eax
c0007218:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 93 db 00 00       	call   c0014db8 <HalSystemIdle()>
c0007225:	e8 e8 4c 01 00       	call   c001bf12 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 e8 04 02 c0 ff 07 	mov    WORD PTR ds:0xc00204e8,0x7ff
c000731d:	a3 ea 04 02 c0       	mov    ds:0xc00204ea,eax
c0007322:	0f 01 1d e8 04 02 c0 	lidtd  ds:0xc00204e8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 20 b7 01 c0       	push   0xc001b720
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 30 b7 01 c0       	push   0xc001b730
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 3a b7 01 c0       	push   0xc001b73a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 44 b7 01 c0       	push   0xc001b744
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 4e b7 01 c0       	push   0xc001b74e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 58 b7 01 c0       	push   0xc001b758
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 62 b7 01 c0       	push   0xc001b762
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 6c b7 01 c0       	push   0xc001b76c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 76 b7 01 c0       	push   0xc001b776
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 7e b7 01 c0       	push   0xc001b77e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 88 b7 01 c0       	push   0xc001b788
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 90 b7 01 c0       	push   0xc001b790
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 98 b7 01 c0       	push   0xc001b798
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 a0 b7 01 c0       	push   0xc001b7a0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 a8 b7 01 c0       	push   0xc001b7a8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 b0 b7 01 c0       	push   0xc001b7b0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ba b7 01 c0       	push   0xc001b7ba
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 c4 b7 01 c0       	push   0xc001b7c4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ce b7 01 c0       	push   0xc001b7ce
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 68 b8 01 c0       	push   0xc001b868
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 6f b8 01 c0       	push   0xc001b86f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 5a b8 01 c0       	push   0xc001b85a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 61 b8 01 c0       	push   0xc001b861
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 d8 b7 01 c0       	push   0xc001b7d8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 e2 b7 01 c0       	push   0xc001b7e2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 ec b7 01 c0       	push   0xc001b7ec
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 f6 b7 01 c0       	push   0xc001b7f6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 00 b8 01 c0       	push   0xc001b800
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 0a b8 01 c0       	push   0xc001b80a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 14 b8 01 c0       	push   0xc001b814
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 1e b8 01 c0       	push   0xc001b81e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 28 b8 01 c0       	push   0xc001b828
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 32 b8 01 c0       	push   0xc001b832
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 3c b8 01 c0       	push   0xc001b83c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 46 b8 01 c0       	push   0xc001b846
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 50 b8 01 c0       	push   0xc001b850
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 a6 b8 01 c0       	push   0xc001b8a6
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 b0 b8 01 c0       	push   0xc001b8b0
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 ba b8 01 c0       	push   0xc001b8ba
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 c4 b8 01 c0       	push   0xc001b8c4
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 ce b8 01 c0       	push   0xc001b8ce
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 d8 b8 01 c0       	push   0xc001b8d8
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 e2 b8 01 c0       	push   0xc001b8e2
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 ec b8 01 c0       	push   0xc001b8ec
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007614:	e8 35 24 00 00       	call   c0009a4e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 c1 15 00 00       	call   c0008bf8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 76 b7 01 c0       	push   0xc001b776
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 f6 15 00 00       	call   c0008c3c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 74 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f174
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 d0 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205d0
c00076c2:	8b 3d 74 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f174
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 70 22 00 00       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 74 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f174,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 74 f1 01 c0       	mov    eax,ds:0xc001f174
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 9c d1 01 c0       	push   0xc001d19c
c000770e:	e8 f5 2d 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 cc d1 01 c0       	push   0xc001d1cc
c000772d:	e8 51 8a 00 00       	call   c0010183 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 d1 d1 01 c0       	push   0xc001d1d1
c0007743:	e8 3b 8a 00 00       	call   c0010183 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007763:	48                   	dec    eax
c0007764:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007781:	e8 c8 22 00 00       	call   c0009a4e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007797:	e8 6e 1f 00 00       	call   c000970a <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 f0 04 02 c0       	mov    ds:0xc00204f0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 d8 d1 01 c0       	push   0xc001d1d8
c0007862:	e8 a1 2c 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 31 82 00 00       	call   c000fa9d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 ec 1b 00 00       	call   c0009474 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 9d 1c 00 00       	call   c0009530 <VAS::VAS()>
c0007893:	89 1d d0 05 02 c0    	mov    DWORD PTR ds:0xc00205d0,ebx
c0007899:	e8 0c 46 01 00       	call   c001beaa <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 d8 04 02 c0    	mov    DWORD PTR ds:0xc00204d8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 17 1f 00 00       	call   c00097e6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 0c 05 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfaf4],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 f0 d1 01 c0       	push   0xc001d1f0
c000792c:	e8 52 88 00 00       	call   c0010183 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 0c 05 02 c0    	lea    edx,[ebp-0x3ffdfaf4]
c000796e:	8d 84 05 0d 05 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfaf3]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 04 05 02 c0    	add    DWORD PTR ds:0xc0020504,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 f0 d1 01 c0       	push   0xc001d1f0
c0007993:	e8 eb 87 00 00       	call   c0010183 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 04 05 02 c0    	sub    DWORD PTR ds:0xc0020504,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 0c 05 02 c0       	add    eax,0xc002050c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 78 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f178
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 78 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f178
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 78 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f178
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 04 05 02 c0    	dec    DWORD PTR ds:0xc0020504
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 95 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d295
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 00 87 00 00       	jmp    c0010183 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 f8 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204f8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d f8 04 02 c0    	mov    DWORD PTR ds:0xc00204f8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 f8 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204f8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 1c 05 02 c0 01 	xor    BYTE PTR ds:0xc002051c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 38 27 00 00       	call   c000a228 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 18 d2 01 c0       	push   0xc001d218
c0007aff:	e8 7f 86 00 00       	call   c0010183 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 04 05 02 c0    	inc    DWORD PTR ds:0xc0020504
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007b99:	48                   	dec    eax
c0007b9a:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d fc 04 02 c0    	cmp    DWORD PTR ds:0xc00204fc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d fc 04 02 c0    	mov    DWORD PTR ds:0xc00204fc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 0c 05 02 c0       	push   0xc002050c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 ab d2 01 c0       	push   0xc001d2ab
c0007c18:	e8 eb 28 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 48 d2 01 c0       	push   0xc001d248
c0007ca4:	e8 5f 28 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 6c d2 01 c0       	push   0xc001d26c
c0007d40:	e8 c3 27 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 08 05 02 c0    	add    eax,DWORD PTR ds:0xc0020508
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 d1 d2 01 c0       	push   0xc001d2d1
c0007d76:	e8 8d 27 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 c3 d2 01 c0       	push   0xc001d2c3
c0007de5:	e8 99 83 00 00       	call   c0010183 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 08 05 02 c0 02 	add    DWORD PTR ds:0xc0020508,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 30 d3 01 c0       	mov    edx,0xc001d330
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 83 11 00 00       	call   c0009054 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 18 25 00 00       	call   c000a412 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ed d2 01 c0       	push   0xc001d2ed
c0007fa7:	e8 d7 81 00 00       	call   c0010183 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007ff0:	e8 9f b3 00 00       	call   c0013394 <schedule()>
c0007ff5:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 03 3d 01 00       	call   c001bd90 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 0a d3 01 c0       	push   0xc001d30a
c00080a2:	e8 dc 80 00 00       	call   c0010183 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 a2 0d 00 00       	call   c0008e72 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 30 d3 01 c0       	mov    edx,0xc001d330
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba bc d3 01 c0       	mov    edx,0xc001d3bc
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 0f 0f 00 00       	call   c0009054 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 a1 22 00 00       	call   c000a412 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 ec 45 00 00       	call   c000c778 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 be dd 00 00       	call   c0015f70 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d a0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e60]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d a0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e60]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 58 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fa8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 30 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fd0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 e1 da 00 00       	call   c0015dfc <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 3c db 00 00       	jmp    c0015f04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 44 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d344
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 6f 7d 00 00       	jmp    c0010183 <KePanic(char const*)>
c0008414:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 24 05 02 c0    	mov    DWORD PTR ds:0xc0020524,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 f0 2d 00 00       	jmp    c000b35f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 52 d3 01 c0       	mov    esi,0xc001d352
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 4e d6 00 00       	call   c0015f04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 64 05 00 00       	call   c0008e72 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba bc d3 01 c0       	mov    edx,0xc001d3bc
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 32 09 00 00       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 9a 0f 00 00       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f8                	mov    eax,edi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 6b 01 00 00    	je     c0008bc9 <VgaText::receiveKey(unsigned char)+0x183>
c0008a5e:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	0f 85 94 00 00 00    	jne    c0008b00 <VgaText::receiveKey(unsigned char)+0xba>
c0008a6c:	83 ec 0c             	sub    esp,0xc
c0008a6f:	56                   	push   esi
c0008a70:	e8 cb 7a ff ff       	call   c0000540 <strlen>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	85 c0                	test   eax,eax
c0008a7a:	0f 84 ea 00 00 00    	je     c0008b6a <VgaText::receiveKey(unsigned char)+0x124>
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	6a 08                	push   0x8
c0008a84:	53                   	push   ebx
c0008a85:	e8 7a fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008a8d:	e8 ae 7a ff ff       	call   c0000540 <strlen>
c0008a92:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008a9a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008a9d:	e8 9e 7a ff ff       	call   c0000540 <strlen>
c0008aa2:	83 c4 10             	add    esp,0x10
c0008aa5:	84 c0                	test   al,al
c0008aa7:	0f 85 bd 00 00 00    	jne    c0008b6a <VgaText::receiveKey(unsigned char)+0x124>
c0008aad:	83 ec 0c             	sub    esp,0xc
c0008ab0:	56                   	push   esi
c0008ab1:	e8 8a 7a ff ff       	call   c0000540 <strlen>
c0008ab6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008abe:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ad1:	e8 6a 7a ff ff       	call   c0000540 <strlen>
c0008ad6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ade:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ae1:	e8 5a 7a ff ff       	call   c0000540 <strlen>
c0008ae6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008aee:	89 34 24             	mov    DWORD PTR [esp],esi
c0008af1:	e8 4a 7a ff ff       	call   c0000540 <strlen>
c0008af6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008afe:	eb 67                	jmp    c0008b67 <VgaText::receiveKey(unsigned char)+0x121>
c0008b00:	3c 0d                	cmp    al,0xd
c0008b02:	0f 95 c2             	setne  dl
c0008b05:	3c 18                	cmp    al,0x18
c0008b07:	0f 96 c0             	setbe  al
c0008b0a:	84 c2                	test   dl,al
c0008b0c:	74 30                	je     c0008b3e <VgaText::receiveKey(unsigned char)+0xf8>
c0008b0e:	8d 47 f7             	lea    eax,[edi-0x9]
c0008b11:	3c 01                	cmp    al,0x1
c0008b13:	76 29                	jbe    c0008b3e <VgaText::receiveKey(unsigned char)+0xf8>
c0008b15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b1b:	68 63 d3 01 c0       	push   0xc001d363
c0008b20:	53                   	push   ebx
c0008b21:	e8 82 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b26:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b29:	8d 47 40             	lea    eax,[edi+0x40]
c0008b2c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b2f:	0f b6 c0             	movzx  eax,al
c0008b32:	50                   	push   eax
c0008b33:	53                   	push   ebx
c0008b34:	e8 fd f9 ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b39:	83 c4 20             	add    esp,0x20
c0008b3c:	eb 11                	jmp    c0008b4f <VgaText::receiveKey(unsigned char)+0x109>
c0008b3e:	89 f8                	mov    eax,edi
c0008b40:	51                   	push   ecx
c0008b41:	0f be c0             	movsx  eax,al
c0008b44:	51                   	push   ecx
c0008b45:	50                   	push   eax
c0008b46:	53                   	push   ebx
c0008b47:	e8 b8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b4c:	83 c4 10             	add    esp,0x10
c0008b4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b54:	89 f8                	mov    eax,edi
c0008b56:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b5a:	52                   	push   edx
c0008b5b:	52                   	push   edx
c0008b5c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b60:	50                   	push   eax
c0008b61:	56                   	push   esi
c0008b62:	e8 59 7c ff ff       	call   c00007c0 <strcat>
c0008b67:	83 c4 10             	add    esp,0x10
c0008b6a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b71:	75 06                	jne    c0008b79 <VgaText::receiveKey(unsigned char)+0x133>
c0008b73:	89 f8                	mov    eax,edi
c0008b75:	3c 0a                	cmp    al,0xa
c0008b77:	75 50                	jne    c0008bc9 <VgaText::receiveKey(unsigned char)+0x183>
c0008b79:	83 ec 0c             	sub    esp,0xc
c0008b7c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b82:	53                   	push   ebx
c0008b83:	e8 b8 79 ff ff       	call   c0000540 <strlen>
c0008b88:	89 34 24             	mov    DWORD PTR [esp],esi
c0008b8b:	89 c7                	mov    edi,eax
c0008b8d:	e8 ae 79 ff ff       	call   c0000540 <strlen>
c0008b92:	83 c4 10             	add    esp,0x10
c0008b95:	8d 44 07 04          	lea    eax,[edi+eax*1+0x4]
c0008b99:	3d 80 00 00 00       	cmp    eax,0x80
c0008b9e:	76 10                	jbe    c0008bb0 <VgaText::receiveKey(unsigned char)+0x16a>
c0008ba0:	83 ec 0c             	sub    esp,0xc
c0008ba3:	68 69 d3 01 c0       	push   0xc001d369
c0008ba8:	e8 d6 75 00 00       	call   c0010183 <KePanic(char const*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	50                   	push   eax
c0008bb1:	50                   	push   eax
c0008bb2:	56                   	push   esi
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 07 7c ff ff       	call   c00007c0 <strcat>
c0008bb9:	83 c4 0c             	add    esp,0xc
c0008bbc:	6a 30                	push   0x30
c0008bbe:	6a 00                	push   0x0
c0008bc0:	56                   	push   esi
c0008bc1:	e8 0a 79 ff ff       	call   c00004d0 <memset>
c0008bc6:	83 c4 10             	add    esp,0x10
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	5b                   	pop    ebx
c0008bcd:	5e                   	pop    esi
c0008bce:	5f                   	pop    edi
c0008bcf:	c3                   	ret    

c0008bd0 <VgaText::doUpdate()>:
c0008bd0:	c3                   	ret    

c0008bd1 <newTerminal(char*)>:
c0008bd1:	83 ec 28             	sub    esp,0x28
c0008bd4:	68 34 01 00 00       	push   0x134
c0008bd9:	e8 db eb ff ff       	call   c00077b9 <malloc>
c0008bde:	5a                   	pop    edx
c0008bdf:	59                   	pop    ecx
c0008be0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008be4:	50                   	push   eax
c0008be5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008be9:	e8 0c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf2:	83 c4 2c             	add    esp,0x2c
c0008bf5:	c3                   	ret    
c0008bf6:	66 90                	xchg   ax,ax

c0008bf8 <TSS::TSS()>:
c0008bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c03:	90                   	nop
c0008c04:	c3                   	ret    
c0008c05:	90                   	nop
c0008c06:	66 90                	xchg   ax,ax

c0008c08 <TSS::setESP(unsigned long)>:
c0008c08:	55                   	push   ebp
c0008c09:	89 e5                	mov    ebp,esp
c0008c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c17:	90                   	nop
c0008c18:	5d                   	pop    ebp
c0008c19:	c3                   	ret    
c0008c1a:	66 90                	xchg   ax,ax

c0008c1c <TSS::flush()>:
c0008c1c:	55                   	push   ebp
c0008c1d:	89 e5                	mov    ebp,esp
c0008c1f:	83 ec 10             	sub    esp,0x10
c0008c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c27:	83 c8 03             	or     eax,0x3
c0008c2a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c2e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c32:	66 89 d0             	mov    ax,dx
c0008c35:	0f 00 d8             	ltr    ax
c0008c38:	90                   	nop
c0008c39:	c9                   	leave  
c0008c3a:	c3                   	ret    
c0008c3b:	90                   	nop

c0008c3c <TSS::setup(unsigned long, unsigned long)>:
c0008c3c:	55                   	push   ebp
c0008c3d:	89 e5                	mov    ebp,esp
c0008c3f:	83 ec 18             	sub    esp,0x18
c0008c42:	83 ec 0c             	sub    esp,0xc
c0008c45:	6a 68                	push   0x68
c0008c47:	e8 6d eb ff ff       	call   c00077b9 <malloc>
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 c2                	mov    edx,eax
c0008c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5d:	83 ec 04             	sub    esp,0x4
c0008c60:	6a 68                	push   0x68
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 66 78 ff ff       	call   c00004d0 <memset>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008ce2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ceb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d04:	0f 20 da             	mov    edx,cr3
c0008d07:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008d0d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d16:	83 ec 08             	sub    esp,0x8
c0008d19:	50                   	push   eax
c0008d1a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d1d:	50                   	push   eax
c0008d1e:	e8 1d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008d23:	83 c4 10             	add    esp,0x10
c0008d26:	83 ec 08             	sub    esp,0x8
c0008d29:	6a 68                	push   0x68
c0008d2b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d2e:	50                   	push   eax
c0008d2f:	e8 28 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d3b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d3e:	83 e0 0f             	and    eax,0xf
c0008d41:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d44:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d47:	83 c8 40             	or     eax,0x40
c0008d4a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d4d:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0008d52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d58:	05 78 01 00 00       	add    eax,0x178
c0008d5d:	83 ec 04             	sub    esp,0x4
c0008d60:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d63:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d66:	50                   	push   eax
c0008d67:	e8 24 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	89 c2                	mov    edx,eax
c0008d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d74:	89 10                	mov    DWORD PTR [eax],edx
c0008d76:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0008d7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d81:	05 78 01 00 00       	add    eax,0x178
c0008d86:	83 ec 0c             	sub    esp,0xc
c0008d89:	50                   	push   eax
c0008d8a:	e8 2b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d97:	c9                   	leave  
c0008d98:	c3                   	ret    
c0008d99:	90                   	nop

c0008d9a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008da2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008da5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008daa:	75 08                	jne    c0008db4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008dac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008db2:	eb 38                	jmp    c0008dec <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008db4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008db9:	75 17                	jne    c0008dd2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008dc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008dc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008dc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008dcf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008dd2:	89 c1                	mov    ecx,eax
c0008dd4:	83 e1 fd             	and    ecx,0xfffffffd
c0008dd7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008ddd:	74 cd                	je     c0008dac <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008ddf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008de4:	83 e0 ef             	and    eax,0xffffffef
c0008de7:	83 f8 08             	cmp    eax,0x8
c0008dea:	76 c0                	jbe    c0008dac <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dec:	31 c0                	xor    eax,eax
c0008dee:	c3                   	ret    
c0008def:	90                   	nop

c0008df0 <ReservedFilename::isAtty()>:
c0008df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008df4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008df7:	31 c0                	xor    eax,eax
c0008df9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dff:	74 09                	je     c0008e0a <ReservedFilename::isAtty()+0x1a>
c0008e01:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e07:	0f 94 c0             	sete   al
c0008e0a:	c3                   	ret    
c0008e0b:	90                   	nop

c0008e0c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e1b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e20:	75 08                	jne    c0008e2a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e22:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e28:	eb 3d                	jmp    c0008e67 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e2a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e2f:	75 17                	jne    c0008e48 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e45:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e4d:	75 04                	jne    c0008e53 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e4f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e51:	eb 14                	jmp    c0008e67 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e53:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e58:	74 c8                	je     c0008e22 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e5a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e5f:	83 e0 ef             	and    eax,0xffffffef
c0008e62:	83 f8 08             	cmp    eax,0x8
c0008e65:	76 bb                	jbe    c0008e22 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e67:	31 c0                	xor    eax,eax
c0008e69:	c3                   	ret    

c0008e6a <UnixFile::getFileDescriptor()>:
c0008e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e71:	c3                   	ret    

c0008e72 <UnixFile::UnixFile(int)>:
c0008e72:	53                   	push   ebx
c0008e73:	83 ec 28             	sub    esp,0x28
c0008e76:	ba 84 d4 01 c0       	mov    edx,0xc001d484
c0008e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e7f:	89 10                	mov    DWORD PTR [eax],edx
c0008e81:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e89:	0f 8f 8c 01 00 00    	jg     c000901b <UnixFile::UnixFile(int)+0x1a9>
c0008e8f:	a1 e0 f1 01 c0       	mov    eax,ds:0xc001f1e0
c0008e94:	8d 50 01             	lea    edx,[eax+0x1]
c0008e97:	89 15 e0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e0,edx
c0008e9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008ea1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008ea4:	83 ec 08             	sub    esp,0x8
c0008ea7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008eab:	68 b8 05 02 c0       	push   0xc00205b8
c0008eb0:	e8 c3 30 01 00       	call   c001bf78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008eb5:	83 c4 10             	add    esp,0x10
c0008eb8:	a0 b4 05 02 c0       	mov    al,ds:0xc00205b4
c0008ebd:	83 f0 01             	xor    eax,0x1
c0008ec0:	84 c0                	test   al,al
c0008ec2:	0f 84 54 01 00 00    	je     c000901c <UnixFile::UnixFile(int)+0x1aa>
c0008ec8:	c6 05 b4 05 02 c0 01 	mov    BYTE PTR ds:0xc00205b4,0x1
c0008ecf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 03 ff ff 0f       	push   0xfffff03
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 2c 01 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d ac 05 02 c0    	mov    DWORD PTR ds:0xc00205ac,ebx
c0008eff:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 01 ff ff 0f       	push   0xfffff01
c0008f20:	53                   	push   ebx
c0008f21:	e8 fc 00 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d b0 05 02 c0    	mov    DWORD PTR ds:0xc00205b0,ebx
c0008f2f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 00 ff ff 0f       	push   0xfffff00
c0008f50:	53                   	push   ebx
c0008f51:	e8 cc 00 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d a4 05 02 c0    	mov    DWORD PTR ds:0xc00205a4,ebx
c0008f5f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f6e:	e8 46 e8 ff ff       	call   c00077b9 <malloc>
c0008f73:	83 c4 10             	add    esp,0x10
c0008f76:	89 c3                	mov    ebx,eax
c0008f78:	83 ec 08             	sub    esp,0x8
c0008f7b:	68 02 ff ff 0f       	push   0xfffff02
c0008f80:	53                   	push   ebx
c0008f81:	e8 9c 00 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	89 1d a8 05 02 c0    	mov    DWORD PTR ds:0xc00205a8,ebx
c0008f8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f97:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f9c:	7f 7e                	jg     c000901c <UnixFile::UnixFile(int)+0x1aa>
c0008f9e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008fad:	e8 07 e8 ff ff       	call   c00077b9 <malloc>
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	89 c3                	mov    ebx,eax
c0008fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbb:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fc0:	83 ec 08             	sub    esp,0x8
c0008fc3:	50                   	push   eax
c0008fc4:	53                   	push   ebx
c0008fc5:	e8 58 00 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd1:	89 1c 85 80 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa80],ebx
c0008fd8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fe0:	83 ec 0c             	sub    esp,0xc
c0008fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe7:	e8 cd e7 ff ff       	call   c00077b9 <malloc>
c0008fec:	83 c4 10             	add    esp,0x10
c0008fef:	89 c3                	mov    ebx,eax
c0008ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ff5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008ffa:	83 ec 08             	sub    esp,0x8
c0008ffd:	50                   	push   eax
c0008ffe:	53                   	push   ebx
c0008fff:	e8 1e 00 00 00       	call   c0009022 <ReservedFilename::ReservedFilename(int)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000900b:	89 1c 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],ebx
c0009012:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009016:	e9 7c ff ff ff       	jmp    c0008f97 <UnixFile::UnixFile(int)+0x125>
c000901b:	90                   	nop
c000901c:	83 c4 28             	add    esp,0x28
c000901f:	5b                   	pop    ebx
c0009020:	c3                   	ret    
c0009021:	90                   	nop

c0009022 <ReservedFilename::ReservedFilename(int)>:
c0009022:	83 ec 0c             	sub    esp,0xc
c0009025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009029:	83 ec 08             	sub    esp,0x8
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	50                   	push   eax
c0009031:	e8 3c fe ff ff       	call   c0008e72 <UnixFile::UnixFile(int)>
c0009036:	83 c4 10             	add    esp,0x10
c0009039:	ba a0 d4 01 c0       	mov    edx,0xc001d4a0
c000903e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009042:	89 10                	mov    DWORD PTR [eax],edx
c0009044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009048:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000904c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000904f:	90                   	nop
c0009050:	83 c4 0c             	add    esp,0xc
c0009053:	c3                   	ret    

c0009054 <UnixFile::~UnixFile()>:
c0009054:	83 ec 1c             	sub    esp,0x1c
c0009057:	ba 84 d4 01 c0       	mov    edx,0xc001d484
c000905c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009060:	89 10                	mov    DWORD PTR [eax],edx
c0009062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009069:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000906e:	7f 73                	jg     c00090e3 <UnixFile::~UnixFile()+0x8f>
c0009070:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009078:	83 ec 0c             	sub    esp,0xc
c000907b:	68 b8 05 02 c0       	push   0xc00205b8
c0009080:	e8 c7 2f 01 00       	call   c001c04c <LinkedList<UnixFile>::getFirstElement()>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000908c:	83 ec 0c             	sub    esp,0xc
c000908f:	68 b8 05 02 c0       	push   0xc00205b8
c0009094:	e8 bb 2f 01 00       	call   c001c054 <LinkedList<UnixFile>::removeFirst()>
c0009099:	83 c4 10             	add    esp,0x10
c000909c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00090a0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00090a4:	74 40                	je     c00090e6 <UnixFile::~UnixFile()+0x92>
c00090a6:	83 ec 08             	sub    esp,0x8
c00090a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00090ad:	68 b8 05 02 c0       	push   0xc00205b8
c00090b2:	e8 c1 2e 01 00       	call   c001bf78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090be:	8d 50 01             	lea    edx,[eax+0x1]
c00090c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090ca:	0f 94 c0             	sete   al
c00090cd:	84 c0                	test   al,al
c00090cf:	74 a7                	je     c0009078 <UnixFile::~UnixFile()+0x24>
c00090d1:	83 ec 0c             	sub    esp,0xc
c00090d4:	68 5c d4 01 c0       	push   0xc001d45c
c00090d9:	e8 a5 70 00 00       	call   c0010183 <KePanic(char const*)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	eb 95                	jmp    c0009078 <UnixFile::~UnixFile()+0x24>
c00090e3:	90                   	nop
c00090e4:	eb 01                	jmp    c00090e7 <UnixFile::~UnixFile()+0x93>
c00090e6:	90                   	nop
c00090e7:	90                   	nop
c00090e8:	83 c4 1c             	add    esp,0x1c
c00090eb:	c3                   	ret    

c00090ec <UnixFile::~UnixFile()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f6:	e8 59 ff ff ff       	call   c0009054 <UnixFile::~UnixFile()>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	83 ec 08             	sub    esp,0x8
c0009101:	6a 0c                	push   0xc
c0009103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009107:	e8 06 13 00 00       	call   c000a412 <operator delete(void*, unsigned long)>
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	83 c4 0c             	add    esp,0xc
c0009112:	c3                   	ret    
c0009113:	90                   	nop

c0009114 <ReservedFilename::~ReservedFilename()>:
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	ba a0 d4 01 c0       	mov    edx,0xc001d4a0
c000911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009120:	89 10                	mov    DWORD PTR [eax],edx
c0009122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009126:	83 ec 0c             	sub    esp,0xc
c0009129:	50                   	push   eax
c000912a:	e8 25 ff ff ff       	call   c0009054 <UnixFile::~UnixFile()>
c000912f:	83 c4 10             	add    esp,0x10
c0009132:	90                   	nop
c0009133:	83 c4 0c             	add    esp,0xc
c0009136:	c3                   	ret    
c0009137:	90                   	nop

c0009138 <ReservedFilename::~ReservedFilename()>:
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	83 ec 0c             	sub    esp,0xc
c000913e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009142:	e8 cd ff ff ff       	call   c0009114 <ReservedFilename::~ReservedFilename()>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	83 ec 08             	sub    esp,0x8
c000914d:	6a 0c                	push   0xc
c000914f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009153:	e8 ba 12 00 00       	call   c000a412 <operator delete(void*, unsigned long)>
c0009158:	83 c4 10             	add    esp,0x10
c000915b:	83 c4 0c             	add    esp,0xc
c000915e:	c3                   	ret    

c000915f <getFromFileDescriptor(int)>:
c000915f:	53                   	push   ebx
c0009160:	83 ec 08             	sub    esp,0x8
c0009163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009167:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000916d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009173:	7f 2c                	jg     c00091a1 <getFromFileDescriptor(int)+0x42>
c0009175:	83 ec 0c             	sub    esp,0xc
c0009178:	68 b8 05 02 c0       	push   0xc00205b8
c000917d:	e8 ca 2e 01 00       	call   c001c04c <LinkedList<UnixFile>::getFirstElement()>
c0009182:	83 c4 10             	add    esp,0x10
c0009185:	85 c0                	test   eax,eax
c0009187:	75 04                	jne    c000918d <getFromFileDescriptor(int)+0x2e>
c0009189:	31 c0                	xor    eax,eax
c000918b:	eb 6e                	jmp    c00091fb <getFromFileDescriptor(int)+0x9c>
c000918d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009190:	74 69                	je     c00091fb <getFromFileDescriptor(int)+0x9c>
c0009192:	52                   	push   edx
c0009193:	52                   	push   edx
c0009194:	50                   	push   eax
c0009195:	68 b8 05 02 c0       	push   0xc00205b8
c000919a:	e8 57 2f 01 00       	call   c001c0f6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000919f:	eb e1                	jmp    c0009182 <getFromFileDescriptor(int)+0x23>
c00091a1:	a1 ac 05 02 c0       	mov    eax,ds:0xc00205ac
c00091a6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00091ac:	74 4d                	je     c00091fb <getFromFileDescriptor(int)+0x9c>
c00091ae:	a1 b0 05 02 c0       	mov    eax,ds:0xc00205b0
c00091b3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00091b9:	74 40                	je     c00091fb <getFromFileDescriptor(int)+0x9c>
c00091bb:	a1 a8 05 02 c0       	mov    eax,ds:0xc00205a8
c00091c0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091c6:	74 33                	je     c00091fb <getFromFileDescriptor(int)+0x9c>
c00091c8:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c00091cd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091d3:	74 26                	je     c00091fb <getFromFileDescriptor(int)+0x9c>
c00091d5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091db:	83 f8 08             	cmp    eax,0x8
c00091de:	77 09                	ja     c00091e9 <getFromFileDescriptor(int)+0x8a>
c00091e0:	8b 04 85 80 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa80]
c00091e7:	eb 12                	jmp    c00091fb <getFromFileDescriptor(int)+0x9c>
c00091e9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091ef:	83 fb 08             	cmp    ebx,0x8
c00091f2:	77 95                	ja     c0009189 <getFromFileDescriptor(int)+0x2a>
c00091f4:	8b 04 9d 40 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfac0]
c00091fb:	83 c4 08             	add    esp,0x8
c00091fe:	5b                   	pop    ebx
c00091ff:	c3                   	ret    

c0009200 <__static_initialization_and_destruction_0(int, int)>:
c0009200:	83 ec 0c             	sub    esp,0xc
c0009203:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009208:	75 34                	jne    c000923e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000920a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009212:	75 2a                	jne    c000923e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009214:	83 ec 0c             	sub    esp,0xc
c0009217:	68 b8 05 02 c0       	push   0xc00205b8
c000921c:	e8 15 2d 01 00       	call   c001bf36 <LinkedList<UnixFile>::LinkedList()>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	83 ec 04             	sub    esp,0x4
c0009227:	68 70 f1 01 c0       	push   0xc001f170
c000922c:	68 b8 05 02 c0       	push   0xc00205b8
c0009231:	68 34 bf 01 c0       	push   0xc001bf34
c0009236:	e8 87 11 00 00       	call   c000a3c2 <__cxa_atexit>
c000923b:	83 c4 10             	add    esp,0x10
c000923e:	90                   	nop
c000923f:	83 c4 0c             	add    esp,0xc
c0009242:	c3                   	ret    

c0009243 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009243:	83 ec 0c             	sub    esp,0xc
c0009246:	83 ec 08             	sub    esp,0x8
c0009249:	68 ff ff 00 00       	push   0xffff
c000924e:	6a 01                	push   0x1
c0009250:	e8 ab ff ff ff       	call   c0009200 <__static_initialization_and_destruction_0(int, int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	83 c4 0c             	add    esp,0xc
c000925b:	c3                   	ret    

c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000925c:	53                   	push   ebx
c000925d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009261:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009265:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000926b:	89 c8                	mov    eax,ecx
c000926d:	d1 e8                	shr    eax,1
c000926f:	03 05 e8 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1e8
c0009275:	83 e1 01             	and    ecx,0x1
c0009278:	8a 10                	mov    dl,BYTE PTR [eax]
c000927a:	75 09                	jne    c0009285 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000927c:	83 e2 f0             	and    edx,0xfffffff0
c000927f:	09 da                	or     edx,ebx
c0009281:	88 10                	mov    BYTE PTR [eax],dl
c0009283:	5b                   	pop    ebx
c0009284:	c3                   	ret    
c0009285:	c1 e3 04             	shl    ebx,0x4
c0009288:	83 e2 0f             	and    edx,0xf
c000928b:	09 da                	or     edx,ebx
c000928d:	88 10                	mov    BYTE PTR [eax],dl
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    

c0009291 <Virt::getPageState(unsigned long)>:
c0009291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009295:	8b 0d e8 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1e8
c000929b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00092a1:	89 d0                	mov    eax,edx
c00092a3:	d1 e8                	shr    eax,1
c00092a5:	83 e2 01             	and    edx,0x1
c00092a8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00092ab:	75 04                	jne    c00092b1 <Virt::getPageState(unsigned long)+0x20>
c00092ad:	83 e0 0f             	and    eax,0xf
c00092b0:	c3                   	ret    
c00092b1:	c0 e8 04             	shr    al,0x4
c00092b4:	c3                   	ret    

c00092b5 <Virt::allocateKernelVirtualPages(int)>:
c00092b5:	55                   	push   ebp
c00092b6:	31 ed                	xor    ebp,ebp
c00092b8:	57                   	push   edi
c00092b9:	56                   	push   esi
c00092ba:	53                   	push   ebx
c00092bb:	31 db                	xor    ebx,ebx
c00092bd:	83 ec 1c             	sub    esp,0x1c
c00092c0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092c4:	8b 3d e4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1e4
c00092ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092cf:	57                   	push   edi
c00092d0:	e8 bc ff ff ff       	call   c0009291 <Virt::getPageState(unsigned long)>
c00092d5:	5a                   	pop    edx
c00092d6:	84 c0                	test   al,al
c00092d8:	75 3a                	jne    c0009314 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092da:	85 db                	test   ebx,ebx
c00092dc:	75 02                	jne    c00092e0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092de:	89 fd                	mov    ebp,edi
c00092e0:	43                   	inc    ebx
c00092e1:	39 f3                	cmp    ebx,esi
c00092e3:	74 5a                	je     c000933f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092e5:	47                   	inc    edi
c00092e6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ec:	76 31                	jbe    c000931f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092ee:	c7 05 e4 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f1e4,0xc8000
c00092f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092fd:	75 28                	jne    c0009327 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092ff:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009304:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009309:	57                   	push   edi
c000930a:	e8 82 ff ff ff       	call   c0009291 <Virt::getPageState(unsigned long)>
c000930f:	5a                   	pop    edx
c0009310:	84 c0                	test   al,al
c0009312:	74 c6                	je     c00092da <Virt::allocateKernelVirtualPages(int)+0x25>
c0009314:	31 db                	xor    ebx,ebx
c0009316:	47                   	inc    edi
c0009317:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000931d:	77 cf                	ja     c00092ee <Virt::allocateKernelVirtualPages(int)+0x39>
c000931f:	89 3d e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,edi
c0009325:	eb a8                	jmp    c00092cf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	68 b4 d4 01 c0       	push   0xc001d4b4
c000932f:	e8 4f 6e 00 00       	call   c0010183 <KePanic(char const*)>
c0009334:	8b 3d e4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1e4
c000933a:	83 c4 10             	add    esp,0x10
c000933d:	eb 90                	jmp    c00092cf <Virt::allocateKernelVirtualPages(int)+0x1a>
c000933f:	89 2d e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,ebp
c0009345:	4b                   	dec    ebx
c0009346:	74 5f                	je     c00093a7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009348:	85 f6                	test   esi,esi
c000934a:	74 3d                	je     c0009389 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000934c:	89 e8                	mov    eax,ebp
c000934e:	31 db                	xor    ebx,ebx
c0009350:	8d 7e ff             	lea    edi,[esi-0x1]
c0009353:	eb 14                	jmp    c0009369 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009355:	6a 01                	push   0x1
c0009357:	43                   	inc    ebx
c0009358:	50                   	push   eax
c0009359:	e8 fe fe ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000935e:	58                   	pop    eax
c000935f:	39 f3                	cmp    ebx,esi
c0009361:	5a                   	pop    edx
c0009362:	74 25                	je     c0009389 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009364:	a1 e4 f1 01 c0       	mov    eax,ds:0xc001f1e4
c0009369:	8d 50 01             	lea    edx,[eax+0x1]
c000936c:	85 db                	test   ebx,ebx
c000936e:	89 15 e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,edx
c0009374:	74 20                	je     c0009396 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009376:	39 df                	cmp    edi,ebx
c0009378:	75 db                	jne    c0009355 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000937a:	6a 03                	push   0x3
c000937c:	43                   	inc    ebx
c000937d:	50                   	push   eax
c000937e:	e8 d9 fe ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009383:	59                   	pop    ecx
c0009384:	39 f3                	cmp    ebx,esi
c0009386:	58                   	pop    eax
c0009387:	75 db                	jne    c0009364 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009389:	83 c4 1c             	add    esp,0x1c
c000938c:	89 e8                	mov    eax,ebp
c000938e:	5b                   	pop    ebx
c000938f:	c1 e0 0c             	shl    eax,0xc
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    
c0009396:	6a 02                	push   0x2
c0009398:	bb 01 00 00 00       	mov    ebx,0x1
c000939d:	50                   	push   eax
c000939e:	e8 b9 fe ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093a3:	58                   	pop    eax
c00093a4:	5a                   	pop    edx
c00093a5:	eb bd                	jmp    c0009364 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00093a7:	6a 04                	push   0x4
c00093a9:	8d 45 01             	lea    eax,[ebp+0x1]
c00093ac:	55                   	push   ebp
c00093ad:	a3 e4 f1 01 c0       	mov    ds:0xc001f1e4,eax
c00093b2:	e8 a5 fe ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093b7:	59                   	pop    ecx
c00093b8:	89 e8                	mov    eax,ebp
c00093ba:	5b                   	pop    ebx
c00093bb:	c1 e0 0c             	shl    eax,0xc
c00093be:	83 c4 1c             	add    esp,0x1c
c00093c1:	5b                   	pop    ebx
c00093c2:	5e                   	pop    esi
c00093c3:	5f                   	pop    edi
c00093c4:	5d                   	pop    ebp
c00093c5:	c3                   	ret    

c00093c6 <Virt::freeSwapfilePage(unsigned long)>:
c00093c6:	53                   	push   ebx
c00093c7:	8b 15 cc 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205cc
c00093cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093d1:	b8 01 00 00 00       	mov    eax,0x1
c00093d6:	89 cb                	mov    ebx,ecx
c00093d8:	d3 e0                	shl    eax,cl
c00093da:	c1 eb 05             	shr    ebx,0x5
c00093dd:	f7 d0                	not    eax
c00093df:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093e2:	5b                   	pop    ebx
c00093e3:	c3                   	ret    

c00093e4 <Virt::swapIDToSector(unsigned long)>:
c00093e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093e8:	0f af 05 ec f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f1ec
c00093ef:	03 05 f4 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1f4
c00093f5:	c3                   	ret    

c00093f6 <Virt::allocateSwapfilePage()>:
c00093f6:	55                   	push   ebp
c00093f7:	31 d2                	xor    edx,edx
c00093f9:	57                   	push   edi
c00093fa:	56                   	push   esi
c00093fb:	53                   	push   ebx
c00093fc:	83 ec 0c             	sub    esp,0xc
c00093ff:	8b 0d ec f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ec
c0009405:	a1 f0 f1 01 c0       	mov    eax,ds:0xc001f1f0
c000940a:	f7 f1                	div    ecx
c000940c:	39 0d f0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1f0,ecx
c0009412:	72 2d                	jb     c0009441 <Virt::allocateSwapfilePage()+0x4b>
c0009414:	8b 35 cc 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205cc
c000941a:	8b 16                	mov    edx,DWORD PTR [esi]
c000941c:	f6 c2 01             	test   dl,0x1
c000941f:	74 3c                	je     c000945d <Virt::allocateSwapfilePage()+0x67>
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	bf 01 00 00 00       	mov    edi,0x1
c0009428:	eb 12                	jmp    c000943c <Virt::allocateSwapfilePage()+0x46>
c000942a:	89 fd                	mov    ebp,edi
c000942c:	89 ca                	mov    edx,ecx
c000942e:	d3 e5                	shl    ebp,cl
c0009430:	c1 ea 05             	shr    edx,0x5
c0009433:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009436:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009438:	85 ea                	test   edx,ebp
c000943a:	74 2a                	je     c0009466 <Virt::allocateSwapfilePage()+0x70>
c000943c:	41                   	inc    ecx
c000943d:	39 c8                	cmp    eax,ecx
c000943f:	77 e9                	ja     c000942a <Virt::allocateSwapfilePage()+0x34>
c0009441:	83 ec 0c             	sub    esp,0xc
c0009444:	68 1b d6 01 c0       	push   0xc001d61b
c0009449:	e8 35 6d 00 00       	call   c0010183 <KePanic(char const*)>
c000944e:	83 c4 10             	add    esp,0x10
c0009451:	31 c9                	xor    ecx,ecx
c0009453:	83 c4 0c             	add    esp,0xc
c0009456:	89 c8                	mov    eax,ecx
c0009458:	5b                   	pop    ebx
c0009459:	5e                   	pop    esi
c000945a:	5f                   	pop    edi
c000945b:	5d                   	pop    ebp
c000945c:	c3                   	ret    
c000945d:	89 f3                	mov    ebx,esi
c000945f:	bd 01 00 00 00       	mov    ebp,0x1
c0009464:	31 c9                	xor    ecx,ecx
c0009466:	09 ea                	or     edx,ebp
c0009468:	89 c8                	mov    eax,ecx
c000946a:	89 13                	mov    DWORD PTR [ebx],edx
c000946c:	83 c4 0c             	add    esp,0xc
c000946f:	5b                   	pop    ebx
c0009470:	5e                   	pop    esi
c0009471:	5f                   	pop    edi
c0009472:	5d                   	pop    ebp
c0009473:	c3                   	ret    

c0009474 <Virt::virtualMemorySetup()>:
c0009474:	53                   	push   ebx
c0009475:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 d9 fd ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x6>
c000948d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009492:	6a 00                	push   0x0
c0009494:	53                   	push   ebx
c0009495:	43                   	inc    ebx
c0009496:	e8 c1 fd ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000949b:	59                   	pop    ecx
c000949c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00094a2:	58                   	pop    eax
c00094a3:	75 ed                	jne    c0009492 <Virt::virtualMemorySetup()+0x1e>
c00094a5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00094aa:	6a 0f                	push   0xf
c00094ac:	53                   	push   ebx
c00094ad:	43                   	inc    ebx
c00094ae:	e8 a9 fd ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094b3:	58                   	pop    eax
c00094b4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00094ba:	5a                   	pop    edx
c00094bb:	75 ed                	jne    c00094aa <Virt::virtualMemorySetup()+0x36>
c00094bd:	5b                   	pop    ebx
c00094be:	c3                   	ret    

c00094bf <Virt::setupPageSwapping(int)>:
c00094bf:	53                   	push   ebx
c00094c0:	83 ec 0c             	sub    esp,0xc
c00094c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094c7:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c00094cc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094d4:	53                   	push   ebx
c00094d5:	c1 e3 0b             	shl    ebx,0xb
c00094d8:	68 32 d6 01 c0       	push   0xc001d632
c00094dd:	50                   	push   eax
c00094de:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094e1:	89 1d f0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1f0,ebx
c00094e7:	c6 05 f8 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f1f8,0x43
c00094ee:	c1 eb 08             	shr    ebx,0x8
c00094f1:	a3 f4 f1 01 c0       	mov    ds:0xc001f1f4,eax
c00094f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094f9:	c7 05 ec f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f1ec,0x8
c0009503:	e8 b1 e2 ff ff       	call   c00077b9 <malloc>
c0009508:	83 c4 0c             	add    esp,0xc
c000950b:	89 c1                	mov    ecx,eax
c000950d:	a3 cc 05 02 c0       	mov    ds:0xc00205cc,eax
c0009512:	31 d2                	xor    edx,edx
c0009514:	a1 f0 f1 01 c0       	mov    eax,ds:0xc001f1f0
c0009519:	f7 35 ec f1 01 c0    	div    DWORD PTR ds:0xc001f1ec
c000951f:	c1 e8 05             	shr    eax,0x5
c0009522:	50                   	push   eax
c0009523:	6a 00                	push   0x0
c0009525:	51                   	push   ecx
c0009526:	e8 a5 6f ff ff       	call   c00004d0 <memset>
c000952b:	83 c4 18             	add    esp,0x18
c000952e:	5b                   	pop    ebx
c000952f:	c3                   	ret    

c0009530 <VAS::VAS()>:
c0009530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009534:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000953b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954a:	a3 d0 05 02 c0       	mov    ds:0xc00205d0,eax
c000954f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009553:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000955e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009562:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009569:	90                   	nop
c000956a:	c3                   	ret    
c000956b:	90                   	nop

c000956c <VAS::VAS(VAS*)>:
c000956c:	83 ec 0c             	sub    esp,0xc
c000956f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009573:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000957a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000957e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009585:	83 ec 0c             	sub    esp,0xc
c0009588:	68 d4 d4 01 c0       	push   0xc001d4d4
c000958d:	e8 f1 6b 00 00       	call   c0010183 <KePanic(char const*)>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	90                   	nop
c0009596:	83 c4 0c             	add    esp,0xc
c0009599:	c3                   	ret    

c000959a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000959a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959e:	89 c2                	mov    edx,eax
c00095a0:	c1 e8 0a             	shr    eax,0xa
c00095a3:	c1 ea 16             	shr    edx,0x16
c00095a6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00095ab:	19 c9                	sbb    ecx,ecx
c00095ad:	c1 e2 0c             	shl    edx,0xc
c00095b0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00095b6:	25 fc 0f 00 00       	and    eax,0xffc
c00095bb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00095c2:	01 d0                	add    eax,edx
c00095c4:	c3                   	ret    
c00095c5:	90                   	nop

c00095c6 <VAS::getPageTableEntry(unsigned long)>:
c00095c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095ca:	89 ca                	mov    edx,ecx
c00095cc:	c1 e9 0a             	shr    ecx,0xa
c00095cf:	c1 ea 16             	shr    edx,0x16
c00095d2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095d8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095de:	c1 e0 0c             	shl    eax,0xc
c00095e1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095e4:	c3                   	ret    

c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095e5:	57                   	push   edi
c00095e6:	56                   	push   esi
c00095e7:	be 01 00 00 00       	mov    esi,0x1
c00095ec:	53                   	push   ebx
c00095ed:	83 ec 10             	sub    esp,0x10
c00095f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095f4:	c1 eb 0c             	shr    ebx,0xc
c00095f7:	eb 3f                	jmp    c0009638 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095f9:	83 ec 08             	sub    esp,0x8
c00095fc:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c0009601:	57                   	push   edi
c0009602:	50                   	push   eax
c0009603:	e8 be ff ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c0009608:	83 c4 10             	add    esp,0x10
c000960b:	8b 00                	mov    eax,DWORD PTR [eax]
c000960d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009611:	f6 c4 04             	test   ah,0x4
c0009614:	75 60                	jne    c0009676 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009616:	80 fa 04             	cmp    dl,0x4
c0009619:	74 79                	je     c0009694 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000961b:	80 fa 02             	cmp    dl,0x2
c000961e:	0f 84 89 00 00 00    	je     c00096ad <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009624:	80 fa 03             	cmp    dl,0x3
c0009627:	0f 84 ae 00 00 00    	je     c00096db <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000962d:	fe ca                	dec    dl
c000962f:	0f 84 93 00 00 00    	je     c00096c8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009635:	43                   	inc    ebx
c0009636:	31 f6                	xor    esi,esi
c0009638:	53                   	push   ebx
c0009639:	89 df                	mov    edi,ebx
c000963b:	e8 51 fc ff ff       	call   c0009291 <Virt::getPageState(unsigned long)>
c0009640:	c1 e7 0c             	shl    edi,0xc
c0009643:	5a                   	pop    edx
c0009644:	84 c0                	test   al,al
c0009646:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000964a:	75 ad                	jne    c00095f9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000964c:	83 ec 0c             	sub    esp,0xc
c000964f:	68 49 d6 01 c0       	push   0xc001d649
c0009654:	e8 2a 6b 00 00       	call   c0010183 <KePanic(char const*)>
c0009659:	5a                   	pop    edx
c000965a:	59                   	pop    ecx
c000965b:	57                   	push   edi
c000965c:	8b 3d d0 05 02 c0    	mov    edi,DWORD PTR ds:0xc00205d0
c0009662:	57                   	push   edi
c0009663:	e8 5e ff ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8b 00                	mov    eax,DWORD PTR [eax]
c000966d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009671:	f6 c4 04             	test   ah,0x4
c0009674:	74 bf                	je     c0009635 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009676:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000967a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000967f:	83 ec 0c             	sub    esp,0xc
c0009682:	50                   	push   eax
c0009683:	e8 ab e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000968f:	80 fa 04             	cmp    dl,0x4
c0009692:	75 87                	jne    c000961b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009694:	89 f0                	mov    eax,esi
c0009696:	84 c0                	test   al,al
c0009698:	75 47                	jne    c00096e1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000969a:	c7 44 24 20 f8 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d4f8
c00096a2:	83 c4 10             	add    esp,0x10
c00096a5:	5b                   	pop    ebx
c00096a6:	5e                   	pop    esi
c00096a7:	5f                   	pop    edi
c00096a8:	e9 d6 6a 00 00       	jmp    c0010183 <KePanic(char const*)>
c00096ad:	89 f0                	mov    eax,esi
c00096af:	84 c0                	test   al,al
c00096b1:	75 15                	jne    c00096c8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096b3:	83 ec 0c             	sub    esp,0xc
c00096b6:	68 65 d6 01 c0       	push   0xc001d665
c00096bb:	e8 c3 6a 00 00       	call   c0010183 <KePanic(char const*)>
c00096c0:	83 c4 10             	add    esp,0x10
c00096c3:	e9 6d ff ff ff       	jmp    c0009635 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096c8:	83 ec 08             	sub    esp,0x8
c00096cb:	6a 00                	push   0x0
c00096cd:	53                   	push   ebx
c00096ce:	e8 89 fb ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d3:	83 c4 10             	add    esp,0x10
c00096d6:	e9 5a ff ff ff       	jmp    c0009635 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096db:	89 f0                	mov    eax,esi
c00096dd:	84 c0                	test   al,al
c00096df:	75 15                	jne    c00096f6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096e1:	83 ec 08             	sub    esp,0x8
c00096e4:	6a 00                	push   0x0
c00096e6:	53                   	push   ebx
c00096e7:	e8 70 fb ff ff       	call   c000925c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	83 c4 10             	add    esp,0x10
c00096f2:	5b                   	pop    ebx
c00096f3:	5e                   	pop    esi
c00096f4:	5f                   	pop    edi
c00096f5:	c3                   	ret    
c00096f6:	c7 44 24 20 81 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d681
c00096fe:	83 c4 10             	add    esp,0x10
c0009701:	5b                   	pop    ebx
c0009702:	5e                   	pop    esi
c0009703:	5f                   	pop    edi
c0009704:	e9 7a 6a 00 00       	jmp    c0010183 <KePanic(char const*)>
c0009709:	90                   	nop

c000970a <VAS::freeAllocatedPages(unsigned long)>:
c000970a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009712:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009716:	74 09                	je     c0009721 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000971c:	e9 c4 fe ff ff       	jmp    c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009721:	c7 44 24 04 1c d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d51c
c0009729:	e9 da 0d 00 00       	jmp    c000a508 <Dbg::kprintf(char const*, ...)>

c000972e <VAS::virtualToPhysical(unsigned long)>:
c000972e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009732:	50                   	push   eax
c0009733:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009737:	52                   	push   edx
c0009738:	e8 89 fe ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c000973d:	59                   	pop    ecx
c000973e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009740:	5a                   	pop    edx
c0009741:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009746:	c3                   	ret    
c0009747:	90                   	nop

c0009748 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009748:	55                   	push   ebp
c0009749:	57                   	push   edi
c000974a:	56                   	push   esi
c000974b:	53                   	push   ebx
c000974c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009750:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009754:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009758:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000975c:	85 db                	test   ebx,ebx
c000975e:	7e 22                	jle    c0009782 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009760:	c1 e3 0c             	shl    ebx,0xc
c0009763:	01 f3                	add    ebx,esi
c0009765:	56                   	push   esi
c0009766:	81 c6 00 10 00 00    	add    esi,0x1000
c000976c:	55                   	push   ebp
c000976d:	e8 54 fe ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c0009772:	5a                   	pop    edx
c0009773:	59                   	pop    ecx
c0009774:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009776:	21 f9                	and    ecx,edi
c0009778:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000977c:	39 f3                	cmp    ebx,esi
c000977e:	89 08                	mov    DWORD PTR [eax],ecx
c0009780:	75 e3                	jne    c0009765 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009782:	5b                   	pop    ebx
c0009783:	5e                   	pop    esi
c0009784:	5f                   	pop    edi
c0009785:	5d                   	pop    ebp
c0009786:	c3                   	ret    
c0009787:	90                   	nop

c0009788 <VAS::setToWriteCombining(unsigned long, int)>:
c0009788:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000978d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009793:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000979a:	75 01                	jne    c000979d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000979c:	c3                   	ret    
c000979d:	68 80 00 00 00       	push   0x80
c00097a2:	6a ff                	push   0xffffffff
c00097a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097a8:	50                   	push   eax
c00097a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097ad:	52                   	push   edx
c00097ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00097b2:	51                   	push   ecx
c00097b3:	e8 90 ff ff ff       	call   c0009748 <VAS::reflagRange(unsigned long, int, int, int)>
c00097b8:	83 c4 14             	add    esp,0x14
c00097bb:	c3                   	ret    

c00097bc <VAS::mapOtherVASIn(bool, VAS*)>:
c00097bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097c5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097cc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097cf:	19 c0                	sbb    eax,eax
c00097d1:	83 ca 03             	or     edx,0x3
c00097d4:	83 e0 fc             	and    eax,0xfffffffc
c00097d7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097de:	0f 20 d8             	mov    eax,cr3
c00097e1:	0f 22 d8             	mov    cr3,eax
c00097e4:	c3                   	ret    
c00097e5:	90                   	nop

c00097e6 <VAS::~VAS()>:
c00097e6:	83 ec 2c             	sub    esp,0x2c
c00097e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097f1:	fa                   	cli    
c00097f2:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00097f7:	40                   	inc    eax
c00097f8:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00097fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009802:	8b 00                	mov    eax,DWORD PTR [eax]
c0009804:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009807:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000980d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009811:	6a 01                	push   0x1
c0009813:	50                   	push   eax
c0009814:	e8 a3 ff ff ff       	call   c00097bc <VAS::mapOtherVASIn(bool, VAS*)>
c0009819:	83 c4 0c             	add    esp,0xc
c000981c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009824:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000982c:	0f 8f d4 00 00 00    	jg     c0009906 <VAS::~VAS()+0x120>
c0009832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009836:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009839:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983d:	c1 e2 02             	shl    edx,0x2
c0009840:	01 d0                	add    eax,edx
c0009842:	8b 00                	mov    eax,DWORD PTR [eax]
c0009844:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000984c:	83 e0 01             	and    eax,0x1
c000984f:	0f 84 a8 00 00 00    	je     c00098fd <VAS::~VAS()+0x117>
c0009855:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000985d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009865:	7f 72                	jg     c00098d9 <VAS::~VAS()+0xf3>
c0009867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986b:	c1 e0 0a             	shl    eax,0xa
c000986e:	89 c2                	mov    edx,eax
c0009870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009874:	01 d0                	add    eax,edx
c0009876:	c1 e0 0c             	shl    eax,0xc
c0009879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000987d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009882:	8b 00                	mov    eax,DWORD PTR [eax]
c0009884:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009887:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000988d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009891:	6a 01                	push   0x1
c0009893:	50                   	push   eax
c0009894:	e8 01 fd ff ff       	call   c000959a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009899:	83 c4 0c             	add    esp,0xc
c000989c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098ae:	25 01 04 00 00       	and    eax,0x401
c00098b3:	3d 01 04 00 00       	cmp    eax,0x401
c00098b8:	75 19                	jne    c00098d3 <VAS::~VAS()+0xed>
c00098ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098c3:	83 ec 0c             	sub    esp,0xc
c00098c6:	50                   	push   eax
c00098c7:	e8 67 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098cc:	83 c4 10             	add    esp,0x10
c00098cf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098d3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098d7:	eb 84                	jmp    c000985d <VAS::~VAS()+0x77>
c00098d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098dd:	25 00 04 00 00       	and    eax,0x400
c00098e2:	74 19                	je     c00098fd <VAS::~VAS()+0x117>
c00098e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098ed:	83 ec 0c             	sub    esp,0xc
c00098f0:	50                   	push   eax
c00098f1:	e8 3d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f6:	83 c4 10             	add    esp,0x10
c00098f9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098fd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009901:	e9 1e ff ff ff       	jmp    c0009824 <VAS::~VAS()+0x3e>
c0009906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000990a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000990d:	83 ec 0c             	sub    esp,0xc
c0009910:	50                   	push   eax
c0009911:	e8 cf fc ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000991d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	50                   	push   eax
c0009924:	e8 0a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009929:	83 c4 10             	add    esp,0x10
c000992c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009930:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0009935:	48                   	dec    eax
c0009936:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000993b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0009940:	85 c0                	test   eax,eax
c0009942:	75 01                	jne    c0009945 <VAS::~VAS()+0x15f>
c0009944:	fb                   	sti    
c0009945:	90                   	nop
c0009946:	83 c4 2c             	add    esp,0x2c
c0009949:	c3                   	ret    

c000994a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000994a:	55                   	push   ebp
c000994b:	57                   	push   edi
c000994c:	56                   	push   esi
c000994d:	53                   	push   ebx
c000994e:	83 ec 1c             	sub    esp,0x1c
c0009951:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009955:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009959:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000995f:	77 0b                	ja     c000996c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009961:	0f 20 d8             	mov    eax,cr3
c0009964:	0f 20 d8             	mov    eax,cr3
c0009967:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000996a:	75 47                	jne    c00099b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000996c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009970:	09 d8                	or     eax,ebx
c0009972:	a9 ff 0f 00 00       	test   eax,0xfff
c0009977:	75 57                	jne    c00099d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009979:	89 de                	mov    esi,ebx
c000997b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000997e:	c1 ee 16             	shr    esi,0x16
c0009981:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009988:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000998c:	74 54                	je     c00099e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000998e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009992:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009998:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000999c:	c1 e6 0c             	shl    esi,0xc
c000999f:	c1 eb 0a             	shr    ebx,0xa
c00099a2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00099a8:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	5b                   	pop    ebx
c00099af:	5e                   	pop    esi
c00099b0:	5f                   	pop    edi
c00099b1:	5d                   	pop    ebp
c00099b2:	c3                   	ret    
c00099b3:	83 ec 0c             	sub    esp,0xc
c00099b6:	68 40 d5 01 c0       	push   0xc001d540
c00099bb:	e8 48 0b 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00099c0:	83 c4 10             	add    esp,0x10
c00099c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099c7:	09 d8                	or     eax,ebx
c00099c9:	a9 ff 0f 00 00       	test   eax,0xfff
c00099ce:	74 a9                	je     c0009979 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099d0:	83 ec 0c             	sub    esp,0xc
c00099d3:	68 a8 d5 01 c0       	push   0xc001d5a8
c00099d8:	e8 a6 67 00 00       	call   c0010183 <KePanic(char const*)>
c00099dd:	83 c4 10             	add    esp,0x10
c00099e0:	eb 97                	jmp    c0009979 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099e6:	e8 aa e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099eb:	83 ec 0c             	sub    esp,0xc
c00099ee:	89 c5                	mov    ebp,eax
c00099f0:	8b 0d d0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205d0
c00099f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099fa:	6a 01                	push   0x1
c00099fc:	e8 b4 f8 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0009a01:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a08:	6a 01                	push   0x1
c0009a0a:	50                   	push   eax
c0009a0b:	55                   	push   ebp
c0009a0c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a12:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a16:	51                   	push   ecx
c0009a17:	e8 28 02 00 00       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a1c:	83 c4 1c             	add    esp,0x1c
c0009a1f:	68 00 10 00 00       	push   0x1000
c0009a24:	6a 00                	push   0x0
c0009a26:	50                   	push   eax
c0009a27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a2b:	e8 a0 6a ff ff       	call   c00004d0 <memset>
c0009a30:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a34:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a37:	e8 a9 fb ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a40:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a49:	e9 40 ff ff ff       	jmp    c000998e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a4e <VAS::allocatePages(int, int)>:
c0009a4e:	55                   	push   ebp
c0009a4f:	57                   	push   edi
c0009a50:	56                   	push   esi
c0009a51:	53                   	push   ebx
c0009a52:	83 ec 1c             	sub    esp,0x1c
c0009a55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a59:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009a5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a64:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a6a:	83 e0 01             	and    eax,0x1
c0009a6d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a71:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a75:	0f 85 cc 00 00 00    	jne    c0009b47 <VAS::allocatePages(int, int)+0xf9>
c0009a7b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a82:	85 c0                	test   eax,eax
c0009a84:	0f 84 a1 00 00 00    	je     c0009b2b <VAS::allocatePages(int, int)+0xdd>
c0009a8a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a92:	c1 e6 0c             	shl    esi,0xc
c0009a95:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a99:	85 c0                	test   eax,eax
c0009a9b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a9e:	7e 33                	jle    c0009ad3 <VAS::allocatePages(int, int)+0x85>
c0009aa0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009aa4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa8:	81 cd 00 04 00 00    	or     ebp,0x400
c0009aae:	e8 e2 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ab3:	55                   	push   ebp
c0009ab4:	53                   	push   ebx
c0009ab5:	50                   	push   eax
c0009ab6:	57                   	push   edi
c0009ab7:	e8 8e fe ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009abc:	83 c4 10             	add    esp,0x10
c0009abf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ac4:	74 03                	je     c0009ac9 <VAS::allocatePages(int, int)+0x7b>
c0009ac6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009acf:	39 de                	cmp    esi,ebx
c0009ad1:	75 db                	jne    c0009aae <VAS::allocatePages(int, int)+0x60>
c0009ad3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ad8:	75 12                	jne    c0009aec <VAS::allocatePages(int, int)+0x9e>
c0009ada:	0f 20 d8             	mov    eax,cr3
c0009add:	0f 22 d8             	mov    cr3,eax
c0009ae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ae4:	83 c4 1c             	add    esp,0x1c
c0009ae7:	5b                   	pop    ebx
c0009ae8:	5e                   	pop    esi
c0009ae9:	5f                   	pop    edi
c0009aea:	5d                   	pop    ebp
c0009aeb:	c3                   	ret    
c0009aec:	c1 ee 0a             	shr    esi,0xa
c0009aef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009af3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009af9:	c1 eb 0a             	shr    ebx,0xa
c0009afc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b02:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b08:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b0e:	39 c3                	cmp    ebx,eax
c0009b10:	77 ce                	ja     c0009ae0 <VAS::allocatePages(int, int)+0x92>
c0009b12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b1b:	39 d8                	cmp    eax,ebx
c0009b1d:	73 f3                	jae    c0009b12 <VAS::allocatePages(int, int)+0xc4>
c0009b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b23:	83 c4 1c             	add    esp,0x1c
c0009b26:	5b                   	pop    ebx
c0009b27:	5e                   	pop    esi
c0009b28:	5f                   	pop    edi
c0009b29:	5d                   	pop    ebp
c0009b2a:	c3                   	ret    
c0009b2b:	83 ec 0c             	sub    esp,0xc
c0009b2e:	68 cc d5 01 c0       	push   0xc001d5cc
c0009b33:	e8 4b 66 00 00       	call   c0010183 <KePanic(char const*)>
c0009b38:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b3f:	83 c4 10             	add    esp,0x10
c0009b42:	e9 43 ff ff ff       	jmp    c0009a8a <VAS::allocatePages(int, int)+0x3c>
c0009b47:	83 ec 0c             	sub    esp,0xc
c0009b4a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b4e:	51                   	push   ecx
c0009b4f:	e8 61 f7 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0009b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b58:	83 c4 10             	add    esp,0x10
c0009b5b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b60:	0f 87 9b 00 00 00    	ja     c0009c01 <VAS::allocatePages(int, int)+0x1b3>
c0009b66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b6a:	85 d2                	test   edx,edx
c0009b6c:	7e 3c                	jle    c0009baa <VAS::allocatePages(int, int)+0x15c>
c0009b6e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b76:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b7a:	c1 e5 0c             	shl    ebp,0xc
c0009b7d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b83:	01 dd                	add    ebp,ebx
c0009b85:	e8 0b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b8a:	56                   	push   esi
c0009b8b:	53                   	push   ebx
c0009b8c:	50                   	push   eax
c0009b8d:	57                   	push   edi
c0009b8e:	e8 b7 fd ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b93:	83 c4 10             	add    esp,0x10
c0009b96:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9b:	74 03                	je     c0009ba0 <VAS::allocatePages(int, int)+0x152>
c0009b9d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ba0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ba6:	39 dd                	cmp    ebp,ebx
c0009ba8:	75 db                	jne    c0009b85 <VAS::allocatePages(int, int)+0x137>
c0009baa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009baf:	0f 84 25 ff ff ff    	je     c0009ada <VAS::allocatePages(int, int)+0x8c>
c0009bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bbd:	89 d3                	mov    ebx,edx
c0009bbf:	c1 e0 0c             	shl    eax,0xc
c0009bc2:	c1 eb 0a             	shr    ebx,0xa
c0009bc5:	01 d0                	add    eax,edx
c0009bc7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bcd:	c1 e8 0a             	shr    eax,0xa
c0009bd0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bdb:	2d 00 00 40 00       	sub    eax,0x400000
c0009be0:	39 c3                	cmp    ebx,eax
c0009be2:	0f 87 f8 fe ff ff    	ja     c0009ae0 <VAS::allocatePages(int, int)+0x92>
c0009be8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009beb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bf1:	39 d8                	cmp    eax,ebx
c0009bf3:	73 f3                	jae    c0009be8 <VAS::allocatePages(int, int)+0x19a>
c0009bf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf9:	83 c4 1c             	add    esp,0x1c
c0009bfc:	5b                   	pop    ebx
c0009bfd:	5e                   	pop    esi
c0009bfe:	5f                   	pop    edi
c0009bff:	5d                   	pop    ebp
c0009c00:	c3                   	ret    
c0009c01:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009c06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c0c:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c13:	0f 84 4d ff ff ff    	je     c0009b66 <VAS::allocatePages(int, int)+0x118>
c0009c19:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c21:	e9 40 ff ff ff       	jmp    c0009b66 <VAS::allocatePages(int, int)+0x118>

c0009c26 <VAS::setCPUSpecific(unsigned long)>:
c0009c26:	83 ec 0c             	sub    esp,0xc
c0009c29:	6a 05                	push   0x5
c0009c2b:	68 00 00 40 c2       	push   0xc2400000
c0009c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c34:	50                   	push   eax
c0009c35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c39:	52                   	push   edx
c0009c3a:	e8 0b fd ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c3f:	83 c4 1c             	add    esp,0x1c
c0009c42:	c3                   	ret    
c0009c43:	90                   	nop

c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c44:	55                   	push   ebp
c0009c45:	57                   	push   edi
c0009c46:	56                   	push   esi
c0009c47:	53                   	push   ebx
c0009c48:	83 ec 1c             	sub    esp,0x1c
c0009c4b:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009c50:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c5a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c5e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c64:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c68:	83 e0 01             	and    eax,0x1
c0009c6b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c73:	85 c0                	test   eax,eax
c0009c75:	7e 39                	jle    c0009cb0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	89 f3                	mov    ebx,esi
c0009c7d:	c1 e0 0c             	shl    eax,0xc
c0009c80:	01 f0                	add    eax,esi
c0009c82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c86:	55                   	push   ebp
c0009c87:	53                   	push   ebx
c0009c88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c8c:	29 f0                	sub    eax,esi
c0009c8e:	01 d8                	add    eax,ebx
c0009c90:	50                   	push   eax
c0009c91:	57                   	push   edi
c0009c92:	e8 b3 fc ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c97:	83 c4 10             	add    esp,0x10
c0009c9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c9f:	74 03                	je     c0009ca4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009ca1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009caa:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009cae:	75 d6                	jne    c0009c86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009cb0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cb5:	75 10                	jne    c0009cc7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009cb7:	0f 20 d8             	mov    eax,cr3
c0009cba:	0f 22 d8             	mov    cr3,eax
c0009cbd:	83 c4 1c             	add    esp,0x1c
c0009cc0:	89 f0                	mov    eax,esi
c0009cc2:	5b                   	pop    ebx
c0009cc3:	5e                   	pop    esi
c0009cc4:	5f                   	pop    edi
c0009cc5:	5d                   	pop    ebp
c0009cc6:	c3                   	ret    
c0009cc7:	89 f3                	mov    ebx,esi
c0009cc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ccd:	c1 eb 0a             	shr    ebx,0xa
c0009cd0:	c1 e0 0c             	shl    eax,0xc
c0009cd3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cd9:	01 f0                	add    eax,esi
c0009cdb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ce1:	c1 e8 0a             	shr    eax,0xa
c0009ce4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ce9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cee:	39 c3                	cmp    ebx,eax
c0009cf0:	77 cb                	ja     c0009cbd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cf2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cf5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cfb:	39 d8                	cmp    eax,ebx
c0009cfd:	73 f3                	jae    c0009cf2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cff:	83 c4 1c             	add    esp,0x1c
c0009d02:	89 f0                	mov    eax,esi
c0009d04:	5b                   	pop    ebx
c0009d05:	5e                   	pop    esi
c0009d06:	5f                   	pop    edi
c0009d07:	5d                   	pop    ebp
c0009d08:	c3                   	ret    
c0009d09:	90                   	nop

c0009d0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d0a:	55                   	push   ebp
c0009d0b:	57                   	push   edi
c0009d0c:	56                   	push   esi
c0009d0d:	53                   	push   ebx
c0009d0e:	83 ec 1c             	sub    esp,0x1c
c0009d11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d19:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d1d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d21:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d26:	75 4a                	jne    c0009d72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d2c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d2f:	c1 eb 16             	shr    ebx,0x16
c0009d32:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d39:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d3d:	74 4d                	je     c0009d8c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d43:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d47:	c1 e8 0a             	shr    eax,0xa
c0009d4a:	80 fa 01             	cmp    dl,0x1
c0009d4d:	19 d2                	sbb    edx,edx
c0009d4f:	c1 e3 0c             	shl    ebx,0xc
c0009d52:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d56:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d5c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d61:	01 d8                	add    eax,ebx
c0009d63:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d6a:	83 c4 1c             	add    esp,0x1c
c0009d6d:	5b                   	pop    ebx
c0009d6e:	5e                   	pop    esi
c0009d6f:	5f                   	pop    edi
c0009d70:	5d                   	pop    ebp
c0009d71:	c3                   	ret    
c0009d72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d76:	83 ec 0c             	sub    esp,0xc
c0009d79:	68 f8 d5 01 c0       	push   0xc001d5f8
c0009d7e:	e8 00 64 00 00       	call   c0010183 <KePanic(char const*)>
c0009d83:	83 c4 10             	add    esp,0x10
c0009d86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d8a:	eb 9c                	jmp    c0009d28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d90:	e8 00 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d95:	83 ec 0c             	sub    esp,0xc
c0009d98:	89 c5                	mov    ebp,eax
c0009d9a:	8b 0d d0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205d0
c0009da0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da4:	6a 01                	push   0x1
c0009da6:	e8 0a f5 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0009dab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db2:	6a 01                	push   0x1
c0009db4:	50                   	push   eax
c0009db5:	55                   	push   ebp
c0009db6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dbc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc0:	51                   	push   ecx
c0009dc1:	e8 7e fe ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dc6:	83 c4 1c             	add    esp,0x1c
c0009dc9:	68 00 10 00 00       	push   0x1000
c0009dce:	6a 00                	push   0x0
c0009dd0:	50                   	push   eax
c0009dd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dd5:	e8 f6 66 ff ff       	call   c00004d0 <memset>
c0009dda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dde:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de1:	e8 ff f7 ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009de6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009de9:	83 c4 10             	add    esp,0x10
c0009dec:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009def:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009df3:	e9 47 ff ff ff       	jmp    c0009d3f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009df8 <VAS::VAS(bool)>:
c0009df8:	53                   	push   ebx
c0009df9:	83 ec 28             	sub    esp,0x28
c0009dfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e00:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e22:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e25:	e8 6b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e2a:	89 c2                	mov    edx,eax
c0009e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e33:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c0009e39:	83 ec 0c             	sub    esp,0xc
c0009e3c:	6a 01                	push   0x1
c0009e3e:	e8 72 f4 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0009e43:	83 c4 10             	add    esp,0x10
c0009e46:	89 c2                	mov    edx,eax
c0009e48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e4f:	83 ec 0c             	sub    esp,0xc
c0009e52:	6a 03                	push   0x3
c0009e54:	6a 01                	push   0x1
c0009e56:	52                   	push   edx
c0009e57:	50                   	push   eax
c0009e58:	53                   	push   ebx
c0009e59:	e8 e6 fd ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e5e:	83 c4 20             	add    esp,0x20
c0009e61:	89 c2                	mov    edx,eax
c0009e63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e72:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e7a:	7f 1c                	jg     c0009e98 <VAS::VAS(bool)+0xa0>
c0009e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e87:	c1 e2 02             	shl    edx,0x2
c0009e8a:	01 d0                	add    eax,edx
c0009e8c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e92:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e96:	eb da                	jmp    c0009e72 <VAS::VAS(bool)+0x7a>
c0009e98:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ea0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ea8:	7f 7a                	jg     c0009f24 <VAS::VAS(bool)+0x12c>
c0009eaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eae:	2d 00 02 00 00       	sub    eax,0x200
c0009eb3:	c1 e0 0c             	shl    eax,0xc
c0009eb6:	83 c8 03             	or     eax,0x3
c0009eb9:	89 c2                	mov    edx,eax
c0009ebb:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009ec0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ec6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ecc:	83 e0 10             	and    eax,0x10
c0009ecf:	84 c0                	test   al,al
c0009ed1:	74 07                	je     c0009eda <VAS::VAS(bool)+0xe2>
c0009ed3:	b8 00 01 00 00       	mov    eax,0x100
c0009ed8:	eb 05                	jmp    c0009edf <VAS::VAS(bool)+0xe7>
c0009eda:	b8 00 00 00 00       	mov    eax,0x0
c0009edf:	09 d0                	or     eax,edx
c0009ee1:	89 c1                	mov    ecx,eax
c0009ee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009eee:	c1 e2 02             	shl    edx,0x2
c0009ef1:	01 d0                	add    eax,edx
c0009ef3:	89 ca                	mov    edx,ecx
c0009ef5:	89 10                	mov    DWORD PTR [eax],edx
c0009ef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009efb:	2d 40 03 00 00       	sub    eax,0x340
c0009f00:	83 f8 7f             	cmp    eax,0x7f
c0009f03:	77 16                	ja     c0009f1b <VAS::VAS(bool)+0x123>
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f10:	c1 e2 02             	shl    edx,0x2
c0009f13:	01 d0                	add    eax,edx
c0009f15:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f1b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f1f:	e9 7c ff ff ff       	jmp    c0009ea0 <VAS::VAS(bool)+0xa8>
c0009f24:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f2f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f35:	83 e0 10             	and    eax,0x10
c0009f38:	84 c0                	test   al,al
c0009f3a:	74 07                	je     c0009f43 <VAS::VAS(bool)+0x14b>
c0009f3c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f41:	eb 05                	jmp    c0009f48 <VAS::VAS(bool)+0x150>
c0009f43:	b8 03 40 00 00       	mov    eax,0x4003
c0009f48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f4c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f4f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f55:	89 02                	mov    DWORD PTR [edx],eax
c0009f57:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f68:	83 ec 08             	sub    esp,0x8
c0009f6b:	50                   	push   eax
c0009f6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f70:	e8 b1 fc ff ff       	call   c0009c26 <VAS::setCPUSpecific(unsigned long)>
c0009f75:	83 c4 10             	add    esp,0x10
c0009f78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f7f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f8a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f90:	83 e0 10             	and    eax,0x10
c0009f93:	84 c0                	test   al,al
c0009f95:	74 07                	je     c0009f9e <VAS::VAS(bool)+0x1a6>
c0009f97:	b8 00 01 00 00       	mov    eax,0x100
c0009f9c:	eb 05                	jmp    c0009fa3 <VAS::VAS(bool)+0x1ab>
c0009f9e:	b8 00 00 00 00       	mov    eax,0x0
c0009fa3:	09 c2                	or     edx,eax
c0009fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fac:	05 fc 0f 00 00       	add    eax,0xffc
c0009fb1:	83 ca 03             	or     edx,0x3
c0009fb4:	89 10                	mov    DWORD PTR [eax],edx
c0009fb6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009fbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc1:	83 ec 0c             	sub    esp,0xc
c0009fc4:	50                   	push   eax
c0009fc5:	e8 12 1c 00 00       	call   c000bbdc <Device::getName()>
c0009fca:	83 c4 10             	add    esp,0x10
c0009fcd:	83 ec 08             	sub    esp,0x8
c0009fd0:	68 9b d6 01 c0       	push   0xc001d69b
c0009fd5:	50                   	push   eax
c0009fd6:	e8 05 67 ff ff       	call   c00006e0 <strcmp>
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 c0                	test   eax,eax
c0009fe0:	0f 94 c0             	sete   al
c0009fe3:	84 c0                	test   al,al
c0009fe5:	0f 84 87 00 00 00    	je     c000a072 <VAS::VAS(bool)+0x27a>
c0009feb:	fa                   	cli    
c0009fec:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0009ff1:	40                   	inc    eax
c0009ff2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0009ff7:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009ffc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a002:	05 7c 09 00 00       	add    eax,0x97c
c000a007:	83 ec 0c             	sub    esp,0xc
c000a00a:	50                   	push   eax
c000a00b:	e8 a6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a018:	89 c3                	mov    ebx,eax
c000a01a:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000a01f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a025:	05 7c 09 00 00       	add    eax,0x97c
c000a02a:	83 ec 0c             	sub    esp,0xc
c000a02d:	50                   	push   eax
c000a02e:	e8 83 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	83 ec 08             	sub    esp,0x8
c000a039:	50                   	push   eax
c000a03a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03e:	e8 83 f5 ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c000a043:	83 c4 10             	add    esp,0x10
c000a046:	8b 00                	mov    eax,DWORD PTR [eax]
c000a048:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a04d:	6a 11                	push   0x11
c000a04f:	53                   	push   ebx
c000a050:	50                   	push   eax
c000a051:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a055:	e8 f0 f8 ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a05a:	83 c4 10             	add    esp,0x10
c000a05d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a062:	48                   	dec    eax
c000a063:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000a068:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a06d:	85 c0                	test   eax,eax
c000a06f:	75 01                	jne    c000a072 <VAS::VAS(bool)+0x27a>
c000a071:	fb                   	sti    
c000a072:	90                   	nop
c000a073:	83 c4 28             	add    esp,0x28
c000a076:	5b                   	pop    ebx
c000a077:	c3                   	ret    

c000a078 <VAS::evict(unsigned long)>:
c000a078:	55                   	push   ebp
c000a079:	57                   	push   edi
c000a07a:	56                   	push   esi
c000a07b:	53                   	push   ebx
c000a07c:	83 ec 1c             	sub    esp,0x1c
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a08b:	e8 66 f3 ff ff       	call   c00093f6 <Virt::allocateSwapfilePage()>
c000a090:	8b 0d ec f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ec
c000a096:	89 c7                	mov    edi,eax
c000a098:	85 c9                	test   ecx,ecx
c000a09a:	7e 3e                	jle    c000a0da <VAS::evict(unsigned long)+0x62>
c000a09c:	89 ee                	mov    esi,ebp
c000a09e:	31 db                	xor    ebx,ebx
c000a0a0:	83 ec 0c             	sub    esp,0xc
c000a0a3:	57                   	push   edi
c000a0a4:	e8 3b f3 ff ff       	call   c00093e4 <Virt::swapIDToSector(unsigned long)>
c000a0a9:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0ac:	01 d8                	add    eax,ebx
c000a0ae:	6a 01                	push   0x1
c000a0b0:	31 d2                	xor    edx,edx
c000a0b2:	43                   	inc    ebx
c000a0b3:	52                   	push   edx
c000a0b4:	81 c6 00 02 00 00    	add    esi,0x200
c000a0ba:	50                   	push   eax
c000a0bb:	0f be 05 f8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1f8
c000a0c2:	8b 14 85 3c 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd6c4]
c000a0c9:	52                   	push   edx
c000a0ca:	e8 a3 2b 00 00       	call   c000cc72 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0cf:	83 c4 20             	add    esp,0x20
c000a0d2:	39 1d ec f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ec,ebx
c000a0d8:	7f c6                	jg     c000a0a0 <VAS::evict(unsigned long)+0x28>
c000a0da:	83 ec 08             	sub    esp,0x8
c000a0dd:	c1 e7 0b             	shl    edi,0xb
c000a0e0:	55                   	push   ebp
c000a0e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e5:	50                   	push   eax
c000a0e6:	e8 db f4 ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c000a0eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0ed:	89 d1                	mov    ecx,edx
c000a0ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0f5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0fb:	09 cf                	or     edi,ecx
c000a0fd:	89 38                	mov    DWORD PTR [eax],edi
c000a0ff:	89 14 24             	mov    DWORD PTR [esp],edx
c000a102:	ff 05 c8 05 02 c0    	inc    DWORD PTR ds:0xc00205c8
c000a108:	e8 26 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a10d:	0f 20 d8             	mov    eax,cr3
c000a110:	0f 22 d8             	mov    cr3,eax
c000a113:	a1 c4 05 02 c0       	mov    eax,ds:0xc00205c4
c000a118:	c7 44 24 40 a9 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d6a9
c000a120:	8d 50 01             	lea    edx,[eax+0x1]
c000a123:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a127:	89 15 c4 05 02 c0    	mov    DWORD PTR ds:0xc00205c4,edx
c000a12d:	83 c4 2c             	add    esp,0x2c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	e9 cf 03 00 00       	jmp    c000a508 <Dbg::kprintf(char const*, ...)>
c000a139:	90                   	nop

c000a13a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a13a:	55                   	push   ebp
c000a13b:	57                   	push   edi
c000a13c:	56                   	push   esi
c000a13d:	53                   	push   ebx
c000a13e:	83 ec 14             	sub    esp,0x14
c000a141:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a145:	53                   	push   ebx
c000a146:	68 ba d6 01 c0       	push   0xc001d6ba
c000a14b:	e8 b8 03 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a159:	74 21                	je     c000a17c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a15b:	83 ec 08             	sub    esp,0x8
c000a15e:	53                   	push   ebx
c000a15f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a163:	57                   	push   edi
c000a164:	e8 5d f4 ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 c6                	mov    esi,eax
c000a16e:	85 c0                	test   eax,eax
c000a170:	74 0a                	je     c000a17c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a172:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a174:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a17a:	74 0a                	je     c000a186 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a17c:	31 c0                	xor    eax,eax
c000a17e:	83 c4 0c             	add    esp,0xc
c000a181:	5b                   	pop    ebx
c000a182:	5e                   	pop    esi
c000a183:	5f                   	pop    edi
c000a184:	5d                   	pop    ebp
c000a185:	c3                   	ret    
c000a186:	e8 0a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a18b:	c1 ed 0b             	shr    ebp,0xb
c000a18e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a190:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a196:	09 c2                	or     edx,eax
c000a198:	81 ca 01 08 00 00    	or     edx,0x801
c000a19e:	89 16                	mov    DWORD PTR [esi],edx
c000a1a0:	8b 35 ec f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1ec
c000a1a6:	85 f6                	test   esi,esi
c000a1a8:	7e 3e                	jle    c000a1e8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1aa:	89 df                	mov    edi,ebx
c000a1ac:	31 f6                	xor    esi,esi
c000a1ae:	83 ec 0c             	sub    esp,0xc
c000a1b1:	55                   	push   ebp
c000a1b2:	e8 2d f2 ff ff       	call   c00093e4 <Virt::swapIDToSector(unsigned long)>
c000a1b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1ba:	01 f0                	add    eax,esi
c000a1bc:	6a 01                	push   0x1
c000a1be:	31 d2                	xor    edx,edx
c000a1c0:	46                   	inc    esi
c000a1c1:	52                   	push   edx
c000a1c2:	81 c7 00 02 00 00    	add    edi,0x200
c000a1c8:	50                   	push   eax
c000a1c9:	0f be 05 f8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1f8
c000a1d0:	8b 0c 85 3c 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd6c4]
c000a1d7:	51                   	push   ecx
c000a1d8:	e8 29 2a 00 00       	call   c000cc06 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1dd:	83 c4 20             	add    esp,0x20
c000a1e0:	39 35 ec f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ec,esi
c000a1e6:	7f c6                	jg     c000a1ae <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1e8:	a1 c8 05 02 c0       	mov    eax,ds:0xc00205c8
c000a1ed:	48                   	dec    eax
c000a1ee:	52                   	push   edx
c000a1ef:	a3 c8 05 02 c0       	mov    ds:0xc00205c8,eax
c000a1f4:	50                   	push   eax
c000a1f5:	53                   	push   ebx
c000a1f6:	68 cd d6 01 c0       	push   0xc001d6cd
c000a1fb:	e8 08 03 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a200:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a203:	e8 be f1 ff ff       	call   c00093c6 <Virt::freeSwapfilePage(unsigned long)>
c000a208:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a20d:	83 c4 10             	add    esp,0x10
c000a210:	48                   	dec    eax
c000a211:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000a216:	85 c0                	test   eax,eax
c000a218:	75 01                	jne    c000a21b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a21a:	fb                   	sti    
c000a21b:	0f 20 d8             	mov    eax,cr3
c000a21e:	0f 22 d8             	mov    cr3,eax
c000a221:	b0 01                	mov    al,0x1
c000a223:	e9 56 ff ff ff       	jmp    c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a228 <VAS::scanForEviction()>:
c000a228:	57                   	push   edi
c000a229:	31 ff                	xor    edi,edi
c000a22b:	56                   	push   esi
c000a22c:	53                   	push   ebx
c000a22d:	83 ec 10             	sub    esp,0x10
c000a230:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a234:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a237:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a23d:	75 0e                	jne    c000a24d <VAS::scanForEviction()+0x25>
c000a23f:	89 da                	mov    edx,ebx
c000a241:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a244:	c1 ea 16             	shr    edx,0x16
c000a247:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a24b:	74 4e                	je     c000a29b <VAS::scanForEviction()+0x73>
c000a24d:	53                   	push   ebx
c000a24e:	56                   	push   esi
c000a24f:	e8 72 f3 ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c000a254:	5a                   	pop    edx
c000a255:	8b 10                	mov    edx,DWORD PTR [eax]
c000a257:	59                   	pop    ecx
c000a258:	89 d1                	mov    ecx,edx
c000a25a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a260:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a266:	74 3e                	je     c000a2a6 <VAS::scanForEviction()+0x7e>
c000a268:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a26e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a274:	76 2b                	jbe    c000a2a1 <VAS::scanForEviction()+0x79>
c000a276:	47                   	inc    edi
c000a277:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a27e:	83 ff 03             	cmp    edi,0x3
c000a281:	74 32                	je     c000a2b5 <VAS::scanForEviction()+0x8d>
c000a283:	31 db                	xor    ebx,ebx
c000a285:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a28b:	75 c0                	jne    c000a24d <VAS::scanForEviction()+0x25>
c000a28d:	89 da                	mov    edx,ebx
c000a28f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a292:	c1 ea 16             	shr    edx,0x16
c000a295:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a299:	75 b2                	jne    c000a24d <VAS::scanForEviction()+0x25>
c000a29b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2a1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2a4:	eb 91                	jmp    c000a237 <VAS::scanForEviction()+0xf>
c000a2a6:	f6 c2 20             	test   dl,0x20
c000a2a9:	74 13                	je     c000a2be <VAS::scanForEviction()+0x96>
c000a2ab:	83 e2 df             	and    edx,0xffffffdf
c000a2ae:	89 10                	mov    DWORD PTR [eax],edx
c000a2b0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2b3:	eb b3                	jmp    c000a268 <VAS::scanForEviction()+0x40>
c000a2b5:	83 c4 10             	add    esp,0x10
c000a2b8:	31 c0                	xor    eax,eax
c000a2ba:	5b                   	pop    ebx
c000a2bb:	5e                   	pop    esi
c000a2bc:	5f                   	pop    edi
c000a2bd:	c3                   	ret    
c000a2be:	83 ec 08             	sub    esp,0x8
c000a2c1:	89 d0                	mov    eax,edx
c000a2c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2cc:	53                   	push   ebx
c000a2cd:	68 e2 d6 01 c0       	push   0xc001d6e2
c000a2d2:	e8 31 02 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a2d7:	58                   	pop    eax
c000a2d8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2db:	5a                   	pop    edx
c000a2dc:	51                   	push   ecx
c000a2dd:	56                   	push   esi
c000a2de:	e8 95 fd ff ff       	call   c000a078 <VAS::evict(unsigned long)>
c000a2e3:	5b                   	pop    ebx
c000a2e4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2e7:	5f                   	pop    edi
c000a2e8:	50                   	push   eax
c000a2e9:	68 f6 d6 01 c0       	push   0xc001d6f6
c000a2ee:	e8 15 02 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a2f3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2fa:	83 c4 10             	add    esp,0x10
c000a2fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a301:	83 c4 10             	add    esp,0x10
c000a304:	5b                   	pop    ebx
c000a305:	5e                   	pop    esi
c000a306:	5f                   	pop    edi
c000a307:	c3                   	ret    

c000a308 <mapVASFirstTime>:
c000a308:	55                   	push   ebp
c000a309:	57                   	push   edi
c000a30a:	56                   	push   esi
c000a30b:	53                   	push   ebx
c000a30c:	83 ec 0c             	sub    esp,0xc
c000a30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a314:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a317:	4a                   	dec    edx
c000a318:	0f 84 8c 00 00 00    	je     c000a3aa <mapVASFirstTime+0xa2>
c000a31e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a321:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a324:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a329:	c1 e5 15             	shl    ebp,0x15
c000a32c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a331:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a337:	29 eb                	sub    ebx,ebp
c000a339:	29 ef                	sub    edi,ebp
c000a33b:	e8 55 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a340:	83 ec 0c             	sub    esp,0xc
c000a343:	68 03 04 00 00       	push   0x403
c000a348:	6a 01                	push   0x1
c000a34a:	53                   	push   ebx
c000a34b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a351:	50                   	push   eax
c000a352:	56                   	push   esi
c000a353:	e8 ec f8 ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a358:	83 c4 20             	add    esp,0x20
c000a35b:	39 fb                	cmp    ebx,edi
c000a35d:	75 dc                	jne    c000a33b <mapVASFirstTime+0x33>
c000a35f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a364:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a369:	29 eb                	sub    ebx,ebp
c000a36b:	29 ef                	sub    edi,ebp
c000a36d:	e8 23 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a372:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a376:	19 d2                	sbb    edx,edx
c000a378:	83 ec 0c             	sub    esp,0xc
c000a37b:	83 e2 04             	and    edx,0x4
c000a37e:	81 c2 03 04 00 00    	add    edx,0x403
c000a384:	52                   	push   edx
c000a385:	6a 01                	push   0x1
c000a387:	53                   	push   ebx
c000a388:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a38e:	50                   	push   eax
c000a38f:	56                   	push   esi
c000a390:	e8 af f8 ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a395:	83 c4 20             	add    esp,0x20
c000a398:	39 df                	cmp    edi,ebx
c000a39a:	75 d1                	jne    c000a36d <mapVASFirstTime+0x65>
c000a39c:	0f 20 d8             	mov    eax,cr3
c000a39f:	0f 22 d8             	mov    cr3,eax
c000a3a2:	83 c4 0c             	add    esp,0xc
c000a3a5:	5b                   	pop    ebx
c000a3a6:	5e                   	pop    esi
c000a3a7:	5f                   	pop    edi
c000a3a8:	5d                   	pop    ebp
c000a3a9:	c3                   	ret    
c000a3aa:	83 ec 0c             	sub    esp,0xc
c000a3ad:	68 09 d7 01 c0       	push   0xc001d709
c000a3b2:	e8 51 01 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	83 c4 0c             	add    esp,0xc
c000a3bd:	5b                   	pop    ebx
c000a3be:	5e                   	pop    esi
c000a3bf:	5f                   	pop    edi
c000a3c0:	5d                   	pop    ebp
c000a3c1:	c3                   	ret    

c000a3c2 <__cxa_atexit>:
c000a3c2:	31 c0                	xor    eax,eax
c000a3c4:	c3                   	ret    

c000a3c5 <__cxa_finalize>:
c000a3c5:	c3                   	ret    

c000a3c6 <__stack_chk_fail>:
c000a3c6:	55                   	push   ebp
c000a3c7:	89 e5                	mov    ebp,esp
c000a3c9:	83 ec 10             	sub    esp,0x10
c000a3cc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3cf:	68 22 d7 01 c0       	push   0xc001d722
c000a3d4:	e8 2f 01 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a3d9:	58                   	pop    eax
c000a3da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3dd:	5a                   	pop    edx
c000a3de:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3e1:	68 22 d7 01 c0       	push   0xc001d722
c000a3e6:	e8 1d 01 00 00       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000a3eb:	c7 04 24 2a d7 01 c0 	mov    DWORD PTR [esp],0xc001d72a
c000a3f2:	e8 8c 5d 00 00       	call   c0010183 <KePanic(char const*)>
c000a3f7:	83 c4 10             	add    esp,0x10
c000a3fa:	c9                   	leave  
c000a3fb:	c3                   	ret    

c000a3fc <__cxa_pure_virtual>:
c000a3fc:	83 ec 18             	sub    esp,0x18
c000a3ff:	68 42 d7 01 c0       	push   0xc001d742
c000a404:	e8 7a 5d 00 00       	call   c0010183 <KePanic(char const*)>
c000a409:	83 c4 1c             	add    esp,0x1c
c000a40c:	c3                   	ret    

c000a40d <operator new[](unsigned long)>:
c000a40d:	e9 a7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a412 <operator delete(void*, unsigned long)>:
c000a412:	e9 c2 d3 ff ff       	jmp    c00077d9 <rfree>

c000a417 <operator delete[](void*)>:
c000a417:	e9 bd d3 ff ff       	jmp    c00077d9 <rfree>

c000a41c <operator delete[](void*, unsigned long)>:
c000a41c:	e9 b8 d3 ff ff       	jmp    c00077d9 <rfree>

c000a421 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a421:	55                   	push   ebp
c000a422:	b9 04 00 00 00       	mov    ecx,0x4
c000a427:	57                   	push   edi
c000a428:	56                   	push   esi
c000a429:	be 53 d3 01 c0       	mov    esi,0xc001d353
c000a42e:	53                   	push   ebx
c000a42f:	83 ec 20             	sub    esp,0x20
c000a432:	a1 52 d3 01 c0       	mov    eax,ds:0xc001d352
c000a437:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a43b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a43f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a443:	a1 5f d3 01 c0       	mov    eax,ds:0xc001d35f
c000a448:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a44c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a450:	fc                   	cld    
c000a451:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a453:	89 ee                	mov    esi,ebp
c000a455:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a459:	eb 02                	jmp    c000a45d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a45b:	89 c6                	mov    esi,eax
c000a45d:	31 d2                	xor    edx,edx
c000a45f:	41                   	inc    ecx
c000a460:	89 f0                	mov    eax,esi
c000a462:	f7 f3                	div    ebx
c000a464:	39 de                	cmp    esi,ebx
c000a466:	73 f3                	jae    c000a45b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a468:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a46b:	eb 02                	jmp    c000a46f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a46d:	89 c5                	mov    ebp,eax
c000a46f:	31 d2                	xor    edx,edx
c000a471:	49                   	dec    ecx
c000a472:	89 e8                	mov    eax,ebp
c000a474:	f7 f3                	div    ebx
c000a476:	39 dd                	cmp    ebp,ebx
c000a478:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a47c:	88 11                	mov    BYTE PTR [ecx],dl
c000a47e:	73 ed                	jae    c000a46d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a480:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a484:	83 c4 20             	add    esp,0x20
c000a487:	5b                   	pop    ebx
c000a488:	5e                   	pop    esi
c000a489:	5f                   	pop    edi
c000a48a:	5d                   	pop    ebp
c000a48b:	c3                   	ret    

c000a48c <Dbg::logc(char)>:
c000a48c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a490:	f6 05 f0 04 02 c0 10 	test   BYTE PTR ds:0xc00204f0,0x10
c000a497:	75 12                	jne    c000a4ab <Dbg::logc(char)+0x1f>
c000a499:	ba fd 03 00 00       	mov    edx,0x3fd
c000a49e:	ec                   	in     al,dx
c000a49f:	a8 20                	test   al,0x20
c000a4a1:	74 fb                	je     c000a49e <Dbg::logc(char)+0x12>
c000a4a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4a8:	88 c8                	mov    al,cl
c000a4aa:	ee                   	out    dx,al
c000a4ab:	c3                   	ret    

c000a4ac <Dbg::logs(char*)>:
c000a4ac:	53                   	push   ebx
c000a4ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4b4:	84 c0                	test   al,al
c000a4b6:	74 0f                	je     c000a4c7 <Dbg::logs(char*)+0x1b>
c000a4b8:	50                   	push   eax
c000a4b9:	43                   	inc    ebx
c000a4ba:	e8 cd ff ff ff       	call   c000a48c <Dbg::logc(char)>
c000a4bf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4c2:	5a                   	pop    edx
c000a4c3:	84 c0                	test   al,al
c000a4c5:	75 f1                	jne    c000a4b8 <Dbg::logs(char*)+0xc>
c000a4c7:	5b                   	pop    ebx
c000a4c8:	c3                   	ret    

c000a4c9 <Dbg::logWriteInt(unsigned int)>:
c000a4c9:	83 ec 10             	sub    esp,0x10
c000a4cc:	6a 0a                	push   0xa
c000a4ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4d2:	50                   	push   eax
c000a4d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d7:	50                   	push   eax
c000a4d8:	e8 44 ff ff ff       	call   c000a421 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4dd:	50                   	push   eax
c000a4de:	e8 c9 ff ff ff       	call   c000a4ac <Dbg::logs(char*)>
c000a4e3:	83 c4 20             	add    esp,0x20
c000a4e6:	c3                   	ret    

c000a4e7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4e7:	83 ec 10             	sub    esp,0x10
c000a4ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4ee:	50                   	push   eax
c000a4ef:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4f3:	50                   	push   eax
c000a4f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 23 ff ff ff       	call   c000a421 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4fe:	50                   	push   eax
c000a4ff:	e8 a8 ff ff ff       	call   c000a4ac <Dbg::logs(char*)>
c000a504:	83 c4 20             	add    esp,0x20
c000a507:	c3                   	ret    

c000a508 <Dbg::kprintf(char const*, ...)>:
c000a508:	55                   	push   ebp
c000a509:	57                   	push   edi
c000a50a:	56                   	push   esi
c000a50b:	53                   	push   ebx
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a513:	f6 05 f0 04 02 c0 10 	test   BYTE PTR ds:0xc00204f0,0x10
c000a51a:	74 08                	je     c000a524 <Dbg::kprintf(char const*, ...)+0x1c>
c000a51c:	83 c4 0c             	add    esp,0xc
c000a51f:	5b                   	pop    ebx
c000a520:	5e                   	pop    esi
c000a521:	5f                   	pop    edi
c000a522:	5d                   	pop    ebp
c000a523:	c3                   	ret    
c000a524:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a528:	31 ff                	xor    edi,edi
c000a52a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a52e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a531:	84 c0                	test   al,al
c000a533:	74 e7                	je     c000a51c <Dbg::kprintf(char const*, ...)+0x14>
c000a535:	8d 77 01             	lea    esi,[edi+0x1]
c000a538:	3c 25                	cmp    al,0x25
c000a53a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a53d:	75 47                	jne    c000a586 <Dbg::kprintf(char const*, ...)+0x7e>
c000a53f:	83 c7 02             	add    edi,0x2
c000a542:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a545:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a548:	83 e8 25             	sub    eax,0x25
c000a54b:	3c 53                	cmp    al,0x53
c000a54d:	0f 87 d2 00 00 00    	ja     c000a625 <Dbg::kprintf(char const*, ...)+0x11d>
c000a553:	25 ff 00 00 00       	and    eax,0xff
c000a558:	ff 24 85 58 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28a8]
c000a55f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a563:	89 c8                	mov    eax,ecx
c000a565:	83 c1 04             	add    ecx,0x4
c000a568:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a56c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a56e:	55                   	push   ebp
c000a56f:	e8 55 ff ff ff       	call   c000a4c9 <Dbg::logWriteInt(unsigned int)>
c000a574:	58                   	pop    eax
c000a575:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a578:	84 c0                	test   al,al
c000a57a:	74 a0                	je     c000a51c <Dbg::kprintf(char const*, ...)+0x14>
c000a57c:	8d 77 01             	lea    esi,[edi+0x1]
c000a57f:	3c 25                	cmp    al,0x25
c000a581:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a584:	74 b9                	je     c000a53f <Dbg::kprintf(char const*, ...)+0x37>
c000a586:	50                   	push   eax
c000a587:	89 f7                	mov    edi,esi
c000a589:	e8 fe fe ff ff       	call   c000a48c <Dbg::logc(char)>
c000a58e:	89 ee                	mov    esi,ebp
c000a590:	58                   	pop    eax
c000a591:	eb e2                	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a593:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a597:	89 c8                	mov    eax,ecx
c000a599:	83 c1 04             	add    ecx,0x4
c000a59c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5a2:	50                   	push   eax
c000a5a3:	e8 04 ff ff ff       	call   c000a4ac <Dbg::logs(char*)>
c000a5a8:	58                   	pop    eax
c000a5a9:	eb ca                	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5af:	89 d0                	mov    eax,edx
c000a5b1:	83 c2 04             	add    edx,0x4
c000a5b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ba:	50                   	push   eax
c000a5bb:	e8 09 ff ff ff       	call   c000a4c9 <Dbg::logWriteInt(unsigned int)>
c000a5c0:	58                   	pop    eax
c000a5c1:	eb b2                	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5c7:	89 d0                	mov    eax,edx
c000a5c9:	83 c2 04             	add    edx,0x4
c000a5cc:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5d3:	50                   	push   eax
c000a5d4:	e8 b3 fe ff ff       	call   c000a48c <Dbg::logc(char)>
c000a5d9:	58                   	pop    eax
c000a5da:	eb 99                	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5e0:	89 c8                	mov    eax,ecx
c000a5e2:	83 c1 04             	add    ecx,0x4
c000a5e5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5e9:	6a 10                	push   0x10
c000a5eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5ed:	51                   	push   ecx
c000a5ee:	e8 f4 fe ff ff       	call   c000a4e7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5f3:	5d                   	pop    ebp
c000a5f4:	58                   	pop    eax
c000a5f5:	e9 7b ff ff ff       	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5fe:	89 d0                	mov    eax,edx
c000a600:	83 c2 08             	add    edx,0x8
c000a603:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a607:	6a 10                	push   0x10
c000a609:	8b 00                	mov    eax,DWORD PTR [eax]
c000a60b:	50                   	push   eax
c000a60c:	e8 d6 fe ff ff       	call   c000a4e7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a611:	58                   	pop    eax
c000a612:	5a                   	pop    edx
c000a613:	e9 5d ff ff ff       	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a618:	6a 25                	push   0x25
c000a61a:	e8 6d fe ff ff       	call   c000a48c <Dbg::logc(char)>
c000a61f:	5a                   	pop    edx
c000a620:	e9 50 ff ff ff       	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a625:	6a 25                	push   0x25
c000a627:	e8 60 fe ff ff       	call   c000a48c <Dbg::logc(char)>
c000a62c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a630:	50                   	push   eax
c000a631:	e8 56 fe ff ff       	call   c000a48c <Dbg::logc(char)>
c000a636:	5a                   	pop    edx
c000a637:	59                   	pop    ecx
c000a638:	e9 38 ff ff ff       	jmp    c000a575 <Dbg::kprintf(char const*, ...)+0x6d>
c000a63d:	90                   	nop

c000a63e <File::read(unsigned long long, void*, int*)>:
c000a63e:	53                   	push   ebx
c000a63f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a643:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a647:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a64e:	3c 19                	cmp    al,0x19
c000a650:	77 35                	ja     c000a687 <File::read(unsigned long long, void*, int*)+0x49>
c000a652:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a659:	85 c0                	test   eax,eax
c000a65b:	74 2a                	je     c000a687 <File::read(unsigned long long, void*, int*)+0x49>
c000a65d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a663:	85 c0                	test   eax,eax
c000a665:	74 20                	je     c000a687 <File::read(unsigned long long, void*, int*)+0x49>
c000a667:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a66b:	74 21                	je     c000a68e <File::read(unsigned long long, void*, int*)+0x50>
c000a66d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a66f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a673:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a679:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a67d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a681:	5b                   	pop    ebx
c000a682:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a685:	ff e0                	jmp    eax
c000a687:	b8 0b 00 00 00       	mov    eax,0xb
c000a68c:	eb 05                	jmp    c000a693 <File::read(unsigned long long, void*, int*)+0x55>
c000a68e:	b8 05 00 00 00       	mov    eax,0x5
c000a693:	5b                   	pop    ebx
c000a694:	c3                   	ret    
c000a695:	90                   	nop

c000a696 <File::write(unsigned long long, void*, int*)>:
c000a696:	53                   	push   ebx
c000a697:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a69b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a69f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6a6:	3c 19                	cmp    al,0x19
c000a6a8:	77 35                	ja     c000a6df <File::write(unsigned long long, void*, int*)+0x49>
c000a6aa:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a6b1:	85 c0                	test   eax,eax
c000a6b3:	74 2a                	je     c000a6df <File::write(unsigned long long, void*, int*)+0x49>
c000a6b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6bb:	85 c0                	test   eax,eax
c000a6bd:	74 20                	je     c000a6df <File::write(unsigned long long, void*, int*)+0x49>
c000a6bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6c3:	74 21                	je     c000a6e6 <File::write(unsigned long long, void*, int*)+0x50>
c000a6c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6d9:	5b                   	pop    ebx
c000a6da:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6dd:	ff e0                	jmp    eax
c000a6df:	b8 0b 00 00 00       	mov    eax,0xb
c000a6e4:	eb 05                	jmp    c000a6eb <File::write(unsigned long long, void*, int*)+0x55>
c000a6e6:	b8 05 00 00 00       	mov    eax,0x5
c000a6eb:	5b                   	pop    ebx
c000a6ec:	c3                   	ret    
c000a6ed:	90                   	nop

c000a6ee <Directory::read(unsigned long long, void*, int*)>:
c000a6ee:	53                   	push   ebx
c000a6ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6fe:	3c 19                	cmp    al,0x19
c000a700:	77 35                	ja     c000a737 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a702:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a709:	85 c0                	test   eax,eax
c000a70b:	74 2a                	je     c000a737 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a70d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a713:	85 c0                	test   eax,eax
c000a715:	74 20                	je     c000a737 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a717:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a71b:	74 21                	je     c000a73e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a71d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a71f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a723:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a729:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a72d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a731:	5b                   	pop    ebx
c000a732:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a735:	ff e0                	jmp    eax
c000a737:	b8 0b 00 00 00       	mov    eax,0xb
c000a73c:	eb 05                	jmp    c000a743 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a73e:	b8 05 00 00 00       	mov    eax,0x5
c000a743:	5b                   	pop    ebx
c000a744:	c3                   	ret    
c000a745:	90                   	nop

c000a746 <Directory::write(unsigned long long, void*, int*)>:
c000a746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a74a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a751:	b8 0b 00 00 00       	mov    eax,0xb
c000a756:	80 fa 19             	cmp    dl,0x19
c000a759:	77 18                	ja     c000a773 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a75b:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000a762:	85 d2                	test   edx,edx
c000a764:	74 0d                	je     c000a773 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a766:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a76d:	19 c0                	sbb    eax,eax
c000a76f:	83 e0 0a             	and    eax,0xa
c000a772:	40                   	inc    eax
c000a773:	c3                   	ret    

c000a774 <File::isAtty()>:
c000a774:	31 c0                	xor    eax,eax
c000a776:	c3                   	ret    
c000a777:	90                   	nop

c000a778 <Directory::isAtty()>:
c000a778:	31 c0                	xor    eax,eax
c000a77a:	c3                   	ret    
c000a77b:	90                   	nop

c000a77c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a77c:	b8 0a 00 00 00       	mov    eax,0xa
c000a781:	c3                   	ret    

c000a782 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a782:	b8 0a 00 00 00       	mov    eax,0xa
c000a787:	c3                   	ret    

c000a788 <Filesystem::allocateSwapfile(char const*, int)>:
c000a788:	31 c0                	xor    eax,eax
c000a78a:	31 d2                	xor    edx,edx
c000a78c:	c3                   	ret    
c000a78d:	90                   	nop

c000a78e <File::~File()>:
c000a78e:	83 ec 0c             	sub    esp,0xc
c000a791:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c000a796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79a:	89 10                	mov    DWORD PTR [eax],edx
c000a79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7a0:	83 ec 0c             	sub    esp,0xc
c000a7a3:	50                   	push   eax
c000a7a4:	e8 ab e8 ff ff       	call   c0009054 <UnixFile::~UnixFile()>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	90                   	nop
c000a7ad:	83 c4 0c             	add    esp,0xc
c000a7b0:	c3                   	ret    
c000a7b1:	90                   	nop

c000a7b2 <File::~File()>:
c000a7b2:	83 ec 0c             	sub    esp,0xc
c000a7b5:	83 ec 0c             	sub    esp,0xc
c000a7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7bc:	e8 cd ff ff ff       	call   c000a78e <File::~File()>
c000a7c1:	83 c4 10             	add    esp,0x10
c000a7c4:	83 ec 08             	sub    esp,0x8
c000a7c7:	68 14 01 00 00       	push   0x114
c000a7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7d0:	e8 3d fc ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000a7d5:	83 c4 10             	add    esp,0x10
c000a7d8:	83 c4 0c             	add    esp,0xc
c000a7db:	c3                   	ret    

c000a7dc <Directory::~Directory()>:
c000a7dc:	83 ec 0c             	sub    esp,0xc
c000a7df:	ba 34 d9 01 c0       	mov    edx,0xc001d934
c000a7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7e8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ee:	83 ec 0c             	sub    esp,0xc
c000a7f1:	50                   	push   eax
c000a7f2:	e8 5d e8 ff ff       	call   c0009054 <UnixFile::~UnixFile()>
c000a7f7:	83 c4 10             	add    esp,0x10
c000a7fa:	90                   	nop
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	c3                   	ret    
c000a7ff:	90                   	nop

c000a800 <Directory::~Directory()>:
c000a800:	83 ec 0c             	sub    esp,0xc
c000a803:	83 ec 0c             	sub    esp,0xc
c000a806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80a:	e8 cd ff ff ff       	call   c000a7dc <Directory::~Directory()>
c000a80f:	83 c4 10             	add    esp,0x10
c000a812:	83 ec 08             	sub    esp,0x8
c000a815:	68 14 01 00 00       	push   0x114
c000a81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a81e:	e8 ef fb ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000a823:	83 c4 10             	add    esp,0x10
c000a826:	83 c4 0c             	add    esp,0xc
c000a829:	c3                   	ret    

c000a82a <Filesystem::Filesystem()>:
c000a82a:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c000a82f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a833:	89 10                	mov    DWORD PTR [eax],edx
c000a835:	8b 15 d4 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205d4
c000a83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a83f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a846:	a3 d4 05 02 c0       	mov    ds:0xc00205d4,eax
c000a84b:	90                   	nop
c000a84c:	c3                   	ret    
c000a84d:	90                   	nop

c000a84e <Filesystem::~Filesystem()>:
c000a84e:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c000a853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a857:	89 10                	mov    DWORD PTR [eax],edx
c000a859:	90                   	nop
c000a85a:	c3                   	ret    
c000a85b:	90                   	nop

c000a85c <Filesystem::~Filesystem()>:
c000a85c:	83 ec 0c             	sub    esp,0xc
c000a85f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a863:	e8 e6 ff ff ff       	call   c000a84e <Filesystem::~Filesystem()>
c000a868:	83 c4 04             	add    esp,0x4
c000a86b:	83 ec 08             	sub    esp,0x8
c000a86e:	6a 08                	push   0x8
c000a870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a874:	e8 99 fb ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000a879:	83 c4 10             	add    esp,0x10
c000a87c:	83 c4 0c             	add    esp,0xc
c000a87f:	c3                   	ret    

c000a880 <Fs::getcwd(Process*, char*, int)>:
c000a880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a884:	31 c0                	xor    eax,eax
c000a886:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a889:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a88d:	7d 15                	jge    c000a8a4 <Fs::getcwd(Process*, char*, int)+0x24>
c000a88f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a893:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a89a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a89d:	84 c9                	test   cl,cl
c000a89f:	74 06                	je     c000a8a7 <Fs::getcwd(Process*, char*, int)+0x27>
c000a8a1:	40                   	inc    eax
c000a8a2:	eb e2                	jmp    c000a886 <Fs::getcwd(Process*, char*, int)+0x6>
c000a8a4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8a7:	31 c0                	xor    eax,eax
c000a8a9:	c3                   	ret    

c000a8aa <Fs::initVFS()>:
c000a8aa:	83 ec 18             	sub    esp,0x18
c000a8ad:	6a 08                	push   0x8
c000a8af:	e8 05 cf ff ff       	call   c00077b9 <malloc>
c000a8b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8b7:	e8 f4 c3 00 00       	call   c0016cb0 <FAT::FAT()>
c000a8bc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8c3:	e8 f1 ce ff ff       	call   c00077b9 <malloc>
c000a8c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cb:	e8 3c d1 00 00       	call   c0017a0c <ISO9660::ISO9660()>
c000a8d0:	83 c4 1c             	add    esp,0x1c
c000a8d3:	c3                   	ret    

c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8d4:	55                   	push   ebp
c000a8d5:	57                   	push   edi
c000a8d6:	56                   	push   esi
c000a8d7:	53                   	push   ebx
c000a8d8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8de:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8e5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8ec:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8f3:	68 00 04 00 00       	push   0x400
c000a8f8:	6a 00                	push   0x0
c000a8fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8fe:	56                   	push   esi
c000a8ff:	e8 cc 5b ff ff       	call   c00004d0 <memset>
c000a904:	83 c4 10             	add    esp,0x10
c000a907:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a90b:	75 0b                	jne    c000a918 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a90d:	50                   	push   eax
c000a90e:	50                   	push   eax
c000a90f:	57                   	push   edi
c000a910:	56                   	push   esi
c000a911:	e8 ea 5c ff ff       	call   c0000600 <strcpy>
c000a916:	eb 41                	jmp    c000a959 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a918:	8a 07                	mov    al,BYTE PTR [edi]
c000a91a:	3c 5c                	cmp    al,0x5c
c000a91c:	74 04                	je     c000a922 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a91e:	3c 2f                	cmp    al,0x2f
c000a920:	75 18                	jne    c000a93a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a922:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a925:	3c 60                	cmp    al,0x60
c000a927:	7e 03                	jle    c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a929:	83 e8 20             	sub    eax,0x20
c000a92c:	88 04 24             	mov    BYTE PTR [esp],al
c000a92f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a936:	50                   	push   eax
c000a937:	50                   	push   eax
c000a938:	eb 18                	jmp    c000a952 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a93a:	50                   	push   eax
c000a93b:	50                   	push   eax
c000a93c:	55                   	push   ebp
c000a93d:	56                   	push   esi
c000a93e:	e8 bd 5c ff ff       	call   c0000600 <strcpy>
c000a943:	5a                   	pop    edx
c000a944:	59                   	pop    ecx
c000a945:	68 86 e5 01 c0       	push   0xc001e586
c000a94a:	56                   	push   esi
c000a94b:	e8 70 5e ff ff       	call   c00007c0 <strcat>
c000a950:	5d                   	pop    ebp
c000a951:	58                   	pop    eax
c000a952:	57                   	push   edi
c000a953:	56                   	push   esi
c000a954:	e8 67 5e ff ff       	call   c00007c0 <strcat>
c000a959:	83 c4 10             	add    esp,0x10
c000a95c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a95f:	3c 60                	cmp    al,0x60
c000a961:	7e 03                	jle    c000a966 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a963:	83 e8 20             	sub    eax,0x20
c000a966:	88 04 24             	mov    BYTE PTR [esp],al
c000a969:	88 03                	mov    BYTE PTR [ebx],al
c000a96b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a972:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a978:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a97c:	bf 03 00 00 00       	mov    edi,0x3
c000a981:	b8 03 00 00 00       	mov    eax,0x3
c000a986:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a989:	84 d2                	test   dl,dl
c000a98b:	0f 84 91 00 00 00    	je     c000aa22 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a991:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a994:	80 fa 5c             	cmp    dl,0x5c
c000a997:	74 05                	je     c000a99e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a999:	80 fa 2f             	cmp    dl,0x2f
c000a99c:	75 12                	jne    c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a99e:	89 c5                	mov    ebp,eax
c000a9a0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9a5:	74 09                	je     c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9a7:	40                   	inc    eax
c000a9a8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9ac:	89 cf                	mov    edi,ecx
c000a9ae:	eb d6                	jmp    c000a986 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9b0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9b5:	75 5b                	jne    c000aa12 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9b7:	80 fa 2e             	cmp    dl,0x2e
c000a9ba:	75 56                	jne    c000aa12 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9bc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9c0:	74 19                	je     c000a9db <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9c2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9c7:	74 53                	je     c000aa1c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9c9:	89 f9                	mov    ecx,edi
c000a9cb:	41                   	inc    ecx
c000a9cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9cf:	80 fa 2f             	cmp    dl,0x2f
c000a9d2:	74 f7                	je     c000a9cb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9d4:	80 fa 5c             	cmp    dl,0x5c
c000a9d7:	74 f2                	je     c000a9cb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9d9:	eb d1                	jmp    c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9db:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9e0:	74 3a                	je     c000aa1c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9e2:	83 f8 03             	cmp    eax,0x3
c000a9e5:	74 c5                	je     c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e7:	41                   	inc    ecx
c000a9e8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9eb:	80 fa 2f             	cmp    dl,0x2f
c000a9ee:	74 f7                	je     c000a9e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9f0:	80 fa 5c             	cmp    dl,0x5c
c000a9f3:	74 f2                	je     c000a9e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9f5:	48                   	dec    eax
c000a9f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9fa:	75 06                	jne    c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa00:	eb f3                	jmp    c000a9f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa02:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa06:	74 07                	je     c000aa0f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa08:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa0c:	48                   	dec    eax
c000aa0d:	eb f3                	jmp    c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa0f:	40                   	inc    eax
c000aa10:	eb 9a                	jmp    c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa12:	80 fa 2f             	cmp    dl,0x2f
c000aa15:	74 95                	je     c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa17:	80 fa 5c             	cmp    dl,0x5c
c000aa1a:	74 90                	je     c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa1c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa1f:	40                   	inc    eax
c000aa20:	eb 8a                	jmp    c000a9ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa22:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa26:	83 ec 0c             	sub    esp,0xc
c000aa29:	53                   	push   ebx
c000aa2a:	e8 11 5b ff ff       	call   c0000540 <strlen>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa37:	75 26                	jne    c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa39:	83 ec 0c             	sub    esp,0xc
c000aa3c:	53                   	push   ebx
c000aa3d:	e8 fe 5a ff ff       	call   c0000540 <strlen>
c000aa42:	83 c4 10             	add    esp,0x10
c000aa45:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa4a:	74 26                	je     c000aa72 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	53                   	push   ebx
c000aa50:	e8 eb 5a ff ff       	call   c0000540 <strlen>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa5d:	eb c7                	jmp    c000aa26 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa5f:	83 ec 0c             	sub    esp,0xc
c000aa62:	53                   	push   ebx
c000aa63:	e8 d8 5a ff ff       	call   c0000540 <strlen>
c000aa68:	83 c4 10             	add    esp,0x10
c000aa6b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa70:	74 c7                	je     c000aa39 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa72:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa78:	5b                   	pop    ebx
c000aa79:	5e                   	pop    esi
c000aa7a:	5f                   	pop    edi
c000aa7b:	5d                   	pop    ebp
c000aa7c:	c3                   	ret    
c000aa7d:	90                   	nop

c000aa7e <File::File(char const*, Process*)>:
c000aa7e:	83 ec 0c             	sub    esp,0xc
c000aa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa85:	83 ec 08             	sub    esp,0x8
c000aa88:	6a 00                	push   0x0
c000aa8a:	50                   	push   eax
c000aa8b:	e8 e2 e3 ff ff       	call   c0008e72 <UnixFile::UnixFile(int)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	89 10                	mov    DWORD PTR [eax],edx
c000aa9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aaa2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaac:	83 c0 0d             	add    eax,0xd
c000aaaf:	83 ec 04             	sub    esp,0x4
c000aab2:	52                   	push   edx
c000aab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab7:	50                   	push   eax
c000aab8:	e8 17 fe ff ff       	call   c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aabd:	83 c4 10             	add    esp,0x10
c000aac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aac7:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aace:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aae6:	25 ff 00 00 00       	and    eax,0xff
c000aaeb:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000aaf2:	85 c0                	test   eax,eax
c000aaf4:	74 42                	je     c000ab38 <File::File(char const*, Process*)+0xba>
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab00:	25 ff 00 00 00       	and    eax,0xff
c000ab05:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000ab0c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab12:	85 c0                	test   eax,eax
c000ab14:	75 22                	jne    c000ab38 <File::File(char const*, Process*)+0xba>
c000ab16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab20:	25 ff 00 00 00       	and    eax,0xff
c000ab25:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000ab2c:	83 ec 0c             	sub    esp,0xc
c000ab2f:	50                   	push   eax
c000ab30:	e8 0f 20 00 00       	call   c000cb44 <LogicalDisk::mount()>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	90                   	nop
c000ab39:	83 c4 0c             	add    esp,0xc
c000ab3c:	c3                   	ret    
c000ab3d:	90                   	nop

c000ab3e <File::open(FileOpenMode)>:
c000ab3e:	53                   	push   ebx
c000ab3f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab44:	83 ec 08             	sub    esp,0x8
c000ab47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab4b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab52:	80 fa 19             	cmp    dl,0x19
c000ab55:	77 40                	ja     c000ab97 <File::open(FileOpenMode)+0x59>
c000ab57:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ab5e:	85 d2                	test   edx,edx
c000ab60:	74 35                	je     c000ab97 <File::open(FileOpenMode)+0x59>
c000ab62:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab68:	85 d2                	test   edx,edx
c000ab6a:	74 2b                	je     c000ab97 <File::open(FileOpenMode)+0x59>
c000ab6c:	b8 06 00 00 00       	mov    eax,0x6
c000ab71:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab75:	75 20                	jne    c000ab97 <File::open(FileOpenMode)+0x59>
c000ab77:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab79:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab83:	51                   	push   ecx
c000ab84:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab87:	51                   	push   ecx
c000ab88:	52                   	push   edx
c000ab89:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab8c:	83 c4 10             	add    esp,0x10
c000ab8f:	85 c0                	test   eax,eax
c000ab91:	75 04                	jne    c000ab97 <File::open(FileOpenMode)+0x59>
c000ab93:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab97:	83 c4 08             	add    esp,0x8
c000ab9a:	5b                   	pop    ebx
c000ab9b:	c3                   	ret    

c000ab9c <File::close()>:
c000ab9c:	53                   	push   ebx
c000ab9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aba2:	83 ec 08             	sub    esp,0x8
c000aba5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aba9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abb0:	80 fa 19             	cmp    dl,0x19
c000abb3:	77 41                	ja     c000abf6 <File::close()+0x5a>
c000abb5:	8b 1c 95 40 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5c0]
c000abbc:	85 db                	test   ebx,ebx
c000abbe:	74 36                	je     c000abf6 <File::close()+0x5a>
c000abc0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000abc7:	74 2d                	je     c000abf6 <File::close()+0x5a>
c000abc9:	b8 05 00 00 00       	mov    eax,0x5
c000abce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abd2:	74 22                	je     c000abf6 <File::close()+0x5a>
c000abd4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abd8:	8b 04 95 40 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5c0]
c000abdf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abe5:	53                   	push   ebx
c000abe6:	53                   	push   ebx
c000abe7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abe9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abef:	50                   	push   eax
c000abf0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abf3:	83 c4 10             	add    esp,0x10
c000abf6:	83 c4 08             	add    esp,0x8
c000abf9:	5b                   	pop    ebx
c000abfa:	c3                   	ret    
c000abfb:	90                   	nop

c000abfc <File::seek(unsigned long long)>:
c000abfc:	56                   	push   esi
c000abfd:	53                   	push   ebx
c000abfe:	b8 0b 00 00 00       	mov    eax,0xb
c000ac03:	51                   	push   ecx
c000ac04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac0c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac17:	80 fa 19             	cmp    dl,0x19
c000ac1a:	77 31                	ja     c000ac4d <File::seek(unsigned long long)+0x51>
c000ac1c:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ac23:	85 d2                	test   edx,edx
c000ac25:	74 26                	je     c000ac4d <File::seek(unsigned long long)+0x51>
c000ac27:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac2d:	85 d2                	test   edx,edx
c000ac2f:	74 1c                	je     c000ac4d <File::seek(unsigned long long)+0x51>
c000ac31:	b8 05 00 00 00       	mov    eax,0x5
c000ac36:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac3a:	74 11                	je     c000ac4d <File::seek(unsigned long long)+0x51>
c000ac3c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac3e:	53                   	push   ebx
c000ac3f:	51                   	push   ecx
c000ac40:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac46:	52                   	push   edx
c000ac47:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac4a:	83 c4 10             	add    esp,0x10
c000ac4d:	5a                   	pop    edx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	5e                   	pop    esi
c000ac50:	c3                   	ret    
c000ac51:	90                   	nop

c000ac52 <File::tell(unsigned long long*)>:
c000ac52:	83 ec 0c             	sub    esp,0xc
c000ac55:	b8 0b 00 00 00       	mov    eax,0xb
c000ac5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac5e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac65:	80 fa 19             	cmp    dl,0x19
c000ac68:	77 34                	ja     c000ac9e <File::tell(unsigned long long*)+0x4c>
c000ac6a:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ac71:	85 d2                	test   edx,edx
c000ac73:	74 29                	je     c000ac9e <File::tell(unsigned long long*)+0x4c>
c000ac75:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac7b:	85 d2                	test   edx,edx
c000ac7d:	74 1f                	je     c000ac9e <File::tell(unsigned long long*)+0x4c>
c000ac7f:	b8 05 00 00 00       	mov    eax,0x5
c000ac84:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac88:	74 14                	je     c000ac9e <File::tell(unsigned long long*)+0x4c>
c000ac8a:	50                   	push   eax
c000ac8b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac91:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac97:	52                   	push   edx
c000ac98:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac9b:	83 c4 10             	add    esp,0x10
c000ac9e:	83 c4 0c             	add    esp,0xc
c000aca1:	c3                   	ret    

c000aca2 <File::rewind()>:
c000aca2:	83 ec 10             	sub    esp,0x10
c000aca5:	6a 00                	push   0x0
c000aca7:	6a 00                	push   0x0
c000aca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acad:	e8 4a ff ff ff       	call   c000abfc <File::seek(unsigned long long)>
c000acb2:	83 c4 1c             	add    esp,0x1c
c000acb5:	c3                   	ret    

c000acb6 <File::unlink()>:
c000acb6:	83 ec 0c             	sub    esp,0xc
c000acb9:	b8 0b 00 00 00       	mov    eax,0xb
c000acbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acc2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acc9:	80 f9 19             	cmp    cl,0x19
c000accc:	77 2f                	ja     c000acfd <File::unlink()+0x47>
c000acce:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000acd5:	85 c9                	test   ecx,ecx
c000acd7:	74 24                	je     c000acfd <File::unlink()+0x47>
c000acd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acdf:	85 c9                	test   ecx,ecx
c000ace1:	74 1a                	je     c000acfd <File::unlink()+0x47>
c000ace3:	b8 06 00 00 00       	mov    eax,0x6
c000ace8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acec:	75 0f                	jne    c000acfd <File::unlink()+0x47>
c000acee:	83 c2 0d             	add    edx,0xd
c000acf1:	50                   	push   eax
c000acf2:	50                   	push   eax
c000acf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acf5:	52                   	push   edx
c000acf6:	51                   	push   ecx
c000acf7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acfa:	83 c4 10             	add    esp,0x10
c000acfd:	83 c4 0c             	add    esp,0xc
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <File::rename(char const*)>:
c000ad02:	83 ec 0c             	sub    esp,0xc
c000ad05:	b8 0b 00 00 00       	mov    eax,0xb
c000ad0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad15:	80 f9 19             	cmp    cl,0x19
c000ad18:	77 32                	ja     c000ad4c <File::rename(char const*)+0x4a>
c000ad1a:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ad21:	85 c9                	test   ecx,ecx
c000ad23:	74 27                	je     c000ad4c <File::rename(char const*)+0x4a>
c000ad25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad2b:	85 c9                	test   ecx,ecx
c000ad2d:	74 1d                	je     c000ad4c <File::rename(char const*)+0x4a>
c000ad2f:	b8 06 00 00 00       	mov    eax,0x6
c000ad34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad38:	75 12                	jne    c000ad4c <File::rename(char const*)+0x4a>
c000ad3a:	83 c2 0d             	add    edx,0xd
c000ad3d:	50                   	push   eax
c000ad3e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad44:	52                   	push   edx
c000ad45:	51                   	push   ecx
c000ad46:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad49:	83 c4 10             	add    esp,0x10
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <File::chfatattr(unsigned char, unsigned char)>:
c000ad50:	57                   	push   edi
c000ad51:	b8 0b 00 00 00       	mov    eax,0xb
c000ad56:	56                   	push   esi
c000ad57:	53                   	push   ebx
c000ad58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad67:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad6b:	80 f9 19             	cmp    cl,0x19
c000ad6e:	77 37                	ja     c000ada7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad70:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ad77:	85 c9                	test   ecx,ecx
c000ad79:	74 2c                	je     c000ada7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad81:	85 c9                	test   ecx,ecx
c000ad83:	74 22                	je     c000ada7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad85:	b8 06 00 00 00       	mov    eax,0x6
c000ad8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad8e:	75 17                	jne    c000ada7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad90:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad92:	89 f0                	mov    eax,esi
c000ad94:	83 c2 0d             	add    edx,0xd
c000ad97:	0f b6 f0             	movzx  esi,al
c000ad9a:	0f b6 db             	movzx  ebx,bl
c000ad9d:	56                   	push   esi
c000ad9e:	53                   	push   ebx
c000ad9f:	52                   	push   edx
c000ada0:	51                   	push   ecx
c000ada1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	5b                   	pop    ebx
c000ada8:	5e                   	pop    esi
c000ada9:	5f                   	pop    edi
c000adaa:	c3                   	ret    
c000adab:	90                   	nop

c000adac <File::exists()>:
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	31 c0                	xor    eax,eax
c000adb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adb5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adbc:	80 f9 19             	cmp    cl,0x19
c000adbf:	77 24                	ja     c000ade5 <File::exists()+0x39>
c000adc1:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000adc8:	85 c9                	test   ecx,ecx
c000adca:	74 19                	je     c000ade5 <File::exists()+0x39>
c000adcc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000add2:	85 c9                	test   ecx,ecx
c000add4:	74 0f                	je     c000ade5 <File::exists()+0x39>
c000add6:	83 c2 0d             	add    edx,0xd
c000add9:	50                   	push   eax
c000adda:	50                   	push   eax
c000addb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000addd:	52                   	push   edx
c000adde:	51                   	push   ecx
c000addf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	83 c4 0c             	add    esp,0xc
c000ade8:	c3                   	ret    
c000ade9:	90                   	nop

c000adea <File::stat(unsigned long long*, bool*)>:
c000adea:	56                   	push   esi
c000adeb:	53                   	push   ebx
c000adec:	50                   	push   eax
c000aded:	b8 0b 00 00 00       	mov    eax,0xb
c000adf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adf6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae05:	80 f9 19             	cmp    cl,0x19
c000ae08:	77 3d                	ja     c000ae47 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae0a:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ae11:	85 c9                	test   ecx,ecx
c000ae13:	74 32                	je     c000ae47 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae1b:	85 c9                	test   ecx,ecx
c000ae1d:	74 28                	je     c000ae47 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae25:	74 13                	je     c000ae3a <File::stat(unsigned long long*, bool*)+0x50>
c000ae27:	83 ec 04             	sub    esp,0x4
c000ae2a:	56                   	push   esi
c000ae2b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae31:	51                   	push   ecx
c000ae32:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae35:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae38:	eb 0a                	jmp    c000ae44 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae3a:	53                   	push   ebx
c000ae3b:	83 c2 0d             	add    edx,0xd
c000ae3e:	56                   	push   esi
c000ae3f:	52                   	push   edx
c000ae40:	51                   	push   ecx
c000ae41:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae44:	83 c4 10             	add    esp,0x10
c000ae47:	5a                   	pop    edx
c000ae48:	5b                   	pop    ebx
c000ae49:	5e                   	pop    esi
c000ae4a:	c3                   	ret    

c000ae4b <Fs::setcwd(Process*, char*)>:
c000ae4b:	55                   	push   ebp
c000ae4c:	57                   	push   edi
c000ae4d:	56                   	push   esi
c000ae4e:	53                   	push   ebx
c000ae4f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae55:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae5c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae62:	57                   	push   edi
c000ae63:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae6a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae6e:	56                   	push   esi
c000ae6f:	e8 60 fa ff ff       	call   c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae74:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae77:	e8 c4 56 ff ff       	call   c0000540 <strlen>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	83 f8 02             	cmp    eax,0x2
c000ae82:	77 15                	ja     c000ae99 <Fs::setcwd(Process*, char*)+0x4e>
c000ae84:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae89:	83 eb 41             	sub    ebx,0x41
c000ae8c:	8b 04 9d 40 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd5c0]
c000ae93:	85 c0                	test   eax,eax
c000ae95:	75 1c                	jne    c000aeb3 <Fs::setcwd(Process*, char*)+0x68>
c000ae97:	eb 2f                	jmp    c000aec8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	56                   	push   esi
c000ae9d:	e8 9e 56 ff ff       	call   c0000540 <strlen>
c000aea2:	83 c4 10             	add    esp,0x10
c000aea5:	83 f8 03             	cmp    eax,0x3
c000aea8:	75 57                	jne    c000af01 <Fs::setcwd(Process*, char*)+0xb6>
c000aeaa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aeaf:	75 50                	jne    c000af01 <Fs::setcwd(Process*, char*)+0xb6>
c000aeb1:	eb d1                	jmp    c000ae84 <Fs::setcwd(Process*, char*)+0x39>
c000aeb3:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aeba:	75 0c                	jne    c000aec8 <Fs::setcwd(Process*, char*)+0x7d>
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	50                   	push   eax
c000aec0:	e8 7f 1c 00 00       	call   c000cb44 <LogicalDisk::mount()>
c000aec5:	83 c4 10             	add    esp,0x10
c000aec8:	b8 03 00 00 00       	mov    eax,0x3
c000aecd:	83 fb 19             	cmp    ebx,0x19
c000aed0:	0f 87 c6 00 00 00    	ja     c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000aed6:	8b 14 9d 40 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd5c0]
c000aedd:	b8 05 00 00 00       	mov    eax,0x5
c000aee2:	85 d2                	test   edx,edx
c000aee4:	0f 84 b2 00 00 00    	je     c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000aeea:	b8 06 00 00 00       	mov    eax,0x6
c000aeef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aef6:	0f 85 92 00 00 00    	jne    c000af8e <Fs::setcwd(Process*, char*)+0x143>
c000aefc:	e9 9b 00 00 00       	jmp    c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000af01:	83 ec 0c             	sub    esp,0xc
c000af04:	68 14 01 00 00       	push   0x114
c000af09:	e8 ab c8 ff ff       	call   c00077b9 <malloc>
c000af0e:	83 c4 0c             	add    esp,0xc
c000af11:	89 c3                	mov    ebx,eax
c000af13:	55                   	push   ebp
c000af14:	56                   	push   esi
c000af15:	50                   	push   eax
c000af16:	e8 63 fb ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000af1b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af20:	83 c4 0c             	add    esp,0xc
c000af23:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af27:	50                   	push   eax
c000af28:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af2c:	50                   	push   eax
c000af2d:	53                   	push   ebx
c000af2e:	e8 b7 fe ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	83 f8 02             	cmp    eax,0x2
c000af39:	74 04                	je     c000af3f <Fs::setcwd(Process*, char*)+0xf4>
c000af3b:	85 c0                	test   eax,eax
c000af3d:	74 1c                	je     c000af5b <Fs::setcwd(Process*, char*)+0x110>
c000af3f:	b8 01 00 00 00       	mov    eax,0x1
c000af44:	85 db                	test   ebx,ebx
c000af46:	74 54                	je     c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000af48:	83 ec 0c             	sub    esp,0xc
c000af4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af4d:	53                   	push   ebx
c000af4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	b8 01 00 00 00       	mov    eax,0x1
c000af59:	eb 41                	jmp    c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000af5b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af60:	75 1c                	jne    c000af7e <Fs::setcwd(Process*, char*)+0x133>
c000af62:	b8 02 00 00 00       	mov    eax,0x2
c000af67:	85 db                	test   ebx,ebx
c000af69:	74 31                	je     c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000af6b:	83 ec 0c             	sub    esp,0xc
c000af6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af70:	53                   	push   ebx
c000af71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	b8 02 00 00 00       	mov    eax,0x2
c000af7c:	eb 1e                	jmp    c000af9c <Fs::setcwd(Process*, char*)+0x151>
c000af7e:	85 db                	test   ebx,ebx
c000af80:	74 0c                	je     c000af8e <Fs::setcwd(Process*, char*)+0x143>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af87:	53                   	push   ebx
c000af88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	50                   	push   eax
c000af8f:	50                   	push   eax
c000af90:	56                   	push   esi
c000af91:	57                   	push   edi
c000af92:	e8 69 56 ff ff       	call   c0000600 <strcpy>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	31 c0                	xor    eax,eax
c000af9c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afa2:	5b                   	pop    ebx
c000afa3:	5e                   	pop    esi
c000afa4:	5f                   	pop    edi
c000afa5:	5d                   	pop    ebp
c000afa6:	c3                   	ret    
c000afa7:	90                   	nop

c000afa8 <Directory::Directory(char const*, Process*)>:
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afaf:	83 ec 08             	sub    esp,0x8
c000afb2:	6a 00                	push   0x0
c000afb4:	50                   	push   eax
c000afb5:	e8 b8 de ff ff       	call   c0008e72 <UnixFile::UnixFile(int)>
c000afba:	83 c4 10             	add    esp,0x10
c000afbd:	ba 34 d9 01 c0       	mov    edx,0xc001d934
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	89 10                	mov    DWORD PTR [eax],edx
c000afc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afcc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd6:	83 c0 0d             	add    eax,0xd
c000afd9:	83 ec 04             	sub    esp,0x4
c000afdc:	52                   	push   edx
c000afdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe1:	50                   	push   eax
c000afe2:	e8 ed f8 ff ff       	call   c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aff1:	8d 50 bf             	lea    edx,[eax-0x41]
c000aff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000affe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b002:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b010:	25 ff 00 00 00       	and    eax,0xff
c000b015:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000b01c:	85 c0                	test   eax,eax
c000b01e:	74 42                	je     c000b062 <Directory::Directory(char const*, Process*)+0xba>
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b02a:	25 ff 00 00 00       	and    eax,0xff
c000b02f:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000b036:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b03c:	85 c0                	test   eax,eax
c000b03e:	75 22                	jne    c000b062 <Directory::Directory(char const*, Process*)+0xba>
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b04a:	25 ff 00 00 00       	and    eax,0xff
c000b04f:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	50                   	push   eax
c000b05a:	e8 e5 1a 00 00       	call   c000cb44 <LogicalDisk::mount()>
c000b05f:	83 c4 10             	add    esp,0x10
c000b062:	90                   	nop
c000b063:	83 c4 0c             	add    esp,0xc
c000b066:	c3                   	ret    
c000b067:	90                   	nop

c000b068 <Directory::open()>:
c000b068:	53                   	push   ebx
c000b069:	b8 0b 00 00 00       	mov    eax,0xb
c000b06e:	83 ec 08             	sub    esp,0x8
c000b071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b075:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b07c:	80 fa 19             	cmp    dl,0x19
c000b07f:	77 3d                	ja     c000b0be <Directory::open()+0x56>
c000b081:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b088:	85 d2                	test   edx,edx
c000b08a:	74 32                	je     c000b0be <Directory::open()+0x56>
c000b08c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b092:	85 d2                	test   edx,edx
c000b094:	74 28                	je     c000b0be <Directory::open()+0x56>
c000b096:	b8 06 00 00 00       	mov    eax,0x6
c000b09b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b09f:	75 1d                	jne    c000b0be <Directory::open()+0x56>
c000b0a1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0a7:	50                   	push   eax
c000b0a8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0aa:	51                   	push   ecx
c000b0ab:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0ae:	51                   	push   ecx
c000b0af:	52                   	push   edx
c000b0b0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	85 c0                	test   eax,eax
c000b0b8:	75 04                	jne    c000b0be <Directory::open()+0x56>
c000b0ba:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0be:	83 c4 08             	add    esp,0x8
c000b0c1:	5b                   	pop    ebx
c000b0c2:	c3                   	ret    
c000b0c3:	90                   	nop

c000b0c4 <Directory::close()>:
c000b0c4:	53                   	push   ebx
c000b0c5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0d1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0d8:	80 fa 19             	cmp    dl,0x19
c000b0db:	77 41                	ja     c000b11e <Directory::close()+0x5a>
c000b0dd:	8b 1c 95 40 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b0e4:	85 db                	test   ebx,ebx
c000b0e6:	74 36                	je     c000b11e <Directory::close()+0x5a>
c000b0e8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0ef:	74 2d                	je     c000b11e <Directory::close()+0x5a>
c000b0f1:	b8 05 00 00 00       	mov    eax,0x5
c000b0f6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0fa:	74 22                	je     c000b11e <Directory::close()+0x5a>
c000b0fc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b100:	8b 04 95 40 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5c0]
c000b107:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b10d:	53                   	push   ebx
c000b10e:	53                   	push   ebx
c000b10f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b111:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b117:	50                   	push   eax
c000b118:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b11b:	83 c4 10             	add    esp,0x10
c000b11e:	83 c4 08             	add    esp,0x8
c000b121:	5b                   	pop    ebx
c000b122:	c3                   	ret    
c000b123:	90                   	nop

c000b124 <Directory::unlink()>:
c000b124:	83 ec 0c             	sub    esp,0xc
c000b127:	b8 0b 00 00 00       	mov    eax,0xb
c000b12c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b130:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b137:	80 f9 19             	cmp    cl,0x19
c000b13a:	77 2f                	ja     c000b16b <Directory::unlink()+0x47>
c000b13c:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b143:	85 c9                	test   ecx,ecx
c000b145:	74 24                	je     c000b16b <Directory::unlink()+0x47>
c000b147:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b14d:	85 c9                	test   ecx,ecx
c000b14f:	74 1a                	je     c000b16b <Directory::unlink()+0x47>
c000b151:	b8 06 00 00 00       	mov    eax,0x6
c000b156:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b15a:	75 0f                	jne    c000b16b <Directory::unlink()+0x47>
c000b15c:	83 c2 0d             	add    edx,0xd
c000b15f:	50                   	push   eax
c000b160:	50                   	push   eax
c000b161:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b163:	52                   	push   edx
c000b164:	51                   	push   ecx
c000b165:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	83 c4 0c             	add    esp,0xc
c000b16e:	c3                   	ret    
c000b16f:	90                   	nop

c000b170 <Directory::rename(char const*)>:
c000b170:	83 ec 0c             	sub    esp,0xc
c000b173:	b8 0b 00 00 00       	mov    eax,0xb
c000b178:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b17c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b183:	80 f9 19             	cmp    cl,0x19
c000b186:	77 32                	ja     c000b1ba <Directory::rename(char const*)+0x4a>
c000b188:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b18f:	85 c9                	test   ecx,ecx
c000b191:	74 27                	je     c000b1ba <Directory::rename(char const*)+0x4a>
c000b193:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b199:	85 c9                	test   ecx,ecx
c000b19b:	74 1d                	je     c000b1ba <Directory::rename(char const*)+0x4a>
c000b19d:	b8 06 00 00 00       	mov    eax,0x6
c000b1a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1a6:	75 12                	jne    c000b1ba <Directory::rename(char const*)+0x4a>
c000b1a8:	83 c2 0d             	add    edx,0xd
c000b1ab:	50                   	push   eax
c000b1ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1b2:	52                   	push   edx
c000b1b3:	51                   	push   ecx
c000b1b4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1b7:	83 c4 10             	add    esp,0x10
c000b1ba:	83 c4 0c             	add    esp,0xc
c000b1bd:	c3                   	ret    

c000b1be <Directory::exists()>:
c000b1be:	83 ec 0c             	sub    esp,0xc
c000b1c1:	31 c0                	xor    eax,eax
c000b1c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1c7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ce:	80 f9 19             	cmp    cl,0x19
c000b1d1:	77 24                	ja     c000b1f7 <Directory::exists()+0x39>
c000b1d3:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b1da:	85 c9                	test   ecx,ecx
c000b1dc:	74 19                	je     c000b1f7 <Directory::exists()+0x39>
c000b1de:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1e4:	85 c9                	test   ecx,ecx
c000b1e6:	74 0f                	je     c000b1f7 <Directory::exists()+0x39>
c000b1e8:	83 c2 0d             	add    edx,0xd
c000b1eb:	50                   	push   eax
c000b1ec:	50                   	push   eax
c000b1ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ef:	52                   	push   edx
c000b1f0:	51                   	push   ecx
c000b1f1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1f4:	83 c4 10             	add    esp,0x10
c000b1f7:	83 c4 0c             	add    esp,0xc
c000b1fa:	c3                   	ret    
c000b1fb:	90                   	nop

c000b1fc <Directory::read(dirent*)>:
c000b1fc:	83 ec 1c             	sub    esp,0x1c
c000b1ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b204:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b208:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b20f:	80 fa 19             	cmp    dl,0x19
c000b212:	77 30                	ja     c000b244 <Directory::read(dirent*)+0x48>
c000b214:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b21b:	85 d2                	test   edx,edx
c000b21d:	74 25                	je     c000b244 <Directory::read(dirent*)+0x48>
c000b21f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b226:	74 1c                	je     c000b244 <Directory::read(dirent*)+0x48>
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b22d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b231:	52                   	push   edx
c000b232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b236:	6a 00                	push   0x0
c000b238:	68 10 01 00 00       	push   0x110
c000b23d:	51                   	push   ecx
c000b23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b241:	83 c4 20             	add    esp,0x20
c000b244:	83 c4 1c             	add    esp,0x1c
c000b247:	c3                   	ret    

c000b248 <Directory::create()>:
c000b248:	83 ec 0c             	sub    esp,0xc
c000b24b:	b8 0b 00 00 00       	mov    eax,0xb
c000b250:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b254:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b25b:	80 f9 19             	cmp    cl,0x19
c000b25e:	77 2f                	ja     c000b28f <Directory::create()+0x47>
c000b260:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b267:	85 c9                	test   ecx,ecx
c000b269:	74 24                	je     c000b28f <Directory::create()+0x47>
c000b26b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b271:	85 c9                	test   ecx,ecx
c000b273:	74 1a                	je     c000b28f <Directory::create()+0x47>
c000b275:	b8 06 00 00 00       	mov    eax,0x6
c000b27a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b27e:	75 0f                	jne    c000b28f <Directory::create()+0x47>
c000b280:	83 c2 0d             	add    edx,0xd
c000b283:	50                   	push   eax
c000b284:	50                   	push   eax
c000b285:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b287:	52                   	push   edx
c000b288:	51                   	push   ecx
c000b289:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	83 c4 0c             	add    esp,0xc
c000b292:	c3                   	ret    
c000b293:	90                   	nop

c000b294 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b294:	b8 0a 00 00 00       	mov    eax,0xa
c000b299:	c3                   	ret    
c000b29a:	66 90                	xchg   ax,ax

c000b29c <Bus::Bus(char const*)>:
c000b29c:	83 ec 0c             	sub    esp,0xc
c000b29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a3:	83 ec 08             	sub    esp,0x8
c000b2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2aa:	50                   	push   eax
c000b2ab:	e8 30 08 00 00       	call   c000bae0 <Device::Device(char const*)>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	ba 50 d9 01 c0       	mov    edx,0xc001d950
c000b2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bc:	89 10                	mov    DWORD PTR [eax],edx
c000b2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2cc:	90                   	nop
c000b2cd:	83 c4 0c             	add    esp,0xc
c000b2d0:	c3                   	ret    
c000b2d1:	90                   	nop
c000b2d2:	66 90                	xchg   ax,ax

c000b2d4 <Bus::~Bus()>:
c000b2d4:	83 ec 0c             	sub    esp,0xc
c000b2d7:	ba 50 d9 01 c0       	mov    edx,0xc001d950
c000b2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e0:	89 10                	mov    DWORD PTR [eax],edx
c000b2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	50                   	push   eax
c000b2ea:	e8 5b 05 00 00       	call   c000b84a <Device::~Device()>
c000b2ef:	83 c4 10             	add    esp,0x10
c000b2f2:	90                   	nop
c000b2f3:	83 c4 0c             	add    esp,0xc
c000b2f6:	c3                   	ret    
c000b2f7:	90                   	nop

c000b2f8 <Bus::~Bus()>:
c000b2f8:	83 ec 0c             	sub    esp,0xc
c000b2fb:	83 ec 0c             	sub    esp,0xc
c000b2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b302:	e8 cd ff ff ff       	call   c000b2d4 <Bus::~Bus()>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	83 ec 08             	sub    esp,0x8
c000b30d:	68 58 01 00 00       	push   0x158
c000b312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b316:	e8 f7 f0 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <beepThread(void*)>:
c000b322:	83 ec 0c             	sub    esp,0xc
c000b325:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000b32a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b32e:	48                   	dec    eax
c000b32f:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000b334:	75 01                	jne    c000b337 <beepThread(void*)+0x15>
c000b336:	fb                   	sti    
c000b337:	83 ec 0c             	sub    esp,0xc
c000b33a:	6b c2 0a             	imul   eax,edx,0xa
c000b33d:	50                   	push   eax
c000b33e:	e8 51 83 00 00       	call   c0013694 <milliTenthSleep(unsigned int)>
c000b343:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34a:	e8 f7 a0 00 00       	call   c0015446 <HalMakeBeep(int)>
c000b34f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b357:	83 c4 1c             	add    esp,0x1c
c000b35a:	e9 31 82 00 00       	jmp    c0013590 <blockTask(TaskState)>

c000b35f <Krnl::beep(int, int, bool)>:
c000b35f:	56                   	push   esi
c000b360:	53                   	push   ebx
c000b361:	83 ec 10             	sub    esp,0x10
c000b364:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b368:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b370:	e8 d1 a0 00 00       	call   c0015446 <HalMakeBeep(int)>
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	89 f0                	mov    eax,esi
c000b37a:	84 c0                	test   al,al
c000b37c:	74 1e                	je     c000b39c <Krnl::beep(int, int, bool)+0x3d>
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	6b db 0a             	imul   ebx,ebx,0xa
c000b384:	53                   	push   ebx
c000b385:	e8 0a 83 00 00       	call   c0013694 <milliTenthSleep(unsigned int)>
c000b38a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b392:	83 c4 14             	add    esp,0x14
c000b395:	5b                   	pop    ebx
c000b396:	5e                   	pop    esi
c000b397:	e9 aa a0 00 00       	jmp    c0015446 <HalMakeBeep(int)>
c000b39c:	68 e6 00 00 00       	push   0xe6
c000b3a1:	53                   	push   ebx
c000b3a2:	68 22 b3 00 c0       	push   0xc000b322
c000b3a7:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000b3ad:	e8 c2 7d 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c000b3b2:	83 c4 14             	add    esp,0x14
c000b3b5:	5b                   	pop    ebx
c000b3b6:	5e                   	pop    esi
c000b3b7:	c3                   	ret    

c000b3b8 <User::loadClockSettings(int)>:
c000b3b8:	53                   	push   ebx
c000b3b9:	83 ec 14             	sub    esp,0x14
c000b3bc:	68 14 01 00 00       	push   0x114
c000b3c1:	e8 f3 c3 ff ff       	call   c00077b9 <malloc>
c000b3c6:	83 c4 0c             	add    esp,0xc
c000b3c9:	89 c3                	mov    ebx,eax
c000b3cb:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000b3d1:	68 74 d9 01 c0       	push   0xc001d974
c000b3d6:	50                   	push   eax
c000b3d7:	e8 a2 f6 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000b3dc:	58                   	pop    eax
c000b3dd:	5a                   	pop    edx
c000b3de:	6a 01                	push   0x1
c000b3e0:	53                   	push   ebx
c000b3e1:	e8 58 f7 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c000b3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3e9:	e8 ae f7 ff ff       	call   c000ab9c <File::close()>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	85 db                	test   ebx,ebx
c000b3f3:	74 0f                	je     c000b404 <User::loadClockSettings(int)+0x4c>
c000b3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3fe:	83 c4 08             	add    esp,0x8
c000b401:	5b                   	pop    ebx
c000b402:	ff e0                	jmp    eax
c000b404:	83 c4 08             	add    esp,0x8
c000b407:	5b                   	pop    ebx
c000b408:	c3                   	ret    
c000b409:	90                   	nop

c000b40a <Clock::Clock(char const*)>:
c000b40a:	83 ec 0c             	sub    esp,0xc
c000b40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b411:	83 ec 08             	sub    esp,0x8
c000b414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b418:	50                   	push   eax
c000b419:	e8 c2 06 00 00       	call   c000bae0 <Device::Device(char const*)>
c000b41e:	83 c4 10             	add    esp,0x10
c000b421:	ba 9c d9 01 c0       	mov    edx,0xc001d99c
c000b426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42a:	89 10                	mov    DWORD PTR [eax],edx
c000b42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b430:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b43a:	90                   	nop
c000b43b:	83 c4 0c             	add    esp,0xc
c000b43e:	c3                   	ret    
c000b43f:	90                   	nop

c000b440 <Clock::~Clock()>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	ba 9c d9 01 c0       	mov    edx,0xc001d99c
c000b448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44c:	89 10                	mov    DWORD PTR [eax],edx
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	83 ec 0c             	sub    esp,0xc
c000b455:	50                   	push   eax
c000b456:	e8 ef 03 00 00       	call   c000b84a <Device::~Device()>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	90                   	nop
c000b45f:	83 c4 0c             	add    esp,0xc
c000b462:	c3                   	ret    
c000b463:	90                   	nop

c000b464 <Clock::~Clock()>:
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	83 ec 0c             	sub    esp,0xc
c000b46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46e:	e8 cd ff ff ff       	call   c000b440 <Clock::~Clock()>
c000b473:	83 c4 10             	add    esp,0x10
c000b476:	83 ec 08             	sub    esp,0x8
c000b479:	68 58 01 00 00       	push   0x158
c000b47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b482:	e8 8b ef ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000b487:	83 c4 10             	add    esp,0x10
c000b48a:	83 c4 0c             	add    esp,0xc
c000b48d:	c3                   	ret    

c000b48e <Clock::timeInSecondsLocal()>:
c000b48e:	53                   	push   ebx
c000b48f:	83 ec 14             	sub    esp,0x14
c000b492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b496:	8b 10                	mov    edx,DWORD PTR [eax]
c000b498:	50                   	push   eax
c000b499:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b49c:	0f b6 0d d8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205d8
c000b4a3:	03 0d dc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205dc
c000b4a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4af:	89 cb                	mov    ebx,ecx
c000b4b1:	c1 fb 1f             	sar    ebx,0x1f
c000b4b4:	01 c8                	add    eax,ecx
c000b4b6:	11 da                	adc    edx,ebx
c000b4b8:	83 c4 10             	add    esp,0x10
c000b4bb:	31 c9                	xor    ecx,ecx
c000b4bd:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b4c4:	74 05                	je     c000b4cb <Clock::timeInSecondsLocal()+0x3d>
c000b4c6:	b9 08 07 00 00       	mov    ecx,0x708
c000b4cb:	31 db                	xor    ebx,ebx
c000b4cd:	01 c8                	add    eax,ecx
c000b4cf:	11 da                	adc    edx,ebx
c000b4d1:	83 c4 08             	add    esp,0x8
c000b4d4:	5b                   	pop    ebx
c000b4d5:	c3                   	ret    

c000b4d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4d6:	57                   	push   edi
c000b4d7:	56                   	push   esi
c000b4d8:	53                   	push   ebx
c000b4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ea:	0f b6 05 d8 05 02 c0 	movzx  eax,BYTE PTR ds:0xc00205d8
c000b4f1:	03 05 dc 05 02 c0    	add    eax,DWORD PTR ds:0xc00205dc
c000b4f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4fd:	99                   	cdq    
c000b4fe:	29 c6                	sub    esi,eax
c000b500:	19 d7                	sbb    edi,edx
c000b502:	89 f0                	mov    eax,esi
c000b504:	89 fa                	mov    edx,edi
c000b506:	31 f6                	xor    esi,esi
c000b508:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b50f:	74 05                	je     c000b516 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b511:	be 08 07 00 00       	mov    esi,0x708
c000b516:	31 ff                	xor    edi,edi
c000b518:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b51c:	29 f0                	sub    eax,esi
c000b51e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b522:	19 fa                	sbb    edx,edi
c000b524:	89 d8                	mov    eax,ebx
c000b526:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b52a:	5b                   	pop    ebx
c000b52b:	5e                   	pop    esi
c000b52c:	5f                   	pop    edi
c000b52d:	ff e0                	jmp    eax

c000b52f <datetimeToSeconds(datetime_t)>:
c000b52f:	55                   	push   ebp
c000b530:	57                   	push   edi
c000b531:	56                   	push   esi
c000b532:	53                   	push   ebx
c000b533:	83 ec 14             	sub    esp,0x14
c000b536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b53a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b53e:	89 d3                	mov    ebx,edx
c000b540:	0f b6 c6             	movzx  eax,dh
c000b543:	c1 eb 10             	shr    ebx,0x10
c000b546:	48                   	dec    eax
c000b547:	66 81 eb 6c 07       	sub    bx,0x76c
c000b54c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b550:	0f b6 f5             	movzx  esi,ch
c000b553:	89 cf                	mov    edi,ecx
c000b555:	6b f6 3c             	imul   esi,esi,0x3c
c000b558:	c1 ef 10             	shr    edi,0x10
c000b55b:	0f b6 c9             	movzx  ecx,cl
c000b55e:	89 f8                	mov    eax,edi
c000b560:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b566:	0f b6 f8             	movzx  edi,al
c000b569:	0f b6 d2             	movzx  edx,dl
c000b56c:	01 fe                	add    esi,edi
c000b56e:	01 f1                	add    ecx,esi
c000b570:	0f b7 f3             	movzx  esi,bx
c000b573:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b577:	c1 f9 1f             	sar    ecx,0x1f
c000b57a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b57f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b583:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b588:	8b 0c 8d e0 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2620]
c000b58f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b593:	76 29                	jbe    c000b5be <datetimeToSeconds(datetime_t)+0x8f>
c000b595:	f6 c3 03             	test   bl,0x3
c000b598:	75 24                	jne    c000b5be <datetimeToSeconds(datetime_t)+0x8f>
c000b59a:	31 d2                	xor    edx,edx
c000b59c:	bf 64 00 00 00       	mov    edi,0x64
c000b5a1:	89 d8                	mov    eax,ebx
c000b5a3:	66 f7 f7             	div    di
c000b5a6:	66 85 d2             	test   dx,dx
c000b5a9:	75 12                	jne    c000b5bd <datetimeToSeconds(datetime_t)+0x8e>
c000b5ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5b1:	bf 90 01 00 00       	mov    edi,0x190
c000b5b6:	99                   	cdq    
c000b5b7:	f7 ff                	idiv   edi
c000b5b9:	85 d2                	test   edx,edx
c000b5bb:	75 01                	jne    c000b5be <datetimeToSeconds(datetime_t)+0x8f>
c000b5bd:	41                   	inc    ecx
c000b5be:	66 83 fb 46          	cmp    bx,0x46
c000b5c2:	76 45                	jbe    c000b609 <datetimeToSeconds(datetime_t)+0xda>
c000b5c4:	bb 46 00 00 00       	mov    ebx,0x46
c000b5c9:	bf 64 00 00 00       	mov    edi,0x64
c000b5ce:	bd 90 01 00 00       	mov    ebp,0x190
c000b5d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5d8:	f6 c3 03             	test   bl,0x3
c000b5db:	75 23                	jne    c000b600 <datetimeToSeconds(datetime_t)+0xd1>
c000b5dd:	89 d8                	mov    eax,ebx
c000b5df:	99                   	cdq    
c000b5e0:	f7 ff                	idiv   edi
c000b5e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5e7:	85 d2                	test   edx,edx
c000b5e9:	75 15                	jne    c000b600 <datetimeToSeconds(datetime_t)+0xd1>
c000b5eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5f1:	99                   	cdq    
c000b5f2:	f7 fd                	idiv   ebp
c000b5f4:	31 c0                	xor    eax,eax
c000b5f6:	85 d2                	test   edx,edx
c000b5f8:	0f 94 c0             	sete   al
c000b5fb:	05 6d 01 00 00       	add    eax,0x16d
c000b600:	01 c1                	add    ecx,eax
c000b602:	43                   	inc    ebx
c000b603:	39 f3                	cmp    ebx,esi
c000b605:	7c cc                	jl     c000b5d3 <datetimeToSeconds(datetime_t)+0xa4>
c000b607:	eb 3b                	jmp    c000b644 <datetimeToSeconds(datetime_t)+0x115>
c000b609:	74 39                	je     c000b644 <datetimeToSeconds(datetime_t)+0x115>
c000b60b:	b8 45 00 00 00       	mov    eax,0x45
c000b610:	89 c2                	mov    edx,eax
c000b612:	83 e2 03             	and    edx,0x3
c000b615:	39 f0                	cmp    eax,esi
c000b617:	7e 13                	jle    c000b62c <datetimeToSeconds(datetime_t)+0xfd>
c000b619:	85 d2                	test   edx,edx
c000b61b:	0f 94 c2             	sete   dl
c000b61e:	48                   	dec    eax
c000b61f:	0f b6 d2             	movzx  edx,dl
c000b622:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b628:	29 d1                	sub    ecx,edx
c000b62a:	eb e4                	jmp    c000b610 <datetimeToSeconds(datetime_t)+0xe1>
c000b62c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b631:	85 d2                	test   edx,edx
c000b633:	75 0d                	jne    c000b642 <datetimeToSeconds(datetime_t)+0x113>
c000b635:	31 c0                	xor    eax,eax
c000b637:	66 85 db             	test   bx,bx
c000b63a:	0f 95 c0             	setne  al
c000b63d:	05 6d 01 00 00       	add    eax,0x16d
c000b642:	29 c1                	sub    ecx,eax
c000b644:	b8 80 51 01 00       	mov    eax,0x15180
c000b649:	f7 e9                	imul   ecx
c000b64b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b64f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b653:	83 c4 14             	add    esp,0x14
c000b656:	5b                   	pop    ebx
c000b657:	5e                   	pop    esi
c000b658:	5f                   	pop    edi
c000b659:	5d                   	pop    ebp
c000b65a:	c3                   	ret    
c000b65b:	90                   	nop

c000b65c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b65c:	57                   	push   edi
c000b65d:	56                   	push   esi
c000b65e:	53                   	push   ebx
c000b65f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b663:	8b 06                	mov    eax,DWORD PTR [esi]
c000b665:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b668:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b670:	e8 ba fe ff ff       	call   c000b52f <datetimeToSeconds(datetime_t)>
c000b675:	59                   	pop    ecx
c000b676:	0f b6 0d d8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205d8
c000b67d:	5b                   	pop    ebx
c000b67e:	03 0d dc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205dc
c000b684:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b68a:	89 cb                	mov    ebx,ecx
c000b68c:	c1 fb 1f             	sar    ebx,0x1f
c000b68f:	29 c8                	sub    eax,ecx
c000b691:	19 da                	sbb    edx,ebx
c000b693:	31 c9                	xor    ecx,ecx
c000b695:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b69c:	74 05                	je     c000b6a3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b69e:	b9 08 07 00 00       	mov    ecx,0x708
c000b6a3:	31 db                	xor    ebx,ebx
c000b6a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6a9:	29 c8                	sub    eax,ecx
c000b6ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6af:	19 da                	sbb    edx,ebx
c000b6b1:	89 f8                	mov    eax,edi
c000b6b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6b7:	5b                   	pop    ebx
c000b6b8:	5e                   	pop    esi
c000b6b9:	5f                   	pop    edi
c000b6ba:	ff e0                	jmp    eax

c000b6bc <secondsToDatetime(unsigned long long)>:
c000b6bc:	55                   	push   ebp
c000b6bd:	57                   	push   edi
c000b6be:	56                   	push   esi
c000b6bf:	53                   	push   ebx
c000b6c0:	83 ec 1c             	sub    esp,0x1c
c000b6c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6cf:	6a 00                	push   0x0
c000b6d1:	68 80 51 01 00       	push   0x15180
c000b6d6:	55                   	push   ebp
c000b6d7:	57                   	push   edi
c000b6d8:	e8 b3 05 01 00       	call   c001bc90 <__udivdi3>
c000b6dd:	83 c4 10             	add    esp,0x10
c000b6e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ea:	6a 00                	push   0x0
c000b6ec:	68 80 51 01 00       	push   0x15180
c000b6f1:	55                   	push   ebp
c000b6f2:	57                   	push   edi
c000b6f3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6f8:	e8 93 06 01 00       	call   c001bd90 <__umoddi3>
c000b6fd:	83 c4 10             	add    esp,0x10
c000b700:	99                   	cdq    
c000b701:	f7 ff                	idiv   edi
c000b703:	bf 3c 00 00 00       	mov    edi,0x3c
c000b708:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b70b:	89 d0                	mov    eax,edx
c000b70d:	99                   	cdq    
c000b70e:	f7 ff                	idiv   edi
c000b710:	85 db                	test   ebx,ebx
c000b712:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b715:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b718:	79 11                	jns    c000b72b <secondsToDatetime(unsigned long long)+0x6f>
c000b71a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b71e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b724:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b729:	eb 07                	jmp    c000b732 <secondsToDatetime(unsigned long long)+0x76>
c000b72b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b730:	89 d8                	mov    eax,ebx
c000b732:	bf b4 05 00 00       	mov    edi,0x5b4
c000b737:	99                   	cdq    
c000b738:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b73d:	f7 f9                	idiv   ecx
c000b73f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b744:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b748:	31 d2                	xor    edx,edx
c000b74a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b752:	01 c3                	add    ebx,eax
c000b754:	89 d8                	mov    eax,ebx
c000b756:	f7 f1                	div    ecx
c000b758:	31 d2                	xor    edx,edx
c000b75a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b75d:	89 d8                	mov    eax,ebx
c000b75f:	f7 f7                	div    edi
c000b761:	31 d2                	xor    edx,edx
c000b763:	29 c1                	sub    ecx,eax
c000b765:	89 d8                	mov    eax,ebx
c000b767:	f7 f5                	div    ebp
c000b769:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b76e:	29 c1                	sub    ecx,eax
c000b770:	31 d2                	xor    edx,edx
c000b772:	89 c8                	mov    eax,ecx
c000b774:	f7 f5                	div    ebp
c000b776:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b77b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b77f:	31 d2                	xor    edx,edx
c000b781:	89 c8                	mov    eax,ecx
c000b783:	f7 f5                	div    ebp
c000b785:	31 d2                	xor    edx,edx
c000b787:	01 c3                	add    ebx,eax
c000b789:	89 c8                	mov    eax,ecx
c000b78b:	f7 f7                	div    edi
c000b78d:	bf 99 00 00 00       	mov    edi,0x99
c000b792:	29 c3                	sub    ebx,eax
c000b794:	31 d2                	xor    edx,edx
c000b796:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b79e:	29 c3                	sub    ebx,eax
c000b7a0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7a3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7a6:	bb 05 00 00 00       	mov    ebx,0x5
c000b7ab:	83 c1 02             	add    ecx,0x2
c000b7ae:	89 c8                	mov    eax,ecx
c000b7b0:	f7 f7                	div    edi
c000b7b2:	31 d2                	xor    edx,edx
c000b7b4:	89 c7                	mov    edi,eax
c000b7b6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7bc:	83 c0 02             	add    eax,0x2
c000b7bf:	f7 f3                	div    ebx
c000b7c1:	89 eb                	mov    ebx,ebp
c000b7c3:	29 c3                	sub    ebx,eax
c000b7c5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7cb:	88 1e                	mov    BYTE PTR [esi],bl
c000b7cd:	19 c0                	sbb    eax,eax
c000b7cf:	31 d2                	xor    edx,edx
c000b7d1:	83 e0 0c             	and    eax,0xc
c000b7d4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7d8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7e4:	83 f9 01             	cmp    ecx,0x1
c000b7e7:	0f 96 c2             	setbe  dl
c000b7ea:	41                   	inc    ecx
c000b7eb:	01 d0                	add    eax,edx
c000b7ed:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7f0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7f4:	83 c4 1c             	add    esp,0x1c
c000b7f7:	89 f0                	mov    eax,esi
c000b7f9:	5b                   	pop    ebx
c000b7fa:	5e                   	pop    esi
c000b7fb:	5f                   	pop    edi
c000b7fc:	5d                   	pop    ebp
c000b7fd:	c2 04 00             	ret    0x4

c000b800 <Clock::timeInDatetimeLocal()>:
c000b800:	53                   	push   ebx
c000b801:	83 ec 14             	sub    esp,0x14
c000b804:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b808:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b80c:	e8 7d fc ff ff       	call   c000b48e <Clock::timeInSecondsLocal()>
c000b811:	83 c4 0c             	add    esp,0xc
c000b814:	52                   	push   edx
c000b815:	50                   	push   eax
c000b816:	53                   	push   ebx
c000b817:	e8 a0 fe ff ff       	call   c000b6bc <secondsToDatetime(unsigned long long)>
c000b81c:	89 d8                	mov    eax,ebx
c000b81e:	83 c4 14             	add    esp,0x14
c000b821:	5b                   	pop    ebx
c000b822:	c2 04 00             	ret    0x4
c000b825:	90                   	nop

c000b826 <Device::hibernate()>:
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Device::wake()>:
c000b828:	c3                   	ret    
c000b829:	90                   	nop

c000b82a <Device::detect()>:
c000b82a:	c3                   	ret    
c000b82b:	90                   	nop

c000b82c <Device::disableLegacy()>:
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Device::powerSaving(PowerSavingLevel)>:
c000b82e:	c3                   	ret    
c000b82f:	90                   	nop

c000b830 <DriverlessDevice::close(int, int, void*)>:
c000b830:	31 c0                	xor    eax,eax
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <DriverlessDevice::detect()>:
c000b834:	c3                   	ret    
c000b835:	90                   	nop

c000b836 <DriverlessDevice::open(int, int, void*)>:
c000b836:	83 ec 18             	sub    esp,0x18
c000b839:	68 10 da 01 c0       	push   0xc001da10
c000b83e:	e8 40 49 00 00       	call   c0010183 <KePanic(char const*)>
c000b843:	83 c8 ff             	or     eax,0xffffffff
c000b846:	83 c4 1c             	add    esp,0x1c
c000b849:	c3                   	ret    

c000b84a <Device::~Device()>:
c000b84a:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000b84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b853:	89 10                	mov    DWORD PTR [eax],edx
c000b855:	90                   	nop
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <Device::~Device()>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b85f:	e8 e6 ff ff ff       	call   c000b84a <Device::~Device()>
c000b864:	83 c4 04             	add    esp,0x4
c000b867:	83 ec 08             	sub    esp,0x8
c000b86a:	68 58 01 00 00       	push   0x158
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	e8 9a eb ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	83 c4 0c             	add    esp,0xc
c000b87e:	c3                   	ret    
c000b87f:	90                   	nop

c000b880 <Device::findAndLoadDriver()>:
c000b880:	c7 44 24 04 2e da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da2e
c000b888:	e9 7b ec ff ff       	jmp    c000a508 <Dbg::kprintf(char const*, ...)>
c000b88d:	90                   	nop

c000b88e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b88e:	57                   	push   edi
c000b88f:	b9 09 00 00 00       	mov    ecx,0x9
c000b894:	56                   	push   esi
c000b895:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b899:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b89d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8a7:	81 c7 18 01 00 00    	add    edi,0x118
c000b8ad:	fc                   	cld    
c000b8ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8b0:	5e                   	pop    esi
c000b8b1:	5f                   	pop    edi
c000b8b2:	c3                   	ret    
c000b8b3:	90                   	nop

c000b8b4 <Device::preOpenACPI(void*, char*, char*)>:
c000b8b4:	57                   	push   edi
c000b8b5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8ba:	56                   	push   esi
c000b8bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8c3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8cd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8d3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8df:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8e4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8f0:	5e                   	pop    esi
c000b8f1:	5f                   	pop    edi
c000b8f2:	c3                   	ret    
c000b8f3:	90                   	nop

c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8f4:	53                   	push   ebx
c000b8f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b901:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b905:	0f b6 c0             	movzx  eax,al
c000b908:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b90c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b910:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b914:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b918:	5b                   	pop    ebx
c000b919:	e9 a6 05 00 00       	jmp    c000bec4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b91e <Device::getParent()>:
c000b91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b922:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b92a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b92e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b932:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b937:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b93b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b93f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b943:	e9 e8 06 00 00       	jmp    c000c030 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b948 <Device::addChild(Device*)>:
c000b948:	53                   	push   ebx
c000b949:	83 ec 08             	sub    esp,0x8
c000b94c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b950:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b954:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b95a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b960:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b962:	85 d2                	test   edx,edx
c000b964:	74 04                	je     c000b96a <Device::addChild(Device*)+0x22>
c000b966:	89 d3                	mov    ebx,edx
c000b968:	eb f6                	jmp    c000b960 <Device::addChild(Device*)+0x18>
c000b96a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b96d:	83 ec 0c             	sub    esp,0xc
c000b970:	6a 08                	push   0x8
c000b972:	e8 42 be ff ff       	call   c00077b9 <malloc>
c000b977:	89 03                	mov    DWORD PTR [ebx],eax
c000b979:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b97f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b986:	83 c4 18             	add    esp,0x18
c000b989:	5b                   	pop    ebx
c000b98a:	c3                   	ret    
c000b98b:	90                   	nop

c000b98c <Device::removeAllChildren()>:
c000b98c:	56                   	push   esi
c000b98d:	53                   	push   ebx
c000b98e:	52                   	push   edx
c000b98f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b993:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b999:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b99c:	74 17                	je     c000b9b5 <Device::removeAllChildren()+0x29>
c000b99e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9a1:	85 c0                	test   eax,eax
c000b9a3:	74 0c                	je     c000b9b1 <Device::removeAllChildren()+0x25>
c000b9a5:	83 ec 0c             	sub    esp,0xc
c000b9a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9aa:	50                   	push   eax
c000b9ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9ae:	83 c4 10             	add    esp,0x10
c000b9b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9b3:	eb e4                	jmp    c000b999 <Device::removeAllChildren()+0xd>
c000b9b5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9c1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ce:	58                   	pop    eax
c000b9cf:	5b                   	pop    ebx
c000b9d0:	5e                   	pop    esi
c000b9d1:	c3                   	ret    

c000b9d2 <Device::hibernateAll()>:
c000b9d2:	53                   	push   ebx
c000b9d3:	83 ec 14             	sub    esp,0x14
c000b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9dc:	53                   	push   ebx
c000b9dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9ec:	74 0f                	je     c000b9fd <Device::hibernateAll()+0x2b>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f4:	e8 d9 ff ff ff       	call   c000b9d2 <Device::hibernateAll()>
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e9                	jmp    c000b9e6 <Device::hibernateAll()+0x14>
c000b9fd:	83 c4 08             	add    esp,0x8
c000ba00:	5b                   	pop    ebx
c000ba01:	c3                   	ret    

c000ba02 <Device::wakeAll()>:
c000ba02:	53                   	push   ebx
c000ba03:	83 ec 14             	sub    esp,0x14
c000ba06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0c:	53                   	push   ebx
c000ba0d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1c:	74 0f                	je     c000ba2d <Device::wakeAll()+0x2b>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba24:	e8 d9 ff ff ff       	call   c000ba02 <Device::wakeAll()>
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e9                	jmp    c000ba16 <Device::wakeAll()+0x14>
c000ba2d:	83 c4 08             	add    esp,0x8
c000ba30:	5b                   	pop    ebx
c000ba31:	c3                   	ret    

c000ba32 <Device::detectAll()>:
c000ba32:	53                   	push   ebx
c000ba33:	83 ec 14             	sub    esp,0x14
c000ba36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba3c:	53                   	push   ebx
c000ba3d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba4c:	74 0f                	je     c000ba5d <Device::detectAll()+0x2b>
c000ba4e:	83 ec 0c             	sub    esp,0xc
c000ba51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba54:	e8 d9 ff ff ff       	call   c000ba32 <Device::detectAll()>
c000ba59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba5b:	eb e9                	jmp    c000ba46 <Device::detectAll()+0x14>
c000ba5d:	83 c4 08             	add    esp,0x8
c000ba60:	5b                   	pop    ebx
c000ba61:	c3                   	ret    

c000ba62 <Device::disableLegacyAll()>:
c000ba62:	c3                   	ret    
c000ba63:	90                   	nop

c000ba64 <Device::loadDriversForAll()>:
c000ba64:	c3                   	ret    
c000ba65:	90                   	nop

c000ba66 <Device::closeAll()>:
c000ba66:	53                   	push   ebx
c000ba67:	83 ec 08             	sub    esp,0x8
c000ba6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba70:	6a 00                	push   0x0
c000ba72:	6a 00                	push   0x0
c000ba74:	6a 00                	push   0x0
c000ba76:	53                   	push   ebx
c000ba77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba80:	83 c4 10             	add    esp,0x10
c000ba83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba86:	74 0f                	je     c000ba97 <Device::closeAll()+0x31>
c000ba88:	83 ec 0c             	sub    esp,0xc
c000ba8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba8e:	e8 d3 ff ff ff       	call   c000ba66 <Device::closeAll()>
c000ba93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba95:	eb e9                	jmp    c000ba80 <Device::closeAll()+0x1a>
c000ba97:	83 c4 08             	add    esp,0x8
c000ba9a:	5b                   	pop    ebx
c000ba9b:	c3                   	ret    

c000ba9c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba9c:	56                   	push   esi
c000ba9d:	53                   	push   ebx
c000ba9e:	83 ec 0c             	sub    esp,0xc
c000baa1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baa5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000baa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baab:	56                   	push   esi
c000baac:	53                   	push   ebx
c000baad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bab0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000babc:	74 0f                	je     c000bacd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000babe:	52                   	push   edx
c000babf:	52                   	push   edx
c000bac0:	56                   	push   esi
c000bac1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bac4:	e8 d3 ff ff ff       	call   c000ba9c <Device::powerSavingAll(PowerSavingLevel)>
c000bac9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bacb:	eb e9                	jmp    c000bab6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bacd:	58                   	pop    eax
c000bace:	5b                   	pop    ebx
c000bacf:	5e                   	pop    esi
c000bad0:	c3                   	ret    
c000bad1:	90                   	nop

c000bad2 <Device::setName(char const*)>:
c000bad2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bada:	e9 21 4b ff ff       	jmp    c0000600 <strcpy>
c000badf:	90                   	nop

c000bae0 <Device::Device(char const*)>:
c000bae0:	83 ec 1c             	sub    esp,0x1c
c000bae3:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000bae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baec:	89 10                	mov    DWORD PTR [eax],edx
c000baee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb00:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb26:	83 ec 08             	sub    esp,0x8
c000bb29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb31:	e8 9c ff ff ff       	call   c000bad2 <Device::setName(char const*)>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb41:	83 ec 0c             	sub    esp,0xc
c000bb44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb48:	e8 6c bc ff ff       	call   c00077b9 <malloc>
c000bb4d:	83 c4 10             	add    esp,0x10
c000bb50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb61:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb97:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbcc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbd6:	90                   	nop
c000bbd7:	83 c4 1c             	add    esp,0x1c
c000bbda:	c3                   	ret    
c000bbdb:	90                   	nop

c000bbdc <Device::getName()>:
c000bbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbe0:	05 d0 00 00 00       	add    eax,0xd0
c000bbe5:	c3                   	ret    

c000bbe6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbe6:	83 ec 0c             	sub    esp,0xc
c000bbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbed:	83 ec 08             	sub    esp,0x8
c000bbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf4:	50                   	push   eax
c000bbf5:	e8 e6 fe ff ff       	call   c000bae0 <Device::Device(char const*)>
c000bbfa:	83 c4 10             	add    esp,0x10
c000bbfd:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c000bc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc06:	89 10                	mov    DWORD PTR [eax],edx
c000bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc16:	90                   	nop
c000bc17:	83 c4 0c             	add    esp,0xc
c000bc1a:	c3                   	ret    
c000bc1b:	90                   	nop

c000bc1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc1c:	57                   	push   edi
c000bc1d:	56                   	push   esi
c000bc1e:	53                   	push   ebx
c000bc1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc2b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc31:	75 0c                	jne    c000bc3f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc33:	52                   	push   edx
c000bc34:	52                   	push   edx
c000bc35:	53                   	push   ebx
c000bc36:	56                   	push   esi
c000bc37:	e8 06 05 01 00       	call   c001c142 <LinkedList<Device>::addElement(Device*)>
c000bc3c:	83 c4 10             	add    esp,0x10
c000bc3f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc48:	74 12                	je     c000bc5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc4a:	50                   	push   eax
c000bc4b:	57                   	push   edi
c000bc4c:	56                   	push   esi
c000bc4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc50:	e8 c7 ff ff ff       	call   c000bc1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	eb e9                	jmp    c000bc45 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc5c:	5b                   	pop    ebx
c000bc5d:	5e                   	pop    esi
c000bc5e:	5f                   	pop    edi
c000bc5f:	c3                   	ret    

c000bc60 <getDevicesOfType(DeviceType)>:
c000bc60:	53                   	push   ebx
c000bc61:	83 ec 14             	sub    esp,0x14
c000bc64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc68:	53                   	push   ebx
c000bc69:	e8 b0 05 01 00       	call   c001c21e <LinkedList<Device>::LinkedList()>
c000bc6e:	83 c4 0c             	add    esp,0xc
c000bc71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc75:	53                   	push   ebx
c000bc76:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000bc7c:	e8 9b ff ff ff       	call   c000bc1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc81:	89 d8                	mov    eax,ebx
c000bc83:	83 c4 18             	add    esp,0x18
c000bc86:	5b                   	pop    ebx
c000bc87:	c2 04 00             	ret    0x4
c000bc8a:	66 90                	xchg   ax,ax

c000bc8c <HardDiskController::HardDiskController(char const*)>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	83 ec 08             	sub    esp,0x8
c000bc96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9a:	50                   	push   eax
c000bc9b:	e8 40 fe ff ff       	call   c000bae0 <Device::Device(char const*)>
c000bca0:	83 c4 10             	add    esp,0x10
c000bca3:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcac:	89 10                	mov    DWORD PTR [eax],edx
c000bcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bcbc:	90                   	nop
c000bcbd:	83 c4 0c             	add    esp,0xc
c000bcc0:	c3                   	ret    
c000bcc1:	90                   	nop
c000bcc2:	66 90                	xchg   ax,ax

c000bcc4 <HardDiskController::~HardDiskController()>:
c000bcc4:	83 ec 0c             	sub    esp,0xc
c000bcc7:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd0:	89 10                	mov    DWORD PTR [eax],edx
c000bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd6:	83 ec 0c             	sub    esp,0xc
c000bcd9:	50                   	push   eax
c000bcda:	e8 6b fb ff ff       	call   c000b84a <Device::~Device()>
c000bcdf:	83 c4 10             	add    esp,0x10
c000bce2:	90                   	nop
c000bce3:	83 c4 0c             	add    esp,0xc
c000bce6:	c3                   	ret    
c000bce7:	90                   	nop

c000bce8 <HardDiskController::~HardDiskController()>:
c000bce8:	83 ec 0c             	sub    esp,0xc
c000bceb:	83 ec 0c             	sub    esp,0xc
c000bcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf2:	e8 cd ff ff ff       	call   c000bcc4 <HardDiskController::~HardDiskController()>
c000bcf7:	83 c4 10             	add    esp,0x10
c000bcfa:	83 ec 08             	sub    esp,0x8
c000bcfd:	68 58 01 00 00       	push   0x158
c000bd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd06:	e8 07 e7 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000bd0b:	83 c4 10             	add    esp,0x10
c000bd0e:	83 c4 0c             	add    esp,0xc
c000bd11:	c3                   	ret    

c000bd12 <PhysicalDisk::eject()>:
c000bd12:	83 c8 ff             	or     eax,0xffffffff
c000bd15:	c3                   	ret    

c000bd16 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd24:	50                   	push   eax
c000bd25:	e8 b6 fd ff ff       	call   c000bae0 <Device::Device(char const*)>
c000bd2a:	83 c4 10             	add    esp,0x10
c000bd2d:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd36:	89 10                	mov    DWORD PTR [eax],edx
c000bd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd52:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd78:	90                   	nop
c000bd79:	83 c4 0c             	add    esp,0xc
c000bd7c:	c3                   	ret    
c000bd7d:	90                   	nop

c000bd7e <PhysicalDisk::startCache()>:
c000bd7e:	56                   	push   esi
c000bd7f:	53                   	push   ebx
c000bd80:	83 ec 10             	sub    esp,0x10
c000bd83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd87:	6a 44                	push   0x44
c000bd89:	e8 2b ba ff ff       	call   c00077b9 <malloc>
c000bd8e:	89 c6                	mov    esi,eax
c000bd90:	58                   	pop    eax
c000bd91:	5a                   	pop    edx
c000bd92:	53                   	push   ebx
c000bd93:	56                   	push   esi
c000bd94:	e8 c3 15 00 00       	call   c000d35c <VCache::VCache(PhysicalDisk*)>
c000bd99:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd9f:	83 c4 14             	add    esp,0x14
c000bda2:	5b                   	pop    ebx
c000bda3:	5e                   	pop    esi
c000bda4:	c3                   	ret    
c000bda5:	90                   	nop

c000bda6 <PhysicalDisk::~PhysicalDisk()>:
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb2:	89 10                	mov    DWORD PTR [eax],edx
c000bdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb8:	83 ec 0c             	sub    esp,0xc
c000bdbb:	50                   	push   eax
c000bdbc:	e8 89 fa ff ff       	call   c000b84a <Device::~Device()>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	90                   	nop
c000bdc5:	83 c4 0c             	add    esp,0xc
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <PhysicalDisk::~PhysicalDisk()>:
c000bdca:	83 ec 0c             	sub    esp,0xc
c000bdcd:	83 ec 0c             	sub    esp,0xc
c000bdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd4:	e8 cd ff ff ff       	call   c000bda6 <PhysicalDisk::~PhysicalDisk()>
c000bdd9:	83 c4 10             	add    esp,0x10
c000bddc:	83 ec 08             	sub    esp,0x8
c000bddf:	68 6c 01 00 00       	push   0x16c
c000bde4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde8:	e8 25 e6 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000bded:	83 c4 10             	add    esp,0x10
c000bdf0:	83 c4 0c             	add    esp,0xc
c000bdf3:	c3                   	ret    

c000bdf4 <int_handler>:
c000bdf4:	55                   	push   ebp
c000bdf5:	57                   	push   edi
c000bdf6:	56                   	push   esi
c000bdf7:	53                   	push   ebx
c000bdf8:	83 ec 0c             	sub    esp,0xc
c000bdfb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdff:	80 3d 58 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f58,0x0
c000be06:	74 0b                	je     c000be13 <int_handler+0x1f>
c000be08:	fa                   	cli    
c000be09:	f4                   	hlt    
c000be0a:	80 3d 58 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f58,0x0
c000be11:	75 f5                	jne    c000be08 <int_handler+0x14>
c000be13:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be16:	8d 46 e0             	lea    eax,[esi-0x20]
c000be19:	83 f8 17             	cmp    eax,0x17
c000be1c:	76 3e                	jbe    c000be5c <int_handler+0x68>
c000be1e:	c1 e6 04             	shl    esi,0x4
c000be21:	31 db                	xor    ebx,ebx
c000be23:	8d ae e0 15 02 c0    	lea    ebp,[esi-0x3ffdea20]
c000be29:	81 c6 e0 05 02 c0    	add    esi,0xc00205e0
c000be2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be33:	85 c0                	test   eax,eax
c000be35:	74 13                	je     c000be4a <int_handler+0x56>
c000be37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be3a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be3e:	74 2a                	je     c000be6a <int_handler+0x76>
c000be40:	83 ec 08             	sub    esp,0x8
c000be43:	52                   	push   edx
c000be44:	57                   	push   edi
c000be45:	ff d0                	call   eax
c000be47:	83 c4 10             	add    esp,0x10
c000be4a:	43                   	inc    ebx
c000be4b:	83 fb 04             	cmp    ebx,0x4
c000be4e:	75 df                	jne    c000be2f <int_handler+0x3b>
c000be50:	83 c4 0c             	add    esp,0xc
c000be53:	31 c0                	xor    eax,eax
c000be55:	5b                   	pop    ebx
c000be56:	31 d2                	xor    edx,edx
c000be58:	5e                   	pop    esi
c000be59:	5f                   	pop    edi
c000be5a:	5d                   	pop    ebp
c000be5b:	c3                   	ret    
c000be5c:	83 ec 0c             	sub    esp,0xc
c000be5f:	50                   	push   eax
c000be60:	e8 1e 96 00 00       	call   c0015483 <HalEndOfInterrupt(int)>
c000be65:	83 c4 10             	add    esp,0x10
c000be68:	eb b4                	jmp    c000be1e <int_handler+0x2a>
c000be6a:	83 ec 08             	sub    esp,0x8
c000be6d:	52                   	push   edx
c000be6e:	57                   	push   edi
c000be6f:	ff d0                	call   eax
c000be71:	83 c4 10             	add    esp,0x10
c000be74:	83 c4 0c             	add    esp,0xc
c000be77:	5b                   	pop    ebx
c000be78:	5e                   	pop    esi
c000be79:	5f                   	pop    edi
c000be7a:	5d                   	pop    ebp
c000be7b:	c3                   	ret    

c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be7c:	56                   	push   esi
c000be7d:	31 c0                	xor    eax,eax
c000be7f:	53                   	push   ebx
c000be80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be88:	89 ca                	mov    edx,ecx
c000be8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be8e:	c1 e2 04             	shl    edx,0x4
c000be91:	83 bc 82 e0 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea20],0x0
c000be99:	74 15                	je     c000beb0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be9b:	40                   	inc    eax
c000be9c:	83 f8 04             	cmp    eax,0x4
c000be9f:	75 f0                	jne    c000be91 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bea1:	c7 44 24 0c 24 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db24
c000bea9:	5b                   	pop    ebx
c000beaa:	5e                   	pop    esi
c000beab:	e9 d3 42 00 00       	jmp    c0010183 <KePanic(char const*)>
c000beb0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000beb3:	89 1c 85 e0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea20],ebx
c000beba:	89 34 85 e0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa20],esi
c000bec1:	5b                   	pop    ebx
c000bec2:	5e                   	pop    esi
c000bec3:	c3                   	ret    

c000bec4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bec4:	57                   	push   edi
c000bec5:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000becb:	56                   	push   esi
c000becc:	53                   	push   ebx
c000becd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bed1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bed5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bedc:	74 5b                	je     c000bf39 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bede:	89 c7                	mov    edi,eax
c000bee0:	84 c0                	test   al,al
c000bee2:	74 24                	je     c000bf08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bee4:	83 fe 0f             	cmp    esi,0xf
c000bee7:	0f 8f d9 00 00 00    	jg     c000bfc6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000beed:	8a 86 00 f2 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0e00]
c000bef3:	25 ff 00 00 00       	and    eax,0xff
c000bef8:	66 8b bc 00 80 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd280]
c000bf00:	89 c6                	mov    esi,eax
c000bf02:	66 d1 ef             	shr    di,1
c000bf05:	83 e7 01             	and    edi,0x1
c000bf08:	83 ec 08             	sub    esp,0x8
c000bf0b:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c000bf10:	31 db                	xor    ebx,ebx
c000bf12:	50                   	push   eax
c000bf13:	68 31 db 01 c0       	push   0xc001db31
c000bf18:	e8 eb e5 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c000bf25:	85 c0                	test   eax,eax
c000bf27:	7f 51                	jg     c000bf7a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf29:	83 ec 0c             	sub    esp,0xc
c000bf2c:	68 48 db 01 c0       	push   0xc001db48
c000bf31:	e8 4d 42 00 00       	call   c0010183 <KePanic(char const*)>
c000bf36:	83 c4 10             	add    esp,0x10
c000bf39:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf3c:	31 d2                	xor    edx,edx
c000bf3e:	89 c8                	mov    eax,ecx
c000bf40:	c1 e0 04             	shl    eax,0x4
c000bf43:	8b 9c 90 e0 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea20]
c000bf4a:	85 db                	test   ebx,ebx
c000bf4c:	0f 84 8b 00 00 00    	je     c000bfdd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf52:	42                   	inc    edx
c000bf53:	83 fa 04             	cmp    edx,0x4
c000bf56:	75 eb                	jne    c000bf43 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf58:	83 ec 0c             	sub    esp,0xc
c000bf5b:	68 9c db 01 c0       	push   0xc001db9c
c000bf60:	e8 1e 42 00 00       	call   c0010183 <KePanic(char const*)>
c000bf65:	83 c4 10             	add    esp,0x10
c000bf68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf6d:	5b                   	pop    ebx
c000bf6e:	5e                   	pop    esi
c000bf6f:	5f                   	pop    edi
c000bf70:	c3                   	ret    
c000bf71:	43                   	inc    ebx
c000bf72:	39 1d 80 41 02 c0    	cmp    DWORD PTR ds:0xc0024180,ebx
c000bf78:	7e af                	jle    c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf7a:	83 ec 08             	sub    esp,0x8
c000bf7d:	8b 04 9d a0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe60]
c000bf84:	56                   	push   esi
c000bf85:	50                   	push   eax
c000bf86:	e8 e5 f1 00 00       	call   c001b170 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf8b:	83 c4 10             	add    esp,0x10
c000bf8e:	84 c0                	test   al,al
c000bf90:	74 df                	je     c000bf71 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf92:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf98:	50                   	push   eax
c000bf99:	8d 46 20             	lea    eax,[esi+0x20]
c000bf9c:	57                   	push   edi
c000bf9d:	25 ff 00 00 00       	and    eax,0xff
c000bfa2:	6a 00                	push   0x0
c000bfa4:	50                   	push   eax
c000bfa5:	89 f0                	mov    eax,esi
c000bfa7:	6a 00                	push   0x0
c000bfa9:	25 ff 00 00 00       	and    eax,0xff
c000bfae:	6a 00                	push   0x0
c000bfb0:	50                   	push   eax
c000bfb1:	8b 04 9d a0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe60]
c000bfb8:	50                   	push   eax
c000bfb9:	e8 2c f3 00 00       	call   c001b2ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bfbe:	83 c4 20             	add    esp,0x20
c000bfc1:	e9 73 ff ff ff       	jmp    c000bf39 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	31 ff                	xor    edi,edi
c000bfcb:	68 64 db 01 c0       	push   0xc001db64
c000bfd0:	e8 ae 41 00 00       	call   c0010183 <KePanic(char const*)>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	e9 2b ff ff ff       	jmp    c000bf08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfdd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfe4:	89 14 85 e0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea20],edx
c000bfeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfef:	5b                   	pop    ebx
c000bff0:	89 14 85 e0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa20],edx
c000bff7:	89 f0                	mov    eax,esi
c000bff9:	5e                   	pop    esi
c000bffa:	5f                   	pop    edi
c000bffb:	c3                   	ret    

c000bffc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c004:	c1 e0 04             	shl    eax,0x4
c000c007:	8d 50 10             	lea    edx,[eax+0x10]
c000c00a:	39 88 e0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea20],ecx
c000c010:	74 08                	je     c000c01a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c012:	83 c0 04             	add    eax,0x4
c000c015:	39 d0                	cmp    eax,edx
c000c017:	75 f1                	jne    c000c00a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c019:	c3                   	ret    
c000c01a:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000c024:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c02e:	eb e2                	jmp    c000c012 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c030 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c030:	53                   	push   ebx
c000c031:	83 ec 08             	sub    esp,0x8
c000c034:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c038:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c03d:	74 0e                	je     c000c04d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c03f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000c044:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c04b:	75 37                	jne    c000c084 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c051:	83 c0 20             	add    eax,0x20
c000c054:	c1 e0 04             	shl    eax,0x4
c000c057:	8d 50 10             	lea    edx,[eax+0x10]
c000c05a:	39 98 e0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea20],ebx
c000c060:	74 0c                	je     c000c06e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c062:	83 c0 04             	add    eax,0x4
c000c065:	39 d0                	cmp    eax,edx
c000c067:	75 f1                	jne    c000c05a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c069:	83 c4 08             	add    esp,0x8
c000c06c:	5b                   	pop    ebx
c000c06d:	c3                   	ret    
c000c06e:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000c078:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c082:	eb de                	jmp    c000c062 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c084:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c089:	7f 12                	jg     c000c09d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c08b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c08f:	31 c0                	xor    eax,eax
c000c091:	8a 81 00 f2 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0e00]
c000c097:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c09b:	eb b0                	jmp    c000c04d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c09d:	83 ec 0c             	sub    esp,0xc
c000c0a0:	68 55 db 01 c0       	push   0xc001db55
c000c0a5:	e8 d9 40 00 00       	call   c0010183 <KePanic(char const*)>
c000c0aa:	83 c4 10             	add    esp,0x10
c000c0ad:	eb 9e                	jmp    c000c04d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0af <setupINTS()>:
c000c0af:	31 c0                	xor    eax,eax
c000c0b1:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000c0bb:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c0c5:	c7 80 e4 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea1c],0x0
c000c0cf:	c7 80 e4 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa1c],0x0
c000c0d9:	c7 80 e8 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea18],0x0
c000c0e3:	c7 80 e8 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa18],0x0
c000c0ed:	c7 80 ec 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea14],0x0
c000c0f7:	c7 80 ec 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa14],0x0
c000c101:	83 c0 10             	add    eax,0x10
c000c104:	3d 00 10 00 00       	cmp    eax,0x1000
c000c109:	75 a6                	jne    c000c0b1 <setupINTS()+0x2>
c000c10b:	c3                   	ret    

c000c10c <convertLegacyIRQNumber(int)>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000c115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c119:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c120:	74 0f                	je     c000c131 <convertLegacyIRQNumber(int)+0x25>
c000c122:	83 f8 0f             	cmp    eax,0xf
c000c125:	7f 0e                	jg     c000c135 <convertLegacyIRQNumber(int)+0x29>
c000c127:	31 c9                	xor    ecx,ecx
c000c129:	8a 88 00 f2 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0e00]
c000c12f:	89 c8                	mov    eax,ecx
c000c131:	83 c4 0c             	add    esp,0xc
c000c134:	c3                   	ret    
c000c135:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c139:	83 ec 0c             	sub    esp,0xc
c000c13c:	68 64 db 01 c0       	push   0xc001db64
c000c141:	e8 3d 40 00 00       	call   c0010183 <KePanic(char const*)>
c000c146:	83 c4 10             	add    esp,0x10
c000c149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14d:	83 c4 0c             	add    esp,0xc
c000c150:	c3                   	ret    
c000c151:	90                   	nop

c000c152 <startGUI(void*)>:
c000c152:	55                   	push   ebp
c000c153:	89 e5                	mov    ebp,esp
c000c155:	53                   	push   ebx
c000c156:	83 ec 04             	sub    esp,0x4
c000c159:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c15e:	48                   	dec    eax
c000c15f:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c164:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c169:	85 c0                	test   eax,eax
c000c16b:	75 01                	jne    c000c16e <startGUI(void*)+0x1c>
c000c16d:	fb                   	sti    
c000c16e:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c174:	83 ec 08             	sub    esp,0x8
c000c177:	6a 01                	push   0x1
c000c179:	68 c1 db 01 c0       	push   0xc001dbc1
c000c17e:	e8 1f 68 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	83 ec 08             	sub    esp,0x8
c000c189:	53                   	push   ebx
c000c18a:	50                   	push   eax
c000c18b:	e8 43 6a 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000c190:	83 c4 10             	add    esp,0x10
c000c193:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c199:	83 ec 08             	sub    esp,0x8
c000c19c:	6a 01                	push   0x1
c000c19e:	68 db db 01 c0       	push   0xc001dbdb
c000c1a3:	e8 fa 67 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000c1a8:	83 c4 10             	add    esp,0x10
c000c1ab:	83 ec 08             	sub    esp,0x8
c000c1ae:	53                   	push   ebx
c000c1af:	50                   	push   eax
c000c1b0:	e8 1e 6a 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000c1b5:	83 c4 10             	add    esp,0x10
c000c1b8:	90                   	nop
c000c1b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1bc:	c9                   	leave  
c000c1bd:	c3                   	ret    

c000c1be <startGUIVESA(void*)>:
c000c1be:	55                   	push   ebp
c000c1bf:	89 e5                	mov    ebp,esp
c000c1c1:	53                   	push   ebx
c000c1c2:	83 ec 04             	sub    esp,0x4
c000c1c5:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c1ca:	48                   	dec    eax
c000c1cb:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c1d0:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c1d5:	85 c0                	test   eax,eax
c000c1d7:	75 01                	jne    c000c1da <startGUIVESA(void*)+0x1c>
c000c1d9:	fb                   	sti    
c000c1da:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c1e0:	83 ec 08             	sub    esp,0x8
c000c1e3:	6a 01                	push   0x1
c000c1e5:	68 f9 db 01 c0       	push   0xc001dbf9
c000c1ea:	e8 b3 67 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	83 ec 08             	sub    esp,0x8
c000c1f5:	53                   	push   ebx
c000c1f6:	50                   	push   eax
c000c1f7:	e8 d7 69 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000c1fc:	83 c4 10             	add    esp,0x10
c000c1ff:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c205:	83 ec 08             	sub    esp,0x8
c000c208:	6a 01                	push   0x1
c000c20a:	68 db db 01 c0       	push   0xc001dbdb
c000c20f:	e8 8e 67 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000c214:	83 c4 10             	add    esp,0x10
c000c217:	83 ec 08             	sub    esp,0x8
c000c21a:	53                   	push   ebx
c000c21b:	50                   	push   eax
c000c21c:	e8 b2 69 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	90                   	nop
c000c225:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c228:	c9                   	leave  
c000c229:	c3                   	ret    

c000c22a <sendKeyToTerminal(unsigned char)>:
c000c22a:	55                   	push   ebp
c000c22b:	89 e5                	mov    ebp,esp
c000c22d:	83 ec 28             	sub    esp,0x28
c000c230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c233:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c236:	8b 15 24 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020524
c000c23c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c23f:	25 ff 00 00 00       	and    eax,0xff
c000c244:	83 ec 08             	sub    esp,0x8
c000c247:	50                   	push   eax
c000c248:	52                   	push   edx
c000c249:	e8 f8 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c24e:	83 c4 10             	add    esp,0x10
c000c251:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c255:	0f 85 8f 00 00 00    	jne    c000c2ea <sendKeyToTerminal(unsigned char)+0xc0>
c000c25b:	fa                   	cli    
c000c25c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c261:	40                   	inc    eax
c000c262:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c267:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c26c:	40                   	inc    eax
c000c26d:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000c272:	a1 e0 25 02 c0       	mov    eax,ds:0xc00225e0
c000c277:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c27a:	c7 05 e0 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00225e0,0x0
c000c284:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c288:	74 1f                	je     c000c2a9 <sendKeyToTerminal(unsigned char)+0x7f>
c000c28a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c28d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c290:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c293:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c296:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c299:	83 ec 0c             	sub    esp,0xc
c000c29c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c29f:	e8 b4 75 00 00       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	eb db                	jmp    c000c284 <sendKeyToTerminal(unsigned char)+0x5a>
c000c2a9:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c2ae:	48                   	dec    eax
c000c2af:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000c2b4:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c2b9:	85 c0                	test   eax,eax
c000c2bb:	75 18                	jne    c000c2d5 <sendKeyToTerminal(unsigned char)+0xab>
c000c2bd:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000c2c2:	85 c0                	test   eax,eax
c000c2c4:	74 0f                	je     c000c2d5 <sendKeyToTerminal(unsigned char)+0xab>
c000c2c6:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c000c2d0:	e8 bf 70 00 00       	call   c0013394 <schedule()>
c000c2d5:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c2da:	48                   	dec    eax
c000c2db:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c2e0:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c2e5:	85 c0                	test   eax,eax
c000c2e7:	75 01                	jne    c000c2ea <sendKeyToTerminal(unsigned char)+0xc0>
c000c2e9:	fb                   	sti    
c000c2ea:	90                   	nop
c000c2eb:	c9                   	leave  
c000c2ec:	c3                   	ret    

c000c2ed <sendKeyboardToken(KeyboardToken)>:
c000c2ed:	55                   	push   ebp
c000c2ee:	89 e5                	mov    ebp,esp
c000c2f0:	83 ec 18             	sub    esp,0x18
c000c2f3:	e8 db 3e 00 00       	call   c00101d3 <Krnl::userIOReceived()>
c000c2f8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2fe:	25 ff ff 00 00       	and    eax,0xffff
c000c303:	83 f2 01             	xor    edx,0x1
c000c306:	88 90 00 26 02 c0    	mov    BYTE PTR [eax-0x3ffdda00],dl
c000c30c:	a1 e8 25 02 c0       	mov    eax,ds:0xc00225e8
c000c311:	85 c0                	test   eax,eax
c000c313:	74 24                	je     c000c339 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c315:	8b 0d e8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225e8
c000c31b:	83 ec 04             	sub    esp,0x4
c000c31e:	68 00 26 02 c0       	push   0xc0022600
c000c323:	83 ec 08             	sub    esp,0x8
c000c326:	89 e2                	mov    edx,esp
c000c328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32b:	89 02                	mov    DWORD PTR [edx],eax
c000c32d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c330:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c334:	ff d1                	call   ecx
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c33d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c340:	a0 08 2a 02 c0       	mov    al,ds:0xc0022a08
c000c345:	38 c2                	cmp    dl,al
c000c347:	74 1e                	je     c000c367 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c349:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c34c:	a2 08 2a 02 c0       	mov    ds:0xc0022a08,al
c000c351:	a0 08 2a 02 c0       	mov    al,ds:0xc0022a08
c000c356:	25 ff 00 00 00       	and    eax,0xff
c000c35b:	83 ec 0c             	sub    esp,0xc
c000c35e:	50                   	push   eax
c000c35f:	e8 34 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c364:	83 c4 10             	add    esp,0x10
c000c367:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c36a:	84 c0                	test   al,al
c000c36c:	0f 84 ae 00 00 00    	je     c000c420 <sendKeyboardToken(KeyboardToken)+0x133>
c000c372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c375:	66 3d 10 03          	cmp    ax,0x310
c000c379:	75 06                	jne    c000c381 <sendKeyboardToken(KeyboardToken)+0x94>
c000c37b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c384:	66 3d 11 03          	cmp    ax,0x311
c000c388:	75 06                	jne    c000c390 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c38a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c393:	66 3d 12 03          	cmp    ax,0x312
c000c397:	75 06                	jne    c000c39f <sendKeyboardToken(KeyboardToken)+0xb2>
c000c399:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c39f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a2:	66 3d 13 03          	cmp    ax,0x313
c000c3a6:	75 06                	jne    c000c3ae <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3a8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b1:	66 3d 14 03          	cmp    ax,0x314
c000c3b5:	75 06                	jne    c000c3bd <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3b7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c0:	66 3d 15 03          	cmp    ax,0x315
c000c3c4:	75 06                	jne    c000c3cc <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3c6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3cf:	66 3d 16 03          	cmp    ax,0x316
c000c3d3:	75 06                	jne    c000c3db <sendKeyboardToken(KeyboardToken)+0xee>
c000c3d5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3de:	66 3d 17 03          	cmp    ax,0x317
c000c3e2:	75 06                	jne    c000c3ea <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3e4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ed:	66 3d 18 03          	cmp    ax,0x318
c000c3f1:	75 06                	jne    c000c3f9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3f3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fc:	66 3d 19 03          	cmp    ax,0x319
c000c400:	75 06                	jne    c000c408 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c402:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40b:	66 3d 1a 03          	cmp    ax,0x31a
c000c40f:	0f 85 c9 00 00 00    	jne    c000c4de <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c415:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c41b:	e9 be 00 00 00       	jmp    c000c4de <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c423:	66 3d 10 03          	cmp    ax,0x310
c000c427:	75 0a                	jne    c000c433 <sendKeyboardToken(KeyboardToken)+0x146>
c000c429:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c42f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c436:	66 3d 11 03          	cmp    ax,0x311
c000c43a:	75 0a                	jne    c000c446 <sendKeyboardToken(KeyboardToken)+0x159>
c000c43c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c442:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c449:	66 3d 12 03          	cmp    ax,0x312
c000c44d:	75 0a                	jne    c000c459 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c44f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c455:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c45c:	66 3d 13 03          	cmp    ax,0x313
c000c460:	75 0a                	jne    c000c46c <sendKeyboardToken(KeyboardToken)+0x17f>
c000c462:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c468:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46f:	66 3d 14 03          	cmp    ax,0x314
c000c473:	75 0a                	jne    c000c47f <sendKeyboardToken(KeyboardToken)+0x192>
c000c475:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c47b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c47f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c482:	66 3d 15 03          	cmp    ax,0x315
c000c486:	75 0a                	jne    c000c492 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c488:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c48e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c495:	66 3d 16 03          	cmp    ax,0x316
c000c499:	75 0a                	jne    c000c4a5 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c49b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a8:	66 3d 17 03          	cmp    ax,0x317
c000c4ac:	75 0a                	jne    c000c4b8 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4ae:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bb:	66 3d 18 03          	cmp    ax,0x318
c000c4bf:	75 0a                	jne    c000c4cb <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4c1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ce:	66 3d 19 03          	cmp    ax,0x319
c000c4d2:	75 0a                	jne    c000c4de <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4d4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e1:	66 3d 00 02          	cmp    ax,0x200
c000c4e5:	75 2c                	jne    c000c513 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4e7:	a0 00 2a 02 c0       	mov    al,ds:0xc0022a00
c000c4ec:	83 f0 01             	xor    eax,0x1
c000c4ef:	84 c0                	test   al,al
c000c4f1:	74 20                	je     c000c513 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4f3:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000c4f8:	6a 01                	push   0x1
c000c4fa:	6a 00                	push   0x0
c000c4fc:	68 52 c1 00 c0       	push   0xc000c152
c000c501:	50                   	push   eax
c000c502:	e8 6d 6c 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c000c507:	83 c4 10             	add    esp,0x10
c000c50a:	c6 05 00 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a00,0x1
c000c511:	eb 33                	jmp    c000c546 <sendKeyboardToken(KeyboardToken)+0x259>
c000c513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c516:	66 3d 01 02          	cmp    ax,0x201
c000c51a:	75 2a                	jne    c000c546 <sendKeyboardToken(KeyboardToken)+0x259>
c000c51c:	a0 00 2a 02 c0       	mov    al,ds:0xc0022a00
c000c521:	83 f0 01             	xor    eax,0x1
c000c524:	84 c0                	test   al,al
c000c526:	74 1e                	je     c000c546 <sendKeyboardToken(KeyboardToken)+0x259>
c000c528:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000c52d:	6a 01                	push   0x1
c000c52f:	6a 00                	push   0x0
c000c531:	68 be c1 00 c0       	push   0xc000c1be
c000c536:	50                   	push   eax
c000c537:	e8 38 6c 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c000c53c:	83 c4 10             	add    esp,0x10
c000c53f:	c6 05 00 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a00,0x1
c000c546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c549:	66 3d 1d 03          	cmp    ax,0x31d
c000c54d:	75 06                	jne    c000c555 <sendKeyboardToken(KeyboardToken)+0x268>
c000c54f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c558:	66 3d 1c 03          	cmp    ax,0x31c
c000c55c:	75 06                	jne    c000c564 <sendKeyboardToken(KeyboardToken)+0x277>
c000c55e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c567:	66 3d 1b 03          	cmp    ax,0x31b
c000c56b:	75 06                	jne    c000c573 <sendKeyboardToken(KeyboardToken)+0x286>
c000c56d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c576:	66 3d 1e 03          	cmp    ax,0x31e
c000c57a:	75 06                	jne    c000c582 <sendKeyboardToken(KeyboardToken)+0x295>
c000c57c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c585:	66 3d 1f 03          	cmp    ax,0x31f
c000c589:	75 06                	jne    c000c591 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c58b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c594:	66 3d 1a 03          	cmp    ax,0x31a
c000c598:	75 06                	jne    c000c5a0 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c59a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5a0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5a7:	83 f0 01             	xor    eax,0x1
c000c5aa:	84 c0                	test   al,al
c000c5ac:	74 7b                	je     c000c629 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5ae:	a0 01 27 02 c0       	mov    al,ds:0xc0022701
c000c5b3:	84 c0                	test   al,al
c000c5b5:	74 43                	je     c000c5fa <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5b7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5bb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5bf:	74 2d                	je     c000c5ee <sendKeyboardToken(KeyboardToken)+0x301>
c000c5c1:	8b 15 04 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a04
c000c5c7:	89 d0                	mov    eax,edx
c000c5c9:	c1 e0 02             	shl    eax,0x2
c000c5cc:	01 d0                	add    eax,edx
c000c5ce:	01 c0                	add    eax,eax
c000c5d0:	a3 04 2a 02 c0       	mov    ds:0xc0022a04,eax
c000c5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d8:	25 ff ff 00 00       	and    eax,0xffff
c000c5dd:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5e0:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c5e5:	01 d0                	add    eax,edx
c000c5e7:	a3 04 2a 02 c0       	mov    ds:0xc0022a04,eax
c000c5ec:	eb 71                	jmp    c000c65f <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ee:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c5f8:	eb 65                	jmp    c000c65f <sendKeyboardToken(KeyboardToken)+0x372>
c000c5fa:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c5ff:	85 c0                	test   eax,eax
c000c601:	74 1a                	je     c000c61d <sendKeyboardToken(KeyboardToken)+0x330>
c000c603:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c608:	25 ff 00 00 00       	and    eax,0xff
c000c60d:	83 ec 0c             	sub    esp,0xc
c000c610:	50                   	push   eax
c000c611:	e8 14 fc ff ff       	call   c000c22a <sendKeyToTerminal(unsigned char)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c61d:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c627:	eb 36                	jmp    c000c65f <sendKeyboardToken(KeyboardToken)+0x372>
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 3d 01 01          	cmp    ax,0x101
c000c630:	75 2d                	jne    c000c65f <sendKeyboardToken(KeyboardToken)+0x372>
c000c632:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c637:	85 c0                	test   eax,eax
c000c639:	74 1a                	je     c000c655 <sendKeyboardToken(KeyboardToken)+0x368>
c000c63b:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c640:	25 ff 00 00 00       	and    eax,0xff
c000c645:	83 ec 0c             	sub    esp,0xc
c000c648:	50                   	push   eax
c000c649:	e8 dc fb ff ff       	call   c000c22a <sendKeyToTerminal(unsigned char)>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c655:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c65f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c662:	83 f0 01             	xor    eax,0x1
c000c665:	84 c0                	test   al,al
c000c667:	74 4e                	je     c000c6b7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c669:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c66c:	83 f0 01             	xor    eax,0x1
c000c66f:	84 c0                	test   al,al
c000c671:	74 44                	je     c000c6b7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c673:	a0 00 27 02 c0       	mov    al,ds:0xc0022700
c000c678:	83 f0 01             	xor    eax,0x1
c000c67b:	84 c0                	test   al,al
c000c67d:	74 38                	je     c000c6b7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c682:	66 83 f8 1f          	cmp    ax,0x1f
c000c686:	76 09                	jbe    c000c691 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68b:	66 83 f8 7e          	cmp    ax,0x7e
c000c68f:	76 12                	jbe    c000c6a3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c694:	66 83 f8 0a          	cmp    ax,0xa
c000c698:	74 09                	je     c000c6a3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69d:	66 83 f8 08          	cmp    ax,0x8
c000c6a1:	75 14                	jne    c000c6b7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a6:	25 ff 00 00 00       	and    eax,0xff
c000c6ab:	83 ec 0c             	sub    esp,0xc
c000c6ae:	50                   	push   eax
c000c6af:	e8 76 fb ff ff       	call   c000c22a <sendKeyToTerminal(unsigned char)>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6ba:	83 f0 01             	xor    eax,0x1
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 67                	je     c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c6c1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6c4:	83 f0 01             	xor    eax,0x1
c000c6c7:	84 c0                	test   al,al
c000c6c9:	74 5d                	je     c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c6cb:	a0 00 27 02 c0       	mov    al,ds:0xc0022700
c000c6d0:	84 c0                	test   al,al
c000c6d2:	74 54                	je     c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c6d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d7:	66 83 f8 3f          	cmp    ax,0x3f
c000c6db:	76 4b                	jbe    c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e0:	66 83 f8 7f          	cmp    ax,0x7f
c000c6e4:	77 42                	ja     c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c6e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e9:	88 c2                	mov    dl,al
c000c6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ee:	66 83 f8 5f          	cmp    ax,0x5f
c000c6f2:	76 04                	jbe    c000c6f8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6f4:	b0 20                	mov    al,0x20
c000c6f6:	eb 02                	jmp    c000c6fa <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6f8:	b0 00                	mov    al,0x0
c000c6fa:	29 c2                	sub    edx,eax
c000c6fc:	88 d0                	mov    al,dl
c000c6fe:	83 e8 40             	sub    eax,0x40
c000c701:	25 ff 00 00 00       	and    eax,0xff
c000c706:	83 ec 0c             	sub    esp,0xc
c000c709:	50                   	push   eax
c000c70a:	e8 1b fb ff ff       	call   c000c22a <sendKeyToTerminal(unsigned char)>
c000c70f:	83 c4 10             	add    esp,0x10
c000c712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c715:	66 83 f8 63          	cmp    ax,0x63
c000c719:	75 0d                	jne    c000c728 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c71b:	83 ec 0c             	sub    esp,0xc
c000c71e:	6a ff                	push   0xffffffff
c000c720:	e8 93 75 00 00       	call   c0013cb8 <terminateTask(int)>
c000c725:	83 c4 10             	add    esp,0x10
c000c728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72b:	66 3d 00 03          	cmp    ax,0x300
c000c72f:	75 0f                	jne    c000c740 <sendKeyboardToken(KeyboardToken)+0x453>
c000c731:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c734:	83 f0 01             	xor    eax,0x1
c000c737:	84 c0                	test   al,al
c000c739:	74 05                	je     c000c740 <sendKeyboardToken(KeyboardToken)+0x453>
c000c73b:	e8 59 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c740:	90                   	nop
c000c741:	c9                   	leave  
c000c742:	c3                   	ret    

c000c743 <clearInternalKeybuffer(VgaText*)>:
c000c743:	55                   	push   ebp
c000c744:	89 e5                	mov    ebp,esp
c000c746:	83 ec 08             	sub    esp,0x8
c000c749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c74c:	05 b2 00 00 00       	add    eax,0xb2
c000c751:	83 ec 0c             	sub    esp,0xc
c000c754:	50                   	push   eax
c000c755:	e8 e6 3d ff ff       	call   c0000540 <strlen>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c760:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c766:	83 ec 04             	sub    esp,0x4
c000c769:	50                   	push   eax
c000c76a:	6a 00                	push   0x0
c000c76c:	52                   	push   edx
c000c76d:	e8 5e 3d ff ff       	call   c00004d0 <memset>
c000c772:	83 c4 10             	add    esp,0x10
c000c775:	90                   	nop
c000c776:	c9                   	leave  
c000c777:	c3                   	ret    

c000c778 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c778:	55                   	push   ebp
c000c779:	89 e5                	mov    ebp,esp
c000c77b:	83 ec 18             	sub    esp,0x18
c000c77e:	a1 e8 25 02 c0       	mov    eax,ds:0xc00225e8
c000c783:	85 c0                	test   eax,eax
c000c785:	74 2a                	je     c000c7b1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c787:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c78d:	8b 0d e8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225e8
c000c793:	83 ec 04             	sub    esp,0x4
c000c796:	68 00 26 02 c0       	push   0xc0022600
c000c79b:	83 ec 08             	sub    esp,0x8
c000c79e:	89 e2                	mov    edx,esp
c000c7a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c7a3:	89 02                	mov    DWORD PTR [edx],eax
c000c7a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7a8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7ac:	ff d1                	call   ecx
c000c7ae:	83 c4 10             	add    esp,0x10
c000c7b1:	fb                   	sti    
c000c7b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7bd:	0f 84 a1 00 00 00    	je     c000c864 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c6:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7cc:	84 c0                	test   al,al
c000c7ce:	75 28                	jne    c000c7f8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7d0:	fa                   	cli    
c000c7d1:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c7d6:	40                   	inc    eax
c000c7d7:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c7dc:	e8 b3 6b 00 00       	call   c0013394 <schedule()>
c000c7e1:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c7e6:	48                   	dec    eax
c000c7e7:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c7ec:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c7f1:	85 c0                	test   eax,eax
c000c7f3:	75 ce                	jne    c000c7c3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7f5:	fb                   	sti    
c000c7f6:	eb cb                	jmp    c000c7c3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7fb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7fe:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c801:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c804:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c80a:	88 10                	mov    BYTE PTR [eax],dl
c000c80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c80f:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c815:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81b:	05 b2 00 00 00       	add    eax,0xb2
c000c820:	83 ec 0c             	sub    esp,0xc
c000c823:	50                   	push   eax
c000c824:	e8 17 3d ff ff       	call   c0000540 <strlen>
c000c829:	83 c4 10             	add    esp,0x10
c000c82c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c82f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c835:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c838:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c83b:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c841:	83 ec 04             	sub    esp,0x4
c000c844:	50                   	push   eax
c000c845:	51                   	push   ecx
c000c846:	52                   	push   edx
c000c847:	e8 94 3b ff ff       	call   c00003e0 <memmove>
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c852:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c855:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c859:	0f 85 5a ff ff ff    	jne    c000c7b9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c85f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c862:	eb 03                	jmp    c000c867 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c864:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c867:	c9                   	leave  
c000c868:	c3                   	ret    
c000c869:	90                   	nop

c000c86a <Keyboard::Keyboard(char const*)>:
c000c86a:	83 ec 0c             	sub    esp,0xc
c000c86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c871:	83 ec 08             	sub    esp,0x8
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	50                   	push   eax
c000c879:	e8 62 f2 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88a:	89 10                	mov    DWORD PTR [eax],edx
c000c88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c890:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c89a:	c6 05 e4 25 02 c0 01 	mov    BYTE PTR ds:0xc00225e4,0x1
c000c8a1:	90                   	nop
c000c8a2:	83 c4 0c             	add    esp,0xc
c000c8a5:	c3                   	ret    

c000c8a6 <Keyboard::~Keyboard()>:
c000c8a6:	83 ec 0c             	sub    esp,0xc
c000c8a9:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b2:	89 10                	mov    DWORD PTR [eax],edx
c000c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	50                   	push   eax
c000c8bc:	e8 89 ef ff ff       	call   c000b84a <Device::~Device()>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	90                   	nop
c000c8c5:	83 c4 0c             	add    esp,0xc
c000c8c8:	c3                   	ret    
c000c8c9:	90                   	nop

c000c8ca <Keyboard::~Keyboard()>:
c000c8ca:	83 ec 0c             	sub    esp,0xc
c000c8cd:	83 ec 0c             	sub    esp,0xc
c000c8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8d4:	e8 cd ff ff ff       	call   c000c8a6 <Keyboard::~Keyboard()>
c000c8d9:	83 c4 10             	add    esp,0x10
c000c8dc:	83 ec 08             	sub    esp,0x8
c000c8df:	68 5c 01 00 00       	push   0x15c
c000c8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e8:	e8 25 db ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	83 c4 0c             	add    esp,0xc
c000c8f3:	c3                   	ret    

c000c8f4 <LogicalDisk::close(int, int, void*)>:
c000c8f4:	83 c8 ff             	or     eax,0xffffffff
c000c8f7:	c3                   	ret    

c000c8f8 <LogicalDisk::~LogicalDisk()>:
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	89 10                	mov    DWORD PTR [eax],edx
c000c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	50                   	push   eax
c000c90e:	e8 37 ef ff ff       	call   c000b84a <Device::~Device()>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	90                   	nop
c000c917:	83 c4 0c             	add    esp,0xc
c000c91a:	c3                   	ret    
c000c91b:	90                   	nop

c000c91c <LogicalDisk::~LogicalDisk()>:
c000c91c:	83 ec 0c             	sub    esp,0xc
c000c91f:	83 ec 0c             	sub    esp,0xc
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	e8 cd ff ff ff       	call   c000c8f8 <LogicalDisk::~LogicalDisk()>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	83 ec 08             	sub    esp,0x8
c000c931:	68 74 01 00 00       	push   0x174
c000c936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93a:	e8 d3 da ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	83 c4 0c             	add    esp,0xc
c000c945:	c3                   	ret    

c000c946 <LogicalDisk::open(int, int, void*)>:
c000c946:	83 ec 18             	sub    esp,0x18
c000c949:	68 48 dc 01 c0       	push   0xc001dc48
c000c94e:	e8 30 38 00 00       	call   c0010183 <KePanic(char const*)>
c000c953:	83 c8 ff             	or     eax,0xffffffff
c000c956:	83 c4 1c             	add    esp,0x1c
c000c959:	c3                   	ret    

c000c95a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c95a:	53                   	push   ebx
c000c95b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c95f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c967:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c96d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c973:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c979:	77 10                	ja     c000c98b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c97b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c981:	89 d3                	mov    ebx,edx
c000c983:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c989:	72 05                	jb     c000c990 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c98b:	83 c8 ff             	or     eax,0xffffffff
c000c98e:	89 c2                	mov    edx,eax
c000c990:	5b                   	pop    ebx
c000c991:	c3                   	ret    

c000c992 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c992:	56                   	push   esi
c000c993:	83 c8 ff             	or     eax,0xffffffff
c000c996:	53                   	push   ebx
c000c997:	89 c2                	mov    edx,eax
c000c999:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c99d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9a5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9ab:	77 27                	ja     c000c9d4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9ad:	89 d8                	mov    eax,ebx
c000c9af:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9b5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9c0:	89 c2                	mov    edx,eax
c000c9c2:	73 10                	jae    c000c9d4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9c4:	89 c8                	mov    eax,ecx
c000c9c6:	89 da                	mov    edx,ebx
c000c9c8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9ce:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9d4:	5b                   	pop    ebx
c000c9d5:	5e                   	pop    esi
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9d8:	83 ec 1c             	sub    esp,0x1c
c000c9db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fe:	83 ec 08             	sub    esp,0x8
c000ca01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca05:	50                   	push   eax
c000ca06:	e8 d5 f0 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000ca13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca17:	89 10                	mov    DWORD PTR [eax],edx
c000ca19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca28:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca33:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca3d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca49:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca4f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca55:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca60:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca66:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca74:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca88:	90                   	nop
c000ca89:	83 c4 1c             	add    esp,0x1c
c000ca8c:	c3                   	ret    
c000ca8d:	90                   	nop

c000ca8e <LogicalDisk::assignDriveLetter()>:
c000ca8e:	55                   	push   ebp
c000ca8f:	57                   	push   edi
c000ca90:	56                   	push   esi
c000ca91:	53                   	push   ebx
c000ca92:	83 ec 14             	sub    esp,0x14
c000ca95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca99:	8b 3d 20 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a20
c000ca9f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000caa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000caa9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000caaf:	8b 3d 24 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a24
c000cab5:	3c 01                	cmp    al,0x1
c000cab7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cabb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cabf:	19 c0                	sbb    eax,eax
c000cac1:	83 e0 02             	and    eax,0x2
c000cac4:	83 c0 41             	add    eax,0x41
c000cac7:	0f be e8             	movsx  ebp,al
c000caca:	3c 43                	cmp    al,0x43
c000cacc:	75 10                	jne    c000cade <LogicalDisk::assignDriveLetter()+0x50>
c000cace:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cad5:	75 5d                	jne    c000cb34 <LogicalDisk::assignDriveLetter()+0xa6>
c000cad7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cadc:	75 56                	jne    c000cb34 <LogicalDisk::assignDriveLetter()+0xa6>
c000cade:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cae1:	ba 01 00 00 00       	mov    edx,0x1
c000cae6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caea:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caee:	d3 e2                	shl    edx,cl
c000caf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caf4:	89 d7                	mov    edi,edx
c000caf6:	89 d6                	mov    esi,edx
c000caf8:	c1 ff 1f             	sar    edi,0x1f
c000cafb:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000caff:	21 f9                	and    ecx,edi
c000cb01:	09 d1                	or     ecx,edx
c000cb03:	75 2f                	jne    c000cb34 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb05:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb0d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb13:	09 f2                	or     edx,esi
c000cb15:	89 15 20 2a 02 c0    	mov    DWORD PTR ds:0xc0022a20,edx
c000cb1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb1f:	09 fa                	or     edx,edi
c000cb21:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb25:	89 15 24 2a 02 c0    	mov    DWORD PTR ds:0xc0022a24,edx
c000cb2b:	89 1c bd 40 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd5c0],ebx
c000cb32:	eb 08                	jmp    c000cb3c <LogicalDisk::assignDriveLetter()+0xae>
c000cb34:	45                   	inc    ebp
c000cb35:	40                   	inc    eax
c000cb36:	3c 5b                	cmp    al,0x5b
c000cb38:	75 90                	jne    c000caca <LogicalDisk::assignDriveLetter()+0x3c>
c000cb3a:	31 c0                	xor    eax,eax
c000cb3c:	83 c4 14             	add    esp,0x14
c000cb3f:	5b                   	pop    ebx
c000cb40:	5e                   	pop    esi
c000cb41:	5f                   	pop    edi
c000cb42:	5d                   	pop    ebp
c000cb43:	c3                   	ret    

c000cb44 <LogicalDisk::mount()>:
c000cb44:	56                   	push   esi
c000cb45:	53                   	push   ebx
c000cb46:	53                   	push   ebx
c000cb47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb4b:	8b 1d d4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d4
c000cb51:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb5b:	85 db                	test   ebx,ebx
c000cb5d:	74 27                	je     c000cb86 <LogicalDisk::mount()+0x42>
c000cb5f:	51                   	push   ecx
c000cb60:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb67:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb69:	83 e8 41             	sub    eax,0x41
c000cb6c:	50                   	push   eax
c000cb6d:	56                   	push   esi
c000cb6e:	53                   	push   ebx
c000cb6f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb72:	83 c4 10             	add    esp,0x10
c000cb75:	84 c0                	test   al,al
c000cb77:	74 08                	je     c000cb81 <LogicalDisk::mount()+0x3d>
c000cb79:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb7f:	eb 07                	jmp    c000cb88 <LogicalDisk::mount()+0x44>
c000cb81:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb84:	eb d5                	jmp    c000cb5b <LogicalDisk::mount()+0x17>
c000cb86:	31 c0                	xor    eax,eax
c000cb88:	5a                   	pop    edx
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	c3                   	ret    

c000cb8c <LogicalDisk::unmount()>:
c000cb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb90:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb9a:	c3                   	ret    
c000cb9b:	90                   	nop

c000cb9c <LogicalDisk::eject()>:
c000cb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cba0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cba6:	8b 10                	mov    edx,DWORD PTR [eax]
c000cba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbac:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cbaf:	90                   	nop

c000cbb0 <LogicalDisk::unassignDriveLetter()>:
c000cbb0:	57                   	push   edi
c000cbb1:	56                   	push   esi
c000cbb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbb6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbbd:	84 c9                	test   cl,cl
c000cbbf:	75 0f                	jne    c000cbd0 <LogicalDisk::unassignDriveLetter()+0x20>
c000cbc1:	c7 44 24 0c 6c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc6c
c000cbc9:	5e                   	pop    esi
c000cbca:	5f                   	pop    edi
c000cbcb:	e9 b3 35 00 00       	jmp    c0010183 <KePanic(char const*)>
c000cbd0:	83 e9 41             	sub    ecx,0x41
c000cbd3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbda:	b8 01 00 00 00       	mov    eax,0x1
c000cbdf:	c7 04 8d 40 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd5c0],0x0
c000cbea:	d3 e0                	shl    eax,cl
c000cbec:	89 c7                	mov    edi,eax
c000cbee:	f7 d0                	not    eax
c000cbf0:	c1 ff 1f             	sar    edi,0x1f
c000cbf3:	21 05 20 2a 02 c0    	and    DWORD PTR ds:0xc0022a20,eax
c000cbf9:	89 fe                	mov    esi,edi
c000cbfb:	f7 d6                	not    esi
c000cbfd:	21 35 24 2a 02 c0    	and    DWORD PTR ds:0xc0022a24,esi
c000cc03:	5e                   	pop    esi
c000cc04:	5f                   	pop    edi
c000cc05:	c3                   	ret    

c000cc06 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc06:	57                   	push   edi
c000cc07:	56                   	push   esi
c000cc08:	53                   	push   ebx
c000cc09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc1f:	77 41                	ja     c000cc62 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc21:	99                   	cdq    
c000cc22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc28:	01 c8                	add    eax,ecx
c000cc2a:	11 da                	adc    edx,ebx
c000cc2c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc32:	19 d7                	sbb    edi,edx
c000cc34:	72 33                	jb     c000cc69 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc36:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc3c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc42:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc46:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc4a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc5a:	5b                   	pop    ebx
c000cc5b:	5e                   	pop    esi
c000cc5c:	5f                   	pop    edi
c000cc5d:	e9 50 0a 00 00       	jmp    c000d6b2 <VCache::read(unsigned long long, int, void*)>
c000cc62:	b8 05 00 00 00       	mov    eax,0x5
c000cc67:	eb 05                	jmp    c000cc6e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc69:	b8 07 00 00 00       	mov    eax,0x7
c000cc6e:	5b                   	pop    ebx
c000cc6f:	5e                   	pop    esi
c000cc70:	5f                   	pop    edi
c000cc71:	c3                   	ret    

c000cc72 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc72:	57                   	push   edi
c000cc73:	56                   	push   esi
c000cc74:	53                   	push   ebx
c000cc75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc8b:	77 41                	ja     c000ccce <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc8d:	99                   	cdq    
c000cc8e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc94:	01 c8                	add    eax,ecx
c000cc96:	11 da                	adc    edx,ebx
c000cc98:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc9e:	19 d7                	sbb    edi,edx
c000cca0:	72 33                	jb     c000ccd5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cca2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cca8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccb2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccb6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccbc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccc6:	5b                   	pop    ebx
c000ccc7:	5e                   	pop    esi
c000ccc8:	5f                   	pop    edi
c000ccc9:	e9 ce 08 00 00       	jmp    c000d59c <VCache::write(unsigned long long, int, void*)>
c000ccce:	b8 05 00 00 00       	mov    eax,0x5
c000ccd3:	eb 05                	jmp    c000ccda <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccd5:	b8 07 00 00 00       	mov    eax,0x7
c000ccda:	5b                   	pop    ebx
c000ccdb:	5e                   	pop    esi
c000ccdc:	5f                   	pop    edi
c000ccdd:	c3                   	ret    
c000ccde:	66 90                	xchg   ax,ax

c000cce0 <Mouse::Mouse(char const*)>:
c000cce0:	83 ec 0c             	sub    esp,0xc
c000cce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce7:	83 ec 08             	sub    esp,0x8
c000ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccee:	50                   	push   eax
c000ccef:	e8 ec ed ff ff       	call   c000bae0 <Device::Device(char const*)>
c000ccf4:	83 c4 10             	add    esp,0x10
c000ccf7:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000ccfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd00:	89 10                	mov    DWORD PTR [eax],edx
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd10:	90                   	nop
c000cd11:	83 c4 0c             	add    esp,0xc
c000cd14:	c3                   	ret    
c000cd15:	90                   	nop
c000cd16:	66 90                	xchg   ax,ax

c000cd18 <Mouse::~Mouse()>:
c000cd18:	83 ec 0c             	sub    esp,0xc
c000cd1b:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd24:	89 10                	mov    DWORD PTR [eax],edx
c000cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2a:	83 ec 0c             	sub    esp,0xc
c000cd2d:	50                   	push   eax
c000cd2e:	e8 17 eb ff ff       	call   c000b84a <Device::~Device()>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	90                   	nop
c000cd37:	83 c4 0c             	add    esp,0xc
c000cd3a:	c3                   	ret    
c000cd3b:	90                   	nop

c000cd3c <Mouse::~Mouse()>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd46:	e8 cd ff ff ff       	call   c000cd18 <Mouse::~Mouse()>
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	83 ec 08             	sub    esp,0x8
c000cd51:	68 58 01 00 00       	push   0x158
c000cd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5a:	e8 b3 d6 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000cd5f:	83 c4 10             	add    esp,0x10
c000cd62:	83 c4 0c             	add    esp,0xc
c000cd65:	c3                   	ret    

c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd66:	55                   	push   ebp
c000cd67:	57                   	push   edi
c000cd68:	56                   	push   esi
c000cd69:	53                   	push   ebx
c000cd6a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd70:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd77:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd7e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd85:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd90:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd94:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd9b:	e8 3c ee ff ff       	call   c000bbdc <Device::getName()>
c000cda0:	5a                   	pop    edx
c000cda1:	59                   	pop    ecx
c000cda2:	50                   	push   eax
c000cda3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cda7:	55                   	push   ebp
c000cda8:	e8 53 38 ff ff       	call   c0000600 <strcpy>
c000cdad:	5b                   	pop    ebx
c000cdae:	58                   	pop    eax
c000cdaf:	68 e4 dc 01 c0       	push   0xc001dce4
c000cdb4:	55                   	push   ebp
c000cdb5:	e8 06 3a ff ff       	call   c00007c0 <strcat>
c000cdba:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cdc1:	e8 f3 a9 ff ff       	call   c00077b9 <malloc>
c000cdc6:	83 c4 0c             	add    esp,0xc
c000cdc9:	89 c3                	mov    ebx,eax
c000cdcb:	57                   	push   edi
c000cdcc:	56                   	push   esi
c000cdcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cddc:	55                   	push   ebp
c000cddd:	50                   	push   eax
c000cdde:	e8 f5 fb ff ff       	call   c000c9d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cde3:	83 c4 14             	add    esp,0x14
c000cde6:	53                   	push   ebx
c000cde7:	e8 a2 fc ff ff       	call   c000ca8e <LogicalDisk::assignDriveLetter()>
c000cdec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdef:	e8 50 fd ff ff       	call   c000cb44 <LogicalDisk::mount()>
c000cdf4:	58                   	pop    eax
c000cdf5:	5a                   	pop    edx
c000cdf6:	53                   	push   ebx
c000cdf7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdfe:	e8 45 eb ff ff       	call   c000b948 <Device::addChild(Device*)>
c000ce03:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce09:	5b                   	pop    ebx
c000ce0a:	5e                   	pop    esi
c000ce0b:	5f                   	pop    edi
c000ce0c:	5d                   	pop    ebp
c000ce0d:	c3                   	ret    

c000ce0e <createPartitionsForDisk(PhysicalDisk*)>:
c000ce0e:	55                   	push   ebp
c000ce0f:	57                   	push   edi
c000ce10:	56                   	push   esi
c000ce11:	53                   	push   ebx
c000ce12:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce18:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce25:	3d 00 02 00 00       	cmp    eax,0x200
c000ce2a:	74 27                	je     c000ce53 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce2c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce32:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce38:	83 ec 10             	sub    esp,0x10
c000ce3b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce3f:	99                   	cdq    
c000ce40:	c1 e6 0a             	shl    esi,0xa
c000ce43:	52                   	push   edx
c000ce44:	89 fd                	mov    ebp,edi
c000ce46:	50                   	push   eax
c000ce47:	55                   	push   ebp
c000ce48:	56                   	push   esi
c000ce49:	e8 42 ee 00 00       	call   c001bc90 <__udivdi3>
c000ce4e:	e9 b1 00 00 00       	jmp    c000cf04 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce53:	83 ec 0c             	sub    esp,0xc
c000ce56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce58:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce5c:	56                   	push   esi
c000ce5d:	6a 01                	push   0x1
c000ce5f:	6a 00                	push   0x0
c000ce61:	6a 00                	push   0x0
c000ce63:	53                   	push   ebx
c000ce64:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce67:	83 c4 20             	add    esp,0x20
c000ce6a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce72:	75 0a                	jne    c000ce7e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce74:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce7c:	74 2c                	je     c000ceaa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce7e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce84:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce8a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce90:	83 ec 10             	sub    esp,0x10
c000ce93:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce97:	89 f7                	mov    edi,esi
c000ce99:	c1 e0 0a             	shl    eax,0xa
c000ce9c:	c1 ff 1f             	sar    edi,0x1f
c000ce9f:	57                   	push   edi
c000cea0:	56                   	push   esi
c000cea1:	52                   	push   edx
c000cea2:	50                   	push   eax
c000cea3:	e8 e8 ed 00 00       	call   c001bc90 <__udivdi3>
c000cea8:	eb 5a                	jmp    c000cf04 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceaa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ceb1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ceb8:	83 e1 7f             	and    ecx,0x7f
c000cebb:	83 e0 7f             	and    eax,0x7f
c000cebe:	01 c1                	add    ecx,eax
c000cec0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cec7:	83 e0 7f             	and    eax,0x7f
c000ceca:	01 c1                	add    ecx,eax
c000cecc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ced3:	83 e0 7f             	and    eax,0x7f
c000ced6:	00 c1                	add    cl,al
c000ced8:	74 41                	je     c000cf1b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceda:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cee0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cee6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ceec:	83 ec 10             	sub    esp,0x10
c000ceef:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cef3:	89 f7                	mov    edi,esi
c000cef5:	c1 e0 0a             	shl    eax,0xa
c000cef8:	c1 ff 1f             	sar    edi,0x1f
c000cefb:	57                   	push   edi
c000cefc:	56                   	push   esi
c000cefd:	52                   	push   edx
c000cefe:	50                   	push   eax
c000ceff:	e8 8c ed 00 00       	call   c001bc90 <__udivdi3>
c000cf04:	83 c4 14             	add    esp,0x14
c000cf07:	52                   	push   edx
c000cf08:	50                   	push   eax
c000cf09:	6a 00                	push   0x0
c000cf0b:	6a 00                	push   0x0
c000cf0d:	53                   	push   ebx
c000cf0e:	e8 53 fe ff ff       	call   c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	e9 79 01 00 00       	jmp    c000d094 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf1b:	89 f0                	mov    eax,esi
c000cf1d:	31 f6                	xor    esi,esi
c000cf1f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf26:	75 02                	jne    c000cf2a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf28:	89 f1                	mov    ecx,esi
c000cf2a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf31:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf38:	c1 e2 08             	shl    edx,0x8
c000cf3b:	c1 e7 10             	shl    edi,0x10
c000cf3e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf46:	09 fa                	or     edx,edi
c000cf48:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf50:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf57:	83 c0 10             	add    eax,0x10
c000cf5a:	09 fa                	or     edx,edi
c000cf5c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf63:	c1 e7 18             	shl    edi,0x18
c000cf66:	09 fa                	or     edx,edi
c000cf68:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf6f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf73:	c1 e7 10             	shl    edi,0x10
c000cf76:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf7d:	c1 e2 08             	shl    edx,0x8
c000cf80:	09 fa                	or     edx,edi
c000cf82:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf89:	09 fa                	or     edx,edi
c000cf8b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf92:	c1 e7 18             	shl    edi,0x18
c000cf95:	09 fa                	or     edx,edi
c000cf97:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf9b:	46                   	inc    esi
c000cf9c:	83 fe 04             	cmp    esi,0x4
c000cf9f:	0f 85 7a ff ff ff    	jne    c000cf1f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfa9:	83 f0 01             	xor    eax,0x1
c000cfac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfb0:	75 57                	jne    c000d009 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfb6:	83 f0 01             	xor    eax,0x1
c000cfb9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfbd:	75 4a                	jne    c000d009 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfcb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfd3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfd9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfdf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfe5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfe9:	89 f7                	mov    edi,esi
c000cfeb:	c1 e0 0a             	shl    eax,0xa
c000cfee:	c1 ff 1f             	sar    edi,0x1f
c000cff1:	57                   	push   edi
c000cff2:	56                   	push   esi
c000cff3:	52                   	push   edx
c000cff4:	50                   	push   eax
c000cff5:	e8 96 ec 00 00       	call   c001bc90 <__udivdi3>
c000cffa:	83 c4 10             	add    esp,0x10
c000cffd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d001:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d005:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d009:	84 c9                	test   cl,cl
c000d00b:	74 53                	je     c000d060 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d00d:	0f b6 c9             	movzx  ecx,cl
c000d010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d014:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d018:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d01c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d024:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d028:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d02c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d034:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d03c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d040:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d044:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d048:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d04c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d050:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d054:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d058:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d05c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d060:	31 ed                	xor    ebp,ebp
c000d062:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d066:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d06a:	89 f8                	mov    eax,edi
c000d06c:	09 f0                	or     eax,esi
c000d06e:	74 1e                	je     c000d08e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d070:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d074:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d078:	89 d1                	mov    ecx,edx
c000d07a:	09 c1                	or     ecx,eax
c000d07c:	74 10                	je     c000d08e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d07e:	83 ec 0c             	sub    esp,0xc
c000d081:	57                   	push   edi
c000d082:	56                   	push   esi
c000d083:	52                   	push   edx
c000d084:	50                   	push   eax
c000d085:	53                   	push   ebx
c000d086:	e8 db fc ff ff       	call   c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d08b:	83 c4 20             	add    esp,0x20
c000d08e:	45                   	inc    ebp
c000d08f:	83 fd 04             	cmp    ebp,0x4
c000d092:	75 ce                	jne    c000d062 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d094:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d09a:	5b                   	pop    ebx
c000d09b:	5e                   	pop    esi
c000d09c:	5f                   	pop    edi
c000d09d:	5d                   	pop    ebp
c000d09e:	c3                   	ret    
c000d09f:	90                   	nop

c000d0a0 <Serial::Serial(char const*)>:
c000d0a0:	83 ec 0c             	sub    esp,0xc
c000d0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a7:	83 ec 08             	sub    esp,0x8
c000d0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ae:	50                   	push   eax
c000d0af:	e8 2c ea ff ff       	call   c000bae0 <Device::Device(char const*)>
c000d0b4:	83 c4 10             	add    esp,0x10
c000d0b7:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c0:	89 10                	mov    DWORD PTR [eax],edx
c000d0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0d0:	90                   	nop
c000d0d1:	83 c4 0c             	add    esp,0xc
c000d0d4:	c3                   	ret    
c000d0d5:	90                   	nop
c000d0d6:	66 90                	xchg   ax,ax

c000d0d8 <Serial::~Serial()>:
c000d0d8:	83 ec 0c             	sub    esp,0xc
c000d0db:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e4:	89 10                	mov    DWORD PTR [eax],edx
c000d0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ea:	83 ec 0c             	sub    esp,0xc
c000d0ed:	50                   	push   eax
c000d0ee:	e8 57 e7 ff ff       	call   c000b84a <Device::~Device()>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	90                   	nop
c000d0f7:	83 c4 0c             	add    esp,0xc
c000d0fa:	c3                   	ret    
c000d0fb:	90                   	nop

c000d0fc <Serial::~Serial()>:
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	83 ec 0c             	sub    esp,0xc
c000d102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d106:	e8 cd ff ff ff       	call   c000d0d8 <Serial::~Serial()>
c000d10b:	83 c4 10             	add    esp,0x10
c000d10e:	83 ec 08             	sub    esp,0x8
c000d111:	68 58 01 00 00       	push   0x158
c000d116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11a:	e8 f3 d2 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000d11f:	83 c4 10             	add    esp,0x10
c000d122:	83 c4 0c             	add    esp,0xc
c000d125:	c3                   	ret    
c000d126:	66 90                	xchg   ax,ax

c000d128 <Timer::Timer(char const*)>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12f:	83 ec 08             	sub    esp,0x8
c000d132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d136:	50                   	push   eax
c000d137:	e8 a4 e9 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d148:	89 10                	mov    DWORD PTR [eax],edx
c000d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d158:	90                   	nop
c000d159:	83 c4 0c             	add    esp,0xc
c000d15c:	c3                   	ret    
c000d15d:	90                   	nop
c000d15e:	66 90                	xchg   ax,ax

c000d160 <Timer::~Timer()>:
c000d160:	83 ec 0c             	sub    esp,0xc
c000d163:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16c:	89 10                	mov    DWORD PTR [eax],edx
c000d16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d172:	83 ec 0c             	sub    esp,0xc
c000d175:	50                   	push   eax
c000d176:	e8 cf e6 ff ff       	call   c000b84a <Device::~Device()>
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	90                   	nop
c000d17f:	83 c4 0c             	add    esp,0xc
c000d182:	c3                   	ret    
c000d183:	90                   	nop

c000d184 <Timer::~Timer()>:
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	83 ec 0c             	sub    esp,0xc
c000d18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18e:	e8 cd ff ff ff       	call   c000d160 <Timer::~Timer()>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 ec 08             	sub    esp,0x8
c000d199:	68 5c 01 00 00       	push   0x15c
c000d19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a2:	e8 6b d2 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	83 c4 0c             	add    esp,0xc
c000d1ad:	c3                   	ret    

c000d1ae <Timer::read()>:
c000d1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1b8:	c3                   	ret    

c000d1b9 <setupTimer(int)>:
c000d1b9:	53                   	push   ebx
c000d1ba:	83 ec 14             	sub    esp,0x14
c000d1bd:	68 5c 01 00 00       	push   0x15c
c000d1c2:	e8 f2 a5 ff ff       	call   c00077b9 <malloc>
c000d1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1ca:	89 c3                	mov    ebx,eax
c000d1cc:	e8 37 e4 00 00       	call   c001b608 <PIT::PIT()>
c000d1d1:	58                   	pop    eax
c000d1d2:	5a                   	pop    edx
c000d1d3:	53                   	push   ebx
c000d1d4:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000d1da:	e8 69 e7 ff ff       	call   c000b948 <Device::addChild(Device*)>
c000d1df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1e1:	6a 00                	push   0x0
c000d1e3:	6a 00                	push   0x0
c000d1e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1e9:	53                   	push   ebx
c000d1ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1ed:	89 d8                	mov    eax,ebx
c000d1ef:	83 c4 28             	add    esp,0x28
c000d1f2:	5b                   	pop    ebx
c000d1f3:	c3                   	ret    

c000d1f4 <timerHandler(unsigned int)>:
c000d1f4:	56                   	push   esi
c000d1f5:	53                   	push   ebx
c000d1f6:	51                   	push   ecx
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	01 05 ac 2a 02 c0    	add    DWORD PTR ds:0xc0022aac,eax
c000d201:	80 3d dd 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204dd,0x0
c000d208:	0f 84 4a 01 00 00    	je     c000d358 <timerHandler(unsigned int)+0x164>
c000d20e:	fa                   	cli    
c000d20f:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c000d215:	83 ec 0c             	sub    esp,0xc
c000d218:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c000d21e:	68 98 37 02 c0       	push   0xc0023798
c000d223:	e8 38 f0 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d228:	83 c4 10             	add    esp,0x10
c000d22b:	84 c0                	test   al,al
c000d22d:	0f 85 a1 00 00 00    	jne    c000d2d4 <timerHandler(unsigned int)+0xe0>
c000d233:	83 ec 0c             	sub    esp,0xc
c000d236:	68 98 37 02 c0       	push   0xc0023798
c000d23b:	e8 3c f0 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	89 c6                	mov    esi,eax
c000d245:	8d 76 00             	lea    esi,[esi+0x0]
c000d248:	83 ec 0c             	sub    esp,0xc
c000d24b:	68 98 37 02 c0       	push   0xc0023798
c000d250:	e8 27 f0 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d255:	c7 04 24 98 37 02 c0 	mov    DWORD PTR [esp],0xc0023798
c000d25c:	89 c3                	mov    ebx,eax
c000d25e:	e8 21 f0 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d263:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d266:	83 c4 10             	add    esp,0x10
c000d269:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c000d26f:	77 23                	ja     c000d294 <timerHandler(unsigned int)+0xa0>
c000d271:	83 ec 0c             	sub    esp,0xc
c000d274:	53                   	push   ebx
c000d275:	e8 de 65 00 00       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	39 de                	cmp    esi,ebx
c000d27f:	75 27                	jne    c000d2a8 <timerHandler(unsigned int)+0xb4>
c000d281:	83 ec 0c             	sub    esp,0xc
c000d284:	68 98 37 02 c0       	push   0xc0023798
c000d289:	e8 ee ef 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d28e:	89 c6                	mov    esi,eax
c000d290:	eb 12                	jmp    c000d2a4 <timerHandler(unsigned int)+0xb0>
c000d292:	66 90                	xchg   ax,ax
c000d294:	52                   	push   edx
c000d295:	52                   	push   edx
c000d296:	53                   	push   ebx
c000d297:	68 98 37 02 c0       	push   0xc0023798
c000d29c:	e8 9b f0 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a4:	83 c4 10             	add    esp,0x10
c000d2a7:	90                   	nop
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	68 98 37 02 c0       	push   0xc0023798
c000d2b0:	e8 ab ef 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	84 c0                	test   al,al
c000d2ba:	75 18                	jne    c000d2d4 <timerHandler(unsigned int)+0xe0>
c000d2bc:	83 ec 0c             	sub    esp,0xc
c000d2bf:	68 98 37 02 c0       	push   0xc0023798
c000d2c4:	e8 b3 ef 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2c9:	83 c4 10             	add    esp,0x10
c000d2cc:	39 f0                	cmp    eax,esi
c000d2ce:	0f 85 74 ff ff ff    	jne    c000d248 <timerHandler(unsigned int)+0x54>
c000d2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2d9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2dd:	74 41                	je     c000d320 <timerHandler(unsigned int)+0x12c>
c000d2df:	80 3d dc 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204dc,0x0
c000d2e6:	74 38                	je     c000d320 <timerHandler(unsigned int)+0x12c>
c000d2e8:	fa                   	cli    
c000d2e9:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c000d2ef:	a1 ac 2a 02 c0       	mov    eax,ds:0xc0022aac
c000d2f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2fa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d303:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d306:	72 08                	jb     c000d310 <timerHandler(unsigned int)+0x11c>
c000d308:	e8 87 60 00 00       	call   c0013394 <schedule()>
c000d30d:	8d 76 00             	lea    esi,[esi+0x0]
c000d310:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000d315:	48                   	dec    eax
c000d316:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000d31b:	75 03                	jne    c000d320 <timerHandler(unsigned int)+0x12c>
c000d31d:	fb                   	sti    
c000d31e:	66 90                	xchg   ax,ax
c000d320:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000d325:	48                   	dec    eax
c000d326:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000d32b:	75 1b                	jne    c000d348 <timerHandler(unsigned int)+0x154>
c000d32d:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c000d334:	74 12                	je     c000d348 <timerHandler(unsigned int)+0x154>
c000d336:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c000d340:	e8 4f 60 00 00       	call   c0013394 <schedule()>
c000d345:	8d 76 00             	lea    esi,[esi+0x0]
c000d348:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000d34d:	48                   	dec    eax
c000d34e:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000d353:	75 03                	jne    c000d358 <timerHandler(unsigned int)+0x164>
c000d355:	fb                   	sti    
c000d356:	66 90                	xchg   ax,ax
c000d358:	58                   	pop    eax
c000d359:	5b                   	pop    ebx
c000d35a:	5e                   	pop    esi
c000d35b:	c3                   	ret    

c000d35c <VCache::VCache(PhysicalDisk*)>:
c000d35c:	53                   	push   ebx
c000d35d:	83 ec 18             	sub    esp,0x18
c000d360:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d369:	89 10                	mov    DWORD PTR [eax],edx
c000d36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d37a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d385:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d38c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d397:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d39e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3c3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3ed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3fc:	e8 b8 a3 ff ff       	call   c00077b9 <malloc>
c000d401:	83 c4 10             	add    esp,0x10
c000d404:	89 c3                	mov    ebx,eax
c000d406:	83 ec 0c             	sub    esp,0xc
c000d409:	53                   	push   ebx
c000d40a:	e8 51 5d 00 00       	call   c0013160 <Mutex::Mutex()>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d416:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d421:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d428:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d433:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d440:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d444:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d44a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d450:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d454:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d457:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d462:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d466:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d46c:	05 00 01 00 00       	add    eax,0x100
c000d471:	c1 e0 04             	shl    eax,0x4
c000d474:	83 ec 0c             	sub    esp,0xc
c000d477:	50                   	push   eax
c000d478:	e8 3c a3 ff ff       	call   c00077b9 <malloc>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 c2                	mov    edx,eax
c000d482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d486:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d498:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d49c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4a6:	c1 e0 06             	shl    eax,0x6
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 07 a3 ff ff       	call   c00077b9 <malloc>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 c2                	mov    edx,eax
c000d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4be:	90                   	nop
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	5b                   	pop    ebx
c000d4c3:	c3                   	ret    

c000d4c4 <VCache::invalidateReadBuffer()>:
c000d4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4c8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4ce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4d2:	c3                   	ret    
c000d4d3:	90                   	nop

c000d4d4 <VCache::writeWriteBuffer()>:
c000d4d4:	53                   	push   ebx
c000d4d5:	83 ec 08             	sub    esp,0x8
c000d4d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4dc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4e0:	74 1e                	je     c000d500 <VCache::writeWriteBuffer()+0x2c>
c000d4e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4e5:	83 ec 0c             	sub    esp,0xc
c000d4e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4ea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4f6:	50                   	push   eax
c000d4f7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d500:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d507:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d50e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d512:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d519:	83 c4 08             	add    esp,0x8
c000d51c:	5b                   	pop    ebx
c000d51d:	c3                   	ret    
c000d51e:	66 90                	xchg   ax,ax

c000d520 <VCache::~VCache()>:
c000d520:	83 ec 0c             	sub    esp,0xc
c000d523:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52c:	89 10                	mov    DWORD PTR [eax],edx
c000d52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d532:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d535:	84 c0                	test   al,al
c000d537:	74 0f                	je     c000d548 <VCache::~VCache()+0x28>
c000d539:	83 ec 0c             	sub    esp,0xc
c000d53c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d540:	e8 8f ff ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d545:	83 c4 10             	add    esp,0x10
c000d548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d54f:	83 ec 0c             	sub    esp,0xc
c000d552:	50                   	push   eax
c000d553:	e8 71 a2 ff ff       	call   c00077c9 <free>
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d562:	83 ec 0c             	sub    esp,0xc
c000d565:	50                   	push   eax
c000d566:	e8 5e a2 ff ff       	call   c00077c9 <free>
c000d56b:	83 c4 10             	add    esp,0x10
c000d56e:	90                   	nop
c000d56f:	83 c4 0c             	add    esp,0xc
c000d572:	c3                   	ret    
c000d573:	90                   	nop

c000d574 <VCache::~VCache()>:
c000d574:	83 ec 0c             	sub    esp,0xc
c000d577:	83 ec 0c             	sub    esp,0xc
c000d57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d57e:	e8 9d ff ff ff       	call   c000d520 <VCache::~VCache()>
c000d583:	83 c4 10             	add    esp,0x10
c000d586:	83 ec 08             	sub    esp,0x8
c000d589:	6a 44                	push   0x44
c000d58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d58f:	e8 7e ce ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	83 c4 0c             	add    esp,0xc
c000d59a:	c3                   	ret    
c000d59b:	90                   	nop

c000d59c <VCache::write(unsigned long long, int, void*)>:
c000d59c:	55                   	push   ebp
c000d59d:	57                   	push   edi
c000d59e:	56                   	push   esi
c000d59f:	53                   	push   ebx
c000d5a0:	83 ec 1c             	sub    esp,0x1c
c000d5a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5af:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5bf:	31 c0                	xor    eax,eax
c000d5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c4:	39 e8                	cmp    eax,ebp
c000d5c6:	7d 18                	jge    c000d5e0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5cb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5d1:	0f af c8             	imul   ecx,eax
c000d5d4:	89 ca                	mov    edx,ecx
c000d5d6:	01 f2                	add    edx,esi
c000d5d8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5da:	40                   	inc    eax
c000d5db:	eb e7                	jmp    c000d5c4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5e4:	74 0a                	je     c000d5f0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5e6:	53                   	push   ebx
c000d5e7:	e8 d8 fe ff ff       	call   c000d4c4 <VCache::invalidateReadBuffer()>
c000d5ec:	58                   	pop    eax
c000d5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5f4:	74 5a                	je     c000d650 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5f6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5fd:	89 f8                	mov    eax,edi
c000d5ff:	99                   	cdq    
c000d600:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d603:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d606:	31 c1                	xor    ecx,eax
c000d608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d60c:	31 d0                	xor    eax,edx
c000d60e:	09 c1                	or     ecx,eax
c000d610:	75 32                	jne    c000d644 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d612:	83 fd 01             	cmp    ebp,0x1
c000d615:	75 2d                	jne    c000d644 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d617:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d61a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d620:	0f af f9             	imul   edi,ecx
c000d623:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d628:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d62b:	40                   	inc    eax
c000d62c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d62f:	83 f8 40             	cmp    eax,0x40
c000d632:	75 74                	jne    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	53                   	push   ebx
c000d638:	e8 97 fe ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	eb 66                	jmp    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d642:	66 90                	xchg   ax,ax
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	53                   	push   ebx
c000d648:	e8 87 fe ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d653:	83 fd 3f             	cmp    ebp,0x3f
c000d656:	7f 24                	jg     c000d67c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d65c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d65f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d662:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d66a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d66d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d670:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d678:	eb 2e                	jmp    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d67a:	66 90                	xchg   ax,ax
c000d67c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d67e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d682:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d686:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d68a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d68e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d692:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d696:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d69a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d69d:	83 c4 1c             	add    esp,0x1c
c000d6a0:	5b                   	pop    ebx
c000d6a1:	5e                   	pop    esi
c000d6a2:	5f                   	pop    edi
c000d6a3:	5d                   	pop    ebp
c000d6a4:	ff e0                	jmp    eax
c000d6a6:	66 90                	xchg   ax,ax
c000d6a8:	83 c4 1c             	add    esp,0x1c
c000d6ab:	31 c0                	xor    eax,eax
c000d6ad:	5b                   	pop    ebx
c000d6ae:	5e                   	pop    esi
c000d6af:	5f                   	pop    edi
c000d6b0:	5d                   	pop    ebp
c000d6b1:	c3                   	ret    

c000d6b2 <VCache::read(unsigned long long, int, void*)>:
c000d6b2:	55                   	push   ebp
c000d6b3:	57                   	push   edi
c000d6b4:	56                   	push   esi
c000d6b5:	53                   	push   ebx
c000d6b6:	83 ec 1c             	sub    esp,0x1c
c000d6b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6d1:	31 c0                	xor    eax,eax
c000d6d3:	90                   	nop
c000d6d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d6d8:	7d 16                	jge    c000d6f0 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d6da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6dd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6e3:	0f af c8             	imul   ecx,eax
c000d6e6:	89 ca                	mov    edx,ecx
c000d6e8:	01 f2                	add    edx,esi
c000d6ea:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d6ec:	40                   	inc    eax
c000d6ed:	eb e5                	jmp    c000d6d4 <VCache::read(unsigned long long, int, void*)+0x22>
c000d6ef:	90                   	nop
c000d6f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6f4:	74 0e                	je     c000d704 <VCache::read(unsigned long long, int, void*)+0x52>
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	53                   	push   ebx
c000d6fa:	e8 d5 fd ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	53                   	push   ebx
c000d708:	e8 b7 fd ff ff       	call   c000d4c4 <VCache::invalidateReadBuffer()>
c000d70d:	83 c4 0c             	add    esp,0xc
c000d710:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d713:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d719:	6a 00                	push   0x0
c000d71b:	56                   	push   esi
c000d71c:	e8 af 2d ff ff       	call   c00004d0 <memset>
c000d721:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d724:	8b 10                	mov    edx,DWORD PTR [eax]
c000d726:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d72a:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d72e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d732:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d736:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d73a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d73e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d741:	83 c4 2c             	add    esp,0x2c
c000d744:	5b                   	pop    ebx
c000d745:	5e                   	pop    esi
c000d746:	5f                   	pop    edi
c000d747:	5d                   	pop    ebp
c000d748:	ff e0                	jmp    eax

c000d74a <Video::putrect(int, int, int, int, unsigned int)>:
c000d74a:	55                   	push   ebp
c000d74b:	57                   	push   edi
c000d74c:	56                   	push   esi
c000d74d:	53                   	push   ebx
c000d74e:	83 ec 1c             	sub    esp,0x1c
c000d751:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d755:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d759:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d75d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d761:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d769:	01 df                	add    edi,ebx
c000d76b:	39 fb                	cmp    ebx,edi
c000d76d:	7d 1f                	jge    c000d78e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d76f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d773:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d777:	7d 12                	jge    c000d78b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d779:	8b 16                	mov    edx,DWORD PTR [esi]
c000d77b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d77f:	53                   	push   ebx
c000d780:	55                   	push   ebp
c000d781:	45                   	inc    ebp
c000d782:	56                   	push   esi
c000d783:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d786:	83 c4 10             	add    esp,0x10
c000d789:	eb e8                	jmp    c000d773 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d78b:	43                   	inc    ebx
c000d78c:	eb dd                	jmp    c000d76b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d78e:	83 c4 1c             	add    esp,0x1c
c000d791:	5b                   	pop    ebx
c000d792:	5e                   	pop    esi
c000d793:	5f                   	pop    edi
c000d794:	5d                   	pop    ebp
c000d795:	c3                   	ret    

c000d796 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d796:	55                   	push   ebp
c000d797:	57                   	push   edi
c000d798:	31 ff                	xor    edi,edi
c000d79a:	56                   	push   esi
c000d79b:	53                   	push   ebx
c000d79c:	83 ec 1c             	sub    esp,0x1c
c000d79f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d7a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7a7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d7ae:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d7b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d7bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d7bf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7c6:	01 f9                	add    ecx,edi
c000d7c8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7cc:	7d 2f                	jge    c000d7fd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7ce:	31 f6                	xor    esi,esi
c000d7d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7d4:	01 f2                	add    edx,esi
c000d7d6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7da:	7d 1a                	jge    c000d7f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7df:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7e2:	46                   	inc    esi
c000d7e3:	51                   	push   ecx
c000d7e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7e8:	52                   	push   edx
c000d7e9:	55                   	push   ebp
c000d7ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7f4:	eb da                	jmp    c000d7d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7f6:	47                   	inc    edi
c000d7f7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7fb:	eb c5                	jmp    c000d7c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7fd:	83 c4 1c             	add    esp,0x1c
c000d800:	5b                   	pop    ebx
c000d801:	5e                   	pop    esi
c000d802:	5f                   	pop    edi
c000d803:	5d                   	pop    ebp
c000d804:	c3                   	ret    
c000d805:	90                   	nop

c000d806 <Video::blit(unsigned int*, int, int, int, int)>:
c000d806:	55                   	push   ebp
c000d807:	57                   	push   edi
c000d808:	56                   	push   esi
c000d809:	53                   	push   ebx
c000d80a:	83 ec 1c             	sub    esp,0x1c
c000d80d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d811:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d815:	85 c0                	test   eax,eax
c000d817:	79 02                	jns    c000d81b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d819:	31 c0                	xor    eax,eax
c000d81b:	c1 e0 02             	shl    eax,0x2
c000d81e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d822:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d826:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d82a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d82e:	39 d8                	cmp    eax,ebx
c000d830:	7e 49                	jle    c000d87b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d832:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d838:	7c 41                	jl     c000d87b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d83a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d83e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d842:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d846:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d84a:	39 f9                	cmp    ecx,edi
c000d84c:	7e 22                	jle    c000d870 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d84e:	83 c5 04             	add    ebp,0x4
c000d851:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d857:	7c 14                	jl     c000d86d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d859:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d85b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d85e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d862:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d866:	56                   	push   esi
c000d867:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d86a:	83 c4 10             	add    esp,0x10
c000d86d:	47                   	inc    edi
c000d86e:	eb d2                	jmp    c000d842 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d874:	43                   	inc    ebx
c000d875:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d879:	eb ab                	jmp    c000d826 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d87b:	83 c4 1c             	add    esp,0x1c
c000d87e:	5b                   	pop    ebx
c000d87f:	5e                   	pop    esi
c000d880:	5f                   	pop    edi
c000d881:	5d                   	pop    ebp
c000d882:	c3                   	ret    
c000d883:	90                   	nop

c000d884 <Video::clearScreen(unsigned int)>:
c000d884:	57                   	push   edi
c000d885:	56                   	push   esi
c000d886:	53                   	push   ebx
c000d887:	31 db                	xor    ebx,ebx
c000d889:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d88d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d893:	7e 1f                	jle    c000d8b4 <Video::clearScreen(unsigned int)+0x30>
c000d895:	31 ff                	xor    edi,edi
c000d897:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d89d:	7e 12                	jle    c000d8b1 <Video::clearScreen(unsigned int)+0x2d>
c000d89f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8a5:	53                   	push   ebx
c000d8a6:	57                   	push   edi
c000d8a7:	47                   	inc    edi
c000d8a8:	56                   	push   esi
c000d8a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8ac:	83 c4 10             	add    esp,0x10
c000d8af:	eb e6                	jmp    c000d897 <Video::clearScreen(unsigned int)+0x13>
c000d8b1:	43                   	inc    ebx
c000d8b2:	eb d9                	jmp    c000d88d <Video::clearScreen(unsigned int)+0x9>
c000d8b4:	5b                   	pop    ebx
c000d8b5:	5e                   	pop    esi
c000d8b6:	5f                   	pop    edi
c000d8b7:	c3                   	ret    

c000d8b8 <Video::putpixel(int, int, unsigned int)>:
c000d8b8:	c7 44 24 04 74 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd74
c000d8c0:	e9 be 28 00 00       	jmp    c0010183 <KePanic(char const*)>
c000d8c5:	90                   	nop

c000d8c6 <Video::Video(char const*)>:
c000d8c6:	83 ec 0c             	sub    esp,0xc
c000d8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cd:	83 ec 08             	sub    esp,0x8
c000d8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d4:	50                   	push   eax
c000d8d5:	e8 06 e2 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000d8da:	83 c4 10             	add    esp,0x10
c000d8dd:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e6:	89 10                	mov    DWORD PTR [eax],edx
c000d8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8f6:	90                   	nop
c000d8f7:	83 c4 0c             	add    esp,0xc
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <Video::~Video()>:
c000d8fc:	83 ec 0c             	sub    esp,0xc
c000d8ff:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d908:	89 10                	mov    DWORD PTR [eax],edx
c000d90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	50                   	push   eax
c000d912:	e8 33 df ff ff       	call   c000b84a <Device::~Device()>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	90                   	nop
c000d91b:	83 c4 0c             	add    esp,0xc
c000d91e:	c3                   	ret    
c000d91f:	90                   	nop

c000d920 <Video::~Video()>:
c000d920:	83 ec 0c             	sub    esp,0xc
c000d923:	83 ec 0c             	sub    esp,0xc
c000d926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92a:	e8 cd ff ff ff       	call   c000d8fc <Video::~Video()>
c000d92f:	83 c4 10             	add    esp,0x10
c000d932:	83 ec 08             	sub    esp,0x8
c000d935:	68 64 01 00 00       	push   0x164
c000d93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93e:	e8 cf ca ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	83 c4 0c             	add    esp,0xc
c000d949:	c3                   	ret    

c000d94a <Video::isMonochrome()>:
c000d94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d94e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d954:	c3                   	ret    
c000d955:	90                   	nop

c000d956 <Video::getWidth()>:
c000d956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d95a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d960:	c3                   	ret    
c000d961:	90                   	nop

c000d962 <Video::getHeight()>:
c000d962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d966:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d96c:	c3                   	ret    
c000d96d:	90                   	nop

c000d96e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d96e:	55                   	push   ebp
c000d96f:	57                   	push   edi
c000d970:	56                   	push   esi
c000d971:	53                   	push   ebx
c000d972:	83 ec 2c             	sub    esp,0x2c
c000d975:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d979:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d97d:	83 f8 01             	cmp    eax,0x1
c000d980:	19 c9                	sbb    ecx,ecx
c000d982:	31 db                	xor    ebx,ebx
c000d984:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d988:	89 cd                	mov    ebp,ecx
c000d98a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d992:	f7 d5                	not    ebp
c000d994:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d99a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d99e:	01 d8                	add    eax,ebx
c000d9a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9a4:	56                   	push   esi
c000d9a5:	e8 b8 ff ff ff       	call   c000d962 <Video::getHeight()>
c000d9aa:	59                   	pop    ecx
c000d9ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d9af:	7e 70                	jle    c000da21 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d9b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d9b9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d9bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9c4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9cf:	89 f8                	mov    eax,edi
c000d9d1:	83 c0 20             	add    eax,0x20
c000d9d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9d8:	56                   	push   esi
c000d9d9:	e8 78 ff ff ff       	call   c000d956 <Video::getWidth()>
c000d9de:	5a                   	pop    edx
c000d9df:	39 c7                	cmp    edi,eax
c000d9e1:	7d 34                	jge    c000da17 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9e3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9e8:	74 05                	je     c000d9ef <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9ea:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9ec:	55                   	push   ebp
c000d9ed:	eb 0d                	jmp    c000d9fc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9ef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9f4:	74 12                	je     c000da08 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9f6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da00:	57                   	push   edi
c000da01:	56                   	push   esi
c000da02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da0c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da10:	47                   	inc    edi
c000da11:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da15:	75 c1                	jne    c000d9d8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da17:	43                   	inc    ebx
c000da18:	83 fb 20             	cmp    ebx,0x20
c000da1b:	0f 85 79 ff ff ff    	jne    c000d99a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da21:	83 c4 2c             	add    esp,0x2c
c000da24:	5b                   	pop    ebx
c000da25:	5e                   	pop    esi
c000da26:	5f                   	pop    edi
c000da27:	5d                   	pop    ebp
c000da28:	c3                   	ret    
c000da29:	90                   	nop

c000da2a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da2a:	55                   	push   ebp
c000da2b:	57                   	push   edi
c000da2c:	56                   	push   esi
c000da2d:	53                   	push   ebx
c000da2e:	83 ec 28             	sub    esp,0x28
c000da31:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da35:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da39:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da3d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da41:	c1 e6 08             	shl    esi,0x8
c000da44:	01 c6                	add    esi,eax
c000da46:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da4a:	c1 e0 08             	shl    eax,0x8
c000da4d:	01 d0                	add    eax,edx
c000da4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da57:	0f af c6             	imul   eax,esi
c000da5a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da61:	50                   	push   eax
c000da62:	e8 52 9d ff ff       	call   c00077b9 <malloc>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	89 c7                	mov    edi,eax
c000da6c:	85 c0                	test   eax,eax
c000da6e:	75 10                	jne    c000da80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	68 95 dd 01 c0       	push   0xc001dd95
c000da78:	e8 06 27 00 00       	call   c0010183 <KePanic(char const*)>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da83:	ba 12 00 00 00       	mov    edx,0x12
c000da88:	84 c0                	test   al,al
c000da8a:	74 11                	je     c000da9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da8c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da90:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da94:	c1 fa 03             	sar    edx,0x3
c000da97:	0f af d1             	imul   edx,ecx
c000da9a:	83 c2 12             	add    edx,0x12
c000da9d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000daa1:	74 04                	je     c000daa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000daa3:	85 f6                	test   esi,esi
c000daa5:	75 12                	jne    c000dab9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000daa7:	83 ec 0c             	sub    esp,0xc
c000daaa:	68 a5 dd 01 c0       	push   0xc001dda5
c000daaf:	e8 54 ca ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000dab4:	e9 b8 00 00 00       	jmp    c000db71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dab9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dabd:	80 f9 02             	cmp    cl,0x2
c000dac0:	0f 85 96 00 00 00    	jne    c000db5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dac6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dacb:	75 0e                	jne    c000dadb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dacd:	84 c0                	test   al,al
c000dacf:	75 0a                	jne    c000dadb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dad1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dad4:	83 e8 18             	sub    eax,0x18
c000dad7:	a8 f7                	test   al,0xf7
c000dad9:	74 0a                	je     c000dae5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dadb:	83 ec 0c             	sub    esp,0xc
c000dade:	68 ba dd 01 c0       	push   0xc001ddba
c000dae3:	eb 7f                	jmp    c000db64 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dae5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000daf5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000daf9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db01:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db05:	75 0c                	jne    c000db13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db07:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db0c:	c1 e0 18             	shl    eax,0x18
c000db0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db13:	45                   	inc    ebp
c000db14:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db19:	c1 e1 10             	shl    ecx,0x10
c000db1c:	89 c8                	mov    eax,ecx
c000db1e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db23:	c1 e1 08             	shl    ecx,0x8
c000db26:	09 c1                	or     ecx,eax
c000db28:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db2c:	09 c1                	or     ecx,eax
c000db2e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db32:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db36:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db3a:	c1 f8 03             	sar    eax,0x3
c000db3d:	01 c2                	add    edx,eax
c000db3f:	89 e8                	mov    eax,ebp
c000db41:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db45:	39 c6                	cmp    esi,eax
c000db47:	7f b0                	jg     c000daf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db49:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db51:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db54:	7e 22                	jle    c000db78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db56:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db5a:	eb 99                	jmp    c000daf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db5c:	50                   	push   eax
c000db5d:	50                   	push   eax
c000db5e:	51                   	push   ecx
c000db5f:	68 c8 dd 01 c0       	push   0xc001ddc8
c000db64:	e8 9f c9 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000db69:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db6c:	e8 58 9c ff ff       	call   c00077c9 <free>
c000db71:	83 c4 10             	add    esp,0x10
c000db74:	31 ff                	xor    edi,edi
c000db76:	eb 0f                	jmp    c000db87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db7c:	89 30                	mov    DWORD PTR [eax],esi
c000db7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db82:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db85:	89 30                	mov    DWORD PTR [eax],esi
c000db87:	83 c4 1c             	add    esp,0x1c
c000db8a:	89 f8                	mov    eax,edi
c000db8c:	5b                   	pop    ebx
c000db8d:	5e                   	pop    esi
c000db8e:	5f                   	pop    edi
c000db8f:	5d                   	pop    ebp
c000db90:	c3                   	ret    
c000db91:	90                   	nop

c000db92 <Video::putTGA(int, int, unsigned char*, int)>:
c000db92:	55                   	push   ebp
c000db93:	57                   	push   edi
c000db94:	56                   	push   esi
c000db95:	53                   	push   ebx
c000db96:	83 ec 28             	sub    esp,0x28
c000db99:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dba1:	50                   	push   eax
c000dba2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dba6:	50                   	push   eax
c000dba7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbaf:	56                   	push   esi
c000dbb0:	e8 75 fe ff ff       	call   c000da2a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dbb5:	83 c4 20             	add    esp,0x20
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dbbe:	74 35                	je     c000dbf5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbc0:	89 c7                	mov    edi,eax
c000dbc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbc6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbca:	39 d8                	cmp    eax,ebx
c000dbcc:	7e 27                	jle    c000dbf5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbd6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbda:	39 e8                	cmp    eax,ebp
c000dbdc:	7e 14                	jle    c000dbf2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbde:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbe0:	83 c7 04             	add    edi,0x4
c000dbe3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbe6:	53                   	push   ebx
c000dbe7:	55                   	push   ebp
c000dbe8:	45                   	inc    ebp
c000dbe9:	56                   	push   esi
c000dbea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbed:	83 c4 10             	add    esp,0x10
c000dbf0:	eb e0                	jmp    c000dbd2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbf2:	43                   	inc    ebx
c000dbf3:	eb cd                	jmp    c000dbc2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbf5:	83 c4 1c             	add    esp,0x1c
c000dbf8:	5b                   	pop    ebx
c000dbf9:	5e                   	pop    esi
c000dbfa:	5f                   	pop    edi
c000dbfb:	5d                   	pop    ebp
c000dbfc:	c3                   	ret    
c000dbfd:	66 90                	xchg   ax,ax
c000dbff:	90                   	nop

c000dc00 <ACPI::close(int, int, void*)>:
c000dc00:	83 ec 1c             	sub    esp,0x1c
c000dc03:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc0b:	74 0b                	je     c000dc18 <ACPI::close(int, int, void*)+0x18>
c000dc0d:	b8 00 00 00 00       	mov    eax,0x0
c000dc12:	e9 9d 00 00 00       	jmp    c000dcb4 <ACPI::close(int, int, void*)+0xb4>
c000dc17:	90                   	nop
c000dc18:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc1d:	75 29                	jne    c000dc48 <ACPI::close(int, int, void*)+0x48>
c000dc1f:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000dc24:	85 c0                	test   eax,eax
c000dc26:	74 08                	je     c000dc30 <ACPI::close(int, int, void*)+0x30>
c000dc28:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000dc2d:	ff d0                	call   eax
c000dc2f:	90                   	nop
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	68 24 de 01 c0       	push   0xc001de24
c000dc38:	e8 46 25 00 00       	call   c0010183 <KePanic(char const*)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc45:	eb 6d                	jmp    c000dcb4 <ACPI::close(int, int, void*)+0xb4>
c000dc47:	90                   	nop
c000dc48:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc4d:	75 5d                	jne    c000dcac <ACPI::close(int, int, void*)+0xac>
c000dc4f:	a1 c4 2a 02 c0       	mov    eax,ds:0xc0022ac4
c000dc54:	85 c0                	test   eax,eax
c000dc56:	74 08                	je     c000dc60 <ACPI::close(int, int, void*)+0x60>
c000dc58:	a1 c4 2a 02 c0       	mov    eax,ds:0xc0022ac4
c000dc5d:	ff d0                	call   eax
c000dc5f:	90                   	nop
c000dc60:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc65:	8d 76 00             	lea    esi,[esi+0x0]
c000dc68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc6c:	25 ff 00 00 00       	and    eax,0xff
c000dc71:	83 e0 02             	and    eax,0x2
c000dc74:	74 1e                	je     c000dc94 <ACPI::close(int, int, void*)+0x94>
c000dc76:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc81:	89 c2                	mov    edx,eax
c000dc83:	ec                   	in     al,dx
c000dc84:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc88:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc8c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc90:	eb d6                	jmp    c000dc68 <ACPI::close(int, int, void*)+0x68>
c000dc92:	66 90                	xchg   ax,ax
c000dc94:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc9b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dca0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dca8:	ee                   	out    dx,al
c000dca9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcb1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb4:	83 c4 1c             	add    esp,0x1c
c000dcb7:	c3                   	ret    

c000dcb8 <findRSDP()>:
c000dcb8:	83 ec 1c             	sub    esp,0x1c
c000dcbb:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dcc0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcc6:	83 e0 04             	and    eax,0x4
c000dcc9:	84 c0                	test   al,al
c000dccb:	75 07                	jne    c000dcd4 <findRSDP()+0x1c>
c000dccd:	b8 00 00 00 00       	mov    eax,0x0
c000dcd2:	eb 70                	jmp    c000dd44 <findRSDP()+0x8c>
c000dcd4:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c000dcd9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcde:	7f 1c                	jg     c000dcfc <findRSDP()+0x44>
c000dce0:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dce5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dceb:	83 e2 fb             	and    edx,0xfffffffb
c000dcee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcf4:	b8 00 00 00 00       	mov    eax,0x0
c000dcf9:	eb 49                	jmp    c000dd44 <findRSDP()+0x8c>
c000dcfb:	90                   	nop
c000dcfc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd04:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd0c:	77 2e                	ja     c000dd3c <findRSDP()+0x84>
c000dd0e:	83 ec 04             	sub    esp,0x4
c000dd11:	6a 08                	push   0x8
c000dd13:	68 bf de 01 c0       	push   0xc001debf
c000dd18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd1c:	e8 6f 26 ff ff       	call   c0000390 <memcmp>
c000dd21:	83 c4 10             	add    esp,0x10
c000dd24:	85 c0                	test   eax,eax
c000dd26:	0f 94 c0             	sete   al
c000dd29:	84 c0                	test   al,al
c000dd2b:	74 07                	je     c000dd34 <findRSDP()+0x7c>
c000dd2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd31:	eb 11                	jmp    c000dd44 <findRSDP()+0x8c>
c000dd33:	90                   	nop
c000dd34:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd39:	eb c9                	jmp    c000dd04 <findRSDP()+0x4c>
c000dd3b:	90                   	nop
c000dd3c:	b8 00 00 00 00       	mov    eax,0x0
c000dd41:	8d 76 00             	lea    esi,[esi+0x0]
c000dd44:	83 c4 1c             	add    esp,0x1c
c000dd47:	c3                   	ret    

c000dd48 <loadACPITables(unsigned char*)>:
c000dd48:	57                   	push   edi
c000dd49:	56                   	push   esi
c000dd4a:	53                   	push   ebx
c000dd4b:	83 ec 60             	sub    esp,0x60
c000dd4e:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dd53:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd59:	83 e0 04             	and    eax,0x4
c000dd5c:	84 c0                	test   al,al
c000dd5e:	0f 84 3c 02 00 00    	je     c000dfa0 <loadACPITables(unsigned char*)+0x258>
c000dd64:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000dd69:	84 c0                	test   al,al
c000dd6b:	74 77                	je     c000dde4 <loadACPITables(unsigned char*)+0x9c>
c000dd6d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd71:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd7c:	83 e8 24             	sub    eax,0x24
c000dd7f:	c1 e8 03             	shr    eax,0x3
c000dd82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd86:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd8e:	66 90                	xchg   ax,ax
c000dd90:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd94:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd98:	0f 8d b6 00 00 00    	jge    c000de54 <loadACPITables(unsigned char*)+0x10c>
c000dd9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dda2:	83 c0 24             	add    eax,0x24
c000dda5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ddad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ddb1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ddb5:	c1 e0 03             	shl    eax,0x3
c000ddb8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ddbc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ddc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ddc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddc5:	89 c1                	mov    ecx,eax
c000ddc7:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000ddcc:	8d 50 01             	lea    edx,[eax+0x1]
c000ddcf:	89 15 cc 2a 02 c0    	mov    DWORD PTR ds:0xc0022acc,edx
c000ddd5:	89 ca                	mov    edx,ecx
c000ddd7:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000ddde:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dde2:	eb ac                	jmp    c000dd90 <loadACPITables(unsigned char*)+0x48>
c000dde4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dde8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddf3:	83 e8 24             	sub    eax,0x24
c000ddf6:	c1 e8 02             	shr    eax,0x2
c000ddf9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddfd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de05:	8d 76 00             	lea    esi,[esi+0x0]
c000de08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de0c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de10:	7d 42                	jge    c000de54 <loadACPITables(unsigned char*)+0x10c>
c000de12:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de16:	83 c0 24             	add    eax,0x24
c000de19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de21:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de25:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de29:	c1 e0 02             	shl    eax,0x2
c000de2c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de34:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de36:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000de3b:	8d 50 01             	lea    edx,[eax+0x1]
c000de3e:	89 15 cc 2a 02 c0    	mov    DWORD PTR ds:0xc0022acc,edx
c000de44:	89 ca                	mov    edx,ecx
c000de46:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000de4d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de51:	eb b5                	jmp    c000de08 <loadACPITables(unsigned char*)+0xc0>
c000de53:	90                   	nop
c000de54:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de5c:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000de61:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de65:	0f 8d 39 01 00 00    	jge    c000dfa4 <loadACPITables(unsigned char*)+0x25c>
c000de6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de6f:	8b 04 c5 e4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd51c]
c000de76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de86:	25 ff 0f 00 00       	and    eax,0xfff
c000de8b:	89 c6                	mov    esi,eax
c000de8d:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000de93:	83 ec 0c             	sub    esp,0xc
c000de96:	6a 01                	push   0x1
c000de98:	e8 18 b4 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c000de9d:	83 c4 10             	add    esp,0x10
c000dea0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dea4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000deaa:	83 ec 0c             	sub    esp,0xc
c000dead:	6a 01                	push   0x1
c000deaf:	6a 01                	push   0x1
c000deb1:	50                   	push   eax
c000deb2:	52                   	push   edx
c000deb3:	53                   	push   ebx
c000deb4:	e8 8b bd ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000deb9:	83 c4 20             	add    esp,0x20
c000debc:	09 f0                	or     eax,esi
c000debe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dec2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dec6:	c1 e0 03             	shl    eax,0x3
c000dec9:	05 e0 2a 02 c0       	add    eax,0xc0022ae0
c000dece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ded2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ded6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deda:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dee6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000deee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000def2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000def6:	89 c6                	mov    esi,eax
c000def8:	89 d7                	mov    edi,edx
c000defa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000defc:	89 c8                	mov    eax,ecx
c000defe:	89 fa                	mov    edx,edi
c000df00:	89 f3                	mov    ebx,esi
c000df02:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df1d:	05 00 10 00 00       	add    eax,0x1000
c000df22:	c1 e8 0c             	shr    eax,0xc
c000df25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df35:	25 ff 0f 00 00       	and    eax,0xfff
c000df3a:	89 c6                	mov    esi,eax
c000df3c:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df49:	e8 67 b3 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c000df4e:	83 c4 10             	add    esp,0x10
c000df51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df55:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df5b:	83 ec 0c             	sub    esp,0xc
c000df5e:	6a 01                	push   0x1
c000df60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df64:	50                   	push   eax
c000df65:	52                   	push   edx
c000df66:	53                   	push   ebx
c000df67:	e8 d8 bc ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df6c:	83 c4 20             	add    esp,0x20
c000df6f:	09 f0                	or     eax,esi
c000df71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df79:	83 ec 0c             	sub    esp,0xc
c000df7c:	50                   	push   eax
c000df7d:	e8 63 b6 ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df8d:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000df94:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df98:	e9 bf fe ff ff       	jmp    c000de5c <loadACPITables(unsigned char*)+0x114>
c000df9d:	8d 76 00             	lea    esi,[esi+0x0]
c000dfa0:	90                   	nop
c000dfa1:	8d 76 00             	lea    esi,[esi+0x0]
c000dfa4:	83 c4 60             	add    esp,0x60
c000dfa7:	5b                   	pop    ebx
c000dfa8:	5e                   	pop    esi
c000dfa9:	5f                   	pop    edi
c000dfaa:	c3                   	ret    
c000dfab:	90                   	nop

c000dfac <findRSDT(unsigned char*)>:
c000dfac:	57                   	push   edi
c000dfad:	56                   	push   esi
c000dfae:	53                   	push   ebx
c000dfaf:	83 ec 50             	sub    esp,0x50
c000dfb2:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dfb7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfbd:	83 e0 04             	and    eax,0x4
c000dfc0:	84 c0                	test   al,al
c000dfc2:	75 0c                	jne    c000dfd0 <findRSDT(unsigned char*)+0x24>
c000dfc4:	b8 00 00 00 00       	mov    eax,0x0
c000dfc9:	e9 26 01 00 00       	jmp    c000e0f4 <findRSDT(unsigned char*)+0x148>
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	89 e0                	mov    eax,esp
c000dfd2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfd6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfde:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dff2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dff6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dffa:	89 c6                	mov    esi,eax
c000dffc:	89 d7                	mov    edi,edx
c000dffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e000:	89 c8                	mov    eax,ecx
c000e002:	89 fa                	mov    edx,edi
c000e004:	89 f3                	mov    ebx,esi
c000e006:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e00a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e00e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e012:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e016:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e01a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e022:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e026:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e02a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e036:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e03a:	25 ff 0f 00 00       	and    eax,0xfff
c000e03f:	89 c6                	mov    esi,eax
c000e041:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	6a 02                	push   0x2
c000e04c:	e8 64 b2 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c000e051:	83 c4 10             	add    esp,0x10
c000e054:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e058:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	6a 01                	push   0x1
c000e063:	6a 02                	push   0x2
c000e065:	50                   	push   eax
c000e066:	52                   	push   edx
c000e067:	53                   	push   ebx
c000e068:	e8 d7 bb ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e06d:	83 c4 20             	add    esp,0x20
c000e070:	09 f0                	or     eax,esi
c000e072:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e076:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e07a:	25 ff 0f 00 00       	and    eax,0xfff
c000e07f:	89 c6                	mov    esi,eax
c000e081:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000e087:	83 ec 0c             	sub    esp,0xc
c000e08a:	6a 02                	push   0x2
c000e08c:	e8 24 b2 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c000e091:	83 c4 10             	add    esp,0x10
c000e094:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e098:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e09e:	83 ec 0c             	sub    esp,0xc
c000e0a1:	6a 01                	push   0x1
c000e0a3:	6a 02                	push   0x2
c000e0a5:	50                   	push   eax
c000e0a6:	52                   	push   edx
c000e0a7:	53                   	push   ebx
c000e0a8:	e8 97 bb ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0ad:	83 c4 20             	add    esp,0x20
c000e0b0:	09 f0                	or     eax,esi
c000e0b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0b6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e0bb:	75 13                	jne    c000e0d0 <findRSDT(unsigned char*)+0x124>
c000e0bd:	c6 05 e0 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022ce0,0x0
c000e0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0cc:	eb 22                	jmp    c000e0f0 <findRSDT(unsigned char*)+0x144>
c000e0ce:	66 90                	xchg   ax,ax
c000e0d0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0d5:	75 11                	jne    c000e0e8 <findRSDT(unsigned char*)+0x13c>
c000e0d7:	c6 05 e0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ce0,0x1
c000e0de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0e6:	eb 08                	jmp    c000e0f0 <findRSDT(unsigned char*)+0x144>
c000e0e8:	b8 00 00 00 00       	mov    eax,0x0
c000e0ed:	eb 05                	jmp    c000e0f4 <findRSDT(unsigned char*)+0x148>
c000e0ef:	90                   	nop
c000e0f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0f4:	83 c4 50             	add    esp,0x50
c000e0f7:	5b                   	pop    ebx
c000e0f8:	5e                   	pop    esi
c000e0f9:	5f                   	pop    edi
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <findDataTable(unsigned char*, char*)>:
c000e0fc:	83 ec 1c             	sub    esp,0x1c
c000e0ff:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e104:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e10a:	83 e0 04             	and    eax,0x4
c000e10d:	84 c0                	test   al,al
c000e10f:	75 07                	jne    c000e118 <findDataTable(unsigned char*, char*)+0x1c>
c000e111:	b8 00 00 00 00       	mov    eax,0x0
c000e116:	eb 58                	jmp    c000e170 <findDataTable(unsigned char*, char*)+0x74>
c000e118:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e120:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000e125:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e129:	7d 3d                	jge    c000e168 <findDataTable(unsigned char*, char*)+0x6c>
c000e12b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e12f:	c1 e0 03             	shl    eax,0x3
c000e132:	05 e0 2a 02 c0       	add    eax,0xc0022ae0
c000e137:	83 ec 04             	sub    esp,0x4
c000e13a:	6a 04                	push   0x4
c000e13c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e140:	50                   	push   eax
c000e141:	e8 4a 22 ff ff       	call   c0000390 <memcmp>
c000e146:	83 c4 10             	add    esp,0x10
c000e149:	85 c0                	test   eax,eax
c000e14b:	0f 94 c0             	sete   al
c000e14e:	84 c0                	test   al,al
c000e150:	74 0e                	je     c000e160 <findDataTable(unsigned char*, char*)+0x64>
c000e152:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e156:	8b 04 c5 e4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd51c]
c000e15d:	eb 11                	jmp    c000e170 <findDataTable(unsigned char*, char*)+0x74>
c000e15f:	90                   	nop
c000e160:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e164:	eb ba                	jmp    c000e120 <findDataTable(unsigned char*, char*)+0x24>
c000e166:	66 90                	xchg   ax,ax
c000e168:	b8 00 00 00 00       	mov    eax,0x0
c000e16d:	8d 76 00             	lea    esi,[esi+0x0]
c000e170:	83 c4 1c             	add    esp,0x1c
c000e173:	c3                   	ret    

c000e174 <scanMADT()>:
c000e174:	53                   	push   ebx
c000e175:	83 ec 38             	sub    esp,0x38
c000e178:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c000e17d:	25 00 04 00 00       	and    eax,0x400
c000e182:	74 14                	je     c000e198 <scanMADT()+0x24>
c000e184:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e189:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e18f:	83 e2 fb             	and    edx,0xfffffffb
c000e192:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e198:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e19d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1a3:	83 e0 04             	and    eax,0x4
c000e1a6:	84 c0                	test   al,al
c000e1a8:	0f 84 8a 04 00 00    	je     c000e638 <scanMADT()+0x4c4>
c000e1ae:	e8 05 fb ff ff       	call   c000dcb8 <findRSDP()>
c000e1b3:	a3 ec 2c 02 c0       	mov    ds:0xc0022cec,eax
c000e1b8:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c000e1bd:	85 c0                	test   eax,eax
c000e1bf:	75 1b                	jne    c000e1dc <scanMADT()+0x68>
c000e1c1:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e1c6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1cc:	83 e2 fb             	and    edx,0xfffffffb
c000e1cf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1d5:	e9 66 04 00 00       	jmp    c000e640 <scanMADT()+0x4cc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c000e1e1:	83 ec 0c             	sub    esp,0xc
c000e1e4:	50                   	push   eax
c000e1e5:	e8 c2 fd ff ff       	call   c000dfac <findRSDT(unsigned char*)>
c000e1ea:	83 c4 10             	add    esp,0x10
c000e1ed:	a3 e8 2c 02 c0       	mov    ds:0xc0022ce8,eax
c000e1f2:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e1f7:	85 c0                	test   eax,eax
c000e1f9:	75 19                	jne    c000e214 <scanMADT()+0xa0>
c000e1fb:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e200:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e206:	83 e2 fb             	and    edx,0xfffffffb
c000e209:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e20f:	e9 2c 04 00 00       	jmp    c000e640 <scanMADT()+0x4cc>
c000e214:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e219:	83 ec 0c             	sub    esp,0xc
c000e21c:	50                   	push   eax
c000e21d:	e8 26 fb ff ff       	call   c000dd48 <loadACPITables(unsigned char*)>
c000e222:	83 c4 10             	add    esp,0x10
c000e225:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e22a:	83 ec 08             	sub    esp,0x8
c000e22d:	68 c8 de 01 c0       	push   0xc001dec8
c000e232:	50                   	push   eax
c000e233:	e8 c4 fe ff ff       	call   c000e0fc <findDataTable(unsigned char*, char*)>
c000e238:	83 c4 10             	add    esp,0x10
c000e23b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e23f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e244:	75 1a                	jne    c000e260 <scanMADT()+0xec>
c000e246:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e24b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e251:	83 e2 fe             	and    edx,0xfffffffe
c000e254:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e25a:	e9 e1 03 00 00       	jmp    c000e640 <scanMADT()+0x4cc>
c000e25f:	90                   	nop
c000e260:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e268:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e26c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e26f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e273:	0f 87 c7 03 00 00    	ja     c000e640 <scanMADT()+0x4cc>
c000e279:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e281:	0f 87 b9 03 00 00    	ja     c000e640 <scanMADT()+0x4cc>
c000e287:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e28f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e293:	8d 50 01             	lea    edx,[eax+0x1]
c000e296:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e29a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e29e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2a2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e2a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2aa:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2b9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e2bd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2c2:	0f 86 74 03 00 00    	jbe    c000e63c <scanMADT()+0x4c8>
c000e2c8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2cd:	75 5d                	jne    c000e32c <scanMADT()+0x1b8>
c000e2cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e2d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2da:	8a 15 e0 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022ee0
c000e2e0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2ee:	88 82 20 2f 02 c0    	mov    BYTE PTR [edx-0x3ffdd0e0],al
c000e2f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2f8:	8d 42 01             	lea    eax,[edx+0x1]
c000e2fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2ff:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000e304:	8d 48 01             	lea    ecx,[eax+0x1]
c000e307:	88 0d e0 2e 02 c0    	mov    BYTE PTR ds:0xc0022ee0,cl
c000e30d:	25 ff 00 00 00       	and    eax,0xff
c000e312:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e316:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e31a:	88 90 00 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd100],dl
c000e320:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e325:	e9 f6 02 00 00       	jmp    c000e620 <scanMADT()+0x4ac>
c000e32a:	66 90                	xchg   ax,ax
c000e32c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e331:	0f 85 29 01 00 00    	jne    c000e460 <scanMADT()+0x2ec>
c000e337:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e33b:	8d 50 01             	lea    edx,[eax+0x1]
c000e33e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e342:	8a 15 a0 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022da0
c000e348:	81 e2 ff 00 00 00    	and    edx,0xff
c000e34e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e352:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e356:	88 82 c0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd240],al
c000e35c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e360:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e364:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e368:	01 d0                	add    eax,edx
c000e36a:	83 c0 2c             	add    eax,0x2c
c000e36d:	8a 00                	mov    al,BYTE PTR [eax]
c000e36f:	31 d2                	xor    edx,edx
c000e371:	88 c2                	mov    dl,al
c000e373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e377:	8d 48 01             	lea    ecx,[eax+0x1]
c000e37a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e37e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e382:	25 ff 00 00 00       	and    eax,0xff
c000e387:	c1 e0 08             	shl    eax,0x8
c000e38a:	89 d1                	mov    ecx,edx
c000e38c:	09 c1                	or     ecx,eax
c000e38e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e392:	8d 50 02             	lea    edx,[eax+0x2]
c000e395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e399:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e39d:	25 ff 00 00 00       	and    eax,0xff
c000e3a2:	c1 e0 10             	shl    eax,0x10
c000e3a5:	09 c1                	or     ecx,eax
c000e3a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ab:	8d 50 03             	lea    edx,[eax+0x3]
c000e3ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3b6:	25 ff 00 00 00       	and    eax,0xff
c000e3bb:	c1 e0 18             	shl    eax,0x18
c000e3be:	09 c1                	or     ecx,eax
c000e3c0:	89 ca                	mov    edx,ecx
c000e3c2:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e3c7:	25 ff 00 00 00       	and    eax,0xff
c000e3cc:	89 14 85 e0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd220],edx
c000e3d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e0:	01 d0                	add    eax,edx
c000e3e2:	83 c0 2c             	add    eax,0x2c
c000e3e5:	8a 00                	mov    al,BYTE PTR [eax]
c000e3e7:	31 d2                	xor    edx,edx
c000e3e9:	88 c2                	mov    dl,al
c000e3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ef:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3fa:	25 ff 00 00 00       	and    eax,0xff
c000e3ff:	c1 e0 08             	shl    eax,0x8
c000e402:	89 d1                	mov    ecx,edx
c000e404:	09 c1                	or     ecx,eax
c000e406:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e40a:	8d 50 02             	lea    edx,[eax+0x2]
c000e40d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e411:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e415:	25 ff 00 00 00       	and    eax,0xff
c000e41a:	c1 e0 10             	shl    eax,0x10
c000e41d:	09 c1                	or     ecx,eax
c000e41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e423:	8d 50 03             	lea    edx,[eax+0x3]
c000e426:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e42a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e42e:	25 ff 00 00 00       	and    eax,0xff
c000e433:	c1 e0 18             	shl    eax,0x18
c000e436:	09 c1                	or     ecx,eax
c000e438:	89 ca                	mov    edx,ecx
c000e43a:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e43f:	25 ff 00 00 00       	and    eax,0xff
c000e444:	89 14 85 60 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1a0],edx
c000e44b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e450:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e455:	40                   	inc    eax
c000e456:	a2 a0 2d 02 c0       	mov    ds:0xc0022da0,al
c000e45b:	e9 c0 01 00 00       	jmp    c000e620 <scanMADT()+0x4ac>
c000e460:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e465:	0f 85 fd 00 00 00    	jne    c000e568 <scanMADT()+0x3f4>
c000e46b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46f:	8d 50 01             	lea    edx,[eax+0x1]
c000e472:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e476:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e47a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e47e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e486:	8d 50 01             	lea    edx,[eax+0x1]
c000e489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e48d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e491:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e495:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e499:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e49d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a1:	01 d0                	add    eax,edx
c000e4a3:	83 c0 2c             	add    eax,0x2c
c000e4a6:	8a 00                	mov    al,BYTE PTR [eax]
c000e4a8:	31 d2                	xor    edx,edx
c000e4aa:	88 c2                	mov    dl,al
c000e4ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4bb:	25 ff 00 00 00       	and    eax,0xff
c000e4c0:	c1 e0 08             	shl    eax,0x8
c000e4c3:	89 d1                	mov    ecx,edx
c000e4c5:	09 c1                	or     ecx,eax
c000e4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cb:	8d 50 02             	lea    edx,[eax+0x2]
c000e4ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4d6:	25 ff 00 00 00       	and    eax,0xff
c000e4db:	c1 e0 10             	shl    eax,0x10
c000e4de:	09 c1                	or     ecx,eax
c000e4e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e4:	8d 50 03             	lea    edx,[eax+0x3]
c000e4e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4ef:	25 ff 00 00 00       	and    eax,0xff
c000e4f4:	c1 e0 18             	shl    eax,0x18
c000e4f7:	09 c8                	or     eax,ecx
c000e4f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4fd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e502:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50a:	01 d0                	add    eax,edx
c000e50c:	83 c0 2c             	add    eax,0x2c
c000e50f:	8a 00                	mov    al,BYTE PTR [eax]
c000e511:	25 ff 00 00 00       	and    eax,0xff
c000e516:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e51a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e51d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e521:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e525:	81 e2 ff 00 00 00    	and    edx,0xff
c000e52b:	c1 e2 08             	shl    edx,0x8
c000e52e:	09 d0                	or     eax,edx
c000e530:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e535:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e53a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e53e:	25 ff 00 00 00       	and    eax,0xff
c000e543:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e547:	88 90 00 f2 01 c0    	mov    BYTE PTR [eax-0x3ffe0e00],dl
c000e54d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e551:	31 d2                	xor    edx,edx
c000e553:	88 c2                	mov    dl,al
c000e555:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e55a:	66 89 84 12 80 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd280],ax
c000e562:	e9 b9 00 00 00       	jmp    c000e620 <scanMADT()+0x4ac>
c000e567:	90                   	nop
c000e568:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e56d:	0f 85 a1 00 00 00    	jne    c000e614 <scanMADT()+0x4a0>
c000e573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e577:	8d 50 01             	lea    edx,[eax+0x1]
c000e57a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e57e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e582:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e586:	25 ff 00 00 00       	and    eax,0xff
c000e58b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e58f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e593:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e597:	01 d0                	add    eax,edx
c000e599:	83 c0 2c             	add    eax,0x2c
c000e59c:	8a 00                	mov    al,BYTE PTR [eax]
c000e59e:	31 d2                	xor    edx,edx
c000e5a0:	88 c2                	mov    dl,al
c000e5a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a6:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5b1:	25 ff 00 00 00       	and    eax,0xff
c000e5b6:	c1 e0 08             	shl    eax,0x8
c000e5b9:	09 d0                	or     eax,edx
c000e5bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5bf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5d7:	25 ff 00 00 00       	and    eax,0xff
c000e5dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e4:	c1 e0 08             	shl    eax,0x8
c000e5e7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5eb:	89 c1                	mov    ecx,eax
c000e5ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f1:	c1 e0 18             	shl    eax,0x18
c000e5f4:	89 c3                	mov    ebx,eax
c000e5f6:	a1 f0 2c 02 c0       	mov    eax,ds:0xc0022cf0
c000e5fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fe:	89 15 f0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cf0,edx
c000e604:	09 d9                	or     ecx,ebx
c000e606:	89 ca                	mov    edx,ecx
c000e608:	89 14 85 00 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd300],edx
c000e60f:	eb 0f                	jmp    c000e620 <scanMADT()+0x4ac>
c000e611:	8d 76 00             	lea    esi,[esi+0x0]
c000e614:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e619:	75 05                	jne    c000e620 <scanMADT()+0x4ac>
c000e61b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e620:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e624:	31 d2                	xor    edx,edx
c000e626:	88 c2                	mov    dl,al
c000e628:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e62c:	01 d0                	add    eax,edx
c000e62e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e632:	e9 31 fc ff ff       	jmp    c000e268 <scanMADT()+0xf4>
c000e637:	90                   	nop
c000e638:	90                   	nop
c000e639:	eb 05                	jmp    c000e640 <scanMADT()+0x4cc>
c000e63b:	90                   	nop
c000e63c:	90                   	nop
c000e63d:	8d 76 00             	lea    esi,[esi+0x0]
c000e640:	83 c4 38             	add    esp,0x38
c000e643:	5b                   	pop    ebx
c000e644:	c3                   	ret    
c000e645:	90                   	nop
c000e646:	66 90                	xchg   ax,ax

c000e648 <ACPI::ACPI()>:
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64f:	83 ec 08             	sub    esp,0x8
c000e652:	68 cd de 01 c0       	push   0xc001decd
c000e657:	50                   	push   eax
c000e658:	e8 83 d4 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000e65d:	83 c4 10             	add    esp,0x10
c000e660:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c000e665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e669:	89 10                	mov    DWORD PTR [eax],edx
c000e66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e688:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e692:	e8 dd fa ff ff       	call   c000e174 <scanMADT()>
c000e697:	90                   	nop
c000e698:	83 c4 0c             	add    esp,0xc
c000e69b:	c3                   	ret    

c000e69c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e69c:	83 ec 2c             	sub    esp,0x2c
c000e69f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e6ab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e6af:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e6b4:	88 d0                	mov    al,dl
c000e6b6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e6bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6c7:	90                   	nop
c000e6c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6cc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6d6:	0f 8d 9c 00 00 00    	jge    c000e778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6e4:	83 c2 2a             	add    edx,0x2a
c000e6e7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6eb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6f0:	75 7a                	jne    c000e76c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6fa:	83 c2 2a             	add    edx,0x2a
c000e6fd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e701:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e705:	75 65                	jne    c000e76c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e707:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e70c:	74 3a                	je     c000e748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e70e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e712:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e716:	83 c2 2a             	add    edx,0x2a
c000e719:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e71d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e724:	39 c2                	cmp    edx,eax
c000e726:	74 10                	je     c000e738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e728:	83 ec 0c             	sub    esp,0xc
c000e72b:	68 48 de 01 c0       	push   0xc001de48
c000e730:	e8 4e 1a 00 00       	call   c0010183 <KePanic(char const*)>
c000e735:	83 c4 10             	add    esp,0x10
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	68 d2 de 01 c0       	push   0xc001ded2
c000e740:	e8 3e 1a 00 00       	call   c0010183 <KePanic(char const*)>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e74c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e750:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e754:	83 c2 2a             	add    edx,0x2a
c000e757:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e75b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e75d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e760:	89 01                	mov    DWORD PTR [ecx],eax
c000e762:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e765:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e76a:	66 90                	xchg   ax,ax
c000e76c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e770:	e9 53 ff ff ff       	jmp    c000e6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e775:	8d 76 00             	lea    esi,[esi+0x0]
c000e778:	90                   	nop
c000e779:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e77d:	83 c4 2c             	add    esp,0x2c
c000e780:	c2 04 00             	ret    0x4
c000e783:	90                   	nop

c000e784 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e784:	83 ec 1c             	sub    esp,0x1c
c000e787:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e78b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e78f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e793:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e798:	88 c8                	mov    al,cl
c000e79a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e79e:	88 d0                	mov    al,dl
c000e7a0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7b5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e7b9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7cb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ec:	83 c2 2a             	add    edx,0x2a
c000e7ef:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e801:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e804:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e808:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e810:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e816:	8d 50 01             	lea    edx,[eax+0x1]
c000e819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e81d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e827:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e82d:	3d 00 02 00 00       	cmp    eax,0x200
c000e832:	75 10                	jne    c000e844 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	68 e1 de 01 c0       	push   0xc001dee1
c000e83c:	e8 42 19 00 00       	call   c0010183 <KePanic(char const*)>
c000e841:	83 c4 10             	add    esp,0x10
c000e844:	90                   	nop
c000e845:	83 c4 1c             	add    esp,0x1c
c000e848:	c3                   	ret    
c000e849:	90                   	nop
c000e84a:	66 90                	xchg   ax,ax

c000e84c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e84c:	b8 00 00 00 00       	mov    eax,0x0
c000e851:	c3                   	ret    
c000e852:	66 90                	xchg   ax,ax

c000e854 <ACPI::detectPCI()>:
c000e854:	53                   	push   ebx
c000e855:	83 ec 28             	sub    esp,0x28
c000e858:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e85d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e862:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e867:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e86d:	83 e0 04             	and    eax,0x4
c000e870:	84 c0                	test   al,al
c000e872:	74 2c                	je     c000e8a0 <ACPI::detectPCI()+0x4c>
c000e874:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e879:	83 ec 08             	sub    esp,0x8
c000e87c:	68 fe de 01 c0       	push   0xc001defe
c000e881:	50                   	push   eax
c000e882:	e8 75 f8 ff ff       	call   c000e0fc <findDataTable(unsigned char*, char*)>
c000e887:	83 c4 10             	add    esp,0x10
c000e88a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e88e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e893:	74 0b                	je     c000e8a0 <ACPI::detectPCI()+0x4c>
c000e895:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e89a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e89f:	90                   	nop
c000e8a0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e8a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8ac:	8a 00                	mov    al,BYTE PTR [eax]
c000e8ae:	3c 01                	cmp    al,0x1
c000e8b0:	75 0e                	jne    c000e8c0 <ACPI::detectPCI()+0x6c>
c000e8b2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8b7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8bc:	eb 2a                	jmp    c000e8e8 <ACPI::detectPCI()+0x94>
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8c4:	8a 00                	mov    al,BYTE PTR [eax]
c000e8c6:	3c 02                	cmp    al,0x2
c000e8c8:	75 1e                	jne    c000e8e8 <ACPI::detectPCI()+0x94>
c000e8ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8cf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8d4:	74 12                	je     c000e8e8 <ACPI::detectPCI()+0x94>
c000e8d6:	83 ec 0c             	sub    esp,0xc
c000e8d9:	68 78 de 01 c0       	push   0xc001de78
c000e8de:	e8 a0 18 00 00       	call   c0010183 <KePanic(char const*)>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	66 90                	xchg   ax,ax
c000e8e8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8ec:	83 f0 01             	xor    eax,0x1
c000e8ef:	84 c0                	test   al,al
c000e8f1:	74 41                	je     c000e934 <ACPI::detectPCI()+0xe0>
c000e8f3:	e8 38 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8fc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e901:	75 0d                	jne    c000e910 <ACPI::detectPCI()+0xbc>
c000e903:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e908:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e90d:	eb 25                	jmp    c000e934 <ACPI::detectPCI()+0xe0>
c000e90f:	90                   	nop
c000e910:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e915:	75 1d                	jne    c000e934 <ACPI::detectPCI()+0xe0>
c000e917:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e91c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e921:	74 11                	je     c000e934 <ACPI::detectPCI()+0xe0>
c000e923:	83 ec 0c             	sub    esp,0xc
c000e926:	68 78 de 01 c0       	push   0xc001de78
c000e92b:	e8 53 18 00 00       	call   c0010183 <KePanic(char const*)>
c000e930:	83 c4 10             	add    esp,0x10
c000e933:	90                   	nop
c000e934:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e939:	0f 84 85 00 00 00    	je     c000e9c4 <ACPI::detectPCI()+0x170>
c000e93f:	83 ec 0c             	sub    esp,0xc
c000e942:	68 03 df 01 c0       	push   0xc001df03
c000e947:	e8 bf 11 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000e94c:	83 c4 10             	add    esp,0x10
c000e94f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e957:	83 ec 0c             	sub    esp,0xc
c000e95a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e95e:	e8 56 8e ff ff       	call   c00077b9 <malloc>
c000e963:	83 c4 10             	add    esp,0x10
c000e966:	89 c3                	mov    ebx,eax
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	53                   	push   ebx
c000e96c:	e8 c9 96 00 00       	call   c001803a <PCI::PCI()>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e97c:	83 ec 08             	sub    esp,0x8
c000e97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e983:	50                   	push   eax
c000e984:	e8 bf cf ff ff       	call   c000b948 <Device::addChild(Device*)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e990:	8b 00                	mov    eax,DWORD PTR [eax]
c000e992:	83 c0 08             	add    eax,0x8
c000e995:	8b 00                	mov    eax,DWORD PTR [eax]
c000e997:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e99c:	74 0a                	je     c000e9a8 <ACPI::detectPCI()+0x154>
c000e99e:	ba 01 00 00 00       	mov    edx,0x1
c000e9a3:	eb 0b                	jmp    c000e9b0 <ACPI::detectPCI()+0x15c>
c000e9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a8:	ba 02 00 00 00       	mov    edx,0x2
c000e9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b0:	6a 00                	push   0x0
c000e9b2:	6a 00                	push   0x0
c000e9b4:	52                   	push   edx
c000e9b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9b9:	ff d0                	call   eax
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	e9 91 00 00 00       	jmp    c000ea54 <ACPI::detectPCI()+0x200>
c000e9c3:	90                   	nop
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	68 1b df 01 c0       	push   0xc001df1b
c000e9cc:	e8 3a 11 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9db:	83 ec 0c             	sub    esp,0xc
c000e9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9e2:	e8 d2 8d ff ff       	call   c00077b9 <malloc>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	89 c3                	mov    ebx,eax
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	53                   	push   ebx
c000e9f0:	e8 71 a1 00 00       	call   c0018b66 <IDE::IDE()>
c000e9f5:	83 c4 10             	add    esp,0x10
c000e9f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea00:	83 ec 08             	sub    esp,0x8
c000ea03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea07:	50                   	push   eax
c000ea08:	e8 3b cf ff ff       	call   c000b948 <Device::addChild(Device*)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea14:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea22:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea2f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea3e:	83 c0 08             	add    eax,0x8
c000ea41:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	6a 00                	push   0x0
c000ea49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4d:	ff d0                	call   eax
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	66 90                	xchg   ax,ax
c000ea54:	90                   	nop
c000ea55:	83 c4 28             	add    esp,0x28
c000ea58:	5b                   	pop    ebx
c000ea59:	c3                   	ret    
c000ea5a:	66 90                	xchg   ax,ax

c000ea5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea5c:	83 ec 1c             	sub    esp,0x1c
c000ea5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea6a:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000ea70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea74:	25 ff 00 00 00       	and    eax,0xff
c000ea79:	83 ec 08             	sub    esp,0x8
c000ea7c:	50                   	push   eax
c000ea7d:	52                   	push   edx
c000ea7e:	e8 23 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea83:	83 c4 10             	add    esp,0x10
c000ea86:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea8a:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000ea90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea94:	25 ff 00 00 00       	and    eax,0xff
c000ea99:	83 ec 04             	sub    esp,0x4
c000ea9c:	6a 01                	push   0x1
c000ea9e:	50                   	push   eax
c000ea9f:	52                   	push   edx
c000eaa0:	e8 17 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	90                   	nop
c000eaa9:	83 c4 1c             	add    esp,0x1c
c000eaac:	c3                   	ret    
c000eaad:	90                   	nop
c000eaae:	66 90                	xchg   ax,ax

c000eab0 <ACPI::sleep()>:
c000eab0:	83 ec 0c             	sub    esp,0xc
c000eab3:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000eab8:	85 c0                	test   eax,eax
c000eaba:	74 08                	je     c000eac4 <ACPI::sleep()+0x14>
c000eabc:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000eac1:	ff d0                	call   eax
c000eac3:	90                   	nop
c000eac4:	90                   	nop
c000eac5:	83 c4 0c             	add    esp,0xc
c000eac8:	c3                   	ret    
c000eac9:	90                   	nop
c000eaca:	66 90                	xchg   ax,ax

c000eacc <ACPI::open(int, int, void*)>:
c000eacc:	57                   	push   edi
c000eacd:	56                   	push   esi
c000eace:	53                   	push   ebx
c000eacf:	81 ec 70 01 00 00    	sub    esp,0x170
c000ead5:	83 ec 0c             	sub    esp,0xc
c000ead8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eadf:	e8 70 fd ff ff       	call   c000e854 <ACPI::detectPCI()>
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	83 ec 0c             	sub    esp,0xc
c000eaea:	68 a0 de 01 c0       	push   0xc001dea0
c000eaef:	e8 17 10 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000eaf4:	83 c4 10             	add    esp,0x10
c000eaf7:	83 ec 0c             	sub    esp,0xc
c000eafa:	68 30 df 01 c0       	push   0xc001df30
c000eaff:	e8 27 34 00 00       	call   c0011f2b <Thr::loadKernelSymbolTable(char const*)>
c000eb04:	83 c4 10             	add    esp,0x10
c000eb07:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb0f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb24:	e8 90 8c ff ff       	call   c00077b9 <malloc>
c000eb29:	83 c4 10             	add    esp,0x10
c000eb2c:	89 c3                	mov    ebx,eax
c000eb2e:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000eb33:	83 ec 04             	sub    esp,0x4
c000eb36:	50                   	push   eax
c000eb37:	68 4e df 01 c0       	push   0xc001df4e
c000eb3c:	53                   	push   ebx
c000eb3d:	e8 3c bf ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000eb42:	83 c4 10             	add    esp,0x10
c000eb45:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb4c:	83 ec 08             	sub    esp,0x8
c000eb4f:	6a 01                	push   0x1
c000eb51:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb58:	e8 e1 bf ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb67:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb6f:	75 17                	jne    c000eb88 <ACPI::open(int, int, void*)+0xbc>
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb7b:	e8 1c c0 ff ff       	call   c000ab9c <File::close()>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	eb 0b                	jmp    c000eb90 <ACPI::open(int, int, void*)+0xc4>
c000eb85:	8d 76 00             	lea    esi,[esi+0x0]
c000eb88:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb90:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb98:	74 1e                	je     c000ebb8 <ACPI::open(int, int, void*)+0xec>
c000eb9a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eba1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eba3:	83 c0 08             	add    eax,0x8
c000eba6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebb2:	ff d0                	call   eax
c000ebb4:	83 c4 10             	add    esp,0x10
c000ebb7:	90                   	nop
c000ebb8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ebbf:	83 f0 01             	xor    eax,0x1
c000ebc2:	84 c0                	test   al,al
c000ebc4:	74 42                	je     c000ec08 <ACPI::open(int, int, void*)+0x13c>
c000ebc6:	83 ec 0c             	sub    esp,0xc
c000ebc9:	68 6c df 01 c0       	push   0xc001df6c
c000ebce:	e8 38 0f 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	83 ec 04             	sub    esp,0x4
c000ebd9:	6a 0c                	push   0xc
c000ebdb:	68 87 df 01 c0       	push   0xc001df87
c000ebe0:	68 98 df 01 c0       	push   0xc001df98
c000ebe5:	e8 6c 29 00 00       	call   c0011556 <Reg::readIntWithDefault(char*, char*, int)>
c000ebea:	83 c4 10             	add    esp,0x10
c000ebed:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebf4:	83 ec 0c             	sub    esp,0xc
c000ebf7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebfe:	e8 bc a8 ff ff       	call   c00094bf <Virt::setupPageSwapping(int)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	66 90                	xchg   ax,ax
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	68 17 d0 01 c0       	push   0xc001d017
c000ec10:	e8 f6 0e 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec1f:	83 ec 08             	sub    esp,0x8
c000ec22:	6a 12                	push   0x12
c000ec24:	50                   	push   eax
c000ec25:	e8 36 d0 ff ff       	call   c000bc60 <getDevicesOfType(DeviceType)>
c000ec2a:	83 c4 0c             	add    esp,0xc
c000ec2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec3a:	50                   	push   eax
c000ec3b:	e8 2c d8 00 00       	call   c001c46c <LinkedList<Device>::isEmpty()>
c000ec40:	83 c4 10             	add    esp,0x10
c000ec43:	83 f0 01             	xor    eax,0x1
c000ec46:	84 c0                	test   al,al
c000ec48:	0f 84 46 01 00 00    	je     c000ed94 <ACPI::open(int, int, void*)+0x2c8>
c000ec4e:	83 ec 0c             	sub    esp,0xc
c000ec51:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec58:	50                   	push   eax
c000ec59:	e8 2a d8 00 00       	call   c001c488 <LinkedList<Device>::getFirstElement()>
c000ec5e:	83 c4 10             	add    esp,0x10
c000ec61:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec68:	83 ec 0c             	sub    esp,0xc
c000ec6b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec72:	50                   	push   eax
c000ec73:	e8 18 d8 00 00       	call   c001c490 <LinkedList<Device>::removeFirst()>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec82:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec89:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec94:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec9a:	ba 09 00 00 00       	mov    edx,0x9
c000ec9f:	fc                   	cld    
c000eca0:	89 c7                	mov    edi,eax
c000eca2:	89 de                	mov    esi,ebx
c000eca4:	89 d1                	mov    ecx,edx
c000eca6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eca8:	83 ec 08             	sub    esp,0x8
c000ecab:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ecaf:	50                   	push   eax
c000ecb0:	83 ec 24             	sub    esp,0x24
c000ecb3:	89 e0                	mov    eax,esp
c000ecb5:	89 c3                	mov    ebx,eax
c000ecb7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ecbb:	ba 09 00 00 00       	mov    edx,0x9
c000ecc0:	89 df                	mov    edi,ebx
c000ecc2:	89 c6                	mov    esi,eax
c000ecc4:	89 d1                	mov    ecx,edx
c000ecc6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecc8:	e8 4f 98 00 00       	call   c001851c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eccd:	83 c4 30             	add    esp,0x30
c000ecd0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecd7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecdf:	0f 84 4b ff ff ff    	je     c000ec30 <ACPI::open(int, int, void*)+0x164>
c000ece5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecf0:	83 ec 0c             	sub    esp,0xc
c000ecf3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecfa:	e8 ba 8a ff ff       	call   c00077b9 <malloc>
c000ecff:	83 c4 10             	add    esp,0x10
c000ed02:	89 c3                	mov    ebx,eax
c000ed04:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000ed09:	83 ec 04             	sub    esp,0x4
c000ed0c:	50                   	push   eax
c000ed0d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed14:	53                   	push   ebx
c000ed15:	e8 64 bd ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000ed1a:	83 c4 10             	add    esp,0x10
c000ed1d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed24:	83 ec 0c             	sub    esp,0xc
c000ed27:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed2e:	e8 79 c0 ff ff       	call   c000adac <File::exists()>
c000ed33:	83 c4 10             	add    esp,0x10
c000ed36:	84 c0                	test   al,al
c000ed38:	74 2a                	je     c000ed64 <ACPI::open(int, int, void*)+0x298>
c000ed3a:	83 ec 08             	sub    esp,0x8
c000ed3d:	6a 01                	push   0x1
c000ed3f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed46:	e8 57 3c 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000ed4b:	83 c4 10             	add    esp,0x10
c000ed4e:	83 ec 08             	sub    esp,0x8
c000ed51:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed58:	50                   	push   eax
c000ed59:	e8 75 3e 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000ed5e:	83 c4 10             	add    esp,0x10
c000ed61:	8d 76 00             	lea    esi,[esi+0x0]
c000ed64:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed6c:	0f 84 be fe ff ff    	je     c000ec30 <ACPI::open(int, int, void*)+0x164>
c000ed72:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed79:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed7b:	83 c0 08             	add    eax,0x8
c000ed7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed80:	83 ec 0c             	sub    esp,0xc
c000ed83:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed8a:	ff d0                	call   eax
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	e9 9c fe ff ff       	jmp    c000ec30 <ACPI::open(int, int, void*)+0x164>
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed9e:	50                   	push   eax
c000ed9f:	e8 c4 d6 00 00       	call   c001c468 <LinkedList<Device>::~LinkedList()>
c000eda4:	83 c4 10             	add    esp,0x10
c000eda7:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000edad:	83 ec 08             	sub    esp,0x8
c000edb0:	6a 01                	push   0x1
c000edb2:	68 9f df 01 c0       	push   0xc001df9f
c000edb7:	e8 e6 3b 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000edbc:	83 c4 10             	add    esp,0x10
c000edbf:	83 ec 08             	sub    esp,0x8
c000edc2:	53                   	push   ebx
c000edc3:	50                   	push   eax
c000edc4:	e8 0a 3e 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000edc9:	83 c4 10             	add    esp,0x10
c000edcc:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000edd1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edd7:	83 e0 04             	and    eax,0x4
c000edda:	84 c0                	test   al,al
c000eddc:	0f 84 16 01 00 00    	je     c000eef8 <ACPI::open(int, int, void*)+0x42c>
c000ede2:	83 ec 0c             	sub    esp,0xc
c000ede5:	68 bc df 01 c0       	push   0xc001dfbc
c000edea:	e8 1c 0d 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000edef:	83 c4 10             	add    esp,0x10
c000edf2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edfd:	83 ec 0c             	sub    esp,0xc
c000ee00:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee07:	e8 ad 89 ff ff       	call   c00077b9 <malloc>
c000ee0c:	83 c4 10             	add    esp,0x10
c000ee0f:	89 c3                	mov    ebx,eax
c000ee11:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000ee16:	83 ec 04             	sub    esp,0x4
c000ee19:	50                   	push   eax
c000ee1a:	68 d9 df 01 c0       	push   0xc001dfd9
c000ee1f:	53                   	push   ebx
c000ee20:	e8 59 bc ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000ee25:	83 c4 10             	add    esp,0x10
c000ee28:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee2f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee37:	74 1b                	je     c000ee54 <ACPI::open(int, int, void*)+0x388>
c000ee39:	83 ec 0c             	sub    esp,0xc
c000ee3c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee43:	e8 64 bf ff ff       	call   c000adac <File::exists()>
c000ee48:	83 c4 10             	add    esp,0x10
c000ee4b:	84 c0                	test   al,al
c000ee4d:	74 05                	je     c000ee54 <ACPI::open(int, int, void*)+0x388>
c000ee4f:	b0 01                	mov    al,0x1
c000ee51:	eb 05                	jmp    c000ee58 <ACPI::open(int, int, void*)+0x38c>
c000ee53:	90                   	nop
c000ee54:	b0 00                	mov    al,0x0
c000ee56:	66 90                	xchg   ax,ax
c000ee58:	84 c0                	test   al,al
c000ee5a:	74 28                	je     c000ee84 <ACPI::open(int, int, void*)+0x3b8>
c000ee5c:	83 ec 08             	sub    esp,0x8
c000ee5f:	6a 01                	push   0x1
c000ee61:	68 d9 df 01 c0       	push   0xc001dfd9
c000ee66:	e8 37 3b 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c000ee6b:	83 c4 10             	add    esp,0x10
c000ee6e:	83 ec 08             	sub    esp,0x8
c000ee71:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee78:	50                   	push   eax
c000ee79:	e8 55 3d 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	8d 76 00             	lea    esi,[esi+0x0]
c000ee84:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee8c:	74 2a                	je     c000eeb8 <ACPI::open(int, int, void*)+0x3ec>
c000ee8e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee96:	74 20                	je     c000eeb8 <ACPI::open(int, int, void*)+0x3ec>
c000ee98:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea1:	83 c0 08             	add    eax,0x8
c000eea4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea6:	83 ec 0c             	sub    esp,0xc
c000eea9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eeb0:	ff d0                	call   eax
c000eeb2:	83 c4 10             	add    esp,0x10
c000eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb8:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000eebd:	83 ec 08             	sub    esp,0x8
c000eec0:	68 f6 df 01 c0       	push   0xc001dff6
c000eec5:	50                   	push   eax
c000eec6:	e8 31 f2 ff ff       	call   c000e0fc <findDataTable(unsigned char*, char*)>
c000eecb:	83 c4 10             	add    esp,0x10
c000eece:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eed5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eedd:	74 19                	je     c000eef8 <ACPI::open(int, int, void*)+0x42c>
c000eedf:	83 ec 08             	sub    esp,0x8
c000eee2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eee9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eef0:	e8 67 fb ff ff       	call   c000ea5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	b8 00 00 00 00       	mov    eax,0x0
c000eefd:	81 c4 70 01 00 00    	add    esp,0x170
c000ef03:	5b                   	pop    ebx
c000ef04:	5e                   	pop    esi
c000ef05:	5f                   	pop    edi
c000ef06:	c3                   	ret    
c000ef07:	90                   	nop

c000ef08 <CPU::close(int, int, void*)>:
c000ef08:	31 c0                	xor    eax,eax
c000ef0a:	c3                   	ret    
c000ef0b:	90                   	nop

c000ef0c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef0c:	60                   	pusha  
c000ef0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef19:	9c                   	pushf  
c000ef1a:	fa                   	cli    
c000ef1b:	0f 09                	wbinvd 
c000ef1d:	0f 30                	wrmsr  
c000ef1f:	9d                   	popf   
c000ef20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef24:	89 02                	mov    DWORD PTR [edx],eax
c000ef26:	61                   	popa   
c000ef27:	c3                   	ret    

c000ef28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef28:	60                   	pusha  
c000ef29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef2d:	9c                   	pushf  
c000ef2e:	fa                   	cli    
c000ef2f:	0f 09                	wbinvd 
c000ef31:	31 c0                	xor    eax,eax
c000ef33:	31 d2                	xor    edx,edx
c000ef35:	0f 32                	rdmsr  
c000ef37:	9d                   	popf   
c000ef38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef3c:	89 02                	mov    DWORD PTR [edx],eax
c000ef3e:	61                   	popa   
c000ef3f:	c3                   	ret    

c000ef40 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef40:	56                   	push   esi
c000ef41:	53                   	push   ebx
c000ef42:	83 ec 10             	sub    esp,0x10
c000ef45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef49:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef4e:	75 5d                	jne    c000efad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef50:	83 f8 08             	cmp    eax,0x8
c000ef53:	75 09                	jne    c000ef5e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef55:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef5a:	7e 13                	jle    c000ef6f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef5c:	eb 30                	jmp    c000ef8e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef5e:	83 f8 06             	cmp    eax,0x6
c000ef61:	7c 4a                	jl     c000efad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef63:	83 f8 07             	cmp    eax,0x7
c000ef66:	7e 07                	jle    c000ef6f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef68:	83 f8 09             	cmp    eax,0x9
c000ef6b:	74 21                	je     c000ef8e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef6d:	eb 3e                	jmp    c000efad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef6f:	89 e6                	mov    esi,esp
c000ef71:	8b 1d fc 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204fc
c000ef77:	56                   	push   esi
c000ef78:	c1 eb 15             	shr    ebx,0x15
c000ef7b:	68 82 00 00 c0       	push   0xc0000082
c000ef80:	83 e3 7e             	and    ebx,0x7e
c000ef83:	e8 a0 ff ff ff       	call   c000ef28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef88:	56                   	push   esi
c000ef89:	6a 00                	push   0x0
c000ef8b:	53                   	push   ebx
c000ef8c:	eb 12                	jmp    c000efa0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef8e:	89 e3                	mov    ebx,esp
c000ef90:	53                   	push   ebx
c000ef91:	68 82 00 00 c0       	push   0xc0000082
c000ef96:	e8 8d ff ff ff       	call   c000ef28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef9b:	53                   	push   ebx
c000ef9c:	6a 00                	push   0x0
c000ef9e:	6a 00                	push   0x0
c000efa0:	68 82 00 00 c0       	push   0xc0000082
c000efa5:	e8 62 ff ff ff       	call   c000ef0c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000efaa:	83 c4 18             	add    esp,0x18
c000efad:	83 c4 10             	add    esp,0x10
c000efb0:	5b                   	pop    ebx
c000efb1:	5e                   	pop    esi
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000efb4:	55                   	push   ebp
c000efb5:	57                   	push   edi
c000efb6:	56                   	push   esi
c000efb7:	53                   	push   ebx
c000efb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efbc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000efc0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efc4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efc8:	39 05 10 f2 01 c0    	cmp    DWORD PTR ds:0xc001f210,eax
c000efce:	75 23                	jne    c000eff3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efd0:	a1 4c 2f 02 c0       	mov    eax,ds:0xc0022f4c
c000efd5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efd9:	89 06                	mov    DWORD PTR [esi],eax
c000efdb:	a1 48 2f 02 c0       	mov    eax,ds:0xc0022f48
c000efe0:	89 07                	mov    DWORD PTR [edi],eax
c000efe2:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c000efe7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efea:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c000efef:	89 02                	mov    DWORD PTR [edx],eax
c000eff1:	eb 3f                	jmp    c000f032 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000eff3:	31 c9                	xor    ecx,ecx
c000eff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eff9:	0f a2                	cpuid  
c000effb:	89 06                	mov    DWORD PTR [esi],eax
c000effd:	89 1f                	mov    DWORD PTR [edi],ebx
c000efff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f003:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f006:	89 10                	mov    DWORD PTR [eax],edx
c000f008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f00c:	a3 10 f2 01 c0       	mov    ds:0xc001f210,eax
c000f011:	8b 06                	mov    eax,DWORD PTR [esi]
c000f013:	a3 4c 2f 02 c0       	mov    ds:0xc0022f4c,eax
c000f018:	8b 07                	mov    eax,DWORD PTR [edi]
c000f01a:	a3 48 2f 02 c0       	mov    ds:0xc0022f48,eax
c000f01f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f022:	a3 44 2f 02 c0       	mov    ds:0xc0022f44,eax
c000f027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f02b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02d:	a3 40 2f 02 c0       	mov    ds:0xc0022f40,eax
c000f032:	5b                   	pop    ebx
c000f033:	5e                   	pop    esi
c000f034:	5f                   	pop    edi
c000f035:	5d                   	pop    ebp
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <CPU::cpuidCheckEDX(unsigned int)>:
c000f038:	83 ec 10             	sub    esp,0x10
c000f03b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f03f:	50                   	push   eax
c000f040:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f044:	50                   	push   eax
c000f045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f049:	50                   	push   eax
c000f04a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04e:	50                   	push   eax
c000f04f:	6a 01                	push   0x1
c000f051:	e8 5e ff ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f056:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f05a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f05e:	0f 95 c0             	setne  al
c000f061:	83 c4 24             	add    esp,0x24
c000f064:	c3                   	ret    
c000f065:	90                   	nop

c000f066 <CPU::cpuidCheckECX(unsigned int)>:
c000f066:	83 ec 10             	sub    esp,0x10
c000f069:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06d:	50                   	push   eax
c000f06e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f072:	50                   	push   eax
c000f073:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f077:	50                   	push   eax
c000f078:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07c:	50                   	push   eax
c000f07d:	6a 01                	push   0x1
c000f07f:	e8 30 ff ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f084:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f088:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f08c:	0f 95 c0             	setne  al
c000f08f:	83 c4 24             	add    esp,0x24
c000f092:	c3                   	ret    
c000f093:	90                   	nop

c000f094 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f094:	83 ec 10             	sub    esp,0x10
c000f097:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f09b:	50                   	push   eax
c000f09c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a0:	50                   	push   eax
c000f0a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a5:	50                   	push   eax
c000f0a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0aa:	50                   	push   eax
c000f0ab:	6a 07                	push   0x7
c000f0ad:	e8 02 ff ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f0ba:	0f 95 c0             	setne  al
c000f0bd:	83 c4 24             	add    esp,0x24
c000f0c0:	c3                   	ret    
c000f0c1:	90                   	nop

c000f0c2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0c2:	83 ec 10             	sub    esp,0x10
c000f0c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c9:	50                   	push   eax
c000f0ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ce:	50                   	push   eax
c000f0cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d3:	50                   	push   eax
c000f0d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d8:	50                   	push   eax
c000f0d9:	6a 07                	push   0x7
c000f0db:	e8 d4 fe ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0e4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0e8:	0f 95 c0             	setne  al
c000f0eb:	83 c4 24             	add    esp,0x24
c000f0ee:	c3                   	ret    
c000f0ef:	90                   	nop

c000f0f0 <CPU::CPU()>:
c000f0f0:	83 ec 0c             	sub    esp,0xc
c000f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f7:	83 ec 08             	sub    esp,0x8
c000f0fa:	68 19 e1 01 c0       	push   0xc001e119
c000f0ff:	50                   	push   eax
c000f100:	e8 db c9 ff ff       	call   c000bae0 <Device::Device(char const*)>
c000f105:	83 c4 10             	add    esp,0x10
c000f108:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c000f10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f111:	89 10                	mov    DWORD PTR [eax],edx
c000f113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f117:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f125:	05 78 01 00 00       	add    eax,0x178
c000f12a:	83 ec 0c             	sub    esp,0xc
c000f12d:	50                   	push   eax
c000f12e:	e8 47 7f ff ff       	call   c000707a <GDT::GDT()>
c000f133:	83 c4 10             	add    esp,0x10
c000f136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13a:	05 7c 09 00 00       	add    eax,0x97c
c000f13f:	83 ec 0c             	sub    esp,0xc
c000f142:	50                   	push   eax
c000f143:	e8 6c 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f148:	83 c4 10             	add    esp,0x10
c000f14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f14f:	05 7c 11 00 00       	add    eax,0x117c
c000f154:	83 ec 0c             	sub    esp,0xc
c000f157:	50                   	push   eax
c000f158:	e8 9b 9a ff ff       	call   c0008bf8 <TSS::TSS()>
c000f15d:	83 c4 10             	add    esp,0x10
c000f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f164:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f16f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f179:	90                   	nop
c000f17a:	83 c4 0c             	add    esp,0xc
c000f17d:	c3                   	ret    

c000f17e <CPU::displayFeatures()>:
c000f17e:	c3                   	ret    
c000f17f:	90                   	nop

c000f180 <CPU::detectFeatures()>:
c000f180:	55                   	push   ebp
c000f181:	57                   	push   edi
c000f182:	56                   	push   esi
c000f183:	53                   	push   ebx
c000f184:	83 ec 30             	sub    esp,0x30
c000f187:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f18b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f195:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f19c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f1a2:	6a 0d                	push   0xd
c000f1a4:	6a 00                	push   0x0
c000f1a6:	55                   	push   ebp
c000f1a7:	e8 24 13 ff ff       	call   c00004d0 <memset>
c000f1ac:	83 c4 10             	add    esp,0x10
c000f1af:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f1b4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f1bb:	0f 84 d5 05 00 00    	je     c000f796 <CPU::detectFeatures()+0x616>
c000f1c1:	83 ec 0c             	sub    esp,0xc
c000f1c4:	89 ef                	mov    edi,ebp
c000f1c6:	6a 10                	push   0x10
c000f1c8:	e8 6b fe ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f1cd:	83 e0 01             	and    eax,0x1
c000f1d0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1d3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1d9:	83 e0 fd             	and    eax,0xfffffffd
c000f1dc:	09 d0                	or     eax,edx
c000f1de:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1e4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1eb:	e8 48 fe ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f0:	83 e0 01             	and    eax,0x1
c000f1f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f200:	83 e0 fb             	and    eax,0xfffffffb
c000f203:	09 d0                	or     eax,edx
c000f205:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f212:	e8 21 fe ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f217:	83 e0 01             	and    eax,0x1
c000f21a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f221:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f227:	83 e0 f7             	and    eax,0xfffffff7
c000f22a:	09 d0                	or     eax,edx
c000f22c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f232:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f239:	e8 fa fd ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f23e:	83 e0 01             	and    eax,0x1
c000f241:	c1 e0 04             	shl    eax,0x4
c000f244:	88 c2                	mov    dl,al
c000f246:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f24c:	83 e0 ef             	and    eax,0xffffffef
c000f24f:	09 d0                	or     eax,edx
c000f251:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f257:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f25e:	e8 d5 fd ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f263:	83 e0 01             	and    eax,0x1
c000f266:	c1 e0 05             	shl    eax,0x5
c000f269:	88 c2                	mov    dl,al
c000f26b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f271:	83 e0 df             	and    eax,0xffffffdf
c000f274:	09 d0                	or     eax,edx
c000f276:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f27c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f283:	e8 b0 fd ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f288:	83 e0 01             	and    eax,0x1
c000f28b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f28e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f294:	83 e0 fd             	and    eax,0xfffffffd
c000f297:	09 d0                	or     eax,edx
c000f299:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f29f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f2a6:	e8 8d fd ff ff       	call   c000f038 <CPU::cpuidCheckEDX(unsigned int)>
c000f2ab:	83 e0 01             	and    eax,0x1
c000f2ae:	c1 e0 06             	shl    eax,0x6
c000f2b1:	88 c2                	mov    dl,al
c000f2b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f2b9:	83 e0 bf             	and    eax,0xffffffbf
c000f2bc:	09 d0                	or     eax,edx
c000f2be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2c4:	58                   	pop    eax
c000f2c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2c9:	50                   	push   eax
c000f2ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2ce:	50                   	push   eax
c000f2cf:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2d3:	56                   	push   esi
c000f2d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2d8:	50                   	push   eax
c000f2d9:	6a 00                	push   0x0
c000f2db:	e8 d4 fc ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2e0:	b8 04 00 00 00       	mov    eax,0x4
c000f2e5:	89 c1                	mov    ecx,eax
c000f2e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2ef:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2f3:	89 c1                	mov    ecx,eax
c000f2f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2f7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2fd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f301:	89 c1                	mov    ecx,eax
c000f303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f305:	83 c4 18             	add    esp,0x18
c000f308:	68 28 e0 01 c0       	push   0xc001e028
c000f30d:	55                   	push   ebp
c000f30e:	e8 cd 13 ff ff       	call   c00006e0 <strcmp>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	85 c0                	test   eax,eax
c000f318:	75 0f                	jne    c000f329 <CPU::detectFeatures()+0x1a9>
c000f31a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f324:	e9 22 02 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f329:	50                   	push   eax
c000f32a:	50                   	push   eax
c000f32b:	68 35 e0 01 c0       	push   0xc001e035
c000f330:	55                   	push   ebp
c000f331:	e8 aa 13 ff ff       	call   c00006e0 <strcmp>
c000f336:	83 c4 10             	add    esp,0x10
c000f339:	85 c0                	test   eax,eax
c000f33b:	74 dd                	je     c000f31a <CPU::detectFeatures()+0x19a>
c000f33d:	50                   	push   eax
c000f33e:	50                   	push   eax
c000f33f:	68 42 e0 01 c0       	push   0xc001e042
c000f344:	55                   	push   ebp
c000f345:	e8 96 13 ff ff       	call   c00006e0 <strcmp>
c000f34a:	83 c4 10             	add    esp,0x10
c000f34d:	85 c0                	test   eax,eax
c000f34f:	74 2a                	je     c000f37b <CPU::detectFeatures()+0x1fb>
c000f351:	50                   	push   eax
c000f352:	50                   	push   eax
c000f353:	68 4f e0 01 c0       	push   0xc001e04f
c000f358:	55                   	push   ebp
c000f359:	e8 82 13 ff ff       	call   c00006e0 <strcmp>
c000f35e:	83 c4 10             	add    esp,0x10
c000f361:	85 c0                	test   eax,eax
c000f363:	74 16                	je     c000f37b <CPU::detectFeatures()+0x1fb>
c000f365:	50                   	push   eax
c000f366:	50                   	push   eax
c000f367:	68 5c e0 01 c0       	push   0xc001e05c
c000f36c:	55                   	push   ebp
c000f36d:	e8 6e 13 ff ff       	call   c00006e0 <strcmp>
c000f372:	83 c4 10             	add    esp,0x10
c000f375:	85 c0                	test   eax,eax
c000f377:	74 48                	je     c000f3c1 <CPU::detectFeatures()+0x241>
c000f379:	eb 0f                	jmp    c000f38a <CPU::detectFeatures()+0x20a>
c000f37b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f385:	e9 c1 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f38a:	50                   	push   eax
c000f38b:	50                   	push   eax
c000f38c:	68 69 e0 01 c0       	push   0xc001e069
c000f391:	55                   	push   ebp
c000f392:	e8 49 13 ff ff       	call   c00006e0 <strcmp>
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	85 c0                	test   eax,eax
c000f39c:	74 23                	je     c000f3c1 <CPU::detectFeatures()+0x241>
c000f39e:	57                   	push   edi
c000f39f:	57                   	push   edi
c000f3a0:	68 76 e0 01 c0       	push   0xc001e076
c000f3a5:	55                   	push   ebp
c000f3a6:	e8 35 13 ff ff       	call   c00006e0 <strcmp>
c000f3ab:	83 c4 10             	add    esp,0x10
c000f3ae:	85 c0                	test   eax,eax
c000f3b0:	75 1e                	jne    c000f3d0 <CPU::detectFeatures()+0x250>
c000f3b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f3bc:	e9 8a 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f3c1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3cb:	e9 7b 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f3d0:	56                   	push   esi
c000f3d1:	56                   	push   esi
c000f3d2:	68 83 e0 01 c0       	push   0xc001e083
c000f3d7:	55                   	push   ebp
c000f3d8:	e8 03 13 ff ff       	call   c00006e0 <strcmp>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	85 c0                	test   eax,eax
c000f3e2:	75 0f                	jne    c000f3f3 <CPU::detectFeatures()+0x273>
c000f3e4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3ee:	e9 58 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f3f3:	51                   	push   ecx
c000f3f4:	51                   	push   ecx
c000f3f5:	68 42 e0 01 c0       	push   0xc001e042
c000f3fa:	55                   	push   ebp
c000f3fb:	e8 e0 12 ff ff       	call   c00006e0 <strcmp>
c000f400:	83 c4 10             	add    esp,0x10
c000f403:	85 c0                	test   eax,eax
c000f405:	75 0f                	jne    c000f416 <CPU::detectFeatures()+0x296>
c000f407:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f411:	e9 35 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f416:	52                   	push   edx
c000f417:	52                   	push   edx
c000f418:	68 90 e0 01 c0       	push   0xc001e090
c000f41d:	55                   	push   ebp
c000f41e:	e8 bd 12 ff ff       	call   c00006e0 <strcmp>
c000f423:	83 c4 10             	add    esp,0x10
c000f426:	85 c0                	test   eax,eax
c000f428:	75 0f                	jne    c000f439 <CPU::detectFeatures()+0x2b9>
c000f42a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f434:	e9 12 01 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f439:	50                   	push   eax
c000f43a:	50                   	push   eax
c000f43b:	68 9d e0 01 c0       	push   0xc001e09d
c000f440:	55                   	push   ebp
c000f441:	e8 9a 12 ff ff       	call   c00006e0 <strcmp>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	85 c0                	test   eax,eax
c000f44b:	75 0f                	jne    c000f45c <CPU::detectFeatures()+0x2dc>
c000f44d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f457:	e9 ef 00 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f45c:	50                   	push   eax
c000f45d:	50                   	push   eax
c000f45e:	68 aa e0 01 c0       	push   0xc001e0aa
c000f463:	55                   	push   ebp
c000f464:	e8 77 12 ff ff       	call   c00006e0 <strcmp>
c000f469:	83 c4 10             	add    esp,0x10
c000f46c:	85 c0                	test   eax,eax
c000f46e:	75 0f                	jne    c000f47f <CPU::detectFeatures()+0x2ff>
c000f470:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f47a:	e9 cc 00 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f47f:	50                   	push   eax
c000f480:	50                   	push   eax
c000f481:	68 b7 e0 01 c0       	push   0xc001e0b7
c000f486:	55                   	push   ebp
c000f487:	e8 54 12 ff ff       	call   c00006e0 <strcmp>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	85 c0                	test   eax,eax
c000f491:	75 0f                	jne    c000f4a2 <CPU::detectFeatures()+0x322>
c000f493:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f49d:	e9 a9 00 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f4a2:	50                   	push   eax
c000f4a3:	50                   	push   eax
c000f4a4:	68 c4 e0 01 c0       	push   0xc001e0c4
c000f4a9:	55                   	push   ebp
c000f4aa:	e8 31 12 ff ff       	call   c00006e0 <strcmp>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	85 c0                	test   eax,eax
c000f4b4:	75 0f                	jne    c000f4c5 <CPU::detectFeatures()+0x345>
c000f4b6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4c0:	e9 86 00 00 00       	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f4c5:	50                   	push   eax
c000f4c6:	50                   	push   eax
c000f4c7:	68 d1 e0 01 c0       	push   0xc001e0d1
c000f4cc:	55                   	push   ebp
c000f4cd:	e8 0e 12 ff ff       	call   c00006e0 <strcmp>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	75 0c                	jne    c000f4e5 <CPU::detectFeatures()+0x365>
c000f4d9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4e3:	eb 66                	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f4e5:	50                   	push   eax
c000f4e6:	50                   	push   eax
c000f4e7:	68 de e0 01 c0       	push   0xc001e0de
c000f4ec:	55                   	push   ebp
c000f4ed:	e8 ee 11 ff ff       	call   c00006e0 <strcmp>
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	85 c0                	test   eax,eax
c000f4f7:	75 0c                	jne    c000f505 <CPU::detectFeatures()+0x385>
c000f4f9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f503:	eb 46                	jmp    c000f54b <CPU::detectFeatures()+0x3cb>
c000f505:	57                   	push   edi
c000f506:	57                   	push   edi
c000f507:	68 eb e0 01 c0       	push   0xc001e0eb
c000f50c:	55                   	push   ebp
c000f50d:	e8 ce 11 ff ff       	call   c00006e0 <strcmp>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	85 c0                	test   eax,eax
c000f517:	74 e0                	je     c000f4f9 <CPU::detectFeatures()+0x379>
c000f519:	56                   	push   esi
c000f51a:	56                   	push   esi
c000f51b:	68 f8 e0 01 c0       	push   0xc001e0f8
c000f520:	55                   	push   ebp
c000f521:	e8 ba 11 ff ff       	call   c00006e0 <strcmp>
c000f526:	83 c4 10             	add    esp,0x10
c000f529:	85 c0                	test   eax,eax
c000f52b:	74 cc                	je     c000f4f9 <CPU::detectFeatures()+0x379>
c000f52d:	51                   	push   ecx
c000f52e:	51                   	push   ecx
c000f52f:	68 05 e1 01 c0       	push   0xc001e105
c000f534:	55                   	push   ebp
c000f535:	e8 a6 11 ff ff       	call   c00006e0 <strcmp>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	85 c0                	test   eax,eax
c000f53f:	74 b8                	je     c000f4f9 <CPU::detectFeatures()+0x379>
c000f541:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f54b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f550:	0f 86 be 00 00 00    	jbe    c000f614 <CPU::detectFeatures()+0x494>
c000f556:	83 ec 0c             	sub    esp,0xc
c000f559:	68 80 00 00 00       	push   0x80
c000f55e:	e8 31 fb ff ff       	call   c000f094 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f563:	83 e0 01             	and    eax,0x1
c000f566:	c1 e0 06             	shl    eax,0x6
c000f569:	88 c2                	mov    dl,al
c000f56b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f571:	83 e0 bf             	and    eax,0xffffffbf
c000f574:	09 d0                	or     eax,edx
c000f576:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f57c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f583:	e8 0c fb ff ff       	call   c000f094 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f588:	83 e0 01             	and    eax,0x1
c000f58b:	c1 e0 04             	shl    eax,0x4
c000f58e:	88 c2                	mov    dl,al
c000f590:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f596:	83 e0 ef             	and    eax,0xffffffef
c000f599:	09 d0                	or     eax,edx
c000f59b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5a1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f5a8:	e8 e7 fa ff ff       	call   c000f094 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5ad:	c1 e0 07             	shl    eax,0x7
c000f5b0:	88 c2                	mov    dl,al
c000f5b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5b8:	83 e0 7f             	and    eax,0x7f
c000f5bb:	09 d0                	or     eax,edx
c000f5bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5ca:	e8 f3 fa ff ff       	call   c000f0c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5cf:	83 e0 01             	and    eax,0x1
c000f5d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5d9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5df:	83 e0 f7             	and    eax,0xfffffff7
c000f5e2:	09 d0                	or     eax,edx
c000f5e4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5ea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5f1:	e8 cc fa ff ff       	call   c000f0c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5f6:	83 c4 10             	add    esp,0x10
c000f5f9:	83 e0 01             	and    eax,0x1
c000f5fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f603:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f609:	83 e0 fb             	and    eax,0xfffffffb
c000f60c:	09 d0                	or     eax,edx
c000f60e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f614:	83 ec 0c             	sub    esp,0xc
c000f617:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f61b:	50                   	push   eax
c000f61c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f620:	50                   	push   eax
c000f621:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f625:	56                   	push   esi
c000f626:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f62a:	50                   	push   eax
c000f62b:	6a 01                	push   0x1
c000f62d:	e8 82 f9 ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f632:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f636:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f63c:	88 ca                	mov    dl,cl
c000f63e:	83 e0 f0             	and    eax,0xfffffff0
c000f641:	83 e2 0f             	and    edx,0xf
c000f644:	09 d0                	or     eax,edx
c000f646:	88 ca                	mov    dl,cl
c000f648:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f64e:	c0 ea 04             	shr    dl,0x4
c000f651:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f655:	0f b6 c2             	movzx  eax,dl
c000f658:	83 c4 20             	add    esp,0x20
c000f65b:	c1 e0 06             	shl    eax,0x6
c000f65e:	89 c7                	mov    edi,eax
c000f660:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f666:	66 25 3f c0          	and    ax,0xc03f
c000f66a:	09 f8                	or     eax,edi
c000f66c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f673:	89 c8                	mov    eax,ecx
c000f675:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f67c:	c1 e8 08             	shr    eax,0x8
c000f67f:	83 e5 3f             	and    ebp,0x3f
c000f682:	83 e0 0f             	and    eax,0xf
c000f685:	89 c7                	mov    edi,eax
c000f687:	c1 e7 06             	shl    edi,0x6
c000f68a:	09 ef                	or     edi,ebp
c000f68c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f693:	89 fa                	mov    edx,edi
c000f695:	83 e5 c0             	and    ebp,0xffffffc0
c000f698:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f69e:	88 c2                	mov    dl,al
c000f6a0:	c0 ea 02             	shr    dl,0x2
c000f6a3:	89 d7                	mov    edi,edx
c000f6a5:	09 ef                	or     edi,ebp
c000f6a7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f6ad:	89 fa                	mov    edx,edi
c000f6af:	83 e5 cf             	and    ebp,0xffffffcf
c000f6b2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f6b8:	89 cf                	mov    edi,ecx
c000f6ba:	c1 ef 0c             	shr    edi,0xc
c000f6bd:	83 e7 03             	and    edi,0x3
c000f6c0:	c1 e7 04             	shl    edi,0x4
c000f6c3:	09 ef                	or     edi,ebp
c000f6c5:	3c 06                	cmp    al,0x6
c000f6c7:	89 fa                	mov    edx,edi
c000f6c9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6cf:	74 04                	je     c000f6d5 <CPU::detectFeatures()+0x555>
c000f6d1:	3c 0f                	cmp    al,0xf
c000f6d3:	75 5c                	jne    c000f731 <CPU::detectFeatures()+0x5b1>
c000f6d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6d9:	89 cf                	mov    edi,ecx
c000f6db:	c1 ef 10             	shr    edi,0x10
c000f6de:	c1 e7 04             	shl    edi,0x4
c000f6e1:	09 fa                	or     edx,edi
c000f6e3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6e9:	0f b6 d2             	movzx  edx,dl
c000f6ec:	66 81 e7 3f c0       	and    di,0xc03f
c000f6f1:	c1 e2 06             	shl    edx,0x6
c000f6f4:	09 fa                	or     edx,edi
c000f6f6:	3c 0f                	cmp    al,0xf
c000f6f8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6ff:	75 30                	jne    c000f731 <CPU::detectFeatures()+0x5b1>
c000f701:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f707:	c1 e9 14             	shr    ecx,0x14
c000f70a:	83 e0 3f             	and    eax,0x3f
c000f70d:	83 c1 0f             	add    ecx,0xf
c000f710:	88 ca                	mov    dl,cl
c000f712:	c0 e9 02             	shr    cl,0x2
c000f715:	c1 e2 06             	shl    edx,0x6
c000f718:	09 d0                	or     eax,edx
c000f71a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f720:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f726:	83 e0 c0             	and    eax,0xffffffc0
c000f729:	09 c1                	or     ecx,eax
c000f72b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f731:	83 ec 0c             	sub    esp,0xc
c000f734:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f73b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f73f:	50                   	push   eax
c000f740:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f744:	55                   	push   ebp
c000f745:	56                   	push   esi
c000f746:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f74a:	57                   	push   edi
c000f74b:	68 00 00 00 80       	push   0x80000000
c000f750:	e8 5f f8 ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f755:	83 c4 20             	add    esp,0x20
c000f758:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f760:	76 22                	jbe    c000f784 <CPU::detectFeatures()+0x604>
c000f762:	83 ec 0c             	sub    esp,0xc
c000f765:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f769:	50                   	push   eax
c000f76a:	55                   	push   ebp
c000f76b:	56                   	push   esi
c000f76c:	57                   	push   edi
c000f76d:	68 01 00 00 80       	push   0x80000001
c000f772:	e8 3d f8 ff ff       	call   c000efb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f777:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f781:	83 c4 20             	add    esp,0x20
c000f784:	52                   	push   edx
c000f785:	52                   	push   edx
c000f786:	68 11 e1 01 c0       	push   0xc001e111
c000f78b:	53                   	push   ebx
c000f78c:	e8 41 c3 ff ff       	call   c000bad2 <Device::setName(char const*)>
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	eb 67                	jmp    c000f7fd <CPU::detectFeatures()+0x67d>
c000f796:	50                   	push   eax
c000f797:	50                   	push   eax
c000f798:	68 76 e0 01 c0       	push   0xc001e076
c000f79d:	55                   	push   ebp
c000f79e:	e8 5d 0e ff ff       	call   c0000600 <strcpy>
c000f7a3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7ad:	e8 11 0a ff ff       	call   c00001c3 <is486>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	85 c0                	test   eax,eax
c000f7b7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7bd:	74 1d                	je     c000f7dc <CPU::detectFeatures()+0x65c>
c000f7bf:	83 c8 07             	or     eax,0x7
c000f7c2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7c8:	0f 20 c0             	mov    eax,cr0
c000f7cb:	83 e0 14             	and    eax,0x14
c000f7ce:	83 f8 04             	cmp    eax,0x4
c000f7d1:	75 0e                	jne    c000f7e1 <CPU::detectFeatures()+0x661>
c000f7d3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7da:	eb 21                	jmp    c000f7fd <CPU::detectFeatures()+0x67d>
c000f7dc:	83 e0 f8             	and    eax,0xfffffff8
c000f7df:	eb e1                	jmp    c000f7c2 <CPU::detectFeatures()+0x642>
c000f7e1:	e8 b8 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7e6:	83 e0 01             	and    eax,0x1
c000f7e9:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7ec:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7f2:	83 e0 fd             	and    eax,0xfffffffd
c000f7f5:	09 d0                	or     eax,edx
c000f7f7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7fd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f804:	74 0e                	je     c000f814 <CPU::detectFeatures()+0x694>
c000f806:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f80b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f812:	eb 20                	jmp    c000f834 <CPU::detectFeatures()+0x6b4>
c000f814:	e8 85 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f819:	83 e0 01             	and    eax,0x1
c000f81c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f81f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f825:	83 e0 fd             	and    eax,0xfffffffd
c000f828:	09 d0                	or     eax,edx
c000f82a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f830:	a8 02                	test   al,0x2
c000f832:	75 d2                	jne    c000f806 <CPU::detectFeatures()+0x686>
c000f834:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f83b:	83 c4 2c             	add    esp,0x2c
c000f83e:	5b                   	pop    ebx
c000f83f:	5e                   	pop    esi
c000f840:	5f                   	pop    edi
c000f841:	5d                   	pop    ebp
c000f842:	c3                   	ret    
c000f843:	90                   	nop

c000f844 <CPU::setupSMEP()>:
c000f844:	0f 20 e0             	mov    eax,cr4
c000f847:	0d 00 00 10 00       	or     eax,0x100000
c000f84c:	0f 22 e0             	mov    cr4,eax
c000f84f:	c3                   	ret    

c000f850 <CPU::setupUMIP()>:
c000f850:	0f 20 e0             	mov    eax,cr4
c000f853:	80 cc 08             	or     ah,0x8
c000f856:	0f 22 e0             	mov    cr4,eax
c000f859:	c3                   	ret    

c000f85a <CPU::setupTSC()>:
c000f85a:	0f 20 e0             	mov    eax,cr4
c000f85d:	83 c8 04             	or     eax,0x4
c000f860:	0f 22 e0             	mov    cr4,eax
c000f863:	c3                   	ret    

c000f864 <CPU::setupLargePages()>:
c000f864:	0f 20 e0             	mov    eax,cr4
c000f867:	83 c8 10             	or     eax,0x10
c000f86a:	0f 22 e0             	mov    cr4,eax
c000f86d:	c3                   	ret    

c000f86e <CPU::setupPAT()>:
c000f86e:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f873:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f87a:	74 2c                	je     c000f8a8 <CPU::setupPAT()+0x3a>
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	68 77 02 00 00       	push   0x277
c000f885:	50                   	push   eax
c000f886:	e8 67 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f88b:	83 e2 f8             	and    edx,0xfffffff8
c000f88e:	83 ca 01             	or     edx,0x1
c000f891:	52                   	push   edx
c000f892:	50                   	push   eax
c000f893:	68 77 02 00 00       	push   0x277
c000f898:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000f89e:	e8 7b 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f8a3:	83 c4 28             	add    esp,0x28
c000f8a6:	5b                   	pop    ebx
c000f8a7:	c3                   	ret    
c000f8a8:	c3                   	ret    
c000f8a9:	90                   	nop

c000f8aa <CPU::setupMTRR()>:
c000f8aa:	c3                   	ret    
c000f8ab:	90                   	nop

c000f8ac <CPU::setupGlobalPages()>:
c000f8ac:	0f 20 e0             	mov    eax,cr4
c000f8af:	0c 80                	or     al,0x80
c000f8b1:	0f 22 e0             	mov    cr4,eax
c000f8b4:	c3                   	ret    
c000f8b5:	90                   	nop

c000f8b6 <CPU::allowUsermodeDataAccess()>:
c000f8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8ba:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8c1:	74 03                	je     c000f8c6 <CPU::allowUsermodeDataAccess()+0x10>
c000f8c3:	0f 01 cb             	stac   
c000f8c6:	c3                   	ret    
c000f8c7:	90                   	nop

c000f8c8 <CPU::prohibitUsermodeDataAccess()>:
c000f8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8cc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8d3:	74 03                	je     c000f8d8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8d5:	0f 01 ca             	clac   
c000f8d8:	c3                   	ret    
c000f8d9:	90                   	nop

c000f8da <CPU::setupSMAP()>:
c000f8da:	0f 20 e0             	mov    eax,cr4
c000f8dd:	0d 00 00 20 00       	or     eax,0x200000
c000f8e2:	0f 22 e0             	mov    cr4,eax
c000f8e5:	eb e1                	jmp    c000f8c8 <CPU::prohibitUsermodeDataAccess()>
c000f8e7:	90                   	nop

c000f8e8 <CPU::setupFeatures()>:
c000f8e8:	53                   	push   ebx
c000f8e9:	83 ec 08             	sub    esp,0x8
c000f8ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8f0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8f7:	74 18                	je     c000f911 <CPU::setupFeatures()+0x29>
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	68 1d e1 01 c0       	push   0xc001e11d
c000f901:	e8 02 ac ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000f906:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f909:	e8 42 ff ff ff       	call   c000f850 <CPU::setupUMIP()>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f918:	74 18                	je     c000f932 <CPU::setupFeatures()+0x4a>
c000f91a:	83 ec 0c             	sub    esp,0xc
c000f91d:	68 27 e1 01 c0       	push   0xc001e127
c000f922:	e8 e1 ab ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000f927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f92a:	e8 2b ff ff ff       	call   c000f85a <CPU::setupTSC()>
c000f92f:	83 c4 10             	add    esp,0x10
c000f932:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f939:	74 18                	je     c000f953 <CPU::setupFeatures()+0x6b>
c000f93b:	83 ec 0c             	sub    esp,0xc
c000f93e:	68 30 e1 01 c0       	push   0xc001e130
c000f943:	e8 c0 ab ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000f948:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f94b:	e8 14 ff ff ff       	call   c000f864 <CPU::setupLargePages()>
c000f950:	83 c4 10             	add    esp,0x10
c000f953:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f95a:	74 18                	je     c000f974 <CPU::setupFeatures()+0x8c>
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	68 39 e1 01 c0       	push   0xc001e139
c000f964:	e8 9f ab ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000f969:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f96c:	e8 3b ff ff ff       	call   c000f8ac <CPU::setupGlobalPages()>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f97b:	74 18                	je     c000f995 <CPU::setupFeatures()+0xad>
c000f97d:	83 ec 0c             	sub    esp,0xc
c000f980:	68 4b e1 01 c0       	push   0xc001e14b
c000f985:	e8 7e ab ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c000f98a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f98d:	e8 dc fe ff ff       	call   c000f86e <CPU::setupPAT()>
c000f992:	83 c4 10             	add    esp,0x10
c000f995:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f99c:	74 11                	je     c000f9af <CPU::setupFeatures()+0xc7>
c000f99e:	c7 44 24 10 54 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e154
c000f9a6:	83 c4 08             	add    esp,0x8
c000f9a9:	5b                   	pop    ebx
c000f9aa:	e9 59 ab ff ff       	jmp    c000a508 <Dbg::kprintf(char const*, ...)>
c000f9af:	83 c4 08             	add    esp,0x8
c000f9b2:	5b                   	pop    ebx
c000f9b3:	c3                   	ret    

c000f9b4 <CPU::open(int, int, void*)>:
c000f9b4:	57                   	push   edi
c000f9b5:	56                   	push   esi
c000f9b6:	53                   	push   ebx
c000f9b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9bf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9c5:	83 ec 0c             	sub    esp,0xc
c000f9c8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9ce:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9d4:	50                   	push   eax
c000f9d5:	e8 02 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9da:	83 c4 0c             	add    esp,0xc
c000f9dd:	6a 00                	push   0x0
c000f9df:	68 ef be ad de       	push   0xdeadbeef
c000f9e4:	57                   	push   edi
c000f9e5:	e8 52 92 ff ff       	call   c0008c3c <TSS::setup(unsigned long, unsigned long)>
c000f9ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9ed:	e8 2a 92 ff ff       	call   c0008c1c <TSS::flush()>
c000f9f2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9fb:	e8 2a 79 ff ff       	call   c000732a <IDT::setup()>
c000fa00:	b8 00 04 00 00       	mov    eax,0x400
c000fa05:	0f 23 f8             	mov    db7,eax
c000fa08:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa12:	e8 7e 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa17:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa1d:	89 30                	mov    DWORD PTR [eax],esi
c000fa1f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa25:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa28:	58                   	pop    eax
c000fa29:	5a                   	pop    edx
c000fa2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa34:	e8 ed a1 ff ff       	call   c0009c26 <VAS::setCPUSpecific(unsigned long)>
c000fa39:	c7 04 24 5e e1 01 c0 	mov    DWORD PTR [esp],0xc001e15e
c000fa40:	e8 c6 00 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000fa45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa48:	e8 33 f7 ff ff       	call   c000f180 <CPU::detectFeatures()>
c000fa4d:	c7 04 24 81 e1 01 c0 	mov    DWORD PTR [esp],0xc001e181
c000fa54:	e8 b2 00 00 00       	call   c000fb0b <KeSetBootMessage(char const*)>
c000fa59:	e8 42 58 00 00       	call   c00152a0 <HalInitialise()>
c000fa5e:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c000fa63:	83 e0 10             	and    eax,0x10
c000fa66:	83 f8 01             	cmp    eax,0x1
c000fa69:	19 c0                	sbb    eax,eax
c000fa6b:	83 e0 46             	and    eax,0x46
c000fa6e:	83 c0 1e             	add    eax,0x1e
c000fa71:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa74:	e8 40 d7 ff ff       	call   c000d1b9 <setupTimer(int)>
c000fa79:	83 c4 10             	add    esp,0x10
c000fa7c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa82:	f6 05 f0 04 02 c0 20 	test   BYTE PTR ds:0xc00204f0,0x20
c000fa89:	74 0c                	je     c000fa97 <CPU::open(int, int, void*)+0xe3>
c000fa8b:	83 ec 0c             	sub    esp,0xc
c000fa8e:	53                   	push   ebx
c000fa8f:	e8 54 fe ff ff       	call   c000f8e8 <CPU::setupFeatures()>
c000fa94:	83 c4 10             	add    esp,0x10
c000fa97:	5b                   	pop    ebx
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	5e                   	pop    esi
c000fa9b:	5f                   	pop    edi
c000fa9c:	c3                   	ret    

c000fa9d <KeDisplaySplashScreen()>:
c000fa9d:	55                   	push   ebp
c000fa9e:	bd 05 00 00 00       	mov    ebp,0x5
c000faa3:	57                   	push   edi
c000faa4:	bf 20 f2 01 c0       	mov    edi,0xc001f220
c000faa9:	56                   	push   esi
c000faaa:	be 0a 00 00 00       	mov    esi,0xa
c000faaf:	53                   	push   ebx
c000fab0:	31 db                	xor    ebx,ebx
c000fab2:	83 ec 0c             	sub    esp,0xc
c000fab5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fab8:	84 c0                	test   al,al
c000faba:	74 47                	je     c000fb03 <KeDisplaySplashScreen()+0x66>
c000fabc:	80 bb 56 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0daa],0xdb
c000fac3:	75 13                	jne    c000fad8 <KeDisplaySplashScreen()+0x3b>
c000fac5:	0f b6 93 55 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0dab]
c000facc:	83 e2 fe             	and    edx,0xfffffffe
c000facf:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fad5:	75 01                	jne    c000fad8 <KeDisplaySplashScreen()+0x3b>
c000fad7:	46                   	inc    esi
c000fad8:	3c 0d                	cmp    al,0xd
c000fada:	74 24                	je     c000fb00 <KeDisplaySplashScreen()+0x63>
c000fadc:	3c 0a                	cmp    al,0xa
c000fade:	75 0a                	jne    c000faea <KeDisplaySplashScreen()+0x4d>
c000fae0:	45                   	inc    ebp
c000fae1:	be 0a 00 00 00       	mov    esi,0xa
c000fae6:	31 db                	xor    ebx,ebx
c000fae8:	eb 16                	jmp    c000fb00 <KeDisplaySplashScreen()+0x63>
c000faea:	83 ec 0c             	sub    esp,0xc
c000faed:	8d 14 33             	lea    edx,[ebx+esi*1]
c000faf0:	55                   	push   ebp
c000faf1:	43                   	inc    ebx
c000faf2:	52                   	push   edx
c000faf3:	6a 00                	push   0x0
c000faf5:	6a 0e                	push   0xe
c000faf7:	50                   	push   eax
c000faf8:	e8 07 64 00 00       	call   c0015f04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fafd:	83 c4 20             	add    esp,0x20
c000fb00:	47                   	inc    edi
c000fb01:	eb b2                	jmp    c000fab5 <KeDisplaySplashScreen()+0x18>
c000fb03:	83 c4 0c             	add    esp,0xc
c000fb06:	5b                   	pop    ebx
c000fb07:	5e                   	pop    esi
c000fb08:	5f                   	pop    edi
c000fb09:	5d                   	pop    ebp
c000fb0a:	c3                   	ret    

c000fb0b <KeSetBootMessage(char const*)>:
c000fb0b:	57                   	push   edi
c000fb0c:	56                   	push   esi
c000fb0d:	53                   	push   ebx
c000fb0e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb14:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb1b:	68 9e 00 00 00       	push   0x9e
c000fb20:	6a 00                	push   0x0
c000fb22:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb26:	56                   	push   esi
c000fb27:	e8 a4 09 ff ff       	call   c00004d0 <memset>
c000fb2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb2f:	e8 0c 0a ff ff       	call   c0000540 <strlen>
c000fb34:	ba 50 00 00 00       	mov    edx,0x50
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	29 c2                	sub    edx,eax
c000fb3e:	31 c9                	xor    ecx,ecx
c000fb40:	83 e2 fe             	and    edx,0xfffffffe
c000fb43:	01 f2                	add    edx,esi
c000fb45:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb4a:	84 c0                	test   al,al
c000fb4c:	74 0a                	je     c000fb58 <KeSetBootMessage(char const*)+0x4d>
c000fb4e:	80 cc 0f             	or     ah,0xf
c000fb51:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb55:	41                   	inc    ecx
c000fb56:	eb ed                	jmp    c000fb45 <KeSetBootMessage(char const*)+0x3a>
c000fb58:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb5d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb64:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb6a:	5b                   	pop    ebx
c000fb6b:	5e                   	pop    esi
c000fb6c:	5f                   	pop    edi
c000fb6d:	c3                   	ret    

c000fb6e <EnvVarContainer::getEnv(char const*)>:
c000fb6e:	57                   	push   edi
c000fb6f:	56                   	push   esi
c000fb70:	53                   	push   ebx
c000fb71:	31 db                	xor    ebx,ebx
c000fb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb77:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb79:	7e 2b                	jle    c000fba6 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb7b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb82:	50                   	push   eax
c000fb83:	50                   	push   eax
c000fb84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb87:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb8e:	e8 4d 0b ff ff       	call   c00006e0 <strcmp>
c000fb93:	83 c4 10             	add    esp,0x10
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 09                	jne    c000fba3 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb9d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fba1:	eb 05                	jmp    c000fba8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fba3:	43                   	inc    ebx
c000fba4:	eb d1                	jmp    c000fb77 <EnvVarContainer::getEnv(char const*)+0x9>
c000fba6:	31 c0                	xor    eax,eax
c000fba8:	5b                   	pop    ebx
c000fba9:	5e                   	pop    esi
c000fbaa:	5f                   	pop    edi
c000fbab:	c3                   	ret    

c000fbac <EnvVarContainer::setEnv(char const*, char const*)>:
c000fbac:	55                   	push   ebp
c000fbad:	57                   	push   edi
c000fbae:	56                   	push   esi
c000fbaf:	53                   	push   ebx
c000fbb0:	83 ec 28             	sub    esp,0x28
c000fbb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fbb7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fbbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fbbf:	56                   	push   esi
c000fbc0:	e8 7b 09 ff ff       	call   c0000540 <strlen>
c000fbc5:	40                   	inc    eax
c000fbc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbc9:	e8 eb 7b ff ff       	call   c00077b9 <malloc>
c000fbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbd5:	e8 66 09 ff ff       	call   c0000540 <strlen>
c000fbda:	40                   	inc    eax
c000fbdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbde:	e8 d6 7b ff ff       	call   c00077b9 <malloc>
c000fbe3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbe6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbea:	e8 51 09 ff ff       	call   c0000540 <strlen>
c000fbef:	83 c4 0c             	add    esp,0xc
c000fbf2:	40                   	inc    eax
c000fbf3:	50                   	push   eax
c000fbf4:	6a 00                	push   0x0
c000fbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbfa:	e8 d1 08 ff ff       	call   c00004d0 <memset>
c000fbff:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc02:	e8 39 09 ff ff       	call   c0000540 <strlen>
c000fc07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc0b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc13:	89 de                	mov    esi,ebx
c000fc15:	e8 26 09 ff ff       	call   c0000540 <strlen>
c000fc1a:	83 c4 0c             	add    esp,0xc
c000fc1d:	40                   	inc    eax
c000fc1e:	50                   	push   eax
c000fc1f:	6a 00                	push   0x0
c000fc21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc25:	e8 a6 08 ff ff       	call   c00004d0 <memset>
c000fc2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc2d:	e8 0e 09 ff ff       	call   c0000540 <strlen>
c000fc32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc36:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc3e:	40                   	inc    eax
c000fc3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc42:	c1 e0 03             	shl    eax,0x3
c000fc45:	5a                   	pop    edx
c000fc46:	59                   	pop    ecx
c000fc47:	50                   	push   eax
c000fc48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc4b:	e8 55 7b ff ff       	call   c00077a5 <realloc>
c000fc50:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc5a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc5e:	b9 08 00 00 00       	mov    ecx,0x8
c000fc63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc65:	83 c4 2c             	add    esp,0x2c
c000fc68:	5b                   	pop    ebx
c000fc69:	5e                   	pop    esi
c000fc6a:	5f                   	pop    edi
c000fc6b:	5d                   	pop    ebp
c000fc6c:	c3                   	ret    
c000fc6d:	90                   	nop

c000fc6e <EnvVarContainer::deleteEnv(char const*)>:
c000fc6e:	c3                   	ret    
c000fc6f:	90                   	nop

c000fc70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc70:	55                   	push   ebp
c000fc71:	57                   	push   edi
c000fc72:	56                   	push   esi
c000fc73:	53                   	push   ebx
c000fc74:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc7a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc81:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc88:	68 14 01 00 00       	push   0x114
c000fc8d:	e8 27 7b ff ff       	call   c00077b9 <malloc>
c000fc92:	83 c4 0c             	add    esp,0xc
c000fc95:	89 c3                	mov    ebx,eax
c000fc97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fca1:	50                   	push   eax
c000fca2:	e8 d7 ad ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c000fca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcaa:	e8 fd b0 ff ff       	call   c000adac <File::exists()>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	84 c0                	test   al,al
c000fcb4:	75 31                	jne    c000fce7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fcb6:	50                   	push   eax
c000fcb7:	50                   	push   eax
c000fcb8:	6a 12                	push   0x12
c000fcba:	53                   	push   ebx
c000fcbb:	e8 7e ae ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c000fcc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcc2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fcc5:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcc8:	e8 73 08 ff ff       	call   c0000540 <strlen>
c000fccd:	5a                   	pop    edx
c000fcce:	31 d2                	xor    edx,edx
c000fcd0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcd4:	51                   	push   ecx
c000fcd5:	56                   	push   esi
c000fcd6:	52                   	push   edx
c000fcd7:	50                   	push   eax
c000fcd8:	53                   	push   ebx
c000fcd9:	ff d7                	call   edi
c000fcdb:	83 c4 14             	add    esp,0x14
c000fcde:	53                   	push   ebx
c000fcdf:	e8 b8 ae ff ff       	call   c000ab9c <File::close()>
c000fce4:	83 c4 10             	add    esp,0x10
c000fce7:	56                   	push   esi
c000fce8:	31 f6                	xor    esi,esi
c000fcea:	68 00 01 00 00       	push   0x100
c000fcef:	6a 00                	push   0x0
c000fcf1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcf5:	50                   	push   eax
c000fcf6:	e8 d5 07 ff ff       	call   c00004d0 <memset>
c000fcfb:	5f                   	pop    edi
c000fcfc:	58                   	pop    eax
c000fcfd:	6a 01                	push   0x1
c000fcff:	53                   	push   ebx
c000fd00:	e8 39 ae ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd15:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd19:	51                   	push   ecx
c000fd1a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd1e:	52                   	push   edx
c000fd1f:	6a 00                	push   0x0
c000fd21:	6a 01                	push   0x1
c000fd23:	53                   	push   ebx
c000fd24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd2b:	83 c4 20             	add    esp,0x20
c000fd2e:	3c 0d                	cmp    al,0xd
c000fd30:	0f 84 09 01 00 00    	je     c000fe3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd3b:	0f 84 ef 00 00 00    	je     c000fe30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd41:	3c 0a                	cmp    al,0xa
c000fd43:	74 13                	je     c000fd58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd4a:	74 0c                	je     c000fd58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd52:	0f 8e d8 00 00 00    	jle    c000fe30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	8d 78 01             	lea    edi,[eax+0x1]
c000fd62:	57                   	push   edi
c000fd63:	e8 51 7a ff ff       	call   c00077b9 <malloc>
c000fd68:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd6c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd70:	8d 56 04             	lea    edx,[esi+0x4]
c000fd73:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd7a:	e8 3a 7a ff ff       	call   c00077b9 <malloc>
c000fd7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	57                   	push   edi
c000fd87:	6a 00                	push   0x0
c000fd89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd8d:	e8 3e 07 ff ff       	call   c00004d0 <memset>
c000fd92:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd96:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda0:	83 c4 0c             	add    esp,0xc
c000fda3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fda7:	52                   	push   edx
c000fda8:	6a 00                	push   0x0
c000fdaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fdae:	e8 1d 07 ff ff       	call   c00004d0 <memset>
c000fdb3:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdb7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fdbb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdbe:	e8 7d 07 ff ff       	call   c0000540 <strlen>
c000fdc3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fdc7:	89 c1                	mov    ecx,eax
c000fdc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fdd1:	40                   	inc    eax
c000fdd2:	83 c4 10             	add    esp,0x10
c000fdd5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdd8:	85 d2                	test   edx,edx
c000fdda:	75 0c                	jne    c000fde8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	6a 08                	push   0x8
c000fde1:	e8 d3 79 ff ff       	call   c00077b9 <malloc>
c000fde6:	eb 0c                	jmp    c000fdf4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fde8:	c1 e0 03             	shl    eax,0x3
c000fdeb:	51                   	push   ecx
c000fdec:	51                   	push   ecx
c000fded:	50                   	push   eax
c000fdee:	52                   	push   edx
c000fdef:	e8 b1 79 ff ff       	call   c00077a5 <realloc>
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdfa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdfd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe00:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe04:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe08:	b9 08 00 00 00       	mov    ecx,0x8
c000fe0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe0f:	31 f6                	xor    esi,esi
c000fe11:	50                   	push   eax
c000fe12:	68 00 01 00 00       	push   0x100
c000fe17:	6a 00                	push   0x0
c000fe19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe1d:	50                   	push   eax
c000fe1e:	e8 ad 06 ff ff       	call   c00004d0 <memset>
c000fe23:	83 c4 10             	add    esp,0x10
c000fe26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe2e:	eb 0f                	jmp    c000fe3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe30:	3c 3d                	cmp    al,0x3d
c000fe32:	74 07                	je     c000fe3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe34:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe38:	46                   	inc    esi
c000fe39:	eb 04                	jmp    c000fe3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe3b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe44:	0f 85 c6 fe ff ff    	jne    c000fd10 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe50:	5b                   	pop    ebx
c000fe51:	5e                   	pop    esi
c000fe52:	5f                   	pop    edi
c000fe53:	5d                   	pop    ebp
c000fe54:	c3                   	ret    
c000fe55:	90                   	nop

c000fe56 <EnvVarContainer::__loadSystem()>:
c000fe56:	83 ec 10             	sub    esp,0x10
c000fe59:	68 80 f3 01 c0       	push   0xc001f380
c000fe5e:	68 c4 e1 01 c0       	push   0xc001e1c4
c000fe63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe67:	e8 04 fe ff ff       	call   c000fc70 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe6c:	83 c4 1c             	add    esp,0x1c
c000fe6f:	c3                   	ret    

c000fe70 <EnvVarContainer::__loadUser()>:
c000fe70:	c3                   	ret    
c000fe71:	90                   	nop

c000fe72 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe92:	90                   	nop
c000fe93:	c3                   	ret    

c000fe94 <EnvVarContainer::~EnvVarContainer()>:
c000fe94:	83 ec 0c             	sub    esp,0xc
c000fe97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe9e:	85 c0                	test   eax,eax
c000fea0:	74 1d                	je     c000febf <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea8:	85 c0                	test   eax,eax
c000feaa:	74 13                	je     c000febf <EnvVarContainer::~EnvVarContainer()+0x2b>
c000feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	50                   	push   eax
c000feb7:	e8 0d 79 ff ff       	call   c00077c9 <free>
c000febc:	83 c4 10             	add    esp,0x10
c000febf:	90                   	nop
c000fec0:	83 c4 0c             	add    esp,0xc
c000fec3:	c3                   	ret    

c000fec4 <Krnl::getEnv(Process*, char const*)>:
c000fec4:	53                   	push   ebx
c000fec5:	83 ec 08             	sub    esp,0x8
c000fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fed0:	39 05 b0 37 02 c0    	cmp    DWORD PTR ds:0xc00237b0,eax
c000fed6:	74 04                	je     c000fedc <Krnl::getEnv(Process*, char const*)+0x18>
c000fed8:	85 c0                	test   eax,eax
c000feda:	75 0b                	jne    c000fee7 <Krnl::getEnv(Process*, char const*)+0x23>
c000fedc:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c000fee1:	85 c0                	test   eax,eax
c000fee3:	75 19                	jne    c000fefe <Krnl::getEnv(Process*, char const*)+0x3a>
c000fee5:	eb 27                	jmp    c000ff0e <Krnl::getEnv(Process*, char const*)+0x4a>
c000fee7:	52                   	push   edx
c000fee8:	52                   	push   edx
c000fee9:	53                   	push   ebx
c000feea:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fef0:	e8 79 fc ff ff       	call   c000fb6e <EnvVarContainer::getEnv(char const*)>
c000fef5:	83 c4 10             	add    esp,0x10
c000fef8:	85 c0                	test   eax,eax
c000fefa:	75 28                	jne    c000ff24 <Krnl::getEnv(Process*, char const*)+0x60>
c000fefc:	eb de                	jmp    c000fedc <Krnl::getEnv(Process*, char const*)+0x18>
c000fefe:	52                   	push   edx
c000feff:	52                   	push   edx
c000ff00:	53                   	push   ebx
c000ff01:	50                   	push   eax
c000ff02:	e8 67 fc ff ff       	call   c000fb6e <EnvVarContainer::getEnv(char const*)>
c000ff07:	83 c4 10             	add    esp,0x10
c000ff0a:	85 c0                	test   eax,eax
c000ff0c:	75 16                	jne    c000ff24 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff0e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff12:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c000ff17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff1b:	83 c4 08             	add    esp,0x8
c000ff1e:	5b                   	pop    ebx
c000ff1f:	e9 4a fc ff ff       	jmp    c000fb6e <EnvVarContainer::getEnv(char const*)>
c000ff24:	83 c4 08             	add    esp,0x8
c000ff27:	5b                   	pop    ebx
c000ff28:	c3                   	ret    

c000ff29 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff29:	83 ec 10             	sub    esp,0x10
c000ff2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff34:	ff 35 54 2f 02 c0    	push   DWORD PTR ds:0xc0022f54
c000ff3a:	e8 6d fc ff ff       	call   c000fbac <EnvVarContainer::setEnv(char const*, char const*)>
c000ff3f:	83 c4 1c             	add    esp,0x1c
c000ff42:	c3                   	ret    

c000ff43 <Krnl::setEnvUser(char const*, char const*)>:
c000ff43:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c000ff48:	85 c0                	test   eax,eax
c000ff4a:	74 15                	je     c000ff61 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff4c:	83 ec 10             	sub    esp,0x10
c000ff4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff57:	50                   	push   eax
c000ff58:	e8 4f fc ff ff       	call   c000fbac <EnvVarContainer::setEnv(char const*, char const*)>
c000ff5d:	83 c4 1c             	add    esp,0x1c
c000ff60:	c3                   	ret    
c000ff61:	c3                   	ret    

c000ff62 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff66:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff70:	e9 37 fc ff ff       	jmp    c000fbac <EnvVarContainer::setEnv(char const*, char const*)>

c000ff75 <Krnl::deleteEnvSystem(char const*)>:
c000ff75:	c3                   	ret    

c000ff76 <Krnl::deleteEnvUser(char const*)>:
c000ff76:	c3                   	ret    

c000ff77 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff77:	c3                   	ret    

c000ff78 <Krnl::newProcessEnv(Process*)>:
c000ff78:	83 ec 28             	sub    esp,0x28
c000ff7b:	6a 0c                	push   0xc
c000ff7d:	e8 37 78 ff ff       	call   c00077b9 <malloc>
c000ff82:	5a                   	pop    edx
c000ff83:	59                   	pop    ecx
c000ff84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff88:	50                   	push   eax
c000ff89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff8d:	e8 e0 fe ff ff       	call   c000fe72 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff96:	83 c4 2c             	add    esp,0x2c
c000ff99:	c3                   	ret    

c000ff9a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff9a:	57                   	push   edi
c000ff9b:	56                   	push   esi
c000ff9c:	53                   	push   ebx
c000ff9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa1:	83 ec 0c             	sub    esp,0xc
c000ffa4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ffaa:	6a 0c                	push   0xc
c000ffac:	e8 08 78 ff ff       	call   c00077b9 <malloc>
c000ffb1:	89 c3                	mov    ebx,eax
c000ffb3:	58                   	pop    eax
c000ffb4:	5a                   	pop    edx
c000ffb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb9:	53                   	push   ebx
c000ffba:	e8 b3 fe ff ff       	call   c000fe72 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffbf:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffc1:	89 03                	mov    DWORD PTR [ebx],eax
c000ffc3:	c1 e0 03             	shl    eax,0x3
c000ffc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffc9:	e8 eb 77 ff ff       	call   c00077b9 <malloc>
c000ffce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffd1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffd3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffd6:	c1 e1 03             	shl    ecx,0x3
c000ffd9:	89 c7                	mov    edi,eax
c000ffdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	89 d8                	mov    eax,ebx
c000ffe2:	5b                   	pop    ebx
c000ffe3:	5e                   	pop    esi
c000ffe4:	5f                   	pop    edi
c000ffe5:	c3                   	ret    

c000ffe6 <Krnl::loadSystemEnv()>:
c000ffe6:	53                   	push   ebx
c000ffe7:	83 ec 14             	sub    esp,0x14
c000ffea:	6a 0c                	push   0xc
c000ffec:	e8 c8 77 ff ff       	call   c00077b9 <malloc>
c000fff1:	89 c3                	mov    ebx,eax
c000fff3:	58                   	pop    eax
c000fff4:	5a                   	pop    edx
c000fff5:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000fffb:	53                   	push   ebx
c000fffc:	e8 71 fe ff ff       	call   c000fe72 <EnvVarContainer::EnvVarContainer(Process*)>
c0010001:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010004:	89 1d 54 2f 02 c0    	mov    DWORD PTR ds:0xc0022f54,ebx
c001000a:	e8 47 fe ff ff       	call   c000fe56 <EnvVarContainer::__loadSystem()>
c001000f:	83 c4 18             	add    esp,0x18
c0010012:	5b                   	pop    ebx
c0010013:	c3                   	ret    

c0010014 <Krnl::loadUserEnv()>:
c0010014:	53                   	push   ebx
c0010015:	83 ec 14             	sub    esp,0x14
c0010018:	6a 0c                	push   0xc
c001001a:	e8 9a 77 ff ff       	call   c00077b9 <malloc>
c001001f:	89 c3                	mov    ebx,eax
c0010021:	58                   	pop    eax
c0010022:	5a                   	pop    edx
c0010023:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0010029:	53                   	push   ebx
c001002a:	e8 43 fe ff ff       	call   c000fe72 <EnvVarContainer::EnvVarContainer(Process*)>
c001002f:	89 1d 50 2f 02 c0    	mov    DWORD PTR ds:0xc0022f50,ebx
c0010035:	83 c4 18             	add    esp,0x18
c0010038:	5b                   	pop    ebx
c0010039:	c3                   	ret    

c001003a <Krnl::flushEnv()>:
c001003a:	c3                   	ret    

c001003b <Krnl::getProcessTotalEnvCount(Process*)>:
c001003b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001003f:	8b 15 50 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f50
c0010045:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001004b:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c0010050:	8b 00                	mov    eax,DWORD PTR [eax]
c0010052:	03 01                	add    eax,DWORD PTR [ecx]
c0010054:	85 d2                	test   edx,edx
c0010056:	74 02                	je     c001005a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010058:	03 02                	add    eax,DWORD PTR [edx]
c001005a:	c3                   	ret    

c001005b <Krnl::getProcessEnvPair(Process*, int)>:
c001005b:	57                   	push   edi
c001005c:	56                   	push   esi
c001005d:	8b 35 50 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f50
c0010063:	53                   	push   ebx
c0010064:	85 f6                	test   esi,esi
c0010066:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001006a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001006e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010074:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010078:	8b 01                	mov    eax,DWORD PTR [ecx]
c001007a:	75 16                	jne    c0010092 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001007c:	39 c2                	cmp    edx,eax
c001007e:	7c 16                	jl     c0010096 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010080:	8b 0d 54 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f54
c0010086:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010088:	01 c6                	add    esi,eax
c001008a:	39 d6                	cmp    esi,edx
c001008c:	7e 3c                	jle    c00100ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001008e:	29 c2                	sub    edx,eax
c0010090:	eb 04                	jmp    c0010096 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010092:	39 c2                	cmp    edx,eax
c0010094:	7d 05                	jge    c001009b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010096:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010099:	eb 20                	jmp    c00100bb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001009b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001009d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00100a0:	39 d1                	cmp    ecx,edx
c00100a2:	7e 04                	jle    c00100a8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00100a4:	29 c2                	sub    edx,eax
c00100a6:	eb 10                	jmp    c00100b8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00100a8:	8b 35 54 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f54
c00100ae:	03 0e                	add    ecx,DWORD PTR [esi]
c00100b0:	39 d1                	cmp    ecx,edx
c00100b2:	7e 16                	jle    c00100ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100b4:	29 c2                	sub    edx,eax
c00100b6:	29 fa                	sub    edx,edi
c00100b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00100bb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00100be:	8b 02                	mov    eax,DWORD PTR [edx]
c00100c0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100c3:	89 03                	mov    DWORD PTR [ebx],eax
c00100c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100c8:	eb 1d                	jmp    c00100e7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100ca:	83 ec 0c             	sub    esp,0xc
c00100cd:	68 e6 e1 01 c0       	push   0xc001e1e6
c00100d2:	e8 ac 00 00 00       	call   c0010183 <KePanic(char const*)>
c00100d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100e4:	83 c4 10             	add    esp,0x10
c00100e7:	89 d8                	mov    eax,ebx
c00100e9:	5b                   	pop    ebx
c00100ea:	5e                   	pop    esi
c00100eb:	5f                   	pop    edi
c00100ec:	c2 04 00             	ret    0x4

c00100ef <CPU::current()>:
c00100ef:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00100f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100fa:	c3                   	ret    

c00100fb <operator new(unsigned long)>:
c00100fb:	e9 b9 76 ff ff       	jmp    c00077b9 <malloc>

c0010100 <operator delete(void*)>:
c0010100:	e9 d4 76 ff ff       	jmp    c00077d9 <rfree>

c0010105 <disableIRQs()>:
c0010105:	fa                   	cli    
c0010106:	c3                   	ret    

c0010107 <enableIRQs()>:
c0010107:	fb                   	sti    
c0010108:	c3                   	ret    

c0010109 <lockScheduler()>:
c0010109:	fa                   	cli    
c001010a:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0010110:	c3                   	ret    

c0010111 <unlockScheduler()>:
c0010111:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0010116:	48                   	dec    eax
c0010117:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001011c:	75 01                	jne    c001011f <unlockScheduler()+0xe>
c001011e:	fb                   	sti    
c001011f:	c3                   	ret    

c0010120 <lockStuff()>:
c0010120:	fa                   	cli    
c0010121:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0010127:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c001012d:	c3                   	ret    

c001012e <unlockStuff()>:
c001012e:	83 ec 0c             	sub    esp,0xc
c0010131:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0010136:	48                   	dec    eax
c0010137:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c001013c:	75 18                	jne    c0010156 <unlockStuff()+0x28>
c001013e:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c0010145:	74 0f                	je     c0010156 <unlockStuff()+0x28>
c0010147:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0010151:	e8 3e 32 00 00       	call   c0013394 <schedule()>
c0010156:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001015b:	48                   	dec    eax
c001015c:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0010161:	75 01                	jne    c0010164 <unlockStuff()+0x36>
c0010163:	fb                   	sti    
c0010164:	83 c4 0c             	add    esp,0xc
c0010167:	c3                   	ret    

c0010168 <Virt::getAKernelVAS()>:
c0010168:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c001016d:	c3                   	ret    

c001016e <__not_memcpy>:
c001016e:	57                   	push   edi
c001016f:	56                   	push   esi
c0010170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010174:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010178:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001017c:	89 c7                	mov    edi,eax
c001017e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010180:	5e                   	pop    esi
c0010181:	5f                   	pop    edi
c0010182:	c3                   	ret    

c0010183 <KePanic(char const*)>:
c0010183:	c6 05 58 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f58,0x1
c001018a:	e9 fd 4f 00 00       	jmp    c001518c <HalPanic(char const*)>

c001018f <Krnl::powerThread(void*)>:
c001018f:	83 ec 0c             	sub    esp,0xc
c0010192:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0010197:	48                   	dec    eax
c0010198:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001019d:	75 01                	jne    c00101a0 <Krnl::powerThread(void*)+0x11>
c001019f:	fb                   	sti    
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	c6 05 60 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f60,0x0
c00101aa:	6a 0a                	push   0xa
c00101ac:	e8 f3 34 00 00       	call   c00136a4 <sleep(unsigned int)>
c00101b1:	83 05 a4 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022fa4,0xa
c00101b8:	83 c4 10             	add    esp,0x10
c00101bb:	eb e3                	jmp    c00101a0 <Krnl::powerThread(void*)+0x11>

c00101bd <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00101bd:	57                   	push   edi
c00101be:	b9 09 00 00 00       	mov    ecx,0x9
c00101c3:	56                   	push   esi
c00101c4:	bf 80 2f 02 c0       	mov    edi,0xc0022f80
c00101c9:	fc                   	cld    
c00101ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101d0:	5e                   	pop    esi
c00101d1:	5f                   	pop    edi
c00101d2:	c3                   	ret    

c00101d3 <Krnl::userIOReceived()>:
c00101d3:	c7 05 a4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fa4,0x0
c00101dd:	c3                   	ret    

c00101de <Krnl::handlePowerButton()>:
c00101de:	83 ec 0c             	sub    esp,0xc
c00101e1:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c00101e6:	83 f8 02             	cmp    eax,0x2
c00101e9:	75 10                	jne    c00101fb <Krnl::handlePowerButton()+0x1d>
c00101eb:	83 ec 0c             	sub    esp,0xc
c00101ee:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00101f4:	e8 5d 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101f9:	eb 11                	jmp    c001020c <Krnl::handlePowerButton()+0x2e>
c00101fb:	48                   	dec    eax
c00101fc:	75 11                	jne    c001020f <Krnl::handlePowerButton()+0x31>
c00101fe:	83 ec 0c             	sub    esp,0xc
c0010201:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0010207:	e8 7a 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	83 c4 0c             	add    esp,0xc
c0010212:	c3                   	ret    

c0010213 <Krnl::handleSleepButton()>:
c0010213:	83 ec 0c             	sub    esp,0xc
c0010216:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c001021b:	83 f8 02             	cmp    eax,0x2
c001021e:	75 10                	jne    c0010230 <Krnl::handleSleepButton()+0x1d>
c0010220:	83 ec 0c             	sub    esp,0xc
c0010223:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0010229:	e8 28 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c001022e:	eb 11                	jmp    c0010241 <Krnl::handleSleepButton()+0x2e>
c0010230:	48                   	dec    eax
c0010231:	75 11                	jne    c0010244 <Krnl::handleSleepButton()+0x31>
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c001023c:	e8 45 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	83 c4 0c             	add    esp,0xc
c0010247:	c3                   	ret    

c0010248 <Krnl::setupPowerManager()>:
c0010248:	83 ec 0c             	sub    esp,0xc
c001024b:	c7 05 a4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fa4,0x0
c0010255:	68 f0 00 00 00       	push   0xf0
c001025a:	c6 05 60 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f60,0x0
c0010261:	6a 00                	push   0x0
c0010263:	68 8f 01 01 c0       	push   0xc001018f
c0010268:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c001026e:	e8 01 2f 00 00       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c0010273:	c7 05 80 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f80,0x2
c001027d:	c7 05 84 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f84,0x1
c0010287:	c7 05 88 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f88,0x3
c0010291:	c7 05 8c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f8c,0x0
c001029b:	c7 05 98 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f98,0x0
c00102a5:	c7 05 90 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f90,0x0
c00102af:	c7 05 9c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f9c,0x0
c00102b9:	c7 05 94 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f94,0x3c
c00102c3:	c7 05 a0 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022fa0,0x3c
c00102cd:	83 c4 1c             	add    esp,0x1c
c00102d0:	c3                   	ret    
c00102d1:	66 90                	xchg   ax,ax
c00102d3:	90                   	nop

c00102d4 <KeResolveCompatibilitySymbol(char*)>:
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	83 ec 08             	sub    esp,0x8
c00102da:	68 00 e2 01 c0       	push   0xc001e200
c00102df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e3:	e8 f8 03 ff ff       	call   c00006e0 <strcmp>
c00102e8:	83 c4 10             	add    esp,0x10
c00102eb:	85 c0                	test   eax,eax
c00102ed:	0f 94 c0             	sete   al
c00102f0:	84 c0                	test   al,al
c00102f2:	74 0c                	je     c0010300 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102f4:	b8 d8 04 02 c0       	mov    eax,0xc00204d8
c00102f9:	e9 62 01 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102fe:	66 90                	xchg   ax,ax
c0010300:	83 ec 08             	sub    esp,0x8
c0010303:	68 09 e2 01 c0       	push   0xc001e209
c0010308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030c:	e8 cf 03 ff ff       	call   c00006e0 <strcmp>
c0010311:	83 c4 10             	add    esp,0x10
c0010314:	85 c0                	test   eax,eax
c0010316:	0f 94 c0             	sete   al
c0010319:	84 c0                	test   al,al
c001031b:	74 0b                	je     c0010328 <KeResolveCompatibilitySymbol(char*)+0x54>
c001031d:	b8 90 bc 01 c0       	mov    eax,0xc001bc90
c0010322:	e9 39 01 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010327:	90                   	nop
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	68 13 e2 01 c0       	push   0xc001e213
c0010330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010334:	e8 a7 03 ff ff       	call   c00006e0 <strcmp>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	85 c0                	test   eax,eax
c001033e:	0f 94 c0             	sete   al
c0010341:	84 c0                	test   al,al
c0010343:	74 0b                	je     c0010350 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010345:	b8 c4 b9 01 c0       	mov    eax,0xc001b9c4
c001034a:	e9 11 01 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001034f:	90                   	nop
c0010350:	83 ec 08             	sub    esp,0x8
c0010353:	68 1c e2 01 c0       	push   0xc001e21c
c0010358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035c:	e8 7f 03 ff ff       	call   c00006e0 <strcmp>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	85 c0                	test   eax,eax
c0010366:	0f 94 c0             	sete   al
c0010369:	84 c0                	test   al,al
c001036b:	74 0b                	je     c0010378 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001036d:	b8 83 01 01 c0       	mov    eax,0xc0010183
c0010372:	e9 e9 00 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010377:	90                   	nop
c0010378:	83 ec 08             	sub    esp,0x8
c001037b:	68 2f e2 01 c0       	push   0xc001e22f
c0010380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010384:	e8 57 03 ff ff       	call   c00006e0 <strcmp>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	85 c0                	test   eax,eax
c001038e:	0f 94 c0             	sete   al
c0010391:	84 c0                	test   al,al
c0010393:	74 0b                	je     c00103a0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010395:	b8 0b fb 00 c0       	mov    eax,0xc000fb0b
c001039a:	e9 c1 00 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001039f:	90                   	nop
c00103a0:	83 ec 08             	sub    esp,0x8
c00103a3:	68 4c e2 01 c0       	push   0xc001e24c
c00103a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ac:	e8 2f 03 ff ff       	call   c00006e0 <strcmp>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	85 c0                	test   eax,eax
c00103b6:	0f 94 c0             	sete   al
c00103b9:	84 c0                	test   al,al
c00103bb:	74 0b                	je     c00103c8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00103bd:	b8 90 bd 01 c0       	mov    eax,0xc001bd90
c00103c2:	e9 99 00 00 00       	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c7:	90                   	nop
c00103c8:	83 ec 08             	sub    esp,0x8
c00103cb:	68 56 e2 01 c0       	push   0xc001e256
c00103d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d4:	e8 07 03 ff ff       	call   c00006e0 <strcmp>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	85 c0                	test   eax,eax
c00103de:	0f 94 c0             	sete   al
c00103e1:	84 c0                	test   al,al
c00103e3:	74 07                	je     c00103ec <KeResolveCompatibilitySymbol(char*)+0x118>
c00103e5:	b8 10 bb 01 c0       	mov    eax,0xc001bb10
c00103ea:	eb 74                	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ec:	83 ec 08             	sub    esp,0x8
c00103ef:	68 5f e2 01 c0       	push   0xc001e25f
c00103f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f8:	e8 e3 02 ff ff       	call   c00006e0 <strcmp>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	85 c0                	test   eax,eax
c0010402:	0f 94 c0             	sete   al
c0010405:	84 c0                	test   al,al
c0010407:	74 07                	je     c0010410 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010409:	b8 dc 04 02 c0       	mov    eax,0xc00204dc
c001040e:	eb 50                	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010410:	83 ec 08             	sub    esp,0x8
c0010413:	68 77 e2 01 c0       	push   0xc001e277
c0010418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041c:	e8 bf 02 ff ff       	call   c00006e0 <strcmp>
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	85 c0                	test   eax,eax
c0010426:	0f 94 c0             	sete   al
c0010429:	84 c0                	test   al,al
c001042b:	74 07                	je     c0010434 <KeResolveCompatibilitySymbol(char*)+0x160>
c001042d:	b8 dc 04 02 c0       	mov    eax,0xc00204dc
c0010432:	eb 2c                	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010434:	83 ec 08             	sub    esp,0x8
c0010437:	68 84 e2 01 c0       	push   0xc001e284
c001043c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010440:	e8 9b 02 ff ff       	call   c00006e0 <strcmp>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	85 c0                	test   eax,eax
c001044a:	0f 94 c0             	sete   al
c001044d:	84 c0                	test   al,al
c001044f:	74 07                	je     c0010458 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010451:	b8 dd 04 02 c0       	mov    eax,0xc00204dd
c0010456:	eb 08                	jmp    c0010460 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010458:	b8 00 00 00 00       	mov    eax,0x0
c001045d:	8d 76 00             	lea    esi,[esi+0x0]
c0010460:	83 c4 0c             	add    esp,0xc
c0010463:	c3                   	ret    

c0010464 <SysSeekDir(regs*)>:
c0010464:	31 c0                	xor    eax,eax
c0010466:	31 d2                	xor    edx,edx
c0010468:	c3                   	ret    

c0010469 <SysTellDir(regs*)>:
c0010469:	31 c0                	xor    eax,eax
c001046b:	31 d2                	xor    edx,edx
c001046d:	c3                   	ret    

c001046e <SysVerify(regs*)>:
c001046e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010472:	31 d2                	xor    edx,edx
c0010474:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010477:	c3                   	ret    

c0010478 <SysGetArgc(regs*)>:
c0010478:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001047d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010480:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010486:	99                   	cdq    
c0010487:	c3                   	ret    

c0010488 <SysTTYName(regs*)>:
c0010488:	b8 01 00 00 00       	mov    eax,0x1
c001048d:	31 d2                	xor    edx,edx
c001048f:	c3                   	ret    

c0010490 <SysFormatDisk(regs*)>:
c0010490:	56                   	push   esi
c0010491:	53                   	push   ebx
c0010492:	50                   	push   eax
c0010493:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010497:	8b 1d d4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d4
c001049d:	eb 28                	jmp    c00104c7 <SysFormatDisk(regs*)+0x37>
c001049f:	83 ec 0c             	sub    esp,0xc
c00104a2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00104a5:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00104a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00104aa:	51                   	push   ecx
c00104ab:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00104ae:	51                   	push   ecx
c00104af:	50                   	push   eax
c00104b0:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00104b7:	50                   	push   eax
c00104b8:	53                   	push   ebx
c00104b9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00104bc:	83 c4 20             	add    esp,0x20
c00104bf:	83 f8 08             	cmp    eax,0x8
c00104c2:	75 12                	jne    c00104d6 <SysFormatDisk(regs*)+0x46>
c00104c4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104c7:	85 db                	test   ebx,ebx
c00104c9:	75 d4                	jne    c001049f <SysFormatDisk(regs*)+0xf>
c00104cb:	59                   	pop    ecx
c00104cc:	b8 03 00 00 00       	mov    eax,0x3
c00104d1:	31 d2                	xor    edx,edx
c00104d3:	5b                   	pop    ebx
c00104d4:	5e                   	pop    esi
c00104d5:	c3                   	ret    
c00104d6:	85 c0                	test   eax,eax
c00104d8:	74 1b                	je     c00104f5 <SysFormatDisk(regs*)+0x65>
c00104da:	83 f8 09             	cmp    eax,0x9
c00104dd:	74 0b                	je     c00104ea <SysFormatDisk(regs*)+0x5a>
c00104df:	59                   	pop    ecx
c00104e0:	b8 02 00 00 00       	mov    eax,0x2
c00104e5:	31 d2                	xor    edx,edx
c00104e7:	5b                   	pop    ebx
c00104e8:	5e                   	pop    esi
c00104e9:	c3                   	ret    
c00104ea:	59                   	pop    ecx
c00104eb:	b8 01 00 00 00       	mov    eax,0x1
c00104f0:	31 d2                	xor    edx,edx
c00104f2:	5b                   	pop    ebx
c00104f3:	5e                   	pop    esi
c00104f4:	c3                   	ret    
c00104f5:	59                   	pop    ecx
c00104f6:	31 c0                	xor    eax,eax
c00104f8:	31 d2                	xor    edx,edx
c00104fa:	5b                   	pop    ebx
c00104fb:	5e                   	pop    esi
c00104fc:	c3                   	ret    

c00104fd <SysSetDiskVolumeLabel(regs*)>:
c00104fd:	56                   	push   esi
c00104fe:	53                   	push   ebx
c00104ff:	53                   	push   ebx
c0010500:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010504:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010507:	83 f8 19             	cmp    eax,0x19
c001050a:	77 2d                	ja     c0010539 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001050c:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0010513:	85 c9                	test   ecx,ecx
c0010515:	74 22                	je     c0010539 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010517:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001051a:	85 db                	test   ebx,ebx
c001051c:	74 1b                	je     c0010539 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001051e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010524:	85 d2                	test   edx,edx
c0010526:	74 11                	je     c0010539 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010528:	8b 32                	mov    esi,DWORD PTR [edx]
c001052a:	53                   	push   ebx
c001052b:	50                   	push   eax
c001052c:	51                   	push   ecx
c001052d:	52                   	push   edx
c001052e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010531:	83 c4 10             	add    esp,0x10
c0010534:	99                   	cdq    
c0010535:	59                   	pop    ecx
c0010536:	5b                   	pop    ebx
c0010537:	5e                   	pop    esi
c0010538:	c3                   	ret    
c0010539:	59                   	pop    ecx
c001053a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001053f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010544:	5b                   	pop    ebx
c0010545:	5e                   	pop    esi
c0010546:	c3                   	ret    

c0010547 <SysGetDiskVolumeLabel(regs*)>:
c0010547:	57                   	push   edi
c0010548:	56                   	push   esi
c0010549:	53                   	push   ebx
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010551:	83 fa 19             	cmp    edx,0x19
c0010554:	77 38                	ja     c001058e <SysGetDiskVolumeLabel(regs*)+0x47>
c0010556:	8b 0c 95 40 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd5c0]
c001055d:	85 c9                	test   ecx,ecx
c001055f:	74 2d                	je     c001058e <SysGetDiskVolumeLabel(regs*)+0x47>
c0010561:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010564:	85 db                	test   ebx,ebx
c0010566:	74 26                	je     c001058e <SysGetDiskVolumeLabel(regs*)+0x47>
c0010568:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001056b:	85 f6                	test   esi,esi
c001056d:	74 1f                	je     c001058e <SysGetDiskVolumeLabel(regs*)+0x47>
c001056f:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010575:	85 c0                	test   eax,eax
c0010577:	74 15                	je     c001058e <SysGetDiskVolumeLabel(regs*)+0x47>
c0010579:	83 ec 0c             	sub    esp,0xc
c001057c:	8b 38                	mov    edi,DWORD PTR [eax]
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	52                   	push   edx
c0010581:	51                   	push   ecx
c0010582:	50                   	push   eax
c0010583:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010586:	83 c4 20             	add    esp,0x20
c0010589:	99                   	cdq    
c001058a:	5b                   	pop    ebx
c001058b:	5e                   	pop    esi
c001058c:	5f                   	pop    edi
c001058d:	c3                   	ret    
c001058e:	5b                   	pop    ebx
c001058f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010594:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010599:	5e                   	pop    esi
c001059a:	5f                   	pop    edi
c001059b:	c3                   	ret    

c001059c <SysShutdown(regs*)>:
c001059c:	83 ec 0c             	sub    esp,0xc
c001059f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00105a6:	85 c0                	test   eax,eax
c00105a8:	74 18                	je     c00105c2 <SysShutdown(regs*)+0x26>
c00105aa:	83 f8 01             	cmp    eax,0x1
c00105ad:	74 38                	je     c00105e7 <SysShutdown(regs*)+0x4b>
c00105af:	83 f8 02             	cmp    eax,0x2
c00105b2:	74 24                	je     c00105d8 <SysShutdown(regs*)+0x3c>
c00105b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105be:	83 c4 0c             	add    esp,0xc
c00105c1:	c3                   	ret    
c00105c2:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00105c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00105c9:	6a 00                	push   0x0
c00105cb:	6a 00                	push   0x0
c00105cd:	6a 00                	push   0x0
c00105cf:	50                   	push   eax
c00105d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00105d3:	83 c4 10             	add    esp,0x10
c00105d6:	eb dc                	jmp    c00105b4 <SysShutdown(regs*)+0x18>
c00105d8:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00105dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00105df:	6a 00                	push   0x0
c00105e1:	6a 00                	push   0x0
c00105e3:	6a 01                	push   0x1
c00105e5:	eb e8                	jmp    c00105cf <SysShutdown(regs*)+0x33>
c00105e7:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 02                	je     c00105f2 <SysShutdown(regs*)+0x56>
c00105f0:	ff d0                	call   eax
c00105f2:	31 c0                	xor    eax,eax
c00105f4:	31 d2                	xor    edx,edx
c00105f6:	83 c4 0c             	add    esp,0xc
c00105f9:	c3                   	ret    

c00105fa <SysRealpath(regs*)>:
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010601:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010604:	85 d2                	test   edx,edx
c0010606:	74 07                	je     c001060f <SysRealpath(regs*)+0x15>
c0010608:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001060b:	85 c0                	test   eax,eax
c001060d:	75 0b                	jne    c001061a <SysRealpath(regs*)+0x20>
c001060f:	b8 01 00 00 00       	mov    eax,0x1
c0010614:	31 d2                	xor    edx,edx
c0010616:	83 c4 0c             	add    esp,0xc
c0010619:	c3                   	ret    
c001061a:	51                   	push   ecx
c001061b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010621:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010624:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001062a:	51                   	push   ecx
c001062b:	52                   	push   edx
c001062c:	50                   	push   eax
c001062d:	e8 a2 a2 ff ff       	call   c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010632:	83 c4 10             	add    esp,0x10
c0010635:	31 c0                	xor    eax,eax
c0010637:	31 d2                	xor    edx,edx
c0010639:	83 c4 0c             	add    esp,0xc
c001063c:	c3                   	ret    

c001063d <SysReadDir(regs*)>:
c001063d:	53                   	push   ebx
c001063e:	83 ec 18             	sub    esp,0x18
c0010641:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010645:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010648:	83 f8 02             	cmp    eax,0x2
c001064b:	76 61                	jbe    c00106ae <SysReadDir(regs*)+0x71>
c001064d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010654:	77 49                	ja     c001069f <SysReadDir(regs*)+0x62>
c0010656:	83 ec 0c             	sub    esp,0xc
c0010659:	50                   	push   eax
c001065a:	e8 00 8b ff ff       	call   c000915f <getFromFileDescriptor(int)>
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	85 c0                	test   eax,eax
c0010664:	74 39                	je     c001069f <SysReadDir(regs*)+0x62>
c0010666:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001066e:	83 ec 0c             	sub    esp,0xc
c0010671:	8b 10                	mov    edx,DWORD PTR [eax]
c0010673:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010677:	51                   	push   ecx
c0010678:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001067b:	51                   	push   ecx
c001067c:	6a 00                	push   0x0
c001067e:	68 10 01 00 00       	push   0x110
c0010683:	50                   	push   eax
c0010684:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010687:	83 c4 20             	add    esp,0x20
c001068a:	85 c0                	test   eax,eax
c001068c:	74 29                	je     c00106b7 <SysReadDir(regs*)+0x7a>
c001068e:	83 f8 07             	cmp    eax,0x7
c0010691:	74 1b                	je     c00106ae <SysReadDir(regs*)+0x71>
c0010693:	b8 02 00 00 00       	mov    eax,0x2
c0010698:	31 d2                	xor    edx,edx
c001069a:	83 c4 18             	add    esp,0x18
c001069d:	5b                   	pop    ebx
c001069e:	c3                   	ret    
c001069f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106a9:	83 c4 18             	add    esp,0x18
c00106ac:	5b                   	pop    ebx
c00106ad:	c3                   	ret    
c00106ae:	b8 01 00 00 00       	mov    eax,0x1
c00106b3:	31 d2                	xor    edx,edx
c00106b5:	eb e3                	jmp    c001069a <SysReadDir(regs*)+0x5d>
c00106b7:	31 c0                	xor    eax,eax
c00106b9:	31 d2                	xor    edx,edx
c00106bb:	eb dd                	jmp    c001069a <SysReadDir(regs*)+0x5d>

c00106bd <SysIsATTY(regs*)>:
c00106bd:	83 ec 0c             	sub    esp,0xc
c00106c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106c7:	83 f8 02             	cmp    eax,0x2
c00106ca:	76 07                	jbe    c00106d3 <SysIsATTY(regs*)+0x16>
c00106cc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00106d1:	75 28                	jne    c00106fb <SysIsATTY(regs*)+0x3e>
c00106d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00106e1:	85 c0                	test   eax,eax
c00106e3:	74 26                	je     c001070b <SysIsATTY(regs*)+0x4e>
c00106e5:	83 ec 0c             	sub    esp,0xc
c00106e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00106ea:	50                   	push   eax
c00106eb:	ff 12                	call   DWORD PTR [edx]
c00106ed:	31 d2                	xor    edx,edx
c00106ef:	25 ff 00 00 00       	and    eax,0xff
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	83 c4 0c             	add    esp,0xc
c00106fa:	c3                   	ret    
c00106fb:	83 ec 0c             	sub    esp,0xc
c00106fe:	50                   	push   eax
c00106ff:	e8 5b 8a ff ff       	call   c000915f <getFromFileDescriptor(int)>
c0010704:	83 c4 10             	add    esp,0x10
c0010707:	85 c0                	test   eax,eax
c0010709:	75 da                	jne    c00106e5 <SysIsATTY(regs*)+0x28>
c001070b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010710:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010715:	83 c4 0c             	add    esp,0xc
c0010718:	c3                   	ret    

c0010719 <SysSeek(regs*)>:
c0010719:	53                   	push   ebx
c001071a:	83 ec 08             	sub    esp,0x8
c001071d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010721:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010724:	8d 50 fd             	lea    edx,[eax-0x3]
c0010727:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001072d:	77 34                	ja     c0010763 <SysSeek(regs*)+0x4a>
c001072f:	83 ec 0c             	sub    esp,0xc
c0010732:	50                   	push   eax
c0010733:	e8 27 8a ff ff       	call   c000915f <getFromFileDescriptor(int)>
c0010738:	83 c4 0c             	add    esp,0xc
c001073b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001073e:	31 db                	xor    ebx,ebx
c0010740:	53                   	push   ebx
c0010741:	51                   	push   ecx
c0010742:	50                   	push   eax
c0010743:	e8 b4 a4 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	85 c0                	test   eax,eax
c001074d:	0f 95 c0             	setne  al
c0010750:	31 d2                	xor    edx,edx
c0010752:	25 ff 00 00 00       	and    eax,0xff
c0010757:	f7 d8                	neg    eax
c0010759:	83 d2 00             	adc    edx,0x0
c001075c:	83 c4 08             	add    esp,0x8
c001075f:	f7 da                	neg    edx
c0010761:	5b                   	pop    ebx
c0010762:	c3                   	ret    
c0010763:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010768:	ba ff ff ff ff       	mov    edx,0xffffffff
c001076d:	83 c4 08             	add    esp,0x8
c0010770:	5b                   	pop    ebx
c0010771:	c3                   	ret    

c0010772 <SysTell(regs*)>:
c0010772:	53                   	push   ebx
c0010773:	83 ec 08             	sub    esp,0x8
c0010776:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001077a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001077d:	83 f8 02             	cmp    eax,0x2
c0010780:	76 50                	jbe    c00107d2 <SysTell(regs*)+0x60>
c0010782:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010787:	76 19                	jbe    c00107a2 <SysTell(regs*)+0x30>
c0010789:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001078c:	31 d2                	xor    edx,edx
c001078e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010794:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001079b:	31 c0                	xor    eax,eax
c001079d:	83 c4 08             	add    esp,0x8
c00107a0:	5b                   	pop    ebx
c00107a1:	c3                   	ret    
c00107a2:	83 ec 0c             	sub    esp,0xc
c00107a5:	50                   	push   eax
c00107a6:	e8 b4 89 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c00107ab:	5a                   	pop    edx
c00107ac:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00107af:	59                   	pop    ecx
c00107b0:	53                   	push   ebx
c00107b1:	50                   	push   eax
c00107b2:	e8 9b a4 ff ff       	call   c000ac52 <File::tell(unsigned long long*)>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	85 c0                	test   eax,eax
c00107bc:	0f 95 c0             	setne  al
c00107bf:	31 d2                	xor    edx,edx
c00107c1:	25 ff 00 00 00       	and    eax,0xff
c00107c6:	f7 d8                	neg    eax
c00107c8:	83 d2 00             	adc    edx,0x0
c00107cb:	83 c4 08             	add    esp,0x8
c00107ce:	f7 da                	neg    edx
c00107d0:	5b                   	pop    ebx
c00107d1:	c3                   	ret    
c00107d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107dc:	83 c4 08             	add    esp,0x8
c00107df:	5b                   	pop    ebx
c00107e0:	c3                   	ret    

c00107e1 <SysSize(regs*)>:
c00107e1:	53                   	push   ebx
c00107e2:	83 ec 18             	sub    esp,0x18
c00107e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107ec:	83 f8 02             	cmp    eax,0x2
c00107ef:	76 56                	jbe    c0010847 <SysSize(regs*)+0x66>
c00107f1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107f6:	76 19                	jbe    c0010811 <SysSize(regs*)+0x30>
c00107f8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00107fb:	31 d2                	xor    edx,edx
c00107fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001080a:	31 c0                	xor    eax,eax
c001080c:	83 c4 18             	add    esp,0x18
c001080f:	5b                   	pop    ebx
c0010810:	c3                   	ret    
c0010811:	83 ec 0c             	sub    esp,0xc
c0010814:	50                   	push   eax
c0010815:	e8 45 89 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c001081a:	83 c4 0c             	add    esp,0xc
c001081d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010821:	52                   	push   edx
c0010822:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010825:	52                   	push   edx
c0010826:	50                   	push   eax
c0010827:	e8 be a5 ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c001082c:	83 c4 10             	add    esp,0x10
c001082f:	85 c0                	test   eax,eax
c0010831:	0f 95 c0             	setne  al
c0010834:	31 d2                	xor    edx,edx
c0010836:	25 ff 00 00 00       	and    eax,0xff
c001083b:	f7 d8                	neg    eax
c001083d:	83 d2 00             	adc    edx,0x0
c0010840:	83 c4 18             	add    esp,0x18
c0010843:	f7 da                	neg    edx
c0010845:	5b                   	pop    ebx
c0010846:	c3                   	ret    
c0010847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001084c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010851:	83 c4 18             	add    esp,0x18
c0010854:	5b                   	pop    ebx
c0010855:	c3                   	ret    

c0010856 <SysSizeFromFilename(regs*)>:
c0010856:	57                   	push   edi
c0010857:	56                   	push   esi
c0010858:	53                   	push   ebx
c0010859:	83 ec 20             	sub    esp,0x20
c001085c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010860:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010863:	83 fb 02             	cmp    ebx,0x2
c0010866:	0f 86 8c 00 00 00    	jbe    c00108f8 <SysSizeFromFilename(regs*)+0xa2>
c001086c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010872:	76 1b                	jbe    c001088f <SysSizeFromFilename(regs*)+0x39>
c0010874:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010877:	31 d2                	xor    edx,edx
c0010879:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001087f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010886:	83 c4 20             	add    esp,0x20
c0010889:	31 c0                	xor    eax,eax
c001088b:	5b                   	pop    ebx
c001088c:	5e                   	pop    esi
c001088d:	5f                   	pop    edi
c001088e:	c3                   	ret    
c001088f:	83 ec 0c             	sub    esp,0xc
c0010892:	68 14 01 00 00       	push   0x114
c0010897:	e8 1d 6f ff ff       	call   c00077b9 <malloc>
c001089c:	83 c4 0c             	add    esp,0xc
c001089f:	89 c7                	mov    edi,eax
c00108a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108a9:	50                   	push   eax
c00108aa:	53                   	push   ebx
c00108ab:	57                   	push   edi
c00108ac:	e8 cd a1 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c00108b1:	83 c4 0c             	add    esp,0xc
c00108b4:	8d 44 24 23          	lea    eax,[esp+0x23]
c00108b8:	50                   	push   eax
c00108b9:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00108bc:	52                   	push   edx
c00108bd:	57                   	push   edi
c00108be:	e8 27 a5 ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c00108c3:	83 c4 10             	add    esp,0x10
c00108c6:	85 ff                	test   edi,edi
c00108c8:	74 14                	je     c00108de <SysSizeFromFilename(regs*)+0x88>
c00108ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108ce:	8b 17                	mov    edx,DWORD PTR [edi]
c00108d0:	83 ec 0c             	sub    esp,0xc
c00108d3:	57                   	push   edi
c00108d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108d7:	83 c4 10             	add    esp,0x10
c00108da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108de:	85 c0                	test   eax,eax
c00108e0:	0f 95 c0             	setne  al
c00108e3:	31 d2                	xor    edx,edx
c00108e5:	25 ff 00 00 00       	and    eax,0xff
c00108ea:	f7 d8                	neg    eax
c00108ec:	83 d2 00             	adc    edx,0x0
c00108ef:	83 c4 20             	add    esp,0x20
c00108f2:	f7 da                	neg    edx
c00108f4:	5b                   	pop    ebx
c00108f5:	5e                   	pop    esi
c00108f6:	5f                   	pop    edi
c00108f7:	c3                   	ret    
c00108f8:	83 c4 20             	add    esp,0x20
c00108fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010900:	5b                   	pop    ebx
c0010901:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010906:	5e                   	pop    esi
c0010907:	5f                   	pop    edi
c0010908:	c3                   	ret    

c0010909 <SysClose(regs*)>:
c0010909:	53                   	push   ebx
c001090a:	83 ec 08             	sub    esp,0x8
c001090d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010911:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010914:	83 f8 02             	cmp    eax,0x2
c0010917:	76 41                	jbe    c001095a <SysClose(regs*)+0x51>
c0010919:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001091f:	83 fa 01             	cmp    edx,0x1
c0010922:	76 2d                	jbe    c0010951 <SysClose(regs*)+0x48>
c0010924:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010929:	77 2f                	ja     c001095a <SysClose(regs*)+0x51>
c001092b:	83 ec 0c             	sub    esp,0xc
c001092e:	50                   	push   eax
c001092f:	e8 2b 88 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c0010934:	89 c3                	mov    ebx,eax
c0010936:	89 04 24             	mov    DWORD PTR [esp],eax
c0010939:	e8 5e a2 ff ff       	call   c000ab9c <File::close()>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	85 db                	test   ebx,ebx
c0010943:	74 0c                	je     c0010951 <SysClose(regs*)+0x48>
c0010945:	83 ec 0c             	sub    esp,0xc
c0010948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001094a:	53                   	push   ebx
c001094b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	31 c0                	xor    eax,eax
c0010953:	31 d2                	xor    edx,edx
c0010955:	83 c4 08             	add    esp,0x8
c0010958:	5b                   	pop    ebx
c0010959:	c3                   	ret    
c001095a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001095f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010964:	83 c4 08             	add    esp,0x8
c0010967:	5b                   	pop    ebx
c0010968:	c3                   	ret    

c0010969 <SysOpenDir(regs*)>:
c0010969:	56                   	push   esi
c001096a:	53                   	push   ebx
c001096b:	50                   	push   eax
c001096c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010970:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010973:	85 c0                	test   eax,eax
c0010975:	74 5b                	je     c00109d2 <SysOpenDir(regs*)+0x69>
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	68 14 01 00 00       	push   0x114
c001097f:	e8 35 6e ff ff       	call   c00077b9 <malloc>
c0010984:	83 c4 0c             	add    esp,0xc
c0010987:	89 c6                	mov    esi,eax
c0010989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001098e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010991:	50                   	push   eax
c0010992:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010995:	50                   	push   eax
c0010996:	56                   	push   esi
c0010997:	e8 0c a6 ff ff       	call   c000afa8 <Directory::Directory(char const*, Process*)>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	85 f6                	test   esi,esi
c00109a1:	74 2f                	je     c00109d2 <SysOpenDir(regs*)+0x69>
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	56                   	push   esi
c00109a7:	e8 bc a6 ff ff       	call   c000b068 <Directory::open()>
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	85 c0                	test   eax,eax
c00109b1:	75 1f                	jne    c00109d2 <SysOpenDir(regs*)+0x69>
c00109b3:	83 ec 0c             	sub    esp,0xc
c00109b6:	56                   	push   esi
c00109b7:	e8 ae 84 ff ff       	call   c0008e6a <UnixFile::getFileDescriptor()>
c00109bc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00109bf:	83 c4 10             	add    esp,0x10
c00109c2:	89 02                	mov    DWORD PTR [edx],eax
c00109c4:	c1 f8 1f             	sar    eax,0x1f
c00109c7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00109ca:	31 c0                	xor    eax,eax
c00109cc:	59                   	pop    ecx
c00109cd:	31 d2                	xor    edx,edx
c00109cf:	5b                   	pop    ebx
c00109d0:	5e                   	pop    esi
c00109d1:	c3                   	ret    
c00109d2:	59                   	pop    ecx
c00109d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <SysCloseDir(regs*)>:
c00109e0:	53                   	push   ebx
c00109e1:	83 ec 08             	sub    esp,0x8
c00109e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109eb:	8d 50 fd             	lea    edx,[eax-0x3]
c00109ee:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109f4:	77 2f                	ja     c0010a25 <SysCloseDir(regs*)+0x45>
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	50                   	push   eax
c00109fa:	e8 60 87 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c00109ff:	89 c3                	mov    ebx,eax
c0010a01:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a04:	e8 bb a6 ff ff       	call   c000b0c4 <Directory::close()>
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	85 db                	test   ebx,ebx
c0010a0e:	74 0c                	je     c0010a1c <SysCloseDir(regs*)+0x3c>
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a15:	53                   	push   ebx
c0010a16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	31 c0                	xor    eax,eax
c0010a1e:	31 d2                	xor    edx,edx
c0010a20:	83 c4 08             	add    esp,0x8
c0010a23:	5b                   	pop    ebx
c0010a24:	c3                   	ret    
c0010a25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a2f:	83 c4 08             	add    esp,0x8
c0010a32:	5b                   	pop    ebx
c0010a33:	c3                   	ret    

c0010a34 <SysMakeDir(regs*)>:
c0010a34:	56                   	push   esi
c0010a35:	53                   	push   ebx
c0010a36:	83 ec 10             	sub    esp,0x10
c0010a39:	68 14 01 00 00       	push   0x114
c0010a3e:	e8 76 6d ff ff       	call   c00077b9 <malloc>
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	89 c3                	mov    ebx,eax
c0010a48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a4d:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010a50:	56                   	push   esi
c0010a51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010a55:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a58:	50                   	push   eax
c0010a59:	53                   	push   ebx
c0010a5a:	e8 49 a5 ff ff       	call   c000afa8 <Directory::Directory(char const*, Process*)>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	85 db                	test   ebx,ebx
c0010a64:	74 32                	je     c0010a98 <SysMakeDir(regs*)+0x64>
c0010a66:	83 ec 0c             	sub    esp,0xc
c0010a69:	53                   	push   ebx
c0010a6a:	e8 d9 a7 ff ff       	call   c000b248 <Directory::create()>
c0010a6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a72:	89 c6                	mov    esi,eax
c0010a74:	e8 4b a6 ff ff       	call   c000b0c4 <Directory::close()>
c0010a79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a81:	83 c4 10             	add    esp,0x10
c0010a84:	31 c0                	xor    eax,eax
c0010a86:	59                   	pop    ecx
c0010a87:	85 f6                	test   esi,esi
c0010a89:	5b                   	pop    ebx
c0010a8a:	0f 95 c0             	setne  al
c0010a8d:	5e                   	pop    esi
c0010a8e:	31 d2                	xor    edx,edx
c0010a90:	f7 d8                	neg    eax
c0010a92:	83 d2 00             	adc    edx,0x0
c0010a95:	f7 da                	neg    edx
c0010a97:	c3                   	ret    
c0010a98:	59                   	pop    ecx
c0010a99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	c3                   	ret    

c0010aa6 <SysWait(regs*)>:
c0010aa6:	83 ec 10             	sub    esp,0x10
c0010aa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010aad:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ab0:	52                   	push   edx
c0010ab1:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010ab4:	51                   	push   ecx
c0010ab5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ab8:	50                   	push   eax
c0010ab9:	e8 02 2b 00 00       	call   c00135c0 <waitTask(int, int*, int)>
c0010abe:	83 c4 1c             	add    esp,0x1c
c0010ac1:	99                   	cdq    
c0010ac2:	c3                   	ret    

c0010ac3 <SysNotImpl(regs*)>:
c0010ac3:	83 ec 18             	sub    esp,0x18
c0010ac6:	68 91 e2 01 c0       	push   0xc001e291
c0010acb:	e8 b3 f6 ff ff       	call   c0010183 <KePanic(char const*)>
c0010ad0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ad5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ada:	83 c4 1c             	add    esp,0x1c
c0010add:	c3                   	ret    

c0010ade <SysPanic(regs*)>:
c0010ade:	83 ec 18             	sub    esp,0x18
c0010ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ae5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ae8:	50                   	push   eax
c0010ae9:	e8 95 f6 ff ff       	call   c0010183 <KePanic(char const*)>
c0010aee:	b8 01 00 00 00       	mov    eax,0x1
c0010af3:	31 d2                	xor    edx,edx
c0010af5:	83 c4 1c             	add    esp,0x1c
c0010af8:	c3                   	ret    

c0010af9 <SysRmdir(regs*)>:
c0010af9:	56                   	push   esi
c0010afa:	53                   	push   ebx
c0010afb:	83 ec 20             	sub    esp,0x20
c0010afe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b02:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b05:	68 14 01 00 00       	push   0x114
c0010b0a:	e8 aa 6c ff ff       	call   c00077b9 <malloc>
c0010b0f:	83 c4 0c             	add    esp,0xc
c0010b12:	89 c3                	mov    ebx,eax
c0010b14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b1c:	50                   	push   eax
c0010b1d:	56                   	push   esi
c0010b1e:	53                   	push   ebx
c0010b1f:	e8 5a 9f ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0010b24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b27:	e8 8a a1 ff ff       	call   c000acb6 <File::unlink()>
c0010b2c:	83 c4 10             	add    esp,0x10
c0010b2f:	85 db                	test   ebx,ebx
c0010b31:	74 14                	je     c0010b47 <SysRmdir(regs*)+0x4e>
c0010b33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b37:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	53                   	push   ebx
c0010b3d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b40:	83 c4 10             	add    esp,0x10
c0010b43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b47:	85 c0                	test   eax,eax
c0010b49:	0f 95 c0             	setne  al
c0010b4c:	31 d2                	xor    edx,edx
c0010b4e:	25 ff 00 00 00       	and    eax,0xff
c0010b53:	f7 d8                	neg    eax
c0010b55:	83 d2 00             	adc    edx,0x0
c0010b58:	83 c4 14             	add    esp,0x14
c0010b5b:	f7 da                	neg    edx
c0010b5d:	5b                   	pop    ebx
c0010b5e:	5e                   	pop    esi
c0010b5f:	c3                   	ret    

c0010b60 <SysUnlink(regs*)>:
c0010b60:	56                   	push   esi
c0010b61:	53                   	push   ebx
c0010b62:	83 ec 20             	sub    esp,0x20
c0010b65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b69:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b6c:	68 14 01 00 00       	push   0x114
c0010b71:	e8 43 6c ff ff       	call   c00077b9 <malloc>
c0010b76:	83 c4 0c             	add    esp,0xc
c0010b79:	89 c3                	mov    ebx,eax
c0010b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b83:	50                   	push   eax
c0010b84:	56                   	push   esi
c0010b85:	53                   	push   ebx
c0010b86:	e8 f3 9e ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0010b8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b8e:	e8 23 a1 ff ff       	call   c000acb6 <File::unlink()>
c0010b93:	83 c4 10             	add    esp,0x10
c0010b96:	85 db                	test   ebx,ebx
c0010b98:	74 14                	je     c0010bae <SysUnlink(regs*)+0x4e>
c0010b9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ba0:	83 ec 0c             	sub    esp,0xc
c0010ba3:	53                   	push   ebx
c0010ba4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bae:	85 c0                	test   eax,eax
c0010bb0:	0f 95 c0             	setne  al
c0010bb3:	31 d2                	xor    edx,edx
c0010bb5:	25 ff 00 00 00       	and    eax,0xff
c0010bba:	f7 d8                	neg    eax
c0010bbc:	83 d2 00             	adc    edx,0x0
c0010bbf:	83 c4 14             	add    esp,0x14
c0010bc2:	f7 da                	neg    edx
c0010bc4:	5b                   	pop    ebx
c0010bc5:	5e                   	pop    esi
c0010bc6:	c3                   	ret    

c0010bc7 <SysGetArgv(regs*)>:
c0010bc7:	83 ec 0c             	sub    esp,0xc
c0010bca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010bce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010bd1:	85 c0                	test   eax,eax
c0010bd3:	78 2c                	js     c0010c01 <SysGetArgv(regs*)+0x3a>
c0010bd5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010bdb:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010bde:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010be4:	7d 1b                	jge    c0010c01 <SysGetArgv(regs*)+0x3a>
c0010be6:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010bed:	85 c0                	test   eax,eax
c0010bef:	74 18                	je     c0010c09 <SysGetArgv(regs*)+0x42>
c0010bf1:	83 ec 08             	sub    esp,0x8
c0010bf4:	50                   	push   eax
c0010bf5:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010bf8:	50                   	push   eax
c0010bf9:	e8 02 fa fe ff       	call   c0000600 <strcpy>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	31 c0                	xor    eax,eax
c0010c03:	31 d2                	xor    edx,edx
c0010c05:	83 c4 0c             	add    esp,0xc
c0010c08:	c3                   	ret    
c0010c09:	b8 01 00 00 00       	mov    eax,0x1
c0010c0e:	31 d2                	xor    edx,edx
c0010c10:	83 c4 0c             	add    esp,0xc
c0010c13:	c3                   	ret    

c0010c14 <SysUSleep(regs*)>:
c0010c14:	83 ec 1c             	sub    esp,0x1c
c0010c17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010c1b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010c1e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010c21:	6a 00                	push   0x0
c0010c23:	6a 64                	push   0x64
c0010c25:	52                   	push   edx
c0010c26:	50                   	push   eax
c0010c27:	e8 64 b0 00 00       	call   c001bc90 <__udivdi3>
c0010c2c:	83 c4 14             	add    esp,0x14
c0010c2f:	50                   	push   eax
c0010c30:	e8 5f 2a 00 00       	call   c0013694 <milliTenthSleep(unsigned int)>
c0010c35:	31 c0                	xor    eax,eax
c0010c37:	31 d2                	xor    edx,edx
c0010c39:	83 c4 1c             	add    esp,0x1c
c0010c3c:	c3                   	ret    

c0010c3d <SysSpawn(regs*)>:
c0010c3d:	56                   	push   esi
c0010c3e:	53                   	push   ebx
c0010c3f:	50                   	push   eax
c0010c40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c44:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c47:	85 c0                	test   eax,eax
c0010c49:	75 08                	jne    c0010c53 <SysSpawn(regs*)+0x16>
c0010c4b:	59                   	pop    ecx
c0010c4c:	31 c0                	xor    eax,eax
c0010c4e:	31 d2                	xor    edx,edx
c0010c50:	5b                   	pop    ebx
c0010c51:	5e                   	pop    esi
c0010c52:	c3                   	ret    
c0010c53:	83 ec 0c             	sub    esp,0xc
c0010c56:	68 1f 07 00 00       	push   0x71f
c0010c5b:	e8 59 6b ff ff       	call   c00077b9 <malloc>
c0010c60:	83 c4 10             	add    esp,0x10
c0010c63:	89 c6                	mov    esi,eax
c0010c65:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c6b:	85 c0                	test   eax,eax
c0010c6d:	75 33                	jne    c0010ca2 <SysSpawn(regs*)+0x65>
c0010c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c77:	52                   	push   edx
c0010c78:	50                   	push   eax
c0010c79:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010c7c:	53                   	push   ebx
c0010c7d:	56                   	push   esi
c0010c7e:	e8 f5 20 00 00       	call   c0012d78 <Process::Process(char const*, Process*, char**)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c8d:	75 bc                	jne    c0010c4b <SysSpawn(regs*)+0xe>
c0010c8f:	83 ec 0c             	sub    esp,0xc
c0010c92:	56                   	push   esi
c0010c93:	e8 d4 25 00 00       	call   c001326c <Process::createUserThread()>
c0010c98:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	99                   	cdq    
c0010c9e:	59                   	pop    ecx
c0010c9f:	5b                   	pop    ebx
c0010ca0:	5e                   	pop    esi
c0010ca1:	c3                   	ret    
c0010ca2:	31 c0                	xor    eax,eax
c0010ca4:	eb d1                	jmp    c0010c77 <SysSpawn(regs*)+0x3a>

c0010ca6 <SysGetEnv(regs*)>:
c0010ca6:	57                   	push   edi
c0010ca7:	56                   	push   esi
c0010ca8:	53                   	push   ebx
c0010ca9:	83 ec 1c             	sub    esp,0x1c
c0010cac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cb5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010cb8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010cbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cbe:	50                   	push   eax
c0010cbf:	e8 77 f3 ff ff       	call   c001003b <Krnl::getProcessTotalEnvCount(Process*)>
c0010cc4:	83 c4 10             	add    esp,0x10
c0010cc7:	39 c7                	cmp    edi,eax
c0010cc9:	7c 14                	jl     c0010cdf <SysGetEnv(regs*)+0x39>
c0010ccb:	85 f6                	test   esi,esi
c0010ccd:	75 0b                	jne    c0010cda <SysGetEnv(regs*)+0x34>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	31 c0                	xor    eax,eax
c0010cd4:	5b                   	pop    ebx
c0010cd5:	31 d2                	xor    edx,edx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	c3                   	ret    
c0010cda:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cdd:	eb f0                	jmp    c0010ccf <SysGetEnv(regs*)+0x29>
c0010cdf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010ce3:	52                   	push   edx
c0010ce4:	57                   	push   edi
c0010ce5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ceb:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010cee:	51                   	push   ecx
c0010cef:	50                   	push   eax
c0010cf0:	e8 66 f3 ff ff       	call   c001005b <Krnl::getProcessEnvPair(Process*, int)>
c0010cf5:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cfc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d00:	83 c4 0c             	add    esp,0xc
c0010d03:	85 db                	test   ebx,ebx
c0010d05:	75 23                	jne    c0010d2a <SysGetEnv(regs*)+0x84>
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	50                   	push   eax
c0010d0b:	e8 30 f8 fe ff       	call   c0000540 <strlen>
c0010d10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d13:	89 c3                	mov    ebx,eax
c0010d15:	e8 26 f8 fe ff       	call   c0000540 <strlen>
c0010d1a:	31 d2                	xor    edx,edx
c0010d1c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	5b                   	pop    ebx
c0010d27:	5e                   	pop    esi
c0010d28:	5f                   	pop    edi
c0010d29:	c3                   	ret    
c0010d2a:	83 ec 08             	sub    esp,0x8
c0010d2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010d30:	50                   	push   eax
c0010d31:	56                   	push   esi
c0010d32:	e8 c9 f8 fe ff       	call   c0000600 <strcpy>
c0010d37:	58                   	pop    eax
c0010d38:	5a                   	pop    edx
c0010d39:	68 ab e2 01 c0       	push   0xc001e2ab
c0010d3e:	56                   	push   esi
c0010d3f:	e8 7c fa fe ff       	call   c00007c0 <strcat>
c0010d44:	59                   	pop    ecx
c0010d45:	5b                   	pop    ebx
c0010d46:	57                   	push   edi
c0010d47:	56                   	push   esi
c0010d48:	e8 73 fa fe ff       	call   c00007c0 <strcat>
c0010d4d:	83 c4 10             	add    esp,0x10
c0010d50:	e9 7a ff ff ff       	jmp    c0010ccf <SysGetEnv(regs*)+0x29>

c0010d55 <SysSetFatAttrib(regs*)>:
c0010d55:	57                   	push   edi
c0010d56:	56                   	push   esi
c0010d57:	53                   	push   ebx
c0010d58:	83 ec 1c             	sub    esp,0x1c
c0010d5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010d5f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010d62:	68 14 01 00 00       	push   0x114
c0010d67:	e8 4d 6a ff ff       	call   c00077b9 <malloc>
c0010d6c:	83 c4 0c             	add    esp,0xc
c0010d6f:	89 c3                	mov    ebx,eax
c0010d71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d79:	50                   	push   eax
c0010d7a:	57                   	push   edi
c0010d7b:	53                   	push   ebx
c0010d7c:	e8 fd 9c ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0010d81:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d84:	83 c4 0c             	add    esp,0xc
c0010d87:	0f b6 d4             	movzx  edx,ah
c0010d8a:	25 ff 00 00 00       	and    eax,0xff
c0010d8f:	52                   	push   edx
c0010d90:	50                   	push   eax
c0010d91:	53                   	push   ebx
c0010d92:	e8 b9 9f ff ff       	call   c000ad50 <File::chfatattr(unsigned char, unsigned char)>
c0010d97:	83 c4 10             	add    esp,0x10
c0010d9a:	85 db                	test   ebx,ebx
c0010d9c:	74 14                	je     c0010db2 <SysSetFatAttrib(regs*)+0x5d>
c0010d9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010da2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010da4:	83 ec 0c             	sub    esp,0xc
c0010da7:	53                   	push   ebx
c0010da8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010db2:	85 c0                	test   eax,eax
c0010db4:	0f 95 c0             	setne  al
c0010db7:	31 d2                	xor    edx,edx
c0010db9:	25 ff 00 00 00       	and    eax,0xff
c0010dbe:	f7 d8                	neg    eax
c0010dc0:	83 d2 00             	adc    edx,0x0
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	f7 da                	neg    edx
c0010dc8:	5b                   	pop    ebx
c0010dc9:	5e                   	pop    esi
c0010dca:	5f                   	pop    edi
c0010dcb:	c3                   	ret    

c0010dcc <SysPipe(regs*)>:
c0010dcc:	57                   	push   edi
c0010dcd:	56                   	push   esi
c0010dce:	53                   	push   ebx
c0010dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd3:	83 ec 0c             	sub    esp,0xc
c0010dd6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010dd9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ddc:	6a 20                	push   0x20
c0010dde:	e8 d6 69 ff ff       	call   c00077b9 <malloc>
c0010de3:	89 c3                	mov    ebx,eax
c0010de5:	58                   	pop    eax
c0010de6:	5a                   	pop    edx
c0010de7:	68 00 50 00 00       	push   0x5000
c0010dec:	53                   	push   ebx
c0010ded:	e8 cc 72 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010df2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df5:	e8 70 80 ff ff       	call   c0008e6a <UnixFile::getFileDescriptor()>
c0010dfa:	89 07                	mov    DWORD PTR [edi],eax
c0010dfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dff:	e8 66 80 ff ff       	call   c0008e6a <UnixFile::getFileDescriptor()>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	89 06                	mov    DWORD PTR [esi],eax
c0010e09:	31 d2                	xor    edx,edx
c0010e0b:	5b                   	pop    ebx
c0010e0c:	31 c0                	xor    eax,eax
c0010e0e:	5e                   	pop    esi
c0010e0f:	5f                   	pop    edi
c0010e10:	c3                   	ret    

c0010e11 <SysGetUnixTime(regs*)>:
c0010e11:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0010e16:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e20:	e9 69 a6 ff ff       	jmp    c000b48e <Clock::timeInSecondsLocal()>

c0010e25 <string_ends_with(char const*, char const*)>:
c0010e25:	57                   	push   edi
c0010e26:	56                   	push   esi
c0010e27:	53                   	push   ebx
c0010e28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e2c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010e30:	83 ec 0c             	sub    esp,0xc
c0010e33:	53                   	push   ebx
c0010e34:	e8 07 f7 fe ff       	call   c0000540 <strlen>
c0010e39:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e3c:	89 c6                	mov    esi,eax
c0010e3e:	e8 fd f6 fe ff       	call   c0000540 <strlen>
c0010e43:	83 c4 10             	add    esp,0x10
c0010e46:	39 c6                	cmp    esi,eax
c0010e48:	7d 06                	jge    c0010e50 <string_ends_with(char const*, char const*)+0x2b>
c0010e4a:	5b                   	pop    ebx
c0010e4b:	31 c0                	xor    eax,eax
c0010e4d:	5e                   	pop    esi
c0010e4e:	5f                   	pop    edi
c0010e4f:	c3                   	ret    
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	29 c6                	sub    esi,eax
c0010e55:	57                   	push   edi
c0010e56:	01 f3                	add    ebx,esi
c0010e58:	53                   	push   ebx
c0010e59:	e8 82 f8 fe ff       	call   c00006e0 <strcmp>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	85 c0                	test   eax,eax
c0010e63:	5b                   	pop    ebx
c0010e64:	0f 94 c0             	sete   al
c0010e67:	5e                   	pop    esi
c0010e68:	25 ff 00 00 00       	and    eax,0xff
c0010e6d:	5f                   	pop    edi
c0010e6e:	c3                   	ret    

c0010e6f <SysOpen(regs*)>:
c0010e6f:	56                   	push   esi
c0010e70:	53                   	push   ebx
c0010e71:	81 ec 04 01 00 00    	sub    esp,0x104
c0010e77:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010e7e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e81:	85 c9                	test   ecx,ecx
c0010e83:	0f 84 b9 01 00 00    	je     c0011042 <SysOpen(regs*)+0x1d3>
c0010e89:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e8c:	85 c0                	test   eax,eax
c0010e8e:	0f 84 ae 01 00 00    	je     c0011042 <SysOpen(regs*)+0x1d3>
c0010e94:	52                   	push   edx
c0010e95:	68 ad e2 01 c0       	push   0xc001e2ad
c0010e9a:	50                   	push   eax
c0010e9b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e9f:	56                   	push   esi
c0010ea0:	e8 2f 9a ff ff       	call   c000a8d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010ea5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ea8:	e8 93 f6 fe ff       	call   c0000540 <strlen>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	48                   	dec    eax
c0010eb1:	74 1d                	je     c0010ed0 <SysOpen(regs*)+0x61>
c0010eb3:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010eb6:	eb 0f                	jmp    c0010ec7 <SysOpen(regs*)+0x58>
c0010eb8:	80 fa 3a             	cmp    dl,0x3a
c0010ebb:	74 0f                	je     c0010ecc <SysOpen(regs*)+0x5d>
c0010ebd:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010ec1:	48                   	dec    eax
c0010ec2:	74 0c                	je     c0010ed0 <SysOpen(regs*)+0x61>
c0010ec4:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010ec7:	80 fa 2e             	cmp    dl,0x2e
c0010eca:	75 ec                	jne    c0010eb8 <SysOpen(regs*)+0x49>
c0010ecc:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010ed0:	83 ec 08             	sub    esp,0x8
c0010ed3:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010ed8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010edb:	50                   	push   eax
c0010edc:	e8 44 ff ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010ee1:	83 c4 10             	add    esp,0x10
c0010ee4:	85 c0                	test   eax,eax
c0010ee6:	74 1d                	je     c0010f05 <SysOpen(regs*)+0x96>
c0010ee8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eeb:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ef1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ef8:	81 c4 04 01 00 00    	add    esp,0x104
c0010efe:	31 c0                	xor    eax,eax
c0010f00:	31 d2                	xor    edx,edx
c0010f02:	5b                   	pop    ebx
c0010f03:	5e                   	pop    esi
c0010f04:	c3                   	ret    
c0010f05:	83 ec 08             	sub    esp,0x8
c0010f08:	68 b6 e2 01 c0       	push   0xc001e2b6
c0010f0d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f10:	50                   	push   eax
c0010f11:	e8 0f ff ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	85 c0                	test   eax,eax
c0010f1b:	75 cb                	jne    c0010ee8 <SysOpen(regs*)+0x79>
c0010f1d:	83 ec 08             	sub    esp,0x8
c0010f20:	68 b2 e2 01 c0       	push   0xc001e2b2
c0010f25:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f28:	50                   	push   eax
c0010f29:	e8 b2 f7 fe ff       	call   c00006e0 <strcmp>
c0010f2e:	83 c4 10             	add    esp,0x10
c0010f31:	85 c0                	test   eax,eax
c0010f33:	74 b3                	je     c0010ee8 <SysOpen(regs*)+0x79>
c0010f35:	83 ec 08             	sub    esp,0x8
c0010f38:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010f3d:	56                   	push   esi
c0010f3e:	e8 e2 fe ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	85 c0                	test   eax,eax
c0010f48:	75 9e                	jne    c0010ee8 <SysOpen(regs*)+0x79>
c0010f4a:	83 ec 08             	sub    esp,0x8
c0010f4d:	68 bb e2 01 c0       	push   0xc001e2bb
c0010f52:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f55:	50                   	push   eax
c0010f56:	e8 ca fe ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	85 c0                	test   eax,eax
c0010f60:	0f 85 ef 00 00 00    	jne    c0011055 <SysOpen(regs*)+0x1e6>
c0010f66:	83 ec 08             	sub    esp,0x8
c0010f69:	68 c0 e2 01 c0       	push   0xc001e2c0
c0010f6e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f71:	50                   	push   eax
c0010f72:	e8 ae fe ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010f77:	83 c4 10             	add    esp,0x10
c0010f7a:	85 c0                	test   eax,eax
c0010f7c:	0f 85 d3 00 00 00    	jne    c0011055 <SysOpen(regs*)+0x1e6>
c0010f82:	83 ec 08             	sub    esp,0x8
c0010f85:	68 bc e2 01 c0       	push   0xc001e2bc
c0010f8a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f8d:	51                   	push   ecx
c0010f8e:	e8 4d f7 fe ff       	call   c00006e0 <strcmp>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	85 c0                	test   eax,eax
c0010f98:	0f 84 b7 00 00 00    	je     c0011055 <SysOpen(regs*)+0x1e6>
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	68 bb e2 01 c0       	push   0xc001e2bb
c0010fa6:	56                   	push   esi
c0010fa7:	e8 79 fe ff ff       	call   c0010e25 <string_ends_with(char const*, char const*)>
c0010fac:	83 c4 10             	add    esp,0x10
c0010faf:	85 c0                	test   eax,eax
c0010fb1:	0f 85 9e 00 00 00    	jne    c0011055 <SysOpen(regs*)+0x1e6>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	68 14 01 00 00       	push   0x114
c0010fbf:	e8 f5 67 ff ff       	call   c00077b9 <malloc>
c0010fc4:	83 c4 0c             	add    esp,0xc
c0010fc7:	89 c6                	mov    esi,eax
c0010fc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fd1:	50                   	push   eax
c0010fd2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010fd5:	52                   	push   edx
c0010fd6:	56                   	push   esi
c0010fd7:	e8 a2 9a ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0010fdc:	83 c4 10             	add    esp,0x10
c0010fdf:	85 f6                	test   esi,esi
c0010fe1:	74 5f                	je     c0011042 <SysOpen(regs*)+0x1d3>
c0010fe3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fe6:	89 d0                	mov    eax,edx
c0010fe8:	25 ff 00 00 00       	and    eax,0xff
c0010fed:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010ff0:	89 d0                	mov    eax,edx
c0010ff2:	83 e0 01             	and    eax,0x1
c0010ff5:	f6 c2 02             	test   dl,0x2
c0010ff8:	74 03                	je     c0010ffd <SysOpen(regs*)+0x18e>
c0010ffa:	83 c8 02             	or     eax,0x2
c0010ffd:	f6 c2 04             	test   dl,0x4
c0011000:	74 03                	je     c0011005 <SysOpen(regs*)+0x196>
c0011002:	83 c8 04             	or     eax,0x4
c0011005:	f6 c2 08             	test   dl,0x8
c0011008:	74 03                	je     c001100d <SysOpen(regs*)+0x19e>
c001100a:	83 c8 0a             	or     eax,0xa
c001100d:	83 e2 10             	and    edx,0x10
c0011010:	74 03                	je     c0011015 <SysOpen(regs*)+0x1a6>
c0011012:	83 c8 12             	or     eax,0x12
c0011015:	83 ec 08             	sub    esp,0x8
c0011018:	50                   	push   eax
c0011019:	56                   	push   esi
c001101a:	e8 1f 9b ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	85 c0                	test   eax,eax
c0011024:	75 1c                	jne    c0011042 <SysOpen(regs*)+0x1d3>
c0011026:	83 ec 0c             	sub    esp,0xc
c0011029:	56                   	push   esi
c001102a:	e8 3b 7e ff ff       	call   c0008e6a <UnixFile::getFileDescriptor()>
c001102f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	89 02                	mov    DWORD PTR [edx],eax
c0011037:	c1 f8 1f             	sar    eax,0x1f
c001103a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001103d:	e9 b6 fe ff ff       	jmp    c0010ef8 <SysOpen(regs*)+0x89>
c0011042:	81 c4 04 01 00 00    	add    esp,0x104
c0011048:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001104d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011052:	5b                   	pop    ebx
c0011053:	5e                   	pop    esi
c0011054:	c3                   	ret    
c0011055:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011058:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001105e:	e9 8e fe ff ff       	jmp    c0010ef1 <SysOpen(regs*)+0x82>

c0011063 <KeSystemCall(regs*, void*)>:
c0011063:	53                   	push   ebx
c0011064:	83 ec 10             	sub    esp,0x10
c0011067:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001106b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001106e:	68 c5 e2 01 c0       	push   0xc001e2c5
c0011073:	e8 90 94 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0011078:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	83 f8 31             	cmp    eax,0x31
c0011081:	77 16                	ja     c0011099 <KeSystemCall(regs*, void*)+0x36>
c0011083:	8b 14 85 e0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c20]
c001108a:	85 d2                	test   edx,edx
c001108c:	74 0b                	je     c0011099 <KeSystemCall(regs*, void*)+0x36>
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	53                   	push   ebx
c0011092:	ff d2                	call   edx
c0011094:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011097:	eb 0d                	jmp    c00110a6 <KeSystemCall(regs*, void*)+0x43>
c0011099:	52                   	push   edx
c001109a:	52                   	push   edx
c001109b:	50                   	push   eax
c001109c:	68 d5 e2 01 c0       	push   0xc001e2d5
c00110a1:	e8 62 94 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00110ae:	31 d2                	xor    edx,edx
c00110b0:	83 c4 08             	add    esp,0x8
c00110b3:	5b                   	pop    ebx
c00110b4:	c3                   	ret    

c00110b5 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00110b5:	55                   	push   ebp
c00110b6:	57                   	push   edi
c00110b7:	56                   	push   esi
c00110b8:	53                   	push   ebx
c00110b9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00110bf:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00110c6:	8a 1e                	mov    bl,BYTE PTR [esi]
c00110c8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00110cb:	80 fb 40             	cmp    bl,0x40
c00110ce:	75 1b                	jne    c00110eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00110d0:	8a 16                	mov    dl,BYTE PTR [esi]
c00110d2:	84 d2                	test   dl,dl
c00110d4:	0f 84 f1 00 00 00    	je     c00111cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110da:	8d 46 01             	lea    eax,[esi+0x1]
c00110dd:	80 fa 3a             	cmp    dl,0x3a
c00110e0:	74 04                	je     c00110e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00110e2:	89 c6                	mov    esi,eax
c00110e4:	eb ea                	jmp    c00110d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00110e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110e9:	89 c6                	mov    esi,eax
c00110eb:	50                   	push   eax
c00110ec:	6a 40                	push   0x40
c00110ee:	6a 00                	push   0x0
c00110f0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110f4:	50                   	push   eax
c00110f5:	e8 d6 f3 fe ff       	call   c00004d0 <memset>
c00110fa:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011101:	31 c0                	xor    eax,eax
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011108:	84 c9                	test   cl,cl
c001110a:	0f 84 bb 00 00 00    	je     c00111cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011110:	3d c7 00 00 00       	cmp    eax,0xc7
c0011115:	0f 8f b0 00 00 00    	jg     c00111cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001111b:	80 f9 0a             	cmp    cl,0xa
c001111e:	0f 85 98 00 00 00    	jne    c00111bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011124:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011129:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001112d:	a8 df                	test   al,0xdf
c001112f:	0f 94 c1             	sete   cl
c0011132:	3c 23                	cmp    al,0x23
c0011134:	0f 94 c2             	sete   dl
c0011137:	08 d1                	or     cl,dl
c0011139:	75 4a                	jne    c0011185 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001113b:	8d 50 f7             	lea    edx,[eax-0x9]
c001113e:	80 fa 01             	cmp    dl,0x1
c0011141:	76 42                	jbe    c0011185 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011143:	3c 5b                	cmp    al,0x5b
c0011145:	75 42                	jne    c0011189 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011147:	80 fb 40             	cmp    bl,0x40
c001114a:	75 39                	jne    c0011185 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001114c:	83 ec 0c             	sub    esp,0xc
c001114f:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011153:	52                   	push   edx
c0011154:	e8 e7 f3 fe ff       	call   c0000540 <strlen>
c0011159:	83 c4 10             	add    esp,0x10
c001115c:	83 f8 3f             	cmp    eax,0x3f
c001115f:	77 6a                	ja     c00111cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011161:	50                   	push   eax
c0011162:	50                   	push   eax
c0011163:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011167:	52                   	push   edx
c0011168:	8d 54 24 24          	lea    edx,[esp+0x24]
c001116c:	52                   	push   edx
c001116d:	e8 8e f4 fe ff       	call   c0000600 <strcpy>
c0011172:	58                   	pop    eax
c0011173:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011177:	52                   	push   edx
c0011178:	e8 c3 f3 fe ff       	call   c0000540 <strlen>
c001117d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011182:	83 c4 10             	add    esp,0x10
c0011185:	31 d2                	xor    edx,edx
c0011187:	eb 3a                	jmp    c00111c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011189:	80 fb 40             	cmp    bl,0x40
c001118c:	74 06                	je     c0011194 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001118e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011192:	eb 20                	jmp    c00111b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011194:	50                   	push   eax
c0011195:	50                   	push   eax
c0011196:	55                   	push   ebp
c0011197:	8d 44 24 24          	lea    eax,[esp+0x24]
c001119b:	50                   	push   eax
c001119c:	e8 3f f5 fe ff       	call   c00006e0 <strcmp>
c00111a1:	83 c4 10             	add    esp,0x10
c00111a4:	85 c0                	test   eax,eax
c00111a6:	75 dd                	jne    c0011185 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111a8:	eb e4                	jmp    c001118e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00111aa:	8d 50 01             	lea    edx,[eax+0x1]
c00111ad:	80 f9 3d             	cmp    cl,0x3d
c00111b0:	74 1d                	je     c00111cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00111b2:	89 d0                	mov    eax,edx
c00111b4:	8a 08                	mov    cl,BYTE PTR [eax]
c00111b6:	84 c9                	test   cl,cl
c00111b8:	75 f0                	jne    c00111aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00111ba:	eb 0f                	jmp    c00111cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00111bc:	8d 50 01             	lea    edx,[eax+0x1]
c00111bf:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00111c3:	47                   	inc    edi
c00111c4:	89 d0                	mov    eax,edx
c00111c6:	e9 3b ff ff ff       	jmp    c0011106 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00111cb:	31 c0                	xor    eax,eax
c00111cd:	eb 33                	jmp    c0011202 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00111cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00111d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00111d6:	50                   	push   eax
c00111d7:	50                   	push   eax
c00111d8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00111dc:	50                   	push   eax
c00111dd:	56                   	push   esi
c00111de:	e8 fd f4 fe ff       	call   c00006e0 <strcmp>
c00111e3:	83 c4 10             	add    esp,0x10
c00111e6:	85 c0                	test   eax,eax
c00111e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111ec:	75 97                	jne    c0011185 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111ee:	51                   	push   ecx
c00111ef:	51                   	push   ecx
c00111f0:	52                   	push   edx
c00111f1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00111f8:	e8 03 f4 fe ff       	call   c0000600 <strcpy>
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	b0 01                	mov    al,0x1
c0011202:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011208:	5b                   	pop    ebx
c0011209:	5e                   	pop    esi
c001120a:	5f                   	pop    edi
c001120b:	5d                   	pop    ebp
c001120c:	c3                   	ret    

c001120d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001120d:	57                   	push   edi
c001120e:	56                   	push   esi
c001120f:	53                   	push   ebx
c0011210:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011216:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001121d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011224:	53                   	push   ebx
c0011225:	e8 16 f3 fe ff       	call   c0000540 <strlen>
c001122a:	89 34 24             	mov    DWORD PTR [esp],esi
c001122d:	89 c7                	mov    edi,eax
c001122f:	e8 0c f3 fe ff       	call   c0000540 <strlen>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001123b:	3d ff 00 00 00       	cmp    eax,0xff
c0011240:	0f 87 d3 00 00 00    	ja     c0011319 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011246:	57                   	push   edi
c0011247:	57                   	push   edi
c0011248:	56                   	push   esi
c0011249:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001124d:	56                   	push   esi
c001124e:	e8 ad f3 fe ff       	call   c0000600 <strcpy>
c0011253:	58                   	pop    eax
c0011254:	5a                   	pop    edx
c0011255:	68 86 e5 01 c0       	push   0xc001e586
c001125a:	56                   	push   esi
c001125b:	e8 60 f5 fe ff       	call   c00007c0 <strcat>
c0011260:	59                   	pop    ecx
c0011261:	5f                   	pop    edi
c0011262:	53                   	push   ebx
c0011263:	56                   	push   esi
c0011264:	e8 57 f5 fe ff       	call   c00007c0 <strcat>
c0011269:	58                   	pop    eax
c001126a:	5a                   	pop    edx
c001126b:	68 e9 e2 01 c0       	push   0xc001e2e9
c0011270:	56                   	push   esi
c0011271:	e8 4a f5 fe ff       	call   c00007c0 <strcat>
c0011276:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001127d:	e8 37 65 ff ff       	call   c00077b9 <malloc>
c0011282:	83 c4 0c             	add    esp,0xc
c0011285:	89 c3                	mov    ebx,eax
c0011287:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c001128d:	56                   	push   esi
c001128e:	50                   	push   eax
c001128f:	e8 ea 97 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	85 db                	test   ebx,ebx
c0011299:	74 7e                	je     c0011319 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001129b:	51                   	push   ecx
c001129c:	51                   	push   ecx
c001129d:	6a 01                	push   0x1
c001129f:	53                   	push   ebx
c00112a0:	e8 99 98 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	85 c0                	test   eax,eax
c00112aa:	74 08                	je     c00112b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00112ac:	83 ec 0c             	sub    esp,0xc
c00112af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112b1:	53                   	push   ebx
c00112b2:	eb 5f                	jmp    c0011313 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00112b4:	52                   	push   edx
c00112b5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00112b9:	50                   	push   eax
c00112ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c00112be:	50                   	push   eax
c00112bf:	53                   	push   ebx
c00112c0:	e8 25 9b ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c00112c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00112c9:	83 c4 10             	add    esp,0x10
c00112cc:	89 c1                	mov    ecx,eax
c00112ce:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00112d2:	74 31                	je     c0011305 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	50                   	push   eax
c00112d8:	e8 dc 64 ff ff       	call   c00077b9 <malloc>
c00112dd:	89 c6                	mov    esi,eax
c00112df:	58                   	pop    eax
c00112e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e2:	8d 54 24 20          	lea    edx,[esp+0x20]
c00112e6:	52                   	push   edx
c00112e7:	56                   	push   esi
c00112e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112f0:	53                   	push   ebx
c00112f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112f4:	83 c4 20             	add    esp,0x20
c00112f7:	85 c0                	test   eax,eax
c00112f9:	75 0a                	jne    c0011305 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112ff:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011303:	74 18                	je     c001131d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	53                   	push   ebx
c0011309:	e8 8e 98 ff ff       	call   c000ab9c <File::close()>
c001130e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011313:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	31 c0                	xor    eax,eax
c001131b:	eb 3b                	jmp    c0011358 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	53                   	push   ebx
c0011321:	e8 76 98 ff ff       	call   c000ab9c <File::close()>
c0011326:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011328:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001132b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001132e:	83 c4 0c             	add    esp,0xc
c0011331:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011338:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001133f:	56                   	push   esi
c0011340:	e8 70 fd ff ff       	call   c00110b5 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011345:	89 34 24             	mov    DWORD PTR [esp],esi
c0011348:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001134c:	e8 78 64 ff ff       	call   c00077c9 <free>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011358:	81 c4 20 01 00 00    	add    esp,0x120
c001135e:	5b                   	pop    ebx
c001135f:	5e                   	pop    esi
c0011360:	5f                   	pop    edi
c0011361:	c3                   	ret    

c0011362 <Reg::getLine(char*, char*, char*)>:
c0011362:	57                   	push   edi
c0011363:	56                   	push   esi
c0011364:	53                   	push   ebx
c0011365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011369:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001136d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011371:	57                   	push   edi
c0011372:	56                   	push   esi
c0011373:	53                   	push   ebx
c0011374:	68 ee e2 01 c0       	push   0xc001e2ee
c0011379:	e8 8f fe ff ff       	call   c001120d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	84 c0                	test   al,al
c0011383:	75 10                	jne    c0011395 <Reg::getLine(char*, char*, char*)+0x33>
c0011385:	57                   	push   edi
c0011386:	56                   	push   esi
c0011387:	53                   	push   ebx
c0011388:	68 13 e3 01 c0       	push   0xc001e313
c001138d:	e8 7b fe ff ff       	call   c001120d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	5b                   	pop    ebx
c0011396:	5e                   	pop    esi
c0011397:	5f                   	pop    edi
c0011398:	c3                   	ret    

c0011399 <Reg::readInt(char*, char*, int*)>:
c0011399:	55                   	push   ebp
c001139a:	57                   	push   edi
c001139b:	56                   	push   esi
c001139c:	53                   	push   ebx
c001139d:	81 ec f0 00 00 00    	sub    esp,0xf0
c00113a3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00113a7:	57                   	push   edi
c00113a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00113af:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00113b6:	e8 a7 ff ff ff       	call   c0011362 <Reg::getLine(char*, char*, char*)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	84 c0                	test   al,al
c00113c0:	0f 84 b3 00 00 00    	je     c0011479 <Reg::readInt(char*, char*, int*)+0xe0>
c00113c6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00113ca:	80 fa 2b             	cmp    dl,0x2b
c00113cd:	74 0c                	je     c00113db <Reg::readInt(char*, char*, int*)+0x42>
c00113cf:	80 fa 2d             	cmp    dl,0x2d
c00113d2:	75 0e                	jne    c00113e2 <Reg::readInt(char*, char*, int*)+0x49>
c00113d4:	ba 01 00 00 00       	mov    edx,0x1
c00113d9:	eb 0b                	jmp    c00113e6 <Reg::readInt(char*, char*, int*)+0x4d>
c00113db:	ba 01 00 00 00       	mov    edx,0x1
c00113e0:	eb 02                	jmp    c00113e4 <Reg::readInt(char*, char*, int*)+0x4b>
c00113e2:	31 d2                	xor    edx,edx
c00113e4:	31 c0                	xor    eax,eax
c00113e6:	be 0a 00 00 00       	mov    esi,0xa
c00113eb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00113f0:	75 20                	jne    c0011412 <Reg::readInt(char*, char*, int*)+0x79>
c00113f2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00113f6:	80 f9 78             	cmp    cl,0x78
c00113f9:	75 0a                	jne    c0011405 <Reg::readInt(char*, char*, int*)+0x6c>
c00113fb:	83 c2 02             	add    edx,0x2
c00113fe:	be 10 00 00 00       	mov    esi,0x10
c0011403:	eb 0d                	jmp    c0011412 <Reg::readInt(char*, char*, int*)+0x79>
c0011405:	80 f9 62             	cmp    cl,0x62
c0011408:	75 08                	jne    c0011412 <Reg::readInt(char*, char*, int*)+0x79>
c001140a:	83 c2 02             	add    edx,0x2
c001140d:	be 02 00 00 00       	mov    esi,0x2
c0011412:	01 d7                	add    edi,edx
c0011414:	31 d2                	xor    edx,edx
c0011416:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011418:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001141c:	80 fb 0d             	cmp    bl,0xd
c001141f:	0f 94 c3             	sete   bl
c0011422:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011427:	0f 94 c1             	sete   cl
c001142a:	08 cb                	or     bl,cl
c001142c:	75 3a                	jne    c0011468 <Reg::readInt(char*, char*, int*)+0xcf>
c001142e:	0f af d6             	imul   edx,esi
c0011431:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011436:	83 fe 10             	cmp    esi,0x10
c0011439:	75 26                	jne    c0011461 <Reg::readInt(char*, char*, int*)+0xc8>
c001143b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001143f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011442:	89 e9                	mov    ecx,ebp
c0011444:	80 f9 05             	cmp    cl,0x5
c0011447:	77 06                	ja     c001144f <Reg::readInt(char*, char*, int*)+0xb6>
c0011449:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001144d:	eb 16                	jmp    c0011465 <Reg::readInt(char*, char*, int*)+0xcc>
c001144f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011453:	83 e9 61             	sub    ecx,0x61
c0011456:	80 f9 05             	cmp    cl,0x5
c0011459:	77 06                	ja     c0011461 <Reg::readInt(char*, char*, int*)+0xc8>
c001145b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001145f:	eb 04                	jmp    c0011465 <Reg::readInt(char*, char*, int*)+0xcc>
c0011461:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011465:	47                   	inc    edi
c0011466:	eb ae                	jmp    c0011416 <Reg::readInt(char*, char*, int*)+0x7d>
c0011468:	84 c0                	test   al,al
c001146a:	74 02                	je     c001146e <Reg::readInt(char*, char*, int*)+0xd5>
c001146c:	f7 da                	neg    edx
c001146e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011475:	89 10                	mov    DWORD PTR [eax],edx
c0011477:	88 d8                	mov    al,bl
c0011479:	81 c4 ec 00 00 00    	add    esp,0xec
c001147f:	5b                   	pop    ebx
c0011480:	5e                   	pop    esi
c0011481:	5f                   	pop    edi
c0011482:	5d                   	pop    ebp
c0011483:	c3                   	ret    

c0011484 <Reg::readString(char*, char*, char*, int)>:
c0011484:	57                   	push   edi
c0011485:	56                   	push   esi
c0011486:	53                   	push   ebx
c0011487:	81 ec d4 00 00 00    	sub    esp,0xd4
c001148d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011494:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011498:	57                   	push   edi
c0011499:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00114a0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00114a7:	e8 b6 fe ff ff       	call   c0011362 <Reg::getLine(char*, char*, char*)>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	89 c6                	mov    esi,eax
c00114b1:	84 c0                	test   al,al
c00114b3:	74 44                	je     c00114f9 <Reg::readString(char*, char*, char*, int)+0x75>
c00114b5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00114bc:	31 c0                	xor    eax,eax
c00114be:	4a                   	dec    edx
c00114bf:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00114c2:	84 c9                	test   cl,cl
c00114c4:	74 0f                	je     c00114d5 <Reg::readString(char*, char*, char*, int)+0x51>
c00114c6:	39 c2                	cmp    edx,eax
c00114c8:	7e 0b                	jle    c00114d5 <Reg::readString(char*, char*, char*, int)+0x51>
c00114ca:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00114cd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00114d2:	40                   	inc    eax
c00114d3:	eb ea                	jmp    c00114bf <Reg::readString(char*, char*, char*, int)+0x3b>
c00114d5:	83 ec 0c             	sub    esp,0xc
c00114d8:	53                   	push   ebx
c00114d9:	e8 62 f0 fe ff       	call   c0000540 <strlen>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00114e6:	75 11                	jne    c00114f9 <Reg::readString(char*, char*, char*, int)+0x75>
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	53                   	push   ebx
c00114ec:	e8 4f f0 fe ff       	call   c0000540 <strlen>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00114f9:	81 c4 d0 00 00 00    	add    esp,0xd0
c00114ff:	89 f0                	mov    eax,esi
c0011501:	5b                   	pop    ebx
c0011502:	5e                   	pop    esi
c0011503:	5f                   	pop    edi
c0011504:	c3                   	ret    

c0011505 <Reg::readBool(char*, char*, bool*)>:
c0011505:	83 ec 20             	sub    esp,0x20
c0011508:	8d 44 24 10          	lea    eax,[esp+0x10]
c001150c:	50                   	push   eax
c001150d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011515:	e8 7f fe ff ff       	call   c0011399 <Reg::readInt(char*, char*, int*)>
c001151a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001151f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011523:	0f 95 02             	setne  BYTE PTR [edx]
c0011526:	83 c4 2c             	add    esp,0x2c
c0011529:	c3                   	ret    

c001152a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001152a:	53                   	push   ebx
c001152b:	83 ec 1c             	sub    esp,0x1c
c001152e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011532:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011536:	50                   	push   eax
c0011537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001153b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001153f:	e8 c1 ff ff ff       	call   c0011505 <Reg::readBool(char*, char*, bool*)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	84 c0                	test   al,al
c0011549:	74 04                	je     c001154f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001154b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001154f:	88 d8                	mov    al,bl
c0011551:	83 c4 18             	add    esp,0x18
c0011554:	5b                   	pop    ebx
c0011555:	c3                   	ret    

c0011556 <Reg::readIntWithDefault(char*, char*, int)>:
c0011556:	53                   	push   ebx
c0011557:	83 ec 1c             	sub    esp,0x1c
c001155a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001155e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011562:	50                   	push   eax
c0011563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001156b:	e8 29 fe ff ff       	call   c0011399 <Reg::readInt(char*, char*, int*)>
c0011570:	83 c4 10             	add    esp,0x10
c0011573:	84 c0                	test   al,al
c0011575:	74 04                	je     c001157b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011577:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001157b:	89 d8                	mov    eax,ebx
c001157d:	83 c4 18             	add    esp,0x18
c0011580:	5b                   	pop    ebx
c0011581:	c3                   	ret    

c0011582 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011582:	57                   	push   edi
c0011583:	56                   	push   esi
c0011584:	56                   	push   esi
c0011585:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011589:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001158d:	56                   	push   esi
c001158e:	57                   	push   edi
c001158f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011597:	e8 e8 fe ff ff       	call   c0011484 <Reg::readString(char*, char*, char*, int)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	84 c0                	test   al,al
c00115a1:	75 1a                	jne    c00115bd <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00115a3:	51                   	push   ecx
c00115a4:	56                   	push   esi
c00115a5:	6a 00                	push   0x0
c00115a7:	57                   	push   edi
c00115a8:	e8 23 ef fe ff       	call   c00004d0 <memset>
c00115ad:	8d 4e ff             	lea    ecx,[esi-0x1]
c00115b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00115bd:	89 f8                	mov    eax,edi
c00115bf:	5a                   	pop    edx
c00115c0:	5e                   	pop    esi
c00115c1:	5f                   	pop    edi
c00115c2:	c3                   	ret    

c00115c3 <SysEject(regs*)>:
c00115c3:	83 ec 0c             	sub    esp,0xc
c00115c6:	83 ca ff             	or     edx,0xffffffff
c00115c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115cd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00115d0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115d5:	83 e9 41             	sub    ecx,0x41
c00115d8:	83 f9 19             	cmp    ecx,0x19
c00115db:	77 18                	ja     c00115f5 <SysEject(regs*)+0x32>
c00115dd:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c00115e4:	85 c9                	test   ecx,ecx
c00115e6:	74 0d                	je     c00115f5 <SysEject(regs*)+0x32>
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	51                   	push   ecx
c00115ec:	e8 ab b5 ff ff       	call   c000cb9c <LogicalDisk::eject()>
c00115f1:	83 c4 10             	add    esp,0x10
c00115f4:	99                   	cdq    
c00115f5:	83 c4 0c             	add    esp,0xc
c00115f8:	c3                   	ret    

c00115f9 <SysExit(regs*)>:
c00115f9:	83 ec 18             	sub    esp,0x18
c00115fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011600:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011603:	e8 b0 26 00 00       	call   c0013cb8 <terminateTask(int)>
c0011608:	83 c8 ff             	or     eax,0xffffffff
c001160b:	83 c4 1c             	add    esp,0x1c
c001160e:	89 c2                	mov    edx,eax
c0011610:	c3                   	ret    

c0011611 <SysGetCwd(regs*)>:
c0011611:	83 ec 10             	sub    esp,0x10
c0011614:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011618:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001161b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001161e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011623:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011626:	e8 55 92 ff ff       	call   c000a880 <Fs::getcwd(Process*, char*, int)>
c001162b:	83 c4 1c             	add    esp,0x1c
c001162e:	99                   	cdq    
c001162f:	c3                   	ret    

c0011630 <SysGetPID(regs*)>:
c0011630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011635:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011638:	8b 00                	mov    eax,DWORD PTR [eax]
c001163a:	99                   	cdq    
c001163b:	c3                   	ret    

c001163c <SysGetRAMData(regs*)>:
c001163c:	8b 0d 08 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020508
c0011642:	69 05 04 05 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020504,0xc8
c001164c:	99                   	cdq    
c001164d:	f7 f9                	idiv   ecx
c001164f:	c1 e0 18             	shl    eax,0x18
c0011652:	09 c8                	or     eax,ecx
c0011654:	99                   	cdq    
c0011655:	c3                   	ret    

c0011656 <SysGetVGAPtr(regs*)>:
c0011656:	55                   	push   ebp
c0011657:	57                   	push   edi
c0011658:	56                   	push   esi
c0011659:	53                   	push   ebx
c001165a:	83 ec 18             	sub    esp,0x18
c001165d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011661:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011664:	e8 4f 21 00 00       	call   c00137b8 <Thr::processFromPID(int)>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	89 c1                	mov    ecx,eax
c001166e:	b8 01 00 00 00       	mov    eax,0x1
c0011673:	85 c9                	test   ecx,ecx
c0011675:	74 57                	je     c00116ce <SysGetVGAPtr(regs*)+0x78>
c0011677:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001167d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011681:	74 0c                	je     c001168f <SysGetVGAPtr(regs*)+0x39>
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	55                   	push   ebp
c0011687:	e8 6b 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001168c:	83 c4 10             	add    esp,0x10
c001168f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011692:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011695:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001169a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001169c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001169f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116a2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00116a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116ab:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00116ae:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00116b4:	50                   	push   eax
c00116b5:	50                   	push   eax
c00116b6:	68 2e e3 01 c0       	push   0xc001e32e
c00116bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116be:	05 a8 0f 00 00       	add    eax,0xfa8
c00116c3:	50                   	push   eax
c00116c4:	e8 37 ef fe ff       	call   c0000600 <strcpy>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	31 c0                	xor    eax,eax
c00116ce:	83 c4 0c             	add    esp,0xc
c00116d1:	31 d2                	xor    edx,edx
c00116d3:	5b                   	pop    ebx
c00116d4:	5e                   	pop    esi
c00116d5:	5f                   	pop    edi
c00116d6:	5d                   	pop    ebp
c00116d7:	c3                   	ret    

c00116d8 <SysLoadDLL(regs*)>:
c00116d8:	56                   	push   esi
c00116d9:	53                   	push   ebx
c00116da:	31 d2                	xor    edx,edx
c00116dc:	51                   	push   ecx
c00116dd:	b8 01 00 00 00       	mov    eax,0x1
c00116e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116e6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00116ea:	0f 84 8c 00 00 00    	je     c001177c <SysLoadDLL(regs*)+0xa4>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	68 14 01 00 00       	push   0x114
c00116f8:	e8 bc 60 ff ff       	call   c00077b9 <malloc>
c00116fd:	83 c4 0c             	add    esp,0xc
c0011700:	89 c3                	mov    ebx,eax
c0011702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011707:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001170a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001170d:	53                   	push   ebx
c001170e:	e8 6b 93 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	31 d2                	xor    edx,edx
c0011718:	b8 02 00 00 00       	mov    eax,0x2
c001171d:	85 db                	test   ebx,ebx
c001171f:	74 5b                	je     c001177c <SysLoadDLL(regs*)+0xa4>
c0011721:	83 ec 0c             	sub    esp,0xc
c0011724:	53                   	push   ebx
c0011725:	e8 82 96 ff ff       	call   c000adac <File::exists()>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	84 c0                	test   al,al
c001172f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011731:	75 11                	jne    c0011744 <SysLoadDLL(regs*)+0x6c>
c0011733:	83 ec 0c             	sub    esp,0xc
c0011736:	53                   	push   ebx
c0011737:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	b8 03 00 00 00       	mov    eax,0x3
c0011742:	eb 36                	jmp    c001177a <SysLoadDLL(regs*)+0xa2>
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	53                   	push   ebx
c0011748:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001174b:	58                   	pop    eax
c001174c:	5a                   	pop    edx
c001174d:	6a 00                	push   0x0
c001174f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011752:	e8 4b 12 00 00       	call   c00129a2 <Thr::loadDLL(char const*, bool)>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	89 c1                	mov    ecx,eax
c001175c:	31 d2                	xor    edx,edx
c001175e:	b8 04 00 00 00       	mov    eax,0x4
c0011763:	85 c9                	test   ecx,ecx
c0011765:	74 15                	je     c001177c <SysLoadDLL(regs*)+0xa4>
c0011767:	53                   	push   ebx
c0011768:	53                   	push   ebx
c0011769:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c001176f:	51                   	push   ecx
c0011770:	e8 5e 14 00 00       	call   c0012bd3 <Thr::executeDLL(unsigned long, void*)>
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	31 c0                	xor    eax,eax
c001177a:	31 d2                	xor    edx,edx
c001177c:	59                   	pop    ecx
c001177d:	5b                   	pop    ebx
c001177e:	5e                   	pop    esi
c001177f:	c3                   	ret    

c0011780 <SysRead(regs*)>:
c0011780:	57                   	push   edi
c0011781:	56                   	push   esi
c0011782:	53                   	push   ebx
c0011783:	83 ec 10             	sub    esp,0x10
c0011786:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001178a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001178d:	83 f8 02             	cmp    eax,0x2
c0011790:	77 10                	ja     c00117a2 <SysRead(regs*)+0x22>
c0011792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011797:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001179a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00117a0:	eb 0e                	jmp    c00117b0 <SysRead(regs*)+0x30>
c00117a2:	83 ec 0c             	sub    esp,0xc
c00117a5:	50                   	push   eax
c00117a6:	e8 b4 79 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c00117ab:	83 c4 10             	add    esp,0x10
c00117ae:	89 c1                	mov    ecx,eax
c00117b0:	83 c8 ff             	or     eax,0xffffffff
c00117b3:	85 c9                	test   ecx,ecx
c00117b5:	89 c2                	mov    edx,eax
c00117b7:	74 28                	je     c00117e1 <SysRead(regs*)+0x61>
c00117b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117c1:	31 ff                	xor    edi,edi
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00117c8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117cc:	52                   	push   edx
c00117cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00117d0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00117d3:	57                   	push   edi
c00117d4:	56                   	push   esi
c00117d5:	51                   	push   ecx
c00117d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00117dd:	83 c4 20             	add    esp,0x20
c00117e0:	99                   	cdq    
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	5b                   	pop    ebx
c00117e5:	5e                   	pop    esi
c00117e6:	5f                   	pop    edi
c00117e7:	c3                   	ret    

c00117e8 <SysSbrk(regs*)>:
c00117e8:	56                   	push   esi
c00117e9:	53                   	push   ebx
c00117ea:	50                   	push   eax
c00117eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00117f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117f7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00117fa:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011800:	85 db                	test   ebx,ebx
c0011802:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011805:	74 02                	je     c0011809 <SysSbrk(regs*)+0x21>
c0011807:	79 06                	jns    c001180f <SysSbrk(regs*)+0x27>
c0011809:	89 f0                	mov    eax,esi
c001180b:	31 d2                	xor    edx,edx
c001180d:	eb 2a                	jmp    c0011839 <SysSbrk(regs*)+0x51>
c001180f:	83 c8 ff             	or     eax,0xffffffff
c0011812:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011818:	89 c2                	mov    edx,eax
c001181a:	77 1d                	ja     c0011839 <SysSbrk(regs*)+0x51>
c001181c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011822:	50                   	push   eax
c0011823:	c1 ea 0c             	shr    edx,0xc
c0011826:	68 07 0c 00 00       	push   0xc07
c001182b:	52                   	push   edx
c001182c:	51                   	push   ecx
c001182d:	e8 1c 82 ff ff       	call   c0009a4e <VAS::allocatePages(int, int)>
c0011832:	89 f0                	mov    eax,esi
c0011834:	31 d2                	xor    edx,edx
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	59                   	pop    ecx
c001183a:	5b                   	pop    ebx
c001183b:	5e                   	pop    esi
c001183c:	c3                   	ret    

c001183d <SysSetCwd(regs*)>:
c001183d:	83 ec 14             	sub    esp,0x14
c0011840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011844:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001184f:	e8 f7 95 ff ff       	call   c000ae4b <Fs::setcwd(Process*, char*)>
c0011854:	83 c4 1c             	add    esp,0x1c
c0011857:	99                   	cdq    
c0011858:	c3                   	ret    

c0011859 <SysSetTime(regs*)>:
c0011859:	55                   	push   ebp
c001185a:	31 c9                	xor    ecx,ecx
c001185c:	57                   	push   edi
c001185d:	bd 0c 00 00 00       	mov    ebp,0xc
c0011862:	56                   	push   esi
c0011863:	53                   	push   ebx
c0011864:	31 db                	xor    ebx,ebx
c0011866:	83 ec 10             	sub    esp,0x10
c0011869:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001186d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011870:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011873:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011876:	89 c2                	mov    edx,eax
c0011878:	66 81 ef 6c 07       	sub    di,0x76c
c001187d:	83 e2 1f             	and    edx,0x1f
c0011880:	c1 e7 10             	shl    edi,0x10
c0011883:	42                   	inc    edx
c0011884:	c1 e8 05             	shr    eax,0x5
c0011887:	88 d1                	mov    cl,dl
c0011889:	31 d2                	xor    edx,edx
c001188b:	f7 f5                	div    ebp
c001188d:	89 dd                	mov    ebp,ebx
c001188f:	88 d5                	mov    ch,dl
c0011891:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011897:	0f b7 c1             	movzx  eax,cx
c001189a:	31 d2                	xor    edx,edx
c001189c:	09 f8                	or     eax,edi
c001189e:	bf 3c 00 00 00       	mov    edi,0x3c
c00118a3:	89 c1                	mov    ecx,eax
c00118a5:	89 f0                	mov    eax,esi
c00118a7:	f7 f7                	div    edi
c00118a9:	c1 e2 10             	shl    edx,0x10
c00118ac:	09 d5                	or     ebp,edx
c00118ae:	31 d2                	xor    edx,edx
c00118b0:	89 eb                	mov    ebx,ebp
c00118b2:	f7 f7                	div    edi
c00118b4:	bf 10 0e 00 00       	mov    edi,0xe10
c00118b9:	88 d7                	mov    bh,dl
c00118bb:	89 f0                	mov    eax,esi
c00118bd:	31 d2                	xor    edx,edx
c00118bf:	f7 f7                	div    edi
c00118c1:	bf 18 00 00 00       	mov    edi,0x18
c00118c6:	31 d2                	xor    edx,edx
c00118c8:	f7 f7                	div    edi
c00118ca:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00118cf:	88 d3                	mov    bl,dl
c00118d1:	53                   	push   ebx
c00118d2:	51                   	push   ecx
c00118d3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00118d9:	e8 7e 9d ff ff       	call   c000b65c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00118de:	83 c4 1c             	add    esp,0x1c
c00118e1:	83 f0 01             	xor    eax,0x1
c00118e4:	5b                   	pop    ebx
c00118e5:	0f b6 c0             	movzx  eax,al
c00118e8:	5e                   	pop    esi
c00118e9:	31 d2                	xor    edx,edx
c00118eb:	5f                   	pop    edi
c00118ec:	5d                   	pop    ebp
c00118ed:	c3                   	ret    

c00118ee <SysTimezone(regs*)>:
c00118ee:	53                   	push   ebx
c00118ef:	83 ec 08             	sub    esp,0x8
c00118f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00118fa:	75 17                	jne    c0011913 <SysTimezone(regs*)+0x25>
c00118fc:	83 ec 0c             	sub    esp,0xc
c00118ff:	68 38 e3 01 c0       	push   0xc001e338
c0011904:	e8 ff 8b ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0011909:	83 c8 ff             	or     eax,0xffffffff
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	89 c2                	mov    edx,eax
c0011911:	eb 20                	jmp    c0011933 <SysTimezone(regs*)+0x45>
c0011913:	83 ec 0c             	sub    esp,0xc
c0011916:	68 4d e3 01 c0       	push   0xc001e34d
c001191b:	e8 e8 8b ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0011920:	58                   	pop    eax
c0011921:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011924:	e8 8f 9a ff ff       	call   c000b3b8 <User::loadClockSettings(int)>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	b8 01 00 00 00       	mov    eax,0x1
c0011931:	31 d2                	xor    edx,edx
c0011933:	83 c4 08             	add    esp,0x8
c0011936:	5b                   	pop    ebx
c0011937:	c3                   	ret    

c0011938 <SysWrite(regs*)>:
c0011938:	57                   	push   edi
c0011939:	56                   	push   esi
c001193a:	53                   	push   ebx
c001193b:	83 ec 10             	sub    esp,0x10
c001193e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011942:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011945:	83 f8 02             	cmp    eax,0x2
c0011948:	77 10                	ja     c001195a <SysWrite(regs*)+0x22>
c001194a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001194f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011952:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011958:	eb 0e                	jmp    c0011968 <SysWrite(regs*)+0x30>
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	50                   	push   eax
c001195e:	e8 fc 77 ff ff       	call   c000915f <getFromFileDescriptor(int)>
c0011963:	83 c4 10             	add    esp,0x10
c0011966:	89 c1                	mov    ecx,eax
c0011968:	83 c8 ff             	or     eax,0xffffffff
c001196b:	85 c9                	test   ecx,ecx
c001196d:	89 c2                	mov    edx,eax
c001196f:	74 28                	je     c0011999 <SysWrite(regs*)+0x61>
c0011971:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011979:	31 ff                	xor    edi,edi
c001197b:	83 ec 0c             	sub    esp,0xc
c001197e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011980:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011984:	52                   	push   edx
c0011985:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011988:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001198b:	57                   	push   edi
c001198c:	56                   	push   esi
c001198d:	51                   	push   ecx
c001198e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011991:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011995:	83 c4 20             	add    esp,0x20
c0011998:	99                   	cdq    
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	5b                   	pop    ebx
c001199d:	5e                   	pop    esi
c001199e:	5f                   	pop    edi
c001199f:	c3                   	ret    

c00119a0 <SysWsbe(regs*)>:
c00119a0:	57                   	push   edi
c00119a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00119a6:	56                   	push   esi
c00119a7:	be 8c e3 01 c0       	mov    esi,0xc001e38c
c00119ac:	53                   	push   ebx
c00119ad:	83 ec 30             	sub    esp,0x30
c00119b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119b4:	fc                   	cld    
c00119b5:	83 ec 0c             	sub    esp,0xc
c00119b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119ba:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00119be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c6:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00119cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00119ce:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00119d1:	57                   	push   edi
c00119d2:	e8 69 eb fe ff       	call   c0000540 <strlen>
c00119d7:	5a                   	pop    edx
c00119d8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00119dc:	52                   	push   edx
c00119dd:	31 d2                	xor    edx,edx
c00119df:	57                   	push   edi
c00119e0:	52                   	push   edx
c00119e1:	50                   	push   eax
c00119e2:	56                   	push   esi
c00119e3:	ff d3                	call   ebx
c00119e5:	83 c4 14             	add    esp,0x14
c00119e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119ec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00119ef:	e8 c4 22 00 00       	call   c0013cb8 <terminateTask(int)>
c00119f4:	83 c4 40             	add    esp,0x40
c00119f7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119fc:	5b                   	pop    ebx
c00119fd:	31 d2                	xor    edx,edx
c00119ff:	5e                   	pop    esi
c0011a00:	5f                   	pop    edi
c0011a01:	c3                   	ret    

c0011a02 <SysYield(regs*)>:
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	fa                   	cli    
c0011a06:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0011a0c:	e8 83 19 00 00       	call   c0013394 <schedule()>
c0011a11:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0011a16:	48                   	dec    eax
c0011a17:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0011a1c:	75 01                	jne    c0011a1f <SysYield(regs*)+0x1d>
c0011a1e:	fb                   	sti    
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	31 d2                	xor    edx,edx
c0011a23:	83 c4 0c             	add    esp,0xc
c0011a26:	c3                   	ret    

c0011a27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011a27:	55                   	push   ebp
c0011a28:	57                   	push   edi
c0011a29:	56                   	push   esi
c0011a2a:	53                   	push   ebx
c0011a2b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011a31:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011a39:	0f 95 c2             	setne  dl
c0011a3c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011a44:	0f 94 c0             	sete   al
c0011a47:	84 c2                	test   dl,al
c0011a49:	74 34                	je     c0011a7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a4b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011a56:	74 27                	je     c0011a7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a58:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011a5f:	05 00 10 00 00       	add    eax,0x1000
c0011a64:	89 c1                	mov    ecx,eax
c0011a66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a6b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011a71:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011a78:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011a7f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a8f:	6a 01                	push   0x1
c0011a91:	e8 1f 78 ff ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	89 c3                	mov    ebx,eax
c0011a9b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011aa1:	0f 86 25 01 00 00    	jbe    c0011bcc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011aa7:	c1 ee 0c             	shr    esi,0xc
c0011aaa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ab1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ab5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011abd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ac4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ac8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011acf:	29 ef                	sub    edi,ebp
c0011ad1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ad5:	0f 83 f8 00 00 00    	jae    c0011bd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011adb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ae1:	76 05                	jbe    c0011ae8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ae3:	bf 00 10 00 00       	mov    edi,0x1000
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	31 d2                	xor    edx,edx
c0011aed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011af4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011af6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011afa:	50                   	push   eax
c0011afb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011aff:	56                   	push   esi
c0011b00:	52                   	push   edx
c0011b01:	57                   	push   edi
c0011b02:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011b09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b0c:	83 c4 20             	add    esp,0x20
c0011b0f:	85 c0                	test   eax,eax
c0011b11:	75 06                	jne    c0011b19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011b13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011b17:	74 13                	je     c0011b2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	53                   	push   ebx
c0011b1d:	e8 c3 7a ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	31 c0                	xor    eax,eax
c0011b27:	e9 7c 01 00 00       	jmp    c0011ca8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011b2c:	fa                   	cli    
c0011b2d:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0011b33:	e8 5d 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011b38:	6a 07                	push   0x7
c0011b3a:	89 c7                	mov    edi,eax
c0011b3c:	53                   	push   ebx
c0011b3d:	50                   	push   eax
c0011b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b4c:	e8 f9 7d ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b51:	83 c4 0c             	add    esp,0xc
c0011b54:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b61:	6a 00                	push   0x0
c0011b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b71:	e8 46 7c ff ff       	call   c00097bc <VAS::mapOtherVASIn(bool, VAS*)>
c0011b76:	58                   	pop    eax
c0011b77:	5a                   	pop    edx
c0011b78:	68 07 0c 00 00       	push   0xc07
c0011b7d:	55                   	push   ebp
c0011b7e:	57                   	push   edi
c0011b7f:	89 df                	mov    edi,ebx
c0011b81:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b8e:	6a 00                	push   0x0
c0011b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b98:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b9e:	e8 67 81 ff ff       	call   c0009d0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ba3:	b9 00 10 00 00       	mov    ecx,0x1000
c0011ba8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011baa:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0011baf:	83 c4 20             	add    esp,0x20
c0011bb2:	48                   	dec    eax
c0011bb3:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0011bb8:	85 c0                	test   eax,eax
c0011bba:	75 01                	jne    c0011bbd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011bbc:	fb                   	sti    
c0011bbd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011bc3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011bc7:	e9 f1 fe ff ff       	jmp    c0011abd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011bcc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011bd3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011bda:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011be0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011be6:	0f 86 ae 00 00 00    	jbe    c0011c9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011bec:	fa                   	cli    
c0011bed:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0011bf3:	c1 ee 0c             	shr    esi,0xc
c0011bf6:	51                   	push   ecx
c0011bf7:	31 ff                	xor    edi,edi
c0011bf9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011c00:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c06:	6a 00                	push   0x0
c0011c08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c10:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c16:	e8 a1 7b ff ff       	call   c00097bc <VAS::mapOtherVASIn(bool, VAS*)>
c0011c1b:	83 c4 10             	add    esp,0x10
c0011c1e:	e8 72 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011c23:	47                   	inc    edi
c0011c24:	6a 07                	push   0x7
c0011c26:	53                   	push   ebx
c0011c27:	50                   	push   eax
c0011c28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c2c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c32:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011c35:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011c3b:	e8 0a 7d ff ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c40:	58                   	pop    eax
c0011c41:	5a                   	pop    edx
c0011c42:	68 07 0c 00 00       	push   0xc07
c0011c47:	55                   	push   ebp
c0011c48:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011c4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c52:	50                   	push   eax
c0011c53:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011c5a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c60:	6a 00                	push   0x0
c0011c62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c6a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c70:	e8 95 80 ff ff       	call   c0009d0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011c75:	83 c4 1c             	add    esp,0x1c
c0011c78:	68 00 10 00 00       	push   0x1000
c0011c7d:	6a 00                	push   0x0
c0011c7f:	53                   	push   ebx
c0011c80:	e8 4b e8 fe ff       	call   c00004d0 <memset>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	39 fe                	cmp    esi,edi
c0011c8a:	77 92                	ja     c0011c1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c8c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0011c91:	48                   	dec    eax
c0011c92:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0011c97:	75 01                	jne    c0011c9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c99:	fb                   	sti    
c0011c9a:	83 ec 0c             	sub    esp,0xc
c0011c9d:	53                   	push   ebx
c0011c9e:	e8 42 79 ff ff       	call   c00095e5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	b0 01                	mov    al,0x1
c0011ca8:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011cae:	5b                   	pop    ebx
c0011caf:	5e                   	pop    esi
c0011cb0:	5f                   	pop    edi
c0011cb1:	5d                   	pop    ebp
c0011cb2:	c3                   	ret    

c0011cb3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011cb3:	55                   	push   ebp
c0011cb4:	57                   	push   edi
c0011cb5:	56                   	push   esi
c0011cb6:	53                   	push   ebx
c0011cb7:	83 ec 48             	sub    esp,0x48
c0011cba:	68 14 01 00 00       	push   0x114
c0011cbf:	e8 f5 5a ff ff       	call   c00077b9 <malloc>
c0011cc4:	83 c4 0c             	add    esp,0xc
c0011cc7:	89 c6                	mov    esi,eax
c0011cc9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011ccd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011cd1:	50                   	push   eax
c0011cd2:	e8 a7 8d ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0011cd7:	58                   	pop    eax
c0011cd8:	5a                   	pop    edx
c0011cd9:	6a 01                	push   0x1
c0011cdb:	56                   	push   esi
c0011cdc:	e8 5d 8e ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	85 c0                	test   eax,eax
c0011ce6:	0f 85 47 01 00 00    	jne    c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	6a 34                	push   0x34
c0011cf9:	e8 bb 5a ff ff       	call   c00077b9 <malloc>
c0011cfe:	89 c3                	mov    ebx,eax
c0011d00:	58                   	pop    eax
c0011d01:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d03:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011d07:	57                   	push   edi
c0011d08:	53                   	push   ebx
c0011d09:	6a 00                	push   0x0
c0011d0b:	6a 34                	push   0x34
c0011d0d:	56                   	push   esi
c0011d0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d11:	83 c4 20             	add    esp,0x20
c0011d14:	85 c0                	test   eax,eax
c0011d16:	0f 85 17 01 00 00    	jne    c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d1c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011d22:	0f 85 0b 01 00 00    	jne    c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2b:	85 c0                	test   eax,eax
c0011d2d:	0f 84 00 01 00 00    	je     c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d33:	31 d2                	xor    edx,edx
c0011d35:	55                   	push   ebp
c0011d36:	52                   	push   edx
c0011d37:	50                   	push   eax
c0011d38:	56                   	push   esi
c0011d39:	e8 be 8e ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	85 c0                	test   eax,eax
c0011d43:	0f 85 ea 00 00 00    	jne    c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d49:	83 ec 0c             	sub    esp,0xc
c0011d4c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011d4f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d57:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d5b:	0f af c2             	imul   eax,edx
c0011d5e:	50                   	push   eax
c0011d5f:	e8 55 5a ff ff       	call   c00077b9 <malloc>
c0011d64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d71:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d75:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d79:	0f af c2             	imul   eax,edx
c0011d7c:	99                   	cdq    
c0011d7d:	52                   	push   edx
c0011d7e:	50                   	push   eax
c0011d7f:	56                   	push   esi
c0011d80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d86:	83 c4 20             	add    esp,0x20
c0011d89:	85 c0                	test   eax,eax
c0011d8b:	0f 84 a2 00 00 00    	je     c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d91:	31 d2                	xor    edx,edx
c0011d93:	51                   	push   ecx
c0011d94:	52                   	push   edx
c0011d95:	50                   	push   eax
c0011d96:	56                   	push   esi
c0011d97:	e8 60 8e ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	85 c0                	test   eax,eax
c0011da1:	0f 85 8c 00 00 00    	jne    c0011e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011da7:	83 ec 0c             	sub    esp,0xc
c0011daa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011dae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011db2:	31 ed                	xor    ebp,ebp
c0011db4:	0f af c2             	imul   eax,edx
c0011db7:	50                   	push   eax
c0011db8:	e8 fc 59 ff ff       	call   c00077b9 <malloc>
c0011dbd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011dbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011dc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011dce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011dd2:	0f af c2             	imul   eax,edx
c0011dd5:	99                   	cdq    
c0011dd6:	52                   	push   edx
c0011dd7:	50                   	push   eax
c0011dd8:	56                   	push   esi
c0011dd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ddc:	83 c4 20             	add    esp,0x20
c0011ddf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011de7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011deb:	0f 86 80 00 00 00    	jbe    c0011e71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011df1:	0f b7 fd             	movzx  edi,bp
c0011df4:	c1 e7 05             	shl    edi,0x5
c0011df7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011dfb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011dfe:	75 6b                	jne    c0011e6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e00:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e07:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011e0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e0e:	52                   	push   edx
c0011e0f:	31 d2                	xor    edx,edx
c0011e11:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e14:	52                   	push   edx
c0011e15:	50                   	push   eax
c0011e16:	56                   	push   esi
c0011e17:	e8 e0 8d ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	74 17                	je     c0011e3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	68 b8 e3 01 c0       	push   0xc001e3b8
c0011e2b:	e8 d8 86 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	31 c0                	xor    eax,eax
c0011e35:	e9 87 00 00 00       	jmp    c0011ec1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011e3a:	83 ec 0c             	sub    esp,0xc
c0011e3d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011e40:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011e43:	50                   	push   eax
c0011e44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e4c:	56                   	push   esi
c0011e4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011e51:	e8 d1 fb ff ff       	call   c0011a27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011e56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e5a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011e5e:	83 c4 20             	add    esp,0x20
c0011e61:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011e65:	73 04                	jae    c0011e6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e6b:	45                   	inc    ebp
c0011e6c:	e9 76 ff ff ff       	jmp    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011e71:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011e75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e7d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e83:	83 ec 0c             	sub    esp,0xc
c0011e86:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e91:	05 00 10 00 00       	add    eax,0x1000
c0011e96:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e9d:	e8 27 59 ff ff       	call   c00077c9 <free>
c0011ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ea5:	e8 1f 59 ff ff       	call   c00077c9 <free>
c0011eaa:	58                   	pop    eax
c0011eab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011eaf:	e8 15 59 ff ff       	call   c00077c9 <free>
c0011eb4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011eb7:	e8 e0 8c ff ff       	call   c000ab9c <File::close()>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	b0 01                	mov    al,0x1
c0011ec1:	83 c4 3c             	add    esp,0x3c
c0011ec4:	5b                   	pop    ebx
c0011ec5:	5e                   	pop    esi
c0011ec6:	5f                   	pop    edi
c0011ec7:	5d                   	pop    ebp
c0011ec8:	c3                   	ret    

c0011ec9 <Thr::runtimeReferenceHelper()>:
c0011ec9:	83 ec 18             	sub    esp,0x18
c0011ecc:	68 c0 e3 01 c0       	push   0xc001e3c0
c0011ed1:	e8 32 86 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0011ed6:	fa                   	cli    
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	eb fe                	jmp    c0011eda <Thr::runtimeReferenceHelper()+0x11>

c0011edc <Thr::getAddressOfKernelSymbol(char const*)>:
c0011edc:	57                   	push   edi
c0011edd:	56                   	push   esi
c0011ede:	53                   	push   ebx
c0011edf:	31 db                	xor    ebx,ebx
c0011ee1:	39 1d 60 37 02 c0    	cmp    DWORD PTR ds:0xc0023760,ebx
c0011ee7:	7e 3c                	jle    c0011f25 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011ee9:	8b 34 9d e0 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc920]
c0011ef0:	31 ff                	xor    edi,edi
c0011ef2:	39 3c 9d e0 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdca20],edi
c0011ef9:	7e 27                	jle    c0011f22 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011efb:	50                   	push   eax
c0011efc:	50                   	push   eax
c0011efd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f01:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f03:	03 04 9d 60 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc9a0]
c0011f0a:	50                   	push   eax
c0011f0b:	e8 d0 e7 fe ff       	call   c00006e0 <strcmp>
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	85 c0                	test   eax,eax
c0011f15:	75 05                	jne    c0011f1c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011f17:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011f1a:	eb 0b                	jmp    c0011f27 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011f1c:	83 c6 10             	add    esi,0x10
c0011f1f:	47                   	inc    edi
c0011f20:	eb d0                	jmp    c0011ef2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011f22:	43                   	inc    ebx
c0011f23:	eb bc                	jmp    c0011ee1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011f25:	31 c0                	xor    eax,eax
c0011f27:	5b                   	pop    ebx
c0011f28:	5e                   	pop    esi
c0011f29:	5f                   	pop    edi
c0011f2a:	c3                   	ret    

c0011f2b <Thr::loadKernelSymbolTable(char const*)>:
c0011f2b:	55                   	push   ebp
c0011f2c:	57                   	push   edi
c0011f2d:	56                   	push   esi
c0011f2e:	53                   	push   ebx
c0011f2f:	83 ec 68             	sub    esp,0x68
c0011f32:	8b 35 b0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237b0
c0011f38:	68 14 01 00 00       	push   0x114
c0011f3d:	e8 77 58 ff ff       	call   c00077b9 <malloc>
c0011f42:	83 c4 0c             	add    esp,0xc
c0011f45:	89 c3                	mov    ebx,eax
c0011f47:	56                   	push   esi
c0011f48:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011f4c:	50                   	push   eax
c0011f4d:	e8 2c 8b ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0011f52:	5e                   	pop    esi
c0011f53:	5f                   	pop    edi
c0011f54:	6a 01                	push   0x1
c0011f56:	53                   	push   ebx
c0011f57:	e8 e2 8b ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	85 c0                	test   eax,eax
c0011f61:	74 0a                	je     c0011f6d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011f63:	83 ec 0c             	sub    esp,0xc
c0011f66:	68 e2 e3 01 c0       	push   0xc001e3e2
c0011f6b:	eb 34                	jmp    c0011fa1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011f6d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011f75:	83 ec 0c             	sub    esp,0xc
c0011f78:	6a 34                	push   0x34
c0011f7a:	e8 3a 58 ff ff       	call   c00077b9 <malloc>
c0011f7f:	59                   	pop    ecx
c0011f80:	89 c7                	mov    edi,eax
c0011f82:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f88:	56                   	push   esi
c0011f89:	57                   	push   edi
c0011f8a:	6a 00                	push   0x0
c0011f8c:	6a 34                	push   0x34
c0011f8e:	53                   	push   ebx
c0011f8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f92:	83 c4 20             	add    esp,0x20
c0011f95:	85 c0                	test   eax,eax
c0011f97:	74 17                	je     c0011fb0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	68 f9 e3 01 c0       	push   0xc001e3f9
c0011fa1:	e8 dd e1 ff ff       	call   c0010183 <KePanic(char const*)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	31 c0                	xor    eax,eax
c0011fab:	e9 31 02 00 00       	jmp    c00121e1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011fb0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011fb6:	75 e1                	jne    c0011f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fb8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011fbb:	85 c0                	test   eax,eax
c0011fbd:	74 da                	je     c0011f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fbf:	52                   	push   edx
c0011fc0:	31 d2                	xor    edx,edx
c0011fc2:	52                   	push   edx
c0011fc3:	50                   	push   eax
c0011fc4:	53                   	push   ebx
c0011fc5:	e8 32 8c ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	85 c0                	test   eax,eax
c0011fcf:	75 c8                	jne    c0011f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fd8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fdc:	31 ed                	xor    ebp,ebp
c0011fde:	0f af c2             	imul   eax,edx
c0011fe1:	50                   	push   eax
c0011fe2:	e8 d2 57 ff ff       	call   c00077b9 <malloc>
c0011fe7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011fe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fed:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ff4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011ff8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ffc:	0f af c2             	imul   eax,edx
c0011fff:	99                   	cdq    
c0012000:	52                   	push   edx
c0012001:	50                   	push   eax
c0012002:	53                   	push   ebx
c0012003:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012006:	83 c4 20             	add    esp,0x20
c0012009:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012019:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012021:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012029:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001202d:	0f 86 aa 00 00 00    	jbe    c00120dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012033:	0f b7 f5             	movzx  esi,bp
c0012036:	6b f6 28             	imul   esi,esi,0x28
c0012039:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001203d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012044:	50                   	push   eax
c0012045:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012049:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001204d:	8b 16                	mov    edx,DWORD PTR [esi]
c001204f:	6b c0 28             	imul   eax,eax,0x28
c0012052:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012056:	89 d0                	mov    eax,edx
c0012058:	31 d2                	xor    edx,edx
c001205a:	52                   	push   edx
c001205b:	50                   	push   eax
c001205c:	53                   	push   ebx
c001205d:	e8 9a 8b ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0012062:	83 c4 0c             	add    esp,0xc
c0012065:	6a 20                	push   0x20
c0012067:	6a 00                	push   0x0
c0012069:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001206d:	52                   	push   edx
c001206e:	e8 5d e4 fe ff       	call   c00004d0 <memset>
c0012073:	58                   	pop    eax
c0012074:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012076:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001207a:	51                   	push   ecx
c001207b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001207f:	52                   	push   edx
c0012080:	6a 00                	push   0x0
c0012082:	6a 1f                	push   0x1f
c0012084:	53                   	push   ebx
c0012085:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012088:	83 c4 18             	add    esp,0x18
c001208b:	68 10 e4 01 c0       	push   0xc001e410
c0012090:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012094:	52                   	push   edx
c0012095:	e8 46 e6 fe ff       	call   c00006e0 <strcmp>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	85 c0                	test   eax,eax
c001209f:	75 0f                	jne    c00120b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00120a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00120a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120b0:	50                   	push   eax
c00120b1:	50                   	push   eax
c00120b2:	68 18 e4 01 c0       	push   0xc001e418
c00120b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00120bb:	50                   	push   eax
c00120bc:	e8 1f e6 fe ff       	call   c00006e0 <strcmp>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	85 c0                	test   eax,eax
c00120c6:	75 0f                	jne    c00120d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00120c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00120cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120d7:	45                   	inc    ebp
c00120d8:	e9 4c ff ff ff       	jmp    c0012029 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00120dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00120e2:	75 10                	jne    c00120f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	68 20 e4 01 c0       	push   0xc001e420
c00120ec:	e8 92 e0 ff ff       	call   c0010183 <KePanic(char const*)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00120f9:	75 10                	jne    c001210b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	68 20 e4 01 c0       	push   0xc001e420
c0012103:	e8 7b e0 ff ff       	call   c0010183 <KePanic(char const*)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	31 d2                	xor    edx,edx
c001210d:	50                   	push   eax
c001210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012112:	52                   	push   edx
c0012113:	50                   	push   eax
c0012114:	53                   	push   ebx
c0012115:	e8 e2 8a ff ff       	call   c000abfc <File::seek(unsigned long long)>
c001211a:	5a                   	pop    edx
c001211b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001211f:	e8 95 56 ff ff       	call   c00077b9 <malloc>
c0012124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012128:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001212c:	31 c9                	xor    ecx,ecx
c001212e:	5e                   	pop    esi
c001212f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012131:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012135:	55                   	push   ebp
c0012136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001213a:	51                   	push   ecx
c001213b:	52                   	push   edx
c001213c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012140:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012144:	53                   	push   ebx
c0012145:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012148:	83 c4 14             	add    esp,0x14
c001214b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001214f:	e8 65 56 ff ff       	call   c00077b9 <malloc>
c0012154:	89 c6                	mov    esi,eax
c0012156:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012158:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001215b:	56                   	push   esi
c001215c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012160:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012164:	51                   	push   ecx
c0012165:	52                   	push   edx
c0012166:	53                   	push   ebx
c0012167:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001216a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001216e:	8b 15 60 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023760
c0012174:	83 c4 1c             	add    esp,0x1c
c0012177:	c1 e8 04             	shr    eax,0x4
c001217a:	89 04 95 e0 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca20],eax
c0012181:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012185:	31 d2                	xor    edx,edx
c0012187:	52                   	push   edx
c0012188:	50                   	push   eax
c0012189:	53                   	push   ebx
c001218a:	e8 6d 8a ff ff       	call   c000abfc <File::seek(unsigned long long)>
c001218f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012191:	31 d2                	xor    edx,edx
c0012193:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012196:	56                   	push   esi
c0012197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001219b:	52                   	push   edx
c001219c:	50                   	push   eax
c001219d:	53                   	push   ebx
c001219e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121a1:	83 c4 14             	add    esp,0x14
c00121a4:	53                   	push   ebx
c00121a5:	e8 f2 89 ff ff       	call   c000ab9c <File::close()>
c00121aa:	5d                   	pop    ebp
c00121ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121af:	e8 15 56 ff ff       	call   c00077c9 <free>
c00121b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121b7:	e8 0d 56 ff ff       	call   c00077c9 <free>
c00121bc:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c00121c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00121c5:	8d 50 01             	lea    edx,[eax+0x1]
c00121c8:	89 0c 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],ecx
c00121cf:	89 34 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],esi
c00121d6:	89 15 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,edx
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	b0 01                	mov    al,0x1
c00121e1:	83 c4 5c             	add    esp,0x5c
c00121e4:	5b                   	pop    ebx
c00121e5:	5e                   	pop    esi
c00121e6:	5f                   	pop    edi
c00121e7:	5d                   	pop    ebp
c00121e8:	c3                   	ret    

c00121e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00121e9:	55                   	push   ebp
c00121ea:	57                   	push   edi
c00121eb:	56                   	push   esi
c00121ec:	53                   	push   ebx
c00121ed:	81 ec 68 03 00 00    	sub    esp,0x368
c00121f3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00121fa:	8b 1d b0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237b0
c0012200:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012204:	68 14 01 00 00       	push   0x114
c0012209:	e8 ab 55 ff ff       	call   c00077b9 <malloc>
c001220e:	83 c4 0c             	add    esp,0xc
c0012211:	89 c5                	mov    ebp,eax
c0012213:	53                   	push   ebx
c0012214:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001221b:	50                   	push   eax
c001221c:	e8 5d 88 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0012221:	5e                   	pop    esi
c0012222:	5f                   	pop    edi
c0012223:	6a 01                	push   0x1
c0012225:	55                   	push   ebp
c0012226:	e8 13 89 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	85 c0                	test   eax,eax
c0012230:	0f 85 a7 06 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012236:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001223e:	83 ec 0c             	sub    esp,0xc
c0012241:	6a 34                	push   0x34
c0012243:	e8 71 55 ff ff       	call   c00077b9 <malloc>
c0012248:	5b                   	pop    ebx
c0012249:	89 c7                	mov    edi,eax
c001224b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001224f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012252:	53                   	push   ebx
c0012253:	57                   	push   edi
c0012254:	6a 00                	push   0x0
c0012256:	6a 34                	push   0x34
c0012258:	55                   	push   ebp
c0012259:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001225c:	83 c4 20             	add    esp,0x20
c001225f:	85 c0                	test   eax,eax
c0012261:	0f 85 76 06 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012267:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001226d:	0f 85 6a 06 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012273:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012276:	85 c0                	test   eax,eax
c0012278:	0f 84 5f 06 00 00    	je     c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001227e:	31 d2                	xor    edx,edx
c0012280:	51                   	push   ecx
c0012281:	52                   	push   edx
c0012282:	50                   	push   eax
c0012283:	55                   	push   ebp
c0012284:	e8 73 89 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0012289:	83 c4 10             	add    esp,0x10
c001228c:	85 c0                	test   eax,eax
c001228e:	0f 85 49 06 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012294:	83 ec 0c             	sub    esp,0xc
c0012297:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001229a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001229e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00122a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00122a6:	0f af c2             	imul   eax,edx
c00122a9:	50                   	push   eax
c00122aa:	e8 0a 55 ff ff       	call   c00077b9 <malloc>
c00122af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00122c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00122c5:	0f af c2             	imul   eax,edx
c00122c8:	99                   	cdq    
c00122c9:	52                   	push   edx
c00122ca:	50                   	push   eax
c00122cb:	55                   	push   ebp
c00122cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122cf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00122d2:	83 c4 20             	add    esp,0x20
c00122d5:	85 c0                	test   eax,eax
c00122d7:	0f 84 00 06 00 00    	je     c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122dd:	52                   	push   edx
c00122de:	31 d2                	xor    edx,edx
c00122e0:	52                   	push   edx
c00122e1:	50                   	push   eax
c00122e2:	55                   	push   ebp
c00122e3:	e8 14 89 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	85 c0                	test   eax,eax
c00122ed:	0f 85 ea 05 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122f3:	83 ec 0c             	sub    esp,0xc
c00122f6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122fa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122fe:	31 f6                	xor    esi,esi
c0012300:	0f af c2             	imul   eax,edx
c0012303:	50                   	push   eax
c0012304:	e8 b0 54 ff ff       	call   c00077b9 <malloc>
c0012309:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001230c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012313:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012317:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001231b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001231f:	0f af c2             	imul   eax,edx
c0012322:	99                   	cdq    
c0012323:	52                   	push   edx
c0012324:	50                   	push   eax
c0012325:	55                   	push   ebp
c0012326:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012329:	83 c4 20             	add    esp,0x20
c001232c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012330:	0f 86 8a 00 00 00    	jbe    c00123c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012336:	0f b7 de             	movzx  ebx,si
c0012339:	c1 e3 05             	shl    ebx,0x5
c001233c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012340:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012343:	75 75                	jne    c00123ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012345:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012348:	31 d2                	xor    edx,edx
c001234a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001234e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012351:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012355:	50                   	push   eax
c0012356:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012359:	52                   	push   edx
c001235a:	50                   	push   eax
c001235b:	55                   	push   ebp
c001235c:	e8 9b 88 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	85 c0                	test   eax,eax
c0012366:	0f 85 71 05 00 00    	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001236c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012373:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012376:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001237a:	31 d2                	xor    edx,edx
c001237c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012387:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001238e:	50                   	push   eax
c001238f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012397:	52                   	push   edx
c0012398:	50                   	push   eax
c0012399:	55                   	push   ebp
c001239a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001239d:	83 c4 1c             	add    esp,0x1c
c00123a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00123a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00123a6:	50                   	push   eax
c00123a7:	6a 00                	push   0x0
c00123a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00123b1:	50                   	push   eax
c00123b2:	e8 19 e1 fe ff       	call   c00004d0 <memset>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	46                   	inc    esi
c00123bb:	e9 6c ff ff ff       	jmp    c001232c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00123c0:	53                   	push   ebx
c00123c1:	31 db                	xor    ebx,ebx
c00123c3:	68 00 01 00 00       	push   0x100
c00123c8:	6a 00                	push   0x0
c00123ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00123ce:	50                   	push   eax
c00123cf:	e8 fc e0 fe ff       	call   c00004d0 <memset>
c00123d4:	83 c4 0c             	add    esp,0xc
c00123d7:	68 00 01 00 00       	push   0x100
c00123dc:	6a 00                	push   0x0
c00123de:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00123e5:	50                   	push   eax
c00123e6:	e8 e5 e0 fe ff       	call   c00004d0 <memset>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00123fe:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012406:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001240e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012416:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001241a:	0f 86 30 01 00 00    	jbe    c0012550 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012420:	0f b7 f3             	movzx  esi,bx
c0012423:	6b f6 28             	imul   esi,esi,0x28
c0012426:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001242a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001242d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012431:	52                   	push   edx
c0012432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012436:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001243a:	8b 06                	mov    eax,DWORD PTR [esi]
c001243c:	6b d2 28             	imul   edx,edx,0x28
c001243f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012443:	31 d2                	xor    edx,edx
c0012445:	52                   	push   edx
c0012446:	50                   	push   eax
c0012447:	55                   	push   ebp
c0012448:	e8 af 87 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c001244d:	83 c4 0c             	add    esp,0xc
c0012450:	6a 20                	push   0x20
c0012452:	6a 00                	push   0x0
c0012454:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001245b:	51                   	push   ecx
c001245c:	e8 6f e0 fe ff       	call   c00004d0 <memset>
c0012461:	59                   	pop    ecx
c0012462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012465:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012469:	52                   	push   edx
c001246a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012471:	51                   	push   ecx
c0012472:	6a 00                	push   0x0
c0012474:	6a 1f                	push   0x1f
c0012476:	55                   	push   ebp
c0012477:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001247a:	83 c4 1c             	add    esp,0x1c
c001247d:	6a 09                	push   0x9
c001247f:	68 3a e4 01 c0       	push   0xc001e43a
c0012484:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001248b:	51                   	push   ecx
c001248c:	e8 ff de fe ff       	call   c0000390 <memcmp>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	85 c0                	test   eax,eax
c0012496:	75 21                	jne    c00124b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001249c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00124a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124b2:	89 d0                	mov    eax,edx
c00124b4:	40                   	inc    eax
c00124b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124b9:	50                   	push   eax
c00124ba:	6a 09                	push   0x9
c00124bc:	68 44 e4 01 c0       	push   0xc001e444
c00124c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124c8:	50                   	push   eax
c00124c9:	e8 c2 de fe ff       	call   c0000390 <memcmp>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	85 c0                	test   eax,eax
c00124d3:	75 21                	jne    c00124f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00124d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124dd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00124e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124ef:	89 d0                	mov    eax,edx
c00124f1:	40                   	inc    eax
c00124f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124f6:	50                   	push   eax
c00124f7:	50                   	push   eax
c00124f8:	68 10 e4 01 c0       	push   0xc001e410
c00124fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012504:	50                   	push   eax
c0012505:	e8 d6 e1 fe ff       	call   c00006e0 <strcmp>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	85 c0                	test   eax,eax
c001250f:	75 0f                	jne    c0012520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012511:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001251c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012520:	50                   	push   eax
c0012521:	50                   	push   eax
c0012522:	68 18 e4 01 c0       	push   0xc001e418
c0012527:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001252e:	50                   	push   eax
c001252f:	e8 ac e1 fe ff       	call   c00006e0 <strcmp>
c0012534:	83 c4 10             	add    esp,0x10
c0012537:	85 c0                	test   eax,eax
c0012539:	75 0f                	jne    c001254a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001253b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001253e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012546:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001254a:	43                   	inc    ebx
c001254b:	e9 c6 fe ff ff       	jmp    c0012416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012550:	31 d2                	xor    edx,edx
c0012552:	50                   	push   eax
c0012553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012557:	52                   	push   edx
c0012558:	50                   	push   eax
c0012559:	55                   	push   ebp
c001255a:	e8 9d 86 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c001255f:	58                   	pop    eax
c0012560:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012564:	e8 50 52 ff ff       	call   c00077b9 <malloc>
c0012569:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001256c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012570:	31 d2                	xor    edx,edx
c0012572:	58                   	pop    eax
c0012573:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012577:	53                   	push   ebx
c0012578:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001257c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012580:	52                   	push   edx
c0012581:	50                   	push   eax
c0012582:	55                   	push   ebp
c0012583:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012586:	83 c4 14             	add    esp,0x14
c0012589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001258d:	e8 27 52 ff ff       	call   c00077b9 <malloc>
c0012592:	31 d2                	xor    edx,edx
c0012594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012598:	83 c4 0c             	add    esp,0xc
c001259b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001259f:	52                   	push   edx
c00125a0:	50                   	push   eax
c00125a1:	55                   	push   ebp
c00125a2:	e8 55 86 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c00125a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125aa:	31 d2                	xor    edx,edx
c00125ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00125b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125b7:	52                   	push   edx
c00125b8:	50                   	push   eax
c00125b9:	55                   	push   ebp
c00125ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125bd:	83 c4 20             	add    esp,0x20
c00125c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125cc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00125d0:	0f 84 0b 03 00 00    	je     c00128e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00125d6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00125dd:	31 d2                	xor    edx,edx
c00125df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125e3:	c1 e8 03             	shr    eax,0x3
c00125e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125ea:	51                   	push   ecx
c00125eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125ef:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00125f3:	52                   	push   edx
c00125f4:	50                   	push   eax
c00125f5:	55                   	push   ebp
c00125f6:	e8 01 86 ff ff       	call   c000abfc <File::seek(unsigned long long)>
c00125fb:	5b                   	pop    ebx
c00125fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012600:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012607:	e8 ad 51 ff ff       	call   c00077b9 <malloc>
c001260c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001260f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012613:	31 d2                	xor    edx,edx
c0012615:	5e                   	pop    esi
c0012616:	8d 44 24 58          	lea    eax,[esp+0x58]
c001261a:	50                   	push   eax
c001261b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012623:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001262a:	52                   	push   edx
c001262b:	50                   	push   eax
c001262c:	55                   	push   ebp
c001262d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012630:	83 c4 20             	add    esp,0x20
c0012633:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001263b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001263f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012643:	0f 8d 7c 02 00 00    	jge    c00128c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012649:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001264d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012651:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012656:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012659:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001265d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012661:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012665:	89 d8                	mov    eax,ebx
c0012667:	c1 e8 08             	shr    eax,0x8
c001266a:	89 c6                	mov    esi,eax
c001266c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012670:	c1 e6 04             	shl    esi,0x4
c0012673:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012677:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001267a:	85 d2                	test   edx,edx
c001267c:	0f 85 bf 00 00 00    	jne    c0012741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012689:	03 06                	add    eax,DWORD PTR [esi]
c001268b:	50                   	push   eax
c001268c:	e8 4b f8 ff ff       	call   c0011edc <Thr::getAddressOfKernelSymbol(char const*)>
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	89 c2                	mov    edx,eax
c0012696:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001269b:	85 c0                	test   eax,eax
c001269d:	0f 85 9e 00 00 00    	jne    c0012741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126aa:	03 06                	add    eax,DWORD PTR [esi]
c00126ac:	50                   	push   eax
c00126ad:	e8 22 dc ff ff       	call   c00102d4 <KeResolveCompatibilitySymbol(char*)>
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	89 c2                	mov    edx,eax
c00126b7:	85 c0                	test   eax,eax
c00126b9:	0f 85 82 00 00 00    	jne    c0012741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00126bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00126c3:	50                   	push   eax
c00126c4:	50                   	push   eax
c00126c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c9:	03 06                	add    eax,DWORD PTR [esi]
c00126cb:	50                   	push   eax
c00126cc:	68 4e e4 01 c0       	push   0xc001e44e
c00126d1:	e8 32 7e ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00126d6:	58                   	pop    eax
c00126d7:	5a                   	pop    edx
c00126d8:	68 68 e4 01 c0       	push   0xc001e468
c00126dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126e4:	50                   	push   eax
c00126e5:	e8 16 df fe ff       	call   c0000600 <strcpy>
c00126ea:	59                   	pop    ecx
c00126eb:	58                   	pop    eax
c00126ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126f0:	03 06                	add    eax,DWORD PTR [esi]
c00126f2:	50                   	push   eax
c00126f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126fa:	50                   	push   eax
c00126fb:	e8 c0 e0 fe ff       	call   c00007c0 <strcat>
c0012700:	58                   	pop    eax
c0012701:	5a                   	pop    edx
c0012702:	68 fe e4 01 c0       	push   0xc001e4fe
c0012707:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001270e:	50                   	push   eax
c001270f:	e8 ac e0 fe ff       	call   c00007c0 <strcat>
c0012714:	83 c4 10             	add    esp,0x10
c0012717:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001271c:	0f 84 5d 01 00 00    	je     c001287f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012722:	83 ec 0c             	sub    esp,0xc
c0012725:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001272c:	50                   	push   eax
c001272d:	e8 51 da ff ff       	call   c0010183 <KePanic(char const*)>
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012739:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001273d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012741:	80 fb 01             	cmp    bl,0x1
c0012744:	0f 85 88 00 00 00    	jne    c00127d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001274a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012751:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012755:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012759:	01 ce                	add    esi,ecx
c001275b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012761:	0f 94 c0             	sete   al
c0012764:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001276a:	0f 94 c3             	sete   bl
c001276d:	09 c3                	or     ebx,eax
c001276f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012771:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012776:	74 41                	je     c00127b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012778:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001277b:	84 db                	test   bl,bl
c001277d:	75 15                	jne    c0012794 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001277f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012783:	66 83 f8 0c          	cmp    ax,0xc
c0012787:	76 05                	jbe    c001278e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012789:	b8 0c 00 00 00       	mov    eax,0xc
c001278e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012792:	76 37                	jbe    c00127cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012794:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012798:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001279d:	0f 84 dc 00 00 00    	je     c001287f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127a3:	83 ec 0c             	sub    esp,0xc
c00127a6:	68 7f e4 01 c0       	push   0xc001e47f
c00127ab:	e8 d3 d9 ff ff       	call   c0010183 <KePanic(char const*)>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127b7:	eb 12                	jmp    c00127cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127b9:	01 c1                	add    ecx,eax
c00127bb:	84 db                	test   bl,bl
c00127bd:	75 0c                	jne    c00127cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127c3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00127c7:	77 02                	ja     c00127cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127c9:	01 d1                	add    ecx,edx
c00127cb:	89 0e                	mov    DWORD PTR [esi],ecx
c00127cd:	e9 ea 00 00 00       	jmp    c00128bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127d2:	80 fb 02             	cmp    bl,0x2
c00127d5:	75 7c                	jne    c0012853 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00127d7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00127de:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00127e2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00127e6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00127ec:	74 20                	je     c001280e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127ee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00127f4:	74 18                	je     c001280e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127fa:	b9 0a 00 00 00       	mov    ecx,0xa
c00127ff:	66 83 f8 0e          	cmp    ax,0xe
c0012803:	77 03                	ja     c0012808 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012805:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012808:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001280c:	76 1f                	jbe    c001282d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001280e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012812:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012817:	74 66                	je     c001287f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012819:	83 ec 0c             	sub    esp,0xc
c001281c:	68 9b e4 01 c0       	push   0xc001e49b
c0012821:	e8 5d d9 ff ff       	call   c0010183 <KePanic(char const*)>
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001282d:	8b 06                	mov    eax,DWORD PTR [esi]
c001282f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012834:	74 13                	je     c0012849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012836:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001283a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012841:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012845:	01 c8                	add    eax,ecx
c0012847:	eb 04                	jmp    c001284d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012849:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001284d:	01 c2                	add    edx,eax
c001284f:	89 16                	mov    DWORD PTR [esi],edx
c0012851:	eb 69                	jmp    c00128bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012853:	0f b6 db             	movzx  ebx,bl
c0012856:	50                   	push   eax
c0012857:	50                   	push   eax
c0012858:	53                   	push   ebx
c0012859:	68 b7 e4 01 c0       	push   0xc001e4b7
c001285e:	e8 a5 7c ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001286b:	74 12                	je     c001287f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001286d:	83 ec 0c             	sub    esp,0xc
c0012870:	68 c2 e4 01 c0       	push   0xc001e4c2
c0012875:	e8 09 d9 ff ff       	call   c0010183 <KePanic(char const*)>
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	eb 3d                	jmp    c00128bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	55                   	push   ebp
c0012883:	e8 14 83 ff ff       	call   c000ab9c <File::close()>
c0012888:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001288b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001288e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012891:	59                   	pop    ecx
c0012892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012896:	e8 2e 4f ff ff       	call   c00077c9 <free>
c001289b:	5b                   	pop    ebx
c001289c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128a0:	e8 24 4f ff ff       	call   c00077c9 <free>
c00128a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128a8:	e8 1c 4f ff ff       	call   c00077c9 <free>
c00128ad:	5e                   	pop    esi
c00128ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b2:	e8 12 4f ff ff       	call   c00077c9 <free>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	eb 21                	jmp    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128bc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00128c0:	e9 76 fd ff ff       	jmp    c001263b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128cc:	e8 f8 4e ff ff       	call   c00077c9 <free>
c00128d1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	e9 eb fc ff ff       	jmp    c00125c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00128dd:	31 c0                	xor    eax,eax
c00128df:	eb 33                	jmp    c0012914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00128e1:	83 ec 0c             	sub    esp,0xc
c00128e4:	55                   	push   ebp
c00128e5:	e8 b2 82 ff ff       	call   c000ab9c <File::close()>
c00128ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00128f3:	58                   	pop    eax
c00128f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128f8:	e8 cc 4e ff ff       	call   c00077c9 <free>
c00128fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012900:	e8 c4 4e ff ff       	call   c00077c9 <free>
c0012905:	5a                   	pop    edx
c0012906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001290a:	e8 ba 4e ff ff       	call   c00077c9 <free>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	b0 01                	mov    al,0x1
c0012914:	81 c4 5c 03 00 00    	add    esp,0x35c
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	5f                   	pop    edi
c001291d:	5d                   	pop    ebp
c001291e:	c3                   	ret    

c001291f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001291f:	56                   	push   esi
c0012920:	31 d2                	xor    edx,edx
c0012922:	53                   	push   ebx
c0012923:	8b 1d c0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fc0
c0012929:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001292d:	39 d3                	cmp    ebx,edx
c001292f:	7e 1b                	jle    c001294c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012931:	8b 04 95 e0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce20]
c0012938:	39 c8                	cmp    eax,ecx
c001293a:	77 0d                	ja     c0012949 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001293c:	8b 34 95 e0 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd020]
c0012943:	01 c6                	add    esi,eax
c0012945:	39 ce                	cmp    esi,ecx
c0012947:	77 05                	ja     c001294e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012949:	42                   	inc    edx
c001294a:	eb e1                	jmp    c001292d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001294c:	31 c0                	xor    eax,eax
c001294e:	5b                   	pop    ebx
c001294f:	5e                   	pop    esi
c0012950:	c3                   	ret    

c0012951 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012951:	53                   	push   ebx
c0012952:	31 c0                	xor    eax,eax
c0012954:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012958:	8b 1d c0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fc0
c001295e:	39 c3                	cmp    ebx,eax
c0012960:	7e 22                	jle    c0012984 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012962:	8b 14 85 e0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce20]
c0012969:	39 ca                	cmp    edx,ecx
c001296b:	77 14                	ja     c0012981 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001296d:	03 14 85 e0 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd020]
c0012974:	39 ca                	cmp    edx,ecx
c0012976:	76 09                	jbe    c0012981 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012978:	8b 04 85 e0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc20]
c001297f:	eb 05                	jmp    c0012986 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012981:	40                   	inc    eax
c0012982:	eb da                	jmp    c001295e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012984:	31 c0                	xor    eax,eax
c0012986:	5b                   	pop    ebx
c0012987:	c3                   	ret    

c0012988 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012988:	53                   	push   ebx
c0012989:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001298d:	53                   	push   ebx
c001298e:	e8 8c ff ff ff       	call   c001291f <Thr::getDriverBaseFromAddress(unsigned long)>
c0012993:	5a                   	pop    edx
c0012994:	31 d2                	xor    edx,edx
c0012996:	85 c0                	test   eax,eax
c0012998:	74 04                	je     c001299e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001299a:	89 da                	mov    edx,ebx
c001299c:	29 c2                	sub    edx,eax
c001299e:	89 d0                	mov    eax,edx
c00129a0:	5b                   	pop    ebx
c00129a1:	c3                   	ret    

c00129a2 <Thr::loadDLL(char const*, bool)>:
c00129a2:	55                   	push   ebp
c00129a3:	57                   	push   edi
c00129a4:	56                   	push   esi
c00129a5:	53                   	push   ebx
c00129a6:	81 ec 34 01 00 00    	sub    esp,0x134
c00129ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129ba:	56                   	push   esi
c00129bb:	68 da e4 01 c0       	push   0xc001e4da
c00129c0:	e8 43 7b ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00129c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00129cc:	e8 e8 4d ff ff       	call   c00077b9 <malloc>
c00129d1:	83 c4 0c             	add    esp,0xc
c00129d4:	89 c3                	mov    ebx,eax
c00129d6:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c00129dc:	56                   	push   esi
c00129dd:	50                   	push   eax
c00129de:	e8 9b 80 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 db                	test   ebx,ebx
c00129e8:	75 3c                	jne    c0012a26 <Thr::loadDLL(char const*, bool)+0x84>
c00129ea:	89 f8                	mov    eax,edi
c00129ec:	84 c0                	test   al,al
c00129ee:	0f 84 d2 01 00 00    	je     c0012bc6 <Thr::loadDLL(char const*, bool)+0x224>
c00129f4:	55                   	push   ebp
c00129f5:	55                   	push   ebp
c00129f6:	68 eb e4 01 c0       	push   0xc001e4eb
c00129fb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00129ff:	55                   	push   ebp
c0012a00:	e8 fb db fe ff       	call   c0000600 <strcpy>
c0012a05:	58                   	pop    eax
c0012a06:	5a                   	pop    edx
c0012a07:	56                   	push   esi
c0012a08:	55                   	push   ebp
c0012a09:	e8 b2 dd fe ff       	call   c00007c0 <strcat>
c0012a0e:	59                   	pop    ecx
c0012a0f:	58                   	pop    eax
c0012a10:	68 fe e4 01 c0       	push   0xc001e4fe
c0012a15:	55                   	push   ebp
c0012a16:	e8 a5 dd fe ff       	call   c00007c0 <strcat>
c0012a1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a1e:	e8 60 d7 ff ff       	call   c0010183 <KePanic(char const*)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	51                   	push   ecx
c0012a27:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012a2b:	50                   	push   eax
c0012a2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012a30:	50                   	push   eax
c0012a31:	53                   	push   ebx
c0012a32:	e8 b3 83 ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	85 db                	test   ebx,ebx
c0012a3c:	74 0c                	je     c0012a4a <Thr::loadDLL(char const*, bool)+0xa8>
c0012a3e:	83 ec 0c             	sub    esp,0xc
c0012a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a43:	53                   	push   ebx
c0012a44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012a4f:	75 0a                	jne    c0012a5b <Thr::loadDLL(char const*, bool)+0xb9>
c0012a51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a55:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012a59:	75 3c                	jne    c0012a97 <Thr::loadDLL(char const*, bool)+0xf5>
c0012a5b:	89 f8                	mov    eax,edi
c0012a5d:	84 c0                	test   al,al
c0012a5f:	0f 84 49 01 00 00    	je     c0012bae <Thr::loadDLL(char const*, bool)+0x20c>
c0012a65:	51                   	push   ecx
c0012a66:	51                   	push   ecx
c0012a67:	68 eb e4 01 c0       	push   0xc001e4eb
c0012a6c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012a70:	53                   	push   ebx
c0012a71:	e8 8a db fe ff       	call   c0000600 <strcpy>
c0012a76:	5d                   	pop    ebp
c0012a77:	58                   	pop    eax
c0012a78:	56                   	push   esi
c0012a79:	53                   	push   ebx
c0012a7a:	e8 41 dd fe ff       	call   c00007c0 <strcat>
c0012a7f:	58                   	pop    eax
c0012a80:	5a                   	pop    edx
c0012a81:	68 fe e4 01 c0       	push   0xc001e4fe
c0012a86:	53                   	push   ebx
c0012a87:	e8 34 dd fe ff       	call   c00007c0 <strcat>
c0012a8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a8f:	e8 ef d6 ff ff       	call   c0010183 <KePanic(char const*)>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	52                   	push   edx
c0012a98:	6a 03                	push   0x3
c0012a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012aa2:	05 ff 0f 00 00       	add    eax,0xfff
c0012aa7:	83 d2 00             	adc    edx,0x0
c0012aaa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012aae:	50                   	push   eax
c0012aaf:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0012ab5:	e8 94 6f ff ff       	call   c0009a4e <VAS::allocatePages(int, int)>
c0012aba:	59                   	pop    ecx
c0012abb:	89 c3                	mov    ebx,eax
c0012abd:	5d                   	pop    ebp
c0012abe:	50                   	push   eax
c0012abf:	68 b6 d2 01 c0       	push   0xc001d2b6
c0012ac4:	e8 3f 7a ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0012ac9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012acc:	e8 6f da fe ff       	call   c0000540 <strlen>
c0012ad1:	8b 2d c0 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fc0
c0012ad7:	40                   	inc    eax
c0012ad8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012adb:	e8 d9 4c ff ff       	call   c00077b9 <malloc>
c0012ae0:	89 04 ad e0 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcc20],eax
c0012ae7:	58                   	pop    eax
c0012ae8:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c0012aed:	5a                   	pop    edx
c0012aee:	56                   	push   esi
c0012aef:	ff 34 85 e0 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcc20]
c0012af6:	e8 05 db fe ff       	call   c0000600 <strcpy>
c0012afb:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c0012b00:	8d 50 01             	lea    edx,[eax+0x1]
c0012b03:	89 1c 85 e0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce20],ebx
c0012b0a:	89 15 c0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc0,edx
c0012b10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012b14:	83 c4 0c             	add    esp,0xc
c0012b17:	89 14 85 e0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd020],edx
c0012b1e:	6a 01                	push   0x1
c0012b20:	53                   	push   ebx
c0012b21:	56                   	push   esi
c0012b22:	e8 c2 f6 ff ff       	call   c00121e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012b27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b33:	0f 85 89 00 00 00    	jne    c0012bc2 <Thr::loadDLL(char const*, bool)+0x220>
c0012b39:	89 f8                	mov    eax,edi
c0012b3b:	84 c0                	test   al,al
c0012b3d:	74 73                	je     c0012bb2 <Thr::loadDLL(char const*, bool)+0x210>
c0012b3f:	83 ec 0c             	sub    esp,0xc
c0012b42:	68 00 e5 01 c0       	push   0xc001e500
c0012b47:	e8 37 d6 ff ff       	call   c0010183 <KePanic(char const*)>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	eb 61                	jmp    c0012bb2 <Thr::loadDLL(char const*, bool)+0x210>
c0012b51:	50                   	push   eax
c0012b52:	50                   	push   eax
c0012b53:	89 e8                	mov    eax,ebp
c0012b55:	c1 e0 0c             	shl    eax,0xc
c0012b58:	01 d8                	add    eax,ebx
c0012b5a:	50                   	push   eax
c0012b5b:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0012b61:	e8 60 6a ff ff       	call   c00095c6 <VAS::getPageTableEntry(unsigned long)>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b6b:	a8 60                	test   al,0x60
c0012b6d:	75 11                	jne    c0012b80 <Thr::loadDLL(char const*, bool)+0x1de>
c0012b6f:	83 ec 0c             	sub    esp,0xc
c0012b72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b77:	50                   	push   eax
c0012b78:	e8 b6 4e ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012b7d:	83 c4 10             	add    esp,0x10
c0012b80:	45                   	inc    ebp
c0012b81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b89:	05 ff 0f 00 00       	add    eax,0xfff
c0012b8e:	bf 00 00 00 00       	mov    edi,0x0
c0012b93:	83 d2 00             	adc    edx,0x0
c0012b96:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b9a:	c1 ea 0c             	shr    edx,0xc
c0012b9d:	39 c5                	cmp    ebp,eax
c0012b9f:	89 d1                	mov    ecx,edx
c0012ba1:	89 f8                	mov    eax,edi
c0012ba3:	19 c8                	sbb    eax,ecx
c0012ba5:	72 aa                	jb     c0012b51 <Thr::loadDLL(char const*, bool)+0x1af>
c0012ba7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012bac:	75 18                	jne    c0012bc6 <Thr::loadDLL(char const*, bool)+0x224>
c0012bae:	31 db                	xor    ebx,ebx
c0012bb0:	eb 14                	jmp    c0012bc6 <Thr::loadDLL(char const*, bool)+0x224>
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	68 1f e5 01 c0       	push   0xc001e51f
c0012bba:	e8 c4 d5 ff ff       	call   c0010183 <KePanic(char const*)>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	31 ed                	xor    ebp,ebp
c0012bc4:	eb bb                	jmp    c0012b81 <Thr::loadDLL(char const*, bool)+0x1df>
c0012bc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bcc:	89 d8                	mov    eax,ebx
c0012bce:	5b                   	pop    ebx
c0012bcf:	5e                   	pop    esi
c0012bd0:	5f                   	pop    edi
c0012bd1:	5d                   	pop    ebp
c0012bd2:	c3                   	ret    

c0012bd3 <Thr::executeDLL(unsigned long, void*)>:
c0012bd3:	56                   	push   esi
c0012bd4:	53                   	push   ebx
c0012bd5:	52                   	push   edx
c0012bd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012bde:	85 db                	test   ebx,ebx
c0012be0:	75 10                	jne    c0012bf2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	68 3b e5 01 c0       	push   0xc001e53b
c0012bea:	e8 94 d5 ff ff       	call   c0010183 <KePanic(char const*)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	50                   	push   eax
c0012bf3:	50                   	push   eax
c0012bf4:	53                   	push   ebx
c0012bf5:	68 65 e5 01 c0       	push   0xc001e565
c0012bfa:	e8 09 79 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0012bff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012c03:	89 d8                	mov    eax,ebx
c0012c05:	83 c4 14             	add    esp,0x14
c0012c08:	5b                   	pop    ebx
c0012c09:	5e                   	pop    esi
c0012c0a:	ff e0                	jmp    eax

c0012c0c <userModeEntryPoint(void*)>:
c0012c0c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012c11:	48                   	dec    eax
c0012c12:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0012c17:	75 03                	jne    c0012c1c <userModeEntryPoint(void*)+0x10>
c0012c19:	fb                   	sti    
c0012c1a:	66 90                	xchg   ax,ax
c0012c1c:	fb                   	sti    
c0012c1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c25:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c2f:	e9 0b d6 fe ff       	jmp    c000023f <goToUsermode>

c0012c34 <changeTSS>:
c0012c34:	83 ec 14             	sub    esp,0x14
c0012c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c3c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012c3f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012c44:	c1 e2 15             	shl    edx,0x15
c0012c47:	29 d0                	sub    eax,edx
c0012c49:	50                   	push   eax
c0012c4a:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0012c4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c55:	05 7c 11 00 00       	add    eax,0x117c
c0012c5a:	50                   	push   eax
c0012c5b:	e8 a8 5f ff ff       	call   c0008c08 <TSS::setESP(unsigned long)>
c0012c60:	83 c4 1c             	add    esp,0x1c
c0012c63:	c3                   	ret    

c0012c64 <switchToThread(ThreadControlBlock*)>:
c0012c64:	57                   	push   edi
c0012c65:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0012c6a:	56                   	push   esi
c0012c6b:	85 c0                	test   eax,eax
c0012c6d:	53                   	push   ebx
c0012c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c72:	0f 85 90 00 00 00    	jne    c0012d08 <switchToThread(ThreadControlBlock*)+0xa4>
c0012c78:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012c7b:	80 fa ff             	cmp    dl,0xff
c0012c7e:	0f 84 80 00 00 00    	je     c0012d04 <switchToThread(ThreadControlBlock*)+0xa0>
c0012c84:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c8a:	b8 00 04 00 00       	mov    eax,0x400
c0012c8f:	29 d0                	sub    eax,edx
c0012c91:	d1 f8                	sar    eax,1
c0012c93:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c96:	66 90                	xchg   ax,ax
c0012c98:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c9b:	e8 e5 25 00 00       	call   c0015285 <HalQueryPerformanceCounter()>
c0012ca0:	a3 c8 37 02 c0       	mov    ds:0xc00237c8,eax
c0012ca5:	89 15 cc 37 02 c0    	mov    DWORD PTR ds:0xc00237cc,edx
c0012cab:	89 c6                	mov    esi,eax
c0012cad:	89 d7                	mov    edi,edx
c0012caf:	2b 35 b8 37 02 c0    	sub    esi,DWORD PTR ds:0xc00237b8
c0012cb5:	a3 b8 37 02 c0       	mov    ds:0xc00237b8,eax
c0012cba:	1b 3d bc 37 02 c0    	sbb    edi,DWORD PTR ds:0xc00237bc
c0012cc0:	89 35 c0 37 02 c0    	mov    DWORD PTR ds:0xc00237c0,esi
c0012cc6:	89 3d c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,edi
c0012ccc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012cd2:	89 15 bc 37 02 c0    	mov    DWORD PTR ds:0xc00237bc,edx
c0012cd8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012cdb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012cde:	01 c6                	add    esi,eax
c0012ce0:	11 d7                	adc    edi,edx
c0012ce2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012ce5:	83 ec 0c             	sub    esp,0xc
c0012ce8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012ceb:	53                   	push   ebx
c0012cec:	e8 86 d5 fe ff       	call   c0000277 <switchToThreadASM>
c0012cf1:	0f 20 c0             	mov    eax,cr0
c0012cf4:	83 c8 08             	or     eax,0x8
c0012cf7:	0f 22 c0             	mov    cr0,eax
c0012cfa:	83 c4 10             	add    esp,0x10
c0012cfd:	5b                   	pop    ebx
c0012cfe:	5e                   	pop    esi
c0012cff:	5f                   	pop    edi
c0012d00:	c3                   	ret    
c0012d01:	8d 76 00             	lea    esi,[esi+0x0]
c0012d04:	31 c0                	xor    eax,eax
c0012d06:	eb 90                	jmp    c0012c98 <switchToThread(ThreadControlBlock*)+0x34>
c0012d08:	5b                   	pop    ebx
c0012d09:	c7 05 80 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x1
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	c3                   	ret    
c0012d16:	66 90                	xchg   ax,ax

c0012d18 <Process::addArgs(char**)>:
c0012d18:	57                   	push   edi
c0012d19:	56                   	push   esi
c0012d1a:	53                   	push   ebx
c0012d1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d1f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d23:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012d2d:	85 ff                	test   edi,edi
c0012d2f:	74 43                	je     c0012d74 <Process::addArgs(char**)+0x5c>
c0012d31:	8b 07                	mov    eax,DWORD PTR [edi]
c0012d33:	85 c0                	test   eax,eax
c0012d35:	74 3d                	je     c0012d74 <Process::addArgs(char**)+0x5c>
c0012d37:	31 db                	xor    ebx,ebx
c0012d39:	8d 76 00             	lea    esi,[esi+0x0]
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	50                   	push   eax
c0012d40:	e8 fb d7 fe ff       	call   c0000540 <strlen>
c0012d45:	40                   	inc    eax
c0012d46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d49:	e8 6b 4a ff ff       	call   c00077b9 <malloc>
c0012d4e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012d55:	5a                   	pop    edx
c0012d56:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012d59:	59                   	pop    ecx
c0012d5a:	43                   	inc    ebx
c0012d5b:	52                   	push   edx
c0012d5c:	50                   	push   eax
c0012d5d:	e8 9e d8 fe ff       	call   c0000600 <strcpy>
c0012d62:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	75 ca                	jne    c0012d3c <Process::addArgs(char**)+0x24>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	5b                   	pop    ebx
c0012d75:	5e                   	pop    esi
c0012d76:	5f                   	pop    edi
c0012d77:	c3                   	ret    

c0012d78 <Process::Process(char const*, Process*, char**)>:
c0012d78:	56                   	push   esi
c0012d79:	53                   	push   ebx
c0012d7a:	83 ec 14             	sub    esp,0x14
c0012d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d81:	05 0c 02 00 00       	add    eax,0x20c
c0012d86:	bb 07 00 00 00       	mov    ebx,0x7
c0012d8b:	89 c6                	mov    esi,eax
c0012d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d90:	85 db                	test   ebx,ebx
c0012d92:	78 14                	js     c0012da8 <Process::Process(char const*, Process*, char**)+0x30>
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	56                   	push   esi
c0012d98:	e8 ff 97 00 00       	call   c001c59c <ThreadControlBlock::ThreadControlBlock()>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	83 c6 5f             	add    esi,0x5f
c0012da3:	4b                   	dec    ebx
c0012da4:	eb ea                	jmp    c0012d90 <Process::Process(char const*, Process*, char**)+0x18>
c0012da6:	66 90                	xchg   ax,ax
c0012da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012db3:	83 ec 0c             	sub    esp,0xc
c0012db6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dba:	e8 b9 d1 ff ff       	call   c000ff78 <Krnl::newProcessEnv(Process*)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	89 c2                	mov    edx,eax
c0012dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012ddb:	a1 a8 f4 01 c0       	mov    eax,ds:0xc001f4a8
c0012de0:	8d 50 01             	lea    edx,[eax+0x1]
c0012de3:	89 15 a8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4a8,edx
c0012de9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012ded:	89 02                	mov    DWORD PTR [edx],eax
c0012def:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012df7:	83 ec 0c             	sub    esp,0xc
c0012dfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012dfe:	e8 b6 49 ff ff       	call   c00077b9 <malloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 c3                	mov    ebx,eax
c0012e08:	83 ec 08             	sub    esp,0x8
c0012e0b:	6a 00                	push   0x0
c0012e0d:	53                   	push   ebx
c0012e0e:	e8 e5 6f ff ff       	call   c0009df8 <VAS::VAS(bool)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e1a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e24:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012e36:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e46:	85 c0                	test   eax,eax
c0012e48:	74 42                	je     c0012e8c <Process::Process(char const*, Process*, char**)+0x114>
c0012e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e4e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e54:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e5e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e78:	05 0c 01 00 00       	add    eax,0x10c
c0012e7d:	83 ec 08             	sub    esp,0x8
c0012e80:	52                   	push   edx
c0012e81:	50                   	push   eax
c0012e82:	e8 79 d7 fe ff       	call   c0000600 <strcpy>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	eb 64                	jmp    c0012ef0 <Process::Process(char const*, Process*, char**)+0x178>
c0012e8c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e9b:	e8 19 49 ff ff       	call   c00077b9 <malloc>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	89 c3                	mov    ebx,eax
c0012ea5:	83 ec 08             	sub    esp,0x8
c0012ea8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eac:	53                   	push   ebx
c0012ead:	e8 48 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012eb2:	83 c4 10             	add    esp,0x10
c0012eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012eb9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ec3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ec9:	83 ec 0c             	sub    esp,0xc
c0012ecc:	50                   	push   eax
c0012ecd:	e8 c8 52 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012ed2:	83 c4 10             	add    esp,0x10
c0012ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ed9:	05 0c 01 00 00       	add    eax,0x10c
c0012ede:	83 ec 08             	sub    esp,0x8
c0012ee1:	68 84 e5 01 c0       	push   0xc001e584
c0012ee6:	50                   	push   eax
c0012ee7:	e8 14 d7 fe ff       	call   c0000600 <strcpy>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	90                   	nop
c0012ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ef4:	83 c0 0c             	add    eax,0xc
c0012ef7:	83 ec 08             	sub    esp,0x8
c0012efa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012efe:	50                   	push   eax
c0012eff:	e8 fc d6 fe ff       	call   c0000600 <strcpy>
c0012f04:	83 c4 10             	add    esp,0x10
c0012f07:	83 ec 08             	sub    esp,0x8
c0012f0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f12:	e8 01 fe ff ff       	call   c0012d18 <Process::addArgs(char**)>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	83 ec 08             	sub    esp,0x8
c0012f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f25:	e8 89 ed ff ff       	call   c0011cb3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012f2a:	83 c4 10             	add    esp,0x10
c0012f2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012f31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f35:	83 f0 01             	xor    eax,0x1
c0012f38:	88 c2                	mov    dl,al
c0012f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f3e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012f44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f48:	25 ff 00 00 00       	and    eax,0xff
c0012f4d:	83 ec 08             	sub    esp,0x8
c0012f50:	50                   	push   eax
c0012f51:	68 dc e5 01 c0       	push   0xc001e5dc
c0012f56:	e8 ad 75 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	90                   	nop
c0012f5f:	83 c4 14             	add    esp,0x14
c0012f62:	5b                   	pop    ebx
c0012f63:	5e                   	pop    esi
c0012f64:	c3                   	ret    
c0012f65:	90                   	nop
c0012f66:	66 90                	xchg   ax,ax

c0012f68 <Process::Process(bool, char const*, Process*, char**)>:
c0012f68:	56                   	push   esi
c0012f69:	53                   	push   ebx
c0012f6a:	83 ec 24             	sub    esp,0x24
c0012f6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f79:	05 0c 02 00 00       	add    eax,0x20c
c0012f7e:	bb 07 00 00 00       	mov    ebx,0x7
c0012f83:	89 c6                	mov    esi,eax
c0012f85:	8d 76 00             	lea    esi,[esi+0x0]
c0012f88:	85 db                	test   ebx,ebx
c0012f8a:	78 14                	js     c0012fa0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f8c:	83 ec 0c             	sub    esp,0xc
c0012f8f:	56                   	push   esi
c0012f90:	e8 07 96 00 00       	call   c001c59c <ThreadControlBlock::ThreadControlBlock()>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	83 c6 5f             	add    esi,0x5f
c0012f9b:	4b                   	dec    ebx
c0012f9c:	eb ea                	jmp    c0012f88 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f9e:	66 90                	xchg   ax,ax
c0012fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fa4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012fab:	83 ec 0c             	sub    esp,0xc
c0012fae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fb2:	e8 c1 cf ff ff       	call   c000ff78 <Krnl::newProcessEnv(Process*)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	89 c2                	mov    edx,eax
c0012fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012fc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fca:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012fd3:	a1 a8 f4 01 c0       	mov    eax,ds:0xc001f4a8
c0012fd8:	8d 50 01             	lea    edx,[eax+0x1]
c0012fdb:	89 15 a8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4a8,edx
c0012fe1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012fe5:	89 02                	mov    DWORD PTR [edx],eax
c0012fe7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012fef:	83 ec 0c             	sub    esp,0xc
c0012ff2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ff6:	e8 be 47 ff ff       	call   c00077b9 <malloc>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	89 c3                	mov    ebx,eax
c0013000:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013004:	25 ff 00 00 00       	and    eax,0xff
c0013009:	83 ec 08             	sub    esp,0x8
c001300c:	50                   	push   eax
c001300d:	53                   	push   ebx
c001300e:	e8 e5 6d ff ff       	call   c0009df8 <VAS::VAS(bool)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001301a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013024:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001302e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013032:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013036:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001303c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013040:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013046:	85 c0                	test   eax,eax
c0013048:	74 42                	je     c001308c <Process::Process(bool, char const*, Process*, char**)+0x124>
c001304a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001304e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013054:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001305a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001305e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013068:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001306e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013078:	05 0c 01 00 00       	add    eax,0x10c
c001307d:	83 ec 08             	sub    esp,0x8
c0013080:	52                   	push   edx
c0013081:	50                   	push   eax
c0013082:	e8 79 d5 fe ff       	call   c0000600 <strcpy>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	eb 64                	jmp    c00130f0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001308c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013094:	83 ec 0c             	sub    esp,0xc
c0013097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001309b:	e8 19 47 ff ff       	call   c00077b9 <malloc>
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	89 c3                	mov    ebx,eax
c00130a5:	83 ec 08             	sub    esp,0x8
c00130a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130ac:	53                   	push   ebx
c00130ad:	e8 48 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00130bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00130c9:	83 ec 0c             	sub    esp,0xc
c00130cc:	50                   	push   eax
c00130cd:	e8 c8 50 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130d9:	05 0c 01 00 00       	add    eax,0x10c
c00130de:	83 ec 08             	sub    esp,0x8
c00130e1:	68 84 e5 01 c0       	push   0xc001e584
c00130e6:	50                   	push   eax
c00130e7:	e8 14 d5 fe ff       	call   c0000600 <strcpy>
c00130ec:	83 c4 10             	add    esp,0x10
c00130ef:	90                   	nop
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	83 c0 0c             	add    eax,0xc
c00130f7:	83 ec 08             	sub    esp,0x8
c00130fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130fe:	50                   	push   eax
c00130ff:	e8 fc d4 fe ff       	call   c0000600 <strcpy>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	83 ec 08             	sub    esp,0x8
c001310a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001310e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013112:	e8 01 fc ff ff       	call   c0012d18 <Process::addArgs(char**)>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	90                   	nop
c001311b:	83 c4 24             	add    esp,0x24
c001311e:	5b                   	pop    ebx
c001311f:	5e                   	pop    esi
c0013120:	c3                   	ret    
c0013121:	8d 76 00             	lea    esi,[esi+0x0]

c0013124 <taskStartupFunction>:
c0013124:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013129:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001312c:	c3                   	ret    
c001312d:	90                   	nop
c001312e:	66 90                	xchg   ax,ax

c0013130 <Semaphore::Semaphore(int)>:
c0013130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013138:	89 10                	mov    DWORD PTR [eax],edx
c001313a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001313e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013149:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013154:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001315b:	90                   	nop
c001315c:	c3                   	ret    
c001315d:	90                   	nop
c001315e:	66 90                	xchg   ax,ax

c0013160 <Mutex::Mutex()>:
c0013160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013164:	6a 01                	push   0x1
c0013166:	50                   	push   eax
c0013167:	e8 c4 ff ff ff       	call   c0013130 <Semaphore::Semaphore(int)>
c001316c:	83 c4 08             	add    esp,0x8
c001316f:	90                   	nop
c0013170:	c3                   	ret    
c0013171:	90                   	nop
c0013172:	66 90                	xchg   ax,ax

c0013174 <Process::createThread(void (*)(void*), void*, int)>:
c0013174:	57                   	push   edi
c0013175:	31 c9                	xor    ecx,ecx
c0013177:	56                   	push   esi
c0013178:	53                   	push   ebx
c0013179:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001317d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013184:	89 f2                	mov    edx,esi
c0013186:	66 90                	xchg   ax,ax
c0013188:	31 c0                	xor    eax,eax
c001318a:	66 89 d0             	mov    ax,dx
c001318d:	83 e2 01             	and    edx,0x1
c0013190:	74 12                	je     c00131a4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013192:	d1 f8                	sar    eax,1
c0013194:	41                   	inc    ecx
c0013195:	89 c2                	mov    edx,eax
c0013197:	83 f9 10             	cmp    ecx,0x10
c001319a:	75 ec                	jne    c0013188 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001319c:	31 db                	xor    ebx,ebx
c001319e:	89 d8                	mov    eax,ebx
c00131a0:	5b                   	pop    ebx
c00131a1:	5e                   	pop    esi
c00131a2:	5f                   	pop    edi
c00131a3:	c3                   	ret    
c00131a4:	b8 01 00 00 00       	mov    eax,0x1
c00131a9:	d3 e0                	shl    eax,cl
c00131ab:	09 c6                	or     esi,eax
c00131ad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131b0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00131b7:	01 c0                	add    eax,eax
c00131b9:	01 c8                	add    eax,ecx
c00131bb:	8d 04 80             	lea    eax,[eax+eax*4]
c00131be:	01 d8                	add    eax,ebx
c00131c0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00131c7:	75 0b                	jne    c00131d4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00131c9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00131d3:	90                   	nop
c00131d4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00131da:	83 ec 08             	sub    esp,0x8
c00131dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00131e0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131e3:	01 c0                	add    eax,eax
c00131e5:	01 c8                	add    eax,ecx
c00131e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00131ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00131ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00131f3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00131f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131fd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013203:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013209:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013210:	89 ca                	mov    edx,ecx
c0013212:	f7 da                	neg    edx
c0013214:	c1 e2 15             	shl    edx,0x15
c0013217:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001321d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013223:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013227:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013231:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013237:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001323b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013241:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001324b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013255:	53                   	push   ebx
c0013256:	68 a4 37 02 c0       	push   0xc00237a4
c001325b:	e8 dc 90 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	89 d8                	mov    eax,ebx
c0013265:	5b                   	pop    ebx
c0013266:	5e                   	pop    esi
c0013267:	5f                   	pop    edi
c0013268:	c3                   	ret    
c0013269:	90                   	nop
c001326a:	66 90                	xchg   ax,ax

c001326c <Process::createUserThread()>:
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	68 80 00 00 00       	push   0x80
c0013274:	6a 00                	push   0x0
c0013276:	68 0c 2c 01 c0       	push   0xc0012c0c
c001327b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001327f:	50                   	push   eax
c0013280:	e8 ef fe ff ff       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c0013285:	83 c4 1c             	add    esp,0x1c
c0013288:	c3                   	ret    
c0013289:	8d 76 00             	lea    esi,[esi+0x0]

c001328c <setupMultitasking(void (*)())>:
c001328c:	56                   	push   esi
c001328d:	53                   	push   ebx
c001328e:	53                   	push   ebx
c001328f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013293:	eb 13                	jmp    c00132a8 <setupMultitasking(void (*)())+0x1c>
c0013295:	8d 76 00             	lea    esi,[esi+0x0]
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	68 a4 37 02 c0       	push   0xc00237a4
c00132a0:	e8 df 8f 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	68 a4 37 02 c0       	push   0xc00237a4
c00132b0:	e8 ab 8f 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	84 c0                	test   al,al
c00132ba:	74 dc                	je     c0013298 <setupMultitasking(void (*)())+0xc>
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	68 1f 07 00 00       	push   0x71f
c00132c4:	e8 f0 44 ff ff       	call   c00077b9 <malloc>
c00132c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00132d0:	89 c3                	mov    ebx,eax
c00132d2:	6a 00                	push   0x0
c00132d4:	68 88 e5 01 c0       	push   0xc001e588
c00132d9:	6a 01                	push   0x1
c00132db:	50                   	push   eax
c00132dc:	e8 87 fc ff ff       	call   c0012f68 <Process::Process(bool, char const*, Process*, char**)>
c00132e1:	83 c4 14             	add    esp,0x14
c00132e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00132ea:	89 1d b0 37 02 c0    	mov    DWORD PTR ds:0xc00237b0,ebx
c00132f0:	50                   	push   eax
c00132f1:	e8 01 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00132f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00132fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013308:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001330e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013311:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001331b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013321:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013327:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013331:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001333b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013345:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001334b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013351:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001335b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013361:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001336b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013371:	5a                   	pop    edx
c0013372:	59                   	pop    ecx
c0013373:	68 84 e5 01 c0       	push   0xc001e584
c0013378:	50                   	push   eax
c0013379:	e8 82 d2 fe ff       	call   c0000600 <strcpy>
c001337e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013385:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013389:	83 c4 14             	add    esp,0x14
c001338c:	5b                   	pop    ebx
c001338d:	5e                   	pop    esi
c001338e:	e9 d6 ce fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013393:	90                   	nop

c0013394 <schedule()>:
c0013394:	8b 15 84 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023784
c001339a:	85 d2                	test   edx,edx
c001339c:	74 0e                	je     c00133ac <schedule()+0x18>
c001339e:	c7 05 80 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x1
c00133a8:	c3                   	ret    
c00133a9:	8d 76 00             	lea    esi,[esi+0x0]
c00133ac:	53                   	push   ebx
c00133ad:	83 ec 14             	sub    esp,0x14
c00133b0:	68 a4 37 02 c0       	push   0xc00237a4
c00133b5:	e8 a6 8e 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00133ba:	83 c4 10             	add    esp,0x10
c00133bd:	84 c0                	test   al,al
c00133bf:	75 3b                	jne    c00133fc <schedule()+0x68>
c00133c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00133c9:	4a                   	dec    edx
c00133ca:	74 38                	je     c0013404 <schedule()+0x70>
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	68 a4 37 02 c0       	push   0xc00237a4
c00133d4:	e8 a3 8e 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133d9:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c00133e0:	89 c3                	mov    ebx,eax
c00133e2:	e8 9d 8e 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00133e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00133ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133f1:	e8 6e f8 ff ff       	call   c0012c64 <switchToThread(ThreadControlBlock*)>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	8d 76 00             	lea    esi,[esi+0x0]
c00133fc:	83 c4 08             	add    esp,0x8
c00133ff:	5b                   	pop    ebx
c0013400:	c3                   	ret    
c0013401:	8d 76 00             	lea    esi,[esi+0x0]
c0013404:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001340b:	83 ec 08             	sub    esp,0x8
c001340e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013413:	50                   	push   eax
c0013414:	68 a4 37 02 c0       	push   0xc00237a4
c0013419:	e8 1e 8f 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001341e:	83 c4 10             	add    esp,0x10
c0013421:	eb a9                	jmp    c00133cc <schedule()+0x38>
c0013423:	90                   	nop

c0013424 <Semaphore::tryAcquire()>:
c0013424:	53                   	push   ebx
c0013425:	83 ec 08             	sub    esp,0x8
c0013428:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001342c:	fa                   	cli    
c001342d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013432:	8d 50 01             	lea    edx,[eax+0x1]
c0013435:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c001343b:	8b 15 84 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023784
c0013441:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013444:	89 1d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebx
c001344a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001344d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001344f:	7c 33                	jl     c0013484 <Semaphore::tryAcquire()+0x60>
c0013451:	89 15 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edx
c0013457:	85 d2                	test   edx,edx
c0013459:	75 0d                	jne    c0013468 <Semaphore::tryAcquire()+0x44>
c001345b:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c0013461:	85 d2                	test   edx,edx
c0013463:	75 6b                	jne    c00134d0 <Semaphore::tryAcquire()+0xac>
c0013465:	8d 76 00             	lea    esi,[esi+0x0]
c0013468:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001346d:	85 c0                	test   eax,eax
c001346f:	74 0b                	je     c001347c <Semaphore::tryAcquire()+0x58>
c0013471:	8d 76 00             	lea    esi,[esi+0x0]
c0013474:	31 c0                	xor    eax,eax
c0013476:	83 c4 08             	add    esp,0x8
c0013479:	5b                   	pop    ebx
c001347a:	c3                   	ret    
c001347b:	90                   	nop
c001347c:	fb                   	sti    
c001347d:	83 c4 08             	add    esp,0x8
c0013480:	5b                   	pop    ebx
c0013481:	c3                   	ret    
c0013482:	66 90                	xchg   ax,ax
c0013484:	43                   	inc    ebx
c0013485:	89 15 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edx
c001348b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001348e:	85 d2                	test   edx,edx
c0013490:	75 22                	jne    c00134b4 <Semaphore::tryAcquire()+0x90>
c0013492:	8b 0d 80 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023780
c0013498:	85 c9                	test   ecx,ecx
c001349a:	74 18                	je     c00134b4 <Semaphore::tryAcquire()+0x90>
c001349c:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c00134a6:	e8 e9 fe ff ff       	call   c0013394 <schedule()>
c00134ab:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00134b0:	48                   	dec    eax
c00134b1:	8d 76 00             	lea    esi,[esi+0x0]
c00134b4:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00134b9:	85 c0                	test   eax,eax
c00134bb:	75 0b                	jne    c00134c8 <Semaphore::tryAcquire()+0xa4>
c00134bd:	fb                   	sti    
c00134be:	b0 01                	mov    al,0x1
c00134c0:	83 c4 08             	add    esp,0x8
c00134c3:	5b                   	pop    ebx
c00134c4:	c3                   	ret    
c00134c5:	8d 76 00             	lea    esi,[esi+0x0]
c00134c8:	b0 01                	mov    al,0x1
c00134ca:	83 c4 08             	add    esp,0x8
c00134cd:	5b                   	pop    ebx
c00134ce:	c3                   	ret    
c00134cf:	90                   	nop
c00134d0:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c00134da:	e8 b5 fe ff ff       	call   c0013394 <schedule()>
c00134df:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00134e4:	48                   	dec    eax
c00134e5:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00134ea:	85 c0                	test   eax,eax
c00134ec:	75 86                	jne    c0013474 <Semaphore::tryAcquire()+0x50>
c00134ee:	eb 8c                	jmp    c001347c <Semaphore::tryAcquire()+0x58>

c00134f0 <Semaphore::assertLocked(char const*)>:
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134f7:	fa                   	cli    
c00134f8:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00134fe:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013503:	8d 48 01             	lea    ecx,[eax+0x1]
c0013506:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c001350c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001350e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013511:	7c 29                	jl     c001353c <Semaphore::assertLocked(char const*)+0x4c>
c0013513:	90                   	nop
c0013514:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013519:	85 c0                	test   eax,eax
c001351b:	75 0b                	jne    c0013528 <Semaphore::assertLocked(char const*)+0x38>
c001351d:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013522:	85 c0                	test   eax,eax
c0013524:	75 2e                	jne    c0013554 <Semaphore::assertLocked(char const*)+0x64>
c0013526:	66 90                	xchg   ax,ax
c0013528:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001352d:	48                   	dec    eax
c001352e:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013533:	75 03                	jne    c0013538 <Semaphore::assertLocked(char const*)+0x48>
c0013535:	fb                   	sti    
c0013536:	66 90                	xchg   ax,ax
c0013538:	83 c4 0c             	add    esp,0xc
c001353b:	c3                   	ret    
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013543:	52                   	push   edx
c0013544:	e8 3a cc ff ff       	call   c0010183 <KePanic(char const*)>
c0013549:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c001354e:	83 c4 10             	add    esp,0x10
c0013551:	48                   	dec    eax
c0013552:	eb c0                	jmp    c0013514 <Semaphore::assertLocked(char const*)+0x24>
c0013554:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c001355e:	e8 31 fe ff ff       	call   c0013394 <schedule()>
c0013563:	eb c3                	jmp    c0013528 <Semaphore::assertLocked(char const*)+0x38>
c0013565:	8d 76 00             	lea    esi,[esi+0x0]

c0013568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013568:	83 ec 0c             	sub    esp,0xc
c001356b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013570:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013574:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013577:	e8 18 fe ff ff       	call   c0013394 <schedule()>
c001357c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013581:	48                   	dec    eax
c0013582:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013587:	75 03                	jne    c001358c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013589:	fb                   	sti    
c001358a:	66 90                	xchg   ax,ax
c001358c:	83 c4 0c             	add    esp,0xc
c001358f:	c3                   	ret    

c0013590 <blockTask(TaskState)>:
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	fa                   	cli    
c0013594:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001359a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001359e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00135a6:	e8 e9 fd ff ff       	call   c0013394 <schedule()>
c00135ab:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00135b0:	48                   	dec    eax
c00135b1:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00135b6:	75 04                	jne    c00135bc <blockTask(TaskState)+0x2c>
c00135b8:	fb                   	sti    
c00135b9:	8d 76 00             	lea    esi,[esi+0x0]
c00135bc:	83 c4 0c             	add    esp,0xc
c00135bf:	c3                   	ret    

c00135c0 <waitTask(int, int*, int)>:
c00135c0:	83 ec 18             	sub    esp,0x18
c00135c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135cc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00135cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00135db:	6a 07                	push   0x7
c00135dd:	e8 ae ff ff ff       	call   c0013590 <blockTask(TaskState)>
c00135e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00135ed:	85 d2                	test   edx,edx
c00135ef:	74 0b                	je     c00135fc <waitTask(int, int*, int)+0x3c>
c00135f1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00135f4:	89 02                	mov    DWORD PTR [edx],eax
c00135f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135fb:	90                   	nop
c00135fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00135ff:	83 c4 0c             	add    esp,0xc
c0013602:	c3                   	ret    
c0013603:	90                   	nop

c0013604 <milliTenthSleepUntil(unsigned int)>:
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360b:	39 05 ac 2a 02 c0    	cmp    DWORD PTR ds:0xc0022aac,eax
c0013611:	76 05                	jbe    c0013618 <milliTenthSleepUntil(unsigned int)+0x14>
c0013613:	90                   	nop
c0013614:	83 c4 0c             	add    esp,0xc
c0013617:	c3                   	ret    
c0013618:	fa                   	cli    
c0013619:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001361f:	83 ec 08             	sub    esp,0x8
c0013622:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013628:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001362e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013631:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013637:	52                   	push   edx
c0013638:	68 98 37 02 c0       	push   0xc0023798
c001363d:	e8 fa 8c 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013642:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013649:	e8 42 ff ff ff       	call   c0013590 <blockTask(TaskState)>
c001364e:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	48                   	dec    eax
c0013657:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c001365c:	85 c0                	test   eax,eax
c001365e:	75 0c                	jne    c001366c <milliTenthSleepUntil(unsigned int)+0x68>
c0013660:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013665:	85 c0                	test   eax,eax
c0013667:	75 17                	jne    c0013680 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013669:	8d 76 00             	lea    esi,[esi+0x0]
c001366c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013671:	48                   	dec    eax
c0013672:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013677:	75 9b                	jne    c0013614 <milliTenthSleepUntil(unsigned int)+0x10>
c0013679:	fb                   	sti    
c001367a:	83 c4 0c             	add    esp,0xc
c001367d:	c3                   	ret    
c001367e:	66 90                	xchg   ax,ax
c0013680:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c001368a:	e8 05 fd ff ff       	call   c0013394 <schedule()>
c001368f:	eb db                	jmp    c001366c <milliTenthSleepUntil(unsigned int)+0x68>
c0013691:	8d 76 00             	lea    esi,[esi+0x0]

c0013694 <milliTenthSleep(unsigned int)>:
c0013694:	a1 ac 2a 02 c0       	mov    eax,ds:0xc0022aac
c0013699:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001369d:	e9 62 ff ff ff       	jmp    c0013604 <milliTenthSleepUntil(unsigned int)>
c00136a2:	66 90                	xchg   ax,ax

c00136a4 <sleep(unsigned int)>:
c00136a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136a8:	8d 04 80             	lea    eax,[eax+eax*4]
c00136ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00136ae:	8d 04 80             	lea    eax,[eax+eax*4]
c00136b1:	8d 04 80             	lea    eax,[eax+eax*4]
c00136b4:	c1 e0 04             	shl    eax,0x4
c00136b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136bb:	eb d7                	jmp    c0013694 <milliTenthSleep(unsigned int)>
c00136bd:	90                   	nop
c00136be:	66 90                	xchg   ax,ax

c00136c0 <Semaphore::acquire()>:
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c7:	fa                   	cli    
c00136c8:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c00136cd:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00136d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00136d6:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c00136dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00136df:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00136e1:	7d 2d                	jge    c0013710 <Semaphore::acquire()+0x50>
c00136e3:	41                   	inc    ecx
c00136e4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00136e7:	90                   	nop
c00136e8:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c00136ed:	85 c0                	test   eax,eax
c00136ef:	75 0b                	jne    c00136fc <Semaphore::acquire()+0x3c>
c00136f1:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00136f6:	85 c0                	test   eax,eax
c00136f8:	75 62                	jne    c001375c <Semaphore::acquire()+0x9c>
c00136fa:	66 90                	xchg   ax,ax
c00136fc:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013701:	48                   	dec    eax
c0013702:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013707:	75 03                	jne    c001370c <Semaphore::acquire()+0x4c>
c0013709:	fb                   	sti    
c001370a:	66 90                	xchg   ax,ax
c001370c:	83 c4 0c             	add    esp,0xc
c001370f:	c3                   	ret    
c0013710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013715:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001371c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001371f:	85 c9                	test   ecx,ecx
c0013721:	74 4d                	je     c0013770 <Semaphore::acquire()+0xb0>
c0013723:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013726:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001372c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001372f:	90                   	nop
c0013730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013735:	83 ec 0c             	sub    esp,0xc
c0013738:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001373b:	68 04 e6 01 c0       	push   0xc001e604
c0013740:	e8 c3 6d ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0013745:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001374c:	e8 3f fe ff ff       	call   c0013590 <blockTask(TaskState)>
c0013751:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013756:	83 c4 10             	add    esp,0x10
c0013759:	48                   	dec    eax
c001375a:	eb 8c                	jmp    c00136e8 <Semaphore::acquire()+0x28>
c001375c:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013766:	e8 29 fc ff ff       	call   c0013394 <schedule()>
c001376b:	eb 8f                	jmp    c00136fc <Semaphore::acquire()+0x3c>
c001376d:	8d 76 00             	lea    esi,[esi+0x0]
c0013770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013775:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013778:	eb b6                	jmp    c0013730 <Semaphore::acquire()+0x70>
c001377a:	66 90                	xchg   ax,ax

c001377c <taskReturned>:
c001377c:	83 ec 18             	sub    esp,0x18
c001377f:	68 24 e6 01 c0       	push   0xc001e624
c0013784:	e8 fa c9 ff ff       	call   c0010183 <KePanic(char const*)>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	83 ec 0c             	sub    esp,0xc
c001378f:	6a 02                	push   0x2
c0013791:	e8 fa fd ff ff       	call   c0013590 <blockTask(TaskState)>
c0013796:	fa                   	cli    
c0013797:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001379d:	e8 f2 fb ff ff       	call   c0013394 <schedule()>
c00137a2:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	48                   	dec    eax
c00137ab:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00137b0:	85 c0                	test   eax,eax
c00137b2:	75 d8                	jne    c001378c <taskReturned+0x10>
c00137b4:	fb                   	sti    
c00137b5:	eb d5                	jmp    c001378c <taskReturned+0x10>
c00137b7:	90                   	nop

c00137b8 <Thr::processFromPID(int)>:
c00137b8:	57                   	push   edi
c00137b9:	56                   	push   esi
c00137ba:	53                   	push   ebx
c00137bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137bf:	fa                   	cli    
c00137c0:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00137c6:	83 ec 0c             	sub    esp,0xc
c00137c9:	68 a4 37 02 c0       	push   0xc00237a4
c00137ce:	e8 a9 8a 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137d3:	83 c4 10             	add    esp,0x10
c00137d6:	89 c7                	mov    edi,eax
c00137d8:	eb 16                	jmp    c00137f0 <Thr::processFromPID(int)+0x38>
c00137da:	66 90                	xchg   ax,ax
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	68 a4 37 02 c0       	push   0xc00237a4
c00137e4:	e8 93 8a 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	39 f8                	cmp    eax,edi
c00137ee:	74 4c                	je     c001383c <Thr::processFromPID(int)+0x84>
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	68 a4 37 02 c0       	push   0xc00237a4
c00137f8:	e8 7f 8a 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137fd:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013804:	89 c3                	mov    ebx,eax
c0013806:	e8 79 8a 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001380b:	58                   	pop    eax
c001380c:	5a                   	pop    edx
c001380d:	53                   	push   ebx
c001380e:	68 a4 37 02 c0       	push   0xc00237a4
c0013813:	e8 24 8b 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013818:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	39 30                	cmp    DWORD PTR [eax],esi
c0013820:	75 ba                	jne    c00137dc <Thr::processFromPID(int)+0x24>
c0013822:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013827:	48                   	dec    eax
c0013828:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001382d:	74 09                	je     c0013838 <Thr::processFromPID(int)+0x80>
c001382f:	90                   	nop
c0013830:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013833:	5b                   	pop    ebx
c0013834:	5e                   	pop    esi
c0013835:	5f                   	pop    edi
c0013836:	c3                   	ret    
c0013837:	90                   	nop
c0013838:	fb                   	sti    
c0013839:	eb f5                	jmp    c0013830 <Thr::processFromPID(int)+0x78>
c001383b:	90                   	nop
c001383c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013841:	48                   	dec    eax
c0013842:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013847:	75 07                	jne    c0013850 <Thr::processFromPID(int)+0x98>
c0013849:	fb                   	sti    
c001384a:	5b                   	pop    ebx
c001384b:	5e                   	pop    esi
c001384c:	5f                   	pop    edi
c001384d:	c3                   	ret    
c001384e:	66 90                	xchg   ax,ax
c0013850:	5b                   	pop    ebx
c0013851:	31 c0                	xor    eax,eax
c0013853:	5e                   	pop    esi
c0013854:	5f                   	pop    edi
c0013855:	c3                   	ret    
c0013856:	66 90                	xchg   ax,ax

c0013858 <unblockTask(ThreadControlBlock*)>:
c0013858:	53                   	push   ebx
c0013859:	83 ec 08             	sub    esp,0x8
c001385c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013860:	fa                   	cli    
c0013861:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013867:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001386a:	85 c0                	test   eax,eax
c001386c:	74 66                	je     c00138d4 <unblockTask(ThreadControlBlock*)+0x7c>
c001386e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013871:	48                   	dec    eax
c0013872:	74 38                	je     c00138ac <unblockTask(ThreadControlBlock*)+0x54>
c0013874:	83 ec 0c             	sub    esp,0xc
c0013877:	68 a4 37 02 c0       	push   0xc00237a4
c001387c:	e8 fb 89 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	85 c0                	test   eax,eax
c0013886:	75 1c                	jne    c00138a4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013888:	eb 5e                	jmp    c00138e8 <unblockTask(ThreadControlBlock*)+0x90>
c001388a:	66 90                	xchg   ax,ax
c001388c:	83 ec 08             	sub    esp,0x8
c001388f:	50                   	push   eax
c0013890:	68 a4 37 02 c0       	push   0xc00237a4
c0013895:	e8 92 8d 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	85 c0                	test   eax,eax
c001389f:	74 47                	je     c00138e8 <unblockTask(ThreadControlBlock*)+0x90>
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	39 c3                	cmp    ebx,eax
c00138a6:	75 e4                	jne    c001388c <unblockTask(ThreadControlBlock*)+0x34>
c00138a8:	eb 12                	jmp    c00138bc <unblockTask(ThreadControlBlock*)+0x64>
c00138aa:	66 90                	xchg   ax,ax
c00138ac:	83 ec 0c             	sub    esp,0xc
c00138af:	68 a6 e5 01 c0       	push   0xc001e5a6
c00138b4:	e8 4f 6c ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00138c1:	48                   	dec    eax
c00138c2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00138c7:	75 03                	jne    c00138cc <unblockTask(ThreadControlBlock*)+0x74>
c00138c9:	fb                   	sti    
c00138ca:	66 90                	xchg   ax,ax
c00138cc:	83 c4 08             	add    esp,0x8
c00138cf:	5b                   	pop    ebx
c00138d0:	c3                   	ret    
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	83 ec 0c             	sub    esp,0xc
c00138d7:	68 8f e5 01 c0       	push   0xc001e58f
c00138dc:	e8 27 6c ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00138e1:	83 c4 10             	add    esp,0x10
c00138e4:	eb d6                	jmp    c00138bc <unblockTask(ThreadControlBlock*)+0x64>
c00138e6:	66 90                	xchg   ax,ax
c00138e8:	83 ec 08             	sub    esp,0x8
c00138eb:	53                   	push   ebx
c00138ec:	68 a4 37 02 c0       	push   0xc00237a4
c00138f1:	e8 46 8a 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	eb c1                	jmp    c00138bc <unblockTask(ThreadControlBlock*)+0x64>
c00138fb:	90                   	nop

c00138fc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00138fc:	55                   	push   ebp
c00138fd:	57                   	push   edi
c00138fe:	56                   	push   esi
c00138ff:	53                   	push   ebx
c0013900:	83 ec 1c             	sub    esp,0x1c
c0013903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013907:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001390a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013910:	85 ed                	test   ebp,ebp
c0013912:	7e 24                	jle    c0013938 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013914:	31 f6                	xor    esi,esi
c0013916:	66 90                	xchg   ax,ax
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013922:	46                   	inc    esi
c0013923:	57                   	push   edi
c0013924:	e8 a0 3e ff ff       	call   c00077c9 <free>
c0013929:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013935:	7f e1                	jg     c0013918 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013937:	90                   	nop
c0013938:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013942:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013947:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001394a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001394d:	d3 c0                	rol    eax,cl
c001394f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013956:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013959:	89 f7                	mov    edi,esi
c001395b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013963:	0f 85 77 01 00 00    	jne    c0013ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013969:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001396f:	85 ed                	test   ebp,ebp
c0013971:	74 1d                	je     c0013990 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013973:	83 ec 0c             	sub    esp,0xc
c0013976:	55                   	push   ebp
c0013977:	e8 18 c5 ff ff       	call   c000fe94 <EnvVarContainer::~EnvVarContainer()>
c001397c:	59                   	pop    ecx
c001397d:	5e                   	pop    esi
c001397e:	6a 0c                	push   0xc
c0013980:	55                   	push   ebp
c0013981:	e8 8c 6a ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c0013986:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	89 f7                	mov    edi,esi
c001398e:	66 90                	xchg   ax,ax
c0013990:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013996:	85 c0                	test   eax,eax
c0013998:	0f 84 b6 00 00 00    	je     c0013a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001399e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00139a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00139a5:	31 c9                	xor    ecx,ecx
c00139a7:	eb 17                	jmp    c00139c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00139a9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ac:	41                   	inc    ecx
c00139ad:	83 f9 10             	cmp    ecx,0x10
c00139b0:	0f 84 9e 00 00 00    	je     c0013a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00139b6:	66 90                	xchg   ax,ax
c00139b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139be:	66 90                	xchg   ax,ax
c00139c0:	31 d2                	xor    edx,edx
c00139c2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00139c9:	d3 fa                	sar    edx,cl
c00139cb:	83 e2 01             	and    edx,0x1
c00139ce:	74 dc                	je     c00139ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139d0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00139d3:	01 d2                	add    edx,edx
c00139d5:	01 ca                	add    edx,ecx
c00139d7:	8d 14 92             	lea    edx,[edx+edx*4]
c00139da:	01 d0                	add    eax,edx
c00139dc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00139e2:	83 fd 07             	cmp    ebp,0x7
c00139e5:	75 c5                	jne    c00139ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139e7:	05 40 02 00 00       	add    eax,0x240
c00139ec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00139ef:	83 fd ff             	cmp    ebp,0xffffffff
c00139f2:	0f 8c f0 00 00 00    	jl     c0013ae8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00139f8:	0f 84 ae 01 00 00    	je     c0013bac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00139fe:	85 ed                	test   ebp,ebp
c0013a00:	0f 84 92 01 00 00    	je     c0013b98 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013a06:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013a08:	75 a2                	jne    c00139ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a0a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013a10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a14:	01 d0                	add    eax,edx
c0013a16:	66 90                	xchg   ax,ax
c0013a18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013a25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013a2e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013a35:	50                   	push   eax
c0013a36:	e8 1d fe ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a45:	89 f7                	mov    edi,esi
c0013a47:	41                   	inc    ecx
c0013a48:	83 f9 10             	cmp    ecx,0x10
c0013a4b:	0f 85 67 ff ff ff    	jne    c00139b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013a51:	8d 76 00             	lea    esi,[esi+0x0]
c0013a54:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013a5a:	85 c0                	test   eax,eax
c0013a5c:	74 62                	je     c0013ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a5e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013a64:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013a6a:	74 54                	je     c0013ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	68 a4 37 02 c0       	push   0xc00237a4
c0013a74:	e8 03 88 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a79:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013a80:	89 c7                	mov    edi,eax
c0013a82:	e8 d9 87 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	84 c0                	test   al,al
c0013a8c:	0f 84 ce 00 00 00    	je     c0013b60 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013a92:	66 90                	xchg   ax,ax
c0013a94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a97:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a9d:	85 d2                	test   edx,edx
c0013a9f:	74 0f                	je     c0013ab0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013aa1:	83 ec 0c             	sub    esp,0xc
c0013aa4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013aa6:	52                   	push   edx
c0013aa7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013aaa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013aba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013abd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ac0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ac6:	85 db                	test   ebx,ebx
c0013ac8:	74 16                	je     c0013ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	53                   	push   ebx
c0013ace:	e8 13 5d ff ff       	call   c00097e6 <VAS::~VAS()>
c0013ad3:	58                   	pop    eax
c0013ad4:	5a                   	pop    edx
c0013ad5:	6a 14                	push   0x14
c0013ad7:	53                   	push   ebx
c0013ad8:	e8 35 69 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	83 c4 1c             	add    esp,0x1c
c0013ae3:	5b                   	pop    ebx
c0013ae4:	5e                   	pop    esi
c0013ae5:	5f                   	pop    edi
c0013ae6:	5d                   	pop    ebp
c0013ae7:	c3                   	ret    
c0013ae8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013aec:	83 ec 0c             	sub    esp,0xc
c0013aef:	68 58 e6 01 c0       	push   0xc001e658
c0013af4:	e8 8a c6 ff ff       	call   c0010183 <KePanic(char const*)>
c0013af9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	89 f7                	mov    edi,esi
c0013b01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b05:	e9 a2 fe ff ff       	jmp    c00139ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013b12:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013b18:	75 1e                	jne    c0013b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	68 c0 e6 01 c0       	push   0xc001e6c0
c0013b22:	e8 e1 69 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0013b27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013b2e:	e8 5d fa ff ff       	call   c0013590 <blockTask(TaskState)>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	66 90                	xchg   ax,ax
c0013b38:	83 ec 08             	sub    esp,0x8
c0013b3b:	56                   	push   esi
c0013b3c:	68 a4 37 02 c0       	push   0xc00237a4
c0013b41:	e8 f6 87 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b46:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013b4d:	e8 2a 87 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	39 f8                	cmp    eax,edi
c0013b57:	0f 84 37 ff ff ff    	je     c0013a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	68 a4 37 02 c0       	push   0xc00237a4
c0013b68:	e8 0f 87 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b6d:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013b74:	89 c6                	mov    esi,eax
c0013b76:	e8 09 87 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	39 f3                	cmp    ebx,esi
c0013b80:	74 b6                	je     c0013b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b82:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b88:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013b8e:	75 a8                	jne    c0013b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b90:	e9 77 ff ff ff       	jmp    c0013b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b95:	8d 76 00             	lea    esi,[esi+0x0]
c0013b98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	68 8c e6 01 c0       	push   0xc001e68c
c0013ba4:	e9 4b ff ff ff       	jmp    c0013af4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bac:	8b 36                	mov    esi,DWORD PTR [esi]
c0013bae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013bb2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013bb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013bb8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013bbe:	01 d7                	add    edi,edx
c0013bc0:	89 f8                	mov    eax,edi
c0013bc2:	e9 51 fe ff ff       	jmp    c0013a18 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013bc7:	90                   	nop

c0013bc8 <cleanerTaskFunction(void*)>:
c0013bc8:	53                   	push   ebx
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013bd1:	48                   	dec    eax
c0013bd2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013bd7:	75 03                	jne    c0013bdc <cleanerTaskFunction(void*)+0x14>
c0013bd9:	fb                   	sti    
c0013bda:	66 90                	xchg   ax,ax
c0013bdc:	fa                   	cli    
c0013bdd:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013be2:	80 3d 6c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002376c,0x0
c0013be9:	8d 50 01             	lea    edx,[eax+0x1]
c0013bec:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c0013bf2:	0f 84 ac 00 00 00    	je     c0013ca4 <cleanerTaskFunction(void*)+0xdc>
c0013bf8:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013bfd:	85 c0                	test   eax,eax
c0013bff:	75 03                	jne    c0013c04 <cleanerTaskFunction(void*)+0x3c>
c0013c01:	fb                   	sti    
c0013c02:	66 90                	xchg   ax,ax
c0013c04:	c6 05 6c 37 02 c0 00 	mov    BYTE PTR ds:0xc002376c,0x0
c0013c0b:	fa                   	cli    
c0013c0c:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013c12:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013c18:	fa                   	cli    
c0013c19:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013c1f:	eb 2b                	jmp    c0013c4c <cleanerTaskFunction(void*)+0x84>
c0013c21:	8d 76 00             	lea    esi,[esi+0x0]
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	68 8c 37 02 c0       	push   0xc002378c
c0013c2c:	e8 4b 86 00 00       	call   c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c31:	c7 04 24 8c 37 02 c0 	mov    DWORD PTR [esp],0xc002378c
c0013c38:	89 c3                	mov    ebx,eax
c0013c3a:	e8 45 86 00 00       	call   c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c42:	e8 b5 fc ff ff       	call   c00138fc <cleanupTerminatedTask(ThreadControlBlock*)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	66 90                	xchg   ax,ax
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	68 8c 37 02 c0       	push   0xc002378c
c0013c54:	e8 07 86 00 00       	call   c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	84 c0                	test   al,al
c0013c5e:	74 c4                	je     c0013c24 <cleanerTaskFunction(void*)+0x5c>
c0013c60:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013c65:	48                   	dec    eax
c0013c66:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013c6b:	75 03                	jne    c0013c70 <cleanerTaskFunction(void*)+0xa8>
c0013c6d:	fb                   	sti    
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013c75:	48                   	dec    eax
c0013c76:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013c7b:	0f 85 4b ff ff ff    	jne    c0013bcc <cleanerTaskFunction(void*)+0x4>
c0013c81:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013c86:	85 c0                	test   eax,eax
c0013c88:	0f 84 3e ff ff ff    	je     c0013bcc <cleanerTaskFunction(void*)+0x4>
c0013c8e:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013c98:	e8 f7 f6 ff ff       	call   c0013394 <schedule()>
c0013c9d:	e9 2a ff ff ff       	jmp    c0013bcc <cleanerTaskFunction(void*)+0x4>
c0013ca2:	66 90                	xchg   ax,ax
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	6a 02                	push   0x2
c0013ca9:	e8 ba f8 ff ff       	call   c0013568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	e9 4e ff ff ff       	jmp    c0013c04 <cleanerTaskFunction(void*)+0x3c>
c0013cb6:	66 90                	xchg   ax,ax

c0013cb8 <terminateTask(int)>:
c0013cb8:	83 ec 14             	sub    esp,0x14
c0013cbb:	fa                   	cli    
c0013cbc:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013cc2:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013cc8:	fa                   	cli    
c0013cc9:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013ccf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013cdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013ce3:	50                   	push   eax
c0013ce4:	68 8c 37 02 c0       	push   0xc002378c
c0013ce9:	e8 4e 86 00 00       	call   c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013cfd:	a1 68 37 02 c0       	mov    eax,ds:0xc0023768
c0013d02:	85 c0                	test   eax,eax
c0013d04:	74 5e                	je     c0013d64 <terminateTask(int)+0xac>
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	c6 05 6c 37 02 c0 01 	mov    BYTE PTR ds:0xc002376c,0x1
c0013d10:	50                   	push   eax
c0013d11:	e8 42 fb ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	8d 76 00             	lea    esi,[esi+0x0]
c0013d1c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013d21:	48                   	dec    eax
c0013d22:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013d27:	75 03                	jne    c0013d2c <terminateTask(int)+0x74>
c0013d29:	fb                   	sti    
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013d31:	48                   	dec    eax
c0013d32:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013d37:	75 0b                	jne    c0013d44 <terminateTask(int)+0x8c>
c0013d39:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c0013d40:	75 36                	jne    c0013d78 <terminateTask(int)+0xc0>
c0013d42:	66 90                	xchg   ax,ax
c0013d44:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013d49:	48                   	dec    eax
c0013d4a:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013d4f:	75 03                	jne    c0013d54 <terminateTask(int)+0x9c>
c0013d51:	fb                   	sti    
c0013d52:	66 90                	xchg   ax,ax
c0013d54:	fa                   	cli    
c0013d55:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013d5b:	90                   	nop
c0013d5c:	e8 33 f6 ff ff       	call   c0013394 <schedule()>
c0013d61:	eb e1                	jmp    c0013d44 <terminateTask(int)+0x8c>
c0013d63:	90                   	nop
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 bd e5 01 c0       	push   0xc001e5bd
c0013d6c:	e8 97 67 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	eb a6                	jmp    c0013d1c <terminateTask(int)+0x64>
c0013d76:	66 90                	xchg   ax,ax
c0013d78:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013d82:	eb d8                	jmp    c0013d5c <terminateTask(int)+0xa4>

c0013d84 <Thr::terminateFromIRQ(int)>:
c0013d84:	83 ec 18             	sub    esp,0x18
c0013d87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d8b:	50                   	push   eax
c0013d8c:	e8 27 ff ff ff       	call   c0013cb8 <terminateTask(int)>
c0013d91:	90                   	nop
c0013d92:	66 90                	xchg   ax,ax

c0013d94 <Semaphore::release()>:
c0013d94:	83 ec 0c             	sub    esp,0xc
c0013d97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d9b:	fa                   	cli    
c0013d9c:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013da1:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013da7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013daa:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c0013db0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013db3:	85 c9                	test   ecx,ecx
c0013db5:	74 41                	je     c0013df8 <Semaphore::release()+0x64>
c0013db7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dc0:	51                   	push   ecx
c0013dc1:	e8 92 fa ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c0013dc6:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	48                   	dec    eax
c0013dcf:	90                   	nop
c0013dd0:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013dd5:	85 c0                	test   eax,eax
c0013dd7:	75 0b                	jne    c0013de4 <Semaphore::release()+0x50>
c0013dd9:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013dde:	85 c0                	test   eax,eax
c0013de0:	75 1e                	jne    c0013e00 <Semaphore::release()+0x6c>
c0013de2:	66 90                	xchg   ax,ax
c0013de4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013de9:	48                   	dec    eax
c0013dea:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013def:	75 03                	jne    c0013df4 <Semaphore::release()+0x60>
c0013df1:	fb                   	sti    
c0013df2:	66 90                	xchg   ax,ax
c0013df4:	83 c4 0c             	add    esp,0xc
c0013df7:	c3                   	ret    
c0013df8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013dfb:	eb d3                	jmp    c0013dd0 <Semaphore::release()+0x3c>
c0013dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0013e00:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013e0a:	e8 85 f5 ff ff       	call   c0013394 <schedule()>
c0013e0f:	eb d3                	jmp    c0013de4 <Semaphore::release()+0x50>
c0013e11:	8d 76 00             	lea    esi,[esi+0x0]

c0013e14 <__static_initialization_and_destruction_0(int, int)>:
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013e1c:	0f 85 8e 00 00 00    	jne    c0013eb0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e22:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013e2a:	0f 85 80 00 00 00    	jne    c0013eb0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e30:	83 ec 0c             	sub    esp,0xc
c0013e33:	68 a4 37 02 c0       	push   0xc00237a4
c0013e38:	e8 ab 87 00 00       	call   c001c5e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	83 ec 04             	sub    esp,0x4
c0013e43:	68 70 f1 01 c0       	push   0xc001f170
c0013e48:	68 a4 37 02 c0       	push   0xc00237a4
c0013e4d:	68 98 c5 01 c0       	push   0xc001c598
c0013e52:	e8 6b 65 ff ff       	call   c000a3c2 <__cxa_atexit>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	68 98 37 02 c0       	push   0xc0023798
c0013e62:	e8 81 87 00 00       	call   c001c5e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	83 ec 04             	sub    esp,0x4
c0013e6d:	68 70 f1 01 c0       	push   0xc001f170
c0013e72:	68 98 37 02 c0       	push   0xc0023798
c0013e77:	68 98 c5 01 c0       	push   0xc001c598
c0013e7c:	e8 41 65 ff ff       	call   c000a3c2 <__cxa_atexit>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 8c 37 02 c0       	push   0xc002378c
c0013e8c:	e8 57 87 00 00       	call   c001c5e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	83 ec 04             	sub    esp,0x4
c0013e97:	68 70 f1 01 c0       	push   0xc001f170
c0013e9c:	68 8c 37 02 c0       	push   0xc002378c
c0013ea1:	68 98 c5 01 c0       	push   0xc001c598
c0013ea6:	e8 17 65 ff ff       	call   c000a3c2 <__cxa_atexit>
c0013eab:	83 c4 10             	add    esp,0x10
c0013eae:	66 90                	xchg   ax,ax
c0013eb0:	90                   	nop
c0013eb1:	83 c4 0c             	add    esp,0xc
c0013eb4:	c3                   	ret    
c0013eb5:	8d 76 00             	lea    esi,[esi+0x0]

c0013eb8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013eb8:	83 ec 0c             	sub    esp,0xc
c0013ebb:	83 ec 08             	sub    esp,0x8
c0013ebe:	68 ff ff 00 00       	push   0xffff
c0013ec3:	6a 01                	push   0x1
c0013ec5:	e8 4a ff ff ff       	call   c0013e14 <__static_initialization_and_destruction_0(int, int)>
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	83 c4 0c             	add    esp,0xc
c0013ed0:	c3                   	ret    

c0013ed1 <Vm::inbv(unsigned short)>:
c0013ed1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013ed5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013eda:	75 06                	jne    c0013ee2 <Vm::inbv(unsigned short)+0x11>
c0013edc:	a0 ec 37 02 c0       	mov    al,ds:0xc00237ec
c0013ee1:	c3                   	ret    
c0013ee2:	ec                   	in     al,dx
c0013ee3:	c3                   	ret    

c0013ee4 <Vm::outbv(unsigned short, unsigned char)>:
c0013ee4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013eec:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013ef1:	75 25                	jne    c0013f18 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013ef3:	8b 0d ec 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ec
c0013ef9:	8d 51 01             	lea    edx,[ecx+0x1]
c0013efc:	88 81 00 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc800],al
c0013f02:	89 15 ec 37 02 c0    	mov    DWORD PTR ds:0xc00237ec,edx
c0013f08:	83 fa 20             	cmp    edx,0x20
c0013f0b:	75 0c                	jne    c0013f19 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013f0d:	c7 05 ec 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x1f
c0013f17:	c3                   	ret    
c0013f18:	ee                   	out    dx,al
c0013f19:	c3                   	ret    

c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>:
c0013f1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013f1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013f24:	c1 e0 04             	shl    eax,0x4
c0013f27:	01 d0                	add    eax,edx
c0013f29:	c3                   	ret    

c0013f2a <Vm::getSegment(unsigned int)>:
c0013f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f2e:	c1 e8 10             	shr    eax,0x10
c0013f31:	c3                   	ret    

c0013f32 <Vm::getOffset(unsigned int)>:
c0013f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f36:	c3                   	ret    

c0013f37 <Vm::mainloop2()>:
c0013f37:	83 ec 18             	sub    esp,0x18
c0013f3a:	fa                   	cli    
c0013f3b:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013f41:	6a 02                	push   0x2
c0013f43:	c6 05 e5 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e5,0x1
c0013f4a:	e8 19 f6 ff ff       	call   c0013568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f54:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013f58:	52                   	push   edx
c0013f59:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013f5d:	52                   	push   edx
c0013f5e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013f62:	52                   	push   edx
c0013f63:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013f67:	50                   	push   eax
c0013f68:	e8 a2 c2 fe ff       	call   c000020f <goToVM86>
c0013f6d:	83 c4 2c             	add    esp,0x2c
c0013f70:	c3                   	ret    

c0013f71 <Vm::mainVm8086Loop(void*)>:
c0013f71:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013f76:	48                   	dec    eax
c0013f77:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013f7c:	75 01                	jne    c0013f7f <Vm::mainVm8086Loop(void*)+0xe>
c0013f7e:	fb                   	sti    
c0013f7f:	eb b6                	jmp    c0013f37 <Vm::mainloop2()>

c0013f81 <Vm::mainloop3(unsigned long)>:
c0013f81:	83 ec 18             	sub    esp,0x18
c0013f84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f88:	fa                   	cli    
c0013f89:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013f8f:	6a 02                	push   0x2
c0013f91:	c6 05 e4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e4,0x1
c0013f98:	a3 e0 37 02 c0       	mov    ds:0xc00237e0,eax
c0013f9d:	e8 c6 f5 ff ff       	call   c0013568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013fa2:	83 c4 1c             	add    esp,0x1c
c0013fa5:	eb 90                	jmp    c0013f37 <Vm::mainloop2()>

c0013fa7 <Vm::initialise8086()>:
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	68 80 00 00 00       	push   0x80
c0013faf:	6a 00                	push   0x0
c0013fb1:	68 71 3f 01 c0       	push   0xc0013f71
c0013fb6:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0013fbc:	e8 b3 f1 ff ff       	call   c0013174 <Process::createThread(void (*)(void*), void*, int)>
c0013fc1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013fc8:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c0013fcd:	68 00 01 00 00       	push   0x100
c0013fd2:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0013fd7:	6a 00                	push   0x0
c0013fd9:	6a 00                	push   0x0
c0013fdb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013fe1:	e8 5e 5c ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013fe6:	83 c4 2c             	add    esp,0x2c
c0013fe9:	c3                   	ret    

c0013fea <Vm::finish8086()>:
c0013fea:	53                   	push   ebx
c0013feb:	83 ec 08             	sub    esp,0x8
c0013fee:	fa                   	cli    
c0013fef:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013ff5:	80 3d e4 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e4,0x0
c0013ffc:	75 15                	jne    c0014013 <Vm::finish8086()+0x29>
c0013ffe:	e8 91 f3 ff ff       	call   c0013394 <schedule()>
c0014003:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014008:	48                   	dec    eax
c0014009:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001400e:	75 de                	jne    c0013fee <Vm::finish8086()+0x4>
c0014010:	fb                   	sti    
c0014011:	eb db                	jmp    c0013fee <Vm::finish8086()+0x4>
c0014013:	83 ec 0c             	sub    esp,0xc
c0014016:	8b 1d e0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237e0
c001401c:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c0014022:	c6 05 e4 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e4,0x0
c0014029:	e8 2a f8 ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c001402e:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	8d 50 ff             	lea    edx,[eax-0x1]
c0014039:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c001403f:	85 d2                	test   edx,edx
c0014041:	75 01                	jne    c0014044 <Vm::finish8086()+0x5a>
c0014043:	fb                   	sti    
c0014044:	89 d8                	mov    eax,ebx
c0014046:	83 c4 08             	add    esp,0x8
c0014049:	5b                   	pop    ebx
c001404a:	c3                   	ret    

c001404b <Vm::getOutput8086(unsigned char*)>:
c001404b:	57                   	push   edi
c001404c:	8b 0d ec 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ec
c0014052:	56                   	push   esi
c0014053:	be 00 38 02 c0       	mov    esi,0xc0023800
c0014058:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001405c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001405e:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0014063:	5e                   	pop    esi
c0014064:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c001406e:	5f                   	pop    edi
c001406f:	c3                   	ret    

c0014070 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014070:	55                   	push   ebp
c0014071:	57                   	push   edi
c0014072:	56                   	push   esi
c0014073:	53                   	push   ebx
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001407b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001407f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014083:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014087:	fa                   	cli    
c0014088:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001408e:	80 3d e5 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e5,0x0
c0014095:	75 15                	jne    c00140ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014097:	e8 f8 f2 ff ff       	call   c0013394 <schedule()>
c001409c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00140a1:	48                   	dec    eax
c00140a2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00140a7:	75 de                	jne    c0014087 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140a9:	fb                   	sti    
c00140aa:	eb db                	jmp    c0014087 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140ac:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c00140b1:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c00140bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00140bf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00140c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00140c7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00140cf:	0f b7 ff             	movzx  edi,di
c00140d2:	0f b7 f6             	movzx  esi,si
c00140d5:	50                   	push   eax
c00140d6:	6a 20                	push   0x20
c00140d8:	6a 00                	push   0x0
c00140da:	68 00 38 02 c0       	push   0xc0023800
c00140df:	e8 ec c3 fe ff       	call   c00004d0 <memset>
c00140e4:	5a                   	pop    edx
c00140e5:	59                   	pop    ecx
c00140e6:	57                   	push   edi
c00140e7:	56                   	push   esi
c00140e8:	e8 2d fe ff ff       	call   c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	89 c7                	mov    edi,eax
c00140f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00140fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140fc:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014101:	c6 05 e5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e5,0x0
c0014108:	48                   	dec    eax
c0014109:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001410e:	75 01                	jne    c0014111 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014110:	fb                   	sti    
c0014111:	83 ec 0c             	sub    esp,0xc
c0014114:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c001411a:	e8 39 f7 ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c001411f:	83 c4 1c             	add    esp,0x1c
c0014122:	b0 01                	mov    al,0x1
c0014124:	5b                   	pop    ebx
c0014125:	5e                   	pop    esi
c0014126:	5f                   	pop    edi
c0014127:	5d                   	pop    ebp
c0014128:	c3                   	ret    

c0014129 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014129:	55                   	push   ebp
c001412a:	57                   	push   edi
c001412b:	56                   	push   esi
c001412c:	53                   	push   ebx
c001412d:	83 ec 2c             	sub    esp,0x2c
c0014130:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014134:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014138:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001413c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014140:	fa                   	cli    
c0014141:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0014147:	0f b6 35 e5 37 02 c0 	movzx  esi,BYTE PTR ds:0xc00237e5
c001414e:	89 f0                	mov    eax,esi
c0014150:	84 c0                	test   al,al
c0014152:	75 1d                	jne    c0014171 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014154:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014158:	e8 37 f2 ff ff       	call   c0013394 <schedule()>
c001415d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014166:	48                   	dec    eax
c0014167:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001416c:	75 d2                	jne    c0014140 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001416e:	fb                   	sti    
c001416f:	eb cf                	jmp    c0014140 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014171:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0014176:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c0014180:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014184:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014188:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001418c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014190:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014194:	50                   	push   eax
c0014195:	6a 20                	push   0x20
c0014197:	6a 00                	push   0x0
c0014199:	68 00 38 02 c0       	push   0xc0023800
c001419e:	e8 2d c3 fe ff       	call   c00004d0 <memset>
c00141a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00141aa:	e8 0a 36 ff ff       	call   c00077b9 <malloc>
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	89 c3                	mov    ebx,eax
c00141b4:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c00141ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00141be:	50                   	push   eax
c00141bf:	e8 ba 68 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c00141c4:	83 c4 10             	add    esp,0x10
c00141c7:	85 db                	test   ebx,ebx
c00141c9:	75 0a                	jne    c00141d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00141cb:	83 ec 0c             	sub    esp,0xc
c00141ce:	68 e8 e6 01 c0       	push   0xc001e6e8
c00141d3:	eb 3e                	jmp    c0014213 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141d5:	50                   	push   eax
c00141d6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00141da:	50                   	push   eax
c00141db:	8d 44 24 20          	lea    eax,[esp+0x20]
c00141df:	50                   	push   eax
c00141e0:	53                   	push   ebx
c00141e1:	e8 04 6c ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00141ee:	74 0a                	je     c00141fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	68 fc e6 01 c0       	push   0xc001e6fc
c00141f8:	eb 19                	jmp    c0014213 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141fa:	51                   	push   ecx
c00141fb:	51                   	push   ecx
c00141fc:	6a 01                	push   0x1
c00141fe:	53                   	push   ebx
c00141ff:	e8 3a 69 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	85 c0                	test   eax,eax
c0014209:	74 24                	je     c001422f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 15 e7 01 c0       	push   0xc001e715
c0014213:	e8 6b bf ff ff       	call   c0010183 <KePanic(char const*)>
c0014218:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001421d:	83 c4 10             	add    esp,0x10
c0014220:	48                   	dec    eax
c0014221:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0014226:	85 c0                	test   eax,eax
c0014228:	75 01                	jne    c001422b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001422a:	fb                   	sti    
c001422b:	31 f6                	xor    esi,esi
c001422d:	eb 58                	jmp    c0014287 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001422f:	0f b7 ed             	movzx  ebp,bp
c0014232:	50                   	push   eax
c0014233:	0f b7 ff             	movzx  edi,di
c0014236:	50                   	push   eax
c0014237:	55                   	push   ebp
c0014238:	57                   	push   edi
c0014239:	e8 dc fc ff ff       	call   c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>
c001423e:	5a                   	pop    edx
c001423f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014241:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014245:	51                   	push   ecx
c0014246:	50                   	push   eax
c0014247:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001424b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001424f:	53                   	push   ebx
c0014250:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014253:	83 c4 14             	add    esp,0x14
c0014256:	53                   	push   ebx
c0014257:	e8 40 69 ff ff       	call   c000ab9c <File::close()>
c001425c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	48                   	dec    eax
c0014265:	c6 05 e5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e5,0x0
c001426c:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0014271:	85 c0                	test   eax,eax
c0014273:	75 01                	jne    c0014276 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014275:	fb                   	sti    
c0014276:	83 ec 0c             	sub    esp,0xc
c0014279:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c001427f:	e8 d4 f5 ff ff       	call   c0013858 <unblockTask(ThreadControlBlock*)>
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	83 c4 2c             	add    esp,0x2c
c001428a:	89 f0                	mov    eax,esi
c001428c:	5b                   	pop    ebx
c001428d:	5e                   	pop    esi
c001428e:	5f                   	pop    edi
c001428f:	5d                   	pop    ebp
c0014290:	c3                   	ret    

c0014291 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014291:	57                   	push   edi
c0014292:	56                   	push   esi
c0014293:	53                   	push   ebx
c0014294:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001429c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142a0:	83 e8 06             	sub    eax,0x6
c00142a3:	0f b7 c0             	movzx  eax,ax
c00142a6:	50                   	push   eax
c00142a7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00142ac:	50                   	push   eax
c00142ad:	e8 68 fc ff ff       	call   c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>
c00142b2:	5a                   	pop    edx
c00142b3:	5e                   	pop    esi
c00142b4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00142b7:	8d 56 fa             	lea    edx,[esi-0x6]
c00142ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00142c0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00142c3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00142c6:	83 c2 02             	add    edx,0x2
c00142c9:	66 89 10             	mov    WORD PTR [eax],dx
c00142cc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00142cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00142d3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00142d6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00142da:	89 d6                	mov    esi,edx
c00142dc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00142e2:	66 81 e6 ff fd       	and    si,0xfdff
c00142e7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00142eb:	74 07                	je     c00142f4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00142ed:	89 d6                	mov    esi,edx
c00142ef:	66 81 ce 00 02       	or     si,0x200
c00142f4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00142f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142fd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014301:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014309:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001430c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014314:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014317:	5b                   	pop    ebx
c0014318:	5e                   	pop    esi
c0014319:	5f                   	pop    edi
c001431a:	c3                   	ret    

c001431b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001431b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014320:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014325:	c1 e0 04             	shl    eax,0x4
c0014328:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001432b:	c3                   	ret    

c001432c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001432c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014331:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014336:	c1 e0 04             	shl    eax,0x4
c0014339:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001433d:	c3                   	ret    

c001433e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001433e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014343:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014348:	c1 e0 04             	shl    eax,0x4
c001434b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001434e:	c3                   	ret    

c001434f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001434f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014354:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014359:	c1 e0 04             	shl    eax,0x4
c001435c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014360:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014363:	c3                   	ret    

c0014364 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014364:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014369:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001436e:	c1 e0 04             	shl    eax,0x4
c0014371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014375:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014379:	c3                   	ret    

c001437a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001437a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001437f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014384:	c1 e0 04             	shl    eax,0x4
c0014387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001438b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001438e:	c3                   	ret    

c001438f <Vm::faultHandler(regs*)>:
c001438f:	55                   	push   ebp
c0014390:	57                   	push   edi
c0014391:	56                   	push   esi
c0014392:	53                   	push   ebx
c0014393:	83 ec 1c             	sub    esp,0x1c
c0014396:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001439a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001439d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00143a1:	0f b7 f8             	movzx  edi,ax
c00143a4:	52                   	push   edx
c00143a5:	0f b7 c0             	movzx  eax,ax
c00143a8:	50                   	push   eax
c00143a9:	e8 6c fb ff ff       	call   c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>
c00143ae:	5a                   	pop    edx
c00143af:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00143b2:	59                   	pop    ecx
c00143b3:	89 c1                	mov    ecx,eax
c00143b5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00143b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00143c5:	0f b7 c5             	movzx  eax,bp
c00143c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00143d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143d4:	e8 41 fb ff ff       	call   c0013f1a <Vm::realToLinear(unsigned short, unsigned short)>
c00143d9:	5e                   	pop    esi
c00143da:	be 06 00 00 00       	mov    esi,0x6
c00143df:	5a                   	pop    edx
c00143e0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00143e5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00143ea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00143ed:	80 fa 9d             	cmp    dl,0x9d
c00143f0:	0f 84 2c 02 00 00    	je     c0014622 <Vm::faultHandler(regs*)+0x293>
c00143f6:	0f 87 91 00 00 00    	ja     c001448d <Vm::faultHandler(regs*)+0xfe>
c00143fc:	80 fa 66             	cmp    dl,0x66
c00143ff:	0f 84 98 01 00 00    	je     c001459d <Vm::faultHandler(regs*)+0x20e>
c0014405:	77 47                	ja     c001444e <Vm::faultHandler(regs*)+0xbf>
c0014407:	80 fa 36             	cmp    dl,0x36
c001440a:	0f 84 80 01 00 00    	je     c0014590 <Vm::faultHandler(regs*)+0x201>
c0014410:	77 1a                	ja     c001442c <Vm::faultHandler(regs*)+0x9d>
c0014412:	80 fa 26             	cmp    dl,0x26
c0014415:	0f 84 4e 01 00 00    	je     c0014569 <Vm::faultHandler(regs*)+0x1da>
c001441b:	80 fa 2e             	cmp    dl,0x2e
c001441e:	0f 85 e2 05 00 00    	jne    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014424:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014427:	31 f6                	xor    esi,esi
c0014429:	41                   	inc    ecx
c001442a:	eb be                	jmp    c00143ea <Vm::faultHandler(regs*)+0x5b>
c001442c:	80 fa 64             	cmp    dl,0x64
c001442f:	0f 84 41 01 00 00    	je     c0014576 <Vm::faultHandler(regs*)+0x1e7>
c0014435:	0f 87 48 01 00 00    	ja     c0014583 <Vm::faultHandler(regs*)+0x1f4>
c001443b:	80 fa 3e             	cmp    dl,0x3e
c001443e:	0f 85 c2 05 00 00    	jne    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014444:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014447:	be 01 00 00 00       	mov    esi,0x1
c001444c:	eb db                	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c001444e:	80 fa 6d             	cmp    dl,0x6d
c0014451:	0f 84 ec 02 00 00    	je     c0014743 <Vm::faultHandler(regs*)+0x3b4>
c0014457:	77 17                	ja     c0014470 <Vm::faultHandler(regs*)+0xe1>
c0014459:	80 fa 67             	cmp    dl,0x67
c001445c:	0f 84 48 01 00 00    	je     c00145aa <Vm::faultHandler(regs*)+0x21b>
c0014462:	80 fa 6c             	cmp    dl,0x6c
c0014465:	0f 84 69 02 00 00    	je     c00146d4 <Vm::faultHandler(regs*)+0x345>
c001446b:	e9 96 05 00 00       	jmp    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014470:	80 fa 6f             	cmp    dl,0x6f
c0014473:	0f 84 f4 03 00 00    	je     c001486d <Vm::faultHandler(regs*)+0x4de>
c0014479:	0f 82 59 03 00 00    	jb     c00147d8 <Vm::faultHandler(regs*)+0x449>
c001447f:	80 fa 9c             	cmp    dl,0x9c
c0014482:	0f 84 2f 01 00 00    	je     c00145b7 <Vm::faultHandler(regs*)+0x228>
c0014488:	e9 79 05 00 00       	jmp    c0014a06 <Vm::faultHandler(regs*)+0x677>
c001448d:	80 fa ec             	cmp    dl,0xec
c0014490:	0f 84 14 05 00 00    	je     c00149aa <Vm::faultHandler(regs*)+0x61b>
c0014496:	77 7b                	ja     c0014513 <Vm::faultHandler(regs*)+0x184>
c0014498:	80 fa e4             	cmp    dl,0xe4
c001449b:	0f 84 93 04 00 00    	je     c0014934 <Vm::faultHandler(regs*)+0x5a5>
c00144a1:	77 53                	ja     c00144f6 <Vm::faultHandler(regs*)+0x167>
c00144a3:	80 fa cd             	cmp    dl,0xcd
c00144a6:	0f 84 d9 01 00 00    	je     c0014685 <Vm::faultHandler(regs*)+0x2f6>
c00144ac:	80 fa cf             	cmp    dl,0xcf
c00144af:	0f 85 51 05 00 00    	jne    c0014a06 <Vm::faultHandler(regs*)+0x677>
c00144b5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00144b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00144bb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00144bf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00144c2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00144c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00144cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00144cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144d9:	66 c1 e8 09          	shr    ax,0x9
c00144dd:	83 e0 01             	and    eax,0x1
c00144e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00144e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00144e6:	83 c0 06             	add    eax,0x6
c00144e9:	25 ff ff 00 00       	and    eax,0xffff
c00144ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00144f1:	e9 0c 05 00 00       	jmp    c0014a02 <Vm::faultHandler(regs*)+0x673>
c00144f6:	80 fa e6             	cmp    dl,0xe6
c00144f9:	0f 84 7f 04 00 00    	je     c001497e <Vm::faultHandler(regs*)+0x5ef>
c00144ff:	0f 82 4b 04 00 00    	jb     c0014950 <Vm::faultHandler(regs*)+0x5c1>
c0014505:	80 fa e7             	cmp    dl,0xe7
c0014508:	0f 84 87 04 00 00    	je     c0014995 <Vm::faultHandler(regs*)+0x606>
c001450e:	e9 f3 04 00 00       	jmp    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014513:	80 fa ef             	cmp    dl,0xef
c0014516:	0f 84 d1 04 00 00    	je     c00149ed <Vm::faultHandler(regs*)+0x65e>
c001451c:	77 28                	ja     c0014546 <Vm::faultHandler(regs*)+0x1b7>
c001451e:	80 fa ed             	cmp    dl,0xed
c0014521:	0f 84 9f 04 00 00    	je     c00149c6 <Vm::faultHandler(regs*)+0x637>
c0014527:	80 fa ee             	cmp    dl,0xee
c001452a:	0f 85 d6 04 00 00    	jne    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014530:	50                   	push   eax
c0014531:	50                   	push   eax
c0014532:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014536:	50                   	push   eax
c0014537:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001453b:	50                   	push   eax
c001453c:	e8 a3 f9 ff ff       	call   c0013ee4 <Vm::outbv(unsigned short, unsigned char)>
c0014541:	e9 9f 04 00 00       	jmp    c00149e5 <Vm::faultHandler(regs*)+0x656>
c0014546:	80 fa fa             	cmp    dl,0xfa
c0014549:	0f 84 69 01 00 00    	je     c00146b8 <Vm::faultHandler(regs*)+0x329>
c001454f:	80 fa fb             	cmp    dl,0xfb
c0014552:	0f 84 6e 01 00 00    	je     c00146c6 <Vm::faultHandler(regs*)+0x337>
c0014558:	80 fa f3             	cmp    dl,0xf3
c001455b:	0f 85 a5 04 00 00    	jne    c0014a06 <Vm::faultHandler(regs*)+0x677>
c0014561:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014564:	e9 c0 fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c0014569:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001456c:	be 02 00 00 00       	mov    esi,0x2
c0014571:	e9 b3 fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c0014576:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014579:	be 03 00 00 00       	mov    esi,0x3
c001457e:	e9 a6 fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c0014583:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014586:	be 04 00 00 00       	mov    esi,0x4
c001458b:	e9 99 fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c0014590:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014593:	be 05 00 00 00       	mov    esi,0x5
c0014598:	e9 8c fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c001459d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145a0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00145a5:	e9 7f fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c00145aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145ad:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00145b2:	e9 72 fe ff ff       	jmp    c0014429 <Vm::faultHandler(regs*)+0x9a>
c00145b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00145ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145c3:	74 30                	je     c00145f5 <Vm::faultHandler(regs*)+0x266>
c00145c5:	83 e9 04             	sub    ecx,0x4
c00145c8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145ce:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145d4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145e0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145e4:	0f 84 15 04 00 00    	je     c00149ff <Vm::faultHandler(regs*)+0x670>
c00145ea:	80 ce 02             	or     dh,0x2
c00145ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145f0:	e9 0a 04 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00145f5:	83 e9 02             	sub    ecx,0x2
c00145f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014601:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014605:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001460b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001460f:	74 05                	je     c0014616 <Vm::faultHandler(regs*)+0x287>
c0014611:	80 ce 02             	or     dh,0x2
c0014614:	eb 03                	jmp    c0014619 <Vm::faultHandler(regs*)+0x28a>
c0014616:	80 e6 fd             	and    dh,0xfd
c0014619:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001461d:	e9 dd 03 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c0014622:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014627:	74 2a                	je     c0014653 <Vm::faultHandler(regs*)+0x2c4>
c0014629:	8b 10                	mov    edx,DWORD PTR [eax]
c001462b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014631:	81 ca 00 02 02 00    	or     edx,0x20200
c0014637:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001463a:	8b 00                	mov    eax,DWORD PTR [eax]
c001463c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014642:	c1 e8 09             	shr    eax,0x9
c0014645:	83 e0 01             	and    eax,0x1
c0014648:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001464b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001464e:	83 c0 04             	add    eax,0x4
c0014651:	eb 25                	jmp    c0014678 <Vm::faultHandler(regs*)+0x2e9>
c0014653:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014656:	81 ca 00 02 02 00    	or     edx,0x20200
c001465c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001465f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014662:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014668:	66 c1 e8 09          	shr    ax,0x9
c001466c:	83 e0 01             	and    eax,0x1
c001466f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014672:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014675:	83 c0 02             	add    eax,0x2
c0014678:	25 ff ff 00 00       	and    eax,0xffff
c001467d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014680:	e9 7a 03 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c0014685:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014689:	3c ee                	cmp    al,0xee
c001468b:	75 10                	jne    c001469d <Vm::faultHandler(regs*)+0x30e>
c001468d:	83 ec 0c             	sub    esp,0xc
c0014690:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014693:	e8 e9 f8 ff ff       	call   c0013f81 <Vm::mainloop3(unsigned long)>
c0014698:	e9 4b 03 00 00       	jmp    c00149e8 <Vm::faultHandler(regs*)+0x659>
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00146a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a8:	51                   	push   ecx
c00146a9:	50                   	push   eax
c00146aa:	53                   	push   ebx
c00146ab:	e8 e1 fb ff ff       	call   c0014291 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00146b0:	83 c4 20             	add    esp,0x20
c00146b3:	e9 4a 03 00 00       	jmp    c0014a02 <Vm::faultHandler(regs*)+0x673>
c00146b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146bd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00146c1:	e9 39 03 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00146c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146cb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00146cf:	e9 2b 03 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00146d4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146d7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00146dc:	74 2b                	je     c0014709 <Vm::faultHandler(regs*)+0x37a>
c00146de:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00146e5:	76 22                	jbe    c0014709 <Vm::faultHandler(regs*)+0x37a>
c00146e7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146eb:	50                   	push   eax
c00146ec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146f0:	50                   	push   eax
c00146f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146f5:	50                   	push   eax
c00146f6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146fa:	50                   	push   eax
c00146fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146ff:	50                   	push   eax
c0014700:	6a 6c                	push   0x6c
c0014702:	6a 6c                	push   0x6c
c0014704:	e9 b9 01 00 00       	jmp    c00148c2 <Vm::faultHandler(regs*)+0x533>
c0014709:	83 ec 0c             	sub    esp,0xc
c001470c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014710:	0f b7 f6             	movzx  esi,si
c0014713:	50                   	push   eax
c0014714:	e8 b8 f7 ff ff       	call   c0013ed1 <Vm::inbv(unsigned short)>
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	0f b6 c0             	movzx  eax,al
c001471f:	50                   	push   eax
c0014720:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014724:	50                   	push   eax
c0014725:	56                   	push   esi
c0014726:	e8 24 fc ff ff       	call   c001434f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001472b:	83 c4 10             	add    esp,0x10
c001472e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014731:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014735:	74 03                	je     c001473a <Vm::faultHandler(regs*)+0x3ab>
c0014737:	48                   	dec    eax
c0014738:	eb 01                	jmp    c001473b <Vm::faultHandler(regs*)+0x3ac>
c001473a:	40                   	inc    eax
c001473b:	0f b7 c0             	movzx  eax,ax
c001473e:	e9 8d 00 00 00       	jmp    c00147d0 <Vm::faultHandler(regs*)+0x441>
c0014743:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014746:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014749:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001474e:	74 29                	je     c0014779 <Vm::faultHandler(regs*)+0x3ea>
c0014750:	3d ff ff 00 00       	cmp    eax,0xffff
c0014755:	76 22                	jbe    c0014779 <Vm::faultHandler(regs*)+0x3ea>
c0014757:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001475b:	50                   	push   eax
c001475c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014760:	50                   	push   eax
c0014761:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014765:	50                   	push   eax
c0014766:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001476a:	50                   	push   eax
c001476b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001476f:	50                   	push   eax
c0014770:	6a 6d                	push   0x6d
c0014772:	6a 6d                	push   0x6d
c0014774:	e9 49 01 00 00       	jmp    c00148c2 <Vm::faultHandler(regs*)+0x533>
c0014779:	0f b7 c8             	movzx  ecx,ax
c001477c:	0f b7 f6             	movzx  esi,si
c001477f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014782:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014787:	74 20                	je     c00147a9 <Vm::faultHandler(regs*)+0x41a>
c0014789:	ed                   	in     eax,dx
c001478a:	55                   	push   ebp
c001478b:	50                   	push   eax
c001478c:	51                   	push   ecx
c001478d:	56                   	push   esi
c001478e:	e8 e7 fb ff ff       	call   c001437a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014793:	83 c4 10             	add    esp,0x10
c0014796:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014799:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001479d:	74 05                	je     c00147a4 <Vm::faultHandler(regs*)+0x415>
c001479f:	83 e8 04             	sub    eax,0x4
c00147a2:	eb 27                	jmp    c00147cb <Vm::faultHandler(regs*)+0x43c>
c00147a4:	83 c0 04             	add    eax,0x4
c00147a7:	eb 22                	jmp    c00147cb <Vm::faultHandler(regs*)+0x43c>
c00147a9:	66 ed                	in     ax,dx
c00147ab:	0f b7 c0             	movzx  eax,ax
c00147ae:	57                   	push   edi
c00147af:	50                   	push   eax
c00147b0:	51                   	push   ecx
c00147b1:	56                   	push   esi
c00147b2:	e8 ad fb ff ff       	call   c0014364 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00147bd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147c1:	74 05                	je     c00147c8 <Vm::faultHandler(regs*)+0x439>
c00147c3:	83 e8 02             	sub    eax,0x2
c00147c6:	eb 03                	jmp    c00147cb <Vm::faultHandler(regs*)+0x43c>
c00147c8:	83 c0 02             	add    eax,0x2
c00147cb:	25 ff ff 00 00       	and    eax,0xffff
c00147d0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00147d3:	e9 27 02 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00147d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00147db:	3c 05                	cmp    al,0x5
c00147dd:	77 24                	ja     c0014803 <Vm::faultHandler(regs*)+0x474>
c00147df:	0f b6 c0             	movzx  eax,al
c00147e2:	ff 24 85 88 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1878]
c00147e9:	0f b7 fd             	movzx  edi,bp
c00147ec:	eb 15                	jmp    c0014803 <Vm::faultHandler(regs*)+0x474>
c00147ee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00147f2:	eb 0f                	jmp    c0014803 <Vm::faultHandler(regs*)+0x474>
c00147f4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00147f8:	eb 09                	jmp    c0014803 <Vm::faultHandler(regs*)+0x474>
c00147fa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00147fe:	eb 03                	jmp    c0014803 <Vm::faultHandler(regs*)+0x474>
c0014800:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014803:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014806:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001480b:	74 29                	je     c0014836 <Vm::faultHandler(regs*)+0x4a7>
c001480d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014812:	76 22                	jbe    c0014836 <Vm::faultHandler(regs*)+0x4a7>
c0014814:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014818:	50                   	push   eax
c0014819:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001481d:	50                   	push   eax
c001481e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014822:	50                   	push   eax
c0014823:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014827:	50                   	push   eax
c0014828:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001482c:	50                   	push   eax
c001482d:	6a 6e                	push   0x6e
c001482f:	6a 6e                	push   0x6e
c0014831:	e9 8c 00 00 00       	jmp    c00148c2 <Vm::faultHandler(regs*)+0x533>
c0014836:	0f b7 c0             	movzx  eax,ax
c0014839:	52                   	push   edx
c001483a:	52                   	push   edx
c001483b:	50                   	push   eax
c001483c:	57                   	push   edi
c001483d:	e8 d9 fa ff ff       	call   c001431b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014842:	59                   	pop    ecx
c0014843:	0f b6 c0             	movzx  eax,al
c0014846:	5e                   	pop    esi
c0014847:	50                   	push   eax
c0014848:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001484c:	50                   	push   eax
c001484d:	e8 92 f6 ff ff       	call   c0013ee4 <Vm::outbv(unsigned short, unsigned char)>
c0014852:	83 c4 10             	add    esp,0x10
c0014855:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014858:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001485c:	74 03                	je     c0014861 <Vm::faultHandler(regs*)+0x4d2>
c001485e:	48                   	dec    eax
c001485f:	eb 01                	jmp    c0014862 <Vm::faultHandler(regs*)+0x4d3>
c0014861:	40                   	inc    eax
c0014862:	0f b7 c0             	movzx  eax,ax
c0014865:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014868:	e9 92 01 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c001486d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014870:	3c 05                	cmp    al,0x5
c0014872:	77 1f                	ja     c0014893 <Vm::faultHandler(regs*)+0x504>
c0014874:	0f b6 c0             	movzx  eax,al
c0014877:	ff 24 85 a0 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1860]
c001487e:	89 ef                	mov    edi,ebp
c0014880:	eb 11                	jmp    c0014893 <Vm::faultHandler(regs*)+0x504>
c0014882:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014885:	eb 0c                	jmp    c0014893 <Vm::faultHandler(regs*)+0x504>
c0014887:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001488a:	eb 07                	jmp    c0014893 <Vm::faultHandler(regs*)+0x504>
c001488c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001488f:	eb 02                	jmp    c0014893 <Vm::faultHandler(regs*)+0x504>
c0014891:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014893:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014896:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001489b:	74 37                	je     c00148d4 <Vm::faultHandler(regs*)+0x545>
c001489d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00148a3:	76 2f                	jbe    c00148d4 <Vm::faultHandler(regs*)+0x545>
c00148a5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00148a9:	50                   	push   eax
c00148aa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00148ae:	50                   	push   eax
c00148af:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00148b3:	50                   	push   eax
c00148b4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00148b8:	50                   	push   eax
c00148b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148bd:	50                   	push   eax
c00148be:	6a 6f                	push   0x6f
c00148c0:	6a 6f                	push   0x6f
c00148c2:	68 2e e7 01 c0       	push   0xc001e72e
c00148c7:	e8 3c 5c ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00148cc:	83 c4 20             	add    esp,0x20
c00148cf:	e9 86 01 00 00       	jmp    c0014a5a <Vm::faultHandler(regs*)+0x6cb>
c00148d4:	0f b7 d7             	movzx  edx,di
c00148d7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00148da:	0f b7 c6             	movzx  eax,si
c00148dd:	81 e1 00 04 00 00    	and    ecx,0x400
c00148e3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00148e6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148eb:	74 1d                	je     c001490a <Vm::faultHandler(regs*)+0x57b>
c00148ed:	55                   	push   ebp
c00148ee:	55                   	push   ebp
c00148ef:	50                   	push   eax
c00148f0:	52                   	push   edx
c00148f1:	e8 48 fa ff ff       	call   c001433e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00148f6:	83 c4 10             	add    esp,0x10
c00148f9:	89 fa                	mov    edx,edi
c00148fb:	ef                   	out    dx,eax
c00148fc:	85 c9                	test   ecx,ecx
c00148fe:	74 05                	je     c0014905 <Vm::faultHandler(regs*)+0x576>
c0014900:	83 ee 04             	sub    esi,0x4
c0014903:	eb 21                	jmp    c0014926 <Vm::faultHandler(regs*)+0x597>
c0014905:	83 c6 04             	add    esi,0x4
c0014908:	eb 1c                	jmp    c0014926 <Vm::faultHandler(regs*)+0x597>
c001490a:	55                   	push   ebp
c001490b:	55                   	push   ebp
c001490c:	50                   	push   eax
c001490d:	52                   	push   edx
c001490e:	e8 19 fa ff ff       	call   c001432c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	89 fa                	mov    edx,edi
c0014918:	66 ef                	out    dx,ax
c001491a:	85 c9                	test   ecx,ecx
c001491c:	74 05                	je     c0014923 <Vm::faultHandler(regs*)+0x594>
c001491e:	83 ee 02             	sub    esi,0x2
c0014921:	eb 03                	jmp    c0014926 <Vm::faultHandler(regs*)+0x597>
c0014923:	83 c6 02             	add    esi,0x2
c0014926:	81 e6 ff ff 00 00    	and    esi,0xffff
c001492c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001492f:	e9 cb 00 00 00       	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c0014934:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001493b:	83 ec 0c             	sub    esp,0xc
c001493e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014942:	50                   	push   eax
c0014943:	e8 89 f5 ff ff       	call   c0013ed1 <Vm::inbv(unsigned short)>
c0014948:	0f b6 c0             	movzx  eax,al
c001494b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001494e:	eb 3f                	jmp    c001498f <Vm::faultHandler(regs*)+0x600>
c0014950:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014955:	74 07                	je     c001495e <Vm::faultHandler(regs*)+0x5cf>
c0014957:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001495b:	ed                   	in     eax,dx
c001495c:	eb 14                	jmp    c0014972 <Vm::faultHandler(regs*)+0x5e3>
c001495e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014961:	66 31 f6             	xor    si,si
c0014964:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014967:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001496b:	66 ed                	in     ax,dx
c001496d:	0f b7 c0             	movzx  eax,ax
c0014970:	09 f0                	or     eax,esi
c0014972:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014975:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014979:	e9 84 00 00 00       	jmp    c0014a02 <Vm::faultHandler(regs*)+0x673>
c001497e:	52                   	push   edx
c001497f:	52                   	push   edx
c0014980:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014984:	50                   	push   eax
c0014985:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014989:	50                   	push   eax
c001498a:	e8 55 f5 ff ff       	call   c0013ee4 <Vm::outbv(unsigned short, unsigned char)>
c001498f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014993:	eb 53                	jmp    c00149e8 <Vm::faultHandler(regs*)+0x659>
c0014995:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014998:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001499c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149a1:	74 03                	je     c00149a6 <Vm::faultHandler(regs*)+0x617>
c00149a3:	ef                   	out    dx,eax
c00149a4:	eb cf                	jmp    c0014975 <Vm::faultHandler(regs*)+0x5e6>
c00149a6:	66 ef                	out    dx,ax
c00149a8:	eb cb                	jmp    c0014975 <Vm::faultHandler(regs*)+0x5e6>
c00149aa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149b8:	50                   	push   eax
c00149b9:	e8 13 f5 ff ff       	call   c0013ed1 <Vm::inbv(unsigned short)>
c00149be:	0f b6 c0             	movzx  eax,al
c00149c1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00149c4:	eb 1f                	jmp    c00149e5 <Vm::faultHandler(regs*)+0x656>
c00149c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149c9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149ce:	74 03                	je     c00149d3 <Vm::faultHandler(regs*)+0x644>
c00149d0:	ed                   	in     eax,dx
c00149d1:	eb 0d                	jmp    c00149e0 <Vm::faultHandler(regs*)+0x651>
c00149d3:	66 ed                	in     ax,dx
c00149d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00149d8:	0f b7 c0             	movzx  eax,ax
c00149db:	66 31 d2             	xor    dx,dx
c00149de:	09 d0                	or     eax,edx
c00149e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00149e3:	eb 1a                	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00149e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149e8:	83 c4 10             	add    esp,0x10
c00149eb:	eb 15                	jmp    c0014a02 <Vm::faultHandler(regs*)+0x673>
c00149ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00149f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149f3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149f8:	74 03                	je     c00149fd <Vm::faultHandler(regs*)+0x66e>
c00149fa:	ef                   	out    dx,eax
c00149fb:	eb 02                	jmp    c00149ff <Vm::faultHandler(regs*)+0x670>
c00149fd:	66 ef                	out    dx,ax
c00149ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a02:	b0 01                	mov    al,0x1
c0014a04:	eb 56                	jmp    c0014a5c <Vm::faultHandler(regs*)+0x6cd>
c0014a06:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014a0a:	50                   	push   eax
c0014a0b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014a0f:	50                   	push   eax
c0014a10:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a14:	50                   	push   eax
c0014a15:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a19:	50                   	push   eax
c0014a1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a1e:	50                   	push   eax
c0014a1f:	52                   	push   edx
c0014a20:	52                   	push   edx
c0014a21:	68 5b e7 01 c0       	push   0xc001e75b
c0014a26:	e8 dd 5a ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014a2b:	83 c4 20             	add    esp,0x20
c0014a2e:	83 ec 0c             	sub    esp,0xc
c0014a31:	6a 60                	push   0x60
c0014a33:	e8 99 f4 ff ff       	call   c0013ed1 <Vm::inbv(unsigned short)>
c0014a38:	83 c4 10             	add    esp,0x10
c0014a3b:	3c 1c                	cmp    al,0x1c
c0014a3d:	74 04                	je     c0014a43 <Vm::faultHandler(regs*)+0x6b4>
c0014a3f:	3c 5a                	cmp    al,0x5a
c0014a41:	75 eb                	jne    c0014a2e <Vm::faultHandler(regs*)+0x69f>
c0014a43:	3c 5a                	cmp    al,0x5a
c0014a45:	74 04                	je     c0014a4b <Vm::faultHandler(regs*)+0x6bc>
c0014a47:	3c 1c                	cmp    al,0x1c
c0014a49:	75 0f                	jne    c0014a5a <Vm::faultHandler(regs*)+0x6cb>
c0014a4b:	83 ec 0c             	sub    esp,0xc
c0014a4e:	6a 60                	push   0x60
c0014a50:	e8 7c f4 ff ff       	call   c0013ed1 <Vm::inbv(unsigned short)>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	eb e9                	jmp    c0014a43 <Vm::faultHandler(regs*)+0x6b4>
c0014a5a:	31 c0                	xor    eax,eax
c0014a5c:	83 c4 1c             	add    esp,0x1c
c0014a5f:	5b                   	pop    ebx
c0014a60:	5e                   	pop    esi
c0014a61:	5f                   	pop    edi
c0014a62:	5d                   	pop    ebp
c0014a63:	c3                   	ret    

c0014a64 <noCopro(unsigned long)>:
c0014a64:	c3                   	ret    

c0014a65 <nmiHandler(regs*, void*)>:
c0014a65:	83 ec 0c             	sub    esp,0xc
c0014a68:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014a6d:	83 ec 0c             	sub    esp,0xc
c0014a70:	50                   	push   eax
c0014a71:	e8 64 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014a76:	83 c4 10             	add    esp,0x10
c0014a79:	90                   	nop
c0014a7a:	83 c4 0c             	add    esp,0xc
c0014a7d:	c3                   	ret    

c0014a7e <doubleFault(regs*, void*)>:
c0014a7e:	55                   	push   ebp
c0014a7f:	89 e5                	mov    ebp,esp
c0014a81:	83 ec 08             	sub    esp,0x8
c0014a84:	83 ec 0c             	sub    esp,0xc
c0014a87:	68 b8 e7 01 c0       	push   0xc001e7b8
c0014a8c:	e8 f2 b6 ff ff       	call   c0010183 <KePanic(char const*)>
c0014a91:	83 c4 10             	add    esp,0x10
c0014a94:	90                   	nop
c0014a95:	c9                   	leave  
c0014a96:	c3                   	ret    

c0014a97 <displayDebugInfo(regs*)>:
c0014a97:	83 ec 1c             	sub    esp,0x1c
c0014a9a:	0f 20 c0             	mov    eax,cr0
c0014a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014aa1:	0f 20 d0             	mov    eax,cr2
c0014aa4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014aa8:	0f 20 d8             	mov    eax,cr3
c0014aab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014aaf:	0f 20 e0             	mov    eax,cr4
c0014ab2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014abc:	83 ec 08             	sub    esp,0x8
c0014abf:	50                   	push   eax
c0014ac0:	68 d4 e7 01 c0       	push   0xc001e7d4
c0014ac5:	e8 3e 5a ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ad4:	83 ec 08             	sub    esp,0x8
c0014ad7:	50                   	push   eax
c0014ad8:	68 c5 e7 01 c0       	push   0xc001e7c5
c0014add:	e8 26 5a ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014aec:	83 ec 08             	sub    esp,0x8
c0014aef:	50                   	push   eax
c0014af0:	68 d0 e7 01 c0       	push   0xc001e7d0
c0014af5:	e8 0e 5a ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b04:	83 ec 08             	sub    esp,0x8
c0014b07:	50                   	push   eax
c0014b08:	68 df e7 01 c0       	push   0xc001e7df
c0014b0d:	e8 f6 59 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b19:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014b1c:	83 ec 08             	sub    esp,0x8
c0014b1f:	50                   	push   eax
c0014b20:	68 ea e7 01 c0       	push   0xc001e7ea
c0014b25:	e8 de 59 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	83 ec 08             	sub    esp,0x8
c0014b30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b34:	68 f5 e7 01 c0       	push   0xc001e7f5
c0014b39:	e8 ca 59 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	83 ec 08             	sub    esp,0x8
c0014b44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014b48:	68 00 e8 01 c0       	push   0xc001e800
c0014b4d:	e8 b6 59 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b60:	83 ec 0c             	sub    esp,0xc
c0014b63:	50                   	push   eax
c0014b64:	e8 8e 38 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b77:	83 ec 08             	sub    esp,0x8
c0014b7a:	68 0b e8 01 c0       	push   0xc001e80b
c0014b7f:	50                   	push   eax
c0014b80:	e8 b1 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b93:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b98:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b9d:	83 c2 0c             	add    edx,0xc
c0014ba0:	83 ec 08             	sub    esp,0x8
c0014ba3:	52                   	push   edx
c0014ba4:	50                   	push   eax
c0014ba5:	e8 8c 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014baa:	83 c4 10             	add    esp,0x10
c0014bad:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bb8:	83 ec 08             	sub    esp,0x8
c0014bbb:	68 14 e8 01 c0       	push   0xc001e814
c0014bc0:	50                   	push   eax
c0014bc1:	e8 70 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bd8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014bdb:	83 ec 08             	sub    esp,0x8
c0014bde:	52                   	push   edx
c0014bdf:	50                   	push   eax
c0014be0:	e8 0b 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014be5:	83 c4 10             	add    esp,0x10
c0014be8:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bf3:	83 ec 08             	sub    esp,0x8
c0014bf6:	68 1c e8 01 c0       	push   0xc001e81c
c0014bfb:	50                   	push   eax
c0014bfc:	e8 35 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c01:	83 c4 10             	add    esp,0x10
c0014c04:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c13:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014c16:	83 ec 08             	sub    esp,0x8
c0014c19:	52                   	push   edx
c0014c1a:	50                   	push   eax
c0014c1b:	e8 d0 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c2e:	83 ec 08             	sub    esp,0x8
c0014c31:	68 24 e8 01 c0       	push   0xc001e824
c0014c36:	50                   	push   eax
c0014c37:	e8 fa 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c4e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014c51:	83 ec 08             	sub    esp,0x8
c0014c54:	52                   	push   edx
c0014c55:	50                   	push   eax
c0014c56:	e8 95 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c5b:	83 c4 10             	add    esp,0x10
c0014c5e:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c69:	83 ec 08             	sub    esp,0x8
c0014c6c:	68 2c e8 01 c0       	push   0xc001e82c
c0014c71:	50                   	push   eax
c0014c72:	e8 bf 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c89:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014c8c:	83 ec 08             	sub    esp,0x8
c0014c8f:	52                   	push   edx
c0014c90:	50                   	push   eax
c0014c91:	e8 5a 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ca4:	83 ec 08             	sub    esp,0x8
c0014ca7:	68 34 e8 01 c0       	push   0xc001e834
c0014cac:	50                   	push   eax
c0014cad:	e8 84 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014cba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cc4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014cc7:	83 ec 08             	sub    esp,0x8
c0014cca:	52                   	push   edx
c0014ccb:	50                   	push   eax
c0014ccc:	e8 1f 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cd1:	83 c4 10             	add    esp,0x10
c0014cd4:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014cd9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cdf:	83 ec 08             	sub    esp,0x8
c0014ce2:	68 3c e8 01 c0       	push   0xc001e83c
c0014ce7:	50                   	push   eax
c0014ce8:	e8 49 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ced:	83 c4 10             	add    esp,0x10
c0014cf0:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014cf5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cfb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014d02:	83 ec 08             	sub    esp,0x8
c0014d05:	52                   	push   edx
c0014d06:	50                   	push   eax
c0014d07:	e8 e4 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d0c:	83 c4 10             	add    esp,0x10
c0014d0f:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d1a:	83 ec 08             	sub    esp,0x8
c0014d1d:	68 44 e8 01 c0       	push   0xc001e844
c0014d22:	50                   	push   eax
c0014d23:	e8 0e 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d36:	83 ec 08             	sub    esp,0x8
c0014d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d3d:	50                   	push   eax
c0014d3e:	e8 ad 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d51:	83 ec 08             	sub    esp,0x8
c0014d54:	68 4d e8 01 c0       	push   0xc001e84d
c0014d59:	50                   	push   eax
c0014d5a:	e8 d7 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d6d:	83 ec 08             	sub    esp,0x8
c0014d70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d74:	50                   	push   eax
c0014d75:	e8 76 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d88:	83 ec 08             	sub    esp,0x8
c0014d8b:	68 55 e8 01 c0       	push   0xc001e855
c0014d90:	50                   	push   eax
c0014d91:	e8 a0 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014da4:	83 ec 08             	sub    esp,0x8
c0014da7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014dab:	50                   	push   eax
c0014dac:	e8 3f 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	fa                   	cli    
c0014db5:	f4                   	hlt    
c0014db6:	eb fe                	jmp    c0014db6 <displayDebugInfo(regs*)+0x31f>

c0014db8 <HalSystemIdle()>:
c0014db8:	56                   	push   esi
c0014db9:	53                   	push   ebx
c0014dba:	83 ec 14             	sub    esp,0x14
c0014dbd:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014dc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014dc8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014dce:	83 e0 04             	and    eax,0x4
c0014dd1:	84 c0                	test   al,al
c0014dd3:	0f 95 c0             	setne  al
c0014dd6:	84 c0                	test   al,al
c0014dd8:	74 4c                	je     c0014e26 <HalSystemIdle()+0x6e>
c0014dda:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014ddf:	83 ec 08             	sub    esp,0x8
c0014de2:	68 e1 00 00 00       	push   0xe1
c0014de7:	50                   	push   eax
c0014de8:	e8 05 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014df4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014df8:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014dfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e01:	83 e2 02             	and    edx,0x2
c0014e04:	89 d3                	mov    ebx,edx
c0014e06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e0a:	83 e2 00             	and    edx,0x0
c0014e0d:	89 d6                	mov    esi,edx
c0014e0f:	56                   	push   esi
c0014e10:	53                   	push   ebx
c0014e11:	68 e1 00 00 00       	push   0xe1
c0014e16:	50                   	push   eax
c0014e17:	e8 02 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	e8 70 b3 fe ff       	call   c0000194 <doTPAUSE>
c0014e24:	eb 01                	jmp    c0014e27 <HalSystemIdle()+0x6f>
c0014e26:	f4                   	hlt    
c0014e27:	90                   	nop
c0014e28:	83 c4 14             	add    esp,0x14
c0014e2b:	5b                   	pop    ebx
c0014e2c:	5e                   	pop    esi
c0014e2d:	c3                   	ret    

c0014e2e <displayProgramFault(char const*)>:
c0014e2e:	83 ec 0c             	sub    esp,0xc
c0014e31:	83 ec 0c             	sub    esp,0xc
c0014e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e38:	e8 cb 56 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014e3d:	83 c4 10             	add    esp,0x10
c0014e40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e50:	85 c0                	test   eax,eax
c0014e52:	74 21                	je     c0014e75 <displayProgramFault(char const*)+0x47>
c0014e54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e64:	6a 04                	push   0x4
c0014e66:	6a 0f                	push   0xf
c0014e68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e6c:	50                   	push   eax
c0014e6d:	e8 36 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	90                   	nop
c0014e76:	83 c4 0c             	add    esp,0xc
c0014e79:	c3                   	ret    

c0014e7a <gpFault(regs*, void*)>:
c0014e7a:	83 ec 1c             	sub    esp,0x1c
c0014e7d:	c7 05 30 38 02 c0 8f 43 01 c0 	mov    DWORD PTR ds:0xc0023830,0xc001438f
c0014e87:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014e8c:	85 c0                	test   eax,eax
c0014e8e:	74 1c                	je     c0014eac <gpFault(regs*, void*)+0x32>
c0014e90:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9c:	ff d0                	call   eax
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ea5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014eaa:	75 2e                	jne    c0014eda <gpFault(regs*, void*)+0x60>
c0014eac:	83 ec 0c             	sub    esp,0xc
c0014eaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb3:	e8 df fb ff ff       	call   c0014a97 <displayDebugInfo(regs*)>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	68 5d e8 01 c0       	push   0xc001e85d
c0014ec3:	e8 66 ff ff ff       	call   c0014e2e <displayProgramFault(char const*)>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	83 ec 0c             	sub    esp,0xc
c0014ece:	6a 00                	push   0x0
c0014ed0:	e8 af ee ff ff       	call   c0013d84 <Thr::terminateFromIRQ(int)>
c0014ed5:	83 c4 10             	add    esp,0x10
c0014ed8:	eb 01                	jmp    c0014edb <gpFault(regs*, void*)+0x61>
c0014eda:	90                   	nop
c0014edb:	83 c4 1c             	add    esp,0x1c
c0014ede:	c3                   	ret    

c0014edf <pgFault(regs*, void*)>:
c0014edf:	83 ec 1c             	sub    esp,0x1c
c0014ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ee9:	0f 20 d0             	mov    eax,cr2
c0014eec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ef4:	83 ec 04             	sub    esp,0x4
c0014ef7:	52                   	push   edx
c0014ef8:	50                   	push   eax
c0014ef9:	68 3c e9 01 c0       	push   0xc001e93c
c0014efe:	e8 05 56 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014f03:	83 c4 10             	add    esp,0x10
c0014f06:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f10:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014f16:	0f 20 d2             	mov    edx,cr2
c0014f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f21:	83 ec 08             	sub    esp,0x8
c0014f24:	52                   	push   edx
c0014f25:	50                   	push   eax
c0014f26:	e8 0f 52 ff ff       	call   c000a13a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	84 c0                	test   al,al
c0014f30:	75 2e                	jne    c0014f60 <pgFault(regs*, void*)+0x81>
c0014f32:	83 ec 0c             	sub    esp,0xc
c0014f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f39:	e8 59 fb ff ff       	call   c0014a97 <displayDebugInfo(regs*)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	83 ec 0c             	sub    esp,0xc
c0014f44:	68 76 e8 01 c0       	push   0xc001e876
c0014f49:	e8 e0 fe ff ff       	call   c0014e2e <displayProgramFault(char const*)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	83 ec 0c             	sub    esp,0xc
c0014f54:	6a 00                	push   0x0
c0014f56:	e8 29 ee ff ff       	call   c0013d84 <Thr::terminateFromIRQ(int)>
c0014f5b:	83 c4 10             	add    esp,0x10
c0014f5e:	eb 01                	jmp    c0014f61 <pgFault(regs*, void*)+0x82>
c0014f60:	90                   	nop
c0014f61:	83 c4 1c             	add    esp,0x1c
c0014f64:	c3                   	ret    

c0014f65 <otherISRHandler(regs*, void*)>:
c0014f65:	83 ec 0c             	sub    esp,0xc
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f6f:	e8 23 fb ff ff       	call   c0014a97 <displayDebugInfo(regs*)>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	83 ec 0c             	sub    esp,0xc
c0014f7a:	68 64 e9 01 c0       	push   0xc001e964
c0014f7f:	e8 aa fe ff ff       	call   c0014e2e <displayProgramFault(char const*)>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	83 ec 0c             	sub    esp,0xc
c0014f8a:	6a 00                	push   0x0
c0014f8c:	e8 f3 ed ff ff       	call   c0013d84 <Thr::terminateFromIRQ(int)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	90                   	nop
c0014f95:	83 c4 0c             	add    esp,0xc
c0014f98:	c3                   	ret    

c0014f99 <opcodeFault(regs*, void*)>:
c0014f99:	55                   	push   ebp
c0014f9a:	89 e5                	mov    ebp,esp
c0014f9c:	83 ec 08             	sub    esp,0x8
c0014f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa5:	83 ec 08             	sub    esp,0x8
c0014fa8:	50                   	push   eax
c0014fa9:	68 81 e8 01 c0       	push   0xc001e881
c0014fae:	e8 55 55 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014fb3:	83 c4 10             	add    esp,0x10
c0014fb6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014fbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014fc1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014fc7:	84 c0                	test   al,al
c0014fc9:	74 21                	je     c0014fec <opcodeFault(regs*, void*)+0x53>
c0014fcb:	83 ec 0c             	sub    esp,0xc
c0014fce:	68 8c e9 01 c0       	push   0xc001e98c
c0014fd3:	e8 30 55 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c0014fd8:	83 c4 10             	add    esp,0x10
c0014fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe1:	8d 50 19             	lea    edx,[eax+0x19]
c0014fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fea:	eb 2b                	jmp    c0015017 <opcodeFault(regs*, void*)+0x7e>
c0014fec:	83 ec 0c             	sub    esp,0xc
c0014fef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ff2:	e8 a0 fa ff ff       	call   c0014a97 <displayDebugInfo(regs*)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	68 8f e8 01 c0       	push   0xc001e88f
c0015002:	e8 27 fe ff ff       	call   c0014e2e <displayProgramFault(char const*)>
c0015007:	83 c4 10             	add    esp,0x10
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	6a 00                	push   0x0
c001500f:	e8 70 ed ff ff       	call   c0013d84 <Thr::terminateFromIRQ(int)>
c0015014:	83 c4 10             	add    esp,0x10
c0015017:	c9                   	leave  
c0015018:	c3                   	ret    

c0015019 <i386SaveCoprocessor(void*)>:
c0015019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001501d:	83 c0 3f             	add    eax,0x3f
c0015020:	83 e0 c0             	and    eax,0xffffffc0
c0015023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015027:	ff 25 2c 38 02 c0    	jmp    DWORD PTR ds:0xc002382c

c001502d <i386LoadCoprocessor(void*)>:
c001502d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015031:	83 c0 3f             	add    eax,0x3f
c0015034:	83 e0 c0             	and    eax,0xffffffc0
c0015037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001503b:	ff 25 28 38 02 c0    	jmp    DWORD PTR ds:0xc0023828

c0015041 <x87EmulHandler(regs*, void*)>:
c0015041:	53                   	push   ebx
c0015042:	83 ec 08             	sub    esp,0x8
c0015045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001504a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001504e:	74 10                	je     c0015060 <x87EmulHandler(regs*, void*)+0x1f>
c0015050:	83 ec 0c             	sub    esp,0xc
c0015053:	68 9c e8 01 c0       	push   0xc001e89c
c0015058:	e8 26 b1 ff ff       	call   c0010183 <KePanic(char const*)>
c001505d:	83 c4 10             	add    esp,0x10
c0015060:	0f 20 c0             	mov    eax,cr0
c0015063:	a8 08                	test   al,0x8
c0015065:	74 59                	je     c00150c0 <x87EmulHandler(regs*, void*)+0x7f>
c0015067:	0f 06                	clts   
c0015069:	a1 24 38 02 c0       	mov    eax,ds:0xc0023824
c001506e:	85 c0                	test   eax,eax
c0015070:	74 0e                	je     c0015080 <x87EmulHandler(regs*, void*)+0x3f>
c0015072:	83 ec 0c             	sub    esp,0xc
c0015075:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015078:	e8 9c ff ff ff       	call   c0015019 <i386SaveCoprocessor(void*)>
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015086:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001508a:	75 12                	jne    c001509e <x87EmulHandler(regs*, void*)+0x5d>
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	68 40 02 00 00       	push   0x240
c0015094:	e8 20 27 ff ff       	call   c00077b9 <malloc>
c0015099:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001509c:	eb 10                	jmp    c00150ae <x87EmulHandler(regs*, void*)+0x6d>
c001509e:	83 ec 0c             	sub    esp,0xc
c00150a1:	a1 24 38 02 c0       	mov    eax,ds:0xc0023824
c00150a6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00150a9:	e8 7f ff ff ff       	call   c001502d <i386LoadCoprocessor(void*)>
c00150ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	a3 24 38 02 c0       	mov    ds:0xc0023824,eax
c00150bb:	83 c4 08             	add    esp,0x8
c00150be:	5b                   	pop    ebx
c00150bf:	c3                   	ret    
c00150c0:	83 ec 0c             	sub    esp,0xc
c00150c3:	68 b0 e8 01 c0       	push   0xc001e8b0
c00150c8:	e8 3b 54 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00150cd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00150d5:	83 c4 18             	add    esp,0x18
c00150d8:	5b                   	pop    ebx
c00150d9:	e9 a6 ec ff ff       	jmp    c0013d84 <Thr::terminateFromIRQ(int)>

c00150de <HalInitialiseCoprocessor()>:
c00150de:	83 ec 10             	sub    esp,0x10
c00150e1:	c7 05 24 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023824,0x0
c00150eb:	6a 00                	push   0x0
c00150ed:	68 41 50 01 c0       	push   0xc0015041
c00150f2:	6a 07                	push   0x7
c00150f4:	e8 83 6d ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00150f9:	e8 92 65 00 00       	call   c001b690 <avxDetect>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	85 c0                	test   eax,eax
c0015103:	74 1c                	je     c0015121 <HalInitialiseCoprocessor()+0x43>
c0015105:	c7 05 2c 38 02 c0 ba b6 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b6ba
c001510f:	c7 05 28 38 02 c0 cb b6 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b6cb
c0015119:	83 c4 0c             	add    esp,0xc
c001511c:	e9 bb 65 00 00       	jmp    c001b6dc <avxInit>
c0015121:	e8 ea 67 00 00       	call   c001b910 <absolutelyNoChanceInHell>
c0015126:	85 c0                	test   eax,eax
c0015128:	74 1c                	je     c0015146 <HalInitialiseCoprocessor()+0x68>
c001512a:	c7 05 2c 38 02 c0 28 b9 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b928
c0015134:	c7 05 28 38 02 c0 30 b9 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b930
c001513e:	83 c4 0c             	add    esp,0xc
c0015141:	e9 f2 67 00 00       	jmp    c001b938 <sseInit>
c0015146:	e8 0b 68 00 00       	call   c001b956 <x87Detect>
c001514b:	85 c0                	test   eax,eax
c001514d:	74 1c                	je     c001516b <HalInitialiseCoprocessor()+0x8d>
c001514f:	c7 05 2c 38 02 c0 71 b9 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b971
c0015159:	c7 05 28 38 02 c0 78 b9 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b978
c0015163:	83 c4 0c             	add    esp,0xc
c0015166:	e9 14 68 00 00       	jmp    c001b97f <x87Init>
c001516b:	c7 05 2c 38 02 c0 64 4a 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc0014a64
c0015175:	c7 05 28 38 02 c0 64 4a 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc0014a64
c001517f:	0f 20 c0             	mov    eax,cr0
c0015182:	83 c8 04             	or     eax,0x4
c0015185:	0f 22 c0             	mov    cr0,eax
c0015188:	83 c4 0c             	add    esp,0xc
c001518b:	c3                   	ret    

c001518c <HalPanic(char const*)>:
c001518c:	53                   	push   ebx
c001518d:	83 ec 10             	sub    esp,0x10
c0015190:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015194:	fa                   	cli    
c0015195:	53                   	push   ebx
c0015196:	68 c6 e8 01 c0       	push   0xc001e8c6
c001519b:	e8 68 53 ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00151a0:	83 c4 0c             	add    esp,0xc
c00151a3:	6a 01                	push   0x1
c00151a5:	6a 0f                	push   0xf
c00151a7:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151ad:	e8 98 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151b2:	58                   	pop    eax
c00151b3:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151b9:	e8 84 32 ff ff       	call   c0008442 <VgaText::clearScreen()>
c00151be:	5a                   	pop    edx
c00151bf:	59                   	pop    ecx
c00151c0:	68 2e e9 01 c0       	push   0xc001e92e
c00151c5:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151cb:	e8 b2 30 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00151d0:	83 c4 0c             	add    esp,0xc
c00151d3:	6a 01                	push   0x1
c00151d5:	6a 0f                	push   0xf
c00151d7:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151dd:	e8 68 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151e2:	58                   	pop    eax
c00151e3:	5a                   	pop    edx
c00151e4:	68 df e8 01 c0       	push   0xc001e8df
c00151e9:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151ef:	e8 42 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151f4:	83 c4 0c             	add    esp,0xc
c00151f7:	6a 0f                	push   0xf
c00151f9:	6a 01                	push   0x1
c00151fb:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015201:	e8 44 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015206:	59                   	pop    ecx
c0015207:	58                   	pop    eax
c0015208:	68 e8 e8 01 c0       	push   0xc001e8e8
c001520d:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015213:	e8 1e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015218:	83 c4 0c             	add    esp,0xc
c001521b:	6a 01                	push   0x1
c001521d:	6a 0f                	push   0xf
c001521f:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015225:	e8 20 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001522a:	58                   	pop    eax
c001522b:	5a                   	pop    edx
c001522c:	68 2c e9 01 c0       	push   0xc001e92c
c0015231:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015237:	e8 fa 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001523c:	59                   	pop    ecx
c001523d:	58                   	pop    eax
c001523e:	68 f5 e8 01 c0       	push   0xc001e8f5
c0015243:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015249:	e8 e8 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001524e:	58                   	pop    eax
c001524f:	5a                   	pop    edx
c0015250:	68 2f e9 01 c0       	push   0xc001e92f
c0015255:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001525b:	e8 d6 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015260:	59                   	pop    ecx
c0015261:	58                   	pop    eax
c0015262:	53                   	push   ebx
c0015263:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015269:	e8 c8 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001526e:	58                   	pop    eax
c001526f:	5a                   	pop    edx
c0015270:	68 2c e9 01 c0       	push   0xc001e92c
c0015275:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001527b:	e8 b6 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	eb fe                	jmp    c0015283 <HalPanic(char const*)+0xf7>

c0015285 <HalQueryPerformanceCounter()>:
c0015285:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001528a:	31 d2                	xor    edx,edx
c001528c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015292:	31 c0                	xor    eax,eax
c0015294:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001529b:	74 02                	je     c001529f <HalQueryPerformanceCounter()+0x1a>
c001529d:	0f 31                	rdtsc  
c001529f:	c3                   	ret    

c00152a0 <HalInitialise()>:
c00152a0:	53                   	push   ebx
c00152a1:	83 ec 08             	sub    esp,0x8
c00152a4:	e8 06 6e ff ff       	call   c000c0af <setupINTS()>
c00152a9:	80 3d a0 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022da0,0x0
c00152b0:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00152b5:	75 07                	jne    c00152be <HalInitialise()+0x1e>
c00152b7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00152be:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00152c4:	83 e0 01             	and    eax,0x1
c00152c7:	a2 20 38 02 c0       	mov    ds:0xc0023820,al
c00152cc:	e8 a7 02 00 00       	call   c0015578 <picOpen()>
c00152d1:	80 3d 20 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023820,0x0
c00152d8:	74 0a                	je     c00152e4 <HalInitialise()+0x44>
c00152da:	e8 e1 01 00 00       	call   c00154c0 <picDisable()>
c00152df:	e8 26 5d 00 00       	call   c001b00a <apicOpen()>
c00152e4:	bb 0f 00 00 00       	mov    ebx,0xf
c00152e9:	50                   	push   eax
c00152ea:	6a 00                	push   0x0
c00152ec:	68 65 4f 01 c0       	push   0xc0014f65
c00152f1:	6a 00                	push   0x0
c00152f3:	e8 84 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152f8:	83 c4 0c             	add    esp,0xc
c00152fb:	6a 00                	push   0x0
c00152fd:	68 65 4f 01 c0       	push   0xc0014f65
c0015302:	6a 01                	push   0x1
c0015304:	e8 73 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015309:	83 c4 0c             	add    esp,0xc
c001530c:	6a 00                	push   0x0
c001530e:	68 65 4a 01 c0       	push   0xc0014a65
c0015313:	6a 02                	push   0x2
c0015315:	e8 62 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001531a:	83 c4 0c             	add    esp,0xc
c001531d:	6a 00                	push   0x0
c001531f:	68 65 4f 01 c0       	push   0xc0014f65
c0015324:	6a 03                	push   0x3
c0015326:	e8 51 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001532b:	83 c4 0c             	add    esp,0xc
c001532e:	6a 00                	push   0x0
c0015330:	68 65 4f 01 c0       	push   0xc0014f65
c0015335:	6a 04                	push   0x4
c0015337:	e8 40 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001533c:	83 c4 0c             	add    esp,0xc
c001533f:	6a 00                	push   0x0
c0015341:	68 65 4f 01 c0       	push   0xc0014f65
c0015346:	6a 05                	push   0x5
c0015348:	e8 2f 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001534d:	83 c4 0c             	add    esp,0xc
c0015350:	6a 00                	push   0x0
c0015352:	68 99 4f 01 c0       	push   0xc0014f99
c0015357:	6a 06                	push   0x6
c0015359:	e8 1e 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001535e:	83 c4 0c             	add    esp,0xc
c0015361:	6a 00                	push   0x0
c0015363:	68 7e 4a 01 c0       	push   0xc0014a7e
c0015368:	6a 08                	push   0x8
c001536a:	e8 0d 6b ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001536f:	83 c4 0c             	add    esp,0xc
c0015372:	6a 00                	push   0x0
c0015374:	68 65 4f 01 c0       	push   0xc0014f65
c0015379:	6a 09                	push   0x9
c001537b:	e8 fc 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015380:	83 c4 0c             	add    esp,0xc
c0015383:	6a 00                	push   0x0
c0015385:	68 65 4f 01 c0       	push   0xc0014f65
c001538a:	6a 0a                	push   0xa
c001538c:	e8 eb 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015391:	83 c4 0c             	add    esp,0xc
c0015394:	6a 00                	push   0x0
c0015396:	68 65 4f 01 c0       	push   0xc0014f65
c001539b:	6a 0b                	push   0xb
c001539d:	e8 da 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153a2:	83 c4 0c             	add    esp,0xc
c00153a5:	6a 00                	push   0x0
c00153a7:	68 7a 4e 01 c0       	push   0xc0014e7a
c00153ac:	6a 0d                	push   0xd
c00153ae:	e8 c9 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153b3:	83 c4 0c             	add    esp,0xc
c00153b6:	6a 00                	push   0x0
c00153b8:	68 df 4e 01 c0       	push   0xc0014edf
c00153bd:	6a 0e                	push   0xe
c00153bf:	e8 b8 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	50                   	push   eax
c00153c8:	6a 00                	push   0x0
c00153ca:	68 65 4f 01 c0       	push   0xc0014f65
c00153cf:	53                   	push   ebx
c00153d0:	43                   	inc    ebx
c00153d1:	e8 a6 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	83 fb 1e             	cmp    ebx,0x1e
c00153dc:	75 e9                	jne    c00153c7 <HalInitialise()+0x127>
c00153de:	50                   	push   eax
c00153df:	6a 00                	push   0x0
c00153e1:	68 63 10 01 c0       	push   0xc0011063
c00153e6:	6a 60                	push   0x60
c00153e8:	e8 8f 6a ff ff       	call   c000be7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153ed:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00153f2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00153fc:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015403:	e8 b1 23 ff ff       	call   c00077b9 <malloc>
c0015408:	89 04 24             	mov    DWORD PTR [esp],eax
c001540b:	89 c3                	mov    ebx,eax
c001540d:	e8 2e 09 00 00       	call   c0015d40 <RTC::RTC()>
c0015412:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001541c:	5a                   	pop    edx
c001541d:	59                   	pop    ecx
c001541e:	53                   	push   ebx
c001541f:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015425:	e8 1e 65 ff ff       	call   c000b948 <Device::addChild(Device*)>
c001542a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001542c:	6a 00                	push   0x0
c001542e:	6a 00                	push   0x0
c0015430:	6a 00                	push   0x0
c0015432:	53                   	push   ebx
c0015433:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015436:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001543b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015441:	83 c4 28             	add    esp,0x28
c0015444:	5b                   	pop    ebx
c0015445:	c3                   	ret    

c0015446 <HalMakeBeep(int)>:
c0015446:	53                   	push   ebx
c0015447:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001544b:	85 db                	test   ebx,ebx
c001544d:	75 07                	jne    c0015456 <HalMakeBeep(int)+0x10>
c001544f:	e4 61                	in     al,0x61
c0015451:	83 e0 fc             	and    eax,0xfffffffc
c0015454:	eb 26                	jmp    c001547c <HalMakeBeep(int)+0x36>
c0015456:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001545b:	99                   	cdq    
c001545c:	f7 fb                	idiv   ebx
c001545e:	89 c1                	mov    ecx,eax
c0015460:	b0 b6                	mov    al,0xb6
c0015462:	e6 43                	out    0x43,al
c0015464:	88 c8                	mov    al,cl
c0015466:	e6 42                	out    0x42,al
c0015468:	89 c8                	mov    eax,ecx
c001546a:	c1 e8 08             	shr    eax,0x8
c001546d:	e6 42                	out    0x42,al
c001546f:	e4 61                	in     al,0x61
c0015471:	88 c2                	mov    dl,al
c0015473:	83 ca 03             	or     edx,0x3
c0015476:	38 c2                	cmp    dl,al
c0015478:	74 04                	je     c001547e <HalMakeBeep(int)+0x38>
c001547a:	88 d0                	mov    al,dl
c001547c:	e6 61                	out    0x61,al
c001547e:	5b                   	pop    ebx
c001547f:	c3                   	ret    

c0015480 <HalGetRand()>:
c0015480:	31 c0                	xor    eax,eax
c0015482:	c3                   	ret    

c0015483 <HalEndOfInterrupt(int)>:
c0015483:	80 3d 20 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023820,0x0
c001548a:	74 23                	je     c00154af <HalEndOfInterrupt(int)+0x2c>
c001548c:	83 ec 14             	sub    esp,0x14
c001548f:	6a 1b                	push   0x1b
c0015491:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015497:	e8 56 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001549c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154a1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00154ab:	83 c4 1c             	add    esp,0x1c
c00154ae:	c3                   	ret    
c00154af:	e9 54 02 00 00       	jmp    c0015708 <picEOI(int)>

c00154b4 <HalRestart()>:
c00154b4:	c3                   	ret    

c00154b5 <HalShutdown()>:
c00154b5:	c3                   	ret    

c00154b6 <HalSleep()>:
c00154b6:	c3                   	ret    
c00154b7:	90                   	nop

c00154b8 <picIoWait()>:
c00154b8:	eb 00                	jmp    c00154ba <picIoWait()+0x2>
c00154ba:	eb 00                	jmp    c00154bc <picIoWait()+0x4>
c00154bc:	90                   	nop
c00154bd:	c3                   	ret    
c00154be:	66 90                	xchg   ax,ax

c00154c0 <picDisable()>:
c00154c0:	83 ec 10             	sub    esp,0x10
c00154c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00154ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00154cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00154d8:	ee                   	out    dx,al
c00154d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00154e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00154e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00154ee:	ee                   	out    dx,al
c00154ef:	90                   	nop
c00154f0:	83 c4 10             	add    esp,0x10
c00154f3:	c3                   	ret    

c00154f4 <picGetIRQReg(int)>:
c00154f4:	83 ec 10             	sub    esp,0x10
c00154f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154fb:	25 ff 00 00 00       	and    eax,0xff
c0015500:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015507:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001550b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001550f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015514:	ee                   	out    dx,al
c0015515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015519:	25 ff 00 00 00       	and    eax,0xff
c001551e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015525:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015529:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001552d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015532:	ee                   	out    dx,al
c0015533:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001553a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001553f:	89 c2                	mov    edx,eax
c0015541:	ec                   	in     al,dx
c0015542:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015546:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001554a:	25 ff 00 00 00       	and    eax,0xff
c001554f:	c1 e0 08             	shl    eax,0x8
c0015552:	89 c1                	mov    ecx,eax
c0015554:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001555b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015560:	89 c2                	mov    edx,eax
c0015562:	ec                   	in     al,dx
c0015563:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015567:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001556b:	25 ff 00 00 00       	and    eax,0xff
c0015570:	09 c8                	or     eax,ecx
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	c3                   	ret    
c0015576:	66 90                	xchg   ax,ax

c0015578 <picOpen()>:
c0015578:	83 ec 50             	sub    esp,0x50
c001557b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015582:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015587:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001558b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001558f:	ee                   	out    dx,al
c0015590:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015597:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001559c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00155a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00155a4:	ee                   	out    dx,al
c00155a5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00155ad:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00155b5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00155bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155c0:	89 c2                	mov    edx,eax
c00155c2:	ec                   	in     al,dx
c00155c3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00155c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00155cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00155cf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00155d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155da:	89 c2                	mov    edx,eax
c00155dc:	ec                   	in     al,dx
c00155dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00155e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00155e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00155e9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00155f0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00155f5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00155f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155fd:	ee                   	out    dx,al
c00155fe:	e8 b5 fe ff ff       	call   c00154b8 <picIoWait()>
c0015603:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001560a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001560f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015613:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015617:	ee                   	out    dx,al
c0015618:	e8 9b fe ff ff       	call   c00154b8 <picIoWait()>
c001561d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015621:	25 ff 00 00 00       	and    eax,0xff
c0015626:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001562d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015631:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015635:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015639:	ee                   	out    dx,al
c001563a:	e8 79 fe ff ff       	call   c00154b8 <picIoWait()>
c001563f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015643:	25 ff 00 00 00       	and    eax,0xff
c0015648:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001564f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015653:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015657:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001565b:	ee                   	out    dx,al
c001565c:	e8 57 fe ff ff       	call   c00154b8 <picIoWait()>
c0015661:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015668:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001566d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015671:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015675:	ee                   	out    dx,al
c0015676:	e8 3d fe ff ff       	call   c00154b8 <picIoWait()>
c001567b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015682:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015687:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001568b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001568f:	ee                   	out    dx,al
c0015690:	e8 23 fe ff ff       	call   c00154b8 <picIoWait()>
c0015695:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001569c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00156a1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00156a5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00156a9:	ee                   	out    dx,al
c00156aa:	e8 09 fe ff ff       	call   c00154b8 <picIoWait()>
c00156af:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00156b6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00156bb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00156bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156c3:	ee                   	out    dx,al
c00156c4:	e8 ef fd ff ff       	call   c00154b8 <picIoWait()>
c00156c9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c00156cd:	25 ff 00 00 00       	and    eax,0xff
c00156d2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00156d9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00156dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00156e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00156e5:	ee                   	out    dx,al
c00156e6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00156ea:	25 ff 00 00 00       	and    eax,0xff
c00156ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00156f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00156fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00156fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015702:	ee                   	out    dx,al
c0015703:	90                   	nop
c0015704:	83 c4 50             	add    esp,0x50
c0015707:	c3                   	ret    

c0015708 <picEOI(int)>:
c0015708:	83 ec 10             	sub    esp,0x10
c001570b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015710:	75 22                	jne    c0015734 <picEOI(int)+0x2c>
c0015712:	6a 0b                	push   0xb
c0015714:	e8 db fd ff ff       	call   c00154f4 <picGetIRQReg(int)>
c0015719:	83 c4 04             	add    esp,0x4
c001571c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015721:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015726:	25 ff ff 00 00       	and    eax,0xffff
c001572b:	25 80 00 00 00       	and    eax,0x80
c0015730:	74 72                	je     c00157a4 <picEOI(int)+0x9c>
c0015732:	66 90                	xchg   ax,ax
c0015734:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015739:	75 31                	jne    c001576c <picEOI(int)+0x64>
c001573b:	6a 0b                	push   0xb
c001573d:	e8 b2 fd ff ff       	call   c00154f4 <picGetIRQReg(int)>
c0015742:	83 c4 04             	add    esp,0x4
c0015745:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001574a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001574e:	66 85 c0             	test   ax,ax
c0015751:	78 19                	js     c001576c <picEOI(int)+0x64>
c0015753:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001575a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001575f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015763:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015768:	ee                   	out    dx,al
c0015769:	eb 3d                	jmp    c00157a8 <picEOI(int)+0xa0>
c001576b:	90                   	nop
c001576c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015771:	7e 19                	jle    c001578c <picEOI(int)+0x84>
c0015773:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001577a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001577f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015783:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015788:	ee                   	out    dx,al
c0015789:	8d 76 00             	lea    esi,[esi+0x0]
c001578c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015793:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015798:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001579c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00157a1:	ee                   	out    dx,al
c00157a2:	eb 04                	jmp    c00157a8 <picEOI(int)+0xa0>
c00157a4:	90                   	nop
c00157a5:	8d 76 00             	lea    esi,[esi+0x0]
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	c3                   	ret    

c00157ac <RTC::open(int, int, void*)>:
c00157ac:	31 c0                	xor    eax,eax
c00157ae:	c3                   	ret    
c00157af:	90                   	nop

c00157b0 <RTC::close(int, int, void*)>:
c00157b0:	31 c0                	xor    eax,eax
c00157b2:	c3                   	ret    
c00157b3:	90                   	nop

c00157b4 <RTC::timeInSecondsUTC()>:
c00157b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00157be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00157c4:	c3                   	ret    
c00157c5:	90                   	nop

c00157c6 <RTC::timeInDatetimeUTC()>:
c00157c6:	53                   	push   ebx
c00157c7:	83 ec 14             	sub    esp,0x14
c00157ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00157ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00157d4:	50                   	push   eax
c00157d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00157d8:	83 c4 0c             	add    esp,0xc
c00157db:	52                   	push   edx
c00157dc:	50                   	push   eax
c00157dd:	53                   	push   ebx
c00157de:	e8 d9 5e ff ff       	call   c000b6bc <secondsToDatetime(unsigned long long)>
c00157e3:	89 d8                	mov    eax,ebx
c00157e5:	83 c4 14             	add    esp,0x14
c00157e8:	5b                   	pop    ebx
c00157e9:	c2 04 00             	ret    0x4

c00157ec <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00157ec:	56                   	push   esi
c00157ed:	53                   	push   ebx
c00157ee:	83 ec 14             	sub    esp,0x14
c00157f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157f7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00157fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00157fe:	52                   	push   edx
c00157ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015807:	50                   	push   eax
c0015808:	e8 af 5e ff ff       	call   c000b6bc <secondsToDatetime(unsigned long long)>
c001580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015811:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015815:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015819:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001581d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015821:	89 f0                	mov    eax,esi
c0015823:	83 c4 20             	add    esp,0x20
c0015826:	5b                   	pop    ebx
c0015827:	5e                   	pop    esi
c0015828:	ff e0                	jmp    eax

c001582a <RTC::~RTC()>:
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0015832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015836:	89 10                	mov    DWORD PTR [eax],edx
c0015838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	50                   	push   eax
c0015840:	e8 fb 5b ff ff       	call   c000b440 <Clock::~Clock()>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	90                   	nop
c0015849:	83 c4 0c             	add    esp,0xc
c001584c:	c3                   	ret    
c001584d:	90                   	nop

c001584e <RTC::~RTC()>:
c001584e:	83 ec 0c             	sub    esp,0xc
c0015851:	83 ec 0c             	sub    esp,0xc
c0015854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015858:	e8 cd ff ff ff       	call   c001582a <RTC::~RTC()>
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	83 ec 08             	sub    esp,0x8
c0015863:	68 60 01 00 00       	push   0x160
c0015868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001586c:	e8 a1 4b ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	83 c4 0c             	add    esp,0xc
c0015877:	c3                   	ret    

c0015878 <RTC::get_update_in_progress_flag()>:
c0015878:	83 ec 14             	sub    esp,0x14
c001587b:	6a 0a                	push   0xa
c001587d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015883:	e8 1e 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015888:	83 c4 1c             	add    esp,0x1c
c001588b:	c0 e8 07             	shr    al,0x7
c001588e:	c3                   	ret    
c001588f:	90                   	nop

c0015890 <RTC::completeRTCRefresh()>:
c0015890:	55                   	push   ebp
c0015891:	57                   	push   edi
c0015892:	56                   	push   esi
c0015893:	53                   	push   ebx
c0015894:	83 ec 2c             	sub    esp,0x2c
c0015897:	8b 1d ac 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aac
c001589d:	83 ec 0c             	sub    esp,0xc
c00158a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158a4:	e8 cf ff ff ff       	call   c0015878 <RTC::get_update_in_progress_flag()>
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	84 c0                	test   al,al
c00158ae:	74 0e                	je     c00158be <RTC::completeRTCRefresh()+0x2e>
c00158b0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00158b6:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c00158bc:	73 df                	jae    c001589d <RTC::completeRTCRefresh()+0xd>
c00158be:	55                   	push   ebp
c00158bf:	55                   	push   ebp
c00158c0:	6a 00                	push   0x0
c00158c2:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158c8:	e8 d9 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158cd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00158d1:	58                   	pop    eax
c00158d2:	5a                   	pop    edx
c00158d3:	6a 02                	push   0x2
c00158d5:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158db:	e8 c6 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00158e4:	59                   	pop    ecx
c00158e5:	5b                   	pop    ebx
c00158e6:	6a 04                	push   0x4
c00158e8:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158ee:	e8 b3 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158f3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00158f7:	5e                   	pop    esi
c00158f8:	5f                   	pop    edi
c00158f9:	6a 07                	push   0x7
c00158fb:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015901:	e8 a0 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015906:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001590a:	5d                   	pop    ebp
c001590b:	58                   	pop    eax
c001590c:	6a 08                	push   0x8
c001590e:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015914:	e8 8d 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015919:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001591d:	58                   	pop    eax
c001591e:	5a                   	pop    edx
c001591f:	6a 09                	push   0x9
c0015921:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015927:	e8 7a 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001592c:	83 c4 10             	add    esp,0x10
c001592f:	0f b6 e8             	movzx  ebp,al
c0015932:	8b 1d ac 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aac
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001593f:	e8 34 ff ff ff       	call   c0015878 <RTC::get_update_in_progress_flag()>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	84 c0                	test   al,al
c0015949:	74 0e                	je     c0015959 <RTC::completeRTCRefresh()+0xc9>
c001594b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015951:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c0015957:	73 df                	jae    c0015938 <RTC::completeRTCRefresh()+0xa8>
c0015959:	50                   	push   eax
c001595a:	50                   	push   eax
c001595b:	6a 00                	push   0x0
c001595d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015963:	e8 3e 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015968:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001596c:	58                   	pop    eax
c001596d:	5a                   	pop    edx
c001596e:	6a 02                	push   0x2
c0015970:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015976:	e8 2b 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001597b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001597f:	59                   	pop    ecx
c0015980:	5b                   	pop    ebx
c0015981:	6a 04                	push   0x4
c0015983:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015989:	e8 18 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001598e:	5e                   	pop    esi
c001598f:	88 c3                	mov    bl,al
c0015991:	5f                   	pop    edi
c0015992:	6a 07                	push   0x7
c0015994:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c001599a:	e8 07 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001599f:	89 c6                	mov    esi,eax
c00159a1:	58                   	pop    eax
c00159a2:	5a                   	pop    edx
c00159a3:	6a 08                	push   0x8
c00159a5:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00159ab:	e8 f6 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159b0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00159b4:	59                   	pop    ecx
c00159b5:	5f                   	pop    edi
c00159b6:	6a 09                	push   0x9
c00159b8:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00159be:	e8 e3 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159c3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00159c7:	0f b6 f8             	movzx  edi,al
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c00159d1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159d5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00159d9:	89 f1                	mov    ecx,esi
c00159db:	0f 94 c0             	sete   al
c00159de:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c00159e2:	0f 94 c2             	sete   dl
c00159e5:	21 d0                	and    eax,edx
c00159e7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c00159eb:	0f 94 c2             	sete   dl
c00159ee:	21 c2                	and    edx,eax
c00159f0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00159f4:	0f 94 c0             	sete   al
c00159f7:	21 d0                	and    eax,edx
c00159f9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159fd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015a01:	0f 94 c1             	sete   cl
c0015a04:	84 c8                	test   al,cl
c0015a06:	75 29                	jne    c0015a31 <RTC::completeRTCRefresh()+0x1a1>
c0015a08:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a0c:	89 fd                	mov    ebp,edi
c0015a0e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015a12:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015a16:	89 f0                	mov    eax,esi
c0015a18:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015a1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a20:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015a24:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a28:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a2c:	e9 01 ff ff ff       	jmp    c0015932 <RTC::completeRTCRefresh()+0xa2>
c0015a31:	39 fd                	cmp    ebp,edi
c0015a33:	75 d3                	jne    c0015a08 <RTC::completeRTCRefresh()+0x178>
c0015a35:	55                   	push   ebp
c0015a36:	55                   	push   ebp
c0015a37:	6a 0b                	push   0xb
c0015a39:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015a3f:	e8 62 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	89 c5                	mov    ebp,eax
c0015a49:	a8 04                	test   al,0x4
c0015a4b:	75 78                	jne    c0015ac5 <RTC::completeRTCRefresh()+0x235>
c0015a4d:	b1 0a                	mov    cl,0xa
c0015a4f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015a53:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a57:	83 e2 0f             	and    edx,0xf
c0015a5a:	c0 e8 04             	shr    al,0x4
c0015a5d:	c1 ef 04             	shr    edi,0x4
c0015a60:	f6 e1                	mul    cl
c0015a62:	6b ff 0a             	imul   edi,edi,0xa
c0015a65:	01 d0                	add    eax,edx
c0015a67:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015a6b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015a6f:	83 e2 0f             	and    edx,0xf
c0015a72:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a76:	c0 e8 04             	shr    al,0x4
c0015a79:	f6 e1                	mul    cl
c0015a7b:	01 d0                	add    eax,edx
c0015a7d:	88 da                	mov    dl,bl
c0015a7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a83:	83 e2 0f             	and    edx,0xf
c0015a86:	88 d8                	mov    al,bl
c0015a88:	83 e3 80             	and    ebx,0xffffff80
c0015a8b:	c0 e8 04             	shr    al,0x4
c0015a8e:	83 e0 07             	and    eax,0x7
c0015a91:	f6 e1                	mul    cl
c0015a93:	01 d0                	add    eax,edx
c0015a95:	89 f2                	mov    edx,esi
c0015a97:	09 c3                	or     ebx,eax
c0015a99:	83 e2 0f             	and    edx,0xf
c0015a9c:	89 f0                	mov    eax,esi
c0015a9e:	c0 e8 04             	shr    al,0x4
c0015aa1:	f6 e1                	mul    cl
c0015aa3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015aa6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015aaa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015aae:	83 e2 0f             	and    edx,0xf
c0015ab1:	c0 e8 04             	shr    al,0x4
c0015ab4:	f6 e1                	mul    cl
c0015ab6:	01 d0                	add    eax,edx
c0015ab8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015abc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ac0:	83 e0 0f             	and    eax,0xf
c0015ac3:	01 c7                	add    edi,eax
c0015ac5:	83 e5 02             	and    ebp,0x2
c0015ac8:	75 14                	jne    c0015ade <RTC::completeRTCRefresh()+0x24e>
c0015aca:	84 db                	test   bl,bl
c0015acc:	79 10                	jns    c0015ade <RTC::completeRTCRefresh()+0x24e>
c0015ace:	83 e3 7f             	and    ebx,0x7f
c0015ad1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ad6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ad9:	99                   	cdq    
c0015ada:	f7 f9                	idiv   ecx
c0015adc:	88 d3                	mov    bl,dl
c0015ade:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ae4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015aea:	77 06                	ja     c0015af2 <RTC::completeRTCRefresh()+0x262>
c0015aec:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015af2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015af7:	31 d2                	xor    edx,edx
c0015af9:	c1 e1 10             	shl    ecx,0x10
c0015afc:	89 d7                	mov    edi,edx
c0015afe:	c1 e5 10             	shl    ebp,0x10
c0015b01:	31 c0                	xor    eax,eax
c0015b03:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015b09:	09 cf                	or     edi,ecx
c0015b0b:	89 fa                	mov    edx,edi
c0015b0d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015b11:	88 da                	mov    dl,bl
c0015b13:	89 f3                	mov    ebx,esi
c0015b15:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015b19:	88 d8                	mov    al,bl
c0015b1b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015b1f:	0f b7 c8             	movzx  ecx,ax
c0015b22:	09 e9                	or     ecx,ebp
c0015b24:	89 c8                	mov    eax,ecx
c0015b26:	51                   	push   ecx
c0015b27:	51                   	push   ecx
c0015b28:	52                   	push   edx
c0015b29:	50                   	push   eax
c0015b2a:	e8 00 5a ff ff       	call   c000b52f <datetimeToSeconds(datetime_t)>
c0015b2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015b33:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015b39:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015b3f:	83 c4 3c             	add    esp,0x3c
c0015b42:	5b                   	pop    ebx
c0015b43:	5e                   	pop    esi
c0015b44:	5f                   	pop    edi
c0015b45:	5d                   	pop    ebp
c0015b46:	c3                   	ret    
c0015b47:	90                   	nop

c0015b48 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015b48:	55                   	push   ebp
c0015b49:	57                   	push   edi
c0015b4a:	56                   	push   esi
c0015b4b:	53                   	push   ebx
c0015b4c:	83 ec 30             	sub    esp,0x30
c0015b4f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015b53:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015b57:	6a 00                	push   0x0
c0015b59:	6a 00                	push   0x0
c0015b5b:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015b61:	e8 56 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b66:	83 c4 0c             	add    esp,0xc
c0015b69:	6a 00                	push   0x0
c0015b6b:	6a 02                	push   0x2
c0015b6d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015b73:	e8 44 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b78:	31 d2                	xor    edx,edx
c0015b7a:	89 f9                	mov    ecx,edi
c0015b7c:	89 f8                	mov    eax,edi
c0015b7e:	c1 e9 10             	shr    ecx,0x10
c0015b81:	0f b6 c4             	movzx  eax,ah
c0015b84:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015b88:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015b8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b90:	b9 64 00 00 00       	mov    ecx,0x64
c0015b95:	89 f0                	mov    eax,esi
c0015b97:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b9b:	89 f0                	mov    eax,esi
c0015b9d:	0f b6 c4             	movzx  eax,ah
c0015ba0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ba4:	89 f0                	mov    eax,esi
c0015ba6:	c1 e8 10             	shr    eax,0x10
c0015ba9:	66 f7 f1             	div    cx
c0015bac:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015bb1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015bb6:	59                   	pop    ecx
c0015bb7:	5b                   	pop    ebx
c0015bb8:	89 fb                	mov    ebx,edi
c0015bba:	6a 0b                	push   0xb
c0015bbc:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015bc2:	e8 df 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015bc7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015bd3:	75 74                	jne    c0015c49 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015bd5:	b2 0a                	mov    dl,0xa
c0015bd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015bdb:	0f b6 c1             	movzx  eax,cl
c0015bde:	f6 f2                	div    dl
c0015be0:	88 c3                	mov    bl,al
c0015be2:	88 e0                	mov    al,ah
c0015be4:	c1 e3 04             	shl    ebx,0x4
c0015be7:	09 c3                	or     ebx,eax
c0015be9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015bee:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015bf2:	f6 f2                	div    dl
c0015bf4:	88 c1                	mov    cl,al
c0015bf6:	88 e0                	mov    al,ah
c0015bf8:	c1 e1 04             	shl    ecx,0x4
c0015bfb:	09 c1                	or     ecx,eax
c0015bfd:	89 f8                	mov    eax,edi
c0015bff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015c03:	0f b6 c0             	movzx  eax,al
c0015c06:	f6 f2                	div    dl
c0015c08:	88 c3                	mov    bl,al
c0015c0a:	88 e0                	mov    al,ah
c0015c0c:	c1 e3 04             	shl    ebx,0x4
c0015c0f:	09 c3                	or     ebx,eax
c0015c11:	89 f0                	mov    eax,esi
c0015c13:	0f b6 c0             	movzx  eax,al
c0015c16:	f6 f2                	div    dl
c0015c18:	88 c1                	mov    cl,al
c0015c1a:	88 e0                	mov    al,ah
c0015c1c:	c1 e1 04             	shl    ecx,0x4
c0015c1f:	09 c1                	or     ecx,eax
c0015c21:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c26:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015c2a:	f6 f2                	div    dl
c0015c2c:	88 c1                	mov    cl,al
c0015c2e:	88 e0                	mov    al,ah
c0015c30:	c1 e1 04             	shl    ecx,0x4
c0015c33:	09 c1                	or     ecx,eax
c0015c35:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015c3a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015c3e:	f6 f2                	div    dl
c0015c40:	89 c5                	mov    ebp,eax
c0015c42:	88 e0                	mov    al,ah
c0015c44:	c1 e5 04             	shl    ebp,0x4
c0015c47:	09 c5                	or     ebp,eax
c0015c49:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015c4e:	75 17                	jne    c0015c67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c50:	80 fb 0b             	cmp    bl,0xb
c0015c53:	76 0c                	jbe    c0015c61 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015c55:	80 eb 0c             	sub    bl,0xc
c0015c58:	75 02                	jne    c0015c5c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015c5a:	b3 0c                	mov    bl,0xc
c0015c5c:	83 cb 80             	or     ebx,0xffffff80
c0015c5f:	eb 06                	jmp    c0015c67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c61:	84 db                	test   bl,bl
c0015c63:	75 02                	jne    c0015c67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c65:	b3 0c                	mov    bl,0xc
c0015c67:	0f b6 db             	movzx  ebx,bl
c0015c6a:	50                   	push   eax
c0015c6b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015c70:	50                   	push   eax
c0015c71:	6a 00                	push   0x0
c0015c73:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015c79:	e8 3e 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c7e:	83 c4 0c             	add    esp,0xc
c0015c81:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c86:	50                   	push   eax
c0015c87:	6a 02                	push   0x2
c0015c89:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015c8f:	e8 28 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c94:	83 c4 0c             	add    esp,0xc
c0015c97:	53                   	push   ebx
c0015c98:	6a 04                	push   0x4
c0015c9a:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015ca0:	e8 17 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ca5:	83 c4 0c             	add    esp,0xc
c0015ca8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015cad:	50                   	push   eax
c0015cae:	6a 07                	push   0x7
c0015cb0:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015cb6:	e8 01 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cbb:	83 c4 0c             	add    esp,0xc
c0015cbe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015cc3:	50                   	push   eax
c0015cc4:	6a 08                	push   0x8
c0015cc6:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015ccc:	e8 eb 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cd1:	83 c4 0c             	add    esp,0xc
c0015cd4:	89 e8                	mov    eax,ebp
c0015cd6:	0f b6 e8             	movzx  ebp,al
c0015cd9:	55                   	push   ebp
c0015cda:	6a 09                	push   0x9
c0015cdc:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015ce2:	e8 d5 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ce7:	5a                   	pop    edx
c0015ce8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cec:	e8 9f fb ff ff       	call   c0015890 <RTC::completeRTCRefresh()>
c0015cf1:	83 c4 3c             	add    esp,0x3c
c0015cf4:	b0 01                	mov    al,0x1
c0015cf6:	5b                   	pop    ebx
c0015cf7:	5e                   	pop    esi
c0015cf8:	5f                   	pop    edi
c0015cf9:	5d                   	pop    ebp
c0015cfa:	c3                   	ret    

c0015cfb <rtcIRQHandler(regs*, void*)>:
c0015cfb:	53                   	push   ebx
c0015cfc:	83 ec 10             	sub    esp,0x10
c0015cff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d03:	6a 0c                	push   0xc
c0015d05:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015d0b:	e8 96 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	84 c0                	test   al,al
c0015d15:	79 24                	jns    c0015d3b <rtcIRQHandler(regs*, void*)+0x40>
c0015d17:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015d1e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015d25:	66 ff 05 34 38 02 c0 	inc    WORD PTR ds:0xc0023834
c0015d2c:	75 0d                	jne    c0015d3b <rtcIRQHandler(regs*, void*)+0x40>
c0015d2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015d32:	83 c4 08             	add    esp,0x8
c0015d35:	5b                   	pop    ebx
c0015d36:	e9 55 fb ff ff       	jmp    c0015890 <RTC::completeRTCRefresh()>
c0015d3b:	83 c4 08             	add    esp,0x8
c0015d3e:	5b                   	pop    ebx
c0015d3f:	c3                   	ret    

c0015d40 <RTC::RTC()>:
c0015d40:	83 ec 1c             	sub    esp,0x1c
c0015d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	68 af e9 01 c0       	push   0xc001e9af
c0015d4f:	50                   	push   eax
c0015d50:	e8 b5 56 ff ff       	call   c000b40a <Clock::Clock(char const*)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0015d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d61:	89 10                	mov    DWORD PTR [eax],edx
c0015d63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d67:	83 ec 0c             	sub    esp,0xc
c0015d6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d6e:	6a 01                	push   0x1
c0015d70:	68 fb 5c 01 c0       	push   0xc0015cfb
c0015d75:	6a 08                	push   0x8
c0015d77:	50                   	push   eax
c0015d78:	e8 77 5b ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015d7d:	83 c4 20             	add    esp,0x20
c0015d80:	89 c2                	mov    edx,eax
c0015d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d86:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015d8c:	fa                   	cli    
c0015d8d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015d92:	40                   	inc    eax
c0015d93:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0015d98:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	6a 0b                	push   0xb
c0015da2:	50                   	push   eax
c0015da3:	e8 fe 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015daf:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0015db4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015db8:	83 ca 10             	or     edx,0x10
c0015dbb:	81 e2 ff 00 00 00    	and    edx,0xff
c0015dc1:	83 ec 04             	sub    esp,0x4
c0015dc4:	52                   	push   edx
c0015dc5:	6a 0b                	push   0xb
c0015dc7:	50                   	push   eax
c0015dc8:	e8 ef 11 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	83 ec 0c             	sub    esp,0xc
c0015dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd7:	e8 b4 fa ff ff       	call   c0015890 <RTC::completeRTCRefresh()>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015de4:	48                   	dec    eax
c0015de5:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0015dea:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015def:	85 c0                	test   eax,eax
c0015df1:	75 01                	jne    c0015df4 <RTC::RTC()+0xb4>
c0015df3:	fb                   	sti    
c0015df4:	90                   	nop
c0015df5:	83 c4 1c             	add    esp,0x1c
c0015df8:	c3                   	ret    
c0015df9:	66 90                	xchg   ax,ax
c0015dfb:	90                   	nop

c0015dfc <HalConsoleScroll(int, int)>:
c0015dfc:	83 ec 10             	sub    esp,0x10
c0015dff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015e07:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015e0f:	90                   	nop
c0015e10:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e15:	0f 8f e1 00 00 00    	jg     c0015efc <HalConsoleScroll(int, int)+0x100>
c0015e1b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015e23:	90                   	nop
c0015e24:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015e2c:	0f 8f be 00 00 00    	jg     c0015ef0 <HalConsoleScroll(int, int)+0xf4>
c0015e32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e36:	89 d0                	mov    eax,edx
c0015e38:	c1 e0 02             	shl    eax,0x2
c0015e3b:	01 d0                	add    eax,edx
c0015e3d:	c1 e0 05             	shl    eax,0x5
c0015e40:	89 c2                	mov    edx,eax
c0015e42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e46:	01 d0                	add    eax,edx
c0015e48:	89 c2                	mov    edx,eax
c0015e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015e51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e55:	89 d0                	mov    eax,edx
c0015e57:	c1 e0 02             	shl    eax,0x2
c0015e5a:	01 d0                	add    eax,edx
c0015e5c:	c1 e0 05             	shl    eax,0x5
c0015e5f:	89 c2                	mov    edx,eax
c0015e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e65:	01 d0                	add    eax,edx
c0015e67:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015e6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e71:	01 c2                	add    edx,eax
c0015e73:	8a 01                	mov    al,BYTE PTR [ecx]
c0015e75:	88 02                	mov    BYTE PTR [edx],al
c0015e77:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e7c:	75 66                	jne    c0015ee4 <HalConsoleScroll(int, int)+0xe8>
c0015e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e82:	83 e0 01             	and    eax,0x1
c0015e85:	74 39                	je     c0015ec0 <HalConsoleScroll(int, int)+0xc4>
c0015e87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e8b:	83 e0 0f             	and    eax,0xf
c0015e8e:	88 c2                	mov    dl,al
c0015e90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e94:	c1 e0 04             	shl    eax,0x4
c0015e97:	88 d1                	mov    cl,dl
c0015e99:	09 c1                	or     ecx,eax
c0015e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9f:	89 d0                	mov    eax,edx
c0015ea1:	c1 e0 02             	shl    eax,0x2
c0015ea4:	01 d0                	add    eax,edx
c0015ea6:	c1 e0 05             	shl    eax,0x5
c0015ea9:	89 c2                	mov    edx,eax
c0015eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eaf:	01 d0                	add    eax,edx
c0015eb1:	89 c2                	mov    edx,eax
c0015eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb7:	01 d0                	add    eax,edx
c0015eb9:	88 ca                	mov    dl,cl
c0015ebb:	88 10                	mov    BYTE PTR [eax],dl
c0015ebd:	eb 25                	jmp    c0015ee4 <HalConsoleScroll(int, int)+0xe8>
c0015ebf:	90                   	nop
c0015ec0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec4:	89 d0                	mov    eax,edx
c0015ec6:	c1 e0 02             	shl    eax,0x2
c0015ec9:	01 d0                	add    eax,edx
c0015ecb:	c1 e0 05             	shl    eax,0x5
c0015ece:	89 c2                	mov    edx,eax
c0015ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ed4:	01 d0                	add    eax,edx
c0015ed6:	89 c2                	mov    edx,eax
c0015ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015edc:	01 d0                	add    eax,edx
c0015ede:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015ee8:	e9 37 ff ff ff       	jmp    c0015e24 <HalConsoleScroll(int, int)+0x28>
c0015eed:	8d 76 00             	lea    esi,[esi+0x0]
c0015ef0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015ef4:	e9 17 ff ff ff       	jmp    c0015e10 <HalConsoleScroll(int, int)+0x14>
c0015ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0015efc:	90                   	nop
c0015efd:	83 c4 10             	add    esp,0x10
c0015f00:	c3                   	ret    
c0015f01:	8d 76 00             	lea    esi,[esi+0x0]

c0015f04 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015f04:	83 ec 14             	sub    esp,0x14
c0015f07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f0b:	88 04 24             	mov    BYTE PTR [esp],al
c0015f0e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015f11:	25 ff 00 00 00       	and    eax,0xff
c0015f16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f1a:	89 d1                	mov    ecx,edx
c0015f1c:	83 e1 0f             	and    ecx,0xf
c0015f1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f23:	c1 e2 04             	shl    edx,0x4
c0015f26:	81 e2 ff 00 00 00    	and    edx,0xff
c0015f2c:	09 ca                	or     edx,ecx
c0015f2e:	c1 e2 08             	shl    edx,0x8
c0015f31:	09 d0                	or     eax,edx
c0015f33:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015f38:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015f40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f44:	89 d0                	mov    eax,edx
c0015f46:	c1 e0 02             	shl    eax,0x2
c0015f49:	01 d0                	add    eax,edx
c0015f4b:	c1 e0 04             	shl    eax,0x4
c0015f4e:	89 c2                	mov    edx,eax
c0015f50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f54:	01 d0                	add    eax,edx
c0015f56:	01 c0                	add    eax,eax
c0015f58:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015f5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f60:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015f65:	66 89 02             	mov    WORD PTR [edx],ax
c0015f68:	90                   	nop
c0015f69:	83 c4 14             	add    esp,0x14
c0015f6c:	c3                   	ret    
c0015f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f70 <HalConsoleCursorUpdate(int, int)>:
c0015f70:	83 ec 20             	sub    esp,0x20
c0015f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f77:	89 c2                	mov    edx,eax
c0015f79:	89 d0                	mov    eax,edx
c0015f7b:	c1 e0 02             	shl    eax,0x2
c0015f7e:	01 d0                	add    eax,edx
c0015f80:	c1 e0 04             	shl    eax,0x4
c0015f83:	89 c2                	mov    edx,eax
c0015f85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f89:	01 d0                	add    eax,edx
c0015f8b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015f90:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f97:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015fa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fa4:	ee                   	out    dx,al
c0015fa5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015faa:	25 ff 00 00 00       	and    eax,0xff
c0015faf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015fb6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015fba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015fbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015fc2:	ee                   	out    dx,al
c0015fc3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015fca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015fcf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015fd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fd7:	ee                   	out    dx,al
c0015fd8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015fdd:	66 c1 e8 08          	shr    ax,0x8
c0015fe1:	25 ff 00 00 00       	and    eax,0xff
c0015fe6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015fed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ff1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015ff5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ff9:	ee                   	out    dx,al
c0015ffa:	90                   	nop
c0015ffb:	83 c4 20             	add    esp,0x20
c0015ffe:	c3                   	ret    
c0015fff:	90                   	nop

c0016000 <FAT::getName()>:
c0016000:	b8 00 ea 01 c0       	mov    eax,0xc001ea00
c0016005:	c3                   	ret    
c0016006:	66 90                	xchg   ax,ax

c0016008 <FAT::tell(void*, unsigned long long*)>:
c0016008:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001600d:	75 09                	jne    c0016018 <FAT::tell(void*, unsigned long long*)+0x10>
c001600f:	b8 04 00 00 00       	mov    eax,0x4
c0016014:	c3                   	ret    
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001601d:	75 09                	jne    c0016028 <FAT::tell(void*, unsigned long long*)+0x20>
c001601f:	b8 04 00 00 00       	mov    eax,0x4
c0016024:	c3                   	ret    
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001602c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001602f:	ba 00 00 00 00       	mov    edx,0x0
c0016034:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016038:	89 01                	mov    DWORD PTR [ecx],eax
c001603a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001603d:	b8 00 00 00 00       	mov    eax,0x0
c0016042:	c3                   	ret    
c0016043:	90                   	nop

c0016044 <FAT::stat(void*, unsigned long long*)>:
c0016044:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016049:	75 09                	jne    c0016054 <FAT::stat(void*, unsigned long long*)+0x10>
c001604b:	b8 04 00 00 00       	mov    eax,0x4
c0016050:	c3                   	ret    
c0016051:	8d 76 00             	lea    esi,[esi+0x0]
c0016054:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016059:	75 09                	jne    c0016064 <FAT::stat(void*, unsigned long long*)+0x20>
c001605b:	b8 04 00 00 00       	mov    eax,0x4
c0016060:	c3                   	ret    
c0016061:	8d 76 00             	lea    esi,[esi+0x0]
c0016064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016068:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001606b:	ba 00 00 00 00       	mov    edx,0x0
c0016070:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016074:	89 01                	mov    DWORD PTR [ecx],eax
c0016076:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016079:	b8 00 00 00 00       	mov    eax,0x0
c001607e:	c3                   	ret    
c001607f:	90                   	nop

c0016080 <FAT::~FAT()>:
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	ba 4c ea 01 c0       	mov    edx,0xc001ea4c
c0016088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001608c:	89 10                	mov    DWORD PTR [eax],edx
c001608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016092:	83 ec 0c             	sub    esp,0xc
c0016095:	50                   	push   eax
c0016096:	e8 b3 47 ff ff       	call   c000a84e <Filesystem::~Filesystem()>
c001609b:	83 c4 10             	add    esp,0x10
c001609e:	90                   	nop
c001609f:	83 c4 0c             	add    esp,0xc
c00160a2:	c3                   	ret    
c00160a3:	90                   	nop

c00160a4 <FAT::~FAT()>:
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	83 ec 0c             	sub    esp,0xc
c00160aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ae:	e8 cd ff ff ff       	call   c0016080 <FAT::~FAT()>
c00160b3:	83 c4 10             	add    esp,0x10
c00160b6:	83 ec 08             	sub    esp,0x8
c00160b9:	6a 08                	push   0x8
c00160bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160bf:	e8 4e 43 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c00160c4:	83 c4 10             	add    esp,0x10
c00160c7:	83 c4 0c             	add    esp,0xc
c00160ca:	c3                   	ret    
c00160cb:	90                   	nop

c00160cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00160cc:	83 ec 1c             	sub    esp,0x1c
c00160cf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00160d6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00160db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160df:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c00160e6:	83 f8 ff             	cmp    eax,0xffffffff
c00160e9:	75 35                	jne    c0016120 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00160eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160ef:	88 c2                	mov    dl,al
c00160f1:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00160f6:	01 d0                	add    eax,edx
c00160f8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160fc:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c0016102:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016106:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c001610d:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016112:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016116:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c001611d:	eb 19                	jmp    c0016138 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001611f:	90                   	nop
c0016120:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016124:	88 c2                	mov    dl,al
c0016126:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001612a:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016131:	01 d0                	add    eax,edx
c0016133:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016137:	90                   	nop
c0016138:	83 ec 04             	sub    esp,0x4
c001613b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001613f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016143:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016147:	50                   	push   eax
c0016148:	e8 07 ed fe ff       	call   c0004e54 <f_getlabel>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016154:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016159:	75 09                	jne    c0016164 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001615b:	b8 00 00 00 00       	mov    eax,0x0
c0016160:	eb 0a                	jmp    c001616c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016162:	66 90                	xchg   ax,ax
c0016164:	b8 01 00 00 00       	mov    eax,0x1
c0016169:	8d 76 00             	lea    esi,[esi+0x0]
c001616c:	83 c4 1c             	add    esp,0x1c
c001616f:	c3                   	ret    

c0016170 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016170:	57                   	push   edi
c0016171:	83 ec 58             	sub    esp,0x58
c0016174:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001617c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016180:	b8 00 00 00 00       	mov    eax,0x0
c0016185:	b9 0f 00 00 00       	mov    ecx,0xf
c001618a:	fc                   	cld    
c001618b:	89 d7                	mov    edi,edx
c001618d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001618f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016193:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001619a:	83 f8 ff             	cmp    eax,0xffffffff
c001619d:	75 35                	jne    c00161d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001619f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00161a3:	88 c2                	mov    dl,al
c00161a5:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00161aa:	01 d0                	add    eax,edx
c00161ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161b0:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c00161b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161ba:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00161c1:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00161c6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00161ca:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c00161d1:	eb 19                	jmp    c00161ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00161d3:	90                   	nop
c00161d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00161d8:	88 c2                	mov    dl,al
c00161da:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161de:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c00161e5:	01 d0                	add    eax,edx
c00161e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161eb:	90                   	nop
c00161ec:	83 ec 08             	sub    esp,0x8
c00161ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00161f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161f7:	50                   	push   eax
c00161f8:	e8 c3 a5 fe ff       	call   c00007c0 <strcat>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	83 ec 0c             	sub    esp,0xc
c0016203:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016207:	50                   	push   eax
c0016208:	e8 98 ed fe ff       	call   c0004fa5 <f_setlabel>
c001620d:	83 c4 10             	add    esp,0x10
c0016210:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016214:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016219:	75 09                	jne    c0016224 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001621b:	b8 00 00 00 00       	mov    eax,0x0
c0016220:	eb 0a                	jmp    c001622c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016222:	66 90                	xchg   ax,ax
c0016224:	b8 01 00 00 00       	mov    eax,0x1
c0016229:	8d 76 00             	lea    esi,[esi+0x0]
c001622c:	83 c4 58             	add    esp,0x58
c001622f:	5f                   	pop    edi
c0016230:	c3                   	ret    
c0016231:	90                   	nop
c0016232:	66 90                	xchg   ax,ax

c0016234 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016234:	83 ec 2c             	sub    esp,0x2c
c0016237:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001623f:	83 ec 08             	sub    esp,0x8
c0016242:	68 24 ea 01 c0       	push   0xc001ea24
c0016247:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001624b:	e8 90 a4 fe ff       	call   c00006e0 <strcmp>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	85 c0                	test   eax,eax
c0016255:	0f 94 c0             	sete   al
c0016258:	84 c0                	test   al,al
c001625a:	74 10                	je     c001626c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001625c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016264:	e9 b3 00 00 00       	jmp    c001631c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016269:	8d 76 00             	lea    esi,[esi+0x0]
c001626c:	83 ec 08             	sub    esp,0x8
c001626f:	68 16 ea 01 c0       	push   0xc001ea16
c0016274:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016278:	e8 63 a4 fe ff       	call   c00006e0 <strcmp>
c001627d:	83 c4 10             	add    esp,0x10
c0016280:	85 c0                	test   eax,eax
c0016282:	0f 94 c0             	sete   al
c0016285:	84 c0                	test   al,al
c0016287:	74 0f                	je     c0016298 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016289:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016291:	e9 86 00 00 00       	jmp    c001631c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016296:	66 90                	xchg   ax,ax
c0016298:	83 ec 08             	sub    esp,0x8
c001629b:	68 1c ea 01 c0       	push   0xc001ea1c
c00162a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162a4:	e8 37 a4 fe ff       	call   c00006e0 <strcmp>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	85 c0                	test   eax,eax
c00162ae:	0f 94 c0             	sete   al
c00162b1:	84 c0                	test   al,al
c00162b3:	74 0b                	je     c00162c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00162b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00162bd:	eb 5d                	jmp    c001631c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162bf:	90                   	nop
c00162c0:	83 ec 08             	sub    esp,0x8
c00162c3:	68 7c ca 01 c0       	push   0xc001ca7c
c00162c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162cc:	e8 0f a4 fe ff       	call   c00006e0 <strcmp>
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	85 c0                	test   eax,eax
c00162d6:	0f 94 c0             	sete   al
c00162d9:	84 c0                	test   al,al
c00162db:	74 0b                	je     c00162e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00162dd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00162e5:	eb 35                	jmp    c001631c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162e7:	90                   	nop
c00162e8:	83 ec 08             	sub    esp,0x8
c00162eb:	68 22 ea 01 c0       	push   0xc001ea22
c00162f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162f4:	e8 e7 a3 fe ff       	call   c00006e0 <strcmp>
c00162f9:	83 c4 10             	add    esp,0x10
c00162fc:	85 c0                	test   eax,eax
c00162fe:	0f 94 c0             	sete   al
c0016301:	84 c0                	test   al,al
c0016303:	74 0b                	je     c0016310 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016305:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001630d:	eb 0d                	jmp    c001631c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001630f:	90                   	nop
c0016310:	b8 08 00 00 00       	mov    eax,0x8
c0016315:	e9 ea 00 00 00       	jmp    c0016404 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001631a:	66 90                	xchg   ax,ax
c001631c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016323:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016328:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001632c:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016333:	83 f8 ff             	cmp    eax,0xffffffff
c0016336:	75 34                	jne    c001636c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016338:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001633c:	88 c2                	mov    dl,al
c001633e:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016343:	01 d0                	add    eax,edx
c0016345:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016349:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c001634f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016353:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c001635a:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001635f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016363:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c001636a:	eb 18                	jmp    c0016384 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001636c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016370:	88 c2                	mov    dl,al
c0016372:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016376:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001637d:	01 d0                	add    eax,edx
c001637f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016383:	90                   	nop
c0016384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016388:	88 04 24             	mov    BYTE PTR [esp],al
c001638b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001638f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016393:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001639b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00163a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163a8:	83 ec 0c             	sub    esp,0xc
c00163ab:	68 00 20 00 00       	push   0x2000
c00163b0:	e8 04 14 ff ff       	call   c00077b9 <malloc>
c00163b5:	83 c4 10             	add    esp,0x10
c00163b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163bc:	68 00 20 00 00       	push   0x2000
c00163c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163c9:	50                   	push   eax
c00163ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00163ce:	50                   	push   eax
c00163cf:	e8 c1 ee fe ff       	call   c0005295 <f_mkfs>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00163db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00163e0:	75 0a                	jne    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00163e2:	b8 00 00 00 00       	mov    eax,0x0
c00163e7:	eb 1b                	jmp    c0016404 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163e9:	8d 76 00             	lea    esi,[esi+0x0]
c00163ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00163f1:	75 09                	jne    c00163fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00163f3:	b8 09 00 00 00       	mov    eax,0x9
c00163f8:	eb 0a                	jmp    c0016404 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163fa:	66 90                	xchg   ax,ax
c00163fc:	b8 01 00 00 00       	mov    eax,0x1
c0016401:	8d 76 00             	lea    esi,[esi+0x0]
c0016404:	83 c4 2c             	add    esp,0x2c
c0016407:	c3                   	ret    

c0016408 <FAT::tryMount(LogicalDisk*, int)>:
c0016408:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001640e:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016413:	83 f8 14             	cmp    eax,0x14
c0016416:	75 18                	jne    c0016430 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	68 28 ea 01 c0       	push   0xc001ea28
c0016420:	e8 5e 9d ff ff       	call   c0010183 <KePanic(char const*)>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	b0 00                	mov    al,0x0
c001642a:	e9 e9 01 00 00       	jmp    c0016618 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001642f:	90                   	nop
c0016430:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016437:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001643d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016443:	3d 00 02 00 00       	cmp    eax,0x200
c0016448:	74 0a                	je     c0016454 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001644a:	b0 00                	mov    al,0x0
c001644c:	e9 c7 01 00 00       	jmp    c0016618 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016451:	8d 76 00             	lea    esi,[esi+0x0]
c0016454:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001645c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016463:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001646a:	83 f8 ff             	cmp    eax,0xffffffff
c001646d:	74 09                	je     c0016478 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001646f:	b0 01                	mov    al,0x1
c0016471:	e9 a2 01 00 00       	jmp    c0016618 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016476:	66 90                	xchg   ax,ax
c0016478:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016482:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001648a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016491:	88 c2                	mov    dl,al
c0016493:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016498:	01 d0                	add    eax,edx
c001649a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00164a1:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c00164a7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00164ae:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00164b5:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00164ba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00164c1:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	68 34 02 00 00       	push   0x234
c00164d0:	e8 e4 12 ff ff       	call   c00077b9 <malloc>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00164df:	83 ec 04             	sub    esp,0x4
c00164e2:	6a 00                	push   0x0
c00164e4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00164eb:	50                   	push   eax
c00164ec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164f3:	e8 c3 d5 fe ff       	call   c0003abb <f_mount>
c00164f8:	83 c4 10             	add    esp,0x10
c00164fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016502:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001650a:	74 1c                	je     c0016528 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016516:	e8 be 12 ff ff       	call   c00077d9 <rfree>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	b0 00                	mov    al,0x0
c0016520:	e9 f3 00 00 00       	jmp    c0016618 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016525:	8d 76 00             	lea    esi,[esi+0x0]
c0016528:	83 ec 04             	sub    esp,0x4
c001652b:	68 00 01 00 00       	push   0x100
c0016530:	6a 00                	push   0x0
c0016532:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016539:	50                   	push   eax
c001653a:	e8 91 9f fe ff       	call   c00004d0 <memset>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	83 ec 08             	sub    esp,0x8
c0016545:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001654c:	50                   	push   eax
c001654d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016554:	50                   	push   eax
c0016555:	e8 66 a2 fe ff       	call   c00007c0 <strcat>
c001655a:	83 c4 10             	add    esp,0x10
c001655d:	83 ec 08             	sub    esp,0x8
c0016560:	68 36 ea 01 c0       	push   0xc001ea36
c0016565:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001656c:	50                   	push   eax
c001656d:	e8 4e a2 fe ff       	call   c00007c0 <strcat>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	83 ec 04             	sub    esp,0x4
c0016578:	6a 01                	push   0x1
c001657a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016581:	50                   	push   eax
c0016582:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016586:	50                   	push   eax
c0016587:	e8 91 d5 fe ff       	call   c0003b1d <f_open>
c001658c:	83 c4 10             	add    esp,0x10
c001658f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016596:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001659d:	85 c0                	test   eax,eax
c001659f:	74 0b                	je     c00165ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00165a1:	78 31                	js     c00165d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00165a3:	83 e8 04             	sub    eax,0x4
c00165a6:	83 f8 01             	cmp    eax,0x1
c00165a9:	77 29                	ja     c00165d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00165ab:	90                   	nop
c00165ac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00165bb:	50                   	push   eax
c00165bc:	e8 0f dd fe ff       	call   c00042d0 <f_close>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	90                   	nop
c00165c5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00165cd:	74 41                	je     c0016610 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00165cf:	eb 33                	jmp    c0016604 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00165d1:	8d 76 00             	lea    esi,[esi+0x0]
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165de:	e8 f6 11 ff ff       	call   c00077d9 <rfree>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	83 ec 04             	sub    esp,0x4
c00165e9:	6a 00                	push   0x0
c00165eb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165f2:	50                   	push   eax
c00165f3:	6a 00                	push   0x0
c00165f5:	e8 c1 d4 fe ff       	call   c0003abb <f_mount>
c00165fa:	83 c4 10             	add    esp,0x10
c00165fd:	b0 00                	mov    al,0x0
c00165ff:	eb 17                	jmp    c0016618 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016601:	8d 76 00             	lea    esi,[esi+0x0]
c0016604:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016609:	40                   	inc    eax
c001660a:	a3 40 38 02 c0       	mov    ds:0xc0023840,eax
c001660f:	90                   	nop
c0016610:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016617:	90                   	nop
c0016618:	81 c4 4c 03 00 00    	add    esp,0x34c
c001661e:	c3                   	ret    
c001661f:	90                   	nop

c0016620 <FAT::allocateSwapfile(char const*, int)>:
c0016620:	55                   	push   ebp
c0016621:	57                   	push   edi
c0016622:	56                   	push   esi
c0016623:	53                   	push   ebx
c0016624:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001662a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016635:	83 ec 0c             	sub    esp,0xc
c0016638:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001663f:	e8 75 11 ff ff       	call   c00077b9 <malloc>
c0016644:	83 c4 10             	add    esp,0x10
c0016647:	89 c7                	mov    edi,eax
c0016649:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c001664e:	83 ec 04             	sub    esp,0x4
c0016651:	50                   	push   eax
c0016652:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016659:	57                   	push   edi
c001665a:	e8 1f 44 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016669:	83 ec 04             	sub    esp,0x4
c001666c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016670:	50                   	push   eax
c0016671:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016675:	50                   	push   eax
c0016676:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001667d:	e8 68 47 ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c0016682:	83 c4 10             	add    esp,0x10
c0016685:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001668c:	c1 e0 14             	shl    eax,0x14
c001668f:	89 c7                	mov    edi,eax
c0016691:	89 c5                	mov    ebp,eax
c0016693:	c1 fd 1f             	sar    ebp,0x1f
c0016696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001669a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001669e:	89 f9                	mov    ecx,edi
c00166a0:	31 c1                	xor    ecx,eax
c00166a2:	89 cb                	mov    ebx,ecx
c00166a4:	89 e9                	mov    ecx,ebp
c00166a6:	31 d1                	xor    ecx,edx
c00166a8:	89 ce                	mov    esi,ecx
c00166aa:	89 f0                	mov    eax,esi
c00166ac:	09 d8                	or     eax,ebx
c00166ae:	0f 84 9c 00 00 00    	je     c0016750 <FAT::allocateSwapfile(char const*, int)+0x130>
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166be:	e8 f3 45 ff ff       	call   c000acb6 <File::unlink()>
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	83 ec 08             	sub    esp,0x8
c00166c9:	6a 12                	push   0x12
c00166cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166d2:	e8 67 44 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c00166d7:	83 c4 10             	add    esp,0x10
c00166da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00166e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00166f5:	c1 e0 14             	shl    eax,0x14
c00166f8:	83 ec 04             	sub    esp,0x4
c00166fb:	6a 01                	push   0x1
c00166fd:	50                   	push   eax
c00166fe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016705:	e8 2b ea fe ff       	call   c0005135 <f_expand>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016714:	8b 00                	mov    eax,DWORD PTR [eax]
c0016716:	83 c0 10             	add    eax,0x10
c0016719:	8b 00                	mov    eax,DWORD PTR [eax]
c001671b:	83 ec 0c             	sub    esp,0xc
c001671e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016722:	52                   	push   edx
c0016723:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016727:	52                   	push   edx
c0016728:	6a 00                	push   0x0
c001672a:	68 00 04 00 00       	push   0x400
c001672f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016736:	ff d0                	call   eax
c0016738:	83 c4 20             	add    esp,0x20
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016745:	e8 52 44 ff ff       	call   c000ab9c <File::close()>
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	8d 76 00             	lea    esi,[esi+0x0]
c0016750:	83 ec 08             	sub    esp,0x8
c0016753:	6a 01                	push   0x1
c0016755:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001675c:	e8 dd 43 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001676b:	8b 00                	mov    eax,DWORD PTR [eax]
c001676d:	83 c0 0c             	add    eax,0xc
c0016770:	8b 00                	mov    eax,DWORD PTR [eax]
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016779:	52                   	push   edx
c001677a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001677e:	52                   	push   edx
c001677f:	6a 00                	push   0x0
c0016781:	6a 04                	push   0x4
c0016783:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001678a:	ff d0                	call   eax
c001678c:	83 c4 20             	add    esp,0x20
c001678f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016796:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001679c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00167a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00167aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167ad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167be:	e8 d9 43 ff ff       	call   c000ab9c <File::close()>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00167cd:	ba 00 00 00 00       	mov    edx,0x0
c00167d2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00167d8:	5b                   	pop    ebx
c00167d9:	5e                   	pop    esi
c00167da:	5f                   	pop    edi
c00167db:	5d                   	pop    ebp
c00167dc:	c3                   	ret    
c00167dd:	90                   	nop
c00167de:	66 90                	xchg   ax,ax

c00167e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00167e0:	57                   	push   edi
c00167e1:	56                   	push   esi
c00167e2:	53                   	push   ebx
c00167e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00167e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00167f1:	74 0d                	je     c0016800 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00167f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00167fb:	75 0f                	jne    c001680c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00167fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016800:	b8 04 00 00 00       	mov    eax,0x4
c0016805:	e9 36 01 00 00       	jmp    c0016940 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001680a:	66 90                	xchg   ax,ax
c001680c:	83 ec 08             	sub    esp,0x8
c001680f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016816:	50                   	push   eax
c0016817:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001681e:	e8 70 dd fe ff       	call   c0004593 <f_readdir>
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001682d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016834:	83 ec 0c             	sub    esp,0xc
c0016837:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001683e:	83 c0 16             	add    eax,0x16
c0016841:	50                   	push   eax
c0016842:	e8 f9 9c fe ff       	call   c0000540 <strlen>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	ba 00 00 00 00       	mov    edx,0x0
c001684f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016853:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016857:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001685e:	25 ff 00 00 00       	and    eax,0xff
c0016863:	83 e0 10             	and    eax,0x10
c0016866:	74 08                	je     c0016870 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016868:	b8 02 00 00 00       	mov    eax,0x2
c001686d:	eb 09                	jmp    c0016878 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001686f:	90                   	nop
c0016870:	b8 01 00 00 00       	mov    eax,0x1
c0016875:	8d 76 00             	lea    esi,[esi+0x0]
c0016878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001687c:	83 ec 08             	sub    esp,0x8
c001687f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016886:	83 c0 16             	add    eax,0x16
c0016889:	50                   	push   eax
c001688a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001688e:	83 c0 10             	add    eax,0x10
c0016891:	50                   	push   eax
c0016892:	e8 69 9d fe ff       	call   c0000600 <strcpy>
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00168a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00168a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00168b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00168ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00168c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00168c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00168cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00168d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00168dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00168e4:	89 c6                	mov    esi,eax
c00168e6:	89 d7                	mov    edi,edx
c00168e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168ea:	89 c8                	mov    eax,ecx
c00168ec:	89 fa                	mov    edx,edi
c00168ee:	89 f3                	mov    ebx,esi
c00168f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00168f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00168fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016905:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001690c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016912:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016919:	84 c0                	test   al,al
c001691b:	75 07                	jne    c0016924 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001691d:	b8 07 00 00 00       	mov    eax,0x7
c0016922:	eb 1c                	jmp    c0016940 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016924:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001692b:	85 c0                	test   eax,eax
c001692d:	75 09                	jne    c0016938 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001692f:	b8 00 00 00 00       	mov    eax,0x0
c0016934:	eb 0a                	jmp    c0016940 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016936:	66 90                	xchg   ax,ax
c0016938:	b8 01 00 00 00       	mov    eax,0x1
c001693d:	8d 76 00             	lea    esi,[esi+0x0]
c0016940:	81 c4 50 02 00 00    	add    esp,0x250
c0016946:	5b                   	pop    ebx
c0016947:	5e                   	pop    esi
c0016948:	5f                   	pop    edi
c0016949:	c3                   	ret    
c001694a:	66 90                	xchg   ax,ax

c001694c <FAT::read(void*, unsigned long, void*, int*)>:
c001694c:	83 ec 1c             	sub    esp,0x1c
c001694f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016954:	74 0a                	je     c0016960 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016956:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001695b:	75 0b                	jne    c0016968 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001695d:	8d 76 00             	lea    esi,[esi+0x0]
c0016960:	b8 04 00 00 00       	mov    eax,0x4
c0016965:	eb 41                	jmp    c00169a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016967:	90                   	nop
c0016968:	8d 44 24 08          	lea    eax,[esp+0x8]
c001696c:	50                   	push   eax
c001696d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016971:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016975:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016979:	e8 6a d4 fe ff       	call   c0003de8 <f_read>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016989:	89 c2                	mov    edx,eax
c001698b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698f:	89 10                	mov    DWORD PTR [eax],edx
c0016991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016995:	85 c0                	test   eax,eax
c0016997:	75 07                	jne    c00169a0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016999:	b8 00 00 00 00       	mov    eax,0x0
c001699e:	eb 08                	jmp    c00169a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00169a0:	b8 01 00 00 00       	mov    eax,0x1
c00169a5:	8d 76 00             	lea    esi,[esi+0x0]
c00169a8:	83 c4 1c             	add    esp,0x1c
c00169ab:	c3                   	ret    

c00169ac <FAT::write(void*, unsigned long, void*, int*)>:
c00169ac:	83 ec 1c             	sub    esp,0x1c
c00169af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169b4:	74 0a                	je     c00169c0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00169b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00169bb:	75 0b                	jne    c00169c8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00169bd:	8d 76 00             	lea    esi,[esi+0x0]
c00169c0:	b8 04 00 00 00       	mov    eax,0x4
c00169c5:	eb 41                	jmp    c0016a08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169c7:	90                   	nop
c00169c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169cc:	50                   	push   eax
c00169cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169d9:	e8 09 d6 fe ff       	call   c0003fe7 <f_write>
c00169de:	83 c4 10             	add    esp,0x10
c00169e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169e9:	89 c2                	mov    edx,eax
c00169eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169ef:	89 10                	mov    DWORD PTR [eax],edx
c00169f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169f5:	85 c0                	test   eax,eax
c00169f7:	75 07                	jne    c0016a00 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00169f9:	b8 00 00 00 00       	mov    eax,0x0
c00169fe:	eb 08                	jmp    c0016a08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016a00:	b8 01 00 00 00       	mov    eax,0x1
c0016a05:	8d 76 00             	lea    esi,[esi+0x0]
c0016a08:	83 c4 1c             	add    esp,0x1c
c0016a0b:	c3                   	ret    

c0016a0c <FAT::close(void*)>:
c0016a0c:	83 ec 1c             	sub    esp,0x1c
c0016a0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a14:	75 0a                	jne    c0016a20 <FAT::close(void*)+0x14>
c0016a16:	b8 04 00 00 00       	mov    eax,0x4
c0016a1b:	eb 3f                	jmp    c0016a5c <FAT::close(void*)+0x50>
c0016a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a27:	e8 a4 d8 fe ff       	call   c00042d0 <f_close>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a33:	83 ec 0c             	sub    esp,0xc
c0016a36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a3a:	e8 8a 0d ff ff       	call   c00077c9 <free>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a46:	85 c0                	test   eax,eax
c0016a48:	75 0a                	jne    c0016a54 <FAT::close(void*)+0x48>
c0016a4a:	b8 00 00 00 00       	mov    eax,0x0
c0016a4f:	eb 0b                	jmp    c0016a5c <FAT::close(void*)+0x50>
c0016a51:	8d 76 00             	lea    esi,[esi+0x0]
c0016a54:	b8 01 00 00 00       	mov    eax,0x1
c0016a59:	8d 76 00             	lea    esi,[esi+0x0]
c0016a5c:	83 c4 1c             	add    esp,0x1c
c0016a5f:	c3                   	ret    

c0016a60 <FAT::closeDir(void*)>:
c0016a60:	83 ec 1c             	sub    esp,0x1c
c0016a63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a68:	75 0a                	jne    c0016a74 <FAT::closeDir(void*)+0x14>
c0016a6a:	b8 04 00 00 00       	mov    eax,0x4
c0016a6f:	eb 3f                	jmp    c0016ab0 <FAT::closeDir(void*)+0x50>
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a7b:	e8 f1 da fe ff       	call   c0004571 <f_closedir>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a87:	83 ec 0c             	sub    esp,0xc
c0016a8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a8e:	e8 36 0d ff ff       	call   c00077c9 <free>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a9a:	85 c0                	test   eax,eax
c0016a9c:	75 0a                	jne    c0016aa8 <FAT::closeDir(void*)+0x48>
c0016a9e:	b8 00 00 00 00       	mov    eax,0x0
c0016aa3:	eb 0b                	jmp    c0016ab0 <FAT::closeDir(void*)+0x50>
c0016aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa8:	b8 01 00 00 00       	mov    eax,0x1
c0016aad:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab0:	83 c4 1c             	add    esp,0x1c
c0016ab3:	c3                   	ret    

c0016ab4 <FAT::seek(void*, unsigned long long)>:
c0016ab4:	83 ec 2c             	sub    esp,0x2c
c0016ab7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016abb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ac3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ac7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016acc:	75 0a                	jne    c0016ad8 <FAT::seek(void*, unsigned long long)+0x24>
c0016ace:	b8 04 00 00 00       	mov    eax,0x4
c0016ad3:	eb 33                	jmp    c0016b08 <FAT::seek(void*, unsigned long long)+0x54>
c0016ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016adc:	83 ec 08             	sub    esp,0x8
c0016adf:	50                   	push   eax
c0016ae0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ae4:	e8 16 d8 fe ff       	call   c00042ff <f_lseek>
c0016ae9:	83 c4 10             	add    esp,0x10
c0016aec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016af0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016af4:	85 c0                	test   eax,eax
c0016af6:	75 08                	jne    c0016b00 <FAT::seek(void*, unsigned long long)+0x4c>
c0016af8:	b8 00 00 00 00       	mov    eax,0x0
c0016afd:	eb 09                	jmp    c0016b08 <FAT::seek(void*, unsigned long long)+0x54>
c0016aff:	90                   	nop
c0016b00:	b8 01 00 00 00       	mov    eax,0x1
c0016b05:	8d 76 00             	lea    esi,[esi+0x0]
c0016b08:	83 c4 2c             	add    esp,0x2c
c0016b0b:	c3                   	ret    

c0016b0c <fatWrapperReadDisk>:
c0016b0c:	53                   	push   ebx
c0016b0d:	83 ec 18             	sub    esp,0x18
c0016b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b1c:	25 ff 00 00 00       	and    eax,0xff
c0016b21:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0016b28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b30:	ba 00 00 00 00       	mov    edx,0x0
c0016b35:	83 ec 0c             	sub    esp,0xc
c0016b38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b3c:	53                   	push   ebx
c0016b3d:	52                   	push   edx
c0016b3e:	50                   	push   eax
c0016b3f:	51                   	push   ecx
c0016b40:	e8 c1 60 ff ff       	call   c000cc06 <LogicalDisk::read(unsigned long long, int, void*)>
c0016b45:	83 c4 20             	add    esp,0x20
c0016b48:	83 c4 18             	add    esp,0x18
c0016b4b:	5b                   	pop    ebx
c0016b4c:	c3                   	ret    
c0016b4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b50 <fatWrapperWriteDisk>:
c0016b50:	53                   	push   ebx
c0016b51:	83 ec 18             	sub    esp,0x18
c0016b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b60:	25 ff 00 00 00       	and    eax,0xff
c0016b65:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0016b6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b74:	ba 00 00 00 00       	mov    edx,0x0
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b80:	53                   	push   ebx
c0016b81:	52                   	push   edx
c0016b82:	50                   	push   eax
c0016b83:	51                   	push   ecx
c0016b84:	e8 e9 60 ff ff       	call   c000cc72 <LogicalDisk::write(unsigned long long, int, void*)>
c0016b89:	83 c4 20             	add    esp,0x20
c0016b8c:	83 c4 18             	add    esp,0x18
c0016b8f:	5b                   	pop    ebx
c0016b90:	c3                   	ret    
c0016b91:	8d 76 00             	lea    esi,[esi+0x0]

c0016b94 <fatWrapperIoctl>:
c0016b94:	53                   	push   ebx
c0016b95:	83 ec 28             	sub    esp,0x28
c0016b98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ba0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016ba4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016ba8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016bad:	75 35                	jne    c0016be4 <fatWrapperIoctl+0x50>
c0016baf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bbb:	25 ff 00 00 00       	and    eax,0xff
c0016bc0:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0016bc7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016bcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bd7:	66 89 02             	mov    WORD PTR [edx],ax
c0016bda:	b8 00 00 00 00       	mov    eax,0x0
c0016bdf:	e9 c4 00 00 00       	jmp    c0016ca8 <fatWrapperIoctl+0x114>
c0016be4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016be9:	75 75                	jne    c0016c60 <fatWrapperIoctl+0xcc>
c0016beb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bf3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bf7:	25 ff 00 00 00       	and    eax,0xff
c0016bfc:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0016c03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016c09:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016c0f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016c15:	89 c8                	mov    eax,ecx
c0016c17:	89 da                	mov    edx,ebx
c0016c19:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c1d:	c1 e0 0a             	shl    eax,0xa
c0016c20:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c24:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016c2a:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c0016c31:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016c37:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016c3d:	89 cb                	mov    ebx,ecx
c0016c3f:	c1 fb 1f             	sar    ebx,0x1f
c0016c42:	53                   	push   ebx
c0016c43:	51                   	push   ecx
c0016c44:	52                   	push   edx
c0016c45:	50                   	push   eax
c0016c46:	e8 45 50 00 00       	call   c001bc90 <__udivdi3>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	89 c2                	mov    edx,eax
c0016c50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c54:	89 10                	mov    DWORD PTR [eax],edx
c0016c56:	b8 00 00 00 00       	mov    eax,0x0
c0016c5b:	eb 4b                	jmp    c0016ca8 <fatWrapperIoctl+0x114>
c0016c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c60:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016c65:	75 09                	jne    c0016c70 <fatWrapperIoctl+0xdc>
c0016c67:	b8 00 00 00 00       	mov    eax,0x0
c0016c6c:	eb 3a                	jmp    c0016ca8 <fatWrapperIoctl+0x114>
c0016c6e:	66 90                	xchg   ax,ax
c0016c70:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016c75:	75 19                	jne    c0016c90 <fatWrapperIoctl+0xfc>
c0016c77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c83:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016c89:	b8 00 00 00 00       	mov    eax,0x0
c0016c8e:	eb 18                	jmp    c0016ca8 <fatWrapperIoctl+0x114>
c0016c90:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c95:	75 09                	jne    c0016ca0 <fatWrapperIoctl+0x10c>
c0016c97:	b8 00 00 00 00       	mov    eax,0x0
c0016c9c:	eb 0a                	jmp    c0016ca8 <fatWrapperIoctl+0x114>
c0016c9e:	66 90                	xchg   ax,ax
c0016ca0:	b8 04 00 00 00       	mov    eax,0x4
c0016ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca8:	83 c4 28             	add    esp,0x28
c0016cab:	5b                   	pop    ebx
c0016cac:	c3                   	ret    
c0016cad:	90                   	nop
c0016cae:	66 90                	xchg   ax,ax

c0016cb0 <FAT::FAT()>:
c0016cb0:	83 ec 1c             	sub    esp,0x1c
c0016cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	50                   	push   eax
c0016cbb:	e8 6a 3b ff ff       	call   c000a82a <Filesystem::Filesystem()>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	ba 4c ea 01 c0       	mov    edx,0xc001ea4c
c0016cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ccc:	89 10                	mov    DWORD PTR [eax],edx
c0016cce:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0016cd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ce0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016ce5:	7f 15                	jg     c0016cfc <FAT::FAT()+0x4c>
c0016ce7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ceb:	c7 04 85 60 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc7a0],0xffffffff
c0016cf6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cfa:	eb e4                	jmp    c0016ce0 <FAT::FAT()+0x30>
c0016cfc:	90                   	nop
c0016cfd:	83 c4 1c             	add    esp,0x1c
c0016d00:	c3                   	ret    
c0016d01:	90                   	nop
c0016d02:	66 90                	xchg   ax,ax

c0016d04 <FAT::fixFilepath(char*)>:
c0016d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d08:	8a 00                	mov    al,BYTE PTR [eax]
c0016d0a:	3c 40                	cmp    al,0x40
c0016d0c:	7e 2e                	jle    c0016d3c <FAT::fixFilepath(char*)+0x38>
c0016d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d12:	8a 00                	mov    al,BYTE PTR [eax]
c0016d14:	83 e8 41             	sub    eax,0x41
c0016d17:	88 c2                	mov    dl,al
c0016d19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d1d:	88 10                	mov    BYTE PTR [eax],dl
c0016d1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d23:	8a 00                	mov    al,BYTE PTR [eax]
c0016d25:	0f be c0             	movsx  eax,al
c0016d28:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016d2f:	83 c0 30             	add    eax,0x30
c0016d32:	88 c2                	mov    dl,al
c0016d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d38:	88 10                	mov    BYTE PTR [eax],dl
c0016d3a:	66 90                	xchg   ax,ax
c0016d3c:	90                   	nop
c0016d3d:	c3                   	ret    
c0016d3e:	66 90                	xchg   ax,ax

c0016d40 <FAT::open(char const*, void**, FileOpenMode)>:
c0016d40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016d46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016d4e:	74 0c                	je     c0016d5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016d50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016d58:	75 0e                	jne    c0016d68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016d5a:	66 90                	xchg   ax,ax
c0016d5c:	b8 04 00 00 00       	mov    eax,0x4
c0016d61:	e9 0a 01 00 00       	jmp    c0016e70 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d66:	66 90                	xchg   ax,ax
c0016d68:	83 ec 08             	sub    esp,0x8
c0016d6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d76:	50                   	push   eax
c0016d77:	e8 84 98 fe ff       	call   c0000600 <strcpy>
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	83 ec 08             	sub    esp,0x8
c0016d82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d86:	50                   	push   eax
c0016d87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d8e:	e8 71 ff ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016da5:	83 e0 01             	and    eax,0x1
c0016da8:	74 0a                	je     c0016db4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016daa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016db2:	66 90                	xchg   ax,ax
c0016db4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dbb:	83 e0 04             	and    eax,0x4
c0016dbe:	74 10                	je     c0016dd0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016dc0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016dc8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016dd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dd7:	83 e0 02             	and    eax,0x2
c0016dda:	74 08                	je     c0016de4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016ddc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016de4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016deb:	83 e0 08             	and    eax,0x8
c0016dee:	74 08                	je     c0016df8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016df0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016df8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dff:	83 e0 10             	and    eax,0x10
c0016e02:	74 08                	je     c0016e0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016e04:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	68 28 02 00 00       	push   0x228
c0016e14:	e8 a0 09 ff ff       	call   c00077b9 <malloc>
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	89 c2                	mov    edx,eax
c0016e1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e25:	89 10                	mov    DWORD PTR [eax],edx
c0016e27:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016e2e:	31 d2                	xor    edx,edx
c0016e30:	88 c2                	mov    dl,al
c0016e32:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e39:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e3b:	83 ec 04             	sub    esp,0x4
c0016e3e:	52                   	push   edx
c0016e3f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016e43:	52                   	push   edx
c0016e44:	50                   	push   eax
c0016e45:	e8 d3 cc fe ff       	call   c0003b1d <f_open>
c0016e4a:	83 c4 10             	add    esp,0x10
c0016e4d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016e54:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016e5c:	74 0a                	je     c0016e68 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016e5e:	b8 01 00 00 00       	mov    eax,0x1
c0016e63:	eb 0b                	jmp    c0016e70 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e65:	8d 76 00             	lea    esi,[esi+0x0]
c0016e68:	b8 00 00 00 00       	mov    eax,0x0
c0016e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e76:	c3                   	ret    
c0016e77:	90                   	nop

c0016e78 <FAT::openDir(char const*, void**)>:
c0016e78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e86:	74 0c                	je     c0016e94 <FAT::openDir(char const*, void**)+0x1c>
c0016e88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e90:	75 0e                	jne    c0016ea0 <FAT::openDir(char const*, void**)+0x28>
c0016e92:	66 90                	xchg   ax,ax
c0016e94:	b8 04 00 00 00       	mov    eax,0x4
c0016e99:	e9 82 00 00 00       	jmp    c0016f20 <FAT::openDir(char const*, void**)+0xa8>
c0016e9e:	66 90                	xchg   ax,ax
c0016ea0:	83 ec 08             	sub    esp,0x8
c0016ea3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016eaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eae:	50                   	push   eax
c0016eaf:	e8 4c 97 fe ff       	call   c0000600 <strcpy>
c0016eb4:	83 c4 10             	add    esp,0x10
c0016eb7:	83 ec 08             	sub    esp,0x8
c0016eba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ebe:	50                   	push   eax
c0016ebf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ec6:	e8 39 fe ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	83 ec 0c             	sub    esp,0xc
c0016ed1:	6a 30                	push   0x30
c0016ed3:	e8 e1 08 ff ff       	call   c00077b9 <malloc>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	89 c2                	mov    edx,eax
c0016edd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ee4:	89 10                	mov    DWORD PTR [eax],edx
c0016ee6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016eed:	8b 00                	mov    eax,DWORD PTR [eax]
c0016eef:	83 ec 08             	sub    esp,0x8
c0016ef2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016ef6:	52                   	push   edx
c0016ef7:	50                   	push   eax
c0016ef8:	e8 a9 d5 fe ff       	call   c00044a6 <f_opendir>
c0016efd:	83 c4 10             	add    esp,0x10
c0016f00:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016f07:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016f0f:	74 07                	je     c0016f18 <FAT::openDir(char const*, void**)+0xa0>
c0016f11:	b8 01 00 00 00       	mov    eax,0x1
c0016f16:	eb 08                	jmp    c0016f20 <FAT::openDir(char const*, void**)+0xa8>
c0016f18:	b8 00 00 00 00       	mov    eax,0x0
c0016f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f26:	c3                   	ret    
c0016f27:	90                   	nop

c0016f28 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016f28:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016f2e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016f36:	75 0c                	jne    c0016f44 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016f38:	b8 04 00 00 00       	mov    eax,0x4
c0016f3d:	e9 d6 00 00 00       	jmp    c0017018 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f42:	66 90                	xchg   ax,ax
c0016f44:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016f4c:	75 0a                	jne    c0016f58 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016f4e:	b8 04 00 00 00       	mov    eax,0x4
c0016f53:	e9 c0 00 00 00       	jmp    c0017018 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f58:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016f60:	75 0a                	jne    c0016f6c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016f62:	b8 04 00 00 00       	mov    eax,0x4
c0016f67:	e9 ac 00 00 00       	jmp    c0017018 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f6c:	83 ec 08             	sub    esp,0x8
c0016f6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f76:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f7d:	50                   	push   eax
c0016f7e:	e8 7d 96 fe ff       	call   c0000600 <strcpy>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	83 ec 08             	sub    esp,0x8
c0016f89:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f90:	50                   	push   eax
c0016f91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f98:	e8 67 fd ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	83 ec 08             	sub    esp,0x8
c0016fa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016fa7:	50                   	push   eax
c0016fa8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016faf:	50                   	push   eax
c0016fb0:	e8 70 d6 fe ff       	call   c0004625 <f_stat>
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016fbf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016fc6:	85 c0                	test   eax,eax
c0016fc8:	74 0a                	je     c0016fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016fca:	83 f8 04             	cmp    eax,0x4
c0016fcd:	74 39                	je     c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016fcf:	eb 3f                	jmp    c0017010 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fd8:	25 ff 00 00 00       	and    eax,0xff
c0016fdd:	83 e0 10             	and    eax,0x10
c0016fe0:	0f 95 c2             	setne  dl
c0016fe3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016fea:	88 10                	mov    BYTE PTR [eax],dl
c0016fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ff0:	ba 00 00 00 00       	mov    edx,0x0
c0016ff5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016ffc:	89 01                	mov    DWORD PTR [ecx],eax
c0016ffe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017001:	b8 00 00 00 00       	mov    eax,0x0
c0017006:	eb 10                	jmp    c0017018 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017008:	b8 02 00 00 00       	mov    eax,0x2
c001700d:	eb 09                	jmp    c0017018 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001700f:	90                   	nop
c0017010:	b8 01 00 00 00       	mov    eax,0x1
c0017015:	8d 76 00             	lea    esi,[esi+0x0]
c0017018:	81 c4 2c 02 00 00    	add    esp,0x22c
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <FAT::unlink(char const*)>:
c0017020:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017026:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001702e:	75 08                	jne    c0017038 <FAT::unlink(char const*)+0x18>
c0017030:	b8 04 00 00 00       	mov    eax,0x4
c0017035:	eb 61                	jmp    c0017098 <FAT::unlink(char const*)+0x78>
c0017037:	90                   	nop
c0017038:	83 ec 08             	sub    esp,0x8
c001703b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017042:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017046:	50                   	push   eax
c0017047:	e8 b4 95 fe ff       	call   c0000600 <strcpy>
c001704c:	83 c4 10             	add    esp,0x10
c001704f:	83 ec 08             	sub    esp,0x8
c0017052:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017056:	50                   	push   eax
c0017057:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001705e:	e8 a1 fc ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	8d 44 24 18          	lea    eax,[esp+0x18]
c001706d:	50                   	push   eax
c001706e:	e8 17 d8 fe ff       	call   c000488a <f_unlink>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001707d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017084:	85 c0                	test   eax,eax
c0017086:	75 08                	jne    c0017090 <FAT::unlink(char const*)+0x70>
c0017088:	b8 00 00 00 00       	mov    eax,0x0
c001708d:	eb 09                	jmp    c0017098 <FAT::unlink(char const*)+0x78>
c001708f:	90                   	nop
c0017090:	b8 01 00 00 00       	mov    eax,0x1
c0017095:	8d 76 00             	lea    esi,[esi+0x0]
c0017098:	81 c4 1c 01 00 00    	add    esp,0x11c
c001709e:	c3                   	ret    
c001709f:	90                   	nop

c00170a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00170a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00170a6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00170ad:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00170b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170bc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00170c4:	75 0a                	jne    c00170d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00170c6:	b8 04 00 00 00       	mov    eax,0x4
c00170cb:	e9 54 01 00 00       	jmp    c0017224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00170d0:	83 ec 08             	sub    esp,0x8
c00170d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170de:	50                   	push   eax
c00170df:	e8 1c 95 fe ff       	call   c0000600 <strcpy>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	83 ec 08             	sub    esp,0x8
c00170ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170ee:	50                   	push   eax
c00170ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170f6:	e8 09 fc ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017106:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001710e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017112:	25 ff 00 00 00       	and    eax,0xff
c0017117:	83 e0 01             	and    eax,0x1
c001711a:	74 08                	je     c0017124 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001711c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017124:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017128:	25 ff 00 00 00       	and    eax,0xff
c001712d:	83 e0 02             	and    eax,0x2
c0017130:	74 0a                	je     c001713c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017132:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001713a:	66 90                	xchg   ax,ax
c001713c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017140:	25 ff 00 00 00       	and    eax,0xff
c0017145:	83 e0 04             	and    eax,0x4
c0017148:	74 0a                	je     c0017154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001714a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017152:	66 90                	xchg   ax,ax
c0017154:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017158:	25 ff 00 00 00       	and    eax,0xff
c001715d:	83 e0 08             	and    eax,0x8
c0017160:	74 0a                	je     c001716c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017162:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001716a:	66 90                	xchg   ax,ax
c001716c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017170:	25 ff 00 00 00       	and    eax,0xff
c0017175:	83 e0 01             	and    eax,0x1
c0017178:	74 0a                	je     c0017184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001717a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017182:	66 90                	xchg   ax,ax
c0017184:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017188:	25 ff 00 00 00       	and    eax,0xff
c001718d:	83 e0 02             	and    eax,0x2
c0017190:	74 0a                	je     c001719c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017192:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001719a:	66 90                	xchg   ax,ax
c001719c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171a0:	25 ff 00 00 00       	and    eax,0xff
c00171a5:	83 e0 04             	and    eax,0x4
c00171a8:	74 0a                	je     c00171b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00171aa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00171b2:	66 90                	xchg   ax,ax
c00171b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171b8:	25 ff 00 00 00       	and    eax,0xff
c00171bd:	83 e0 08             	and    eax,0x8
c00171c0:	74 0a                	je     c00171cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00171c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171d3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00171da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00171e1:	31 d2                	xor    edx,edx
c00171e3:	88 c2                	mov    dl,al
c00171e5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171ec:	25 ff 00 00 00       	and    eax,0xff
c00171f1:	83 ec 04             	sub    esp,0x4
c00171f4:	52                   	push   edx
c00171f5:	50                   	push   eax
c00171f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171fa:	50                   	push   eax
c00171fb:	e8 fd da fe ff       	call   c0004cfd <f_chmod>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001720a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017211:	85 c0                	test   eax,eax
c0017213:	75 07                	jne    c001721c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017215:	b8 00 00 00 00       	mov    eax,0x0
c001721a:	eb 08                	jmp    c0017224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001721c:	b8 01 00 00 00       	mov    eax,0x1
c0017221:	8d 76 00             	lea    esi,[esi+0x0]
c0017224:	81 c4 2c 01 00 00    	add    esp,0x12c
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <FAT::rename(char const*, char const*)>:
c001722c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017232:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001723a:	74 0c                	je     c0017248 <FAT::rename(char const*, char const*)+0x1c>
c001723c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017244:	75 0e                	jne    c0017254 <FAT::rename(char const*, char const*)+0x28>
c0017246:	66 90                	xchg   ax,ax
c0017248:	b8 04 00 00 00       	mov    eax,0x4
c001724d:	e9 9e 00 00 00       	jmp    c00172f0 <FAT::rename(char const*, char const*)+0xc4>
c0017252:	66 90                	xchg   ax,ax
c0017254:	83 ec 08             	sub    esp,0x8
c0017257:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001725e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017265:	50                   	push   eax
c0017266:	e8 95 93 fe ff       	call   c0000600 <strcpy>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	83 ec 08             	sub    esp,0x8
c0017271:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017278:	50                   	push   eax
c0017279:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017280:	e8 7f fa ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	83 ec 08             	sub    esp,0x8
c001728b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017292:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017296:	50                   	push   eax
c0017297:	e8 64 93 fe ff       	call   c0000600 <strcpy>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	83 ec 08             	sub    esp,0x8
c00172a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172a6:	50                   	push   eax
c00172a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00172ae:	e8 51 fa ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	83 ec 08             	sub    esp,0x8
c00172b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172bd:	50                   	push   eax
c00172be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00172c5:	50                   	push   eax
c00172c6:	e8 7c d8 fe ff       	call   c0004b47 <f_rename>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00172d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00172dc:	85 c0                	test   eax,eax
c00172de:	75 08                	jne    c00172e8 <FAT::rename(char const*, char const*)+0xbc>
c00172e0:	b8 00 00 00 00       	mov    eax,0x0
c00172e5:	eb 09                	jmp    c00172f0 <FAT::rename(char const*, char const*)+0xc4>
c00172e7:	90                   	nop
c00172e8:	b8 01 00 00 00       	mov    eax,0x1
c00172ed:	8d 76 00             	lea    esi,[esi+0x0]
c00172f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00172f6:	c3                   	ret    
c00172f7:	90                   	nop

c00172f8 <FAT::mkdir(char const*)>:
c00172f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017306:	75 08                	jne    c0017310 <FAT::mkdir(char const*)+0x18>
c0017308:	b8 04 00 00 00       	mov    eax,0x4
c001730d:	eb 61                	jmp    c0017370 <FAT::mkdir(char const*)+0x78>
c001730f:	90                   	nop
c0017310:	83 ec 08             	sub    esp,0x8
c0017313:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001731a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001731e:	50                   	push   eax
c001731f:	e8 dc 92 fe ff       	call   c0000600 <strcpy>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	83 ec 08             	sub    esp,0x8
c001732a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001732e:	50                   	push   eax
c001732f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017336:	e8 c9 f9 ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	83 ec 0c             	sub    esp,0xc
c0017341:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017345:	50                   	push   eax
c0017346:	e8 61 d6 fe ff       	call   c00049ac <f_mkdir>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017355:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001735c:	85 c0                	test   eax,eax
c001735e:	75 08                	jne    c0017368 <FAT::mkdir(char const*)+0x70>
c0017360:	b8 00 00 00 00       	mov    eax,0x0
c0017365:	eb 09                	jmp    c0017370 <FAT::mkdir(char const*)+0x78>
c0017367:	90                   	nop
c0017368:	b8 01 00 00 00       	mov    eax,0x1
c001736d:	8d 76 00             	lea    esi,[esi+0x0]
c0017370:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017376:	c3                   	ret    
c0017377:	90                   	nop

c0017378 <FAT::exists(char const*)>:
c0017378:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001737e:	83 ec 08             	sub    esp,0x8
c0017381:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017388:	8d 44 24 10          	lea    eax,[esp+0x10]
c001738c:	50                   	push   eax
c001738d:	e8 6e 92 fe ff       	call   c0000600 <strcpy>
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	83 ec 08             	sub    esp,0x8
c0017398:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001739c:	50                   	push   eax
c001739d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173a4:	e8 5b f9 ff ff       	call   c0016d04 <FAT::fixFilepath(char*)>
c00173a9:	83 c4 10             	add    esp,0x10
c00173ac:	83 ec 08             	sub    esp,0x8
c00173af:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00173b6:	50                   	push   eax
c00173b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173bb:	50                   	push   eax
c00173bc:	e8 64 d2 fe ff       	call   c0004625 <f_stat>
c00173c1:	83 c4 10             	add    esp,0x10
c00173c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173d2:	85 c0                	test   eax,eax
c00173d4:	75 06                	jne    c00173dc <FAT::exists(char const*)+0x64>
c00173d6:	b0 01                	mov    al,0x1
c00173d8:	eb 06                	jmp    c00173e0 <FAT::exists(char const*)+0x68>
c00173da:	66 90                	xchg   ax,ax
c00173dc:	b0 00                	mov    al,0x0
c00173de:	66 90                	xchg   ax,ax
c00173e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00173e6:	c3                   	ret    
c00173e7:	90                   	nop

c00173e8 <isoReadDiscSectorHelper>:
c00173e8:	83 ec 2c             	sub    esp,0x2c
c00173eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00173f3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00173f8:	83 e8 41             	sub    eax,0x41
c00173fb:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0017402:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017406:	ba 00 00 00 00       	mov    edx,0x0
c001740b:	83 ec 0c             	sub    esp,0xc
c001740e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017412:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017416:	52                   	push   edx
c0017417:	50                   	push   eax
c0017418:	51                   	push   ecx
c0017419:	e8 e8 57 ff ff       	call   c000cc06 <LogicalDisk::read(unsigned long long, int, void*)>
c001741e:	83 c4 20             	add    esp,0x20
c0017421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017425:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001742a:	74 0c                	je     c0017438 <isoReadDiscSectorHelper+0x50>
c001742c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017430:	c1 e0 0b             	shl    eax,0xb
c0017433:	eb 0b                	jmp    c0017440 <isoReadDiscSectorHelper+0x58>
c0017435:	8d 76 00             	lea    esi,[esi+0x0]
c0017438:	b8 00 00 00 00       	mov    eax,0x0
c001743d:	8d 76 00             	lea    esi,[esi+0x0]
c0017440:	83 c4 2c             	add    esp,0x2c
c0017443:	c3                   	ret    

c0017444 <iso_kprintf>:
c0017444:	83 ec 0c             	sub    esp,0xc
c0017447:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c001744c:	83 ec 08             	sub    esp,0x8
c001744f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017453:	50                   	push   eax
c0017454:	e8 dd 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017459:	83 c4 10             	add    esp,0x10
c001745c:	90                   	nop
c001745d:	83 c4 0c             	add    esp,0xc
c0017460:	c3                   	ret    
c0017461:	8d 76 00             	lea    esi,[esi+0x0]

c0017464 <iso_kprintfd>:
c0017464:	83 ec 0c             	sub    esp,0xc
c0017467:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c001746c:	83 ec 08             	sub    esp,0x8
c001746f:	68 ac ea 01 c0       	push   0xc001eaac
c0017474:	50                   	push   eax
c0017475:	e8 bc 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001747a:	83 c4 10             	add    esp,0x10
c001747d:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0017482:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017486:	83 ec 08             	sub    esp,0x8
c0017489:	52                   	push   edx
c001748a:	50                   	push   eax
c001748b:	e8 60 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	68 2d e9 01 c0       	push   0xc001e92d
c00174a0:	50                   	push   eax
c00174a1:	e8 90 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	90                   	nop
c00174aa:	83 c4 0c             	add    esp,0xc
c00174ad:	c3                   	ret    

c00174ae <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00174ae:	b8 08 00 00 00       	mov    eax,0x8
c00174b3:	c3                   	ret    

c00174b4 <ISO9660::getName()>:
c00174b4:	b8 af ea 01 c0       	mov    eax,0xc001eaaf
c00174b9:	c3                   	ret    

c00174ba <ISO9660::closeDir(void*)>:
c00174ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174be:	8b 00                	mov    eax,DWORD PTR [eax]
c00174c0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00174c3:	90                   	nop

c00174c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00174c4:	b8 01 00 00 00       	mov    eax,0x1
c00174c9:	c3                   	ret    

c00174ca <ISO9660::unlink(char const*)>:
c00174ca:	b8 01 00 00 00       	mov    eax,0x1
c00174cf:	c3                   	ret    

c00174d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00174d0:	b8 03 00 00 00       	mov    eax,0x3
c00174d5:	c3                   	ret    

c00174d6 <ISO9660::rename(char const*, char const*)>:
c00174d6:	b8 01 00 00 00       	mov    eax,0x1
c00174db:	c3                   	ret    

c00174dc <ISO9660::mkdir(char const*)>:
c00174dc:	b8 01 00 00 00       	mov    eax,0x1
c00174e1:	c3                   	ret    

c00174e2 <ISO9660::~ISO9660()>:
c00174e2:	83 ec 0c             	sub    esp,0xc
c00174e5:	ba 00 eb 01 c0       	mov    edx,0xc001eb00
c00174ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ee:	89 10                	mov    DWORD PTR [eax],edx
c00174f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f4:	83 ec 0c             	sub    esp,0xc
c00174f7:	50                   	push   eax
c00174f8:	e8 51 33 ff ff       	call   c000a84e <Filesystem::~Filesystem()>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	90                   	nop
c0017501:	83 c4 0c             	add    esp,0xc
c0017504:	c3                   	ret    
c0017505:	90                   	nop

c0017506 <ISO9660::~ISO9660()>:
c0017506:	83 ec 0c             	sub    esp,0xc
c0017509:	83 ec 0c             	sub    esp,0xc
c001750c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017510:	e8 cd ff ff ff       	call   c00174e2 <ISO9660::~ISO9660()>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	83 ec 08             	sub    esp,0x8
c001751b:	6a 08                	push   0x8
c001751d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017521:	e8 ec 2e ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	83 c4 0c             	add    esp,0xc
c001752c:	c3                   	ret    
c001752d:	90                   	nop

c001752e <ISO9660::exists(char const*)>:
c001752e:	83 ec 18             	sub    esp,0x18
c0017531:	68 ca ea 01 c0       	push   0xc001eaca
c0017536:	e8 48 8c ff ff       	call   c0010183 <KePanic(char const*)>
c001753b:	31 c0                	xor    eax,eax
c001753d:	83 c4 1c             	add    esp,0x1c
c0017540:	c3                   	ret    
c0017541:	90                   	nop

c0017542 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017542:	56                   	push   esi
c0017543:	53                   	push   ebx
c0017544:	50                   	push   eax
c0017545:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017549:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001754d:	85 db                	test   ebx,ebx
c001754f:	0f 84 82 00 00 00    	je     c00175d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017555:	85 f6                	test   esi,esi
c0017557:	74 7e                	je     c00175d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017559:	ba 03 00 00 00       	mov    edx,0x3
c001755e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017563:	75 77                	jne    c00175dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017565:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017568:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c001756e:	74 34                	je     c00175a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017570:	83 ec 0c             	sub    esp,0xc
c0017573:	50                   	push   eax
c0017574:	e8 46 f2 fe ff       	call   c00067bf <init_percd>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	ba 0b 00 00 00       	mov    edx,0xb
c0017581:	40                   	inc    eax
c0017582:	74 58                	je     c00175dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017584:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c001758b:	74 10                	je     c001759d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001758d:	83 ec 0c             	sub    esp,0xc
c0017590:	68 e8 ea 01 c0       	push   0xc001eae8
c0017595:	e8 e9 8b ff ff       	call   c0010183 <KePanic(char const*)>
c001759a:	83 c4 10             	add    esp,0x10
c001759d:	8a 03                	mov    al,BYTE PTR [ebx]
c001759f:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	0f be 05 40 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023940
c00175ae:	83 c3 03             	add    ebx,0x3
c00175b1:	50                   	push   eax
c00175b2:	e8 08 f2 fe ff       	call   c00067bf <init_percd>
c00175b7:	59                   	pop    ecx
c00175b8:	58                   	pop    eax
c00175b9:	6a 00                	push   0x0
c00175bb:	53                   	push   ebx
c00175bc:	e8 3c ed fe ff       	call   c00062fd <iso_open>
c00175c1:	83 c4 10             	add    esp,0x10
c00175c4:	ba 01 00 00 00       	mov    edx,0x1
c00175c9:	83 f8 ff             	cmp    eax,0xffffffff
c00175cc:	74 0e                	je     c00175dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175ce:	83 c0 64             	add    eax,0x64
c00175d1:	31 d2                	xor    edx,edx
c00175d3:	89 06                	mov    DWORD PTR [esi],eax
c00175d5:	eb 05                	jmp    c00175dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175d7:	ba 04 00 00 00       	mov    edx,0x4
c00175dc:	89 d0                	mov    eax,edx
c00175de:	5a                   	pop    edx
c00175df:	5b                   	pop    ebx
c00175e0:	5e                   	pop    esi
c00175e1:	c3                   	ret    

c00175e2 <ISO9660::openDir(char const*, void**)>:
c00175e2:	56                   	push   esi
c00175e3:	53                   	push   ebx
c00175e4:	50                   	push   eax
c00175e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175ed:	85 db                	test   ebx,ebx
c00175ef:	74 76                	je     c0017667 <ISO9660::openDir(char const*, void**)+0x85>
c00175f1:	85 f6                	test   esi,esi
c00175f3:	74 72                	je     c0017667 <ISO9660::openDir(char const*, void**)+0x85>
c00175f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175f8:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c00175fe:	74 34                	je     c0017634 <ISO9660::openDir(char const*, void**)+0x52>
c0017600:	83 ec 0c             	sub    esp,0xc
c0017603:	50                   	push   eax
c0017604:	e8 b6 f1 fe ff       	call   c00067bf <init_percd>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	ba 0b 00 00 00       	mov    edx,0xb
c0017611:	40                   	inc    eax
c0017612:	74 58                	je     c001766c <ISO9660::openDir(char const*, void**)+0x8a>
c0017614:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c001761b:	74 10                	je     c001762d <ISO9660::openDir(char const*, void**)+0x4b>
c001761d:	83 ec 0c             	sub    esp,0xc
c0017620:	68 e8 ea 01 c0       	push   0xc001eae8
c0017625:	e8 59 8b ff ff       	call   c0010183 <KePanic(char const*)>
c001762a:	83 c4 10             	add    esp,0x10
c001762d:	8a 03                	mov    al,BYTE PTR [ebx]
c001762f:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c0017634:	83 ec 0c             	sub    esp,0xc
c0017637:	0f be 05 40 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023940
c001763e:	83 c3 03             	add    ebx,0x3
c0017641:	50                   	push   eax
c0017642:	e8 78 f1 fe ff       	call   c00067bf <init_percd>
c0017647:	59                   	pop    ecx
c0017648:	58                   	pop    eax
c0017649:	6a 01                	push   0x1
c001764b:	53                   	push   ebx
c001764c:	e8 ac ec fe ff       	call   c00062fd <iso_open>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	ba 01 00 00 00       	mov    edx,0x1
c0017659:	83 f8 ff             	cmp    eax,0xffffffff
c001765c:	74 0e                	je     c001766c <ISO9660::openDir(char const*, void**)+0x8a>
c001765e:	83 c0 64             	add    eax,0x64
c0017661:	31 d2                	xor    edx,edx
c0017663:	89 06                	mov    DWORD PTR [esi],eax
c0017665:	eb 05                	jmp    c001766c <ISO9660::openDir(char const*, void**)+0x8a>
c0017667:	ba 04 00 00 00       	mov    edx,0x4
c001766c:	89 d0                	mov    eax,edx
c001766e:	5a                   	pop    edx
c001766f:	5b                   	pop    ebx
c0017670:	5e                   	pop    esi
c0017671:	c3                   	ret    

c0017672 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017672:	53                   	push   ebx
c0017673:	83 ec 08             	sub    esp,0x8
c0017676:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001767a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001767e:	85 c0                	test   eax,eax
c0017680:	74 25                	je     c00176a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017682:	85 db                	test   ebx,ebx
c0017684:	74 21                	je     c00176a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017686:	83 e8 64             	sub    eax,0x64
c0017689:	52                   	push   edx
c001768a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001768e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017692:	50                   	push   eax
c0017693:	e8 0d ed fe ff       	call   c00063a5 <iso_read>
c0017698:	83 c4 10             	add    esp,0x10
c001769b:	89 03                	mov    DWORD PTR [ebx],eax
c001769d:	09 d0                	or     eax,edx
c001769f:	0f 94 c0             	sete   al
c00176a2:	0f b6 c0             	movzx  eax,al
c00176a5:	eb 05                	jmp    c00176ac <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00176a7:	b8 04 00 00 00       	mov    eax,0x4
c00176ac:	83 c4 08             	add    esp,0x8
c00176af:	5b                   	pop    ebx
c00176b0:	c3                   	ret    
c00176b1:	90                   	nop

c00176b2 <ISO9660::seek(void*, unsigned long long)>:
c00176b2:	57                   	push   edi
c00176b3:	56                   	push   esi
c00176b4:	b8 04 00 00 00       	mov    eax,0x4
c00176b9:	51                   	push   ecx
c00176ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176be:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00176c2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00176c6:	85 d2                	test   edx,edx
c00176c8:	74 1c                	je     c00176e6 <ISO9660::seek(void*, unsigned long long)+0x34>
c00176ca:	6a 00                	push   0x0
c00176cc:	83 ea 64             	sub    edx,0x64
c00176cf:	57                   	push   edi
c00176d0:	56                   	push   esi
c00176d1:	52                   	push   edx
c00176d2:	e8 e4 ed fe ff       	call   c00064bb <iso_seek>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	31 f0                	xor    eax,esi
c00176dc:	31 fa                	xor    edx,edi
c00176de:	09 d0                	or     eax,edx
c00176e0:	0f 95 c0             	setne  al
c00176e3:	0f b6 c0             	movzx  eax,al
c00176e6:	5a                   	pop    edx
c00176e7:	5e                   	pop    esi
c00176e8:	5f                   	pop    edi
c00176e9:	c3                   	ret    

c00176ea <ISO9660::tell(void*, unsigned long long*)>:
c00176ea:	53                   	push   ebx
c00176eb:	83 ec 08             	sub    esp,0x8
c00176ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176f6:	85 c0                	test   eax,eax
c00176f8:	74 1c                	je     c0017716 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176fa:	85 db                	test   ebx,ebx
c00176fc:	74 18                	je     c0017716 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176fe:	83 ec 0c             	sub    esp,0xc
c0017701:	83 e8 64             	sub    eax,0x64
c0017704:	50                   	push   eax
c0017705:	e8 35 ee fe ff       	call   c000653f <iso_tell>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	89 03                	mov    DWORD PTR [ebx],eax
c001770f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017712:	31 c0                	xor    eax,eax
c0017714:	eb 05                	jmp    c001771b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017716:	b8 04 00 00 00       	mov    eax,0x4
c001771b:	83 c4 08             	add    esp,0x8
c001771e:	5b                   	pop    ebx
c001771f:	c3                   	ret    

c0017720 <ISO9660::stat(void*, unsigned long long*)>:
c0017720:	53                   	push   ebx
c0017721:	83 ec 08             	sub    esp,0x8
c0017724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017728:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001772c:	85 c0                	test   eax,eax
c001772e:	74 20                	je     c0017750 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017730:	85 db                	test   ebx,ebx
c0017732:	74 1c                	je     c0017750 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017734:	83 ec 0c             	sub    esp,0xc
c0017737:	83 e8 64             	sub    eax,0x64
c001773a:	50                   	push   eax
c001773b:	e8 30 ee fe ff       	call   c0006570 <iso_total>
c0017740:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017747:	89 03                	mov    DWORD PTR [ebx],eax
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	31 c0                	xor    eax,eax
c001774e:	eb 05                	jmp    c0017755 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017750:	b8 04 00 00 00       	mov    eax,0x4
c0017755:	83 c4 08             	add    esp,0x8
c0017758:	5b                   	pop    ebx
c0017759:	c3                   	ret    

c001775a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001775a:	55                   	push   ebp
c001775b:	57                   	push   edi
c001775c:	56                   	push   esi
c001775d:	53                   	push   ebx
c001775e:	83 ec 0c             	sub    esp,0xc
c0017761:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017765:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017769:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001776d:	85 ff                	test   edi,edi
c001776f:	0f 94 c2             	sete   dl
c0017772:	85 f6                	test   esi,esi
c0017774:	0f 94 c0             	sete   al
c0017777:	08 c2                	or     dl,al
c0017779:	0f 85 9e 00 00 00    	jne    c001781d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001777f:	85 db                	test   ebx,ebx
c0017781:	0f 84 96 00 00 00    	je     c001781d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017787:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001778a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017790:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017797:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001779a:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c00177a0:	74 34                	je     c00177d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	50                   	push   eax
c00177a6:	e8 14 f0 fe ff       	call   c00067bf <init_percd>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	ba 0b 00 00 00       	mov    edx,0xb
c00177b3:	40                   	inc    eax
c00177b4:	74 6c                	je     c0017822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00177b6:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c00177bd:	74 10                	je     c00177cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c00177bf:	83 ec 0c             	sub    esp,0xc
c00177c2:	68 e8 ea 01 c0       	push   0xc001eae8
c00177c7:	e8 b7 89 ff ff       	call   c0010183 <KePanic(char const*)>
c00177cc:	83 c4 10             	add    esp,0x10
c00177cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00177d1:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c00177d6:	83 c3 03             	add    ebx,0x3
c00177d9:	52                   	push   edx
c00177da:	52                   	push   edx
c00177db:	6a 00                	push   0x0
c00177dd:	53                   	push   ebx
c00177de:	e8 1a eb fe ff       	call   c00062fd <iso_open>
c00177e3:	83 c4 10             	add    esp,0x10
c00177e6:	89 c5                	mov    ebp,eax
c00177e8:	83 f8 ff             	cmp    eax,0xffffffff
c00177eb:	75 0f                	jne    c00177fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c00177ed:	50                   	push   eax
c00177ee:	50                   	push   eax
c00177ef:	6a 01                	push   0x1
c00177f1:	53                   	push   ebx
c00177f2:	e8 06 eb fe ff       	call   c00062fd <iso_open>
c00177f7:	c6 07 01             	mov    BYTE PTR [edi],0x1
c00177fa:	eb 1a                	jmp    c0017816 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	50                   	push   eax
c0017800:	e8 6b ed fe ff       	call   c0006570 <iso_total>
c0017805:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001780c:	89 06                	mov    DWORD PTR [esi],eax
c001780e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017811:	e8 71 eb fe ff       	call   c0006387 <iso_close>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	31 d2                	xor    edx,edx
c001781b:	eb 05                	jmp    c0017822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c001781d:	ba 04 00 00 00       	mov    edx,0x4
c0017822:	83 c4 0c             	add    esp,0xc
c0017825:	89 d0                	mov    eax,edx
c0017827:	5b                   	pop    ebx
c0017828:	5e                   	pop    esi
c0017829:	5f                   	pop    edi
c001782a:	5d                   	pop    ebp
c001782b:	c3                   	ret    

c001782c <ISO9660::close(void*)>:
c001782c:	83 ec 0c             	sub    esp,0xc
c001782f:	b8 04 00 00 00       	mov    eax,0x4
c0017834:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017838:	85 d2                	test   edx,edx
c001783a:	74 11                	je     c001784d <ISO9660::close(void*)+0x21>
c001783c:	83 ec 0c             	sub    esp,0xc
c001783f:	83 ea 64             	sub    edx,0x64
c0017842:	52                   	push   edx
c0017843:	e8 3f eb fe ff       	call   c0006387 <iso_close>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	31 c0                	xor    eax,eax
c001784d:	83 c4 0c             	add    esp,0xc
c0017850:	c3                   	ret    
c0017851:	90                   	nop

c0017852 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017852:	55                   	push   ebp
c0017853:	57                   	push   edi
c0017854:	56                   	push   esi
c0017855:	53                   	push   ebx
c0017856:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001785c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017863:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001786a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017871:	85 c0                	test   eax,eax
c0017873:	0f 84 96 00 00 00    	je     c001790f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017879:	85 db                	test   ebx,ebx
c001787b:	0f 84 8e 00 00 00    	je     c001790f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	83 e8 64             	sub    eax,0x64
c0017887:	50                   	push   eax
c0017888:	e8 34 ed fe ff       	call   c00065c1 <iso_readdir>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	89 c6                	mov    esi,eax
c0017892:	85 c0                	test   eax,eax
c0017894:	75 18                	jne    c00178ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017896:	52                   	push   edx
c0017897:	68 10 01 00 00       	push   0x110
c001789c:	6a 00                	push   0x0
c001789e:	57                   	push   edi
c001789f:	e8 2c 8c fe ff       	call   c00004d0 <memset>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	b8 01 00 00 00       	mov    eax,0x1
c00178ac:	eb 66                	jmp    c0017914 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00178ae:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00178b4:	8d 68 08             	lea    ebp,[eax+0x8]
c00178b7:	83 ec 0c             	sub    esp,0xc
c00178ba:	55                   	push   ebp
c00178bb:	e8 80 8c fe ff       	call   c0000540 <strlen>
c00178c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00178c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00178d3:	75 0a                	jne    c00178df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c00178d5:	b8 02 00 00 00       	mov    eax,0x2
c00178da:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00178dd:	74 05                	je     c00178e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00178df:	b8 01 00 00 00       	mov    eax,0x1
c00178e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178e8:	50                   	push   eax
c00178e9:	50                   	push   eax
c00178ea:	55                   	push   ebp
c00178eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178ef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00178f3:	50                   	push   eax
c00178f4:	e8 07 8d fe ff       	call   c0000600 <strcpy>
c00178f9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017902:	31 c0                	xor    eax,eax
c0017904:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	eb 05                	jmp    c0017914 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c001790f:	b8 04 00 00 00       	mov    eax,0x4
c0017914:	81 c4 1c 01 00 00    	add    esp,0x11c
c001791a:	5b                   	pop    ebx
c001791b:	5e                   	pop    esi
c001791c:	5f                   	pop    edi
c001791d:	5d                   	pop    ebp
c001791e:	c3                   	ret    

c001791f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001791f:	57                   	push   edi
c0017920:	56                   	push   esi
c0017921:	53                   	push   ebx
c0017922:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017926:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001792a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001792e:	39 35 44 39 02 c0    	cmp    DWORD PTR ds:0xc0023944,esi
c0017934:	75 08                	jne    c001793e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017936:	38 1d ac f4 01 c0    	cmp    BYTE PTR ds:0xc001f4ac,bl
c001793c:	74 4a                	je     c0017988 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	31 d2                	xor    edx,edx
c0017943:	68 60 39 02 c0       	push   0xc0023960
c0017948:	0f be c3             	movsx  eax,bl
c001794b:	6a 01                	push   0x1
c001794d:	52                   	push   edx
c001794e:	56                   	push   esi
c001794f:	ff 34 85 3c 29 02 c0 	push   DWORD PTR [eax*4-0x3ffdd6c4]
c0017956:	e8 ab 52 ff ff       	call   c000cc06 <LogicalDisk::read(unsigned long long, int, void*)>
c001795b:	83 c4 20             	add    esp,0x20
c001795e:	85 c0                	test   eax,eax
c0017960:	75 0e                	jne    c0017970 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017962:	89 35 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,esi
c0017968:	88 1d ac f4 01 c0    	mov    BYTE PTR ds:0xc001f4ac,bl
c001796e:	eb 18                	jmp    c0017988 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017970:	50                   	push   eax
c0017971:	68 00 08 00 00       	push   0x800
c0017976:	6a 00                	push   0x0
c0017978:	57                   	push   edi
c0017979:	e8 52 8b fe ff       	call   c00004d0 <memset>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	b8 01 00 00 00       	mov    eax,0x1
c0017986:	eb 0e                	jmp    c0017996 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017988:	be 60 39 02 c0       	mov    esi,0xc0023960
c001798d:	b9 00 08 00 00       	mov    ecx,0x800
c0017992:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017994:	31 c0                	xor    eax,eax
c0017996:	5b                   	pop    ebx
c0017997:	5e                   	pop    esi
c0017998:	5f                   	pop    edi
c0017999:	c3                   	ret    

c001799a <ISO9660::tryMount(LogicalDisk*, int)>:
c001799a:	53                   	push   ebx
c001799b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00179a1:	c7 05 44 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023944,0xdeadbeef
c00179ab:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00179b2:	8d 58 41             	lea    ebx,[eax+0x41]
c00179b5:	0f be db             	movsx  ebx,bl
c00179b8:	53                   	push   ebx
c00179b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179bd:	50                   	push   eax
c00179be:	6a 10                	push   0x10
c00179c0:	e8 5a ff ff ff       	call   c001791f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	31 d2                	xor    edx,edx
c00179ca:	85 c0                	test   eax,eax
c00179cc:	75 33                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179ce:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00179d3:	75 2c                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179d5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00179da:	75 25                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179dc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00179e1:	75 1e                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179e3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00179e8:	75 17                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179ea:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00179ef:	75 10                	jne    c0017a01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179f1:	83 ec 0c             	sub    esp,0xc
c00179f4:	53                   	push   ebx
c00179f5:	e8 c5 ed fe ff       	call   c00067bf <init_percd>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	40                   	inc    eax
c00179fe:	0f 95 c2             	setne  dl
c0017a01:	88 d0                	mov    al,dl
c0017a03:	81 c4 08 08 00 00    	add    esp,0x808
c0017a09:	5b                   	pop    ebx
c0017a0a:	c3                   	ret    
c0017a0b:	90                   	nop

c0017a0c <ISO9660::ISO9660()>:
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a13:	83 ec 0c             	sub    esp,0xc
c0017a16:	50                   	push   eax
c0017a17:	e8 0e 2e ff ff       	call   c000a82a <Filesystem::Filesystem()>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	ba 00 eb 01 c0       	mov    edx,0xc001eb00
c0017a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a28:	89 10                	mov    DWORD PTR [eax],edx
c0017a2a:	e8 92 ee fe ff       	call   c00068c1 <fs_iso9660_init>
c0017a2f:	90                   	nop
c0017a30:	83 c4 0c             	add    esp,0xc
c0017a33:	c3                   	ret    

c0017a34 <SoundCard::beginPlayback()>:
c0017a34:	c7 44 24 04 60 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb60
c0017a3c:	e9 42 87 ff ff       	jmp    c0010183 <KePanic(char const*)>
c0017a41:	90                   	nop

c0017a42 <SoundCard::stopPlayback()>:
c0017a42:	c7 44 24 04 60 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb60
c0017a4a:	e9 34 87 ff ff       	jmp    c0010183 <KePanic(char const*)>
c0017a4f:	90                   	nop

c0017a50 <SoundCard::SoundCard(char const*)>:
c0017a50:	83 ec 1c             	sub    esp,0x1c
c0017a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a57:	83 ec 08             	sub    esp,0x8
c0017a5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a5e:	50                   	push   eax
c0017a5f:	e8 7c 40 ff ff       	call   c000bae0 <Device::Device(char const*)>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	ba ac eb 01 c0       	mov    edx,0xc001ebac
c0017a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a70:	89 10                	mov    DWORD PTR [eax],edx
c0017a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a76:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a81:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aab:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017ab5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017abd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ac2:	7f 19                	jg     c0017add <SoundCard::SoundCard(char const*)+0x8d>
c0017ac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017acc:	83 c2 54             	add    edx,0x54
c0017acf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ad7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017adb:	eb e0                	jmp    c0017abd <SoundCard::SoundCard(char const*)+0x6d>
c0017add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ae8:	90                   	nop
c0017ae9:	83 c4 1c             	add    esp,0x1c
c0017aec:	c3                   	ret    
c0017aed:	90                   	nop

c0017aee <SoundCard::~SoundCard()>:
c0017aee:	83 ec 0c             	sub    esp,0xc
c0017af1:	ba ac eb 01 c0       	mov    edx,0xc001ebac
c0017af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afa:	89 10                	mov    DWORD PTR [eax],edx
c0017afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b00:	83 ec 0c             	sub    esp,0xc
c0017b03:	50                   	push   eax
c0017b04:	e8 41 3d ff ff       	call   c000b84a <Device::~Device()>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	90                   	nop
c0017b0d:	83 c4 0c             	add    esp,0xc
c0017b10:	c3                   	ret    
c0017b11:	90                   	nop

c0017b12 <SoundCard::~SoundCard()>:
c0017b12:	83 ec 0c             	sub    esp,0xc
c0017b15:	83 ec 0c             	sub    esp,0xc
c0017b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b1c:	e8 cd ff ff ff       	call   c0017aee <SoundCard::~SoundCard()>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	83 ec 08             	sub    esp,0x8
c0017b27:	68 e8 01 00 00       	push   0x1e8
c0017b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b30:	e8 dd 28 ff ff       	call   c000a412 <operator delete(void*, unsigned long)>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	83 c4 0c             	add    esp,0xc
c0017b3b:	c3                   	ret    

c0017b3c <SoundCard::configureRates(int, int, int)>:
c0017b3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017b40:	31 c0                	xor    eax,eax
c0017b42:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017b49:	75 20                	jne    c0017b6b <SoundCard::configureRates(int, int, int)+0x2f>
c0017b4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b4f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017b55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b59:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b63:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017b69:	b0 01                	mov    al,0x1
c0017b6b:	c3                   	ret    

c0017b6c <SoundCard::getSamples16(int, short*)>:
c0017b6c:	55                   	push   ebp
c0017b6d:	57                   	push   edi
c0017b6e:	31 ff                	xor    edi,edi
c0017b70:	56                   	push   esi
c0017b71:	53                   	push   ebx
c0017b72:	31 db                	xor    ebx,ebx
c0017b74:	83 ec 10             	sub    esp,0x10
c0017b77:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b7b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b7f:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b82:	50                   	push   eax
c0017b83:	6a 00                	push   0x0
c0017b85:	55                   	push   ebp
c0017b86:	e8 45 89 fe ff       	call   c00004d0 <memset>
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b92:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b99:	85 c0                	test   eax,eax
c0017b9b:	74 1b                	je     c0017bb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b9d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017ba1:	75 15                	jne    c0017bb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017ba3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba7:	55                   	push   ebp
c0017ba8:	56                   	push   esi
c0017ba9:	50                   	push   eax
c0017baa:	e8 ed 02 00 00       	call   c0017e9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	39 c7                	cmp    edi,eax
c0017bb4:	7d 02                	jge    c0017bb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017bb6:	89 c7                	mov    edi,eax
c0017bb8:	43                   	inc    ebx
c0017bb9:	83 fb 20             	cmp    ebx,0x20
c0017bbc:	75 d0                	jne    c0017b8e <SoundCard::getSamples16(int, short*)+0x22>
c0017bbe:	83 c4 0c             	add    esp,0xc
c0017bc1:	89 f8                	mov    eax,edi
c0017bc3:	5b                   	pop    ebx
c0017bc4:	5e                   	pop    esi
c0017bc5:	5f                   	pop    edi
c0017bc6:	5d                   	pop    ebp
c0017bc7:	c3                   	ret    

c0017bc8 <SoundCard::getSamples32(int, int*)>:
c0017bc8:	55                   	push   ebp
c0017bc9:	57                   	push   edi
c0017bca:	31 ff                	xor    edi,edi
c0017bcc:	56                   	push   esi
c0017bcd:	31 f6                	xor    esi,esi
c0017bcf:	53                   	push   ebx
c0017bd0:	83 ec 10             	sub    esp,0x10
c0017bd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bdb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017bdf:	c1 e0 02             	shl    eax,0x2
c0017be2:	50                   	push   eax
c0017be3:	6a 00                	push   0x0
c0017be5:	55                   	push   ebp
c0017be6:	e8 e5 88 fe ff       	call   c00004d0 <memset>
c0017beb:	83 c4 10             	add    esp,0x10
c0017bee:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017bf5:	85 c0                	test   eax,eax
c0017bf7:	74 1b                	je     c0017c14 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bf9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017bfd:	75 15                	jne    c0017c14 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bff:	53                   	push   ebx
c0017c00:	55                   	push   ebp
c0017c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c05:	50                   	push   eax
c0017c06:	e8 55 03 00 00       	call   c0017f60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	39 c6                	cmp    esi,eax
c0017c10:	7d 02                	jge    c0017c14 <SoundCard::getSamples32(int, int*)+0x4c>
c0017c12:	89 c6                	mov    esi,eax
c0017c14:	47                   	inc    edi
c0017c15:	83 ff 20             	cmp    edi,0x20
c0017c18:	75 d4                	jne    c0017bee <SoundCard::getSamples32(int, int*)+0x26>
c0017c1a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017c20:	85 f6                	test   esi,esi
c0017c22:	75 0f                	jne    c0017c33 <SoundCard::getSamples32(int, int*)+0x6b>
c0017c24:	84 c0                	test   al,al
c0017c26:	74 1b                	je     c0017c43 <SoundCard::getSamples32(int, int*)+0x7b>
c0017c28:	83 ec 0c             	sub    esp,0xc
c0017c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c2d:	53                   	push   ebx
c0017c2e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017c31:	eb 0d                	jmp    c0017c40 <SoundCard::getSamples32(int, int*)+0x78>
c0017c33:	84 c0                	test   al,al
c0017c35:	75 0c                	jne    c0017c43 <SoundCard::getSamples32(int, int*)+0x7b>
c0017c37:	83 ec 0c             	sub    esp,0xc
c0017c3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c3c:	53                   	push   ebx
c0017c3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017c40:	83 c4 10             	add    esp,0x10
c0017c43:	83 c4 0c             	add    esp,0xc
c0017c46:	89 f0                	mov    eax,esi
c0017c48:	5b                   	pop    ebx
c0017c49:	5e                   	pop    esi
c0017c4a:	5f                   	pop    edi
c0017c4b:	5d                   	pop    ebp
c0017c4c:	c3                   	ret    
c0017c4d:	90                   	nop

c0017c4e <SoundCard::addChannel(SoundPort*)>:
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	31 c0                	xor    eax,eax
c0017c53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c57:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017c5f:	74 1b                	je     c0017c7c <SoundCard::addChannel(SoundPort*)+0x2e>
c0017c61:	40                   	inc    eax
c0017c62:	83 f8 20             	cmp    eax,0x20
c0017c65:	75 f0                	jne    c0017c57 <SoundCard::addChannel(SoundPort*)+0x9>
c0017c67:	83 ec 0c             	sub    esp,0xc
c0017c6a:	68 85 eb 01 c0       	push   0xc001eb85
c0017c6f:	e8 0f 85 ff ff       	call   c0010183 <KePanic(char const*)>
c0017c74:	83 c4 10             	add    esp,0x10
c0017c77:	83 c8 ff             	or     eax,0xffffffff
c0017c7a:	eb 0b                	jmp    c0017c87 <SoundCard::addChannel(SoundPort*)+0x39>
c0017c7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c80:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c87:	83 c4 0c             	add    esp,0xc
c0017c8a:	c3                   	ret    
c0017c8b:	90                   	nop

c0017c8c <SoundCard::removeChannel(int)>:
c0017c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c94:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c9f:	c3                   	ret    

c0017ca0 <SoundPort::SoundPort(int, int, int, int)>:
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cbe:	89 10                	mov    DWORD PTR [eax],edx
c0017cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ccf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cd3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017cd6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017cdb:	75 13                	jne    c0017cf0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce3:	05 a0 0f 00 00       	add    eax,0xfa0
c0017ce8:	01 c0                	add    eax,eax
c0017cea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017cee:	66 90                	xchg   ax,ax
c0017cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cf8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cff:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d0a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d0d:	c1 e0 02             	shl    eax,0x2
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	50                   	push   eax
c0017d14:	e8 a0 fa fe ff       	call   c00077b9 <malloc>
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	89 c2                	mov    edx,eax
c0017d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d25:	90                   	nop
c0017d26:	83 c4 0c             	add    esp,0xc
c0017d29:	c3                   	ret    
c0017d2a:	66 90                	xchg   ax,ax

c0017d2c <SoundPort::~SoundPort()>:
c0017d2c:	83 ec 0c             	sub    esp,0xc
c0017d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d36:	85 c0                	test   eax,eax
c0017d38:	74 1e                	je     c0017d58 <SoundPort::~SoundPort()+0x2c>
c0017d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	50                   	push   eax
c0017d45:	e8 7f fa fe ff       	call   c00077c9 <free>
c0017d4a:	83 c4 10             	add    esp,0x10
c0017d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d51:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d58:	90                   	nop
c0017d59:	83 c4 0c             	add    esp,0xc
c0017d5c:	c3                   	ret    
c0017d5d:	90                   	nop
c0017d5e:	66 90                	xchg   ax,ax

c0017d60 <SoundPort::unpause()>:
c0017d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d64:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017d68:	c3                   	ret    
c0017d69:	90                   	nop
c0017d6a:	66 90                	xchg   ax,ax

c0017d6c <SoundPort::pause()>:
c0017d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d70:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017d74:	c3                   	ret    
c0017d75:	90                   	nop
c0017d76:	66 90                	xchg   ax,ax

c0017d78 <SoundPort::getBufferUsed()>:
c0017d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d7f:	c3                   	ret    

c0017d80 <SoundPort::getBufferSize()>:
c0017d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d87:	c3                   	ret    

c0017d88 <SoundPort::buffer16(short*, int)>:
c0017d88:	55                   	push   ebp
c0017d89:	57                   	push   edi
c0017d8a:	56                   	push   esi
c0017d8b:	53                   	push   ebx
c0017d8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d90:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d94:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d97:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d9a:	74 68                	je     c0017e04 <SoundPort::buffer16(short*, int)+0x7c>
c0017d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017da0:	85 c9                	test   ecx,ecx
c0017da2:	7e 60                	jle    c0017e04 <SoundPort::buffer16(short*, int)+0x7c>
c0017da4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017da8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017dab:	c1 e1 0f             	shl    ecx,0xf
c0017dae:	8d 70 01             	lea    esi,[eax+0x1]
c0017db1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017db4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017db7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dba:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dbd:	74 4d                	je     c0017e0c <SoundPort::buffer16(short*, int)+0x84>
c0017dbf:	31 f6                	xor    esi,esi
c0017dc1:	eb 21                	jmp    c0017de4 <SoundPort::buffer16(short*, int)+0x5c>
c0017dc3:	90                   	nop
c0017dc4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017dc9:	8d 79 01             	lea    edi,[ecx+0x1]
c0017dcc:	c1 e3 0f             	shl    ebx,0xf
c0017dcf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017dd2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017dd5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017dd8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017ddb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dde:	74 1c                	je     c0017dfc <SoundPort::buffer16(short*, int)+0x74>
c0017de0:	89 c6                	mov    esi,eax
c0017de2:	66 90                	xchg   ax,ax
c0017de4:	8d 46 01             	lea    eax,[esi+0x1]
c0017de7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017deb:	75 d7                	jne    c0017dc4 <SoundPort::buffer16(short*, int)+0x3c>
c0017ded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017df1:	8d 76 00             	lea    esi,[esi+0x0]
c0017df4:	5b                   	pop    ebx
c0017df5:	5e                   	pop    esi
c0017df6:	5f                   	pop    edi
c0017df7:	5d                   	pop    ebp
c0017df8:	c3                   	ret    
c0017df9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dfc:	5b                   	pop    ebx
c0017dfd:	8d 46 02             	lea    eax,[esi+0x2]
c0017e00:	5e                   	pop    esi
c0017e01:	5f                   	pop    edi
c0017e02:	5d                   	pop    ebp
c0017e03:	c3                   	ret    
c0017e04:	5b                   	pop    ebx
c0017e05:	31 c0                	xor    eax,eax
c0017e07:	5e                   	pop    esi
c0017e08:	5f                   	pop    edi
c0017e09:	5d                   	pop    ebp
c0017e0a:	c3                   	ret    
c0017e0b:	90                   	nop
c0017e0c:	b8 01 00 00 00       	mov    eax,0x1
c0017e11:	eb e1                	jmp    c0017df4 <SoundPort::buffer16(short*, int)+0x6c>
c0017e13:	90                   	nop

c0017e14 <SoundPort::buffer32(int*, int)>:
c0017e14:	55                   	push   ebp
c0017e15:	57                   	push   edi
c0017e16:	56                   	push   esi
c0017e17:	53                   	push   ebx
c0017e18:	51                   	push   ecx
c0017e19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e21:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e28:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e2b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e2e:	74 5c                	je     c0017e8c <SoundPort::buffer32(int*, int)+0x78>
c0017e30:	85 c0                	test   eax,eax
c0017e32:	7e 58                	jle    c0017e8c <SoundPort::buffer32(int*, int)+0x78>
c0017e34:	8d 71 01             	lea    esi,[ecx+0x1]
c0017e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017e3a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017e3d:	8b 37                	mov    esi,DWORD PTR [edi]
c0017e3f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017e42:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e45:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e48:	74 4a                	je     c0017e94 <SoundPort::buffer32(int*, int)+0x80>
c0017e4a:	31 f6                	xor    esi,esi
c0017e4c:	eb 1e                	jmp    c0017e6c <SoundPort::buffer32(int*, int)+0x58>
c0017e4e:	66 90                	xchg   ax,ax
c0017e50:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017e53:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017e56:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017e59:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e5c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017e60:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e63:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e66:	74 18                	je     c0017e80 <SoundPort::buffer32(int*, int)+0x6c>
c0017e68:	89 de                	mov    esi,ebx
c0017e6a:	66 90                	xchg   ax,ax
c0017e6c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017e6f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017e72:	75 dc                	jne    c0017e50 <SoundPort::buffer32(int*, int)+0x3c>
c0017e74:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e77:	90                   	nop
c0017e78:	5a                   	pop    edx
c0017e79:	5b                   	pop    ebx
c0017e7a:	5e                   	pop    esi
c0017e7b:	5f                   	pop    edi
c0017e7c:	5d                   	pop    ebp
c0017e7d:	c3                   	ret    
c0017e7e:	66 90                	xchg   ax,ax
c0017e80:	5a                   	pop    edx
c0017e81:	8d 46 02             	lea    eax,[esi+0x2]
c0017e84:	5b                   	pop    ebx
c0017e85:	5e                   	pop    esi
c0017e86:	5f                   	pop    edi
c0017e87:	5d                   	pop    ebp
c0017e88:	c3                   	ret    
c0017e89:	8d 76 00             	lea    esi,[esi+0x0]
c0017e8c:	5a                   	pop    edx
c0017e8d:	31 c0                	xor    eax,eax
c0017e8f:	5b                   	pop    ebx
c0017e90:	5e                   	pop    esi
c0017e91:	5f                   	pop    edi
c0017e92:	5d                   	pop    ebp
c0017e93:	c3                   	ret    
c0017e94:	b8 01 00 00 00       	mov    eax,0x1
c0017e99:	eb dd                	jmp    c0017e78 <SoundPort::buffer32(int*, int)+0x64>
c0017e9b:	90                   	nop

c0017e9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e9c:	57                   	push   edi
c0017e9d:	56                   	push   esi
c0017e9e:	53                   	push   ebx
c0017e9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ea3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017ea7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017ead:	39 03                	cmp    DWORD PTR [ebx],eax
c0017eaf:	74 13                	je     c0017ec4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017eb1:	83 ec 0c             	sub    esp,0xc
c0017eb4:	68 d8 eb 01 c0       	push   0xc001ebd8
c0017eb9:	e8 c5 82 ff ff       	call   c0010183 <KePanic(char const*)>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017eca:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017ecd:	74 11                	je     c0017ee0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017ecf:	83 ec 0c             	sub    esp,0xc
c0017ed2:	68 17 ec 01 c0       	push   0xc001ec17
c0017ed7:	e8 a7 82 ff ff       	call   c0010183 <KePanic(char const*)>
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	90                   	nop
c0017ee0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017ee6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017ee9:	74 11                	je     c0017efc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017eeb:	83 ec 0c             	sub    esp,0xc
c0017eee:	68 17 ec 01 c0       	push   0xc001ec17
c0017ef3:	e8 8b 82 ff ff       	call   c0010183 <KePanic(char const*)>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	90                   	nop
c0017efc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017eff:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017f03:	7e 07                	jle    c0017f0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017f05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f09:	8d 76 00             	lea    esi,[esi+0x0]
c0017f0c:	85 f6                	test   esi,esi
c0017f0e:	7e 2c                	jle    c0017f3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f14:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017f17:	31 c9                	xor    ecx,ecx
c0017f19:	01 d7                	add    edi,edx
c0017f1b:	90                   	nop
c0017f1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017f1f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017f22:	85 c0                	test   eax,eax
c0017f24:	79 06                	jns    c0017f2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017f26:	05 ff 7f 00 00       	add    eax,0x7fff
c0017f2b:	90                   	nop
c0017f2c:	c1 f8 0f             	sar    eax,0xf
c0017f2f:	83 c1 04             	add    ecx,0x4
c0017f32:	66 01 02             	add    WORD PTR [edx],ax
c0017f35:	83 c2 02             	add    edx,0x2
c0017f38:	39 d7                	cmp    edi,edx
c0017f3a:	75 e0                	jne    c0017f1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017f3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017f3f:	50                   	push   eax
c0017f40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f43:	29 f0                	sub    eax,esi
c0017f45:	c1 e0 02             	shl    eax,0x2
c0017f48:	50                   	push   eax
c0017f49:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017f4c:	50                   	push   eax
c0017f4d:	52                   	push   edx
c0017f4e:	e8 8d 84 fe ff       	call   c00003e0 <memmove>
c0017f53:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	89 f0                	mov    eax,esi
c0017f5b:	5b                   	pop    ebx
c0017f5c:	5e                   	pop    esi
c0017f5d:	5f                   	pop    edi
c0017f5e:	c3                   	ret    
c0017f5f:	90                   	nop

c0017f60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017f60:	57                   	push   edi
c0017f61:	56                   	push   esi
c0017f62:	53                   	push   ebx
c0017f63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f6f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017f75:	39 06                	cmp    DWORD PTR [esi],eax
c0017f77:	74 13                	je     c0017f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	68 f8 eb 01 c0       	push   0xc001ebf8
c0017f81:	e8 fd 81 ff ff       	call   c0010183 <KePanic(char const*)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	8d 76 00             	lea    esi,[esi+0x0]
c0017f8c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f92:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f95:	74 11                	je     c0017fa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f97:	83 ec 0c             	sub    esp,0xc
c0017f9a:	68 33 ec 01 c0       	push   0xc001ec33
c0017f9f:	e8 df 81 ff ff       	call   c0010183 <KePanic(char const*)>
c0017fa4:	83 c4 10             	add    esp,0x10
c0017fa7:	90                   	nop
c0017fa8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017fae:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017fb1:	74 11                	je     c0017fc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017fb3:	83 ec 0c             	sub    esp,0xc
c0017fb6:	68 33 ec 01 c0       	push   0xc001ec33
c0017fbb:	e8 c3 81 ff ff       	call   c0010183 <KePanic(char const*)>
c0017fc0:	83 c4 10             	add    esp,0x10
c0017fc3:	90                   	nop
c0017fc4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017fc7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017fcb:	7e 07                	jle    c0017fd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017fcd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd4:	85 ff                	test   edi,edi
c0017fd6:	7e 1c                	jle    c0017ff4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017fd8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017fdf:	31 c0                	xor    eax,eax
c0017fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017fe7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017fea:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017fed:	83 c0 04             	add    eax,0x4
c0017ff0:	39 c1                	cmp    ecx,eax
c0017ff2:	75 f0                	jne    c0017fe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017ff4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017ff7:	50                   	push   eax
c0017ff8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ffb:	29 f8                	sub    eax,edi
c0017ffd:	c1 e0 02             	shl    eax,0x2
c0018000:	50                   	push   eax
c0018001:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018004:	50                   	push   eax
c0018005:	52                   	push   edx
c0018006:	e8 d5 83 fe ff       	call   c00003e0 <memmove>
c001800b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001800e:	83 c4 10             	add    esp,0x10
c0018011:	89 f8                	mov    eax,edi
c0018013:	5b                   	pop    ebx
c0018014:	5e                   	pop    esi
c0018015:	5f                   	pop    edi
c0018016:	c3                   	ret    
c0018017:	90                   	nop

c0018018 <PCI::open(int, int, void*)>:
c0018018:	83 ec 18             	sub    esp,0x18
c001801b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001801f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018023:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018029:	8b 10                	mov    edx,DWORD PTR [eax]
c001802b:	50                   	push   eax
c001802c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001802f:	31 c0                	xor    eax,eax
c0018031:	83 c4 1c             	add    esp,0x1c
c0018034:	c3                   	ret    
c0018035:	90                   	nop

c0018036 <PCI::close(int, int, void*)>:
c0018036:	31 c0                	xor    eax,eax
c0018038:	c3                   	ret    
c0018039:	90                   	nop

c001803a <PCI::PCI()>:
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018041:	83 ec 08             	sub    esp,0x8
c0018044:	68 4f ec 01 c0       	push   0xc001ec4f
c0018049:	50                   	push   eax
c001804a:	e8 4d 32 ff ff       	call   c000b29c <Bus::Bus(char const*)>
c001804f:	83 c4 10             	add    esp,0x10
c0018052:	ba f8 ec 01 c0       	mov    edx,0xc001ecf8
c0018057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805b:	89 10                	mov    DWORD PTR [eax],edx
c001805d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018061:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001806b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001806f:	a3 60 41 02 c0       	mov    ds:0xc0024160,eax
c0018074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018078:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001807e:	31 d2                	xor    edx,edx
c0018080:	88 c2                	mov    dl,al
c0018082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018086:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001808d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018091:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018097:	31 d2                	xor    edx,edx
c0018099:	88 c2                	mov    dl,al
c001809b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00180a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00180ae:	8d 50 01             	lea    edx,[eax+0x1]
c00180b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00180bb:	31 d2                	xor    edx,edx
c00180bd:	88 c2                	mov    dl,al
c00180bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00180c7:	83 c9 c0             	or     ecx,0xffffffc0
c00180ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00180ce:	90                   	nop
c00180cf:	83 c4 0c             	add    esp,0xc
c00180d2:	c3                   	ret    
c00180d3:	90                   	nop

c00180d4 <PCI::readBAR8(unsigned int, int)>:
c00180d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180dc:	f6 c2 01             	test   dl,0x1
c00180df:	74 07                	je     c00180e8 <PCI::readBAR8(unsigned int, int)+0x14>
c00180e1:	83 e2 fc             	and    edx,0xfffffffc
c00180e4:	01 c2                	add    edx,eax
c00180e6:	ec                   	in     al,dx
c00180e7:	c3                   	ret    
c00180e8:	83 e2 f0             	and    edx,0xfffffff0
c00180eb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00180ee:	c3                   	ret    
c00180ef:	90                   	nop

c00180f0 <PCI::readBAR16(unsigned int, int)>:
c00180f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f8:	f6 c2 01             	test   dl,0x1
c00180fb:	74 08                	je     c0018105 <PCI::readBAR16(unsigned int, int)+0x15>
c00180fd:	83 e2 fc             	and    edx,0xfffffffc
c0018100:	01 c2                	add    edx,eax
c0018102:	66 ed                	in     ax,dx
c0018104:	c3                   	ret    
c0018105:	83 e2 f0             	and    edx,0xfffffff0
c0018108:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001810c:	c3                   	ret    
c001810d:	90                   	nop

c001810e <PCI::readBAR32(unsigned int, int)>:
c001810e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018116:	f6 c2 01             	test   dl,0x1
c0018119:	74 07                	je     c0018122 <PCI::readBAR32(unsigned int, int)+0x14>
c001811b:	83 e2 fc             	and    edx,0xfffffffc
c001811e:	01 c2                	add    edx,eax
c0018120:	ed                   	in     eax,dx
c0018121:	c3                   	ret    
c0018122:	83 e2 f0             	and    edx,0xfffffff0
c0018125:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018128:	c3                   	ret    
c0018129:	90                   	nop

c001812a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001812a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001812e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018132:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018136:	f6 c2 01             	test   dl,0x1
c0018139:	74 07                	je     c0018142 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001813b:	83 e2 fc             	and    edx,0xfffffffc
c001813e:	01 ca                	add    edx,ecx
c0018140:	ee                   	out    dx,al
c0018141:	c3                   	ret    
c0018142:	83 e2 f0             	and    edx,0xfffffff0
c0018145:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018148:	c3                   	ret    
c0018149:	90                   	nop

c001814a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001814a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001814e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018156:	f6 c2 01             	test   dl,0x1
c0018159:	74 08                	je     c0018163 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001815b:	83 e2 fc             	and    edx,0xfffffffc
c001815e:	01 ca                	add    edx,ecx
c0018160:	66 ef                	out    dx,ax
c0018162:	c3                   	ret    
c0018163:	83 e2 f0             	and    edx,0xfffffff0
c0018166:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001816a:	c3                   	ret    
c001816b:	90                   	nop

c001816c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001816c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018178:	f6 c2 01             	test   dl,0x1
c001817b:	74 07                	je     c0018184 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001817d:	83 e2 fc             	and    edx,0xfffffffc
c0018180:	01 ca                	add    edx,ecx
c0018182:	ef                   	out    dx,eax
c0018183:	c3                   	ret    
c0018184:	83 e2 f0             	and    edx,0xfffffff0
c0018187:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001818a:	c3                   	ret    
c001818b:	90                   	nop

c001818c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001818c:	55                   	push   ebp
c001818d:	57                   	push   edi
c001818e:	56                   	push   esi
c001818f:	53                   	push   ebx
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018197:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001819b:	89 f0                	mov    eax,esi
c001819d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00181a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00181a5:	3c 07                	cmp    al,0x7
c00181a7:	76 10                	jbe    c00181b9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00181a9:	83 ec 0c             	sub    esp,0xc
c00181ac:	68 57 ec 01 c0       	push   0xc001ec57
c00181b1:	e8 cd 7f ff ff       	call   c0010183 <KePanic(char const*)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	80 fb 0f             	cmp    bl,0xf
c00181bc:	76 10                	jbe    c00181ce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00181be:	83 ec 0c             	sub    esp,0xc
c00181c1:	68 87 ec 01 c0       	push   0xc001ec87
c00181c6:	e8 b8 7f ff ff       	call   c0010183 <KePanic(char const*)>
c00181cb:	83 c4 10             	add    esp,0x10
c00181ce:	8d 04 36             	lea    eax,[esi+esi*1]
c00181d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181d6:	83 c8 f0             	or     eax,0xfffffff0
c00181d9:	ee                   	out    dx,al
c00181da:	ba fa 0c 00 00       	mov    edx,0xcfa
c00181df:	89 e8                	mov    eax,ebp
c00181e1:	ee                   	out    dx,al
c00181e2:	83 c4 0c             	add    esp,0xc
c00181e5:	89 d8                	mov    eax,ebx
c00181e7:	66 81 e7 fc 00       	and    di,0xfc
c00181ec:	5b                   	pop    ebx
c00181ed:	c1 e0 08             	shl    eax,0x8
c00181f0:	5e                   	pop    esi
c00181f1:	09 f8                	or     eax,edi
c00181f3:	5f                   	pop    edi
c00181f4:	66 0d 00 c0          	or     ax,0xc000
c00181f8:	5d                   	pop    ebp
c00181f9:	c3                   	ret    

c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00181fa:	57                   	push   edi
c00181fb:	56                   	push   esi
c00181fc:	53                   	push   ebx
c00181fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018201:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018205:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001820b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001820f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018213:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018217:	83 ff 01             	cmp    edi,0x1
c001821a:	75 3e                	jne    c001825a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001821c:	89 de                	mov    esi,ebx
c001821e:	0f b6 c0             	movzx  eax,al
c0018221:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018227:	c1 e0 10             	shl    eax,0x10
c001822a:	0f b6 c9             	movzx  ecx,cl
c001822d:	09 f0                	or     eax,esi
c001822f:	c1 e1 08             	shl    ecx,0x8
c0018232:	0f b6 d2             	movzx  edx,dl
c0018235:	09 c8                	or     eax,ecx
c0018237:	c1 e2 0b             	shl    edx,0xb
c001823a:	09 d0                	or     eax,edx
c001823c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018241:	0d 00 00 00 80       	or     eax,0x80000000
c0018246:	ef                   	out    dx,eax
c0018247:	ba fc 0c 00 00       	mov    edx,0xcfc
c001824c:	ed                   	in     eax,dx
c001824d:	83 e3 02             	and    ebx,0x2
c0018250:	0f b6 cb             	movzx  ecx,bl
c0018253:	c1 e1 03             	shl    ecx,0x3
c0018256:	d3 e8                	shr    eax,cl
c0018258:	eb 43                	jmp    c001829d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001825a:	83 ff 02             	cmp    edi,0x2
c001825d:	75 2c                	jne    c001828b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001825f:	83 ec 0c             	sub    esp,0xc
c0018262:	0f b6 c9             	movzx  ecx,cl
c0018265:	0f b6 d2             	movzx  edx,dl
c0018268:	0f b6 fb             	movzx  edi,bl
c001826b:	0f b6 c0             	movzx  eax,al
c001826e:	57                   	push   edi
c001826f:	51                   	push   ecx
c0018270:	52                   	push   edx
c0018271:	50                   	push   eax
c0018272:	56                   	push   esi
c0018273:	e8 14 ff ff ff       	call   c001818c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018278:	89 c2                	mov    edx,eax
c001827a:	ed                   	in     eax,dx
c001827b:	83 e3 02             	and    ebx,0x2
c001827e:	83 c4 20             	add    esp,0x20
c0018281:	0f b6 cb             	movzx  ecx,bl
c0018284:	c1 e1 03             	shl    ecx,0x3
c0018287:	d3 e8                	shr    eax,cl
c0018289:	eb 12                	jmp    c001829d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001828b:	83 ec 0c             	sub    esp,0xc
c001828e:	68 b7 ec 01 c0       	push   0xc001ecb7
c0018293:	e8 eb 7e ff ff       	call   c0010183 <KePanic(char const*)>
c0018298:	83 c4 10             	add    esp,0x10
c001829b:	31 c0                	xor    eax,eax
c001829d:	5b                   	pop    ebx
c001829e:	5e                   	pop    esi
c001829f:	5f                   	pop    edi
c00182a0:	c3                   	ret    
c00182a1:	90                   	nop

c00182a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00182a2:	83 ec 18             	sub    esp,0x18
c00182a5:	6a 00                	push   0x0
c00182a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ac:	50                   	push   eax
c00182ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b2:	50                   	push   eax
c00182b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b8:	50                   	push   eax
c00182b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182bd:	e8 38 ff ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182c2:	83 c4 2c             	add    esp,0x2c
c00182c5:	c3                   	ret    

c00182c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00182c6:	83 ec 18             	sub    esp,0x18
c00182c9:	6a 0e                	push   0xe
c00182cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182d0:	50                   	push   eax
c00182d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182d6:	50                   	push   eax
c00182d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182dc:	50                   	push   eax
c00182dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182e1:	e8 14 ff ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182e6:	83 c4 2c             	add    esp,0x2c
c00182e9:	0f b6 c0             	movzx  eax,al
c00182ec:	c3                   	ret    
c00182ed:	90                   	nop

c00182ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00182ee:	55                   	push   ebp
c00182ef:	57                   	push   edi
c00182f0:	56                   	push   esi
c00182f1:	53                   	push   ebx
c00182f2:	83 ec 18             	sub    esp,0x18
c00182f5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00182fa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00182ff:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018304:	6a 0a                	push   0xa
c0018306:	56                   	push   esi
c0018307:	55                   	push   ebp
c0018308:	57                   	push   edi
c0018309:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001830d:	e8 e8 fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018312:	83 c4 14             	add    esp,0x14
c0018315:	89 c3                	mov    ebx,eax
c0018317:	6a 0a                	push   0xa
c0018319:	0f b6 db             	movzx  ebx,bl
c001831c:	56                   	push   esi
c001831d:	55                   	push   ebp
c001831e:	57                   	push   edi
c001831f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018323:	e8 d2 fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018328:	83 c4 2c             	add    esp,0x2c
c001832b:	25 00 ff 00 00       	and    eax,0xff00
c0018330:	09 d8                	or     eax,ebx
c0018332:	5b                   	pop    ebx
c0018333:	5e                   	pop    esi
c0018334:	5f                   	pop    edi
c0018335:	5d                   	pop    ebp
c0018336:	c3                   	ret    
c0018337:	90                   	nop

c0018338 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018338:	83 ec 18             	sub    esp,0x18
c001833b:	6a 08                	push   0x8
c001833d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018342:	50                   	push   eax
c0018343:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018348:	50                   	push   eax
c0018349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001834e:	50                   	push   eax
c001834f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018353:	e8 a2 fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018358:	83 c4 2c             	add    esp,0x2c
c001835b:	0f b6 c4             	movzx  eax,ah
c001835e:	c3                   	ret    
c001835f:	90                   	nop

c0018360 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018360:	83 ec 18             	sub    esp,0x18
c0018363:	6a 08                	push   0x8
c0018365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001836a:	50                   	push   eax
c001836b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018370:	50                   	push   eax
c0018371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018376:	50                   	push   eax
c0018377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001837b:	e8 7a fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018380:	83 c4 2c             	add    esp,0x2c
c0018383:	c3                   	ret    

c0018384 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018384:	83 ec 18             	sub    esp,0x18
c0018387:	6a 3c                	push   0x3c
c0018389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001838e:	50                   	push   eax
c001838f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018394:	50                   	push   eax
c0018395:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001839a:	50                   	push   eax
c001839b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001839f:	e8 56 fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183a4:	83 c4 2c             	add    esp,0x2c
c00183a7:	c3                   	ret    

c00183a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00183a8:	83 ec 18             	sub    esp,0x18
c00183ab:	6a 18                	push   0x18
c00183ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183b2:	50                   	push   eax
c00183b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183b8:	50                   	push   eax
c00183b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183be:	50                   	push   eax
c00183bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183c3:	e8 32 fe ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183c8:	83 c4 2c             	add    esp,0x2c
c00183cb:	0f b6 c4             	movzx  eax,ah
c00183ce:	c3                   	ret    
c00183cf:	90                   	nop

c00183d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00183d0:	55                   	push   ebp
c00183d1:	57                   	push   edi
c00183d2:	56                   	push   esi
c00183d3:	53                   	push   ebx
c00183d4:	83 ec 28             	sub    esp,0x28
c00183d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00183db:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00183e0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00183e5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00183ea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00183f1:	8d 43 12             	lea    eax,[ebx+0x12]
c00183f4:	83 c3 10             	add    ebx,0x10
c00183f7:	0f b6 c0             	movzx  eax,al
c00183fa:	0f b6 db             	movzx  ebx,bl
c00183fd:	50                   	push   eax
c00183fe:	51                   	push   ecx
c00183ff:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018403:	57                   	push   edi
c0018404:	55                   	push   ebp
c0018405:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018409:	e8 ec fd ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001840e:	83 c4 14             	add    esp,0x14
c0018411:	89 c6                	mov    esi,eax
c0018413:	53                   	push   ebx
c0018414:	c1 e6 10             	shl    esi,0x10
c0018417:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001841b:	51                   	push   ecx
c001841c:	57                   	push   edi
c001841d:	55                   	push   ebp
c001841e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018422:	e8 d3 fd ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018427:	83 c4 3c             	add    esp,0x3c
c001842a:	0f b7 c0             	movzx  eax,ax
c001842d:	5b                   	pop    ebx
c001842e:	09 f0                	or     eax,esi
c0018430:	5e                   	pop    esi
c0018431:	5f                   	pop    edi
c0018432:	5d                   	pop    ebp
c0018433:	c3                   	ret    

c0018434 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018434:	55                   	push   ebp
c0018435:	57                   	push   edi
c0018436:	56                   	push   esi
c0018437:	53                   	push   ebx
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001843f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018443:	89 f5                	mov    ebp,esi
c0018445:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001844b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001844f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018453:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018457:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001845b:	83 f9 01             	cmp    ecx,0x1
c001845e:	75 5d                	jne    c00184bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018460:	0f b6 c8             	movzx  ecx,al
c0018463:	0f b6 d2             	movzx  edx,dl
c0018466:	c1 e1 10             	shl    ecx,0x10
c0018469:	c1 e2 0b             	shl    edx,0xb
c001846c:	89 f0                	mov    eax,esi
c001846e:	25 fc 00 00 00       	and    eax,0xfc
c0018473:	09 c1                	or     ecx,eax
c0018475:	89 e8                	mov    eax,ebp
c0018477:	0f b6 c0             	movzx  eax,al
c001847a:	c1 e0 08             	shl    eax,0x8
c001847d:	09 c1                	or     ecx,eax
c001847f:	09 d1                	or     ecx,edx
c0018481:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018486:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001848c:	89 c8                	mov    eax,ecx
c001848e:	ef                   	out    dx,eax
c001848f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018494:	ed                   	in     eax,dx
c0018495:	0f b7 db             	movzx  ebx,bx
c0018498:	83 e6 02             	and    esi,0x2
c001849b:	74 0a                	je     c00184a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001849d:	0f b7 d0             	movzx  edx,ax
c00184a0:	c1 e3 10             	shl    ebx,0x10
c00184a3:	09 d3                	or     ebx,edx
c00184a5:	eb 05                	jmp    c00184ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00184a7:	66 31 c0             	xor    ax,ax
c00184aa:	09 c3                	or     ebx,eax
c00184ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c00184b1:	89 c8                	mov    eax,ecx
c00184b3:	ef                   	out    dx,eax
c00184b4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00184b9:	89 d8                	mov    eax,ebx
c00184bb:	eb 41                	jmp    c00184fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184bd:	83 f9 02             	cmp    ecx,0x2
c00184c0:	75 45                	jne    c0018507 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00184c2:	83 ec 0c             	sub    esp,0xc
c00184c5:	0f b6 d2             	movzx  edx,dl
c00184c8:	89 f1                	mov    ecx,esi
c00184ca:	0f b6 c0             	movzx  eax,al
c00184cd:	0f b6 f1             	movzx  esi,cl
c00184d0:	89 e9                	mov    ecx,ebp
c00184d2:	56                   	push   esi
c00184d3:	0f b6 c9             	movzx  ecx,cl
c00184d6:	51                   	push   ecx
c00184d7:	52                   	push   edx
c00184d8:	50                   	push   eax
c00184d9:	57                   	push   edi
c00184da:	e8 ad fc ff ff       	call   c001818c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184df:	89 c2                	mov    edx,eax
c00184e1:	ed                   	in     eax,dx
c00184e2:	83 c4 20             	add    esp,0x20
c00184e5:	0f b7 db             	movzx  ebx,bx
c00184e8:	f6 c2 02             	test   dl,0x2
c00184eb:	74 0c                	je     c00184f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00184ed:	0f b7 c8             	movzx  ecx,ax
c00184f0:	89 d8                	mov    eax,ebx
c00184f2:	c1 e0 10             	shl    eax,0x10
c00184f5:	09 c8                	or     eax,ecx
c00184f7:	eb 05                	jmp    c00184fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184f9:	66 31 c0             	xor    ax,ax
c00184fc:	09 d8                	or     eax,ebx
c00184fe:	ef                   	out    dx,eax
c00184ff:	83 c4 0c             	add    esp,0xc
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	5f                   	pop    edi
c0018505:	5d                   	pop    ebp
c0018506:	c3                   	ret    
c0018507:	c7 44 24 20 b7 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ecb7
c001850f:	83 c4 0c             	add    esp,0xc
c0018512:	5b                   	pop    ebx
c0018513:	5e                   	pop    esi
c0018514:	5f                   	pop    edi
c0018515:	5d                   	pop    ebp
c0018516:	e9 68 7c ff ff       	jmp    c0010183 <KePanic(char const*)>
c001851b:	90                   	nop

c001851c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001851c:	55                   	push   ebp
c001851d:	57                   	push   edi
c001851e:	56                   	push   esi
c001851f:	53                   	push   ebx
c0018520:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018526:	80 3d 6c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002416c,0x0
c001852d:	0f 85 84 00 00 00    	jne    c00185b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018533:	83 ec 0c             	sub    esp,0xc
c0018536:	68 14 01 00 00       	push   0x114
c001853b:	e8 79 f2 fe ff       	call   c00077b9 <malloc>
c0018540:	83 c4 0c             	add    esp,0xc
c0018543:	89 c3                	mov    ebx,eax
c0018545:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c001854b:	68 bd ec 01 c0       	push   0xc001ecbd
c0018550:	50                   	push   eax
c0018551:	e8 28 25 ff ff       	call   c000aa7e <File::File(char const*, Process*)>
c0018556:	5a                   	pop    edx
c0018557:	59                   	pop    ecx
c0018558:	6a 01                	push   0x1
c001855a:	53                   	push   ebx
c001855b:	e8 de 25 ff ff       	call   c000ab3e <File::open(FileOpenMode)>
c0018560:	83 c4 0c             	add    esp,0xc
c0018563:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018567:	50                   	push   eax
c0018568:	8d 44 24 28          	lea    eax,[esp+0x28]
c001856c:	50                   	push   eax
c001856d:	53                   	push   ebx
c001856e:	e8 77 28 ff ff       	call   c000adea <File::stat(unsigned long long*, bool*)>
c0018573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018577:	40                   	inc    eax
c0018578:	89 04 24             	mov    DWORD PTR [esp],eax
c001857b:	e8 39 f2 fe ff       	call   c00077b9 <malloc>
c0018580:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018584:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c0018589:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001858d:	5e                   	pop    esi
c001858e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018590:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018594:	51                   	push   ecx
c0018595:	50                   	push   eax
c0018596:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001859a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001859e:	53                   	push   ebx
c001859f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00185a2:	83 c4 14             	add    esp,0x14
c00185a5:	53                   	push   ebx
c00185a6:	e8 f1 25 ff ff       	call   c000ab9c <File::close()>
c00185ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185af:	83 c4 10             	add    esp,0x10
c00185b2:	a3 64 41 02 c0       	mov    ds:0xc0024164,eax
c00185b7:	a1 64 41 02 c0       	mov    eax,ds:0xc0024164
c00185bc:	8b 15 68 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024168
c00185c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00185c5:	31 ff                	xor    edi,edi
c00185c7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00185cf:	31 f6                	xor    esi,esi
c00185d1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00185d6:	31 db                	xor    ebx,ebx
c00185d8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00185e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00185e5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00185ec:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00185f0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00185f7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00185fb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00185fe:	0f 8e 6b 01 00 00    	jle    c001876f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018604:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018607:	d4 40                	aam    0x40
c0018609:	d5 39                	aad    0x39
c001860b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001860f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018613:	d4 40                	aam    0x40
c0018615:	d5 39                	aad    0x39
c0018617:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001861b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001861f:	d4 40                	aam    0x40
c0018621:	d5 39                	aad    0x39
c0018623:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018627:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001862b:	d4 40                	aam    0x40
c001862d:	d5 39                	aad    0x39
c001862f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018633:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018637:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001863b:	3c 56                	cmp    al,0x56
c001863d:	74 45                	je     c0018684 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001863f:	d4 40                	aam    0x40
c0018641:	d5 39                	aad    0x39
c0018643:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018646:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001864a:	0f b6 c9             	movzx  ecx,cl
c001864d:	c1 e1 04             	shl    ecx,0x4
c0018650:	d4 40                	aam    0x40
c0018652:	d5 39                	aad    0x39
c0018654:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018657:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001865b:	0f b6 db             	movzx  ebx,bl
c001865e:	09 cb                	or     ebx,ecx
c0018660:	c1 e3 04             	shl    ebx,0x4
c0018663:	d4 40                	aam    0x40
c0018665:	d5 39                	aad    0x39
c0018667:	8d 48 d0             	lea    ecx,[eax-0x30]
c001866a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001866e:	0f b6 c9             	movzx  ecx,cl
c0018671:	09 cb                	or     ebx,ecx
c0018673:	c1 e3 04             	shl    ebx,0x4
c0018676:	89 d9                	mov    ecx,ebx
c0018678:	d4 40                	aam    0x40
c001867a:	d5 39                	aad    0x39
c001867c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001867f:	0f b6 db             	movzx  ebx,bl
c0018682:	09 cb                	or     ebx,ecx
c0018684:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018688:	80 f9 44             	cmp    cl,0x44
c001868b:	74 47                	je     c00186d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001868d:	88 c8                	mov    al,cl
c001868f:	d4 40                	aam    0x40
c0018691:	d5 39                	aad    0x39
c0018693:	83 e8 30             	sub    eax,0x30
c0018696:	0f b6 e8             	movzx  ebp,al
c0018699:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001869d:	c1 e5 04             	shl    ebp,0x4
c00186a0:	d4 40                	aam    0x40
c00186a2:	d5 39                	aad    0x39
c00186a4:	83 e8 30             	sub    eax,0x30
c00186a7:	0f b6 f0             	movzx  esi,al
c00186aa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00186ae:	09 ee                	or     esi,ebp
c00186b0:	c1 e6 04             	shl    esi,0x4
c00186b3:	d4 40                	aam    0x40
c00186b5:	d5 39                	aad    0x39
c00186b7:	83 e8 30             	sub    eax,0x30
c00186ba:	0f b6 e8             	movzx  ebp,al
c00186bd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00186c1:	09 ee                	or     esi,ebp
c00186c3:	c1 e6 04             	shl    esi,0x4
c00186c6:	89 f5                	mov    ebp,esi
c00186c8:	d4 40                	aam    0x40
c00186ca:	d5 39                	aad    0x39
c00186cc:	83 e8 30             	sub    eax,0x30
c00186cf:	0f b6 f0             	movzx  esi,al
c00186d2:	09 ee                	or     esi,ebp
c00186d4:	83 c7 10             	add    edi,0x10
c00186d7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00186db:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00186de:	3c 0a                	cmp    al,0xa
c00186e0:	74 09                	je     c00186eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00186e2:	45                   	inc    ebp
c00186e3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00186e6:	75 16                	jne    c00186fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00186e8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00186eb:	3c 0a                	cmp    al,0xa
c00186ed:	0f 94 c0             	sete   al
c00186f0:	0f b6 c0             	movzx  eax,al
c00186f3:	01 c7                	add    edi,eax
c00186f5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00186fa:	75 0c                	jne    c0018708 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00186fc:	eb 15                	jmp    c0018713 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00186fe:	47                   	inc    edi
c00186ff:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018702:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018706:	eb d3                	jmp    c00186db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018708:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001870d:	0f 85 e8 fe ff ff    	jne    c00185fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018713:	80 f9 44             	cmp    cl,0x44
c0018716:	74 0b                	je     c0018723 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018718:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001871d:	0f 85 d8 fe ff ff    	jne    c00185fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018723:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018727:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001872b:	c1 e1 04             	shl    ecx,0x4
c001872e:	83 e8 30             	sub    eax,0x30
c0018731:	09 c8                	or     eax,ecx
c0018733:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018737:	0f 85 be fe ff ff    	jne    c00185fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001873d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018741:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018745:	c1 e1 04             	shl    ecx,0x4
c0018748:	83 e8 30             	sub    eax,0x30
c001874b:	09 c8                	or     eax,ecx
c001874d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018751:	0f 85 a4 fe ff ff    	jne    c00185fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018757:	50                   	push   eax
c0018758:	50                   	push   eax
c0018759:	8d 44 24 28          	lea    eax,[esp+0x28]
c001875d:	50                   	push   eax
c001875e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018765:	e8 96 7e fe ff       	call   c0000600 <strcpy>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	eb 15                	jmp    c0018784 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001876f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018776:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018781:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018784:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001878b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018791:	5b                   	pop    ebx
c0018792:	5e                   	pop    esi
c0018793:	5f                   	pop    edi
c0018794:	5d                   	pop    ebp
c0018795:	c3                   	ret    

c0018796 <PCI::checkBus(unsigned char)>:
c0018796:	56                   	push   esi
c0018797:	53                   	push   ebx
c0018798:	31 f6                	xor    esi,esi
c001879a:	51                   	push   ecx
c001879b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001879f:	0f b6 c3             	movzx  eax,bl
c00187a2:	52                   	push   edx
c00187a3:	56                   	push   esi
c00187a4:	46                   	inc    esi
c00187a5:	50                   	push   eax
c00187a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187aa:	e8 f3 02 00 00       	call   c0018aa2 <PCI::checkDevice(unsigned char, unsigned char)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	83 fe 20             	cmp    esi,0x20
c00187b5:	75 e8                	jne    c001879f <PCI::checkBus(unsigned char)+0x9>
c00187b7:	58                   	pop    eax
c00187b8:	5b                   	pop    ebx
c00187b9:	5e                   	pop    esi
c00187ba:	c3                   	ret    
c00187bb:	90                   	nop

c00187bc <PCI::foundDevice(PCIDeviceInfo)>:
c00187bc:	55                   	push   ebp
c00187bd:	57                   	push   edi
c00187be:	56                   	push   esi
c00187bf:	53                   	push   ebx
c00187c0:	83 ec 1c             	sub    esp,0x1c
c00187c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187c7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00187cd:	0f 84 52 01 00 00    	je     c0018925 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00187d3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00187d7:	66 81 f9 06 04       	cmp    cx,0x406
c00187dc:	75 2c                	jne    c001880a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00187de:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00187e3:	50                   	push   eax
c00187e4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00187e9:	50                   	push   eax
c00187ea:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00187ef:	50                   	push   eax
c00187f0:	56                   	push   esi
c00187f1:	e8 b2 fb ff ff       	call   c00183a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00187f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00187fa:	0f b6 c0             	movzx  eax,al
c00187fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018801:	83 c4 2c             	add    esp,0x2c
c0018804:	5b                   	pop    ebx
c0018805:	5e                   	pop    esi
c0018806:	5f                   	pop    edi
c0018807:	5d                   	pop    ebp
c0018808:	eb 8c                	jmp    c0018796 <PCI::checkBus(unsigned char)>
c001880a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001880e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018818:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001881c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018820:	88 d3                	mov    bl,dl
c0018822:	85 c0                	test   eax,eax
c0018824:	74 33                	je     c0018859 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018826:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018829:	85 d2                	test   edx,edx
c001882b:	74 28                	je     c0018855 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001882d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018833:	31 ef                	xor    edi,ebp
c0018835:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001883b:	75 18                	jne    c0018855 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001883d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018841:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018847:	75 0c                	jne    c0018855 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018849:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001884f:	0f 84 d0 00 00 00    	je     c0018925 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018855:	8b 00                	mov    eax,DWORD PTR [eax]
c0018857:	eb c9                	jmp    c0018822 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018859:	66 81 f9 01 06       	cmp    cx,0x601
c001885e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018862:	75 19                	jne    c001887d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018864:	83 ec 0c             	sub    esp,0xc
c0018867:	68 64 01 00 00       	push   0x164
c001886c:	e8 48 ef fe ff       	call   c00077b9 <malloc>
c0018871:	89 c5                	mov    ebp,eax
c0018873:	89 04 24             	mov    DWORD PTR [esp],eax
c0018876:	e8 47 0e 00 00       	call   c00196c2 <SATABus::SATABus()>
c001887b:	eb 1e                	jmp    c001889b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001887d:	66 81 f9 01 01       	cmp    cx,0x101
c0018882:	75 60                	jne    c00188e4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 70 02 00 00       	push   0x270
c001888c:	e8 28 ef fe ff       	call   c00077b9 <malloc>
c0018891:	89 c5                	mov    ebp,eax
c0018893:	89 04 24             	mov    DWORD PTR [esp],eax
c0018896:	e8 cb 02 00 00       	call   c0018b66 <IDE::IDE()>
c001889b:	58                   	pop    eax
c001889c:	5a                   	pop    edx
c001889d:	55                   	push   ebp
c001889e:	56                   	push   esi
c001889f:	e8 a4 30 ff ff       	call   c000b948 <Device::addChild(Device*)>
c00188a4:	83 ec 1c             	sub    esp,0x1c
c00188a7:	b9 09 00 00 00       	mov    ecx,0x9
c00188ac:	fc                   	cld    
c00188ad:	89 e7                	mov    edi,esp
c00188af:	89 de                	mov    esi,ebx
c00188b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188b3:	55                   	push   ebp
c00188b4:	e8 d5 2f ff ff       	call   c000b88e <Device::preOpenPCI(PCIDeviceInfo)>
c00188b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188bc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00188c0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00188c8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00188d0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00188d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00188db:	83 c4 4c             	add    esp,0x4c
c00188de:	5b                   	pop    ebx
c00188df:	5e                   	pop    esi
c00188e0:	5f                   	pop    edi
c00188e1:	5d                   	pop    ebp
c00188e2:	ff e0                	jmp    eax
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	68 58 01 00 00       	push   0x158
c00188ec:	e8 c8 ee fe ff       	call   c00077b9 <malloc>
c00188f1:	89 c5                	mov    ebp,eax
c00188f3:	58                   	pop    eax
c00188f4:	5a                   	pop    edx
c00188f5:	68 d6 ec 01 c0       	push   0xc001ecd6
c00188fa:	55                   	push   ebp
c00188fb:	e8 e6 32 ff ff       	call   c000bbe6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018900:	59                   	pop    ecx
c0018901:	5f                   	pop    edi
c0018902:	55                   	push   ebp
c0018903:	56                   	push   esi
c0018904:	e8 3f 30 ff ff       	call   c000b948 <Device::addChild(Device*)>
c0018909:	b9 09 00 00 00       	mov    ecx,0x9
c001890e:	fc                   	cld    
c001890f:	89 df                	mov    edi,ebx
c0018911:	89 de                	mov    esi,ebx
c0018913:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018915:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018919:	83 c4 2c             	add    esp,0x2c
c001891c:	5b                   	pop    ebx
c001891d:	5e                   	pop    esi
c001891e:	5f                   	pop    edi
c001891f:	5d                   	pop    ebp
c0018920:	e9 69 2f ff ff       	jmp    c000b88e <Device::preOpenPCI(PCIDeviceInfo)>
c0018925:	83 c4 1c             	add    esp,0x1c
c0018928:	5b                   	pop    ebx
c0018929:	5e                   	pop    esi
c001892a:	5f                   	pop    edi
c001892b:	5d                   	pop    ebp
c001892c:	c3                   	ret    
c001892d:	90                   	nop

c001892e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001892e:	55                   	push   ebp
c001892f:	57                   	push   edi
c0018930:	56                   	push   esi
c0018931:	53                   	push   ebx
c0018932:	83 ec 68             	sub    esp,0x68
c0018935:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018939:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018940:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018944:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001894b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018950:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018954:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001895b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018960:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018964:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018969:	6a 0c                	push   0xc
c001896b:	57                   	push   edi
c001896c:	53                   	push   ebx
c001896d:	56                   	push   esi
c001896e:	55                   	push   ebp
c001896f:	e8 86 f8 ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018974:	83 c4 20             	add    esp,0x20
c0018977:	57                   	push   edi
c0018978:	53                   	push   ebx
c0018979:	56                   	push   esi
c001897a:	55                   	push   ebp
c001897b:	e8 6e f9 ff ff       	call   c00182ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018980:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018985:	57                   	push   edi
c0018986:	53                   	push   ebx
c0018987:	56                   	push   esi
c0018988:	55                   	push   ebp
c0018989:	e8 f6 f9 ff ff       	call   c0018384 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001898e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018992:	83 c4 14             	add    esp,0x14
c0018995:	6a 3c                	push   0x3c
c0018997:	57                   	push   edi
c0018998:	53                   	push   ebx
c0018999:	56                   	push   esi
c001899a:	55                   	push   ebp
c001899b:	e8 5a f8 ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189a0:	0f b6 c4             	movzx  eax,ah
c00189a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00189a7:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00189ab:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00189af:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00189b4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00189ba:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00189c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189c4:	83 c4 20             	add    esp,0x20
c00189c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189cc:	74 30                	je     c00189fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189ce:	31 c0                	xor    eax,eax
c00189d0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00189d4:	7e 28                	jle    c00189fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189d6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00189de:	39 cb                	cmp    ebx,ecx
c00189e0:	75 19                	jne    c00189fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189e2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00189ea:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00189ee:	75 0b                	jne    c00189fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189f0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00189f7:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00189fb:	40                   	inc    eax
c00189fc:	eb d2                	jmp    c00189d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00189fe:	31 d2                	xor    edx,edx
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	57                   	push   edi
c0018a04:	53                   	push   ebx
c0018a05:	56                   	push   esi
c0018a06:	52                   	push   edx
c0018a07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018a0b:	55                   	push   ebp
c0018a0c:	e8 bf f9 ff ff       	call   c00183d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a15:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018a19:	42                   	inc    edx
c0018a1a:	83 c4 20             	add    esp,0x20
c0018a1d:	83 fa 06             	cmp    edx,0x6
c0018a20:	75 de                	jne    c0018a00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018a22:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a27:	83 ec 0c             	sub    esp,0xc
c0018a2a:	86 e0                	xchg   al,ah
c0018a2c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018a31:	6a 02                	push   0x2
c0018a33:	57                   	push   edi
c0018a34:	53                   	push   ebx
c0018a35:	56                   	push   esi
c0018a36:	55                   	push   ebp
c0018a37:	e8 be f7 ff ff       	call   c00181fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a3c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018a41:	83 c4 20             	add    esp,0x20
c0018a44:	57                   	push   edi
c0018a45:	53                   	push   ebx
c0018a46:	56                   	push   esi
c0018a47:	55                   	push   ebp
c0018a48:	e8 eb f8 ff ff       	call   c0018338 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018a4d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018a51:	57                   	push   edi
c0018a52:	53                   	push   ebx
c0018a53:	56                   	push   esi
c0018a54:	55                   	push   ebp
c0018a55:	e8 48 f8 ff ff       	call   c00182a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a5a:	b9 09 00 00 00       	mov    ecx,0x9
c0018a5f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018a64:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018a68:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018a6c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018a70:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018a74:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018a78:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018a7c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a80:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a84:	83 ec 0c             	sub    esp,0xc
c0018a87:	fc                   	cld    
c0018a88:	89 e7                	mov    edi,esp
c0018a8a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a90:	55                   	push   ebp
c0018a91:	e8 26 fd ff ff       	call   c00187bc <PCI::foundDevice(PCIDeviceInfo)>
c0018a96:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a9c:	5b                   	pop    ebx
c0018a9d:	5e                   	pop    esi
c0018a9e:	5f                   	pop    edi
c0018a9f:	5d                   	pop    ebp
c0018aa0:	c3                   	ret    
c0018aa1:	90                   	nop

c0018aa2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018aa2:	55                   	push   ebp
c0018aa3:	57                   	push   edi
c0018aa4:	56                   	push   esi
c0018aa5:	53                   	push   ebx
c0018aa6:	83 ec 0c             	sub    esp,0xc
c0018aa9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018aad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ab2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ab7:	6a 00                	push   0x0
c0018ab9:	56                   	push   esi
c0018aba:	57                   	push   edi
c0018abb:	55                   	push   ebp
c0018abc:	e8 e1 f7 ff ff       	call   c00182a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ac1:	6a 00                	push   0x0
c0018ac3:	56                   	push   esi
c0018ac4:	57                   	push   edi
c0018ac5:	55                   	push   ebp
c0018ac6:	e8 63 fe ff ff       	call   c001892e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018acb:	83 c4 20             	add    esp,0x20
c0018ace:	6a 00                	push   0x0
c0018ad0:	56                   	push   esi
c0018ad1:	57                   	push   edi
c0018ad2:	55                   	push   ebp
c0018ad3:	e8 ee f7 ff ff       	call   c00182c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ad8:	83 c4 10             	add    esp,0x10
c0018adb:	84 c0                	test   al,al
c0018add:	79 27                	jns    c0018b06 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018adf:	bb 01 00 00 00       	mov    ebx,0x1
c0018ae4:	53                   	push   ebx
c0018ae5:	56                   	push   esi
c0018ae6:	57                   	push   edi
c0018ae7:	55                   	push   ebp
c0018ae8:	e8 b5 f7 ff ff       	call   c00182a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018aed:	83 c4 10             	add    esp,0x10
c0018af0:	66 40                	inc    ax
c0018af2:	74 0c                	je     c0018b00 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018af4:	53                   	push   ebx
c0018af5:	56                   	push   esi
c0018af6:	57                   	push   edi
c0018af7:	55                   	push   ebp
c0018af8:	e8 31 fe ff ff       	call   c001892e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018afd:	83 c4 10             	add    esp,0x10
c0018b00:	43                   	inc    ebx
c0018b01:	83 fb 08             	cmp    ebx,0x8
c0018b04:	75 de                	jne    c0018ae4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018b06:	83 c4 0c             	add    esp,0xc
c0018b09:	5b                   	pop    ebx
c0018b0a:	5e                   	pop    esi
c0018b0b:	5f                   	pop    edi
c0018b0c:	5d                   	pop    ebp
c0018b0d:	c3                   	ret    

c0018b0e <PCI::detect()>:
c0018b0e:	56                   	push   esi
c0018b0f:	53                   	push   ebx
c0018b10:	53                   	push   ebx
c0018b11:	31 db                	xor    ebx,ebx
c0018b13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b17:	6a 00                	push   0x0
c0018b19:	6a 00                	push   0x0
c0018b1b:	6a 00                	push   0x0
c0018b1d:	56                   	push   esi
c0018b1e:	e8 a3 f7 ff ff       	call   c00182c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018b23:	83 c4 10             	add    esp,0x10
c0018b26:	a8 80                	test   al,0x80
c0018b28:	75 21                	jne    c0018b4b <PCI::detect()+0x3d>
c0018b2a:	51                   	push   ecx
c0018b2b:	51                   	push   ecx
c0018b2c:	6a 00                	push   0x0
c0018b2e:	56                   	push   esi
c0018b2f:	e8 62 fc ff ff       	call   c0018796 <PCI::checkBus(unsigned char)>
c0018b34:	83 c4 10             	add    esp,0x10
c0018b37:	eb 24                	jmp    c0018b5d <PCI::detect()+0x4f>
c0018b39:	52                   	push   edx
c0018b3a:	52                   	push   edx
c0018b3b:	53                   	push   ebx
c0018b3c:	43                   	inc    ebx
c0018b3d:	56                   	push   esi
c0018b3e:	e8 53 fc ff ff       	call   c0018796 <PCI::checkBus(unsigned char)>
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	83 fb 08             	cmp    ebx,0x8
c0018b49:	74 12                	je     c0018b5d <PCI::detect()+0x4f>
c0018b4b:	53                   	push   ebx
c0018b4c:	6a 00                	push   0x0
c0018b4e:	6a 00                	push   0x0
c0018b50:	56                   	push   esi
c0018b51:	e8 4c f7 ff ff       	call   c00182a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b56:	83 c4 10             	add    esp,0x10
c0018b59:	66 40                	inc    ax
c0018b5b:	74 dc                	je     c0018b39 <PCI::detect()+0x2b>
c0018b5d:	58                   	pop    eax
c0018b5e:	5b                   	pop    ebx
c0018b5f:	5e                   	pop    esi
c0018b60:	c3                   	ret    
c0018b61:	90                   	nop

c0018b62 <IDE::close(int, int, void*)>:
c0018b62:	83 c8 ff             	or     eax,0xffffffff
c0018b65:	c3                   	ret    

c0018b66 <IDE::IDE()>:
c0018b66:	83 ec 0c             	sub    esp,0xc
c0018b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b6d:	83 ec 08             	sub    esp,0x8
c0018b70:	68 1c ed 01 c0       	push   0xc001ed1c
c0018b75:	50                   	push   eax
c0018b76:	e8 11 31 ff ff       	call   c000bc8c <HardDiskController::HardDiskController(char const*)>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	ba ac ed 01 c0       	mov    edx,0xc001edac
c0018b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b87:	89 10                	mov    DWORD PTR [eax],edx
c0018b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b8d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b94:	90                   	nop
c0018b95:	83 c4 0c             	add    esp,0xc
c0018b98:	c3                   	ret    
c0018b99:	90                   	nop

c0018b9a <IDE::prepareInterrupt(unsigned char)>:
c0018b9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ba3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018bab:	c3                   	ret    

c0018bac <selectDrive(unsigned char, unsigned char)>:
c0018bac:	c3                   	ret    
c0018bad:	90                   	nop

c0018bae <IDE::getBase(unsigned char)>:
c0018bae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018bb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bb7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018bbf:	c3                   	ret    

c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018bc0:	55                   	push   ebp
c0018bc1:	57                   	push   edi
c0018bc2:	56                   	push   esi
c0018bc3:	53                   	push   ebx
c0018bc4:	83 ec 1c             	sub    esp,0x1c
c0018bc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018bcb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018bcf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018bd2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018bda:	80 f9 03             	cmp    cl,0x3
c0018bdd:	77 51                	ja     c0018c30 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018be3:	0f b6 f2             	movzx  esi,dl
c0018be6:	0f b6 db             	movzx  ebx,bl
c0018be9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018bec:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018bf0:	83 ca 80             	or     edx,0xffffff80
c0018bf3:	0f b6 d2             	movzx  edx,dl
c0018bf6:	52                   	push   edx
c0018bf7:	6a 0c                	push   0xc
c0018bf9:	56                   	push   esi
c0018bfa:	57                   	push   edi
c0018bfb:	e8 c0 ff ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c00:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018c05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c09:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018c0d:	ee                   	out    dx,al
c0018c0e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018c13:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018c17:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018c1b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c1f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018c27:	83 c4 2c             	add    esp,0x2c
c0018c2a:	5b                   	pop    ebx
c0018c2b:	5e                   	pop    esi
c0018c2c:	5f                   	pop    edi
c0018c2d:	5d                   	pop    ebp
c0018c2e:	eb 90                	jmp    c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c30:	80 fb 07             	cmp    bl,0x7
c0018c33:	77 12                	ja     c0018c47 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018c35:	0f b6 d2             	movzx  edx,dl
c0018c38:	0f b6 db             	movzx  ebx,bl
c0018c3b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018c43:	89 da                	mov    edx,ebx
c0018c45:	eb 2f                	jmp    c0018c76 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c47:	80 fb 0d             	cmp    bl,0xd
c0018c4a:	77 13                	ja     c0018c5f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018c4c:	0f b6 d2             	movzx  edx,dl
c0018c4f:	0f b6 db             	movzx  ebx,bl
c0018c52:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018c59:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018c5d:	eb 17                	jmp    c0018c76 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c5f:	80 fb 15             	cmp    bl,0x15
c0018c62:	77 13                	ja     c0018c77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018c64:	0f b6 d2             	movzx  edx,dl
c0018c67:	0f b6 db             	movzx  ebx,bl
c0018c6a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018c72:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018c76:	ee                   	out    dx,al
c0018c77:	83 c4 1c             	add    esp,0x1c
c0018c7a:	5b                   	pop    ebx
c0018c7b:	5e                   	pop    esi
c0018c7c:	5f                   	pop    edi
c0018c7d:	5d                   	pop    ebp
c0018c7e:	c3                   	ret    
c0018c7f:	90                   	nop

c0018c80 <IDE::read(unsigned char, unsigned char)>:
c0018c80:	55                   	push   ebp
c0018c81:	57                   	push   edi
c0018c82:	56                   	push   esi
c0018c83:	53                   	push   ebx
c0018c84:	83 ec 1c             	sub    esp,0x1c
c0018c87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018c8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c8f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c92:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c96:	3c 03                	cmp    al,0x3
c0018c98:	77 43                	ja     c0018cdd <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c9a:	0f b6 f2             	movzx  esi,dl
c0018c9d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ca0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018ca4:	83 c8 80             	or     eax,0xffffff80
c0018ca7:	0f b6 c0             	movzx  eax,al
c0018caa:	50                   	push   eax
c0018cab:	6a 0c                	push   0xc
c0018cad:	56                   	push   esi
c0018cae:	57                   	push   edi
c0018caf:	e8 0c ff ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018cb4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018cb9:	0f b6 c3             	movzx  eax,bl
c0018cbc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018cc0:	ec                   	in     al,dx
c0018cc1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018cc5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018cca:	52                   	push   edx
c0018ccb:	6a 0c                	push   0xc
c0018ccd:	56                   	push   esi
c0018cce:	57                   	push   edi
c0018ccf:	e8 ec fe ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018cd4:	83 c4 20             	add    esp,0x20
c0018cd7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cdb:	eb 49                	jmp    c0018d26 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018cdd:	80 fb 07             	cmp    bl,0x7
c0018ce0:	77 12                	ja     c0018cf4 <IDE::read(unsigned char, unsigned char)+0x74>
c0018ce2:	0f b6 d2             	movzx  edx,dl
c0018ce5:	0f b6 c3             	movzx  eax,bl
c0018ce8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018cf0:	89 c2                	mov    edx,eax
c0018cf2:	eb 31                	jmp    c0018d25 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018cf4:	80 fb 0d             	cmp    bl,0xd
c0018cf7:	77 13                	ja     c0018d0c <IDE::read(unsigned char, unsigned char)+0x8c>
c0018cf9:	0f b6 d2             	movzx  edx,dl
c0018cfc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018d03:	0f b6 d3             	movzx  edx,bl
c0018d06:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018d0a:	eb 19                	jmp    c0018d25 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018d0c:	31 c0                	xor    eax,eax
c0018d0e:	80 fb 15             	cmp    bl,0x15
c0018d11:	77 13                	ja     c0018d26 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018d13:	0f b6 d2             	movzx  edx,dl
c0018d16:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018d1e:	0f b6 d3             	movzx  edx,bl
c0018d21:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018d25:	ec                   	in     al,dx
c0018d26:	83 c4 1c             	add    esp,0x1c
c0018d29:	5b                   	pop    ebx
c0018d2a:	5e                   	pop    esi
c0018d2b:	5f                   	pop    edi
c0018d2c:	5d                   	pop    ebp
c0018d2d:	c3                   	ret    

c0018d2e <IDE::waitInterrupt(unsigned char)>:
c0018d2e:	57                   	push   edi
c0018d2f:	56                   	push   esi
c0018d30:	31 f6                	xor    esi,esi
c0018d32:	53                   	push   ebx
c0018d33:	83 ec 10             	sub    esp,0x10
c0018d36:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018d3a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018d3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d42:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018d47:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018d4e:	84 db                	test   bl,bl
c0018d50:	75 33                	jne    c0018d85 <IDE::waitInterrupt(unsigned char)+0x57>
c0018d52:	52                   	push   edx
c0018d53:	6a 0c                	push   0xc
c0018d55:	50                   	push   eax
c0018d56:	57                   	push   edi
c0018d57:	e8 24 ff ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0018d5c:	83 c4 10             	add    esp,0x10
c0018d5f:	a8 01                	test   al,0x1
c0018d61:	75 2a                	jne    c0018d8d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d63:	f7 c6 04 00 00 00    	test   esi,0x4
c0018d69:	75 12                	jne    c0018d7d <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d6b:	83 fe 32             	cmp    esi,0x32
c0018d6e:	7e 0d                	jle    c0018d7d <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d70:	83 ec 0c             	sub    esp,0xc
c0018d73:	6a 64                	push   0x64
c0018d75:	e8 1a a9 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c0018d7a:	83 c4 10             	add    esp,0x10
c0018d7d:	83 fe 3c             	cmp    esi,0x3c
c0018d80:	74 0b                	je     c0018d8d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d82:	46                   	inc    esi
c0018d83:	eb bd                	jmp    c0018d42 <IDE::waitInterrupt(unsigned char)+0x14>
c0018d85:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	88 d8                	mov    al,bl
c0018d92:	5b                   	pop    ebx
c0018d93:	5e                   	pop    esi
c0018d94:	5f                   	pop    edi
c0018d95:	c3                   	ret    

c0018d96 <ideChannel0IRQHandler(regs*, void*)>:
c0018d96:	83 ec 10             	sub    esp,0x10
c0018d99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d9d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018da4:	6a 07                	push   0x7
c0018da6:	6a 00                	push   0x0
c0018da8:	50                   	push   eax
c0018da9:	e8 d2 fe ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0018dae:	83 c4 1c             	add    esp,0x1c
c0018db1:	c3                   	ret    

c0018db2 <ideChannel1IRQHandler(regs*, void*)>:
c0018db2:	83 ec 10             	sub    esp,0x10
c0018db5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018db9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018dc0:	6a 07                	push   0x7
c0018dc2:	6a 01                	push   0x1
c0018dc4:	50                   	push   eax
c0018dc5:	e8 b6 fe ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0018dca:	83 c4 1c             	add    esp,0x1c
c0018dcd:	c3                   	ret    

c0018dce <IDE::enableIRQs(unsigned char, bool)>:
c0018dce:	57                   	push   edi
c0018dcf:	56                   	push   esi
c0018dd0:	be 04 00 00 00       	mov    esi,0x4
c0018dd5:	53                   	push   ebx
c0018dd6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018ddb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ddf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018de4:	0f 94 c0             	sete   al
c0018de7:	01 c0                	add    eax,eax
c0018de9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018df0:	0f b6 c0             	movzx  eax,al
c0018df3:	50                   	push   eax
c0018df4:	6a 0c                	push   0xc
c0018df6:	57                   	push   edi
c0018df7:	53                   	push   ebx
c0018df8:	e8 c3 fd ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018dfd:	83 c4 10             	add    esp,0x10
c0018e00:	50                   	push   eax
c0018e01:	6a 0c                	push   0xc
c0018e03:	57                   	push   edi
c0018e04:	53                   	push   ebx
c0018e05:	e8 76 fe ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0018e0a:	83 c4 10             	add    esp,0x10
c0018e0d:	4e                   	dec    esi
c0018e0e:	75 f0                	jne    c0018e00 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018e10:	5b                   	pop    ebx
c0018e11:	5e                   	pop    esi
c0018e12:	5f                   	pop    edi
c0018e13:	c3                   	ret    

c0018e14 <IDE::open(int, int, void*)>:
c0018e14:	55                   	push   ebp
c0018e15:	57                   	push   edi
c0018e16:	56                   	push   esi
c0018e17:	53                   	push   ebx
c0018e18:	83 ec 1c             	sub    esp,0x1c
c0018e1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e1f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018e28:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018e31:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018e38:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018e3f:	0f 85 b0 02 00 00    	jne    c00190f5 <IDE::open(int, int, void*)+0x2e1>
c0018e45:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018e4b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018e4f:	83 e0 7f             	and    eax,0x7f
c0018e52:	3c 05                	cmp    al,0x5
c0018e54:	74 04                	je     c0018e5a <IDE::open(int, int, void*)+0x46>
c0018e56:	3c 0f                	cmp    al,0xf
c0018e58:	75 32                	jne    c0018e8c <IDE::open(int, int, void*)+0x78>
c0018e5a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018e60:	83 e0 fc             	and    eax,0xfffffffc
c0018e63:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018e6a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018e70:	83 e0 fc             	and    eax,0xfffffffc
c0018e73:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018e7a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e80:	83 e0 fc             	and    eax,0xfffffffc
c0018e83:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e8a:	eb 14                	jmp    c0018ea0 <IDE::open(int, int, void*)+0x8c>
c0018e8c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e96:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018ea0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018ea7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eb2:	89 c6                	mov    esi,eax
c0018eb4:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018eb9:	c1 e6 10             	shl    esi,0x10
c0018ebc:	89 e8                	mov    eax,ebp
c0018ebe:	89 fa                	mov    edx,edi
c0018ec0:	c1 e0 0b             	shl    eax,0xb
c0018ec3:	09 f0                	or     eax,esi
c0018ec5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018ecc:	c1 e6 08             	shl    esi,0x8
c0018ecf:	09 c6                	or     esi,eax
c0018ed1:	89 f0                	mov    eax,esi
c0018ed3:	0d 08 00 00 80       	or     eax,0x80000008
c0018ed8:	ef                   	out    dx,eax
c0018ed9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018ede:	89 ca                	mov    edx,ecx
c0018ee0:	ed                   	in     eax,dx
c0018ee1:	c1 e8 10             	shr    eax,0x10
c0018ee4:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ee9:	0f 84 f5 00 00 00    	je     c0018fe4 <IDE::open(int, int, void*)+0x1d0>
c0018eef:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018ef5:	89 fa                	mov    edx,edi
c0018ef7:	89 f0                	mov    eax,esi
c0018ef9:	ef                   	out    dx,eax
c0018efa:	b0 fe                	mov    al,0xfe
c0018efc:	89 ca                	mov    edx,ecx
c0018efe:	ee                   	out    dx,al
c0018eff:	89 f0                	mov    eax,esi
c0018f01:	89 fa                	mov    edx,edi
c0018f03:	ef                   	out    dx,eax
c0018f04:	89 ca                	mov    edx,ecx
c0018f06:	ed                   	in     eax,dx
c0018f07:	3c fe                	cmp    al,0xfe
c0018f09:	0f 85 a9 00 00 00    	jne    c0018fb8 <IDE::open(int, int, void*)+0x1a4>
c0018f0f:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c0018f15:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018f1c:	74 33                	je     c0018f51 <IDE::open(int, int, void*)+0x13d>
c0018f1e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018f24:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018f28:	40                   	inc    eax
c0018f29:	83 ec 0c             	sub    esp,0xc
c0018f2c:	0f b6 c0             	movzx  eax,al
c0018f2f:	50                   	push   eax
c0018f30:	55                   	push   ebp
c0018f31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018f35:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018f3b:	51                   	push   ecx
c0018f3c:	e8 5b 57 ff ff       	call   c000e69c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018f41:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018f46:	83 c4 1c             	add    esp,0x1c
c0018f49:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018f4f:	eb 0a                	jmp    c0018f5b <IDE::open(int, int, void*)+0x147>
c0018f51:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018f5b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018f62:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018f69:	c1 e1 10             	shl    ecx,0x10
c0018f6c:	c1 e0 08             	shl    eax,0x8
c0018f6f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018f74:	09 c1                	or     ecx,eax
c0018f76:	89 fa                	mov    edx,edi
c0018f78:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018f7f:	c1 e0 0b             	shl    eax,0xb
c0018f82:	09 c1                	or     ecx,eax
c0018f84:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018f8a:	89 c8                	mov    eax,ecx
c0018f8c:	ef                   	out    dx,eax
c0018f8d:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f92:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f98:	89 f2                	mov    edx,esi
c0018f9a:	ee                   	out    dx,al
c0018f9b:	89 c8                	mov    eax,ecx
c0018f9d:	89 fa                	mov    edx,edi
c0018f9f:	ef                   	out    dx,eax
c0018fa0:	89 f2                	mov    edx,esi
c0018fa2:	ed                   	in     eax,dx
c0018fa3:	0f b6 c0             	movzx  eax,al
c0018fa6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018fac:	74 46                	je     c0018ff4 <IDE::open(int, int, void*)+0x1e0>
c0018fae:	83 ec 0c             	sub    esp,0xc
c0018fb1:	68 34 ed 01 c0       	push   0xc001ed34
c0018fb6:	eb 34                	jmp    c0018fec <IDE::open(int, int, void*)+0x1d8>
c0018fb8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018fc1:	75 17                	jne    c0018fda <IDE::open(int, int, void*)+0x1c6>
c0018fc3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018fc8:	74 07                	je     c0018fd1 <IDE::open(int, int, void*)+0x1bd>
c0018fca:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018fcf:	75 09                	jne    c0018fda <IDE::open(int, int, void*)+0x1c6>
c0018fd1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018fd8:	eb 1a                	jmp    c0018ff4 <IDE::open(int, int, void*)+0x1e0>
c0018fda:	83 ec 0c             	sub    esp,0xc
c0018fdd:	68 3c ed 01 c0       	push   0xc001ed3c
c0018fe2:	eb 08                	jmp    c0018fec <IDE::open(int, int, void*)+0x1d8>
c0018fe4:	83 ec 0c             	sub    esp,0xc
c0018fe7:	68 6d ed 01 c0       	push   0xc001ed6d
c0018fec:	e8 92 71 ff ff       	call   c0010183 <KePanic(char const*)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018ffb:	79 1a                	jns    c0019017 <IDE::open(int, int, void*)+0x203>
c0018ffd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019003:	83 e0 fc             	and    eax,0xfffffffc
c0019006:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001900d:	83 c0 08             	add    eax,0x8
c0019010:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019017:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001901d:	89 c2                	mov    edx,eax
c001901f:	83 e2 0f             	and    edx,0xf
c0019022:	66 83 fa 08          	cmp    dx,0x8
c0019026:	75 0a                	jne    c0019032 <IDE::open(int, int, void*)+0x21e>
c0019028:	83 e8 02             	sub    eax,0x2
c001902b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019032:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019038:	89 c2                	mov    edx,eax
c001903a:	83 e2 0f             	and    edx,0xf
c001903d:	66 83 fa 08          	cmp    dx,0x8
c0019041:	75 0a                	jne    c001904d <IDE::open(int, int, void*)+0x239>
c0019043:	83 e8 02             	sub    eax,0x2
c0019046:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001904d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019054:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001905b:	89 d0                	mov    eax,edx
c001905d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019060:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019064:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019068:	8d 4a 01             	lea    ecx,[edx+0x1]
c001906b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019070:	0f b6 c9             	movzx  ecx,cl
c0019073:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001907a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001907d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019081:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019085:	8d 50 02             	lea    edx,[eax+0x2]
c0019088:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001908d:	0f b6 d2             	movzx  edx,dl
c0019090:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019096:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019099:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001909d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00190a1:	8d 48 03             	lea    ecx,[eax+0x3]
c00190a4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190a9:	0f b6 c9             	movzx  ecx,cl
c00190ac:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00190b2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00190b5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00190b9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00190bd:	8d 50 04             	lea    edx,[eax+0x4]
c00190c0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00190c6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00190cb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00190d2:	66 85 f6             	test   si,si
c00190d5:	74 5b                	je     c0019132 <IDE::open(int, int, void*)+0x31e>
c00190d7:	0f b6 d2             	movzx  edx,dl
c00190da:	83 c0 05             	add    eax,0x5
c00190dd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00190e0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00190e4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00190e8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190ee:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190f3:	eb 3d                	jmp    c0019132 <IDE::open(int, int, void*)+0x31e>
c00190f5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00190fb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019102:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019109:	66 05 06 02          	add    ax,0x206
c001910d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019114:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001911b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019122:	66 05 06 02          	add    ax,0x206
c0019126:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001912d:	e9 e5 fe ff ff       	jmp    c0019017 <IDE::open(int, int, void*)+0x203>
c0019132:	50                   	push   eax
c0019133:	50                   	push   eax
c0019134:	6a 00                	push   0x0
c0019136:	53                   	push   ebx
c0019137:	e8 5e fa ff ff       	call   c0018b9a <IDE::prepareInterrupt(unsigned char)>
c001913c:	5a                   	pop    edx
c001913d:	59                   	pop    ecx
c001913e:	6a 01                	push   0x1
c0019140:	53                   	push   ebx
c0019141:	e8 54 fa ff ff       	call   c0018b9a <IDE::prepareInterrupt(unsigned char)>
c0019146:	83 c4 0c             	add    esp,0xc
c0019149:	6a 00                	push   0x0
c001914b:	6a 00                	push   0x0
c001914d:	53                   	push   ebx
c001914e:	e8 7b fc ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c0019153:	83 c4 0c             	add    esp,0xc
c0019156:	6a 00                	push   0x0
c0019158:	6a 01                	push   0x1
c001915a:	53                   	push   ebx
c001915b:	e8 6e fc ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001916a:	74 34                	je     c00191a0 <IDE::open(int, int, void*)+0x38c>
c001916c:	83 ec 0c             	sub    esp,0xc
c001916f:	53                   	push   ebx
c0019170:	6a 01                	push   0x1
c0019172:	68 96 8d 01 c0       	push   0xc0018d96
c0019177:	6a 0e                	push   0xe
c0019179:	53                   	push   ebx
c001917a:	e8 75 27 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001917f:	83 c4 14             	add    esp,0x14
c0019182:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019188:	53                   	push   ebx
c0019189:	6a 01                	push   0x1
c001918b:	68 b2 8d 01 c0       	push   0xc0018db2
c0019190:	6a 0f                	push   0xf
c0019192:	53                   	push   ebx
c0019193:	e8 5c 27 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019198:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001919e:	eb 38                	jmp    c00191d8 <IDE::open(int, int, void*)+0x3c4>
c00191a0:	83 ec 0c             	sub    esp,0xc
c00191a3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00191ad:	53                   	push   ebx
c00191ae:	6a 00                	push   0x0
c00191b0:	68 96 8d 01 c0       	push   0xc0018d96
c00191b5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00191bb:	53                   	push   ebx
c00191bc:	e8 33 27 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191c1:	83 c4 14             	add    esp,0x14
c00191c4:	53                   	push   ebx
c00191c5:	6a 00                	push   0x0
c00191c7:	68 b2 8d 01 c0       	push   0xc0018db2
c00191cc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00191d2:	53                   	push   ebx
c00191d3:	e8 1c 27 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191da:	83 c4 20             	add    esp,0x20
c00191dd:	83 ec 0c             	sub    esp,0xc
c00191e0:	53                   	push   ebx
c00191e1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00191e4:	83 c4 0c             	add    esp,0xc
c00191e7:	6a 07                	push   0x7
c00191e9:	6a 00                	push   0x0
c00191eb:	53                   	push   ebx
c00191ec:	e8 8f fa ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00191f1:	83 c4 0c             	add    esp,0xc
c00191f4:	6a 07                	push   0x7
c00191f6:	6a 01                	push   0x1
c00191f8:	53                   	push   ebx
c00191f9:	e8 82 fa ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00191fe:	83 c4 0c             	add    esp,0xc
c0019201:	6a 01                	push   0x1
c0019203:	6a 00                	push   0x0
c0019205:	53                   	push   ebx
c0019206:	e8 c3 fb ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c001920b:	83 c4 0c             	add    esp,0xc
c001920e:	6a 01                	push   0x1
c0019210:	6a 01                	push   0x1
c0019212:	53                   	push   ebx
c0019213:	e8 b6 fb ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c0019218:	83 c4 2c             	add    esp,0x2c
c001921b:	31 c0                	xor    eax,eax
c001921d:	5b                   	pop    ebx
c001921e:	5e                   	pop    esi
c001921f:	5f                   	pop    edi
c0019220:	5d                   	pop    ebp
c0019221:	c3                   	ret    

c0019222 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019222:	55                   	push   ebp
c0019223:	57                   	push   edi
c0019224:	56                   	push   esi
c0019225:	53                   	push   ebx
c0019226:	83 ec 1c             	sub    esp,0x1c
c0019229:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001922d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019231:	8d 50 f8             	lea    edx,[eax-0x8]
c0019234:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019238:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001923c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019240:	80 fa 03             	cmp    dl,0x3
c0019243:	77 5d                	ja     c00192a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019245:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019249:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001924d:	0f b6 db             	movzx  ebx,bl
c0019250:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019253:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019257:	83 ca 80             	or     edx,0xffffff80
c001925a:	0f b6 d2             	movzx  edx,dl
c001925d:	52                   	push   edx
c001925e:	6a 0c                	push   0xc
c0019260:	53                   	push   ebx
c0019261:	56                   	push   esi
c0019262:	e8 59 f9 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019267:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001926c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019274:	0f b6 c0             	movzx  eax,al
c0019277:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001927b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001927d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019282:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019286:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001928a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001928e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019296:	83 c4 2c             	add    esp,0x2c
c0019299:	5b                   	pop    ebx
c001929a:	5e                   	pop    esi
c001929b:	5f                   	pop    edi
c001929c:	5d                   	pop    ebp
c001929d:	e9 1e f9 ff ff       	jmp    c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192a2:	3c 07                	cmp    al,0x7
c00192a4:	77 10                	ja     c00192b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00192a6:	0f b6 db             	movzx  ebx,bl
c00192a9:	0f b6 d0             	movzx  edx,al
c00192ac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00192b4:	eb 2d                	jmp    c00192e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192b6:	3c 0d                	cmp    al,0xd
c00192b8:	77 13                	ja     c00192cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00192ba:	0f b6 db             	movzx  ebx,bl
c00192bd:	0f b6 c0             	movzx  eax,al
c00192c0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00192c7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00192cb:	eb 16                	jmp    c00192e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192cd:	3c 15                	cmp    al,0x15
c00192cf:	77 14                	ja     c00192e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00192d1:	0f b6 db             	movzx  ebx,bl
c00192d4:	0f b6 c0             	movzx  eax,al
c00192d7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00192df:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00192e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00192e5:	83 c4 1c             	add    esp,0x1c
c00192e8:	5b                   	pop    ebx
c00192e9:	5e                   	pop    esi
c00192ea:	5f                   	pop    edi
c00192eb:	5d                   	pop    ebp
c00192ec:	c3                   	ret    
c00192ed:	90                   	nop

c00192ee <IDE::detect()>:
c00192ee:	55                   	push   ebp
c00192ef:	57                   	push   edi
c00192f0:	56                   	push   esi
c00192f1:	53                   	push   ebx
c00192f2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00192f8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00192ff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019306:	0f 85 97 02 00 00    	jne    c00195a3 <IDE::detect()+0x2b5>
c001930c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019313:	31 f6                	xor    esi,esi
c0019315:	31 ed                	xor    ebp,ebp
c0019317:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001931f:	89 e8                	mov    eax,ebp
c0019321:	c1 e0 06             	shl    eax,0x6
c0019324:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001932c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019330:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019334:	c1 e0 04             	shl    eax,0x4
c0019337:	83 c8 a0             	or     eax,0xffffffa0
c001933a:	0f b6 c0             	movzx  eax,al
c001933d:	50                   	push   eax
c001933e:	6a 06                	push   0x6
c0019340:	56                   	push   esi
c0019341:	53                   	push   ebx
c0019342:	e8 79 f8 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019347:	83 c4 0c             	add    esp,0xc
c001934a:	6a 0c                	push   0xc
c001934c:	56                   	push   esi
c001934d:	53                   	push   ebx
c001934e:	e8 2d f9 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019353:	83 c4 0c             	add    esp,0xc
c0019356:	6a 0c                	push   0xc
c0019358:	56                   	push   esi
c0019359:	53                   	push   ebx
c001935a:	e8 21 f9 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001935f:	83 c4 0c             	add    esp,0xc
c0019362:	6a 0c                	push   0xc
c0019364:	56                   	push   esi
c0019365:	53                   	push   ebx
c0019366:	e8 15 f9 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001936b:	83 c4 0c             	add    esp,0xc
c001936e:	6a 0c                	push   0xc
c0019370:	56                   	push   esi
c0019371:	53                   	push   ebx
c0019372:	e8 09 f9 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019377:	68 ec 00 00 00       	push   0xec
c001937c:	6a 07                	push   0x7
c001937e:	56                   	push   esi
c001937f:	53                   	push   ebx
c0019380:	e8 3b f8 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019385:	83 c4 1c             	add    esp,0x1c
c0019388:	6a 0c                	push   0xc
c001938a:	56                   	push   esi
c001938b:	53                   	push   ebx
c001938c:	e8 ef f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019391:	83 c4 0c             	add    esp,0xc
c0019394:	6a 0c                	push   0xc
c0019396:	56                   	push   esi
c0019397:	53                   	push   ebx
c0019398:	e8 e3 f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001939d:	83 c4 0c             	add    esp,0xc
c00193a0:	6a 0c                	push   0xc
c00193a2:	56                   	push   esi
c00193a3:	53                   	push   ebx
c00193a4:	e8 d7 f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00193a9:	83 c4 0c             	add    esp,0xc
c00193ac:	6a 0c                	push   0xc
c00193ae:	56                   	push   esi
c00193af:	53                   	push   ebx
c00193b0:	e8 cb f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00193b5:	83 c4 0c             	add    esp,0xc
c00193b8:	6a 0c                	push   0xc
c00193ba:	56                   	push   esi
c00193bb:	53                   	push   ebx
c00193bc:	e8 bf f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00193c1:	83 c4 10             	add    esp,0x10
c00193c4:	84 c0                	test   al,al
c00193c6:	0f 84 5f 01 00 00    	je     c001952b <IDE::detect()+0x23d>
c00193cc:	31 ff                	xor    edi,edi
c00193ce:	50                   	push   eax
c00193cf:	6a 0c                	push   0xc
c00193d1:	56                   	push   esi
c00193d2:	53                   	push   ebx
c00193d3:	e8 a8 f8 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	a8 01                	test   al,0x1
c00193dd:	0f 85 69 01 00 00    	jne    c001954c <IDE::detect()+0x25e>
c00193e3:	84 c0                	test   al,al
c00193e5:	78 04                	js     c00193eb <IDE::detect()+0xfd>
c00193e7:	a8 08                	test   al,0x8
c00193e9:	75 23                	jne    c001940e <IDE::detect()+0x120>
c00193eb:	47                   	inc    edi
c00193ec:	81 ff 17 01 00 00    	cmp    edi,0x117
c00193f2:	7e da                	jle    c00193ce <IDE::detect()+0xe0>
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	6a 32                	push   0x32
c00193f9:	e8 96 a2 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019407:	75 c5                	jne    c00193ce <IDE::detect()+0xe0>
c0019409:	e9 3e 01 00 00       	jmp    c001954c <IDE::detect()+0x25e>
c001940e:	31 c9                	xor    ecx,ecx
c0019410:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019414:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	68 80 00 00 00       	push   0x80
c0019420:	57                   	push   edi
c0019421:	6a 00                	push   0x0
c0019423:	56                   	push   esi
c0019424:	53                   	push   ebx
c0019425:	e8 f8 fd ff ff       	call   c0019222 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001942a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001942f:	89 e8                	mov    eax,ebp
c0019431:	89 d1                	mov    ecx,edx
c0019433:	c1 e0 06             	shl    eax,0x6
c0019436:	01 d8                	add    eax,ebx
c0019438:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001943f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019446:	89 f2                	mov    edx,esi
c0019448:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001944e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019452:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019458:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001945c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019463:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001946b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019472:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001947a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019480:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019487:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001948d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019491:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019495:	83 c4 20             	add    esp,0x20
c0019498:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001949b:	83 c0 02             	add    eax,0x2
c001949e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00194a4:	83 c7 02             	add    edi,0x2
c00194a7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00194aa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00194b0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00194b4:	75 e2                	jne    c0019498 <IDE::detect()+0x1aa>
c00194b6:	89 e8                	mov    eax,ebp
c00194b8:	c1 e0 06             	shl    eax,0x6
c00194bb:	01 d8                	add    eax,ebx
c00194bd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00194c3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00194ca:	66 c1 ea 09          	shr    dx,0x9
c00194ce:	83 e2 01             	and    edx,0x1
c00194d1:	84 c9                	test   cl,cl
c00194d3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00194d9:	75 22                	jne    c00194fd <IDE::detect()+0x20f>
c00194db:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00194e2:	74 46                	je     c001952a <IDE::detect()+0x23c>
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	68 7c 01 00 00       	push   0x17c
c00194ec:	e8 c8 e2 fe ff       	call   c00077b9 <malloc>
c00194f1:	89 c7                	mov    edi,eax
c00194f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00194f6:	e8 11 05 00 00       	call   c0019a0c <ATA::ATA()>
c00194fb:	eb 17                	jmp    c0019514 <IDE::detect()+0x226>
c00194fd:	83 ec 0c             	sub    esp,0xc
c0019500:	68 84 01 00 00       	push   0x184
c0019505:	e8 af e2 fe ff       	call   c00077b9 <malloc>
c001950a:	89 c7                	mov    edi,eax
c001950c:	89 04 24             	mov    DWORD PTR [esp],eax
c001950f:	e8 f0 0a 00 00       	call   c001a004 <ATAPI::ATAPI()>
c0019514:	5a                   	pop    edx
c0019515:	59                   	pop    ecx
c0019516:	57                   	push   edi
c0019517:	53                   	push   ebx
c0019518:	e8 2b 24 ff ff       	call   c000b948 <Device::addChild(Device*)>
c001951d:	8b 07                	mov    eax,DWORD PTR [edi]
c001951f:	53                   	push   ebx
c0019520:	55                   	push   ebp
c0019521:	6a 00                	push   0x0
c0019523:	57                   	push   edi
c0019524:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019527:	83 c4 20             	add    esp,0x20
c001952a:	45                   	inc    ebp
c001952b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019530:	74 0d                	je     c001953f <IDE::detect()+0x251>
c0019532:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001953a:	e9 e0 fd ff ff       	jmp    c001931f <IDE::detect()+0x31>
c001953f:	4e                   	dec    esi
c0019540:	74 61                	je     c00195a3 <IDE::detect()+0x2b5>
c0019542:	be 01 00 00 00       	mov    esi,0x1
c0019547:	e9 cb fd ff ff       	jmp    c0019317 <IDE::detect()+0x29>
c001954c:	50                   	push   eax
c001954d:	6a 04                	push   0x4
c001954f:	56                   	push   esi
c0019550:	53                   	push   ebx
c0019551:	e8 2a f7 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019556:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001955a:	83 c4 0c             	add    esp,0xc
c001955d:	6a 05                	push   0x5
c001955f:	56                   	push   esi
c0019560:	53                   	push   ebx
c0019561:	e8 1a f7 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001956d:	80 fa 14             	cmp    dl,0x14
c0019570:	75 04                	jne    c0019576 <IDE::detect()+0x288>
c0019572:	3c eb                	cmp    al,0xeb
c0019574:	eb 07                	jmp    c001957d <IDE::detect()+0x28f>
c0019576:	3c 96                	cmp    al,0x96
c0019578:	75 b1                	jne    c001952b <IDE::detect()+0x23d>
c001957a:	80 fa 69             	cmp    dl,0x69
c001957d:	75 ac                	jne    c001952b <IDE::detect()+0x23d>
c001957f:	68 a1 00 00 00       	push   0xa1
c0019584:	6a 07                	push   0x7
c0019586:	56                   	push   esi
c0019587:	53                   	push   ebx
c0019588:	e8 33 f6 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001958d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019594:	e8 fb a0 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	b1 01                	mov    cl,0x1
c001959e:	e9 6d fe ff ff       	jmp    c0019410 <IDE::detect()+0x122>
c00195a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00195a9:	5b                   	pop    ebx
c00195aa:	5e                   	pop    esi
c00195ab:	5f                   	pop    edi
c00195ac:	5d                   	pop    ebp
c00195ad:	c3                   	ret    

c00195ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00195ae:	55                   	push   ebp
c00195af:	57                   	push   edi
c00195b0:	56                   	push   esi
c00195b1:	53                   	push   ebx
c00195b2:	83 ec 1c             	sub    esp,0x1c
c00195b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00195bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00195c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00195c5:	88 c3                	mov    bl,al
c00195c7:	84 c0                	test   al,al
c00195c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195cd:	0f 84 81 00 00 00    	je     c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195d3:	83 ec 0c             	sub    esp,0xc
c00195d6:	68 97 ed 01 c0       	push   0xc001ed97
c00195db:	e8 28 0f ff ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c00195e0:	83 c4 10             	add    esp,0x10
c00195e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195e7:	3c 01                	cmp    al,0x1
c00195e9:	74 63                	je     c001964e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00195eb:	3c 02                	cmp    al,0x2
c00195ed:	75 53                	jne    c0019642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00195ef:	01 f6                	add    esi,esi
c00195f1:	09 ee                	or     esi,ebp
c00195f3:	50                   	push   eax
c00195f4:	89 f0                	mov    eax,esi
c00195f6:	6a 01                	push   0x1
c00195f8:	0f b6 f0             	movzx  esi,al
c00195fb:	c1 e6 06             	shl    esi,0x6
c00195fe:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019606:	50                   	push   eax
c0019607:	57                   	push   edi
c0019608:	e8 73 f6 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	a8 01                	test   al,0x1
c0019612:	74 02                	je     c0019616 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019614:	b3 07                	mov    bl,0x7
c0019616:	a8 02                	test   al,0x2
c0019618:	74 02                	je     c001961c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001961a:	b3 03                	mov    bl,0x3
c001961c:	a8 04                	test   al,0x4
c001961e:	74 02                	je     c0019622 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019620:	b3 14                	mov    bl,0x14
c0019622:	a8 08                	test   al,0x8
c0019624:	74 02                	je     c0019628 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019626:	b3 03                	mov    bl,0x3
c0019628:	a8 10                	test   al,0x10
c001962a:	74 02                	je     c001962e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001962c:	b3 15                	mov    bl,0x15
c001962e:	a8 20                	test   al,0x20
c0019630:	74 02                	je     c0019634 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019632:	b3 03                	mov    bl,0x3
c0019634:	a8 40                	test   al,0x40
c0019636:	74 02                	je     c001963a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019638:	b3 16                	mov    bl,0x16
c001963a:	84 c0                	test   al,al
c001963c:	79 16                	jns    c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001963e:	b3 0d                	mov    bl,0xd
c0019640:	eb 12                	jmp    c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019642:	3c 03                	cmp    al,0x3
c0019644:	74 0c                	je     c0019652 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019646:	3c 04                	cmp    al,0x4
c0019648:	75 0a                	jne    c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001964a:	b3 08                	mov    bl,0x8
c001964c:	eb 06                	jmp    c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001964e:	b3 13                	mov    bl,0x13
c0019650:	eb 02                	jmp    c0019654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019652:	b3 17                	mov    bl,0x17
c0019654:	83 c4 1c             	add    esp,0x1c
c0019657:	88 d8                	mov    al,bl
c0019659:	5b                   	pop    ebx
c001965a:	5e                   	pop    esi
c001965b:	5f                   	pop    edi
c001965c:	5d                   	pop    ebp
c001965d:	c3                   	ret    

c001965e <IDE::polling(unsigned char, unsigned int)>:
c001965e:	55                   	push   ebp
c001965f:	bd 04 00 00 00       	mov    ebp,0x4
c0019664:	57                   	push   edi
c0019665:	56                   	push   esi
c0019666:	53                   	push   ebx
c0019667:	83 ec 0c             	sub    esp,0xc
c001966a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001966e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019672:	0f b6 f3             	movzx  esi,bl
c0019675:	52                   	push   edx
c0019676:	6a 0c                	push   0xc
c0019678:	56                   	push   esi
c0019679:	57                   	push   edi
c001967a:	e8 01 f6 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001967f:	83 c4 10             	add    esp,0x10
c0019682:	4d                   	dec    ebp
c0019683:	75 ed                	jne    c0019672 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019685:	bb a0 86 01 00       	mov    ebx,0x186a0
c001968a:	50                   	push   eax
c001968b:	6a 0c                	push   0xc
c001968d:	56                   	push   esi
c001968e:	57                   	push   edi
c001968f:	e8 ec f5 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	a8 01                	test   al,0x1
c0019699:	75 17                	jne    c00196b2 <IDE::polling(unsigned char, unsigned int)+0x54>
c001969b:	a8 20                	test   al,0x20
c001969d:	75 0f                	jne    c00196ae <IDE::polling(unsigned char, unsigned int)+0x50>
c001969f:	4b                   	dec    ebx
c00196a0:	74 10                	je     c00196b2 <IDE::polling(unsigned char, unsigned int)+0x54>
c00196a2:	84 c0                	test   al,al
c00196a4:	78 e4                	js     c001968a <IDE::polling(unsigned char, unsigned int)+0x2c>
c00196a6:	a8 08                	test   al,0x8
c00196a8:	74 e0                	je     c001968a <IDE::polling(unsigned char, unsigned int)+0x2c>
c00196aa:	31 c0                	xor    eax,eax
c00196ac:	eb 06                	jmp    c00196b4 <IDE::polling(unsigned char, unsigned int)+0x56>
c00196ae:	b0 01                	mov    al,0x1
c00196b0:	eb 02                	jmp    c00196b4 <IDE::polling(unsigned char, unsigned int)+0x56>
c00196b2:	b0 02                	mov    al,0x2
c00196b4:	83 c4 0c             	add    esp,0xc
c00196b7:	5b                   	pop    ebx
c00196b8:	5e                   	pop    esi
c00196b9:	5f                   	pop    edi
c00196ba:	5d                   	pop    ebp
c00196bb:	c3                   	ret    

c00196bc <SATABus::close(int, int, void*)>:
c00196bc:	31 c0                	xor    eax,eax
c00196be:	c3                   	ret    
c00196bf:	90                   	nop

c00196c0 <SATABus::detect()>:
c00196c0:	c3                   	ret    
c00196c1:	90                   	nop

c00196c2 <SATABus::SATABus()>:
c00196c2:	83 ec 0c             	sub    esp,0xc
c00196c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c9:	83 ec 08             	sub    esp,0x8
c00196cc:	68 d0 ed 01 c0       	push   0xc001edd0
c00196d1:	50                   	push   eax
c00196d2:	e8 b5 25 ff ff       	call   c000bc8c <HardDiskController::HardDiskController(char const*)>
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c00196df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e3:	89 10                	mov    DWORD PTR [eax],edx
c00196e5:	83 ec 0c             	sub    esp,0xc
c00196e8:	6a 50                	push   0x50
c00196ea:	e8 64 e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c00196ef:	83 c4 10             	add    esp,0x10
c00196f2:	89 c2                	mov    edx,eax
c00196f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	6a 50                	push   0x50
c0019703:	e8 ad fb fe ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c0019708:	83 c4 10             	add    esp,0x10
c001970b:	89 c2                	mov    edx,eax
c001970d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019711:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019717:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c001971c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019720:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001972a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019730:	83 ec 0c             	sub    esp,0xc
c0019733:	6a 03                	push   0x3
c0019735:	6a 50                	push   0x50
c0019737:	51                   	push   ecx
c0019738:	52                   	push   edx
c0019739:	50                   	push   eax
c001973a:	e8 05 05 ff ff       	call   c0009c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001973f:	83 c4 20             	add    esp,0x20
c0019742:	90                   	nop
c0019743:	83 c4 0c             	add    esp,0xc
c0019746:	c3                   	ret    
c0019747:	90                   	nop

c0019748 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001974c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001974f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019752:	09 c2                	or     edx,eax
c0019754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019758:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001975e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019760:	31 c0                	xor    eax,eax
c0019762:	c1 e9 08             	shr    ecx,0x8
c0019765:	83 e1 0f             	and    ecx,0xf
c0019768:	39 c8                	cmp    eax,ecx
c001976a:	74 0a                	je     c0019776 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001976c:	f6 c2 01             	test   dl,0x1
c001976f:	74 08                	je     c0019779 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019771:	d1 ea                	shr    edx,1
c0019773:	40                   	inc    eax
c0019774:	eb f2                	jmp    c0019768 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019776:	83 c8 ff             	or     eax,0xffffffff
c0019779:	c3                   	ret    

c001977a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001977a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001977e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019781:	89 c2                	mov    edx,eax
c0019783:	c1 ea 08             	shr    edx,0x8
c0019786:	83 e2 0f             	and    edx,0xf
c0019789:	fe ca                	dec    dl
c001978b:	75 31                	jne    c00197be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001978d:	83 e0 0f             	and    eax,0xf
c0019790:	3c 03                	cmp    al,0x3
c0019792:	75 2a                	jne    c00197be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019794:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019797:	b8 02 00 00 00       	mov    eax,0x2
c001979c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00197a2:	74 1c                	je     c00197c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00197a4:	b8 04 00 00 00       	mov    eax,0x4
c00197a9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00197af:	74 0f                	je     c00197c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00197b1:	31 c0                	xor    eax,eax
c00197b3:	83 fa 03             	cmp    edx,0x3
c00197b6:	0f 94 c0             	sete   al
c00197b9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00197bd:	c3                   	ret    
c00197be:	31 c0                	xor    eax,eax
c00197c0:	c3                   	ret    
c00197c1:	90                   	nop

c00197c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00197c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197c9:	0f ba e2 0f          	bt     edx,0xf
c00197cd:	72 f7                	jb     c00197c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00197cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197d2:	83 ca 10             	or     edx,0x10
c00197d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197db:	83 ca 01             	or     edx,0x1
c00197de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197e1:	c3                   	ret    

c00197e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00197e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197e9:	83 e2 fe             	and    edx,0xfffffffe
c00197ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197f2:	83 e2 ef             	and    edx,0xffffffef
c00197f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197fb:	0f ba e2 0e          	bt     edx,0xe
c00197ff:	72 f7                	jb     c00197f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019801:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019804:	0f ba e2 0f          	bt     edx,0xf
c0019808:	72 ee                	jb     c00197f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001980a:	c3                   	ret    
c001980b:	90                   	nop

c001980c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001980c:	55                   	push   ebp
c001980d:	57                   	push   edi
c001980e:	56                   	push   esi
c001980f:	53                   	push   ebx
c0019810:	83 ec 1c             	sub    esp,0x1c
c0019813:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019817:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001981b:	53                   	push   ebx
c001981c:	56                   	push   esi
c001981d:	e8 c0 ff ff ff       	call   c00197e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019822:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019826:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001982c:	83 ec 0c             	sub    esp,0xc
c001982f:	c1 e5 0a             	shl    ebp,0xa
c0019832:	01 e8                	add    eax,ebp
c0019834:	89 03                	mov    DWORD PTR [ebx],eax
c0019836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019838:	68 00 04 00 00       	push   0x400
c001983d:	6a 00                	push   0x0
c001983f:	50                   	push   eax
c0019840:	e8 8b 6c fe ff       	call   c00004d0 <memset>
c0019845:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001984b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001984f:	01 e8                	add    eax,ebp
c0019851:	83 c4 1c             	add    esp,0x1c
c0019854:	89 03                	mov    DWORD PTR [ebx],eax
c0019856:	c1 e2 08             	shl    edx,0x8
c0019859:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019860:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019866:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001986c:	01 f8                	add    eax,edi
c001986e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019871:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019874:	68 00 01 00 00       	push   0x100
c0019879:	6a 00                	push   0x0
c001987b:	50                   	push   eax
c001987c:	e8 4f 6c fe ff       	call   c00004d0 <memset>
c0019881:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019887:	01 fa                	add    edx,edi
c0019889:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001988d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019890:	c1 e7 0d             	shl    edi,0xd
c0019893:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001989a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00198a0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00198a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00198aa:	31 ff                	xor    edi,edi
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00198b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198b9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00198bf:	83 c5 20             	add    ebp,0x20
c00198c2:	01 f8                	add    eax,edi
c00198c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198c7:	52                   	push   edx
c00198c8:	68 00 01 00 00       	push   0x100
c00198cd:	6a 00                	push   0x0
c00198cf:	50                   	push   eax
c00198d0:	e8 fb 6b fe ff       	call   c00004d0 <memset>
c00198d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00198e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00198e9:	01 f8                	add    eax,edi
c00198eb:	81 c7 00 01 00 00    	add    edi,0x100
c00198f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198f4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00198fa:	75 b3                	jne    c00198af <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c00198fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019903:	50                   	push   eax
c0019904:	50                   	push   eax
c0019905:	53                   	push   ebx
c0019906:	56                   	push   esi
c0019907:	e8 b6 fe ff ff       	call   c00197c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001990c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019913:	83 c4 2c             	add    esp,0x2c
c0019916:	5b                   	pop    ebx
c0019917:	5e                   	pop    esi
c0019918:	5f                   	pop    edi
c0019919:	5d                   	pop    ebp
c001991a:	c3                   	ret    
c001991b:	90                   	nop

c001991c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001991c:	55                   	push   ebp
c001991d:	57                   	push   edi
c001991e:	56                   	push   esi
c001991f:	53                   	push   ebx
c0019920:	31 db                	xor    ebx,ebx
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019929:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001992d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019930:	f7 c7 01 00 00 00    	test   edi,0x1
c0019936:	74 7a                	je     c00199b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019938:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001993c:	89 d8                	mov    eax,ebx
c001993e:	c1 e0 07             	shl    eax,0x7
c0019941:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019948:	55                   	push   ebp
c0019949:	56                   	push   esi
c001994a:	e8 2b fe ff ff       	call   c001977a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001994f:	5a                   	pop    edx
c0019950:	83 f8 01             	cmp    eax,0x1
c0019953:	59                   	pop    ecx
c0019954:	75 21                	jne    c0019977 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019956:	50                   	push   eax
c0019957:	53                   	push   ebx
c0019958:	55                   	push   ebp
c0019959:	56                   	push   esi
c001995a:	e8 ad fe ff ff       	call   c001980c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001995f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019966:	e8 4e de fe ff       	call   c00077b9 <malloc>
c001996b:	89 c5                	mov    ebp,eax
c001996d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019970:	e8 43 0d 00 00       	call   c001a6b8 <SATA::SATA()>
c0019975:	eb 24                	jmp    c001999b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019977:	83 f8 04             	cmp    eax,0x4
c001997a:	75 36                	jne    c00199b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001997c:	51                   	push   ecx
c001997d:	53                   	push   ebx
c001997e:	55                   	push   ebp
c001997f:	56                   	push   esi
c0019980:	e8 87 fe ff ff       	call   c001980c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019985:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001998c:	e8 28 de fe ff       	call   c00077b9 <malloc>
c0019991:	89 c5                	mov    ebp,eax
c0019993:	89 04 24             	mov    DWORD PTR [esp],eax
c0019996:	e8 79 10 00 00       	call   c001aa14 <SATAPI::SATAPI()>
c001999b:	58                   	pop    eax
c001999c:	5a                   	pop    edx
c001999d:	55                   	push   ebp
c001999e:	56                   	push   esi
c001999f:	e8 a4 1f ff ff       	call   c000b948 <Device::addChild(Device*)>
c00199a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199a7:	56                   	push   esi
c00199a8:	6a 00                	push   0x0
c00199aa:	53                   	push   ebx
c00199ab:	55                   	push   ebp
c00199ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00199af:	83 c4 20             	add    esp,0x20
c00199b2:	d1 ef                	shr    edi,1
c00199b4:	43                   	inc    ebx
c00199b5:	83 fb 20             	cmp    ebx,0x20
c00199b8:	0f 85 72 ff ff ff    	jne    c0019930 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00199be:	83 c4 0c             	add    esp,0xc
c00199c1:	5b                   	pop    ebx
c00199c2:	5e                   	pop    esi
c00199c3:	5f                   	pop    edi
c00199c4:	5d                   	pop    ebp
c00199c5:	c3                   	ret    

c00199c6 <SATABus::open(int, int, void*)>:
c00199c6:	83 ec 14             	sub    esp,0x14
c00199c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199cd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00199d3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00199d9:	52                   	push   edx
c00199da:	50                   	push   eax
c00199db:	e8 3c ff ff ff       	call   c001991c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00199e0:	31 c0                	xor    eax,eax
c00199e2:	83 c4 1c             	add    esp,0x1c
c00199e5:	c3                   	ret    

c00199e6 <ATA::close(int, int, void*)>:
c00199e6:	83 ec 0c             	sub    esp,0xc
c00199e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199f3:	85 c0                	test   eax,eax
c00199f5:	74 0c                	je     c0019a03 <ATA::close(int, int, void*)+0x1d>
c00199f7:	83 ec 0c             	sub    esp,0xc
c00199fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00199fc:	50                   	push   eax
c00199fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019a00:	83 c4 10             	add    esp,0x10
c0019a03:	31 c0                	xor    eax,eax
c0019a05:	83 c4 0c             	add    esp,0xc
c0019a08:	c3                   	ret    
c0019a09:	90                   	nop

c0019a0a <ATA::powerSaving(PowerSavingLevel)>:
c0019a0a:	c3                   	ret    
c0019a0b:	90                   	nop

c0019a0c <ATA::ATA()>:
c0019a0c:	83 ec 0c             	sub    esp,0xc
c0019a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a13:	83 ec 04             	sub    esp,0x4
c0019a16:	68 00 02 00 00       	push   0x200
c0019a1b:	68 c9 ee 01 c0       	push   0xc001eec9
c0019a20:	50                   	push   eax
c0019a21:	e8 f0 22 ff ff       	call   c000bd16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019a26:	83 c4 10             	add    esp,0x10
c0019a29:	ba 3c ee 01 c0       	mov    edx,0xc001ee3c
c0019a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a32:	89 10                	mov    DWORD PTR [eax],edx
c0019a34:	90                   	nop
c0019a35:	83 c4 0c             	add    esp,0xc
c0019a38:	c3                   	ret    
c0019a39:	90                   	nop

c0019a3a <ATA::flush(bool)>:
c0019a3a:	53                   	push   ebx
c0019a3b:	83 ec 08             	sub    esp,0x8
c0019a3e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019a43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a47:	19 c0                	sbb    eax,eax
c0019a49:	83 e0 fd             	and    eax,0xfffffffd
c0019a4c:	05 ea 00 00 00       	add    eax,0xea
c0019a51:	50                   	push   eax
c0019a52:	6a 07                	push   0x7
c0019a54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a5b:	50                   	push   eax
c0019a5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a62:	e8 59 f1 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a67:	83 c4 0c             	add    esp,0xc
c0019a6a:	6a 00                	push   0x0
c0019a6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a73:	50                   	push   eax
c0019a74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a7a:	e8 df fb ff ff       	call   c001965e <IDE::polling(unsigned char, unsigned int)>
c0019a7f:	83 c4 18             	add    esp,0x18
c0019a82:	5b                   	pop    ebx
c0019a83:	c3                   	ret    

c0019a84 <ATA::readyForCommand()>:
c0019a84:	56                   	push   esi
c0019a85:	53                   	push   ebx
c0019a86:	53                   	push   ebx
c0019a87:	31 db                	xor    ebx,ebx
c0019a89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a8d:	51                   	push   ecx
c0019a8e:	6a 0c                	push   0xc
c0019a90:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a97:	50                   	push   eax
c0019a98:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a9e:	e8 dd f1 ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c0019aa3:	83 c4 10             	add    esp,0x10
c0019aa6:	a8 88                	test   al,0x88
c0019aa8:	74 1f                	je     c0019ac9 <ATA::readyForCommand()+0x45>
c0019aaa:	43                   	inc    ebx
c0019aab:	83 fb 63             	cmp    ebx,0x63
c0019aae:	7e dd                	jle    c0019a8d <ATA::readyForCommand()+0x9>
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	6a 0a                	push   0xa
c0019ab5:	e8 da 9b ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c0019aba:	83 c4 10             	add    esp,0x10
c0019abd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ac3:	75 c8                	jne    c0019a8d <ATA::readyForCommand()+0x9>
c0019ac5:	31 c0                	xor    eax,eax
c0019ac7:	eb 02                	jmp    c0019acb <ATA::readyForCommand()+0x47>
c0019ac9:	b0 01                	mov    al,0x1
c0019acb:	5a                   	pop    edx
c0019acc:	5b                   	pop    ebx
c0019acd:	5e                   	pop    esi
c0019ace:	c3                   	ret    
c0019acf:	90                   	nop

c0019ad0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ad0:	55                   	push   ebp
c0019ad1:	57                   	push   edi
c0019ad2:	56                   	push   esi
c0019ad3:	53                   	push   ebx
c0019ad4:	83 ec 2c             	sub    esp,0x2c
c0019ad7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019adb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019adf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ae3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ae7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019aeb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019aef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019af3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019afd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019b03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b07:	c1 e0 06             	shl    eax,0x6
c0019b0a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019b12:	74 5d                	je     c0019b71 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019b14:	89 fa                	mov    edx,edi
c0019b16:	89 f0                	mov    eax,esi
c0019b18:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019b1c:	c1 ea 1c             	shr    edx,0x1c
c0019b1f:	89 d1                	mov    ecx,edx
c0019b21:	09 c1                	or     ecx,eax
c0019b23:	74 25                	je     c0019b4a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019b25:	31 ed                	xor    ebp,ebp
c0019b27:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019b2e:	89 fa                	mov    edx,edi
c0019b30:	89 f0                	mov    eax,esi
c0019b32:	0f ad d0             	shrd   eax,edx,cl
c0019b35:	d3 ea                	shr    edx,cl
c0019b37:	f6 c1 20             	test   cl,0x20
c0019b3a:	74 02                	je     c0019b3e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019b3c:	89 d0                	mov    eax,edx
c0019b3e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019b42:	45                   	inc    ebp
c0019b43:	83 fd 06             	cmp    ebp,0x6
c0019b46:	75 df                	jne    c0019b27 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019b48:	eb 76                	jmp    c0019bc0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019b4a:	89 f0                	mov    eax,esi
c0019b4c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019b51:	89 fa                	mov    edx,edi
c0019b53:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b5a:	0f ac d0 10          	shrd   eax,edx,0x10
c0019b5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b63:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b67:	c1 ee 18             	shr    esi,0x18
c0019b6a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019b6f:	eb 56                	jmp    c0019bc7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b71:	6a 00                	push   0x0
c0019b73:	6a 3f                	push   0x3f
c0019b75:	57                   	push   edi
c0019b76:	56                   	push   esi
c0019b77:	e8 14 22 00 00       	call   c001bd90 <__umoddi3>
c0019b7c:	83 c4 10             	add    esp,0x10
c0019b7f:	40                   	inc    eax
c0019b80:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b84:	6a 00                	push   0x0
c0019b86:	68 f0 03 00 00       	push   0x3f0
c0019b8b:	57                   	push   edi
c0019b8c:	56                   	push   esi
c0019b8d:	e8 fe 20 00 00       	call   c001bc90 <__udivdi3>
c0019b92:	83 c4 10             	add    esp,0x10
c0019b95:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b9a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ba1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019ba6:	6a 00                	push   0x0
c0019ba8:	6a 3f                	push   0x3f
c0019baa:	57                   	push   edi
c0019bab:	56                   	push   esi
c0019bac:	e8 df 20 00 00       	call   c001bc90 <__udivdi3>
c0019bb1:	83 c4 10             	add    esp,0x10
c0019bb4:	89 c6                	mov    esi,eax
c0019bb6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019bbb:	83 e6 0f             	and    esi,0xf
c0019bbe:	eb 07                	jmp    c0019bc7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019bc0:	31 f6                	xor    esi,esi
c0019bc2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019bc7:	bf 01 00 00 00       	mov    edi,0x1
c0019bcc:	50                   	push   eax
c0019bcd:	6a 00                	push   0x0
c0019bcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bd6:	50                   	push   eax
c0019bd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bdb:	e8 ee f1 ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c0019be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019be3:	e8 9c fe ff ff       	call   c0019a84 <ATA::readyForCommand()>
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	84 c0                	test   al,al
c0019bed:	0f 84 4e 02 00 00    	je     c0019e41 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019bf3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019bf9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019bff:	c1 e0 04             	shl    eax,0x4
c0019c02:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019c09:	09 c6                	or     esi,eax
c0019c0b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019c10:	75 05                	jne    c0019c17 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019c12:	83 ce a0             	or     esi,0xffffffa0
c0019c15:	eb 03                	jmp    c0019c1a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019c17:	83 ce e0             	or     esi,0xffffffe0
c0019c1a:	89 f0                	mov    eax,esi
c0019c1c:	0f b6 f0             	movzx  esi,al
c0019c1f:	56                   	push   esi
c0019c20:	6a 06                	push   0x6
c0019c22:	51                   	push   ecx
c0019c23:	52                   	push   edx
c0019c24:	e8 97 ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	6a 00                	push   0x0
c0019c2e:	6a 01                	push   0x1
c0019c30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c37:	50                   	push   eax
c0019c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c3e:	e8 7d ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c43:	83 c4 10             	add    esp,0x10
c0019c46:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c4b:	75 6e                	jne    c0019cbb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019c4d:	6a 00                	push   0x0
c0019c4f:	6a 08                	push   0x8
c0019c51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c58:	50                   	push   eax
c0019c59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c5f:	e8 5c ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c64:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019c69:	50                   	push   eax
c0019c6a:	6a 09                	push   0x9
c0019c6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c73:	50                   	push   eax
c0019c74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c7a:	e8 41 ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c7f:	83 c4 20             	add    esp,0x20
c0019c82:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c87:	50                   	push   eax
c0019c88:	6a 0a                	push   0xa
c0019c8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c91:	50                   	push   eax
c0019c92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c98:	e8 23 ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c9d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019ca2:	50                   	push   eax
c0019ca3:	6a 0b                	push   0xb
c0019ca5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cac:	50                   	push   eax
c0019cad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cb3:	e8 08 ef ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cb8:	83 c4 20             	add    esp,0x20
c0019cbb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019cc0:	50                   	push   eax
c0019cc1:	6a 02                	push   0x2
c0019cc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cca:	50                   	push   eax
c0019ccb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cd1:	e8 ea ee ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cd6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019cdb:	50                   	push   eax
c0019cdc:	6a 03                	push   0x3
c0019cde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ce5:	50                   	push   eax
c0019ce6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cec:	e8 cf ee ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cf1:	83 c4 20             	add    esp,0x20
c0019cf4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019cf9:	50                   	push   eax
c0019cfa:	6a 04                	push   0x4
c0019cfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d03:	50                   	push   eax
c0019d04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d0a:	e8 b1 ee ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d14:	50                   	push   eax
c0019d15:	6a 05                	push   0x5
c0019d17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d1e:	50                   	push   eax
c0019d1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d25:	e8 96 ee ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d2a:	83 c4 20             	add    esp,0x20
c0019d2d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019d32:	0f 94 c0             	sete   al
c0019d35:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d3a:	74 09                	je     c0019d45 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019d3c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019d43:	eb 07                	jmp    c0019d4c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019d45:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019d4c:	0f b6 c0             	movzx  eax,al
c0019d4f:	50                   	push   eax
c0019d50:	6a 07                	push   0x7
c0019d52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d59:	50                   	push   eax
c0019d5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d60:	e8 5b ee ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d65:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019d69:	83 c4 10             	add    esp,0x10
c0019d6c:	85 f6                	test   esi,esi
c0019d6e:	0f 84 ae 00 00 00    	je     c0019e22 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019d74:	50                   	push   eax
c0019d75:	6a 01                	push   0x1
c0019d77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d7e:	50                   	push   eax
c0019d7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d85:	e8 d4 f8 ff ff       	call   c001965e <IDE::polling(unsigned char, unsigned int)>
c0019d8a:	83 c4 10             	add    esp,0x10
c0019d8d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d93:	84 c0                	test   al,al
c0019d95:	74 20                	je     c0019db7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d97:	0f b6 f8             	movzx  edi,al
c0019d9a:	0f b6 d2             	movzx  edx,dl
c0019d9d:	57                   	push   edi
c0019d9e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019da5:	50                   	push   eax
c0019da6:	52                   	push   edx
c0019da7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dad:	e8 fc f7 ff ff       	call   c00195ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019db2:	e9 87 00 00 00       	jmp    c0019e3e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019db7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019dbc:	74 33                	je     c0019df1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019dbe:	31 ed                	xor    ebp,ebp
c0019dc0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019dc4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019dc8:	50                   	push   eax
c0019dc9:	50                   	push   eax
c0019dca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019dd1:	50                   	push   eax
c0019dd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dd8:	e8 d1 ed ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c0019ddd:	89 c2                	mov    edx,eax
c0019ddf:	89 f8                	mov    eax,edi
c0019de1:	66 ef                	out    dx,ax
c0019de3:	45                   	inc    ebp
c0019de4:	83 c4 10             	add    esp,0x10
c0019de7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019ded:	75 d1                	jne    c0019dc0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019def:	eb 23                	jmp    c0019e14 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019df1:	0f b6 d2             	movzx  edx,dl
c0019df4:	51                   	push   ecx
c0019df5:	51                   	push   ecx
c0019df6:	52                   	push   edx
c0019df7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dfd:	e8 ac ed ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c0019e02:	b9 00 01 00 00       	mov    ecx,0x100
c0019e07:	89 c2                	mov    edx,eax
c0019e09:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019e0d:	fc                   	cld    
c0019e0e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019e1c:	4e                   	dec    esi
c0019e1d:	e9 4a ff ff ff       	jmp    c0019d6c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019e22:	31 ff                	xor    edi,edi
c0019e24:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019e29:	74 16                	je     c0019e41 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019e2b:	50                   	push   eax
c0019e2c:	50                   	push   eax
c0019e2d:	31 c0                	xor    eax,eax
c0019e2f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019e34:	0f 94 c0             	sete   al
c0019e37:	50                   	push   eax
c0019e38:	53                   	push   ebx
c0019e39:	e8 fc fb ff ff       	call   c0019a3a <ATA::flush(bool)>
c0019e3e:	83 c4 10             	add    esp,0x10
c0019e41:	83 c4 2c             	add    esp,0x2c
c0019e44:	89 f8                	mov    eax,edi
c0019e46:	5b                   	pop    ebx
c0019e47:	5e                   	pop    esi
c0019e48:	5f                   	pop    edi
c0019e49:	5d                   	pop    ebp
c0019e4a:	c3                   	ret    
c0019e4b:	90                   	nop

c0019e4c <ATA::read(unsigned long long, int, void*)>:
c0019e4c:	57                   	push   edi
c0019e4d:	b8 04 00 00 00       	mov    eax,0x4
c0019e52:	56                   	push   esi
c0019e53:	53                   	push   ebx
c0019e54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e5c:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e67:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e6d:	77 25                	ja     c0019e94 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e6f:	b8 06 00 00 00       	mov    eax,0x6
c0019e74:	85 f6                	test   esi,esi
c0019e76:	74 1c                	je     c0019e94 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e78:	50                   	push   eax
c0019e79:	50                   	push   eax
c0019e7a:	6a 00                	push   0x0
c0019e7c:	56                   	push   esi
c0019e7d:	52                   	push   edx
c0019e7e:	53                   	push   ebx
c0019e7f:	51                   	push   ecx
c0019e80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e84:	e8 47 fc ff ff       	call   c0019ad0 <ATA::access(unsigned long long, int, void*, bool)>
c0019e89:	83 c4 20             	add    esp,0x20
c0019e8c:	85 c0                	test   eax,eax
c0019e8e:	0f 95 c0             	setne  al
c0019e91:	0f b6 c0             	movzx  eax,al
c0019e94:	5b                   	pop    ebx
c0019e95:	5e                   	pop    esi
c0019e96:	5f                   	pop    edi
c0019e97:	c3                   	ret    

c0019e98 <ATA::write(unsigned long long, int, void*)>:
c0019e98:	57                   	push   edi
c0019e99:	b8 04 00 00 00       	mov    eax,0x4
c0019e9e:	56                   	push   esi
c0019e9f:	53                   	push   ebx
c0019ea0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ea4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ea8:	8d 7a ff             	lea    edi,[edx-0x1]
c0019eab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019eaf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019eb3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019eb9:	77 25                	ja     c0019ee0 <ATA::write(unsigned long long, int, void*)+0x48>
c0019ebb:	b8 06 00 00 00       	mov    eax,0x6
c0019ec0:	85 f6                	test   esi,esi
c0019ec2:	74 1c                	je     c0019ee0 <ATA::write(unsigned long long, int, void*)+0x48>
c0019ec4:	50                   	push   eax
c0019ec5:	50                   	push   eax
c0019ec6:	6a 01                	push   0x1
c0019ec8:	56                   	push   esi
c0019ec9:	52                   	push   edx
c0019eca:	53                   	push   ebx
c0019ecb:	51                   	push   ecx
c0019ecc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ed0:	e8 fb fb ff ff       	call   c0019ad0 <ATA::access(unsigned long long, int, void*, bool)>
c0019ed5:	83 c4 20             	add    esp,0x20
c0019ed8:	85 c0                	test   eax,eax
c0019eda:	0f 95 c0             	setne  al
c0019edd:	0f b6 c0             	movzx  eax,al
c0019ee0:	5b                   	pop    ebx
c0019ee1:	5e                   	pop    esi
c0019ee2:	5f                   	pop    edi
c0019ee3:	c3                   	ret    

c0019ee4 <ATA::detectCHS()>:
c0019ee4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ee8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019eee:	c1 e0 06             	shl    eax,0x6
c0019ef1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019ef7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019f01:	c7 44 24 04 20 ee 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ee20
c0019f09:	e9 75 62 ff ff       	jmp    c0010183 <KePanic(char const*)>

c0019f0e <ATA::open(int, int, void*)>:
c0019f0e:	53                   	push   ebx
c0019f0f:	83 ec 08             	sub    esp,0x8
c0019f12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f1e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019f24:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f2a:	c1 e0 06             	shl    eax,0x6
c0019f2d:	01 d0                	add    eax,edx
c0019f2f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019f36:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019f3c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019f43:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f4d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019f53:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f5a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019f61:	75 0c                	jne    c0019f6f <ATA::open(int, int, void*)+0x61>
c0019f63:	83 ec 0c             	sub    esp,0xc
c0019f66:	53                   	push   ebx
c0019f67:	e8 78 ff ff ff       	call   c0019ee4 <ATA::detectCHS()>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f75:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f7b:	c1 e0 06             	shl    eax,0x6
c0019f7e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f85:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f8f:	d1 e8                	shr    eax,1
c0019f91:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f97:	6a 04                	push   0x4
c0019f99:	6a 0c                	push   0xc
c0019f9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fa2:	50                   	push   eax
c0019fa3:	52                   	push   edx
c0019fa4:	e8 17 ec ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fa9:	90                   	nop
c0019faa:	90                   	nop
c0019fab:	6a 00                	push   0x0
c0019fad:	6a 0c                	push   0xc
c0019faf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fb6:	50                   	push   eax
c0019fb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fbd:	e8 fe eb ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fc2:	83 c4 14             	add    esp,0x14
c0019fc5:	53                   	push   ebx
c0019fc6:	e8 b3 1d ff ff       	call   c000bd7e <PhysicalDisk::startCache()>
c0019fcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fce:	e8 3b 2e ff ff       	call   c000ce0e <createPartitionsForDisk(PhysicalDisk*)>
c0019fd3:	31 c0                	xor    eax,eax
c0019fd5:	83 c4 18             	add    esp,0x18
c0019fd8:	5b                   	pop    ebx
c0019fd9:	c3                   	ret    

c0019fda <ATAPI::write(unsigned long long, int, void*)>:
c0019fda:	b8 03 00 00 00       	mov    eax,0x3
c0019fdf:	c3                   	ret    

c0019fe0 <ATAPI::close(int, int, void*)>:
c0019fe0:	83 ec 0c             	sub    esp,0xc
c0019fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019fed:	85 c0                	test   eax,eax
c0019fef:	74 0c                	je     c0019ffd <ATAPI::close(int, int, void*)+0x1d>
c0019ff1:	83 ec 0c             	sub    esp,0xc
c0019ff4:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ff6:	50                   	push   eax
c0019ff7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ffa:	83 c4 10             	add    esp,0x10
c0019ffd:	31 c0                	xor    eax,eax
c0019fff:	83 c4 0c             	add    esp,0xc
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <ATAPI::ATAPI()>:
c001a004:	83 ec 0c             	sub    esp,0xc
c001a007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00b:	83 ec 04             	sub    esp,0x4
c001a00e:	68 00 08 00 00       	push   0x800
c001a013:	68 69 ef 01 c0       	push   0xc001ef69
c001a018:	50                   	push   eax
c001a019:	e8 f8 1c ff ff       	call   c000bd16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a01e:	83 c4 10             	add    esp,0x10
c001a021:	ba 84 ee 01 c0       	mov    edx,0xc001ee84
c001a026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a02a:	89 10                	mov    DWORD PTR [eax],edx
c001a02c:	90                   	nop
c001a02d:	83 c4 0c             	add    esp,0xc
c001a030:	c3                   	ret    
c001a031:	90                   	nop

c001a032 <ATAPI::readyForCommand()>:
c001a032:	56                   	push   esi
c001a033:	53                   	push   ebx
c001a034:	53                   	push   ebx
c001a035:	31 db                	xor    ebx,ebx
c001a037:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a03b:	51                   	push   ecx
c001a03c:	6a 0c                	push   0xc
c001a03e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a045:	50                   	push   eax
c001a046:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a04c:	e8 2f ec ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	a8 88                	test   al,0x88
c001a056:	74 25                	je     c001a07d <ATAPI::readyForCommand()+0x4b>
c001a058:	43                   	inc    ebx
c001a059:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a05f:	7e da                	jle    c001a03b <ATAPI::readyForCommand()+0x9>
c001a061:	83 ec 0c             	sub    esp,0xc
c001a064:	68 5e 01 00 00       	push   0x15e
c001a069:	e8 26 96 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c001a06e:	83 c4 10             	add    esp,0x10
c001a071:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a077:	75 c2                	jne    c001a03b <ATAPI::readyForCommand()+0x9>
c001a079:	31 c0                	xor    eax,eax
c001a07b:	eb 02                	jmp    c001a07f <ATAPI::readyForCommand()+0x4d>
c001a07d:	b0 01                	mov    al,0x1
c001a07f:	5a                   	pop    edx
c001a080:	5b                   	pop    ebx
c001a081:	5e                   	pop    esi
c001a082:	c3                   	ret    
c001a083:	90                   	nop

c001a084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a084:	55                   	push   ebp
c001a085:	57                   	push   edi
c001a086:	56                   	push   esi
c001a087:	53                   	push   ebx
c001a088:	83 ec 20             	sub    esp,0x20
c001a08b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a08f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a093:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a097:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a09b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a09f:	6a 01                	push   0x1
c001a0a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0a8:	50                   	push   eax
c001a0a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0af:	e8 1a ed ff ff       	call   c0018dce <IDE::enableIRQs(unsigned char, bool)>
c001a0b4:	5e                   	pop    esi
c001a0b5:	58                   	pop    eax
c001a0b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0bd:	50                   	push   eax
c001a0be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0c4:	e8 d1 ea ff ff       	call   c0018b9a <IDE::prepareInterrupt(unsigned char)>
c001a0c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0cc:	e8 61 ff ff ff       	call   c001a032 <ATAPI::readyForCommand()>
c001a0d1:	83 c4 10             	add    esp,0x10
c001a0d4:	84 c0                	test   al,al
c001a0d6:	75 0a                	jne    c001a0e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a0d8:	bb 01 00 00 00       	mov    ebx,0x1
c001a0dd:	e9 57 02 00 00       	jmp    c001a339 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0e2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a0e8:	c1 e0 04             	shl    eax,0x4
c001a0eb:	0f b6 c0             	movzx  eax,al
c001a0ee:	50                   	push   eax
c001a0ef:	6a 06                	push   0x6
c001a0f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0f8:	50                   	push   eax
c001a0f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ff:	e8 bc ea ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a104:	6a 00                	push   0x0
c001a106:	6a 01                	push   0x1
c001a108:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a10f:	50                   	push   eax
c001a110:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a116:	e8 a5 ea ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11b:	83 c4 20             	add    esp,0x20
c001a11e:	0f b6 c3             	movzx  eax,bl
c001a121:	0f b6 df             	movzx  ebx,bh
c001a124:	50                   	push   eax
c001a125:	6a 04                	push   0x4
c001a127:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a12e:	50                   	push   eax
c001a12f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a135:	e8 86 ea ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13a:	53                   	push   ebx
c001a13b:	6a 05                	push   0x5
c001a13d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a144:	50                   	push   eax
c001a145:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a14b:	e8 70 ea ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a150:	83 c4 20             	add    esp,0x20
c001a153:	68 a0 00 00 00       	push   0xa0
c001a158:	6a 07                	push   0x7
c001a15a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a161:	50                   	push   eax
c001a162:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a168:	e8 53 ea ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a16d:	83 c4 0c             	add    esp,0xc
c001a170:	6a 01                	push   0x1
c001a172:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a179:	50                   	push   eax
c001a17a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a180:	e8 d9 f4 ff ff       	call   c001965e <IDE::polling(unsigned char, unsigned int)>
c001a185:	83 c4 10             	add    esp,0x10
c001a188:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a18e:	84 c0                	test   al,al
c001a190:	74 23                	je     c001a1b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a192:	0f b6 d8             	movzx  ebx,al
c001a195:	0f b6 d2             	movzx  edx,dl
c001a198:	53                   	push   ebx
c001a199:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a1a0:	50                   	push   eax
c001a1a1:	52                   	push   edx
c001a1a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1a8:	e8 01 f4 ff ff       	call   c00195ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	e9 84 01 00 00       	jmp    c001a339 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a1b5:	0f b6 d2             	movzx  edx,dl
c001a1b8:	53                   	push   ebx
c001a1b9:	53                   	push   ebx
c001a1ba:	52                   	push   edx
c001a1bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1c1:	e8 e8 e9 ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c001a1c6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a1ca:	b9 06 00 00 00       	mov    ecx,0x6
c001a1cf:	89 c2                	mov    edx,eax
c001a1d1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a1d4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a1d8:	83 c4 10             	add    esp,0x10
c001a1db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1e8:	85 db                	test   ebx,ebx
c001a1ea:	0f 84 ec 00 00 00    	je     c001a2dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a1f0:	51                   	push   ecx
c001a1f1:	51                   	push   ecx
c001a1f2:	52                   	push   edx
c001a1f3:	50                   	push   eax
c001a1f4:	e8 35 eb ff ff       	call   c0018d2e <IDE::waitInterrupt(unsigned char)>
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	84 c0                	test   al,al
c001a1fe:	0f 84 d4 fe ff ff    	je     c001a0d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a204:	56                   	push   esi
c001a205:	56                   	push   esi
c001a206:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a20d:	50                   	push   eax
c001a20e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a214:	e8 81 e9 ff ff       	call   c0018b9a <IDE::prepareInterrupt(unsigned char)>
c001a219:	83 c4 0c             	add    esp,0xc
c001a21c:	6a 04                	push   0x4
c001a21e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a225:	50                   	push   eax
c001a226:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a22c:	e8 4f ea ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001a231:	83 c4 0c             	add    esp,0xc
c001a234:	89 c6                	mov    esi,eax
c001a236:	6a 05                	push   0x5
c001a238:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a23f:	50                   	push   eax
c001a240:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a246:	e8 35 ea ff ff       	call   c0018c80 <IDE::read(unsigned char, unsigned char)>
c001a24b:	89 f1                	mov    ecx,esi
c001a24d:	0f b6 c0             	movzx  eax,al
c001a250:	0f b6 f1             	movzx  esi,cl
c001a253:	c1 e0 08             	shl    eax,0x8
c001a256:	09 c6                	or     esi,eax
c001a258:	d1 fe                	sar    esi,1
c001a25a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a266:	74 41                	je     c001a2a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a268:	31 c9                	xor    ecx,ecx
c001a26a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a270:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a277:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a27b:	75 0a                	jne    c001a287 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a27d:	01 c9                	add    ecx,ecx
c001a27f:	01 cd                	add    ebp,ecx
c001a281:	4b                   	dec    ebx
c001a282:	e9 54 ff ff ff       	jmp    c001a1db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a287:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a28c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a290:	51                   	push   ecx
c001a291:	51                   	push   ecx
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	e8 15 e9 ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c001a299:	89 c2                	mov    edx,eax
c001a29b:	89 f0                	mov    eax,esi
c001a29d:	66 ef                	out    dx,ax
c001a29f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	41                   	inc    ecx
c001a2a7:	eb c1                	jmp    c001a26a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a2a9:	31 f6                	xor    esi,esi
c001a2ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a2b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a2b8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a2bc:	75 06                	jne    c001a2c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a2be:	01 f6                	add    esi,esi
c001a2c0:	01 f5                	add    ebp,esi
c001a2c2:	eb bd                	jmp    c001a281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a2c4:	51                   	push   ecx
c001a2c5:	51                   	push   ecx
c001a2c6:	52                   	push   edx
c001a2c7:	50                   	push   eax
c001a2c8:	e8 e1 e8 ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c001a2cd:	89 c2                	mov    edx,eax
c001a2cf:	66 ed                	in     ax,dx
c001a2d1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	46                   	inc    esi
c001a2da:	eb cf                	jmp    c001a2ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a2dc:	51                   	push   ecx
c001a2dd:	51                   	push   ecx
c001a2de:	52                   	push   edx
c001a2df:	50                   	push   eax
c001a2e0:	e8 49 ea ff ff       	call   c0018d2e <IDE::waitInterrupt(unsigned char)>
c001a2e5:	83 c4 10             	add    esp,0x10
c001a2e8:	84 c0                	test   al,al
c001a2ea:	0f 84 e8 fd ff ff    	je     c001a0d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a2f0:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a2f5:	52                   	push   edx
c001a2f6:	52                   	push   edx
c001a2f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2fe:	50                   	push   eax
c001a2ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a305:	e8 90 e8 ff ff       	call   c0018b9a <IDE::prepareInterrupt(unsigned char)>
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	50                   	push   eax
c001a30e:	50                   	push   eax
c001a30f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a316:	50                   	push   eax
c001a317:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a31d:	e8 8c e8 ff ff       	call   c0018bae <IDE::getBase(unsigned char)>
c001a322:	8d 50 07             	lea    edx,[eax+0x7]
c001a325:	ec                   	in     al,dx
c001a326:	83 c4 10             	add    esp,0x10
c001a329:	a8 88                	test   al,0x88
c001a32b:	74 0a                	je     c001a337 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a32d:	4b                   	dec    ebx
c001a32e:	75 dd                	jne    c001a30d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a330:	bb 02 00 00 00       	mov    ebx,0x2
c001a335:	eb 02                	jmp    c001a339 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a337:	31 db                	xor    ebx,ebx
c001a339:	83 c4 1c             	add    esp,0x1c
c001a33c:	89 d8                	mov    eax,ebx
c001a33e:	5b                   	pop    ebx
c001a33f:	5e                   	pop    esi
c001a340:	5f                   	pop    edi
c001a341:	5d                   	pop    ebp
c001a342:	c3                   	ret    
c001a343:	90                   	nop

c001a344 <ATAPI::diskRemoved()>:
c001a344:	53                   	push   ebx
c001a345:	83 ec 14             	sub    esp,0x14
c001a348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a34c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a353:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a359:	e8 2e 28 ff ff       	call   c000cb8c <LogicalDisk::unmount()>
c001a35e:	58                   	pop    eax
c001a35f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a365:	e8 6a 31 ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c001a36a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a370:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a374:	83 c4 18             	add    esp,0x18
c001a377:	5b                   	pop    ebx
c001a378:	e9 47 31 ff ff       	jmp    c000d4c4 <VCache::invalidateReadBuffer()>
c001a37d:	90                   	nop

c001a37e <ATAPI::eject()>:
c001a37e:	57                   	push   edi
c001a37f:	b9 03 00 00 00       	mov    ecx,0x3
c001a384:	53                   	push   ebx
c001a385:	83 ec 14             	sub    esp,0x14
c001a388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a38c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a390:	fc                   	cld    
c001a391:	31 c0                	xor    eax,eax
c001a393:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a395:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a39a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a39f:	50                   	push   eax
c001a3a0:	50                   	push   eax
c001a3a1:	6a 00                	push   0x0
c001a3a3:	6a 00                	push   0x0
c001a3a5:	6a 00                	push   0x0
c001a3a7:	6a 02                	push   0x2
c001a3a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a3ad:	50                   	push   eax
c001a3ae:	53                   	push   ebx
c001a3af:	e8 d0 fc ff ff       	call   c001a084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3b4:	83 c4 14             	add    esp,0x14
c001a3b7:	53                   	push   ebx
c001a3b8:	e8 87 ff ff ff       	call   c001a344 <ATAPI::diskRemoved()>
c001a3bd:	83 c4 24             	add    esp,0x24
c001a3c0:	31 c0                	xor    eax,eax
c001a3c2:	5b                   	pop    ebx
c001a3c3:	5f                   	pop    edi
c001a3c4:	c3                   	ret    
c001a3c5:	90                   	nop

c001a3c6 <ATAPI::diskInserted()>:
c001a3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a3d1:	c3                   	ret    

c001a3d2 <ATAPI::detectMedia()>:
c001a3d2:	56                   	push   esi
c001a3d3:	53                   	push   ebx
c001a3d4:	83 ec 28             	sub    esp,0x28
c001a3d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3db:	6a 0c                	push   0xc
c001a3dd:	6a 00                	push   0x0
c001a3df:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a3e3:	56                   	push   esi
c001a3e4:	e8 e7 60 fe ff       	call   c00004d0 <memset>
c001a3e9:	58                   	pop    eax
c001a3ea:	5a                   	pop    edx
c001a3eb:	6a 00                	push   0x0
c001a3ed:	6a 00                	push   0x0
c001a3ef:	6a 00                	push   0x0
c001a3f1:	6a 00                	push   0x0
c001a3f3:	56                   	push   esi
c001a3f4:	53                   	push   ebx
c001a3f5:	e8 8a fc ff ff       	call   c001a084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3fa:	83 c4 1c             	add    esp,0x1c
c001a3fd:	6a 0c                	push   0xc
c001a3ff:	6a 00                	push   0x0
c001a401:	56                   	push   esi
c001a402:	e8 c9 60 fe ff       	call   c00004d0 <memset>
c001a407:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a40c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a411:	59                   	pop    ecx
c001a412:	58                   	pop    eax
c001a413:	6a 01                	push   0x1
c001a415:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a419:	50                   	push   eax
c001a41a:	6a 00                	push   0x0
c001a41c:	6a 12                	push   0x12
c001a41e:	56                   	push   esi
c001a41f:	53                   	push   ebx
c001a420:	e8 5f fc ff ff       	call   c001a084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a425:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a429:	83 c4 20             	add    esp,0x20
c001a42c:	83 e0 7f             	and    eax,0x7f
c001a42f:	3c 70                	cmp    al,0x70
c001a431:	74 15                	je     c001a448 <ATAPI::detectMedia()+0x76>
c001a433:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a43a:	75 0c                	jne    c001a448 <ATAPI::detectMedia()+0x76>
c001a43c:	83 ec 0c             	sub    esp,0xc
c001a43f:	53                   	push   ebx
c001a440:	e8 81 ff ff ff       	call   c001a3c6 <ATAPI::diskInserted()>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a44c:	83 e0 0f             	and    eax,0xf
c001a44f:	3c 02                	cmp    al,0x2
c001a451:	75 1b                	jne    c001a46e <ATAPI::detectMedia()+0x9c>
c001a453:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a458:	75 2d                	jne    c001a487 <ATAPI::detectMedia()+0xb5>
c001a45a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a461:	74 24                	je     c001a487 <ATAPI::detectMedia()+0xb5>
c001a463:	83 ec 0c             	sub    esp,0xc
c001a466:	53                   	push   ebx
c001a467:	e8 d8 fe ff ff       	call   c001a344 <ATAPI::diskRemoved()>
c001a46c:	eb 16                	jmp    c001a484 <ATAPI::detectMedia()+0xb2>
c001a46e:	84 c0                	test   al,al
c001a470:	75 15                	jne    c001a487 <ATAPI::detectMedia()+0xb5>
c001a472:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a479:	75 0c                	jne    c001a487 <ATAPI::detectMedia()+0xb5>
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	53                   	push   ebx
c001a47f:	e8 42 ff ff ff       	call   c001a3c6 <ATAPI::diskInserted()>
c001a484:	83 c4 10             	add    esp,0x10
c001a487:	83 c4 24             	add    esp,0x24
c001a48a:	5b                   	pop    ebx
c001a48b:	5e                   	pop    esi
c001a48c:	c3                   	ret    
c001a48d:	90                   	nop

c001a48e <ATAPI::open(int, int, void*)>:
c001a48e:	56                   	push   esi
c001a48f:	53                   	push   ebx
c001a490:	50                   	push   eax
c001a491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a495:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a49d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a4a3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a4a9:	c1 e0 06             	shl    eax,0x6
c001a4ac:	01 d0                	add    eax,edx
c001a4ae:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a4b5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a4bb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a4c2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a4cc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a4d2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a4d9:	6a 04                	push   0x4
c001a4db:	6a 0c                	push   0xc
c001a4dd:	51                   	push   ecx
c001a4de:	52                   	push   edx
c001a4df:	e8 dc e6 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4e4:	90                   	nop
c001a4e5:	90                   	nop
c001a4e6:	6a 00                	push   0x0
c001a4e8:	6a 0c                	push   0xc
c001a4ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4f1:	50                   	push   eax
c001a4f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4f8:	e8 c3 e6 ff ff       	call   c0018bc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4fd:	83 c4 14             	add    esp,0x14
c001a500:	68 74 01 00 00       	push   0x174
c001a505:	e8 af d2 fe ff       	call   c00077b9 <malloc>
c001a50a:	83 c4 0c             	add    esp,0xc
c001a50d:	89 c6                	mov    esi,eax
c001a50f:	6a 00                	push   0x0
c001a511:	68 ff ff ff 7f       	push   0x7fffffff
c001a516:	6a 00                	push   0x0
c001a518:	6a 00                	push   0x0
c001a51a:	53                   	push   ebx
c001a51b:	68 20 f0 01 c0       	push   0xc001f020
c001a520:	50                   	push   eax
c001a521:	e8 b2 24 ff ff       	call   c000c9d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a526:	83 c4 14             	add    esp,0x14
c001a529:	56                   	push   esi
c001a52a:	e8 5f 25 ff ff       	call   c000ca8e <LogicalDisk::assignDriveLetter()>
c001a52f:	5a                   	pop    edx
c001a530:	0f be c0             	movsx  eax,al
c001a533:	59                   	pop    ecx
c001a534:	50                   	push   eax
c001a535:	68 6c ee 01 c0       	push   0xc001ee6c
c001a53a:	e8 c9 ff fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001a53f:	58                   	pop    eax
c001a540:	5a                   	pop    edx
c001a541:	56                   	push   esi
c001a542:	53                   	push   ebx
c001a543:	e8 00 14 ff ff       	call   c000b948 <Device::addChild(Device*)>
c001a548:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a54e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a551:	e8 28 18 ff ff       	call   c000bd7e <PhysicalDisk::startCache()>
c001a556:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a55d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a560:	e8 6d fe ff ff       	call   c001a3d2 <ATAPI::detectMedia()>
c001a565:	83 c4 14             	add    esp,0x14
c001a568:	31 c0                	xor    eax,eax
c001a56a:	5b                   	pop    ebx
c001a56b:	5e                   	pop    esi
c001a56c:	c3                   	ret    
c001a56d:	90                   	nop

c001a56e <ATAPI::read(unsigned long long, int, void*)>:
c001a56e:	55                   	push   ebp
c001a56f:	57                   	push   edi
c001a570:	56                   	push   esi
c001a571:	53                   	push   ebx
c001a572:	83 ec 1c             	sub    esp,0x1c
c001a575:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a579:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a57d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a581:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a588:	74 3c                	je     c001a5c6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a58a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a58e:	b9 03 00 00 00       	mov    ecx,0x3
c001a593:	fc                   	cld    
c001a594:	31 c0                	xor    eax,eax
c001a596:	0f ce                	bswap  esi
c001a598:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a59a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a59f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a5a3:	89 e8                	mov    eax,ebp
c001a5a5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a5a9:	50                   	push   eax
c001a5aa:	50                   	push   eax
c001a5ab:	55                   	push   ebp
c001a5ac:	c1 e5 0b             	shl    ebp,0xb
c001a5af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a5b3:	6a 00                	push   0x0
c001a5b5:	55                   	push   ebp
c001a5b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5ba:	50                   	push   eax
c001a5bb:	53                   	push   ebx
c001a5bc:	e8 c3 fa ff ff       	call   c001a084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a5c1:	83 c4 20             	add    esp,0x20
c001a5c4:	eb 1a                	jmp    c001a5e0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	53                   	push   ebx
c001a5ca:	e8 03 fe ff ff       	call   c001a3d2 <ATAPI::detectMedia()>
c001a5cf:	83 c4 10             	add    esp,0x10
c001a5d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5d9:	75 af                	jne    c001a58a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a5db:	b8 02 00 00 00       	mov    eax,0x2
c001a5e0:	83 c4 1c             	add    esp,0x1c
c001a5e3:	5b                   	pop    ebx
c001a5e4:	5e                   	pop    esi
c001a5e5:	5f                   	pop    edi
c001a5e6:	5d                   	pop    ebp
c001a5e7:	c3                   	ret    

c001a5e8 <SATA::close(int, int, void*)>:
c001a5e8:	83 ec 0c             	sub    esp,0xc
c001a5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a5f5:	85 c0                	test   eax,eax
c001a5f7:	74 0c                	je     c001a605 <SATA::close(int, int, void*)+0x1d>
c001a5f9:	83 ec 0c             	sub    esp,0xc
c001a5fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001a5fe:	50                   	push   eax
c001a5ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a602:	83 c4 10             	add    esp,0x10
c001a605:	31 c0                	xor    eax,eax
c001a607:	83 c4 0c             	add    esp,0xc
c001a60a:	c3                   	ret    
c001a60b:	90                   	nop

c001a60c <SATA::powerSaving(PowerSavingLevel)>:
c001a60c:	c3                   	ret    
c001a60d:	90                   	nop

c001a60e <SATA::open(int, int, void*)>:
c001a60e:	56                   	push   esi
c001a60f:	53                   	push   ebx
c001a610:	50                   	push   eax
c001a611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a615:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a619:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a623:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a629:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a633:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a637:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a641:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a647:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a64e:	e8 42 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a653:	89 c6                	mov    esi,eax
c001a655:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a65b:	81 c6 00 10 00 00    	add    esi,0x1000
c001a661:	e8 2f d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a666:	39 c6                	cmp    esi,eax
c001a668:	74 10                	je     c001a67a <SATA::open(int, int, void*)+0x6c>
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	68 b4 ee 01 c0       	push   0xc001eeb4
c001a672:	e8 0c 5b ff ff       	call   c0010183 <KePanic(char const*)>
c001a677:	83 c4 10             	add    esp,0x10
c001a67a:	83 ec 0c             	sub    esp,0xc
c001a67d:	6a 02                	push   0x2
c001a67f:	e8 31 ec fe ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c001a684:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a68a:	6a 03                	push   0x3
c001a68c:	50                   	push   eax
c001a68d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a693:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c001a699:	e8 ac f2 fe ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c001a69e:	83 c4 14             	add    esp,0x14
c001a6a1:	53                   	push   ebx
c001a6a2:	e8 d7 16 ff ff       	call   c000bd7e <PhysicalDisk::startCache()>
c001a6a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6aa:	e8 5f 27 ff ff       	call   c000ce0e <createPartitionsForDisk(PhysicalDisk*)>
c001a6af:	83 c4 14             	add    esp,0x14
c001a6b2:	31 c0                	xor    eax,eax
c001a6b4:	5b                   	pop    ebx
c001a6b5:	5e                   	pop    esi
c001a6b6:	c3                   	ret    
c001a6b7:	90                   	nop

c001a6b8 <SATA::SATA()>:
c001a6b8:	83 ec 0c             	sub    esp,0xc
c001a6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6bf:	83 ec 04             	sub    esp,0x4
c001a6c2:	68 00 02 00 00       	push   0x200
c001a6c7:	68 c8 ee 01 c0       	push   0xc001eec8
c001a6cc:	50                   	push   eax
c001a6cd:	e8 44 16 ff ff       	call   c000bd16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a6d2:	83 c4 10             	add    esp,0x10
c001a6d5:	ba 38 ef 01 c0       	mov    edx,0xc001ef38
c001a6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6de:	89 10                	mov    DWORD PTR [eax],edx
c001a6e0:	90                   	nop
c001a6e1:	83 c4 0c             	add    esp,0xc
c001a6e4:	c3                   	ret    
c001a6e5:	90                   	nop

c001a6e6 <SATA::access(unsigned long long, int, void*, bool)>:
c001a6e6:	55                   	push   ebp
c001a6e7:	57                   	push   edi
c001a6e8:	56                   	push   esi
c001a6e9:	53                   	push   ebx
c001a6ea:	83 ec 2c             	sub    esp,0x2c
c001a6ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a6f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a6f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6f9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a701:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a706:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a70a:	7e 10                	jle    c001a71c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a70c:	83 ec 0c             	sub    esp,0xc
c001a70f:	68 d8 ee 01 c0       	push   0xc001eed8
c001a714:	e8 6a 5a ff ff       	call   c0010183 <KePanic(char const*)>
c001a719:	83 c4 10             	add    esp,0x10
c001a71c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a722:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a728:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a72e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a732:	89 d0                	mov    eax,edx
c001a734:	c1 e0 07             	shl    eax,0x7
c001a737:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a73b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a745:	51                   	push   ecx
c001a746:	8d 42 02             	lea    eax,[edx+0x2]
c001a749:	51                   	push   ecx
c001a74a:	c1 e0 07             	shl    eax,0x7
c001a74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a751:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a755:	50                   	push   eax
c001a756:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a75c:	e8 e7 ef ff ff       	call   c0019748 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a761:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a76d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a771:	0f 84 4f 01 00 00    	je     c001a8c6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a777:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a77b:	c1 e0 09             	shl    eax,0x9
c001a77e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a783:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a787:	74 0e                	je     c001a797 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a789:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a78f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a793:	89 c1                	mov    ecx,eax
c001a795:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a797:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a79b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7a1:	8d 42 02             	lea    eax,[edx+0x2]
c001a7a4:	c1 e0 07             	shl    eax,0x7
c001a7a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7ad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a7b3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a7b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7bd:	c1 e1 05             	shl    ecx,0x5
c001a7c0:	01 c8                	add    eax,ecx
c001a7c2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7c6:	83 e1 01             	and    ecx,0x1
c001a7c9:	89 ce                	mov    esi,ecx
c001a7cb:	8a 08                	mov    cl,BYTE PTR [eax]
c001a7cd:	c1 e6 06             	shl    esi,0x6
c001a7d0:	83 e1 bf             	and    ecx,0xffffffbf
c001a7d3:	09 f1                	or     ecx,esi
c001a7d5:	88 08                	mov    BYTE PTR [eax],cl
c001a7d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a7d9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a7df:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a7e5:	89 08                	mov    DWORD PTR [eax],ecx
c001a7e7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7ed:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a7f3:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a7f9:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a7fc:	50                   	push   eax
c001a7fd:	68 90 00 00 00       	push   0x90
c001a802:	6a 00                	push   0x0
c001a804:	56                   	push   esi
c001a805:	e8 c6 5c fe ff       	call   c00004d0 <memset>
c001a80a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a810:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a814:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a81a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a81e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a822:	83 c4 10             	add    esp,0x10
c001a825:	48                   	dec    eax
c001a826:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a82b:	89 c1                	mov    ecx,eax
c001a82d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a833:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a838:	09 c8                	or     eax,ecx
c001a83a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a840:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a843:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a84a:	66 25 00 7f          	and    ax,0x7f00
c001a84e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a852:	66 0d 27 80          	or     ax,0x8027
c001a856:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a85b:	66 89 06             	mov    WORD PTR [esi],ax
c001a85e:	19 c0                	sbb    eax,eax
c001a860:	83 e0 f0             	and    eax,0xfffffff0
c001a863:	83 c0 35             	add    eax,0x35
c001a866:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a869:	89 e8                	mov    eax,ebp
c001a86b:	c1 e8 10             	shr    eax,0x10
c001a86e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a871:	89 e8                	mov    eax,ebp
c001a873:	c1 e8 18             	shr    eax,0x18
c001a876:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a879:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a87d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a884:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a887:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a88b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a88f:	89 d6                	mov    esi,edx
c001a891:	31 c0                	xor    eax,eax
c001a893:	c1 e6 07             	shl    esi,0x7
c001a896:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a89a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a8a0:	80 e1 88             	and    cl,0x88
c001a8a3:	74 0a                	je     c001a8af <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a8a5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a8aa:	74 0a                	je     c001a8b6 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a8ac:	40                   	inc    eax
c001a8ad:	eb eb                	jmp    c001a89a <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a8af:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a8b4:	75 17                	jne    c001a8cd <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a8b6:	83 ec 0c             	sub    esp,0xc
c001a8b9:	68 11 ef 01 c0       	push   0xc001ef11
c001a8be:	e8 45 fc fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001a8c3:	83 c4 10             	add    esp,0x10
c001a8c6:	b8 01 00 00 00       	mov    eax,0x1
c001a8cb:	eb 5d                	jmp    c001a92a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a8cd:	b8 01 00 00 00       	mov    eax,0x1
c001a8d2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a8d6:	c1 e2 07             	shl    edx,0x7
c001a8d9:	d3 e0                	shl    eax,cl
c001a8db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a8df:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a8e5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a8eb:	85 c8                	test   eax,ecx
c001a8ed:	74 16                	je     c001a905 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a8ef:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a8f5:	0f ba e1 1e          	bt     ecx,0x1e
c001a8f9:	73 ea                	jae    c001a8e5 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a8fb:	83 ec 0c             	sub    esp,0xc
c001a8fe:	68 1f ef 01 c0       	push   0xc001ef1f
c001a903:	eb b9                	jmp    c001a8be <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a905:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a90b:	0f ba e0 1e          	bt     eax,0x1e
c001a90f:	72 b5                	jb     c001a8c6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a911:	31 c0                	xor    eax,eax
c001a913:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a918:	75 10                	jne    c001a92a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a91a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a920:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a924:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a928:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a92a:	83 c4 2c             	add    esp,0x2c
c001a92d:	5b                   	pop    ebx
c001a92e:	5e                   	pop    esi
c001a92f:	5f                   	pop    edi
c001a930:	5d                   	pop    ebp
c001a931:	c3                   	ret    

c001a932 <SATA::read(unsigned long long, int, void*)>:
c001a932:	57                   	push   edi
c001a933:	b8 04 00 00 00       	mov    eax,0x4
c001a938:	56                   	push   esi
c001a939:	53                   	push   ebx
c001a93a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a93e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a942:	8d 7a ff             	lea    edi,[edx-0x1]
c001a945:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a949:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a94d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a953:	77 25                	ja     c001a97a <SATA::read(unsigned long long, int, void*)+0x48>
c001a955:	b8 06 00 00 00       	mov    eax,0x6
c001a95a:	85 f6                	test   esi,esi
c001a95c:	74 1c                	je     c001a97a <SATA::read(unsigned long long, int, void*)+0x48>
c001a95e:	50                   	push   eax
c001a95f:	50                   	push   eax
c001a960:	6a 00                	push   0x0
c001a962:	56                   	push   esi
c001a963:	52                   	push   edx
c001a964:	53                   	push   ebx
c001a965:	51                   	push   ecx
c001a966:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a96a:	e8 77 fd ff ff       	call   c001a6e6 <SATA::access(unsigned long long, int, void*, bool)>
c001a96f:	83 c4 20             	add    esp,0x20
c001a972:	85 c0                	test   eax,eax
c001a974:	0f 95 c0             	setne  al
c001a977:	0f b6 c0             	movzx  eax,al
c001a97a:	5b                   	pop    ebx
c001a97b:	5e                   	pop    esi
c001a97c:	5f                   	pop    edi
c001a97d:	c3                   	ret    

c001a97e <SATA::write(unsigned long long, int, void*)>:
c001a97e:	55                   	push   ebp
c001a97f:	b8 04 00 00 00       	mov    eax,0x4
c001a984:	57                   	push   edi
c001a985:	56                   	push   esi
c001a986:	53                   	push   ebx
c001a987:	83 ec 0c             	sub    esp,0xc
c001a98a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a98e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a992:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a995:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a999:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a99d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a9a3:	77 3d                	ja     c001a9e2 <SATA::write(unsigned long long, int, void*)+0x64>
c001a9a5:	b8 06 00 00 00       	mov    eax,0x6
c001a9aa:	85 ed                	test   ebp,ebp
c001a9ac:	74 34                	je     c001a9e2 <SATA::write(unsigned long long, int, void*)+0x64>
c001a9ae:	c1 e3 09             	shl    ebx,0x9
c001a9b1:	01 eb                	add    ebx,ebp
c001a9b3:	89 d6                	mov    esi,edx
c001a9b5:	89 cf                	mov    edi,ecx
c001a9b7:	83 c6 01             	add    esi,0x1
c001a9ba:	83 d7 00             	adc    edi,0x0
c001a9bd:	50                   	push   eax
c001a9be:	50                   	push   eax
c001a9bf:	6a 01                	push   0x1
c001a9c1:	55                   	push   ebp
c001a9c2:	81 c5 00 02 00 00    	add    ebp,0x200
c001a9c8:	6a 01                	push   0x1
c001a9ca:	51                   	push   ecx
c001a9cb:	52                   	push   edx
c001a9cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a9d0:	e8 11 fd ff ff       	call   c001a6e6 <SATA::access(unsigned long long, int, void*, bool)>
c001a9d5:	83 c4 20             	add    esp,0x20
c001a9d8:	89 f2                	mov    edx,esi
c001a9da:	89 f9                	mov    ecx,edi
c001a9dc:	39 dd                	cmp    ebp,ebx
c001a9de:	75 d3                	jne    c001a9b3 <SATA::write(unsigned long long, int, void*)+0x35>
c001a9e0:	31 c0                	xor    eax,eax
c001a9e2:	83 c4 0c             	add    esp,0xc
c001a9e5:	5b                   	pop    ebx
c001a9e6:	5e                   	pop    esi
c001a9e7:	5f                   	pop    edi
c001a9e8:	5d                   	pop    ebp
c001a9e9:	c3                   	ret    

c001a9ea <SATAPI::write(unsigned long long, int, void*)>:
c001a9ea:	b8 03 00 00 00       	mov    eax,0x3
c001a9ef:	c3                   	ret    

c001a9f0 <SATAPI::close(int, int, void*)>:
c001a9f0:	83 ec 0c             	sub    esp,0xc
c001a9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9fd:	85 c0                	test   eax,eax
c001a9ff:	74 0c                	je     c001aa0d <SATAPI::close(int, int, void*)+0x1d>
c001aa01:	83 ec 0c             	sub    esp,0xc
c001aa04:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa06:	50                   	push   eax
c001aa07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	31 c0                	xor    eax,eax
c001aa0f:	83 c4 0c             	add    esp,0xc
c001aa12:	c3                   	ret    
c001aa13:	90                   	nop

c001aa14 <SATAPI::SATAPI()>:
c001aa14:	83 ec 0c             	sub    esp,0xc
c001aa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa1b:	83 ec 04             	sub    esp,0x4
c001aa1e:	68 00 08 00 00       	push   0x800
c001aa23:	68 68 ef 01 c0       	push   0xc001ef68
c001aa28:	50                   	push   eax
c001aa29:	e8 e8 12 ff ff       	call   c000bd16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa3a:	89 10                	mov    DWORD PTR [eax],edx
c001aa3c:	90                   	nop
c001aa3d:	83 c4 0c             	add    esp,0xc
c001aa40:	c3                   	ret    
c001aa41:	90                   	nop

c001aa42 <SATAPI::diskRemoved()>:
c001aa42:	c3                   	ret    
c001aa43:	90                   	nop

c001aa44 <SATAPI::diskInserted()>:
c001aa44:	83 ec 18             	sub    esp,0x18
c001aa47:	68 74 ef 01 c0       	push   0xc001ef74
c001aa4c:	e8 b7 fa fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001aa51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa55:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa5c:	83 c4 1c             	add    esp,0x1c
c001aa5f:	c3                   	ret    

c001aa60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa60:	55                   	push   ebp
c001aa61:	57                   	push   edi
c001aa62:	56                   	push   esi
c001aa63:	53                   	push   ebx
c001aa64:	83 ec 38             	sub    esp,0x38
c001aa67:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa6b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa6f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa77:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa7b:	68 8c ef 01 c0       	push   0xc001ef8c
c001aa80:	e8 83 fa fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001aa85:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa95:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa9f:	83 c0 02             	add    eax,0x2
c001aaa2:	c1 e0 07             	shl    eax,0x7
c001aaa5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aab1:	c1 e0 07             	shl    eax,0x7
c001aab4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aab8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aabc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aac6:	58                   	pop    eax
c001aac7:	5a                   	pop    edx
c001aac8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aacc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aad2:	e8 71 ec ff ff       	call   c0019748 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aad7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aadb:	83 c4 10             	add    esp,0x10
c001aade:	b8 01 00 00 00       	mov    eax,0x1
c001aae3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aae8:	0f 84 49 02 00 00    	je     c001ad37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aaee:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001aafa:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ab00:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ab06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab0a:	c1 e1 05             	shl    ecx,0x5
c001ab0d:	01 c8                	add    eax,ecx
c001ab0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab11:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ab17:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ab1d:	89 08                	mov    DWORD PTR [eax],ecx
c001ab1f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ab25:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ab2b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ab31:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ab34:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ab37:	50                   	push   eax
c001ab38:	68 90 00 00 00       	push   0x90
c001ab3d:	6a 00                	push   0x0
c001ab3f:	53                   	push   ebx
c001ab40:	e8 8b 59 fe ff       	call   c00004d0 <memset>
c001ab45:	b9 0c 00 00 00       	mov    ecx,0xc
c001ab4a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab50:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab56:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab5a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab60:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab64:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab68:	48                   	dec    eax
c001ab69:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab6e:	89 c1                	mov    ecx,eax
c001ab70:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab76:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab7b:	09 c8                	or     eax,ecx
c001ab7d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab83:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab86:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab8d:	66 25 00 7f          	and    ax,0x7f00
c001ab91:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab95:	66 0d 27 80          	or     ax,0x8027
c001ab99:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab9d:	66 89 03             	mov    WORD PTR [ebx],ax
c001aba0:	89 d0                	mov    eax,edx
c001aba2:	c1 ea 18             	shr    edx,0x18
c001aba5:	c1 e8 10             	shr    eax,0x10
c001aba8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001abab:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001abae:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001abb2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001abb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001abb9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001abbc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001abc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abcb:	31 c0                	xor    eax,eax
c001abcd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001abd3:	80 e1 88             	and    cl,0x88
c001abd6:	74 0a                	je     c001abe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001abd8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abdd:	74 0a                	je     c001abe9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001abdf:	40                   	inc    eax
c001abe0:	eb eb                	jmp    c001abcd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001abe2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abe7:	75 43                	jne    c001ac2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001abe9:	83 ec 0c             	sub    esp,0xc
c001abec:	68 a6 ef 01 c0       	push   0xc001efa6
c001abf1:	e8 12 f9 fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001abf6:	58                   	pop    eax
c001abf7:	5a                   	pop    edx
c001abf8:	68 bb ef 01 c0       	push   0xc001efbb
c001abfd:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001ac03:	e8 2e db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001ac08:	59                   	pop    ecx
c001ac09:	5b                   	pop    ebx
c001ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ac0e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac14:	e8 c9 eb ff ff       	call   c00197e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ac19:	5e                   	pop    esi
c001ac1a:	5f                   	pop    edi
c001ac1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ac1f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac25:	e8 98 eb ff ff       	call   c00197c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ac2a:	eb 48                	jmp    c001ac74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001ac2c:	be 01 00 00 00       	mov    esi,0x1
c001ac31:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ac39:	d3 e6                	shl    esi,cl
c001ac3b:	c1 e7 07             	shl    edi,0x7
c001ac3e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ac44:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ac49:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac4d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac53:	85 c6                	test   esi,eax
c001ac55:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac5b:	0f 84 a3 00 00 00    	je     c001ad04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ac61:	0f ba e0 1e          	bt     eax,0x1e
c001ac65:	73 1a                	jae    c001ac81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	68 cd ef 01 c0       	push   0xc001efcd
c001ac6f:	e8 94 f8 fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	b8 01 00 00 00       	mov    eax,0x1
c001ac7c:	e9 b6 00 00 00       	jmp    c001ad37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac81:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac87:	83 f8 0d             	cmp    eax,0xd
c001ac8a:	77 0a                	ja     c001ac96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	68 c8 00 00 00       	push   0xc8
c001ac94:	eb 28                	jmp    c001acbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac96:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac9c:	83 f8 0d             	cmp    eax,0xd
c001ac9f:	77 0a                	ja     c001acab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001aca1:	83 ec 0c             	sub    esp,0xc
c001aca4:	68 58 02 00 00       	push   0x258
c001aca9:	eb 13                	jmp    c001acbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001acab:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001acb1:	83 f8 06             	cmp    eax,0x6
c001acb4:	77 10                	ja     c001acc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	68 dc 05 00 00       	push   0x5dc
c001acbe:	e8 d1 89 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c001acc3:	83 c4 10             	add    esp,0x10
c001acc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001acca:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001accd:	75 06                	jne    c001acd5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001accf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001acd3:	74 15                	je     c001acea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001acd5:	83 fb 06             	cmp    ebx,0x6
c001acd8:	77 10                	ja     c001acea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001acda:	83 ec 0c             	sub    esp,0xc
c001acdd:	68 c4 09 00 00       	push   0x9c4
c001ace2:	e8 ad 89 ff ff       	call   c0013694 <milliTenthSleep(unsigned int)>
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	43                   	inc    ebx
c001aceb:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001acf1:	0f 85 56 ff ff ff    	jne    c001ac4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001acf7:	83 ec 0c             	sub    esp,0xc
c001acfa:	68 e0 ef 01 c0       	push   0xc001efe0
c001acff:	e9 6b ff ff ff       	jmp    c001ac6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ad04:	0f ba e0 1e          	bt     eax,0x1e
c001ad08:	73 0d                	jae    c001ad17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	68 f4 ef 01 c0       	push   0xc001eff4
c001ad12:	e9 58 ff ff ff       	jmp    c001ac6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ad17:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ad1c:	74 17                	je     c001ad35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad1e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ad23:	74 10                	je     c001ad35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad25:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ad2b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ad2f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ad33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad35:	31 c0                	xor    eax,eax
c001ad37:	83 c4 2c             	add    esp,0x2c
c001ad3a:	5b                   	pop    ebx
c001ad3b:	5e                   	pop    esi
c001ad3c:	5f                   	pop    edi
c001ad3d:	5d                   	pop    ebp
c001ad3e:	c3                   	ret    
c001ad3f:	90                   	nop

c001ad40 <SATAPI::eject()>:
c001ad40:	57                   	push   edi
c001ad41:	b9 03 00 00 00       	mov    ecx,0x3
c001ad46:	83 ec 18             	sub    esp,0x18
c001ad49:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad4d:	fc                   	cld    
c001ad4e:	31 c0                	xor    eax,eax
c001ad50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad52:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad57:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad5c:	50                   	push   eax
c001ad5d:	6a 00                	push   0x0
c001ad5f:	6a 00                	push   0x0
c001ad61:	6a 00                	push   0x0
c001ad63:	6a 00                	push   0x0
c001ad65:	6a 02                	push   0x2
c001ad67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad6b:	50                   	push   eax
c001ad6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad70:	e8 eb fc ff ff       	call   c001aa60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad75:	31 c0                	xor    eax,eax
c001ad77:	83 c4 38             	add    esp,0x38
c001ad7a:	5f                   	pop    edi
c001ad7b:	c3                   	ret    

c001ad7c <SATAPI::detectMedia()>:
c001ad7c:	53                   	push   ebx
c001ad7d:	83 ec 14             	sub    esp,0x14
c001ad80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad84:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad8a:	e8 45 27 ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c001ad8f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad99:	83 c4 18             	add    esp,0x18
c001ad9c:	5b                   	pop    ebx
c001ad9d:	e9 22 27 ff ff       	jmp    c000d4c4 <VCache::invalidateReadBuffer()>

c001ada2 <SATAPI::open(int, int, void*)>:
c001ada2:	56                   	push   esi
c001ada3:	53                   	push   ebx
c001ada4:	51                   	push   ecx
c001ada5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ada9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001adb7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001adbd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001adc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adcb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001add5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001addb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ade2:	e8 ae cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ade7:	89 c6                	mov    esi,eax
c001ade9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001adef:	81 c6 00 10 00 00    	add    esi,0x1000
c001adf5:	e8 9b cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001adfa:	39 c6                	cmp    esi,eax
c001adfc:	74 10                	je     c001ae0e <SATAPI::open(int, int, void*)+0x6c>
c001adfe:	83 ec 0c             	sub    esp,0xc
c001ae01:	68 09 f0 01 c0       	push   0xc001f009
c001ae06:	e8 78 53 ff ff       	call   c0010183 <KePanic(char const*)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	83 ec 0c             	sub    esp,0xc
c001ae11:	6a 02                	push   0x2
c001ae13:	e8 9d e4 fe ff       	call   c00092b5 <Virt::allocateKernelVirtualPages(int)>
c001ae18:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ae1e:	6a 03                	push   0x3
c001ae20:	50                   	push   eax
c001ae21:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ae27:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c001ae2d:	e8 18 eb fe ff       	call   c000994a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae32:	83 c4 14             	add    esp,0x14
c001ae35:	68 74 01 00 00       	push   0x174
c001ae3a:	e8 7a c9 fe ff       	call   c00077b9 <malloc>
c001ae3f:	83 c4 0c             	add    esp,0xc
c001ae42:	89 c6                	mov    esi,eax
c001ae44:	6a 00                	push   0x0
c001ae46:	68 ff ff ff 7f       	push   0x7fffffff
c001ae4b:	6a 00                	push   0x0
c001ae4d:	6a 00                	push   0x0
c001ae4f:	53                   	push   ebx
c001ae50:	68 1f f0 01 c0       	push   0xc001f01f
c001ae55:	50                   	push   eax
c001ae56:	e8 7d 1b ff ff       	call   c000c9d8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae5b:	83 c4 14             	add    esp,0x14
c001ae5e:	56                   	push   esi
c001ae5f:	e8 2a 1c ff ff       	call   c000ca8e <LogicalDisk::assignDriveLetter()>
c001ae64:	5a                   	pop    edx
c001ae65:	0f be c0             	movsx  eax,al
c001ae68:	59                   	pop    ecx
c001ae69:	50                   	push   eax
c001ae6a:	68 6c ee 01 c0       	push   0xc001ee6c
c001ae6f:	e8 94 f6 fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001ae74:	58                   	pop    eax
c001ae75:	5a                   	pop    edx
c001ae76:	56                   	push   esi
c001ae77:	53                   	push   ebx
c001ae78:	e8 cb 0a ff ff       	call   c000b948 <Device::addChild(Device*)>
c001ae7d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae86:	e8 f3 0e ff ff       	call   c000bd7e <PhysicalDisk::startCache()>
c001ae8b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae95:	e8 e2 fe ff ff       	call   c001ad7c <SATAPI::detectMedia()>
c001ae9a:	83 c4 14             	add    esp,0x14
c001ae9d:	31 c0                	xor    eax,eax
c001ae9f:	5b                   	pop    ebx
c001aea0:	5e                   	pop    esi
c001aea1:	c3                   	ret    

c001aea2 <SATAPI::read(unsigned long long, int, void*)>:
c001aea2:	57                   	push   edi
c001aea3:	56                   	push   esi
c001aea4:	53                   	push   ebx
c001aea5:	83 ec 3c             	sub    esp,0x3c
c001aea8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeac:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aeb0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001aeb4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001aeb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aebc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aec0:	68 2d f0 01 c0       	push   0xc001f02d
c001aec5:	e8 3e f6 fe ff       	call   c000a508 <Dbg::kprintf(char const*, ...)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	83 fe 04             	cmp    esi,0x4
c001aed0:	7e 10                	jle    c001aee2 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	68 3e f0 01 c0       	push   0xc001f03e
c001aeda:	e8 a4 52 ff ff       	call   c0010183 <KePanic(char const*)>
c001aedf:	83 c4 10             	add    esp,0x10
c001aee2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001aee8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001aeee:	51                   	push   ecx
c001aeef:	50                   	push   eax
c001aef0:	83 c0 02             	add    eax,0x2
c001aef3:	c1 e0 07             	shl    eax,0x7
c001aef6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001aefc:	50                   	push   eax
c001aefd:	52                   	push   edx
c001aefe:	e8 09 e9 ff ff       	call   c001980c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af03:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001af07:	b9 03 00 00 00       	mov    ecx,0x3
c001af0c:	fc                   	cld    
c001af0d:	31 c0                	xor    eax,eax
c001af0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af11:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001af16:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001af1b:	83 c4 0c             	add    esp,0xc
c001af1e:	6a 00                	push   0x0
c001af20:	6a 00                	push   0x0
c001af22:	6a 00                	push   0x0
c001af24:	6a 00                	push   0x0
c001af26:	6a 02                	push   0x2
c001af28:	8d 44 24 30          	lea    eax,[esp+0x30]
c001af2c:	50                   	push   eax
c001af2d:	53                   	push   ebx
c001af2e:	e8 2d fb ff ff       	call   c001aa60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af33:	83 c4 20             	add    esp,0x20
c001af36:	85 c0                	test   eax,eax
c001af38:	75 44                	jne    c001af7e <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001af3a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001af3e:	b9 03 00 00 00       	mov    ecx,0x3
c001af43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af49:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001af4e:	0f c8                	bswap  eax
c001af50:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001af54:	89 f0                	mov    eax,esi
c001af56:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001af5a:	50                   	push   eax
c001af5b:	56                   	push   esi
c001af5c:	c1 e6 0b             	shl    esi,0xb
c001af5f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001af63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af6b:	56                   	push   esi
c001af6c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af70:	50                   	push   eax
c001af71:	53                   	push   ebx
c001af72:	e8 e9 fa ff ff       	call   c001aa60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af77:	83 c4 20             	add    esp,0x20
c001af7a:	85 c0                	test   eax,eax
c001af7c:	74 14                	je     c001af92 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001af7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af82:	83 ec 0c             	sub    esp,0xc
c001af85:	53                   	push   ebx
c001af86:	e8 f1 fd ff ff       	call   c001ad7c <SATAPI::detectMedia()>
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af92:	83 c4 30             	add    esp,0x30
c001af95:	5b                   	pop    ebx
c001af96:	5e                   	pop    esi
c001af97:	5f                   	pop    edi
c001af98:	c3                   	ret    
c001af99:	90                   	nop

c001af9a <IOAPIC::close(int, int, void*)>:
c001af9a:	b8 00 00 00 00       	mov    eax,0x0
c001af9f:	c3                   	ret    

c001afa0 <apicGetBase()>:
c001afa0:	55                   	push   ebp
c001afa1:	89 e5                	mov    ebp,esp
c001afa3:	83 ec 18             	sub    esp,0x18
c001afa6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001afab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001afb1:	83 e0 08             	and    eax,0x8
c001afb4:	84 c0                	test   al,al
c001afb6:	75 07                	jne    c001afbf <apicGetBase()+0x1f>
c001afb8:	b8 00 00 00 00       	mov    eax,0x0
c001afbd:	eb 21                	jmp    c001afe0 <apicGetBase()+0x40>
c001afbf:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001afc4:	83 ec 08             	sub    esp,0x8
c001afc7:	6a 1b                	push   0x1b
c001afc9:	50                   	push   eax
c001afca:	e8 23 be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001afd5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001afd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001afdb:	25 00 00 ff ff       	and    eax,0xffff0000
c001afe0:	c9                   	leave  
c001afe1:	c3                   	ret    

c001afe2 <IOAPIC::IOAPIC()>:
c001afe2:	83 ec 0c             	sub    esp,0xc
c001afe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe9:	83 ec 08             	sub    esp,0x8
c001afec:	68 a0 f0 01 c0       	push   0xc001f0a0
c001aff1:	50                   	push   eax
c001aff2:	e8 e9 0a ff ff       	call   c000bae0 <Device::Device(char const*)>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c001afff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b003:	89 10                	mov    DWORD PTR [eax],edx
c001b005:	90                   	nop
c001b006:	83 c4 0c             	add    esp,0xc
c001b009:	c3                   	ret    

c001b00a <apicOpen()>:
c001b00a:	55                   	push   ebp
c001b00b:	89 e5                	mov    ebp,esp
c001b00d:	53                   	push   ebx
c001b00e:	83 ec 34             	sub    esp,0x34
c001b011:	a0 c0 41 02 c0       	mov    al,ds:0xc00241c0
c001b016:	83 f0 01             	xor    eax,0x1
c001b019:	84 c0                	test   al,al
c001b01b:	0f 84 9d 00 00 00    	je     c001b0be <apicOpen()+0xb4>
c001b021:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b025:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c001b02a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b02d:	0f 83 84 00 00 00    	jae    c001b0b7 <apicOpen()+0xad>
c001b033:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b03a:	83 ec 0c             	sub    esp,0xc
c001b03d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b040:	e8 74 c7 fe ff       	call   c00077b9 <malloc>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	89 c3                	mov    ebx,eax
c001b04a:	83 ec 0c             	sub    esp,0xc
c001b04d:	53                   	push   ebx
c001b04e:	e8 8f ff ff ff       	call   c001afe2 <IOAPIC::IOAPIC()>
c001b053:	83 c4 10             	add    esp,0x10
c001b056:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b059:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b05c:	25 ff 00 00 00       	and    eax,0xff
c001b061:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b064:	89 14 85 a0 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe60],edx
c001b06b:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c001b070:	40                   	inc    eax
c001b071:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c001b076:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001b07b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b081:	83 ec 08             	sub    esp,0x8
c001b084:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b087:	50                   	push   eax
c001b088:	e8 bb 08 ff ff       	call   c000b948 <Device::addChild(Device*)>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b093:	8b 00                	mov    eax,DWORD PTR [eax]
c001b095:	83 c0 08             	add    eax,0x8
c001b098:	8b 10                	mov    edx,DWORD PTR [eax]
c001b09a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b09d:	25 ff 00 00 00       	and    eax,0xff
c001b0a2:	6a 00                	push   0x0
c001b0a4:	6a 00                	push   0x0
c001b0a6:	50                   	push   eax
c001b0a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b0aa:	ff d2                	call   edx
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b0b2:	e9 6e ff ff ff       	jmp    c001b025 <apicOpen()+0x1b>
c001b0b7:	c6 05 c0 41 02 c0 01 	mov    BYTE PTR ds:0xc00241c0,0x1
c001b0be:	e8 dd fe ff ff       	call   c001afa0 <apicGetBase()>
c001b0c3:	05 f0 00 00 00       	add    eax,0xf0
c001b0c8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b0cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0d0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b0d3:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b0da:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b0e1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0e4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b0e7:	89 10                	mov    DWORD PTR [eax],edx
c001b0e9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b0f0:	a1 f0 2c 02 c0       	mov    eax,ds:0xc0022cf0
c001b0f5:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b0f8:	7d 70                	jge    c001b16a <apicOpen()+0x160>
c001b0fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0fd:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b104:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b107:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b10a:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b111:	c1 e8 08             	shr    eax,0x8
c001b114:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b118:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b11b:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b122:	c1 e8 18             	shr    eax,0x18
c001b125:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b128:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b12c:	75 37                	jne    c001b165 <apicOpen()+0x15b>
c001b12e:	e8 6d fe ff ff       	call   c001afa0 <apicGetBase()>
c001b133:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b137:	75 07                	jne    c001b140 <apicOpen()+0x136>
c001b139:	ba 60 03 00 00       	mov    edx,0x360
c001b13e:	eb 05                	jmp    c001b145 <apicOpen()+0x13b>
c001b140:	ba 50 03 00 00       	mov    edx,0x350
c001b145:	01 d0                	add    eax,edx
c001b147:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b14a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b14d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b14f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b152:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b159:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b15d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b160:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b163:	89 10                	mov    DWORD PTR [eax],edx
c001b165:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b168:	eb 86                	jmp    c001b0f0 <apicOpen()+0xe6>
c001b16a:	90                   	nop
c001b16b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b16e:	c9                   	leave  
c001b16f:	c3                   	ret    

c001b170 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b170:	55                   	push   ebp
c001b171:	89 e5                	mov    ebp,esp
c001b173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b176:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b17c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b17f:	72 1d                	jb     c001b19e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b184:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b18a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b18d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b193:	01 d0                	add    eax,edx
c001b195:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b198:	73 04                	jae    c001b19e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b19a:	b0 01                	mov    al,0x1
c001b19c:	eb 02                	jmp    c001b1a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b19e:	b0 00                	mov    al,0x0
c001b1a0:	5d                   	pop    ebp
c001b1a1:	c3                   	ret    

c001b1a2 <IOAPIC::read(int)>:
c001b1a2:	55                   	push   ebp
c001b1a3:	89 e5                	mov    ebp,esp
c001b1a5:	83 ec 10             	sub    esp,0x10
c001b1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b1b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b1b7:	31 d2                	xor    edx,edx
c001b1b9:	88 c2                	mov    dl,al
c001b1bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1be:	89 10                	mov    DWORD PTR [eax],edx
c001b1c0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1c3:	83 c0 10             	add    eax,0x10
c001b1c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1c8:	c9                   	leave  
c001b1c9:	c3                   	ret    

c001b1ca <IOAPIC::open(int, int, void*)>:
c001b1ca:	55                   	push   ebp
c001b1cb:	89 e5                	mov    ebp,esp
c001b1cd:	57                   	push   edi
c001b1ce:	56                   	push   esi
c001b1cf:	53                   	push   ebx
c001b1d0:	83 ec 04             	sub    esp,0x4
c001b1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b1d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1e8:	8b 14 85 e0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd220]
c001b1ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b201:	8b 14 85 60 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1a0]
c001b208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b20b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b214:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b21a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b21d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b223:	89 c6                	mov    esi,eax
c001b225:	81 e6 ff 00 00 00    	and    esi,0xff
c001b22b:	89 d0                	mov    eax,edx
c001b22d:	ba 00 00 00 00       	mov    edx,0x0
c001b232:	89 c7                	mov    edi,eax
c001b234:	83 e7 ff             	and    edi,0xffffffff
c001b237:	89 f9                	mov    ecx,edi
c001b239:	89 d0                	mov    eax,edx
c001b23b:	25 ff 00 00 00       	and    eax,0xff
c001b240:	89 c3                	mov    ebx,eax
c001b242:	89 c8                	mov    eax,ecx
c001b244:	89 da                	mov    edx,ebx
c001b246:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b249:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b24c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b250:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b254:	83 e0 00             	and    eax,0x0
c001b257:	09 d0                	or     eax,edx
c001b259:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b260:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b266:	8d 50 01             	lea    edx,[eax+0x1]
c001b269:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b26c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b272:	31 d2                	xor    edx,edx
c001b274:	88 c2                	mov    dl,al
c001b276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b279:	83 c2 08             	add    edx,0x8
c001b27c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b280:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b286:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b28c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b290:	6a 01                	push   0x1
c001b292:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b295:	e8 08 ff ff ff       	call   c001b1a2 <IOAPIC::read(int)>
c001b29a:	83 c4 08             	add    esp,0x8
c001b29d:	c1 f8 10             	sar    eax,0x10
c001b2a0:	25 ff 00 00 00       	and    eax,0xff
c001b2a5:	8d 50 01             	lea    edx,[eax+0x1]
c001b2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b2ab:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b2b1:	b8 00 00 00 00       	mov    eax,0x0
c001b2b6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b2b9:	5b                   	pop    ebx
c001b2ba:	5e                   	pop    esi
c001b2bb:	5f                   	pop    edi
c001b2bc:	5d                   	pop    ebp
c001b2bd:	c3                   	ret    

c001b2be <IOAPIC::write(int, int)>:
c001b2be:	55                   	push   ebp
c001b2bf:	89 e5                	mov    ebp,esp
c001b2c1:	83 ec 10             	sub    esp,0x10
c001b2c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b2c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b2d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2d3:	31 d2                	xor    edx,edx
c001b2d5:	88 c2                	mov    dl,al
c001b2d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2da:	89 10                	mov    DWORD PTR [eax],edx
c001b2dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2df:	8d 50 10             	lea    edx,[eax+0x10]
c001b2e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2e5:	89 02                	mov    DWORD PTR [edx],eax
c001b2e7:	90                   	nop
c001b2e8:	c9                   	leave  
c001b2e9:	c3                   	ret    

c001b2ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b2ea:	55                   	push   ebp
c001b2eb:	89 e5                	mov    ebp,esp
c001b2ed:	53                   	push   ebx
c001b2ee:	83 ec 2c             	sub    esp,0x2c
c001b2f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2f4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b2f7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b2fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b2fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b300:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b303:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b306:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b309:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b30c:	88 d8                	mov    al,bl
c001b30e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b311:	88 c8                	mov    al,cl
c001b313:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b316:	88 d0                	mov    al,dl
c001b318:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b31b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b31e:	25 ff 00 00 00       	and    eax,0xff
c001b323:	83 c0 08             	add    eax,0x8
c001b326:	01 c0                	add    eax,eax
c001b328:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b32b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b32e:	25 ff 00 00 00       	and    eax,0xff
c001b333:	83 c0 08             	add    eax,0x8
c001b336:	01 c0                	add    eax,eax
c001b338:	40                   	inc    eax
c001b339:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b33c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b33f:	50                   	push   eax
c001b340:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b343:	e8 5a fe ff ff       	call   c001b1a2 <IOAPIC::read(int)>
c001b348:	83 c4 08             	add    esp,0x8
c001b34b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b34e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b355:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b358:	c1 e0 18             	shl    eax,0x18
c001b35b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b35e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b361:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b364:	52                   	push   edx
c001b365:	50                   	push   eax
c001b366:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b369:	e8 50 ff ff ff       	call   c001b2be <IOAPIC::write(int, int)>
c001b36e:	83 c4 0c             	add    esp,0xc
c001b371:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b374:	50                   	push   eax
c001b375:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b378:	e8 25 fe ff ff       	call   c001b1a2 <IOAPIC::read(int)>
c001b37d:	83 c4 08             	add    esp,0x8
c001b380:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b383:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b38a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b391:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b398:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b39c:	74 09                	je     c001b3a7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b39e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b3a5:	eb 07                	jmp    c001b3ae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b3a7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b3ae:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b3b2:	74 09                	je     c001b3bd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b3b4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b3bb:	eb 07                	jmp    c001b3c4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b3bd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b3c4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b3cb:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b3ce:	25 ff 00 00 00       	and    eax,0xff
c001b3d3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b3d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b3d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3dc:	52                   	push   edx
c001b3dd:	50                   	push   eax
c001b3de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b3e1:	e8 d8 fe ff ff       	call   c001b2be <IOAPIC::write(int, int)>
c001b3e6:	83 c4 0c             	add    esp,0xc
c001b3e9:	90                   	nop
c001b3ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b3ed:	c9                   	leave  
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <APICTimer::close(int, int, void*)>:
c001b3f0:	b8 00 00 00 00       	mov    eax,0x0
c001b3f5:	c3                   	ret    
c001b3f6:	66 90                	xchg   ax,ax

c001b3f8 <apicTimerHandler(regs*, void*)>:
c001b3f8:	83 ec 0c             	sub    esp,0xc
c001b3fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b401:	b8 10 27 00 00       	mov    eax,0x2710
c001b406:	ba 00 00 00 00       	mov    edx,0x0
c001b40b:	f7 f1                	div    ecx
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	50                   	push   eax
c001b411:	e8 de 1d ff ff       	call   c000d1f4 <timerHandler(unsigned int)>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	90                   	nop
c001b41a:	83 c4 0c             	add    esp,0xc
c001b41d:	c3                   	ret    
c001b41e:	66 90                	xchg   ax,ax

c001b420 <APICTimer::open(int, int, void*)>:
c001b420:	83 ec 0c             	sub    esp,0xc
c001b423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b427:	8b 00                	mov    eax,DWORD PTR [eax]
c001b429:	83 c0 24             	add    eax,0x24
c001b42c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b42e:	83 ec 08             	sub    esp,0x8
c001b431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b435:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b439:	ff d0                	call   eax
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b442:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b446:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b450:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b454:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b45a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b45e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	51                   	push   ecx
c001b468:	6a 01                	push   0x1
c001b46a:	68 f8 b3 01 c0       	push   0xc001b3f8
c001b46f:	52                   	push   edx
c001b470:	50                   	push   eax
c001b471:	e8 7e 04 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b476:	83 c4 20             	add    esp,0x20
c001b479:	89 c2                	mov    edx,eax
c001b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b485:	b8 00 00 00 00       	mov    eax,0x0
c001b48a:	83 c4 0c             	add    esp,0xc
c001b48d:	c3                   	ret    
c001b48e:	66 90                	xchg   ax,ax

c001b490 <APICTimer::write(int)>:
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	83 ec 0c             	sub    esp,0xc
c001b496:	68 d4 f0 01 c0       	push   0xc001f0d4
c001b49b:	e8 e3 4c ff ff       	call   c0010183 <KePanic(char const*)>
c001b4a0:	83 c4 10             	add    esp,0x10
c001b4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b4ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4b1:	90                   	nop
c001b4b2:	83 c4 0c             	add    esp,0xc
c001b4b5:	c3                   	ret    
c001b4b6:	66 90                	xchg   ax,ax

c001b4b8 <APICTimer::APICTimer()>:
c001b4b8:	83 ec 0c             	sub    esp,0xc
c001b4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4bf:	83 ec 08             	sub    esp,0x8
c001b4c2:	68 e4 f0 01 c0       	push   0xc001f0e4
c001b4c7:	50                   	push   eax
c001b4c8:	e8 5b 1c ff ff       	call   c000d128 <Timer::Timer(char const*)>
c001b4cd:	83 c4 10             	add    esp,0x10
c001b4d0:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c001b4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d9:	89 10                	mov    DWORD PTR [eax],edx
c001b4db:	90                   	nop
c001b4dc:	83 c4 0c             	add    esp,0xc
c001b4df:	c3                   	ret    

c001b4e0 <PIT::write(int)>:
c001b4e0:	83 ec 10             	sub    esp,0x10
c001b4e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4f5:	a3 c4 41 02 c0       	mov    ds:0xc00241c4,eax
c001b4fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b4ff:	99                   	cdq    
c001b500:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b504:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b508:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b50f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b514:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b518:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b51d:	ee                   	out    dx,al
c001b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b522:	25 ff 00 00 00       	and    eax,0xff
c001b527:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b52e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b532:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b536:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b53b:	ee                   	out    dx,al
c001b53c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b540:	c1 f8 08             	sar    eax,0x8
c001b543:	25 ff 00 00 00       	and    eax,0xff
c001b548:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b54f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b553:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b557:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b55c:	ee                   	out    dx,al
c001b55d:	90                   	nop
c001b55e:	83 c4 10             	add    esp,0x10
c001b561:	c3                   	ret    
c001b562:	66 90                	xchg   ax,ax

c001b564 <pitHandler(regs*, void*)>:
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	8b 0d c4 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241c4
c001b56d:	b8 10 27 00 00       	mov    eax,0x2710
c001b572:	99                   	cdq    
c001b573:	f7 f9                	idiv   ecx
c001b575:	83 ec 0c             	sub    esp,0xc
c001b578:	50                   	push   eax
c001b579:	e8 76 1c ff ff       	call   c000d1f4 <timerHandler(unsigned int)>
c001b57e:	83 c4 10             	add    esp,0x10
c001b581:	90                   	nop
c001b582:	83 c4 0c             	add    esp,0xc
c001b585:	c3                   	ret    
c001b586:	66 90                	xchg   ax,ax

c001b588 <PIT::open(int, int, void*)>:
c001b588:	83 ec 0c             	sub    esp,0xc
c001b58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b591:	83 c0 24             	add    eax,0x24
c001b594:	8b 00                	mov    eax,DWORD PTR [eax]
c001b596:	83 ec 08             	sub    esp,0x8
c001b599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5a1:	ff d0                	call   eax
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5aa:	83 ec 0c             	sub    esp,0xc
c001b5ad:	6a 00                	push   0x0
c001b5af:	6a 01                	push   0x1
c001b5b1:	68 64 b5 01 c0       	push   0xc001b564
c001b5b6:	6a 00                	push   0x0
c001b5b8:	50                   	push   eax
c001b5b9:	e8 36 03 ff ff       	call   c000b8f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5be:	83 c4 20             	add    esp,0x20
c001b5c1:	89 c2                	mov    edx,eax
c001b5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b5cd:	b8 00 00 00 00       	mov    eax,0x0
c001b5d2:	83 c4 0c             	add    esp,0xc
c001b5d5:	c3                   	ret    
c001b5d6:	66 90                	xchg   ax,ax

c001b5d8 <PIT::close(int, int, void*)>:
c001b5d8:	83 ec 0c             	sub    esp,0xc
c001b5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ed:	6a 01                	push   0x1
c001b5ef:	68 64 b5 01 c0       	push   0xc001b564
c001b5f4:	6a 00                	push   0x0
c001b5f6:	50                   	push   eax
c001b5f7:	e8 2e 03 ff ff       	call   c000b92a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	b8 00 00 00 00       	mov    eax,0x0
c001b604:	83 c4 0c             	add    esp,0xc
c001b607:	c3                   	ret    

c001b608 <PIT::PIT()>:
c001b608:	83 ec 0c             	sub    esp,0xc
c001b60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b60f:	83 ec 08             	sub    esp,0x8
c001b612:	68 20 f1 01 c0       	push   0xc001f120
c001b617:	50                   	push   eax
c001b618:	e8 0b 1b ff ff       	call   c000d128 <Timer::Timer(char const*)>
c001b61d:	83 c4 10             	add    esp,0x10
c001b620:	ba 48 f1 01 c0       	mov    edx,0xc001f148
c001b625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b629:	89 10                	mov    DWORD PTR [eax],edx
c001b62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b635:	31 d2                	xor    edx,edx
c001b637:	88 c2                	mov    dl,al
c001b639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b648:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b64e:	31 d2                	xor    edx,edx
c001b650:	88 c2                	mov    dl,al
c001b652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b656:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b665:	8d 50 01             	lea    edx,[eax+0x1]
c001b668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b66c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b672:	31 d2                	xor    edx,edx
c001b674:	88 c2                	mov    dl,al
c001b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b67e:	83 e1 3f             	and    ecx,0x3f
c001b681:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b685:	90                   	nop
c001b686:	83 c4 0c             	add    esp,0xc
c001b689:	c3                   	ret    
c001b68a:	66 90                	xchg   ax,ax
c001b68c:	66 90                	xchg   ax,ax
c001b68e:	66 90                	xchg   ax,ax

c001b690 <avxDetect>:
c001b690:	b8 01 00 00 00       	mov    eax,0x1
c001b695:	0f a2                	cpuid  
c001b697:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b69d:	74 15                	je     c001b6b4 <avxDetect.noAVX>
c001b69f:	b8 01 00 00 00       	mov    eax,0x1
c001b6a4:	0f a2                	cpuid  
c001b6a6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b6ac:	74 06                	je     c001b6b4 <avxDetect.noAVX>
c001b6ae:	b8 01 00 00 00       	mov    eax,0x1
c001b6b3:	c3                   	ret    

c001b6b4 <avxDetect.noAVX>:
c001b6b4:	b8 00 00 00 00       	mov    eax,0x0
c001b6b9:	c3                   	ret    

c001b6ba <avxSave>:
c001b6ba:	53                   	push   ebx
c001b6bb:	52                   	push   edx
c001b6bc:	31 c0                	xor    eax,eax
c001b6be:	48                   	dec    eax
c001b6bf:	89 c2                	mov    edx,eax
c001b6c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6c5:	0f ae 23             	xsave  [ebx]
c001b6c8:	5a                   	pop    edx
c001b6c9:	5b                   	pop    ebx
c001b6ca:	c3                   	ret    

c001b6cb <avxLoad>:
c001b6cb:	53                   	push   ebx
c001b6cc:	52                   	push   edx
c001b6cd:	31 c0                	xor    eax,eax
c001b6cf:	48                   	dec    eax
c001b6d0:	89 c2                	mov    edx,eax
c001b6d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6d6:	0f ae 2b             	xrstor [ebx]
c001b6d9:	5a                   	pop    edx
c001b6da:	5b                   	pop    ebx
c001b6db:	c3                   	ret    

c001b6dc <avxInit>:
c001b6dc:	e8 57 02 00 00       	call   c001b938 <sseInit>
c001b6e1:	50                   	push   eax
c001b6e2:	51                   	push   ecx
c001b6e3:	0f 20 e0             	mov    eax,cr4
c001b6e6:	0d 00 00 04 00       	or     eax,0x40000
c001b6eb:	0f 22 e0             	mov    cr4,eax
c001b6ee:	31 c9                	xor    ecx,ecx
c001b6f0:	0f 01 d0             	xgetbv 
c001b6f3:	0d 07 00 00 00       	or     eax,0x7
c001b6f8:	0f 01 d1             	xsetbv 
c001b6fb:	59                   	pop    ecx
c001b6fc:	58                   	pop    eax
c001b6fd:	c3                   	ret    

c001b6fe <avxClose>:
c001b6fe:	c3                   	ret    

c001b6ff <wouldSheSayYes>:
c001b6ff:	c3                   	ret    
c001b700:	49                   	dec    ecx
c001b701:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b705:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b709:	75 20                	jne    c001b72b <isr0+0xb>
c001b70b:	4e                   	dec    esi
c001b70c:	79 61                	jns    c001b76f <isr7+0x3>
c001b70e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b713:	66 90                	xchg   ax,ax
c001b715:	66 90                	xchg   ax,ax
c001b717:	66 90                	xchg   ax,ax
c001b719:	66 90                	xchg   ax,ax
c001b71b:	66 90                	xchg   ax,ax
c001b71d:	66 90                	xchg   ax,ax
c001b71f:	90                   	nop

c001b720 <isr0>:
c001b720:	fa                   	cli    
c001b721:	68 00 00 00 00       	push   0x0
c001b726:	68 00 00 00 00       	push   0x0
c001b72b:	e9 44 01 00 00       	jmp    c001b874 <int_common_stub>

c001b730 <isr1>:
c001b730:	fa                   	cli    
c001b731:	6a 00                	push   0x0
c001b733:	6a 01                	push   0x1
c001b735:	e9 3a 01 00 00       	jmp    c001b874 <int_common_stub>

c001b73a <isr2>:
c001b73a:	fa                   	cli    
c001b73b:	6a 00                	push   0x0
c001b73d:	6a 02                	push   0x2
c001b73f:	e9 30 01 00 00       	jmp    c001b874 <int_common_stub>

c001b744 <isr3>:
c001b744:	fa                   	cli    
c001b745:	6a 00                	push   0x0
c001b747:	6a 03                	push   0x3
c001b749:	e9 26 01 00 00       	jmp    c001b874 <int_common_stub>

c001b74e <isr4>:
c001b74e:	fa                   	cli    
c001b74f:	6a 00                	push   0x0
c001b751:	6a 04                	push   0x4
c001b753:	e9 1c 01 00 00       	jmp    c001b874 <int_common_stub>

c001b758 <isr5>:
c001b758:	fa                   	cli    
c001b759:	6a 00                	push   0x0
c001b75b:	6a 05                	push   0x5
c001b75d:	e9 12 01 00 00       	jmp    c001b874 <int_common_stub>

c001b762 <isr6>:
c001b762:	fa                   	cli    
c001b763:	6a 00                	push   0x0
c001b765:	6a 06                	push   0x6
c001b767:	e9 08 01 00 00       	jmp    c001b874 <int_common_stub>

c001b76c <isr7>:
c001b76c:	fa                   	cli    
c001b76d:	6a 00                	push   0x0
c001b76f:	6a 07                	push   0x7
c001b771:	e9 fe 00 00 00       	jmp    c001b874 <int_common_stub>

c001b776 <isr8>:
c001b776:	fa                   	cli    
c001b777:	6a 08                	push   0x8
c001b779:	e9 f6 00 00 00       	jmp    c001b874 <int_common_stub>

c001b77e <isr9>:
c001b77e:	fa                   	cli    
c001b77f:	6a 00                	push   0x0
c001b781:	6a 09                	push   0x9
c001b783:	e9 ec 00 00 00       	jmp    c001b874 <int_common_stub>

c001b788 <isr10>:
c001b788:	fa                   	cli    
c001b789:	6a 0a                	push   0xa
c001b78b:	e9 e4 00 00 00       	jmp    c001b874 <int_common_stub>

c001b790 <isr11>:
c001b790:	fa                   	cli    
c001b791:	6a 0b                	push   0xb
c001b793:	e9 dc 00 00 00       	jmp    c001b874 <int_common_stub>

c001b798 <isr12>:
c001b798:	fa                   	cli    
c001b799:	6a 0c                	push   0xc
c001b79b:	e9 d4 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7a0 <isr13>:
c001b7a0:	fa                   	cli    
c001b7a1:	6a 0d                	push   0xd
c001b7a3:	e9 cc 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7a8 <isr14>:
c001b7a8:	fa                   	cli    
c001b7a9:	6a 0e                	push   0xe
c001b7ab:	e9 c4 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7b0 <isr15>:
c001b7b0:	fa                   	cli    
c001b7b1:	6a 00                	push   0x0
c001b7b3:	6a 0f                	push   0xf
c001b7b5:	e9 ba 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7ba <isr16>:
c001b7ba:	fa                   	cli    
c001b7bb:	6a 00                	push   0x0
c001b7bd:	6a 10                	push   0x10
c001b7bf:	e9 b0 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7c4 <isr17>:
c001b7c4:	fa                   	cli    
c001b7c5:	6a 00                	push   0x0
c001b7c7:	6a 11                	push   0x11
c001b7c9:	e9 a6 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7ce <isr18>:
c001b7ce:	fa                   	cli    
c001b7cf:	6a 00                	push   0x0
c001b7d1:	6a 12                	push   0x12
c001b7d3:	e9 9c 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7d8 <irq3>:
c001b7d8:	fa                   	cli    
c001b7d9:	6a 00                	push   0x0
c001b7db:	6a 23                	push   0x23
c001b7dd:	e9 92 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7e2 <irq4>:
c001b7e2:	fa                   	cli    
c001b7e3:	6a 00                	push   0x0
c001b7e5:	6a 24                	push   0x24
c001b7e7:	e9 88 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7ec <irq5>:
c001b7ec:	fa                   	cli    
c001b7ed:	6a 00                	push   0x0
c001b7ef:	6a 25                	push   0x25
c001b7f1:	e9 7e 00 00 00       	jmp    c001b874 <int_common_stub>

c001b7f6 <irq6>:
c001b7f6:	fa                   	cli    
c001b7f7:	6a 00                	push   0x0
c001b7f9:	6a 26                	push   0x26
c001b7fb:	e9 74 00 00 00       	jmp    c001b874 <int_common_stub>

c001b800 <irq7>:
c001b800:	fa                   	cli    
c001b801:	6a 00                	push   0x0
c001b803:	6a 27                	push   0x27
c001b805:	e9 6a 00 00 00       	jmp    c001b874 <int_common_stub>

c001b80a <irq8>:
c001b80a:	fa                   	cli    
c001b80b:	6a 00                	push   0x0
c001b80d:	6a 28                	push   0x28
c001b80f:	e9 60 00 00 00       	jmp    c001b874 <int_common_stub>

c001b814 <irq9>:
c001b814:	fa                   	cli    
c001b815:	6a 00                	push   0x0
c001b817:	6a 29                	push   0x29
c001b819:	e9 56 00 00 00       	jmp    c001b874 <int_common_stub>

c001b81e <irq10>:
c001b81e:	fa                   	cli    
c001b81f:	6a 00                	push   0x0
c001b821:	6a 2a                	push   0x2a
c001b823:	e9 4c 00 00 00       	jmp    c001b874 <int_common_stub>

c001b828 <irq11>:
c001b828:	fa                   	cli    
c001b829:	6a 00                	push   0x0
c001b82b:	6a 2b                	push   0x2b
c001b82d:	e9 42 00 00 00       	jmp    c001b874 <int_common_stub>

c001b832 <irq12>:
c001b832:	fa                   	cli    
c001b833:	6a 00                	push   0x0
c001b835:	6a 2c                	push   0x2c
c001b837:	e9 38 00 00 00       	jmp    c001b874 <int_common_stub>

c001b83c <irq13>:
c001b83c:	fa                   	cli    
c001b83d:	6a 00                	push   0x0
c001b83f:	6a 2d                	push   0x2d
c001b841:	e9 2e 00 00 00       	jmp    c001b874 <int_common_stub>

c001b846 <irq14>:
c001b846:	fa                   	cli    
c001b847:	6a 00                	push   0x0
c001b849:	6a 2e                	push   0x2e
c001b84b:	e9 24 00 00 00       	jmp    c001b874 <int_common_stub>

c001b850 <irq15>:
c001b850:	fa                   	cli    
c001b851:	6a 00                	push   0x0
c001b853:	6a 2f                	push   0x2f
c001b855:	e9 1a 00 00 00       	jmp    c001b874 <int_common_stub>

c001b85a <irq1>:
c001b85a:	fa                   	cli    
c001b85b:	6a 00                	push   0x0
c001b85d:	6a 21                	push   0x21
c001b85f:	eb 13                	jmp    c001b874 <int_common_stub>

c001b861 <irq2>:
c001b861:	fa                   	cli    
c001b862:	6a 00                	push   0x0
c001b864:	6a 22                	push   0x22
c001b866:	eb 0c                	jmp    c001b874 <int_common_stub>

c001b868 <isr96>:
c001b868:	6a 00                	push   0x0
c001b86a:	6a 60                	push   0x60
c001b86c:	fb                   	sti    
c001b86d:	eb 05                	jmp    c001b874 <int_common_stub>

c001b86f <irq0>:
c001b86f:	fa                   	cli    
c001b870:	6a 00                	push   0x0
c001b872:	6a 20                	push   0x20

c001b874 <int_common_stub>:
c001b874:	60                   	pusha  
c001b875:	1e                   	push   ds
c001b876:	06                   	push   es
c001b877:	0f a0                	push   fs
c001b879:	0f a8                	push   gs
c001b87b:	66 b8 10 00          	mov    ax,0x10
c001b87f:	66 8e d8             	mov    ds,ax
c001b882:	66 8e c0             	mov    es,ax
c001b885:	66 8e e0             	mov    fs,ax
c001b888:	66 8e e8             	mov    gs,ax
c001b88b:	54                   	push   esp
c001b88c:	fc                   	cld    
c001b88d:	e8 62 05 ff ff       	call   c000bdf4 <int_handler>
c001b892:	81 c4 04 00 00 00    	add    esp,0x4
c001b898:	0f a9                	pop    gs
c001b89a:	0f a1                	pop    fs
c001b89c:	07                   	pop    es
c001b89d:	1f                   	pop    ds
c001b89e:	61                   	popa   
c001b89f:	81 c4 08 00 00 00    	add    esp,0x8
c001b8a5:	cf                   	iret   

c001b8a6 <irq16>:
c001b8a6:	fa                   	cli    
c001b8a7:	6a 00                	push   0x0
c001b8a9:	6a 30                	push   0x30
c001b8ab:	e9 c4 ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8b0 <irq17>:
c001b8b0:	fa                   	cli    
c001b8b1:	6a 00                	push   0x0
c001b8b3:	6a 31                	push   0x31
c001b8b5:	e9 ba ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8ba <irq18>:
c001b8ba:	fa                   	cli    
c001b8bb:	6a 00                	push   0x0
c001b8bd:	6a 32                	push   0x32
c001b8bf:	e9 b0 ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8c4 <irq19>:
c001b8c4:	fa                   	cli    
c001b8c5:	6a 00                	push   0x0
c001b8c7:	6a 33                	push   0x33
c001b8c9:	e9 a6 ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8ce <irq20>:
c001b8ce:	fa                   	cli    
c001b8cf:	6a 00                	push   0x0
c001b8d1:	6a 34                	push   0x34
c001b8d3:	e9 9c ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8d8 <irq21>:
c001b8d8:	fa                   	cli    
c001b8d9:	6a 00                	push   0x0
c001b8db:	6a 35                	push   0x35
c001b8dd:	e9 92 ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8e2 <irq22>:
c001b8e2:	fa                   	cli    
c001b8e3:	6a 00                	push   0x0
c001b8e5:	6a 36                	push   0x36
c001b8e7:	e9 88 ff ff ff       	jmp    c001b874 <int_common_stub>

c001b8ec <irq23>:
c001b8ec:	fa                   	cli    
c001b8ed:	6a 00                	push   0x0
c001b8ef:	6a 37                	push   0x37
c001b8f1:	e9 7e ff ff ff       	jmp    c001b874 <int_common_stub>
c001b8f6:	66 90                	xchg   ax,ax
c001b8f8:	66 90                	xchg   ax,ax
c001b8fa:	66 90                	xchg   ax,ax
c001b8fc:	66 90                	xchg   ax,ax
c001b8fe:	66 90                	xchg   ax,ax

c001b900 <i386GetRDRAND>:
c001b900:	b9 64 00 00 00       	mov    ecx,0x64

c001b905 <retry>:
c001b905:	0f c7 f0             	rdrand eax
c001b908:	72 05                	jb     c001b90f <retry.done>
c001b90a:	e2 f9                	loop   c001b905 <retry>

c001b90c <retry.fail>:
c001b90c:	31 c0                	xor    eax,eax
c001b90e:	c3                   	ret    

c001b90f <retry.done>:
c001b90f:	c3                   	ret    

c001b910 <absolutelyNoChanceInHell>:
c001b910:	b8 01 00 00 00       	mov    eax,0x1
c001b915:	0f a2                	cpuid  
c001b917:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b91d:	74 06                	je     c001b925 <sseDetect.noSSE>
c001b91f:	b8 01 00 00 00       	mov    eax,0x1
c001b924:	c3                   	ret    

c001b925 <sseDetect.noSSE>:
c001b925:	31 c0                	xor    eax,eax
c001b927:	c3                   	ret    

c001b928 <sseSave>:
c001b928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b92c:	0f ae 00             	fxsave [eax]
c001b92f:	c3                   	ret    

c001b930 <sseLoad>:
c001b930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b934:	0f ae 08             	fxrstor [eax]
c001b937:	c3                   	ret    

c001b938 <sseInit>:
c001b938:	e8 42 00 00 00       	call   c001b97f <x87Init>
c001b93d:	0f 20 e0             	mov    eax,cr4
c001b940:	66 0d 00 06          	or     ax,0x600
c001b944:	0f 22 e0             	mov    cr4,eax
c001b947:	c3                   	ret    

c001b948 <sseClose>:
c001b948:	c3                   	ret    
c001b949:	66 90                	xchg   ax,ax
c001b94b:	66 90                	xchg   ax,ax
c001b94d:	66 90                	xchg   ax,ax
c001b94f:	90                   	nop

c001b950 <value_37F>:
c001b950:	7f 03                	jg     c001b955 <value_37A+0x1>

c001b952 <value_37E>:
c001b952:	7e 03                	jle    c001b957 <x87Detect+0x1>

c001b954 <value_37A>:
c001b954:	7a 03                	jp     c001b959 <x87Detect+0x3>

c001b956 <x87Detect>:
c001b956:	b8 01 00 00 00       	mov    eax,0x1
c001b95b:	0f a2                	cpuid  
c001b95d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b963:	74 06                	je     c001b96b <x87Detect.nox87>
c001b965:	b8 01 00 00 00       	mov    eax,0x1
c001b96a:	c3                   	ret    

c001b96b <x87Detect.nox87>:
c001b96b:	b8 00 00 00 00       	mov    eax,0x0
c001b970:	c3                   	ret    

c001b971 <x87Save>:
c001b971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b975:	dd 30                	fnsave [eax]
c001b977:	c3                   	ret    

c001b978 <x87Load>:
c001b978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b97c:	dd 20                	frstor [eax]
c001b97e:	c3                   	ret    

c001b97f <x87Init>:
c001b97f:	0f 20 c0             	mov    eax,cr0
c001b982:	66 25 fb ff          	and    ax,0xfffb
c001b986:	66 0d 22 00          	or     ax,0x22
c001b98a:	0f 22 c0             	mov    cr0,eax
c001b98d:	db e3                	fninit 
c001b98f:	0f 06                	clts   
c001b991:	d9 2d 54 b9 01 c0    	fldcw  WORD PTR ds:0xc001b954
c001b997:	c3                   	ret    

c001b998 <x87Close>:
c001b998:	c3                   	ret    
c001b999:	66 90                	xchg   ax,ax
c001b99b:	90                   	nop

c001b99c <__do_global_ctors_aux>:
c001b99c:	a1 4c c9 01 c0       	mov    eax,ds:0xc001c94c
c001b9a1:	83 f8 ff             	cmp    eax,0xffffffff
c001b9a4:	74 1a                	je     c001b9c0 <__do_global_ctors_aux+0x24>
c001b9a6:	55                   	push   ebp
c001b9a7:	89 e5                	mov    ebp,esp
c001b9a9:	53                   	push   ebx
c001b9aa:	52                   	push   edx
c001b9ab:	bb 4c c9 01 c0       	mov    ebx,0xc001c94c
c001b9b0:	ff d0                	call   eax
c001b9b2:	83 eb 04             	sub    ebx,0x4
c001b9b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9b7:	83 f8 ff             	cmp    eax,0xffffffff
c001b9ba:	75 f4                	jne    c001b9b0 <__do_global_ctors_aux+0x14>
c001b9bc:	58                   	pop    eax
c001b9bd:	5b                   	pop    ebx
c001b9be:	5d                   	pop    ebp
c001b9bf:	c3                   	ret    
c001b9c0:	c3                   	ret    
c001b9c1:	66 90                	xchg   ax,ax
c001b9c3:	90                   	nop

c001b9c4 <__divdi3>:
c001b9c4:	55                   	push   ebp
c001b9c5:	57                   	push   edi
c001b9c6:	56                   	push   esi
c001b9c7:	53                   	push   ebx
c001b9c8:	83 ec 1c             	sub    esp,0x1c
c001b9cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b9cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b9d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b9da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b9e2:	85 db                	test   ebx,ebx
c001b9e4:	0f 88 8e 00 00 00    	js     c001ba78 <__divdi3+0xb4>
c001b9ea:	89 dd                	mov    ebp,ebx
c001b9ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9f4:	89 d3                	mov    ebx,edx
c001b9f6:	85 d2                	test   edx,edx
c001b9f8:	79 0d                	jns    c001ba07 <__divdi3+0x43>
c001b9fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b9fe:	f7 d8                	neg    eax
c001ba00:	83 d2 00             	adc    edx,0x0
c001ba03:	f7 da                	neg    edx
c001ba05:	89 d3                	mov    ebx,edx
c001ba07:	89 c7                	mov    edi,eax
c001ba09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba0c:	85 db                	test   ebx,ebx
c001ba0e:	75 48                	jne    c001ba58 <__divdi3+0x94>
c001ba10:	39 ef                	cmp    edi,ebp
c001ba12:	76 24                	jbe    c001ba38 <__divdi3+0x74>
c001ba14:	89 ea                	mov    edx,ebp
c001ba16:	f7 f7                	div    edi
c001ba18:	89 c1                	mov    ecx,eax
c001ba1a:	31 f6                	xor    esi,esi
c001ba1c:	89 c8                	mov    eax,ecx
c001ba1e:	89 f2                	mov    edx,esi
c001ba20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba24:	85 c9                	test   ecx,ecx
c001ba26:	74 07                	je     c001ba2f <__divdi3+0x6b>
c001ba28:	f7 d8                	neg    eax
c001ba2a:	83 d2 00             	adc    edx,0x0
c001ba2d:	f7 da                	neg    edx
c001ba2f:	83 c4 1c             	add    esp,0x1c
c001ba32:	5b                   	pop    ebx
c001ba33:	5e                   	pop    esi
c001ba34:	5f                   	pop    edi
c001ba35:	5d                   	pop    ebp
c001ba36:	c3                   	ret    
c001ba37:	90                   	nop
c001ba38:	85 ff                	test   edi,edi
c001ba3a:	75 0b                	jne    c001ba47 <__divdi3+0x83>
c001ba3c:	b8 01 00 00 00       	mov    eax,0x1
c001ba41:	31 d2                	xor    edx,edx
c001ba43:	f7 f3                	div    ebx
c001ba45:	89 c7                	mov    edi,eax
c001ba47:	31 d2                	xor    edx,edx
c001ba49:	89 e8                	mov    eax,ebp
c001ba4b:	f7 f7                	div    edi
c001ba4d:	89 c6                	mov    esi,eax
c001ba4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba52:	f7 f7                	div    edi
c001ba54:	89 c1                	mov    ecx,eax
c001ba56:	eb c4                	jmp    c001ba1c <__divdi3+0x58>
c001ba58:	39 eb                	cmp    ebx,ebp
c001ba5a:	77 3c                	ja     c001ba98 <__divdi3+0xd4>
c001ba5c:	0f bd f3             	bsr    esi,ebx
c001ba5f:	83 f6 1f             	xor    esi,0x1f
c001ba62:	75 40                	jne    c001baa4 <__divdi3+0xe0>
c001ba64:	39 eb                	cmp    ebx,ebp
c001ba66:	72 09                	jb     c001ba71 <__divdi3+0xad>
c001ba68:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba6b:	0f 87 97 00 00 00    	ja     c001bb08 <__divdi3+0x144>
c001ba71:	b9 01 00 00 00       	mov    ecx,0x1
c001ba76:	eb a4                	jmp    c001ba1c <__divdi3+0x58>
c001ba78:	f7 d9                	neg    ecx
c001ba7a:	83 d3 00             	adc    ebx,0x0
c001ba7d:	f7 db                	neg    ebx
c001ba7f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba82:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba86:	89 dd                	mov    ebp,ebx
c001ba88:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba90:	e9 5f ff ff ff       	jmp    c001b9f4 <__divdi3+0x30>
c001ba95:	8d 76 00             	lea    esi,[esi+0x0]
c001ba98:	31 f6                	xor    esi,esi
c001ba9a:	31 c9                	xor    ecx,ecx
c001ba9c:	e9 7b ff ff ff       	jmp    c001ba1c <__divdi3+0x58>
c001baa1:	8d 76 00             	lea    esi,[esi+0x0]
c001baa4:	b8 20 00 00 00       	mov    eax,0x20
c001baa9:	29 f0                	sub    eax,esi
c001baab:	89 f1                	mov    ecx,esi
c001baad:	d3 e3                	shl    ebx,cl
c001baaf:	89 fa                	mov    edx,edi
c001bab1:	88 c1                	mov    cl,al
c001bab3:	d3 ea                	shr    edx,cl
c001bab5:	09 da                	or     edx,ebx
c001bab7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001babb:	89 f1                	mov    ecx,esi
c001babd:	d3 e7                	shl    edi,cl
c001babf:	89 eb                	mov    ebx,ebp
c001bac1:	88 c1                	mov    cl,al
c001bac3:	d3 eb                	shr    ebx,cl
c001bac5:	89 f1                	mov    ecx,esi
c001bac7:	d3 e5                	shl    ebp,cl
c001bac9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bacc:	88 c1                	mov    cl,al
c001bace:	d3 ea                	shr    edx,cl
c001bad0:	09 d5                	or     ebp,edx
c001bad2:	89 e8                	mov    eax,ebp
c001bad4:	89 da                	mov    edx,ebx
c001bad6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bada:	89 d3                	mov    ebx,edx
c001badc:	89 c5                	mov    ebp,eax
c001bade:	f7 e7                	mul    edi
c001bae0:	39 d3                	cmp    ebx,edx
c001bae2:	72 18                	jb     c001bafc <__divdi3+0x138>
c001bae4:	74 0a                	je     c001baf0 <__divdi3+0x12c>
c001bae6:	89 e9                	mov    ecx,ebp
c001bae8:	31 f6                	xor    esi,esi
c001baea:	e9 2d ff ff ff       	jmp    c001ba1c <__divdi3+0x58>
c001baef:	90                   	nop
c001baf0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001baf3:	89 f1                	mov    ecx,esi
c001baf5:	d3 e7                	shl    edi,cl
c001baf7:	39 c7                	cmp    edi,eax
c001baf9:	73 eb                	jae    c001bae6 <__divdi3+0x122>
c001bafb:	90                   	nop
c001bafc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001baff:	31 f6                	xor    esi,esi
c001bb01:	e9 16 ff ff ff       	jmp    c001ba1c <__divdi3+0x58>
c001bb06:	66 90                	xchg   ax,ax
c001bb08:	31 c9                	xor    ecx,ecx
c001bb0a:	e9 0d ff ff ff       	jmp    c001ba1c <__divdi3+0x58>
c001bb0f:	90                   	nop

c001bb10 <__moddi3>:
c001bb10:	55                   	push   ebp
c001bb11:	57                   	push   edi
c001bb12:	56                   	push   esi
c001bb13:	53                   	push   ebx
c001bb14:	83 ec 2c             	sub    esp,0x2c
c001bb17:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bb1b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bb1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bb23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bb27:	85 db                	test   ebx,ebx
c001bb29:	0f 88 85 00 00 00    	js     c001bbb4 <__moddi3+0xa4>
c001bb2f:	89 de                	mov    esi,ebx
c001bb31:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bb39:	89 d7                	mov    edi,edx
c001bb3b:	85 d2                	test   edx,edx
c001bb3d:	79 09                	jns    c001bb48 <__moddi3+0x38>
c001bb3f:	f7 d8                	neg    eax
c001bb41:	83 d2 00             	adc    edx,0x0
c001bb44:	f7 da                	neg    edx
c001bb46:	89 d7                	mov    edi,edx
c001bb48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb4c:	89 cd                	mov    ebp,ecx
c001bb4e:	85 ff                	test   edi,edi
c001bb50:	75 52                	jne    c001bba4 <__moddi3+0x94>
c001bb52:	89 c3                	mov    ebx,eax
c001bb54:	39 f0                	cmp    eax,esi
c001bb56:	76 24                	jbe    c001bb7c <__moddi3+0x6c>
c001bb58:	89 c8                	mov    eax,ecx
c001bb5a:	89 f2                	mov    edx,esi
c001bb5c:	f7 f3                	div    ebx
c001bb5e:	89 d6                	mov    esi,edx
c001bb60:	89 f0                	mov    eax,esi
c001bb62:	31 d2                	xor    edx,edx
c001bb64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb68:	85 c9                	test   ecx,ecx
c001bb6a:	74 07                	je     c001bb73 <__moddi3+0x63>
c001bb6c:	f7 d8                	neg    eax
c001bb6e:	83 d2 00             	adc    edx,0x0
c001bb71:	f7 da                	neg    edx
c001bb73:	83 c4 2c             	add    esp,0x2c
c001bb76:	5b                   	pop    ebx
c001bb77:	5e                   	pop    esi
c001bb78:	5f                   	pop    edi
c001bb79:	5d                   	pop    ebp
c001bb7a:	c3                   	ret    
c001bb7b:	90                   	nop
c001bb7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb80:	85 db                	test   ebx,ebx
c001bb82:	75 0d                	jne    c001bb91 <__moddi3+0x81>
c001bb84:	b8 01 00 00 00       	mov    eax,0x1
c001bb89:	31 d2                	xor    edx,edx
c001bb8b:	f7 f7                	div    edi
c001bb8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb91:	89 f0                	mov    eax,esi
c001bb93:	31 d2                	xor    edx,edx
c001bb95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb99:	f7 f7                	div    edi
c001bb9b:	89 e8                	mov    eax,ebp
c001bb9d:	f7 f7                	div    edi
c001bb9f:	89 d6                	mov    esi,edx
c001bba1:	eb bd                	jmp    c001bb60 <__moddi3+0x50>
c001bba3:	90                   	nop
c001bba4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bba8:	39 f7                	cmp    edi,esi
c001bbaa:	76 20                	jbe    c001bbcc <__moddi3+0xbc>
c001bbac:	89 c8                	mov    eax,ecx
c001bbae:	89 f2                	mov    edx,esi
c001bbb0:	eb b2                	jmp    c001bb64 <__moddi3+0x54>
c001bbb2:	66 90                	xchg   ax,ax
c001bbb4:	f7 d9                	neg    ecx
c001bbb6:	83 d3 00             	adc    ebx,0x0
c001bbb9:	f7 db                	neg    ebx
c001bbbb:	89 de                	mov    esi,ebx
c001bbbd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bbc5:	e9 6f ff ff ff       	jmp    c001bb39 <__moddi3+0x29>
c001bbca:	66 90                	xchg   ax,ax
c001bbcc:	0f bd c7             	bsr    eax,edi
c001bbcf:	83 f0 1f             	xor    eax,0x1f
c001bbd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbd6:	75 24                	jne    c001bbfc <__moddi3+0xec>
c001bbd8:	39 f7                	cmp    edi,esi
c001bbda:	72 06                	jb     c001bbe2 <__moddi3+0xd2>
c001bbdc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bbe0:	77 0c                	ja     c001bbee <__moddi3+0xde>
c001bbe2:	89 e9                	mov    ecx,ebp
c001bbe4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bbe8:	19 fe                	sbb    esi,edi
c001bbea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bbee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbf2:	89 f2                	mov    edx,esi
c001bbf4:	e9 6b ff ff ff       	jmp    c001bb64 <__moddi3+0x54>
c001bbf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbfc:	b8 20 00 00 00       	mov    eax,0x20
c001bc01:	89 c2                	mov    edx,eax
c001bc03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bc07:	29 da                	sub    edx,ebx
c001bc09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bc0d:	88 d9                	mov    cl,bl
c001bc0f:	d3 e7                	shl    edi,cl
c001bc11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc15:	88 d1                	mov    cl,dl
c001bc17:	d3 e8                	shr    eax,cl
c001bc19:	09 c7                	or     edi,eax
c001bc1b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bc1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bc23:	89 d8                	mov    eax,ebx
c001bc25:	88 d9                	mov    cl,bl
c001bc27:	d3 e7                	shl    edi,cl
c001bc29:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc2d:	89 f3                	mov    ebx,esi
c001bc2f:	88 d1                	mov    cl,dl
c001bc31:	d3 eb                	shr    ebx,cl
c001bc33:	89 c7                	mov    edi,eax
c001bc35:	88 c1                	mov    cl,al
c001bc37:	d3 e6                	shl    esi,cl
c001bc39:	89 e8                	mov    eax,ebp
c001bc3b:	88 d1                	mov    cl,dl
c001bc3d:	d3 e8                	shr    eax,cl
c001bc3f:	09 f0                	or     eax,esi
c001bc41:	89 f9                	mov    ecx,edi
c001bc43:	d3 e5                	shl    ebp,cl
c001bc45:	89 da                	mov    edx,ebx
c001bc47:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bc4b:	89 d3                	mov    ebx,edx
c001bc4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc51:	89 c6                	mov    esi,eax
c001bc53:	89 d1                	mov    ecx,edx
c001bc55:	39 d3                	cmp    ebx,edx
c001bc57:	72 27                	jb     c001bc80 <__moddi3+0x170>
c001bc59:	74 21                	je     c001bc7c <__moddi3+0x16c>
c001bc5b:	29 f5                	sub    ebp,esi
c001bc5d:	19 cb                	sbb    ebx,ecx
c001bc5f:	89 de                	mov    esi,ebx
c001bc61:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc65:	d3 e6                	shl    esi,cl
c001bc67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc6b:	89 f9                	mov    ecx,edi
c001bc6d:	d3 ed                	shr    ebp,cl
c001bc6f:	09 ee                	or     esi,ebp
c001bc71:	89 f0                	mov    eax,esi
c001bc73:	d3 eb                	shr    ebx,cl
c001bc75:	89 da                	mov    edx,ebx
c001bc77:	e9 e8 fe ff ff       	jmp    c001bb64 <__moddi3+0x54>
c001bc7c:	39 c5                	cmp    ebp,eax
c001bc7e:	73 db                	jae    c001bc5b <__moddi3+0x14b>
c001bc80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc84:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc88:	89 d1                	mov    ecx,edx
c001bc8a:	89 c6                	mov    esi,eax
c001bc8c:	eb cd                	jmp    c001bc5b <__moddi3+0x14b>
c001bc8e:	66 90                	xchg   ax,ax

c001bc90 <__udivdi3>:
c001bc90:	55                   	push   ebp
c001bc91:	57                   	push   edi
c001bc92:	56                   	push   esi
c001bc93:	53                   	push   ebx
c001bc94:	83 ec 1c             	sub    esp,0x1c
c001bc97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc9b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc9f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bca7:	85 d2                	test   edx,edx
c001bca9:	75 41                	jne    c001bcec <__udivdi3+0x5c>
c001bcab:	39 f7                	cmp    edi,esi
c001bcad:	76 15                	jbe    c001bcc4 <__udivdi3+0x34>
c001bcaf:	89 e8                	mov    eax,ebp
c001bcb1:	89 f2                	mov    edx,esi
c001bcb3:	f7 f7                	div    edi
c001bcb5:	31 db                	xor    ebx,ebx
c001bcb7:	89 da                	mov    edx,ebx
c001bcb9:	83 c4 1c             	add    esp,0x1c
c001bcbc:	5b                   	pop    ebx
c001bcbd:	5e                   	pop    esi
c001bcbe:	5f                   	pop    edi
c001bcbf:	5d                   	pop    ebp
c001bcc0:	c3                   	ret    
c001bcc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcc4:	89 f9                	mov    ecx,edi
c001bcc6:	85 ff                	test   edi,edi
c001bcc8:	75 0b                	jne    c001bcd5 <__udivdi3+0x45>
c001bcca:	b8 01 00 00 00       	mov    eax,0x1
c001bccf:	31 d2                	xor    edx,edx
c001bcd1:	f7 f7                	div    edi
c001bcd3:	89 c1                	mov    ecx,eax
c001bcd5:	31 d2                	xor    edx,edx
c001bcd7:	89 f0                	mov    eax,esi
c001bcd9:	f7 f1                	div    ecx
c001bcdb:	89 c3                	mov    ebx,eax
c001bcdd:	89 e8                	mov    eax,ebp
c001bcdf:	f7 f1                	div    ecx
c001bce1:	89 da                	mov    edx,ebx
c001bce3:	83 c4 1c             	add    esp,0x1c
c001bce6:	5b                   	pop    ebx
c001bce7:	5e                   	pop    esi
c001bce8:	5f                   	pop    edi
c001bce9:	5d                   	pop    ebp
c001bcea:	c3                   	ret    
c001bceb:	90                   	nop
c001bcec:	39 f2                	cmp    edx,esi
c001bcee:	77 1c                	ja     c001bd0c <__udivdi3+0x7c>
c001bcf0:	0f bd da             	bsr    ebx,edx
c001bcf3:	83 f3 1f             	xor    ebx,0x1f
c001bcf6:	75 24                	jne    c001bd1c <__udivdi3+0x8c>
c001bcf8:	39 f2                	cmp    edx,esi
c001bcfa:	72 08                	jb     c001bd04 <__udivdi3+0x74>
c001bcfc:	39 ef                	cmp    edi,ebp
c001bcfe:	0f 87 84 00 00 00    	ja     c001bd88 <__udivdi3+0xf8>
c001bd04:	b8 01 00 00 00       	mov    eax,0x1
c001bd09:	eb ac                	jmp    c001bcb7 <__udivdi3+0x27>
c001bd0b:	90                   	nop
c001bd0c:	31 db                	xor    ebx,ebx
c001bd0e:	31 c0                	xor    eax,eax
c001bd10:	89 da                	mov    edx,ebx
c001bd12:	83 c4 1c             	add    esp,0x1c
c001bd15:	5b                   	pop    ebx
c001bd16:	5e                   	pop    esi
c001bd17:	5f                   	pop    edi
c001bd18:	5d                   	pop    ebp
c001bd19:	c3                   	ret    
c001bd1a:	66 90                	xchg   ax,ax
c001bd1c:	b8 20 00 00 00       	mov    eax,0x20
c001bd21:	29 d8                	sub    eax,ebx
c001bd23:	88 d9                	mov    cl,bl
c001bd25:	d3 e2                	shl    edx,cl
c001bd27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bd2b:	89 fa                	mov    edx,edi
c001bd2d:	88 c1                	mov    cl,al
c001bd2f:	d3 ea                	shr    edx,cl
c001bd31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd35:	09 d1                	or     ecx,edx
c001bd37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd3b:	88 d9                	mov    cl,bl
c001bd3d:	d3 e7                	shl    edi,cl
c001bd3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd43:	89 f7                	mov    edi,esi
c001bd45:	88 c1                	mov    cl,al
c001bd47:	d3 ef                	shr    edi,cl
c001bd49:	88 d9                	mov    cl,bl
c001bd4b:	d3 e6                	shl    esi,cl
c001bd4d:	89 ea                	mov    edx,ebp
c001bd4f:	88 c1                	mov    cl,al
c001bd51:	d3 ea                	shr    edx,cl
c001bd53:	09 d6                	or     esi,edx
c001bd55:	89 f0                	mov    eax,esi
c001bd57:	89 fa                	mov    edx,edi
c001bd59:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd5d:	89 d7                	mov    edi,edx
c001bd5f:	89 c6                	mov    esi,eax
c001bd61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd65:	39 d7                	cmp    edi,edx
c001bd67:	72 13                	jb     c001bd7c <__udivdi3+0xec>
c001bd69:	74 09                	je     c001bd74 <__udivdi3+0xe4>
c001bd6b:	89 f0                	mov    eax,esi
c001bd6d:	31 db                	xor    ebx,ebx
c001bd6f:	e9 43 ff ff ff       	jmp    c001bcb7 <__udivdi3+0x27>
c001bd74:	88 d9                	mov    cl,bl
c001bd76:	d3 e5                	shl    ebp,cl
c001bd78:	39 c5                	cmp    ebp,eax
c001bd7a:	73 ef                	jae    c001bd6b <__udivdi3+0xdb>
c001bd7c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd7f:	31 db                	xor    ebx,ebx
c001bd81:	e9 31 ff ff ff       	jmp    c001bcb7 <__udivdi3+0x27>
c001bd86:	66 90                	xchg   ax,ax
c001bd88:	31 c0                	xor    eax,eax
c001bd8a:	e9 28 ff ff ff       	jmp    c001bcb7 <__udivdi3+0x27>
c001bd8f:	90                   	nop

c001bd90 <__umoddi3>:
c001bd90:	55                   	push   ebp
c001bd91:	57                   	push   edi
c001bd92:	56                   	push   esi
c001bd93:	53                   	push   ebx
c001bd94:	83 ec 1c             	sub    esp,0x1c
c001bd97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd9f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bda3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bda7:	89 da                	mov    edx,ebx
c001bda9:	85 c0                	test   eax,eax
c001bdab:	75 37                	jne    c001bde4 <__umoddi3+0x54>
c001bdad:	39 df                	cmp    edi,ebx
c001bdaf:	76 13                	jbe    c001bdc4 <__umoddi3+0x34>
c001bdb1:	89 f0                	mov    eax,esi
c001bdb3:	f7 f7                	div    edi
c001bdb5:	89 d0                	mov    eax,edx
c001bdb7:	31 d2                	xor    edx,edx
c001bdb9:	83 c4 1c             	add    esp,0x1c
c001bdbc:	5b                   	pop    ebx
c001bdbd:	5e                   	pop    esi
c001bdbe:	5f                   	pop    edi
c001bdbf:	5d                   	pop    ebp
c001bdc0:	c3                   	ret    
c001bdc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc4:	89 fd                	mov    ebp,edi
c001bdc6:	85 ff                	test   edi,edi
c001bdc8:	75 0b                	jne    c001bdd5 <__umoddi3+0x45>
c001bdca:	b8 01 00 00 00       	mov    eax,0x1
c001bdcf:	31 d2                	xor    edx,edx
c001bdd1:	f7 f7                	div    edi
c001bdd3:	89 c5                	mov    ebp,eax
c001bdd5:	89 d8                	mov    eax,ebx
c001bdd7:	31 d2                	xor    edx,edx
c001bdd9:	f7 f5                	div    ebp
c001bddb:	89 f0                	mov    eax,esi
c001bddd:	f7 f5                	div    ebp
c001bddf:	89 d0                	mov    eax,edx
c001bde1:	eb d4                	jmp    c001bdb7 <__umoddi3+0x27>
c001bde3:	90                   	nop
c001bde4:	89 f1                	mov    ecx,esi
c001bde6:	39 d8                	cmp    eax,ebx
c001bde8:	76 0a                	jbe    c001bdf4 <__umoddi3+0x64>
c001bdea:	89 f0                	mov    eax,esi
c001bdec:	83 c4 1c             	add    esp,0x1c
c001bdef:	5b                   	pop    ebx
c001bdf0:	5e                   	pop    esi
c001bdf1:	5f                   	pop    edi
c001bdf2:	5d                   	pop    ebp
c001bdf3:	c3                   	ret    
c001bdf4:	0f bd e8             	bsr    ebp,eax
c001bdf7:	83 f5 1f             	xor    ebp,0x1f
c001bdfa:	75 1c                	jne    c001be18 <__umoddi3+0x88>
c001bdfc:	39 d8                	cmp    eax,ebx
c001bdfe:	72 04                	jb     c001be04 <__umoddi3+0x74>
c001be00:	39 f7                	cmp    edi,esi
c001be02:	77 08                	ja     c001be0c <__umoddi3+0x7c>
c001be04:	89 da                	mov    edx,ebx
c001be06:	29 fe                	sub    esi,edi
c001be08:	19 c2                	sbb    edx,eax
c001be0a:	89 f1                	mov    ecx,esi
c001be0c:	89 c8                	mov    eax,ecx
c001be0e:	83 c4 1c             	add    esp,0x1c
c001be11:	5b                   	pop    ebx
c001be12:	5e                   	pop    esi
c001be13:	5f                   	pop    edi
c001be14:	5d                   	pop    ebp
c001be15:	c3                   	ret    
c001be16:	66 90                	xchg   ax,ax
c001be18:	ba 20 00 00 00       	mov    edx,0x20
c001be1d:	29 ea                	sub    edx,ebp
c001be1f:	89 e9                	mov    ecx,ebp
c001be21:	d3 e0                	shl    eax,cl
c001be23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be27:	89 f8                	mov    eax,edi
c001be29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001be2d:	88 d1                	mov    cl,dl
c001be2f:	d3 e8                	shr    eax,cl
c001be31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be35:	09 c1                	or     ecx,eax
c001be37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001be3b:	89 e9                	mov    ecx,ebp
c001be3d:	d3 e7                	shl    edi,cl
c001be3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001be43:	89 d8                	mov    eax,ebx
c001be45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be49:	88 d1                	mov    cl,dl
c001be4b:	d3 e8                	shr    eax,cl
c001be4d:	89 c7                	mov    edi,eax
c001be4f:	89 e9                	mov    ecx,ebp
c001be51:	d3 e3                	shl    ebx,cl
c001be53:	89 f0                	mov    eax,esi
c001be55:	88 d1                	mov    cl,dl
c001be57:	d3 e8                	shr    eax,cl
c001be59:	09 d8                	or     eax,ebx
c001be5b:	89 e9                	mov    ecx,ebp
c001be5d:	d3 e6                	shl    esi,cl
c001be5f:	89 f3                	mov    ebx,esi
c001be61:	89 fa                	mov    edx,edi
c001be63:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be67:	89 d1                	mov    ecx,edx
c001be69:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be6d:	89 c6                	mov    esi,eax
c001be6f:	89 d7                	mov    edi,edx
c001be71:	39 d1                	cmp    ecx,edx
c001be73:	72 27                	jb     c001be9c <__umoddi3+0x10c>
c001be75:	74 21                	je     c001be98 <__umoddi3+0x108>
c001be77:	89 ca                	mov    edx,ecx
c001be79:	29 f3                	sub    ebx,esi
c001be7b:	19 fa                	sbb    edx,edi
c001be7d:	89 d0                	mov    eax,edx
c001be7f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be83:	d3 e0                	shl    eax,cl
c001be85:	89 e9                	mov    ecx,ebp
c001be87:	d3 eb                	shr    ebx,cl
c001be89:	09 d8                	or     eax,ebx
c001be8b:	d3 ea                	shr    edx,cl
c001be8d:	83 c4 1c             	add    esp,0x1c
c001be90:	5b                   	pop    ebx
c001be91:	5e                   	pop    esi
c001be92:	5f                   	pop    edi
c001be93:	5d                   	pop    ebp
c001be94:	c3                   	ret    
c001be95:	8d 76 00             	lea    esi,[esi+0x0]
c001be98:	39 c3                	cmp    ebx,eax
c001be9a:	73 db                	jae    c001be77 <__umoddi3+0xe7>
c001be9c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bea0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001bea4:	89 d7                	mov    edi,edx
c001bea6:	89 c6                	mov    esi,eax
c001bea8:	eb cd                	jmp    c001be77 <__umoddi3+0xe7>

Disassembly of section .init:

c001beaa <_init>:
c001beaa:	55                   	push   ebp
c001beab:	89 e5                	mov    ebp,esp
c001bead:	e8 42 42 fe ff       	call   c00000f4 <frame_dummy>
c001beb2:	e8 e5 fa ff ff       	call   c001b99c <__do_global_ctors_aux>
c001beb7:	5d                   	pop    ebp
c001beb8:	c3                   	ret    

Disassembly of section .fini:

c001beb9 <_fini>:
c001beb9:	55                   	push   ebp
c001beba:	89 e5                	mov    ebp,esp
c001bebc:	e8 c3 41 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001bec1:	5d                   	pop    ebp
c001bec2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001bec4 <Computer::~Computer()>:
c001bec4:	83 ec 0c             	sub    esp,0xc
c001bec7:	ba 78 d1 01 c0       	mov    edx,0xc001d178
c001becc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed0:	89 10                	mov    DWORD PTR [eax],edx
c001bed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed6:	83 ec 0c             	sub    esp,0xc
c001bed9:	50                   	push   eax
c001beda:	e8 6b f9 fe ff       	call   c000b84a <Device::~Device()>
c001bedf:	83 c4 10             	add    esp,0x10
c001bee2:	90                   	nop
c001bee3:	83 c4 0c             	add    esp,0xc
c001bee6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bee8 <Computer::~Computer()>:
c001bee8:	83 ec 0c             	sub    esp,0xc
c001beeb:	83 ec 0c             	sub    esp,0xc
c001beee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bef2:	e8 cd ff ff ff       	call   c001bec4 <Computer::~Computer()>
c001bef7:	83 c4 10             	add    esp,0x10
c001befa:	83 ec 08             	sub    esp,0x8
c001befd:	68 70 01 00 00       	push   0x170
c001bf02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf06:	e8 07 e5 fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001bf0b:	83 c4 10             	add    esp,0x10
c001bf0e:	83 c4 0c             	add    esp,0xc
c001bf11:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bf12 <idleCommon()>:
c001bf12:	83 ec 0c             	sub    esp,0xc
c001bf15:	fa                   	cli    
c001bf16:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001bf1c:	e8 73 74 ff ff       	call   c0013394 <schedule()>
c001bf21:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001bf26:	48                   	dec    eax
c001bf27:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001bf2c:	75 01                	jne    c001bf2f <idleCommon()+0x1d>
c001bf2e:	fb                   	sti    
c001bf2f:	83 c4 0c             	add    esp,0xc
c001bf32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bf34 <LinkedList<UnixFile>::~LinkedList()>:
c001bf34:	90                   	nop
c001bf35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bf36 <LinkedList<UnixFile>::LinkedList()>:
c001bf36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf76:	90                   	nop
c001bf77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf78 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf80:	75 10                	jne    c001bf92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf82:	83 ec 0c             	sub    esp,0xc
c001bf85:	68 d0 d3 01 c0       	push   0xc001d3d0
c001bf8a:	e8 f4 41 ff ff       	call   c0010183 <KePanic(char const*)>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf96:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf98:	85 c0                	test   eax,eax
c001bf9a:	74 34                	je     c001bfd0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfa3:	85 c0                	test   eax,eax
c001bfa5:	74 29                	je     c001bfd0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfce:	eb 65                	jmp    c001c035 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfd6:	85 c0                	test   eax,eax
c001bfd8:	75 4b                	jne    c001c025 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfe1:	85 c0                	test   eax,eax
c001bfe3:	75 40                	jne    c001c025 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfed:	89 10                	mov    DWORD PTR [eax],edx
c001bfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bff7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c001:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c00f:	85 c0                	test   eax,eax
c001c011:	74 22                	je     c001c035 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c013:	83 ec 0c             	sub    esp,0xc
c001c016:	68 f2 d3 01 c0       	push   0xc001d3f2
c001c01b:	e8 63 41 ff ff       	call   c0010183 <KePanic(char const*)>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	eb 10                	jmp    c001c035 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c025:	83 ec 0c             	sub    esp,0xc
c001c028:	68 fc d3 01 c0       	push   0xc001d3fc
c001c02d:	e8 51 41 ff ff       	call   c0010183 <KePanic(char const*)>
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c039:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c03c:	8d 50 01             	lea    edx,[eax+0x1]
c001c03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c043:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c046:	90                   	nop
c001c047:	83 c4 0c             	add    esp,0xc
c001c04a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c04c <LinkedList<UnixFile>::getFirstElement()>:
c001c04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c050:	8b 00                	mov    eax,DWORD PTR [eax]
c001c052:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c054 <LinkedList<UnixFile>::removeFirst()>:
c001c054:	83 ec 0c             	sub    esp,0xc
c001c057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c05b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c05d:	85 c0                	test   eax,eax
c001c05f:	75 12                	jne    c001c073 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c061:	83 ec 0c             	sub    esp,0xc
c001c064:	68 08 d4 01 c0       	push   0xc001d408
c001c069:	e8 15 41 ff ff       	call   c0010183 <KePanic(char const*)>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	eb 7e                	jmp    c001c0f1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c07a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c07d:	85 c0                	test   eax,eax
c001c07f:	74 10                	je     c001c091 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c081:	83 ec 0c             	sub    esp,0xc
c001c084:	68 53 d4 01 c0       	push   0xc001d453
c001c089:	e8 f5 40 ff ff       	call   c0010183 <KePanic(char const*)>
c001c08e:	83 c4 10             	add    esp,0x10
c001c091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c095:	8b 00                	mov    eax,DWORD PTR [eax]
c001c097:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c09a:	85 c0                	test   eax,eax
c001c09c:	75 33                	jne    c001c0d1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0ba:	83 f8 01             	cmp    eax,0x1
c001c0bd:	74 21                	je     c001c0e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	68 2c d4 01 c0       	push   0xc001d42c
c001c0c7:	e8 b7 40 ff ff       	call   c0010183 <KePanic(char const*)>
c001c0cc:	83 c4 10             	add    esp,0x10
c001c0cf:	eb 0f                	jmp    c001c0e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0de:	89 10                	mov    DWORD PTR [eax],edx
c001c0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c0f1:	83 c4 0c             	add    esp,0xc
c001c0f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c0f6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c0f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0fd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c0fe <DriverlessDevice::~DriverlessDevice()>:
c001c0fe:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c001c103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c107:	89 10                	mov    DWORD PTR [eax],edx
c001c109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c10d:	50                   	push   eax
c001c10e:	e8 37 f7 fe ff       	call   c000b84a <Device::~Device()>
c001c113:	83 c4 04             	add    esp,0x4
c001c116:	90                   	nop
c001c117:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c118 <DriverlessDevice::~DriverlessDevice()>:
c001c118:	83 ec 0c             	sub    esp,0xc
c001c11b:	83 ec 0c             	sub    esp,0xc
c001c11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c122:	e8 d7 ff ff ff       	call   c001c0fe <DriverlessDevice::~DriverlessDevice()>
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	83 ec 08             	sub    esp,0x8
c001c12d:	68 58 01 00 00       	push   0x158
c001c132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c136:	e8 d7 e2 fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c13b:	83 c4 10             	add    esp,0x10
c001c13e:	83 c4 0c             	add    esp,0xc
c001c141:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c142 <LinkedList<Device>::addElement(Device*)>:
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c14a:	75 10                	jne    c001c15c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c14c:	83 ec 0c             	sub    esp,0xc
c001c14f:	68 d0 d3 01 c0       	push   0xc001d3d0
c001c154:	e8 2a 40 ff ff       	call   c0010183 <KePanic(char const*)>
c001c159:	83 c4 10             	add    esp,0x10
c001c15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c160:	8b 00                	mov    eax,DWORD PTR [eax]
c001c162:	85 c0                	test   eax,eax
c001c164:	74 3a                	je     c001c1a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c16d:	85 c0                	test   eax,eax
c001c16f:	74 2f                	je     c001c1a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c175:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c178:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c17c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c18a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c191:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c194:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c19e:	eb 68                	jmp    c001c208 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1a6:	85 c0                	test   eax,eax
c001c1a8:	75 4e                	jne    c001c1f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1b1:	85 c0                	test   eax,eax
c001c1b3:	75 43                	jne    c001c1f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1bd:	89 10                	mov    DWORD PTR [eax],edx
c001c1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1d1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1e2:	85 c0                	test   eax,eax
c001c1e4:	74 22                	je     c001c208 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1e6:	83 ec 0c             	sub    esp,0xc
c001c1e9:	68 f2 d3 01 c0       	push   0xc001d3f2
c001c1ee:	e8 90 3f ff ff       	call   c0010183 <KePanic(char const*)>
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	eb 10                	jmp    c001c208 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1f8:	83 ec 0c             	sub    esp,0xc
c001c1fb:	68 fc d3 01 c0       	push   0xc001d3fc
c001c200:	e8 7e 3f ff ff       	call   c0010183 <KePanic(char const*)>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c20f:	8d 50 01             	lea    edx,[eax+0x1]
c001c212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c216:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c219:	90                   	nop
c001c21a:	83 c4 0c             	add    esp,0xc
c001c21d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c21e <LinkedList<Device>::LinkedList()>:
c001c21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c222:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c22c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c237:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c24c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c257:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c25e:	90                   	nop
c001c25f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c260 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c264:	8b 00                	mov    eax,DWORD PTR [eax]
c001c266:	85 c0                	test   eax,eax
c001c268:	75 0e                	jne    c001c278 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c26e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c271:	85 c0                	test   eax,eax
c001c273:	75 03                	jne    c001c278 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c275:	b0 01                	mov    al,0x1
c001c277:	c3                   	ret    
c001c278:	b0 00                	mov    al,0x0
c001c27a:	90                   	nop
c001c27b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c27c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c280:	8b 00                	mov    eax,DWORD PTR [eax]
c001c282:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c284 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c284:	83 ec 0c             	sub    esp,0xc
c001c287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c28d:	85 c0                	test   eax,eax
c001c28f:	75 17                	jne    c001c2a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c291:	83 ec 0c             	sub    esp,0xc
c001c294:	68 08 d4 01 c0       	push   0xc001d408
c001c299:	e8 e5 3e ff ff       	call   c0010183 <KePanic(char const*)>
c001c29e:	83 c4 10             	add    esp,0x10
c001c2a1:	e9 92 00 00 00       	jmp    c001c338 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2b2:	85 c0                	test   eax,eax
c001c2b4:	0f 95 c0             	setne  al
c001c2b7:	84 c0                	test   al,al
c001c2b9:	74 11                	je     c001c2cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	68 53 d4 01 c0       	push   0xc001d453
c001c2c3:	e8 bb 3e ff ff       	call   c0010183 <KePanic(char const*)>
c001c2c8:	83 c4 10             	add    esp,0x10
c001c2cb:	90                   	nop
c001c2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2d5:	85 c0                	test   eax,eax
c001c2d7:	0f 94 c0             	sete   al
c001c2da:	84 c0                	test   al,al
c001c2dc:	74 36                	je     c001c314 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2fa:	83 f8 01             	cmp    eax,0x1
c001c2fd:	74 25                	je     c001c324 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2ff:	83 ec 0c             	sub    esp,0xc
c001c302:	68 2c d4 01 c0       	push   0xc001d42c
c001c307:	e8 77 3e ff ff       	call   c0010183 <KePanic(char const*)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	eb 13                	jmp    c001c324 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c311:	8d 76 00             	lea    esi,[esi+0x0]
c001c314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c318:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c31d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c321:	89 10                	mov    DWORD PTR [eax],edx
c001c323:	90                   	nop
c001c324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c32b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c332:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c335:	8d 76 00             	lea    esi,[esi+0x0]
c001c338:	83 c4 0c             	add    esp,0xc
c001c33b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c33c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c33c:	83 ec 0c             	sub    esp,0xc
c001c33f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c344:	75 12                	jne    c001c358 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	68 d0 d3 01 c0       	push   0xc001d3d0
c001c34e:	e8 30 3e ff ff       	call   c0010183 <KePanic(char const*)>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	66 90                	xchg   ax,ax
c001c358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c35e:	85 c0                	test   eax,eax
c001c360:	74 36                	je     c001c398 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c369:	85 c0                	test   eax,eax
c001c36b:	74 2b                	je     c001c398 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c371:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c378:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c383:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c38d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c394:	eb 6a                	jmp    c001c400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c396:	66 90                	xchg   ax,ax
c001c398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c39e:	85 c0                	test   eax,eax
c001c3a0:	75 4e                	jne    c001c3f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3a9:	85 c0                	test   eax,eax
c001c3ab:	75 43                	jne    c001c3f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3b5:	89 10                	mov    DWORD PTR [eax],edx
c001c3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3d7:	85 c0                	test   eax,eax
c001c3d9:	74 25                	je     c001c400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3db:	83 ec 0c             	sub    esp,0xc
c001c3de:	68 f2 d3 01 c0       	push   0xc001d3f2
c001c3e3:	e8 9b 3d ff ff       	call   c0010183 <KePanic(char const*)>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	eb 13                	jmp    c001c400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f0:	83 ec 0c             	sub    esp,0xc
c001c3f3:	68 fc d3 01 c0       	push   0xc001d3fc
c001c3f8:	e8 86 3d ff ff       	call   c0010183 <KePanic(char const*)>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c404:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c407:	8d 50 01             	lea    edx,[eax+0x1]
c001c40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c411:	90                   	nop
c001c412:	83 c4 0c             	add    esp,0xc
c001c415:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c418 <ACPI::~ACPI()>:
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c001c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c424:	89 10                	mov    DWORD PTR [eax],edx
c001c426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	50                   	push   eax
c001c42e:	e8 17 f4 fe ff       	call   c000b84a <Device::~Device()>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	90                   	nop
c001c437:	83 c4 0c             	add    esp,0xc
c001c43a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c43c <ACPI::~ACPI()>:
c001c43c:	83 ec 0c             	sub    esp,0xc
c001c43f:	83 ec 0c             	sub    esp,0xc
c001c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c446:	e8 cd ff ff ff       	call   c001c418 <ACPI::~ACPI()>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	83 ec 08             	sub    esp,0x8
c001c451:	68 64 12 00 00       	push   0x1264
c001c456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c45a:	e8 b3 df fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	83 c4 0c             	add    esp,0xc
c001c465:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c468 <LinkedList<Device>::~LinkedList()>:
c001c468:	90                   	nop
c001c469:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c46c <LinkedList<Device>::isEmpty()>:
c001c46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c470:	8b 00                	mov    eax,DWORD PTR [eax]
c001c472:	85 c0                	test   eax,eax
c001c474:	75 0e                	jne    c001c484 <LinkedList<Device>::isEmpty()+0x18>
c001c476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c47d:	85 c0                	test   eax,eax
c001c47f:	75 03                	jne    c001c484 <LinkedList<Device>::isEmpty()+0x18>
c001c481:	b0 01                	mov    al,0x1
c001c483:	c3                   	ret    
c001c484:	b0 00                	mov    al,0x0
c001c486:	90                   	nop
c001c487:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c488 <LinkedList<Device>::getFirstElement()>:
c001c488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c48c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c48e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c490 <LinkedList<Device>::removeFirst()>:
c001c490:	83 ec 0c             	sub    esp,0xc
c001c493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c497:	8b 00                	mov    eax,DWORD PTR [eax]
c001c499:	85 c0                	test   eax,eax
c001c49b:	75 17                	jne    c001c4b4 <LinkedList<Device>::removeFirst()+0x24>
c001c49d:	83 ec 0c             	sub    esp,0xc
c001c4a0:	68 08 d4 01 c0       	push   0xc001d408
c001c4a5:	e8 d9 3c ff ff       	call   c0010183 <KePanic(char const*)>
c001c4aa:	83 c4 10             	add    esp,0x10
c001c4ad:	e9 92 00 00 00       	jmp    c001c544 <LinkedList<Device>::removeFirst()+0xb4>
c001c4b2:	66 90                	xchg   ax,ax
c001c4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4bb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4c1:	85 c0                	test   eax,eax
c001c4c3:	74 13                	je     c001c4d8 <LinkedList<Device>::removeFirst()+0x48>
c001c4c5:	83 ec 0c             	sub    esp,0xc
c001c4c8:	68 53 d4 01 c0       	push   0xc001d453
c001c4cd:	e8 b1 3c ff ff       	call   c0010183 <KePanic(char const*)>
c001c4d2:	83 c4 10             	add    esp,0x10
c001c4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4de:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4e4:	85 c0                	test   eax,eax
c001c4e6:	75 34                	jne    c001c51c <LinkedList<Device>::removeFirst()+0x8c>
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c501:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c504:	83 f8 01             	cmp    eax,0x1
c001c507:	74 27                	je     c001c530 <LinkedList<Device>::removeFirst()+0xa0>
c001c509:	83 ec 0c             	sub    esp,0xc
c001c50c:	68 2c d4 01 c0       	push   0xc001d42c
c001c511:	e8 6d 3c ff ff       	call   c0010183 <KePanic(char const*)>
c001c516:	83 c4 10             	add    esp,0x10
c001c519:	eb 15                	jmp    c001c530 <LinkedList<Device>::removeFirst()+0xa0>
c001c51b:	90                   	nop
c001c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c520:	8b 00                	mov    eax,DWORD PTR [eax]
c001c522:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52c:	89 10                	mov    DWORD PTR [eax],edx
c001c52e:	66 90                	xchg   ax,ax
c001c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c534:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c537:	8d 50 ff             	lea    edx,[eax-0x1]
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c541:	8d 76 00             	lea    esi,[esi+0x0]
c001c544:	83 c4 0c             	add    esp,0xc
c001c547:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c548 <CPU::~CPU()>:
c001c548:	83 ec 0c             	sub    esp,0xc
c001c54b:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	89 10                	mov    DWORD PTR [eax],edx
c001c556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55a:	83 ec 0c             	sub    esp,0xc
c001c55d:	50                   	push   eax
c001c55e:	e8 e7 f2 fe ff       	call   c000b84a <Device::~Device()>
c001c563:	83 c4 10             	add    esp,0x10
c001c566:	90                   	nop
c001c567:	83 c4 0c             	add    esp,0xc
c001c56a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c56c <CPU::~CPU()>:
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	83 ec 0c             	sub    esp,0xc
c001c572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c576:	e8 cd ff ff ff       	call   c001c548 <CPU::~CPU()>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	83 ec 08             	sub    esp,0x8
c001c581:	68 94 11 00 00       	push   0x1194
c001c586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c58a:	e8 83 de fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	83 c4 0c             	add    esp,0xc
c001c595:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c598 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c598:	90                   	nop
c001c599:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c59c <ThreadControlBlock::ThreadControlBlock()>:
c001c59c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ab:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c5d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c5db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5df:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c5e3:	90                   	nop
c001c5e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c5e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c601:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c60c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c616:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c621:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c628:	90                   	nop
c001c629:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c62c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c62c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c630:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c633:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c634 <PCI::~PCI()>:
c001c634:	83 ec 0c             	sub    esp,0xc
c001c637:	ba f8 ec 01 c0       	mov    edx,0xc001ecf8
c001c63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c640:	89 10                	mov    DWORD PTR [eax],edx
c001c642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c646:	83 ec 0c             	sub    esp,0xc
c001c649:	50                   	push   eax
c001c64a:	e8 85 ec fe ff       	call   c000b2d4 <Bus::~Bus()>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	90                   	nop
c001c653:	83 c4 0c             	add    esp,0xc
c001c656:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c658 <PCI::~PCI()>:
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	83 ec 0c             	sub    esp,0xc
c001c65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c662:	e8 cd ff ff ff       	call   c001c634 <PCI::~PCI()>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	83 ec 08             	sub    esp,0x8
c001c66d:	68 5c 01 00 00       	push   0x15c
c001c672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c676:	e8 97 dd fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	83 c4 0c             	add    esp,0xc
c001c681:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c682 <IDE::~IDE()>:
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	ba ac ed 01 c0       	mov    edx,0xc001edac
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	89 10                	mov    DWORD PTR [eax],edx
c001c690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c694:	83 ec 0c             	sub    esp,0xc
c001c697:	50                   	push   eax
c001c698:	e8 27 f6 fe ff       	call   c000bcc4 <HardDiskController::~HardDiskController()>
c001c69d:	83 c4 10             	add    esp,0x10
c001c6a0:	90                   	nop
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c6a6 <IDE::~IDE()>:
c001c6a6:	83 ec 0c             	sub    esp,0xc
c001c6a9:	83 ec 0c             	sub    esp,0xc
c001c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b0:	e8 cd ff ff ff       	call   c001c682 <IDE::~IDE()>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	83 ec 08             	sub    esp,0x8
c001c6bb:	68 70 02 00 00       	push   0x270
c001c6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c4:	e8 49 dd fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	83 c4 0c             	add    esp,0xc
c001c6cf:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c6d0 <SATABus::~SATABus()>:
c001c6d0:	83 ec 0c             	sub    esp,0xc
c001c6d3:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c001c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6dc:	89 10                	mov    DWORD PTR [eax],edx
c001c6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e2:	83 ec 0c             	sub    esp,0xc
c001c6e5:	50                   	push   eax
c001c6e6:	e8 d9 f5 fe ff       	call   c000bcc4 <HardDiskController::~HardDiskController()>
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	90                   	nop
c001c6ef:	83 c4 0c             	add    esp,0xc
c001c6f2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c6f4 <SATABus::~SATABus()>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	83 ec 0c             	sub    esp,0xc
c001c6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6fe:	e8 cd ff ff ff       	call   c001c6d0 <SATABus::~SATABus()>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	83 ec 08             	sub    esp,0x8
c001c709:	68 64 01 00 00       	push   0x164
c001c70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c712:	e8 fb dc fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c717:	83 c4 10             	add    esp,0x10
c001c71a:	83 c4 0c             	add    esp,0xc
c001c71d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c71e <ATA::~ATA()>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	ba 3c ee 01 c0       	mov    edx,0xc001ee3c
c001c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72a:	89 10                	mov    DWORD PTR [eax],edx
c001c72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c730:	83 ec 0c             	sub    esp,0xc
c001c733:	50                   	push   eax
c001c734:	e8 6d f6 fe ff       	call   c000bda6 <PhysicalDisk::~PhysicalDisk()>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	90                   	nop
c001c73d:	83 c4 0c             	add    esp,0xc
c001c740:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c742 <ATA::~ATA()>:
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	83 ec 0c             	sub    esp,0xc
c001c748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c74c:	e8 cd ff ff ff       	call   c001c71e <ATA::~ATA()>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	83 ec 08             	sub    esp,0x8
c001c757:	68 7c 01 00 00       	push   0x17c
c001c75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c760:	e8 ad dc fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	83 c4 0c             	add    esp,0xc
c001c76b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c76c <ATAPI::~ATAPI()>:
c001c76c:	83 ec 0c             	sub    esp,0xc
c001c76f:	ba 84 ee 01 c0       	mov    edx,0xc001ee84
c001c774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c778:	89 10                	mov    DWORD PTR [eax],edx
c001c77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77e:	83 ec 0c             	sub    esp,0xc
c001c781:	50                   	push   eax
c001c782:	e8 1f f6 fe ff       	call   c000bda6 <PhysicalDisk::~PhysicalDisk()>
c001c787:	83 c4 10             	add    esp,0x10
c001c78a:	90                   	nop
c001c78b:	83 c4 0c             	add    esp,0xc
c001c78e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c790 <ATAPI::~ATAPI()>:
c001c790:	83 ec 0c             	sub    esp,0xc
c001c793:	83 ec 0c             	sub    esp,0xc
c001c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c79a:	e8 cd ff ff ff       	call   c001c76c <ATAPI::~ATAPI()>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	83 ec 08             	sub    esp,0x8
c001c7a5:	68 84 01 00 00       	push   0x184
c001c7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ae:	e8 5f dc fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	83 c4 0c             	add    esp,0xc
c001c7b9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c7ba <SATA::~SATA()>:
c001c7ba:	83 ec 0c             	sub    esp,0xc
c001c7bd:	ba 38 ef 01 c0       	mov    edx,0xc001ef38
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	89 10                	mov    DWORD PTR [eax],edx
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	50                   	push   eax
c001c7d0:	e8 d1 f5 fe ff       	call   c000bda6 <PhysicalDisk::~PhysicalDisk()>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	90                   	nop
c001c7d9:	83 c4 0c             	add    esp,0xc
c001c7dc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c7de <SATA::~SATA()>:
c001c7de:	83 ec 0c             	sub    esp,0xc
c001c7e1:	83 ec 0c             	sub    esp,0xc
c001c7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e8:	e8 cd ff ff ff       	call   c001c7ba <SATA::~SATA()>
c001c7ed:	83 c4 10             	add    esp,0x10
c001c7f0:	83 ec 08             	sub    esp,0x8
c001c7f3:	68 7c 01 00 00       	push   0x17c
c001c7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7fc:	e8 11 dc fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	83 c4 0c             	add    esp,0xc
c001c807:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c808 <SATAPI::~SATAPI()>:
c001c808:	83 ec 0c             	sub    esp,0xc
c001c80b:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001c810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c814:	89 10                	mov    DWORD PTR [eax],edx
c001c816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81a:	83 ec 0c             	sub    esp,0xc
c001c81d:	50                   	push   eax
c001c81e:	e8 83 f5 fe ff       	call   c000bda6 <PhysicalDisk::~PhysicalDisk()>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	90                   	nop
c001c827:	83 c4 0c             	add    esp,0xc
c001c82a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c82c <SATAPI::~SATAPI()>:
c001c82c:	83 ec 0c             	sub    esp,0xc
c001c82f:	83 ec 0c             	sub    esp,0xc
c001c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c836:	e8 cd ff ff ff       	call   c001c808 <SATAPI::~SATAPI()>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	83 ec 08             	sub    esp,0x8
c001c841:	68 84 01 00 00       	push   0x184
c001c846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c84a:	e8 c3 db fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	83 c4 0c             	add    esp,0xc
c001c855:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c856 <IOAPIC::~IOAPIC()>:
c001c856:	83 ec 0c             	sub    esp,0xc
c001c859:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c001c85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c862:	89 10                	mov    DWORD PTR [eax],edx
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	83 ec 0c             	sub    esp,0xc
c001c86b:	50                   	push   eax
c001c86c:	e8 d9 ef fe ff       	call   c000b84a <Device::~Device()>
c001c871:	83 c4 10             	add    esp,0x10
c001c874:	90                   	nop
c001c875:	83 c4 0c             	add    esp,0xc
c001c878:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c87a <IOAPIC::~IOAPIC()>:
c001c87a:	83 ec 0c             	sub    esp,0xc
c001c87d:	83 ec 0c             	sub    esp,0xc
c001c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c884:	e8 cd ff ff ff       	call   c001c856 <IOAPIC::~IOAPIC()>
c001c889:	83 c4 10             	add    esp,0x10
c001c88c:	83 ec 08             	sub    esp,0x8
c001c88f:	68 68 01 00 00       	push   0x168
c001c894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c898:	e8 75 db fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c89d:	83 c4 10             	add    esp,0x10
c001c8a0:	83 c4 0c             	add    esp,0xc
c001c8a3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c8a4 <APICTimer::~APICTimer()>:
c001c8a4:	83 ec 0c             	sub    esp,0xc
c001c8a7:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c001c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b0:	89 10                	mov    DWORD PTR [eax],edx
c001c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	50                   	push   eax
c001c8ba:	e8 a1 08 ff ff       	call   c000d160 <Timer::~Timer()>
c001c8bf:	83 c4 10             	add    esp,0x10
c001c8c2:	90                   	nop
c001c8c3:	83 c4 0c             	add    esp,0xc
c001c8c6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c8c8 <APICTimer::~APICTimer()>:
c001c8c8:	83 ec 0c             	sub    esp,0xc
c001c8cb:	83 ec 0c             	sub    esp,0xc
c001c8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8d2:	e8 cd ff ff ff       	call   c001c8a4 <APICTimer::~APICTimer()>
c001c8d7:	83 c4 10             	add    esp,0x10
c001c8da:	83 ec 08             	sub    esp,0x8
c001c8dd:	68 60 01 00 00       	push   0x160
c001c8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e6:	e8 27 db fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c8eb:	83 c4 10             	add    esp,0x10
c001c8ee:	83 c4 0c             	add    esp,0xc
c001c8f1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c8f4 <PIT::~PIT()>:
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	ba 48 f1 01 c0       	mov    edx,0xc001f148
c001c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c900:	89 10                	mov    DWORD PTR [eax],edx
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	50                   	push   eax
c001c90a:	e8 51 08 ff ff       	call   c000d160 <Timer::~Timer()>
c001c90f:	83 c4 10             	add    esp,0x10
c001c912:	90                   	nop
c001c913:	83 c4 0c             	add    esp,0xc
c001c916:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c918 <PIT::~PIT()>:
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	83 ec 0c             	sub    esp,0xc
c001c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c922:	e8 cd ff ff ff       	call   c001c8f4 <PIT::~PIT()>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	83 ec 08             	sub    esp,0x8
c001c92d:	68 5c 01 00 00       	push   0x15c
c001c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c936:	e8 d7 da fe ff       	call   c000a412 <operator delete(void*, unsigned long)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	83 c4 0c             	add    esp,0xc
c001c941:	c3                   	ret    
